// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function(filename) { return Module['read'](filename, true) };
  Module['load'] = function(f) {
    globalEval(read(f));
  };
  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}
if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  Module['read'] = read;
  Module['readBinary'] = function(f) {
    return read(f, 'binary');
  };
  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }
  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  Module['load'] = importScripts;
}
if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 4,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2 + 2*i;
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = ((((DYNAMICTOP)+3)>>2)<<2); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+(((low)>>>(0))))+((+(((high)>>>(0))))*(+(4294967296)))) : ((+(((low)>>>(0))))+((+(((high)|(0))))*(+(4294967296))))); return ret; },
  GLOBAL_BASE: 4,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = globalScope['Module']['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/(+(4294967296))), (+(4294967295)))>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=((HEAP32[((tempDoublePtr)>>2)])|0),HEAP32[(((ptr)+(4))>>2)]=((HEAP32[(((tempDoublePtr)+(4))>>2)])|0)); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays in asm.js. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, or (2) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown
var runtimeInitialized = false;
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledInit = false, calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
function addPreRun(func) {
  if (!Module['preRun']) Module['preRun'] = [];
  else if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
  Module['preRun'].push(func);
}
var awaitingMemoryInitializer = false;
function loadMemoryInitializer(filename) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
    runPostSets();
  }
  // always do this asynchronously, to keep shell and web as similar as possible
  addPreRun(function() {
    if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
      applyData(Module['readBinary'](filename));
    } else {
      Browser.asyncLoad(filename, function(data) {
        applyData(data);
      }, function(data) {
        throw 'could not load memory initializer ' + filename;
      });
    }
  });
  awaitingMemoryInitializer = false;
}
// === Body ===
STATIC_BASE = 4;
STATICTOP = STATIC_BASE + 112184;
var _stdout;
var _stderr;
var _stdout = _stdout=allocate([0,0,0,0], "i8", ALLOC_STATIC);
var _stderr = _stderr=allocate([0,0,0,0], "i8", ALLOC_STATIC);
/* memory initializer */ allocate([0,2,2,2,2,2,2,2,2,2,150,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,127,2,2,2,125,120,2,146,147,123,121,144,122,143,124,2,2,2,2,2,2,2,2,2,2,115,149,117,113,116,114,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,142,2,148,119,2,145,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,140,118,141,128,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,126,129,130,131,132,133,134,135,136,137,138,139,92,152,1,0,60,152,1,0,44,152,1,0,236,151,1,0,200,151,1,0,188,151,1,0,64,151,1,0,48,151,1,0,32,151,1,0,16,151,1,0,240,150,1,0,192,150,1,0,176,150,1,0,152,150,1,0,124,150,1,0,108,150,1,0,44,150,1,0,28,150,1,0,12,150,1,0,252,149,1,0,220,149,1,0,200,149,1,0,184,149,1,0,168,149,1,0,124,149,1,0,112,149,1,0,248,148,1,0,232,148,1,0,212,148,1,0,192,148,1,0,168,148,1,0,148,148,1,0,132,148,1,0,96,148,1,0,72,148,1,0,44,148,1,0,232,147,1,0,220,147,1,0,208,147,1,0,196,147,1,0,176,147,1,0,140,147,1,0,124,147,1,0,88,147,1,0,40,147,1,0,24,147,1,0,212,146,1,0,200,146,1,0,184,146,1,0,160,146,1,0,132,146,1,0,116,146,1,0,108,146,1,0,80,146,1,0,56,146,1,0,16,146,1,0,180,145,1,0,152,145,1,0,112,145,1,0,56,145,1,0,220,144,1,0,144,144,1,0,104,144,1,0,72,144,1,0,12,144,1,0,0,144,1,0,140,143,1,0,128,143,1,0,116,143,1,0,108,143,1,0,100,143,1,0,80,143,1,0,72,143,1,0,52,143,1,0,20,143,1,0,12,143,1,0,208,142,1,0,200,142,1,0,192,142,1,0,184,142,1,0,176,142,1,0,120,142,1,0,112,142,1,0,84,142,1,0,60,142,1,0,52,142,1,0,244,141,1,0,236,141,1,0,228,141,1,0,220,141,1,0,208,141,1,0,160,141,1,0,152,141,1,0,124,141,1,0,108,141,1,0,100,141,1,0,32,141,1,0,20,141,1,0,12,141,1,0,4,141,1,0,252,140,1,0,236,140,1,0,220,140,1,0,192,140,1,0,168,140,1,0,156,140,1,0,44,140,1,0,28,140,1,0,20,140,1,0,4,140,1,0,204,139,1,0,176,139,1,0,168,139,1,0,140,139,1,0,128,139,1,0,124,139,1,0,48,139,1,0,44,139,1,0,40,139,1,0,36,139,1,0,32,139,1,0,8,139,1,0,4,139,1,0,232,138,1,0,212,138,1,0,208,138,1,0,92,138,1,0,88,138,1,0,84,138,1,0,76,138,1,0,60,138,1,0,20,138,1,0,12,138,1,0,216,137,1,0,180,137,1,0,148,137,1,0,24,137,1,0,248,136,1,0,228,136,1,0,216,136,1,0,212,136,1,0,148,136,1,0,144,136,1,0,116,136,1,0,92,136,1,0,88,136,1,0,248,135,1,0,244,135,1,0,240,135,1,0,236,135,1,0,228,135,1,0,208,135,1,0,200,135,1,0,168,135,1,0,136,135,1,0,100,135,1,0,16,135,1,0,224,134,1,0,192,134,1,0,144,134,1,0,92,134,1,0,8,134,1,0,244,133,1,0,192,133,1,0,172,133,1,0,160,133,1,0,4,133,1,0,244,132,1,0,228,132,1,0,224,132,1,0,216,132,1,0,188,132,1,0,176,132,1,0,144,132,1,0,124,132,1,0,112,132,1,0,240,131,1,0,228,131,1,0,196,131,1,0,188,131,1,0,180,131,1,0,156,131,1,0,148,131,1,0,116,131,1,0,104,131,1,0,100,131,1,0,252,130,1,0,248,130,1,0,236,130,1,0,224,130,1,0,212,130,1,0,180,130,1,0,164,130,1,0,128,130,1,0,104,130,1,0,100,130,1,0,4,130,1,0,244,129,1,0,236,129,1,0,228,129,1,0,220,129,1,0,200,129,1,0,192,129,1,0,164,129,1,0,148,129,1,0,144,129,1,0,92,129,1,0,88,129,1,0,84,129,1,0,80,129,1,0,40,129,1,0,24,129,1,0,20,129,1,0,252,128,1,0,240,128,1,0,236,128,1,0,176,128,1,0,172,128,1,0,156,128,1,0,80,160,1,0,92,158,1,0,148,128,1,0,136,128,1,0,112,128,1,0,96,128,1,0,64,128,1,0,40,128,1,0,28,128,1,0,232,127,1,0,216,127,1,0,204,127,1,0,192,127,1,0,184,127,1,0,160,127,1,0,148,127,1,0,120,127,1,0,108,127,1,0,96,127,1,0,252,126,1,0,240,126,1,0,236,126,1,0,232,126,1,0,220,126,1,0,180,126,1,0,168,126,1,0,136,126,1,0,112,126,1,0,100,126,1,0,16,126,1,0,8,126,1,0,252,125,1,0,236,125,1,0,232,125,1,0,208,125,1,0,200,125,1,0,172,125,1,0,148,125,1,0,84,125,1,0,36,125,1,0,220,124,1,0,152,124,1,0,96,124,1,0,72,124,1,0,4,124,1,0,180,123,1,0,140,123,1,0,120,123,1,0,112,123,1,0,72,123,1,0,16,123,1,0,12,123,1,0,0,123,1,0,248,122,1,0,216,122,1,0,184,122,1,0,148,122,1,0,132,122,1,0,124,122,1,0,84,122,1,0,28,122,1,0,16,122,1,0,248,121,1,0,236,121,1,0,208,121,1,0,176,121,1,0,136,121,1,0,116,121,1,0,112,121,1,0,76,121,1,0,24,121,1,0,16,121,1,0,4,121,1,0,248,120,1,0,220,120,1,0,188,120,1,0,156,120,1,0,140,120,1,0,132,120,1,0,84,120,1,0,68,120,1,0,60,120,1,0,56,120,1,0,52,120,1,0,44,120,1,0,20,120,1,0,0,0,0,0,99,0,114,1,3,1,60,1,151,1,172,1,226,0,214,0,214,0,214,0,211,0,242,0,242,0,78,1,194,0,242,0,5,1,11,2,104,2,115,0,115,0,120,2,248,0,248,0,120,2,32,1,248,0,0,1,227,1,115,0,211,0,123,1,237,1,221,0,224,0,183,1,100,0,247,0,247,0,78,2,50,2,247,0,48,2,138,2,56,2,122,2,20,1,59,2,25,1,29,1,196,1,209,1,16,2,1,3,198,1,110,2,24,1,28,1,227,0,226,0,168,255,42,1,216,2,67,0,76,2,67,0,115,0,203,2,77,2,204,1,166,255,23,1,226,2,206,1,64,1,63,1,18,1,122,2,107,2,7,3,94,2,239,1,48,2,61,3,56,2,223,2,64,3,153,2,242,1,112,1,115,0,242,1,142,1,242,1,113,2,242,1,177,2,242,1,77,2,1,1,118,3,252,2,112,1,117,1,234,2,142,1,120,1,129,3,129,1,3,0,0,1,227,0,109,1,162,255,46,2,23,3,54,2,245,0,250,0,54,2,155,255,251,0,30,3,192,1,117,1,77,2,159,255,70,1,71,1,196,2,197,2,237,1,241,2,2,1,169,2,156,255,237,254,223,0,46,2,60,254,54,2,7,1,160,255,189,255,57,254,160,255,141,2,58,254,168,255,11,1,77,2,158,255,72,1,158,255,46,2,121,1,54,2,112,3,166,255,122,1,227,0,126,1,162,255,200,1,159,255,150,1,154,2,110,1,46,2,223,0,54,2,79,3,161,255,170,2,175,255,118,1,115,1,129,3,118,3,168,255,74,1,190,1,168,255,58,1,59,1,168,255,7,2,75,1,155,255,166,255,237,254,237,254,166,255,172,1,247,253,166,255,46,2,54,2,161,255,57,254,222,0,223,0,58,254,113,1,156,255,141,1,123,2,64,3,142,3,255,0,125,2,215,2,79,1,154,1,42,1,128,2,113,1,152,2,226,0,1,3,46,2,237,1,54,2,230,2,208,1,133,2,214,0,214,0,222,0,223,0,135,2,209,1,170,255,202,2,153,1,120,2,120,2,138,1,170,3,163,255,223,0,222,0,223,0,207,2,157,255,170,1,170,1,242,0,252,0,242,0,242,0,157,1,158,1,181,1,164,255,182,1,184,1,122,2,248,0,248,253,248,0,227,0,159,255,159,255,168,255,226,0,16,3,227,0,36,3,255,0,227,0,3,2,166,255,247,0,252,2,247,0,12,2,127,1,160,255,160,255,195,1,194,1,252,2,167,255,209,1,248,253,105,3,158,255,158,255,203,1,81,0,169,255,81,0,116,0,116,0,223,0,176,2,18,1,217,0,217,0,217,0,115,0,56,254,234,0,217,0,217,0,9,2,74,2,217,0,222,0,223,0,151,2,62,2,64,2,2,1,212,2,193,254,227,0,214,0,214,0,214,0,214,0,55,254,255,1,0,2,202,1,202,1,149,1,206,2,191,1,202,1,145,1,237,1,14,1,161,255,161,255,81,0,217,0,222,0,223,0,33,1,124,1,125,1,250,1,251,1,252,1,253,1,115,0,53,254,154,1,217,0,5,2,249,1,173,1,251,253,176,1,5,2,56,254,242,0,106,1,18,1,181,1,54,254,165,255,33,1,247,253,130,1,159,1,205,2,55,2,193,254,193,254,146,1,11,2,124,254,56,1,69,2,55,254,45,1,46,1,65,254,67,0,242,0,61,254,156,1,181,1,254,1,79,2,58,3,163,1,237,2,167,1,160,1,55,2,88,2,242,1,14,1,217,0,242,0,81,0,231,2,181,1,137,2,53,254,208,1,168,1,103,2,109,2,109,2,55,2,171,1,179,3,242,0,107,1,108,1,181,1,65,254,54,254,188,1,186,1,131,1,132,1,12,3,55,2,120,2,47,1,147,1,148,1,227,0,129,2,121,2,105,2,106,3,170,1,170,1,65,254,124,254,240,2,61,254,247,2,99,0,80,1,212,1,211,0,250,253,122,2,161,1,162,1,193,1,246,1,55,2,190,255,45,1,46,1,209,1,95,3,80,1,208,1,223,0,227,0,227,0,59,254,136,2,199,1,242,0,205,1,246,254,181,1,251,253,236,254,65,254,65,254,147,1,189,1,251,253,55,2,207,1,144,3,211,1,115,0,247,1,115,0,60,254,223,0,136,3,158,2,248,1,158,2,124,254,158,2,124,254,124,254,66,2,151,2,245,2,40,3,213,1,214,1,152,3,47,1,81,0,10,2,224,2,67,0,238,1,162,255,61,254,237,2,103,1,104,1,105,1,173,2,134,2,85,2,134,3,59,254,59,254,217,0,217,0,181,2,246,254,246,254,225,2,236,254,236,254,160,255,116,1,254,2,70,1,71,1,2,3,86,2,60,3,90,2,115,0,106,2,170,255,186,2,137,3,138,3,217,0,11,3,217,0,217,0,52,3,158,255,217,0,217,0,187,1,155,255,237,1,81,0,131,1,132,1,14,1,124,2,81,0,81,0,250,253,144,2,61,254,61,254,190,1,186,2,250,253,184,2,193,2,161,255,126,2,193,2,173,2,173,2,127,2,190,2,200,2,33,1,190,2,218,2,215,2,214,0,163,255,186,2,164,3,131,2,210,2,156,255,77,2,193,2,208,2,175,255,161,2,151,2,184,2,151,2,190,2,102,3,214,2,217,2,211,0,217,2,186,2,104,3,209,2,156,2,201,2,244,253,159,2,217,2,81,0,217,0,217,0,217,0,217,0,81,0,217,0,217,0,164,255,14,1,217,0,5,2,81,0,33,1,162,2,217,0,31,3,214,0,227,0,208,1,186,2,80,1,165,2,170,1,12,2,164,2,3,255,19,3,21,3,185,2,175,2,249,2,227,0,26,3,28,3,178,2,238,2,192,2,179,2,204,2,195,2,215,2,235,2,217,0,229,2,239,2,246,2,4,3,46,2,249,2,54,2,217,0,217,0,2,255,18,3,227,0,24,3,151,2,114,3,244,253,39,3,41,3,188,2,47,3,46,2,51,3,189,2,217,0,43,3,81,0,217,0,101,1,102,1,103,1,104,1,105,1,89,2,53,3,59,3,81,0,25,3,62,3,65,3,217,0,97,2,160,255,202,1,81,0,120,3,158,255,145,2,66,3,216,1,217,1,218,1,219,1,115,0,217,0,68,3,38,3,127,3,173,2,130,3,161,255,67,3,69,3,151,2,71,3,151,2,73,3,75,3,244,253,78,3,244,253,244,253,45,3,168,255,248,253,49,3,214,0,166,255,80,3,81,0,81,3,26,1,44,1,90,3,45,1,46,1,83,3,85,3,81,0,87,3,109,2,169,255,1,255,93,3,92,3,151,2,108,3,170,1,249,2,109,3,125,3,50,3,33,1,111,3,33,1,0,255,217,0,241,1,227,0,45,1,46,1,132,3,158,2,158,2,133,3,158,2,135,3,158,2,158,2,50,1,45,1,46,1,143,3,158,2,147,3,158,2,158,2,151,3,153,3,176,3,166,2,47,1,155,3,81,0,5,3,161,3,216,1,217,1,218,1,219,1,244,2,158,3,227,0,169,3,98,0,215,1,98,0,216,1,217,1,218,1,219,1,248,253,98,0,98,0,98,0,247,253,47,1,33,1,98,0,98,0,182,3,232,0,98,0,52,1,45,1,46,1,130,2,47,1,0,3,120,0,217,2,3,3,80,1,194,2,115,0,220,1,168,3,243,2,171,3,8,3,167,3,221,1,222,1,54,1,45,1,46,1,220,1,93,1,94,1,32,3,98,0,98,0,221,1,222,1,228,2,145,2,197,0,216,1,217,1,218,1,219,1,96,3,126,3,223,1,98,0,253,2,224,1,227,0,145,3,115,0,0,0,47,1,136,1,227,0,223,1,45,1,46,1,224,1,0,0,217,0,81,0,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,81,0,47,1,80,1,223,0,158,2,158,2,158,2,158,2,0,0,0,0,225,1,158,2,158,2,158,2,0,0,158,2,158,2,93,1,94,1,242,0,0,0,98,0,181,1,98,0,88,2,217,2,186,2,80,1,0,0,0,0,55,2,98,2,47,1,0,0,0,0,217,0,45,1,46,1,164,1,165,1,166,1,0,0,93,1,94,1,0,0,215,1,0,0,216,1,217,1,218,1,219,1,0,0,101,1,102,1,103,1,104,1,105,1,158,2,113,3,0,0,158,2,158,2,158,2,158,2,65,1,66,1,67,1,68,1,69,1,250,2,251,2,158,2,81,0,81,0,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,227,2,47,1,0,0,0,0,220,1,13,3,0,0,0,0,81,0,0,0,221,1,222,1,0,0,0,0,0,0,33,1,217,0,0,0,0,0,217,0,217,0,0,0,119,3,0,0,121,3,217,0,217,0,0,0,122,3,0,0,33,3,34,3,223,1,81,0,81,0,224,1,128,3,0,0,131,3,238,1,45,1,46,1,98,0,243,1,45,1,46,1,0,0,0,0,4,2,46,3,0,0,0,0,81,0,15,2,0,0,217,0,0,0,0,0,80,2,98,0,98,0,244,1,45,1,46,1,0,0,55,3,56,3,57,3,81,0,81,0,81,0,245,1,45,1,46,1,215,1,0,0,216,1,217,1,218,1,219,1,0,0,0,0,98,0,0,0,98,0,98,0,0,0,47,1,98,0,98,0,0,0,47,1,145,2,98,0,216,1,217,1,218,1,219,1,98,0,98,0,172,3,48,1,51,1,53,1,55,1,57,1,175,3,0,0,177,3,47,1,0,0,178,3,0,0,0,0,0,0,220,1,0,0,0,0,217,0,47,1,0,0,221,1,222,1,0,0,0,0,0,0,94,3,0,0,15,2,81,0,81,0,0,0,0,0,146,2,0,0,186,3,99,3,103,3,0,0,147,2,81,0,117,2,119,2,223,1,0,0,26,1,224,1,0,0,0,0,0,0,98,0,98,0,98,0,98,0,98,0,98,0,98,0,98,0,0,0,0,0,98,0,0,0,98,0,0,0,145,2,98,0,216,1,217,1,218,1,219,1,0,0,124,3,0,0,0,0,119,2,0,0,115,3,26,1,216,1,217,1,218,1,219,1,0,0,145,2,0,0,216,1,217,1,218,1,219,1,81,0,0,0,0,0,139,3,98,0,140,3,81,0,0,0,81,0,0,0,0,0,141,3,98,0,98,0,81,0,0,0,146,2,0,0,0,0,0,0,0,0,0,0,63,3,0,0,0,0,0,0,0,0,0,0,98,0,0,0,98,0,98,0,0,0,0,0,145,2,220,1,216,1,217,1,218,1,219,1,98,0,217,0,222,1,174,2,98,0,0,0,0,0,224,253,98,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,224,253,98,0,0,0,224,253,224,253,224,253,223,1,224,253,0,0,180,2,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,146,2,0,0,243,0,243,0,0,0,0,0,243,0,0,0,98,0,224,253,224,253,0,0,224,253,224,253,224,253,224,253,224,253,98,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,8,1,10,1,93,1,94,1,98,0,243,0,243,0,0,0,5,3,0,0,216,1,217,1,218,1,219,1,0,0,0,0,0,0,61,1,62,1,0,0,0,0,211,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,95,1,98,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,220,1,0,0,0,0,0,0,236,2,0,0,221,1,222,1,0,0,0,0,0,0,26,255,119,2,26,1,94,0,0,0,94,0,117,0,117,0,117,0,198,2,0,0,0,0,0,0,0,0,0,0,0,0,236,0,223,1,0,0,242,2,224,1,224,253,224,253,0,0,224,253,0,0,0,0,255,0,224,253,0,0,224,253,224,253,0,0,0,0,0,0,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,94,0,15,3,93,1,94,1,34,1,0,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,1,0,0,95,1,0,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,54,3,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,243,0,243,0,61,1,0,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,88,3,0,0,243,0,0,0,243,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,0,0,0,0,26,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,98,0,98,0,98,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,14,2,17,2,18,2,19,2,20,2,21,2,22,2,23,2,24,2,25,2,26,2,27,2,28,2,29,2,30,2,31,2,32,2,33,2,34,2,35,2,36,2,37,2,38,2,39,2,40,2,41,2,42,2,0,0,243,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,63,2,65,2,98,0,94,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,98,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,34,1,0,0,98,0,0,0,0,0,0,0,0,0,0,0,91,2,0,0,243,0,0,0,63,2,65,2,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,243,0,243,0,0,0,94,0,243,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,34,1,0,0,0,0,0,0,0,0,98,0,0,0,132,2,0,0,0,0,0,0,98,0,0,0,98,0,0,0,0,0,0,0,243,0,0,0,98,0,243,0,95,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,97,0,118,0,118,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,2,168,2,94,0,95,0,78,0,0,0,78,0,0,0,0,0,0,0,94,0,243,0,0,0,0,0,0,0,0,0,0,0,233,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,35,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,78,0,35,1,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,34,1,0,0,34,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,2,0,0,163,2,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,1,0,0,0,0,0,0,243,0,80,1,223,253,223,253,223,253,223,253,85,1,86,1,243,0,243,0,223,253,223,253,0,0,0,0,0,0,0,0,93,1,94,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,243,0,0,0,94,0,97,0,91,2,17,3,0,0,20,3,22,3,0,0,0,0,0,0,94,0,27,3,29,3,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,35,3,0,0,89,1,90,1,0,0,0,0,0,0,78,0,93,1,94,1,0,0,95,0,0,0,0,0,0,0,0,0,95,0,95,0,0,0,0,0,0,0,0,0,0,0,20,3,22,3,0,0,27,3,29,3,0,0,0,0,0,0,97,0,243,0,0,0,0,0,0,0,97,0,97,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,1,0,0,0,0,78,0,0,0,0,0,94,0,94,0,78,0,78,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,243,0,95,0,0,0,0,0,89,3,0,0,0,0,94,0,95,0,0,0,0,0,91,3,0,0,0,0,34,1,0,0,97,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,35,1,0,0,0,0,94,0,94,0,0,0,0,0,0,0,0,0,91,3,0,0,0,0,0,0,0,0,78,0,0,0,243,0,0,0,0,0,78,0,0,0,0,0,94,0,0,0,0,0,0,0,78,0,0,0,0,0,13,2,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,94,0,94,0,94,0,0,0,0,0,0,0,0,0,0,0,95,0,70,3,72,3,0,0,74,3,0,0,76,3,77,3,95,0,0,0,97,0,0,0,82,3,0,0,84,3,86,3,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,78,0,89,1,90,1,0,0,0,0,0,0,95,0,93,1,94,1,0,0,78,0,243,0,0,0,0,0,0,0,95,0,94,0,94,0,78,0,0,0,0,0,0,0,0,0,100,3,0,0,0,0,97,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,180,2,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,35,1,0,0,35,1,0,0,78,0,0,0,0,0,0,0,0,0,117,0,0,0,95,0,0,0,78,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,94,0,0,0,93,1,94,1,97,0,0,0,94,0,0,0,94,0,0,0,146,3,148,3,149,3,150,3,94,0,0,0,0,0,154,3,156,3,157,3,0,0,159,3,160,3,0,0,0,0,0,0,0,0,0,0,35,1,0,0,95,1,78,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,3,0,0,0,0,181,3,183,3,184,3,185,3,0,0,95,0,0,0,0,0,43,2,44,2,0,0,187,3,45,2,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,97,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,95,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,0,0,95,0,0,0,97,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,95,0,95,0,35,1,0,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,97,0,97,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,2,0,0,0,0,0,0,0,0,95,0,95,0,95,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,97,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,97,0,0,0,0,0,0,0,0,0,0,0,101,3,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,98,3,0,0,0,0,0,0,78,0,0,0,95,0,0,0,118,0,0,0,0,0,0,0,95,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,78,0,0,0,0,0,0,0,224,253,4,0,78,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,0,0,61,0,62,0,63,0,0,0,0,0,0,0,237,254,237,254,237,254,0,0,0,0,237,254,237,254,237,254,0,0,237,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,0,0,237,254,237,254,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,0,0,0,0,93,1,94,1,0,0,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,0,0,0,0,237,254,237,254,237,254,0,0,222,2,237,254,0,0,0,0,0,0,0,0,95,1,237,254,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,237,254,0,0,0,0,0,0,0,0,157,255,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,237,254,237,254,125,254,0,0,237,254,237,254,237,254,237,254,0,0,0,0,125,254,125,254,125,254,0,0,0,0,125,254,125,254,125,254,0,0,125,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,254,125,254,125,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,254,125,254,0,0,125,254,125,254,125,254,125,254,125,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,0,0,0,0,93,1,94,1,0,0,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,0,0,0,0,125,254,125,254,125,254,0,0,0,0,125,254,0,0,0,0,0,0,0,0,95,1,125,254,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,125,254,0,0,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,254,125,254,125,254,125,254,125,254,245,254,255,0,125,254,125,254,125,254,125,254,0,0,0,0,245,254,245,254,245,254,0,0,0,0,245,254,245,254,245,254,0,0,245,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,254,245,254,245,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,254,245,254,0,0,245,254,245,254,245,254,245,254,245,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,223,253,223,253,0,0,0,0,93,1,94,1,0,0,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,0,0,0,0,245,254,245,254,245,254,0,0,0,0,245,254,0,0,0,0,0,0,0,0,0,0,245,254,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,245,254,0,0,0,0,0,0,0,0,0,0,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,254,245,254,245,254,245,254,224,253,0,0,245,254,245,254,245,254,245,254,0,0,0,0,224,253,224,253,224,253,0,0,0,0,224,253,224,253,224,253,0,0,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,0,0,224,253,224,253,224,253,224,253,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,0,0,0,0,224,253,224,253,224,253,0,0,0,0,224,253,0,0,0,0,0,0,0,0,0,0,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,0,0,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,224,253,224,253,224,253,230,254,255,0,224,253,224,253,224,253,224,253,0,0,0,0,230,254,230,254,230,254,0,0,0,0,230,254,230,254,230,254,0,0,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,230,254,0,0,230,254,230,254,230,254,230,254,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,0,0,0,0,230,254,230,254,230,254,0,0,0,0,230,254,0,0,0,0,0,0,0,0,0,0,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,0,0,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,230,254,230,254,230,254,244,253,252,0,230,254,230,254,230,254,230,254,0,0,0,0,244,253,244,253,244,253,0,0,0,0,0,0,244,253,244,253,0,0,244,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,253,244,253,0,0,244,253,244,253,244,253,244,253,244,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,0,0,0,0,244,253,244,253,244,253,237,254,182,2,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,237,254,0,0,0,0,0,0,237,254,237,254,0,0,237,254,0,0,0,0,0,0,0,0,0,0,0,0,159,255,244,253,0,0,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,237,254,237,254,0,0,237,254,237,254,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,244,253,244,253,244,253,244,253,167,255,0,0,0,0,244,253,0,0,244,253,244,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,0,0,0,0,237,254,237,254,237,254,0,0,183,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,255,237,254,0,0,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,237,254,165,255,0,0,0,0,237,254,0,0,237,254,237,254,12,1,0,0,5,0,6,0,7,0,8,0,9,0,224,253,224,253,224,253,10,0,11,0,0,0,0,0,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,224,253,224,253,224,253,10,0,11,0,0,0,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,224,253,10,0,11,0,224,253,224,253,224,253,12,0,224,253,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,224,253,10,0,11,0,224,253,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].concat([0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,224,253,224,253,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,13,1,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,0,0,224,253,224,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,0,0,224,253,224,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,224,253,224,253,224,253,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,223,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,222,0,223,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,62,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,223,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,156,1,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,1,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,148,0,149,0,150,0,151,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,35,0,36,0,163,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,251,253,251,253,251,253,0,0,251,253,0,0,0,0,0,0,251,253,251,253,0,0,192,0,193,0,251,253,0,0,251,253,251,253,251,253,251,253,251,253,251,253,251,253,0,0,251,253,0,0,0,0,0,0,251,253,251,253,251,253,251,253,251,253,251,253,251,253,0,0,0,0,251,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,253,251,253,0,0,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,0,0,0,0,251,253,0,0,0,0,251,253,251,253,0,0,251,253,251,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,253,0,0,0,0,251,253,251,253,0,0,251,253,251,253,0,0,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,0,0,0,0,251,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,253,251,253,251,253,0,0,0,0,0,0,0,0,0,0,250,253,250,253,250,253,0,0,250,253,0,0,251,253,0,0,250,253,250,253,0,0,0,0,251,253,250,253,0,0,250,253,250,253,250,253,250,253,250,253,250,253,250,253,0,0,250,253,0,0,0,0,0,0,250,253,250,253,250,253,250,253,250,253,250,253,250,253,0,0,0,0,250,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,253,250,253,0,0,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,0,0,0,0,250,253,0,0,0,0,250,253,250,253,0,0,250,253,250,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,253,0,0,0,0,250,253,250,253,0,0,250,253,250,253,0,0,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,0,0,0,0,250,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,253,250,253,250,253,0,0,0,0,0,0,0,0,0,0,248,253,248,253,248,253,0,0,248,253,0,0,250,253,0,0,248,253,248,253,0,0,0,0,250,253,248,253,0,0,248,253,248,253,248,253,248,253,248,253,248,253,248,253,0,0,0,0,0,0,0,0,0,0,248,253,248,253,248,253,248,253,248,253,248,253,248,253,0,0,0,0,248,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,253,248,253,0,0,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,0,0,0,0,248,253,0,0,0,0,248,253,248,253,0,0,248,253,248,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,253,221,2,0,0,248,253,248,253,0,0,248,253,248,253,0,0,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,0,0,0,0,248,253,0,0,0,0,0,0,159,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,253,246,253,246,253,0,0,246,253,248,253,248,253,248,253,246,253,246,253,0,0,0,0,0,0,246,253,0,0,246,253,246,253,246,253,246,253,246,253,246,253,246,253,0,0,0,0,0,0,248,253,0,0,246,253,246,253,246,253,246,253,246,253,246,253,246,253,0,0,0,0,246,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,253,246,253,0,0,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,0,0,0,0,246,253,0,0,0,0,246,253,246,253,0,0,246,253,246,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,253,0,0,0,0,246,253,246,253,0,0,246,253,246,253,0,0,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,0,0,0,0,246,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,245,253,245,253,0,0,245,253,246,253,246,253,246,253,245,253,245,253,0,0,0,0,0,0,245,253,0,0,245,253,245,253,245,253,245,253,245,253,245,253,245,253,0,0,0,0,0,0,246,253,0,0,245,253,245,253,245,253,245,253,245,253,245,253,245,253,0,0,0,0,245,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,245,253,0,0,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,0,0,0,0,245,253,0,0,0,0,245,253,245,253,0,0,245,253,245,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,0,0,0,0,245,253,245,253,0,0,245,253,245,253,0,0,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,0,0,0,0,245,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,245,253,245,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,199,0,200,0,201,0,202,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,203,0,204,0,160,0,205,0,162,0,37,1,38,1,206,0,39,1,0,0,0,0,0,0,0,0,0,0,0,0,40,1,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,41,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,199,0,200,0,201,0,202,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,203,0,204,0,160,0,205,0,162,0,37,1,38,1,206,0,39,1,0,0,0,0,0,0,0,0,0,0,0,0,40,1,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,137,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,199,0,200,0,201,0,202,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,203,0,204,0,160,0,205,0,162,0,0,0,0,0,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,199,0,200,0,201,0,202,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,203,0,204,0,160,0,205,0,162,0,0,0,0,0,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,192,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,112,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,31,1,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,112,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,8,2,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,62,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,62,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,118,2,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,118,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,2,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,2,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,14,3,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,118,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,62,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,107,0,34,0,35,0,36,0,108,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,110,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,76,1,49,0,0,0,50,0,51,0,0,0,77,1,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0])
.concat([0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,107,0,34,0,35,0,36,0,108,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,76,1,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,3,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,3,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,51,2,52,2,0,0,0,0,53,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,72,2,44,2,0,0,0,0,73,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,57,2,52,2,0,0,0,0,58,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,92,2,44,2,0,0,0,0,93,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,95,2,52,2,0,0,0,0,96,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,111,2,44,2,0,0,0,0,112,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,114,2,52,2,0,0,0,0,115,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,139,2,44,2,0,0,0,0,140,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,142,2,52,2,0,0,0,0,143,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,162,3,44,2,0,0,0,0,163,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,165,3,52,2,0,0,0,0,166,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,173,3,44,2,0,0,0,0,174,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,57,2,52,2,0,0,0,0,58,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,115,121,110,116,97,120,32,101,114,114,111,114,44,32,117,110,101,120,112,101,99,116,101,100,32,37,115,0,32,111,114,32,37,115,0,0,44,32,101,120,112,101,99,116,105,110,103,32,37,115,0,0,0,0,152,0,153,0,0,0,1,0,3,0,4,0,5,0,6,0,7,0,11,0,12,0,16,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,39,0,45,0,46,0,47,0,48,0,49,0,51,0,52,0,53,0,54,0,55,0,56,0,58,0,59,0,60,0,63,0,66,0,67,0,69,0,70,0,89,0,92,0,93,0,95,0,96,0,98,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,109,0,126,0,127,0,128,0,154,0,155,0,156,0,161,0,163,0,164,0,166,0,167,0,170,0,171,0,173,0,174,0,175,0,177,0,178,0,187,0,200,0,218,0,237,0,238,0,248,0,249,0,253,0,254,0,255,0,3,1,4,1,5,1,7,1,8,1,9,1,10,1,11,1,12,1,35,1,48,1,156,0,21,0,22,0,30,0,31,0,32,0,39,0,51,0,55,0,86,0,89,0,92,0,126,0,179,0,180,0,200,0,218,0,9,1,12,1,35,1,180,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,55,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,80,0,81,0,84,0,85,0,86,0,87,0,98,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,127,0,128,0,145,0,146,0,181,0,185,0,186,0,11,1,30,1,33,0,34,0,35,0,36,0,48,0,49,0,51,0,55,0,101,0,181,0,182,0,183,0,5,1,201,0,89,0,164,0,165,0,178,0,218,0,9,1,10,1,12,1,165,0,149,0,150,0,165,0,39,1,44,1,45,1,47,1,205,0,207,0,89,0,171,0,178,0,218,0,223,0,9,1,12,1,57,0,98,0,99,0,127,0,170,0,187,0,188,0,193,0,196,0,198,0,33,1,34,1,193,0,193,0,146,0,194,0,195,0,146,0,190,0,194,0,146,0,40,1,45,1,182,0,157,0,140,0,187,0,218,0,187,0,55,0,1,0,92,0,159,0,160,0,161,0,172,0,173,0,48,1,164,0,203,0,189,0,198,0,33,1,48,1,188,0,32,1,33,1,48,1,89,0,144,0,177,0,218,0,9,1,12,1,204,0,53,0,54,0,56,0,63,0,105,0,181,0,6,1,62,0,64,0,65,0,111,0,250,0,251,0,63,0,250,0,63,0,250,0,63,0,250,0,61,0,250,0,58,0,59,0,166,0,187,0,187,0,39,1,47,1,40,0,41,0,42,0,43,0,44,0,37,0,38,0,28,0,235,0,113,0,144,0,92,0,98,0,174,0,113,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,86,0,87,0,114,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,88,0,142,0,143,0,88,0,143,0,38,1,26,0,140,0,239,0,90,0,90,0,190,0,194,0,239,0,164,0,51,0,55,0,179,0,58,0,59,0,1,0,117,0,13,1,44,1,88,0,142,0,143,0,214,0,31,1,215,0,38,1,105,0,144,0,158,0,159,0,55,0,13,0,219,0,44,1,113,0,88,0,142,0,143,0,90,0,90,0,219,0,46,1,39,1,17,0,242,0,149,0,165,0,165,0,55,0,88,0,142,0,143,0,25,0,188,0,188,0,188,0,91,0,144,0,197,0,48,1,144,0,197,0,193,0,40,1,41,1,193,0,192,0,193,0,198,0,33,1,48,1,164,0,41,1,164,0,162,0,140,0,159,0,88,0,143,0,90,0,161,0,172,0,147,0,39,1,47,1,41,1,202,0,41,1,148,0,144,0,43,1,45,1,144,0,43,1,141,0,43,1,55,0,174,0,175,0,176,0,144,0,88,0,142,0,143,0,51,0,53,0,54,0,55,0,56,0,92,0,98,0,99,0,120,0,123,0,146,0,233,0,16,1,17,1,18,1,19,1,20,1,21,1,24,1,25,1,26,1,27,1,28,1,63,0,251,0,252,0,62,0,251,0,63,0,63,0,63,0,61,0,71,0,71,0,156,0,165,0,165,0,165,0,165,0,161,0,164,0,164,0,236,0,98,0,166,0,188,0,198,0,199,0,172,0,144,0,177,0,144,0,163,0,166,0,178,0,187,0,188,0,199,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,51,0,52,0,55,0,185,0,190,0,36,1,37,1,192,0,51,0,52,0,55,0,185,0,190,0,36,1,51,0,55,0,36,1,241,0,240,0,166,0,187,0,166,0,187,0,97,0,168,0,212,0,44,1,14,1,211,0,51,0,55,0,179,0,36,1,192,0,36,1,158,0,164,0,146,0,15,1,16,1,216,0,184,0,10,0,8,0,244,0,48,1,159,0,13,0,187,0,51,0,55,0,192,0,51,0,55,0,159,0,110,0,250,0,0,1,1,1,2,1,48,1,242,0,198,0,10,0,27,0,220,0,44,1,220,0,51,0,55,0,192,0,51,0,55,0,209,0,188,0,98,0,188,0,196,0,33,1,34,1,41,1,147,0,41,1,144,0,144,0,41,1,182,0,154,0,141,0,187,0,41,1,161,0,41,1,33,1,174,0,176,0,51,0,55,0,192,0,51,0,55,0,113,0,51,0,92,0,98,0,224,0,225,0,226,0,18,1,16,1,29,0,108,0,234,0,144,0,29,1,48,1,144,0,29,1,51,0,144,0,29,1,51,0,63,0,159,0,187,0,187,0,79,0,118,0,228,0,229,0,48,1,188,0,144,0,41,1,176,0,144,0,113,0,44,0,40,1,90,0,90,0,190,0,194,0,40,1,42,1,90,0,90,0,190,0,191,0,194,0,48,1,191,0,194,0,228,0,228,0,44,0,169,0,44,1,165,0,158,0,42,1,10,0,41,1,16,1,158,0,44,1,181,0,182,0,188,0,199,0,245,0,48,1,15,0,222,0,48,1,14,0,221,0,222,0,90,0,90,0,42,1,90,0,90,0,222,0,110,0,2,1,10,0,144,0,219,0,206,0,208,0,42,1,165,0,188,0,197,0,33,1,141,0,43,1,42,1,188,0,226,0,144,0,18,1,144,0,41,1,230,0,40,1,159,0,159,0,19,1,24,1,26,1,28,1,20,1,21,1,26,1,20,1,141,0,51,0,227,0,230,0,20,1,22,1,23,1,26,1,28,1,159,0,98,0,188,0,176,0,187,0,115,0,166,0,187,0,166,0,187,0,168,0,148,0,90,0,166,0,187,0,166,0,187,0,168,0,239,0,235,0,159,0,159,0,187,0,228,0,213,0,44,1,10,0,41,1,10,0,217,0,91,0,246,0,48,1,159,0,9,0,247,0,48,1,165,0,10,0,90,0,10,0,188,0,159,0,159,0,159,0,220,0,144,0,41,1,225,0,144,0,98,0,224,0,147,0,149,0,10,0,141,0,144,0,29,1,144,0,29,1,144,0,29,1,144,0,29,1,29,1,113,0,230,0,118,0,144,0,29,1,144,0,29,1,144,0,29,1,10,0,188,0,187,0,166,0,187,0,10,0,141,0,159,0,158,0,15,1,89,0,178,0,218,0,9,1,12,1,219,0,159,0,219,0,222,0,242,0,243,0,10,0,10,0,210,0,144,0,225,0,144,0,18,1,51,0,231,0,232,0,17,1,20,1,26,1,20,1,20,1,89,0,218,0,118,0,23,1,26,1,20,1,22,1,26,1,20,1,141,0,10,0,158,0,55,0,88,0,142,0,143,0,159,0,159,0,159,0,225,0,144,0,144,0,40,1,29,1,144,0,29,1,29,1,29,1,55,0,88,0,144,0,29,1,144,0,29,1,29,1,144,0,29,1,29,1,10,0,51,0,55,0,192,0,51,0,55,0,244,0,221,0,10,0,225,0,232,0,20,1,51,0,55,0,20,1,26,1,20,1,20,1,42,1,29,1,29,1,144,0,29,1,29,1,29,1,20,1,29,1,0,0,74,4,74,4,74,4,84,4,90,4,94,4,98,4,102,4,108,4,110,4,109,4,121,4,147,4,153,4,157,4,161,4,165,4,171,4,171,4,175,4,179,4,183,4,187,4,191,4,195,4,199,4,204,4,205,4,209,4,213,4,217,4,221,4,225,4,230,4,234,4,239,4,243,4,247,4,251,4,254,4,2,5,9,5,10,5,14,5,18,5,22,5,26,5,29,5,36,5,37,5,40,5,41,5,45,5,44,5,57,5,61,5,66,5,70,5,75,5,79,5,84,5,88,5,92,5,96,5,100,5,106,5,110,5,116,5,117,5,123,5,127,5,131,5,135,5,139,5,143,5,147,5,151,5,155,5,159,5,165,5,166,5,172,5,176,5,182,5,186,5,192,5,196,5,200,5,204,5,208,5,212,5,218,5,224,5,231,5,235,5,239,5,243,5,247,5,251,5,1,6,7,6,14,6,18,6,21,6,25,6,29,6,35,6,36,6,37,6,38,6,43,6,50,6,51,6,54,6,58,6,58,6,64,6,65,6,66,6,67,6,68,6,69,6,70,6,71,6,72,6,73,6,74,6,75,6,76,6,77,6,78,6,79,6,80,6,81,6,82,6,83,6,84,6,85,6,86,6,87,6,88,6,89,6,90,6,91,6,92,6,95,6,95,6,95,6,96,6,96,6,97,6,97,6,97,6,98,6,98,6,98,6,98,6,99,6,99,6,99,6,100,6,100,6,100,6,101,6,101,6,101,6,101,6,102,6,102,6,102,6,102,6,103,6,103,6,103,6,103,6,104,6,104,6,104,6,104,6,105,6,105,6,105,6,105,6,106,6,106,6,109,6,113,6,117,6,121,6,125,6,129,6,133,6,137,6,141,6,146,6,151,6,156,6,160,6,164,6,168,6,172,6,176,6,180,6,184,6,188,6,192,6,196,6,200,6,204,6,208,6,212,6,216,6,220,6,224,6,228,6,232,6,236,6,240,6,244,6,248,6,252,6,0,7,4,7,8,7,12,7,16,7,20,7,24,7,28,7,34,7,41,7,42,7,46,7,50,7,56,7,62,7,63,7,66,7,67,7,68,7,72,7,76,7,82,7,86,7,90,7,94,7,98,7,104,7,104,7,115,7,121,7,125,7,131,7,135,7,139,7,143,7,149,7,153,7,157,7,163,7,164,7,165,7,166,7,167,7,168,7,169,7,170,7,175,7,174,7,185,7,185,7,189,7,189,7,193,7,197,7,201,7,205,7,209,7,213,7,217,7,221,7,225,7,229,7,233,7,237,7,241,7,242,7,248,7,247,7,4,8,11,8,18,8,18,8,18,8,24,8,24,8,24,8,30,8,36,8,41,8,43,8,40,8,50,8,49,8,62,8,67,8,61,8,80,8,79,8,92,8,91,8,104,8,105,8,104,8,118,8,122,8,126,8,130,8,136,8,143,8,144,8,145,8,148,8,149,8,152,8,153,8,161,8,162,8,168,8,172,8,175,8,179,8,185,8,189,8,195,8,199,8,203,8,207,8,211,8,215,8,219,8,223,8,227,8,233,8,237,8,241,8,245,8,249,8,253,8,1,9,5,9,9,9,13,9,17,9,21,9,25,9,29,9,33,9,39,9,40,9,47,9,52,9,57,9,64,9,68,9,74,9,75,9,78,9,83,9,86,9,90,9,96,9,100,9,107,9,106,9,119,9,129,9,133,9,138,9,145,9,149,9,153,9,157,9,161,9,165,9,169,9,173,9,177,9,184,9,183,9,194,9,193,9,205,9,213,9,222,9,225,9,232,9,235,9,239,9,240,9,243,9,247,9,250,9,254,9,1,10,2,10,3,10,4,10,7,10,8,10,9,10,13,10,19,10,20,10,26,10,31,10,30,10,41,10,47,10,51,10,57,10,61,10,67,10,70,10,71,10,74,10,75,10,78,10,83,10,90,10,94,10,101,10,105,10,112,10,119,10,120,10,121,10,122,10,123,10,127,10,133,10,137,10,143,10,144,10,145,10,149,10,155,10,159,10,163,10,167,10,171,10,177,10,183,10,187,10,191,10,195,10,199,10,203,10,210,10,219,10,220,10,223,10,228,10,227,10,236,10,243,10,249,10,255,10,3,11,7,11,11,11,15,11,19,11,23,11,27,11,31,11,35,11,39,11,43,11,47,11,51,11,56,11,62,11,67,11,72,11,77,11,84,11,88,11,95,11,99,11,105,11,109,11,115,11,122,11,129,11,133,11,139,11,143,11,149,11,150,11,153,11,158,11,165,11,166,11,169,11,176,11,180,11,187,11,192,11,192,11,217,11,218,11,224,11,228,11,234,11,238,11,244,11,245,11,246,11,249,11,250,11,251,11,252,11,255,11,0,12,1,12,4,12,5,12,8,12,9,12,12,12,13,12,16,12,19,12,22,12,23,12,24,12,27,12,28,12,32,12,31,12,38,12,39,12,43,12,0,0,152,0,0,0,255,255,255,255,153,0,154,0,255,255,155,0,39,1,255,255,48,1,255,255,156,0,255,255,155,0,47,1,156,0,255,255,1,0,156,0,255,255,161,0,255,255,255,255,46,0,157,0,140,0,154,0,141,0,255,255,159,0,244,0,222,0,247,0,255,255,160,0,39,1,255,255,48,1,255,255,161,0,255,255,160,0,47,1,161,0,255,255,1,0,161,0,255,255,255,255,45,0,182,0,162,0,182,0,255,255,6,0,183,0,255,255,161,0,40,0,165,0,255,255,161,0,41,0,165,0,255,255,161,0,42,0,165,0,255,255,161,0,43,0,165,0,255,255,161,0,44,0,161,0,255,255,47,0,140,0,159,0,141,0,255,255,163,0,255,255,171,0,113,0,166,0,255,255,10,1,90,0,166,0,255,255,218,0,142,0,192,0,42,1,90,0,166,0,255,255,218,0,143,0,51,0,90,0,166,0,255,255,218,0,143,0,55,0,90,0,166,0,255,255,218,0,88,0,55,0,90,0,166,0,255,255,218,0,88,0,51,0,90,0,166,0,255,255,12,1,90,0,166,0,255,255,178,0,113,0,199,0,255,255,171,0,113,0,188,0,255,255,171,0,113,0,199,0,255,255,164,0,255,255,178,0,113,0,166,0,255,255,178,0,113,0,163,0,255,255,166,0,255,255,164,0,37,0,164,0,255,255,164,0,38,0,164,0,255,255,39,0,40,1,164,0,255,255,127,0,166,0,255,255,187,0,255,255,164,0,255,255,170,0,255,255,167,0,255,255,237,0,255,255,237,0,38,1,36,1,194,0,255,255,255,255,97,0,169,0,228,0,159,0,141,0,255,255,35,1,194,0,255,255,35,1,194,0,168,0,255,255,218,0,143,0,36,1,194,0,255,255,218,0,143,0,36,1,194,0,168,0,255,255,218,0,88,0,36,1,194,0,255,255,218,0,88,0,36,1,194,0,168,0,255,255,32,0,194,0,255,255,31,0,194,0,255,255,30,0,193,0,255,255,21,0,193,0,255,255,22,0,193,0,255,255,173,0,255,255,92,0,172,0,41,1,255,255,173,0,255,255,92,0,172,0,41,1,255,255,175,0,255,255,175,0,174,0,255,255,175,0,98,0,177,0,255,255,175,0,98,0,177,0,144,0,176,0,255,255,175,0,98,0,255,255,175,0,98,0,144,0,176,0,255,255,98,0,177,0,255,255,98,0,177,0,144,0,176,0,255,255,98,0,255,255,98,0,144,0,176,0,255,255,177,0,255,255,92,0,172,0,41,1,255,255,174,0,144,0,255,255,175,0,174,0,144,0,255,255,174,0,255,255,175,0,174,0,255,255,9,1,255,255,218,0,142,0,192,0,42,1,255,255,218,0,143,0,51,0,255,255,218,0,88,0,51,0,255,255,218,0,143,0,55,0,255,255,218,0,88,0,55,0,255,255,89,0,55,0,255,255,12,1,255,255,9,1,255,255,218,0,142,0,192,0,42,1,255,255,218,0,143,0,51,0,255,255,218,0,88,0,51,0,255,255,218,0,143,0,55,0,255,255,218,0,88,0,55,0,255,255,89,0,55,0,255,255,12,1,255,255,51,0,255,255,55,0,255,255,89,0,179,0,255,255,179,0,255,255,218,0,88,0,179,0,255,255,51,0,255,255,55,0,255,255,52,0,255,255,185,0,255,255,186,0,255,255,181,0,255,255,5,1,255,255,182,0,255,255,255,255,183,0,144,0,184,0,182,0,255,255,118,0,255,255,119,0,255,255,120,0,255,255,72,0,255,255,73,0,255,255,74,0,255,255,80,0,255,255,81,0,255,255,116,0,255,255,76,0,255,255,117,0,255,255,77,0,255,255,75,0,255,255,86,0,255,255,87,0,255,255,121,0,255,255,122,0,255,255,123,0,255,255,98,0,255,255,124,0,255,255,125,0,255,255,71,0,255,255,127,0,255,255,128,0,255,255,69,0,255,255,70,0,255,255,84,0,255,255,85,0,255,255,145,0,255,255,48,0,255,255,49,0,255,255,50,0,255,255,46,0,255,255,47,0,255,255,45,0,255,255,37,0,255,255,7,0,255,255,21,0,255,255,16,0,255,255,3,0,255,255,5,0,255,255,26,0,255,255,15,0,255,255,14,0,255,255,10,0,255,255,9,0,255,255,36,0,255,255,20,0,255,255,25,0,255,255,4,0,255,255,22,0,255,255,34,0,255,255,39,0,255,255,38,0,255,255,23,0,255,255,8,0,255,255,24,0,255,255,30,0,255,255,33,0,255,255,32,0,255,255,13,0,255,255,35,0,255,255,6,0,255,255,17,0,255,255,31,0,255,255,11,0,255,255,12,0,255,255,18,0,255,255,19,0,255,255,178,0,113,0,187,0,255,255,178,0,113,0,187,0,44,0,187,0,255,255,10,1,90,0,187,0,255,255,10,1,90,0,187,0,44,0,187,0,255,255,218,0,142,0,192,0,42,1,90,0,187,0,255,255,218,0,143,0,51,0,90,0,187,0,255,255,218,0,143,0,55,0,90,0,187,0,255,255,218,0,88,0,51,0,90,0,187,0,255,255,218,0,88,0,55,0,90,0,187,0,255,255,89,0,55,0,90,0,187,0,255,255,12,1,90,0,187,0,255,255,187,0,82,0,187,0,255,255,187,0,83,0,187,0,255,255,187,0,121,0,187,0,255,255,187,0,122,0,187,0,255,255,187,0,123,0,187,0,255,255,187,0,124,0,187,0,255,255,187,0,125,0,187,0,255,255,187,0,71,0,187,0,255,255,126,0,58,0,71,0,187,0,255,255,126,0,59,0,71,0,187,0,255,255,69,0,187,0,255,255,70,0,187,0,255,255,187,0,118,0,187,0,255,255,187,0,119,0,187,0,255,255,187,0,120,0,187,0,255,255,187,0,72,0,187,0,255,255,187,0,116,0,187,0,255,255,187,0,76,0,187,0,255,255,187,0,117,0,187,0,255,255,187,0,77,0,187,0,255,255,187,0,73,0,187,0,255,255,187,0,74,0,187,0,255,255,187,0,75,0,187,0,255,255,187,0,80,0,187,0,255,255,187,0,81,0,187,0,255,255,127,0,187,0,255,255,128,0,187,0,255,255,187,0,86,0,187,0,255,255,187,0,87,0,187,0,255,255,187,0,78,0,187,0,255,255,187,0,79,0,187,0,255,255,187,0,114,0,187,0,40,1,115,0,187,0,255,255,200,0,255,255,187,0,255,255,48,1,255,255,198,0,43,1,255,255,198,0,144,0,33,1,43,1,255,255,33,1,43,1,255,255,146,0,192,0,41,1,255,255,48,1,255,255,190,0,255,255,48,1,255,255,193,0,255,255,198,0,144,0,255,255,198,0,144,0,33,1,144,0,255,255,33,1,144,0,255,255,170,0,255,255,198,0,197,0,255,255,33,1,197,0,255,255,198,0,144,0,33,1,197,0,255,255,196,0,255,255,255,255,195,0,193,0,255,255,99,0,188,0,255,255,144,0,196,0,255,255,48,1,255,255,188,0,255,255,98,0,188,0,255,255,198,0,144,0,188,0,255,255,198,0,144,0,98,0,188,0,255,255,198,0,144,0,188,0,255,255,198,0,144,0,98,0,188,0,255,255,98,0,188,0,255,255,248,0,255,255,249,0,255,255,253,0,255,255,254,0,255,255,255,0,255,255,11,1,255,255,12,1,255,255,52,0,255,255,255,255,7,0,201,0,158,0,10,0,255,255,255,255,93,0,164,0,202,0,41,1,255,255,255,255,93,0,203,0,41,1,255,255,92,0,159,0,147,0,255,255,218,0,88,0,55,0,255,255,89,0,55,0,255,255,95,0,189,0,148,0,255,255,96,0,32,1,141,0,255,255,30,0,255,255,31,0,146,0,193,0,41,1,255,255,31,0,146,0,41,1,255,255,31,0,255,255,39,0,146,0,164,0,41,1,255,255,39,0,146,0,41,1,255,255,35,1,239,0,255,255,238,0,255,255,238,0,239,0,255,255,255,255,100,0,204,0,233,0,234,0,255,255,11,0,165,0,219,0,159,0,221,0,10,0,255,255,12,0,165,0,219,0,159,0,222,0,10,0,255,255,255,255,255,255,18,0,205,0,165,0,220,0,206,0,159,0,10,0,255,255,255,255,255,255,19,0,207,0,165,0,220,0,208,0,159,0,10,0,255,255,16,0,165,0,39,1,242,0,10,0,255,255,16,0,39,1,242,0,10,0,255,255,255,255,255,255,20,0,223,0,25,0,209,0,165,0,220,0,210,0,159,0,10,0,255,255,255,255,3,0,180,0,13,1,211,0,158,0,10,0,255,255,255,255,255,255,3,0,86,0,164,0,212,0,44,1,213,0,158,0,10,0,255,255,255,255,4,0,180,0,214,0,158,0,10,0,255,255,255,255,5,0,181,0,215,0,15,1,158,0,10,0,255,255,255,255,255,255,5,0,30,1,38,1,216,0,181,0,217,0,15,1,158,0,10,0,255,255,21,0,255,255,22,0,255,255,23,0,255,255,24,0,255,255,200,0,255,255,44,1,255,255,13,0,255,255,44,1,13,0,255,255,44,1,255,255,27,0,255,255,222,0,255,255,14,0,165,0,219,0,159,0,221,0,255,255,48,1,255,255,15,0,159,0,255,255,178,0,255,255,171,0,255,255,18,1,255,255,92,0,226,0,41,1,255,255,224,0,255,255,225,0,144,0,224,0,255,255,225,0,255,255,225,0,144,0,98,0,18,1,255,255,225,0,144,0,98,0,18,1,144,0,225,0,255,255,225,0,144,0,98,0,255,255,225,0,144,0,98,0,144,0,225,0,255,255,98,0,18,1,255,255,98,0,18,1,144,0,225,0,255,255,98,0,255,255,98,0,144,0,225,0,255,255,20,1,144,0,23,1,144,0,26,1,29,1,255,255,20,1,144,0,23,1,144,0,26,1,144,0,20,1,29,1,255,255,20,1,144,0,23,1,29,1,255,255,20,1,144,0,23,1,144,0,20,1,29,1,255,255,20,1,144,0,26,1,29,1,255,255,20,1,144,0,255,255,20,1,144,0,26,1,144,0,20,1,29,1,255,255,20,1,29,1,255,255,23,1,144,0,26,1,29,1,255,255,23,1,144,0,26,1,144,0,20,1,29,1,255,255,23,1,29,1,255,255,23,1,144,0,20,1,29,1,255,255,26,1,29,1,255,255,26,1,144,0,20,1,29,1,255,255,28,1,255,255,48,1,255,255,229,0,255,255,118,0,230,0,118,0,255,255,79,0,255,255,118,0,227,0,230,0,118,0,255,255,40,1,255,255,40,1,149,0,231,0,40,1,255,255,232,0,255,255,231,0,144,0,232,0,255,255,51,0,255,255,17,1,255,255,146,0,16,1,230,0,147,0,255,255,16,1,255,255,108,0,159,0,141,0,255,255,29,0,159,0,10,0,255,255,255,255,28,0,236,0,228,0,159,0,10,0,255,255,170,0,235,0,255,255,237,0,38,1,36,1,191,0,255,255,237,0,38,1,36,1,191,0,239,0,255,255,237,0,38,1,36,1,194,0,235,0,255,255,35,1,190,0,255,255,218,0,143,0,36,1,191,0,255,255,218,0,88,0,36,1,190,0,255,255,218,0,88,0,37,1,255,255,218,0,143,0,190,0,255,255,218,0,88,0,190,0,255,255,32,0,190,0,255,255,32,0,255,255,218,0,142,0,192,0,42,1,255,255,255,255,140,0,240,0,228,0,159,0,141,0,255,255,255,255,26,0,241,0,228,0,159,0,10,0,255,255,17,0,198,0,219,0,159,0,243,0,255,255,222,0,255,255,242,0,255,255,8,0,245,0,246,0,219,0,159,0,244,0,255,255,48,1,255,255,188,0,255,255,199,0,255,255,48,1,255,255,91,0,178,0,255,255,48,1,255,255,9,0,159,0,255,255,48,1,255,255,8,1,255,255,4,1,255,255,3,1,255,255,7,1,255,255,60,0,255,255,63,0,255,255,105,0,63,0,255,255,105,0,250,0,63,0,255,255,251,0,255,255,250,0,251,0,255,255,65,0,255,255,255,255,64,0,252,0,159,0,141,0,255,255,111,0,255,255,106,0,61,0,255,255,106,0,250,0,61,0,255,255,102,0,62,0,255,255,102,0,250,0,62,0,255,255,109,0,255,255,48,1,255,255,1,1,255,255,2,1,255,255,1,1,2,1,255,255,110,0,255,255,250,0,110,0,255,255,103,0,63,0,255,255,103,0,250,0,63,0,255,255,5,1,255,255,101,0,105,0,251,0,63,0,255,255,101,0,6,1,255,255,181,0,255,255,54,0,255,255,53,0,255,255,56,0,255,255,63,0,255,255,105,0,63,0,255,255,104,0,63,0,255,255,104,0,250,0,63,0,255,255,58,0,255,255,59,0,255,255,126,0,58,0,255,255,126,0,59,0,255,255,51,0,255,255,54,0,255,255,53,0,255,255,56,0,255,255,55,0,255,255,9,1,255,255,9,1,255,255,34,0,255,255,33,0,255,255,35,0,255,255,36,0,255,255,49,0,255,255,48,0,255,255,66,0,255,255,67,0,255,255,44,1,255,255,255,255,117,0,14,1,165,0,44,1,255,255,1,0,44,1,255,255,146,0,16,1,41,1,255,255,16,1,44,1,255,255,20,1,144,0,24,1,144,0,26,1,29,1,255,255,20,1,144,0,24,1,144,0,26,1,144,0,20,1,29,1,255,255,20,1,144,0,24,1,29,1,255,255,20,1,144,0,24,1,144,0,20,1,29,1,255,255,20,1,144,0,26,1,29,1,255,255,20,1,144,0,26,1,144,0,20,1,29,1,255,255,20,1,29,1,255,255,24,1,144,0,26,1,29,1,255,255,24,1,144,0,26,1,144,0,20,1,29,1,255,255,24,1,29,1,255,255,24,1,144,0,20,1,29,1,255,255,26,1,29,1,255,255,26,1,144,0,20,1,29,1,255,255,28,1,255,255,255,255,55,0,255,255,54,0,255,255,53,0,255,255,56,0,255,255,17,1,255,255,51,0,255,255,18,1,255,255,92,0,226,0,41,1,255,255,19,1,255,255,20,1,144,0,19,1,255,255,51,0,113,0,188,0,255,255,51,0,113,0,218,0,255,255,22,1,255,255,23,1,144,0,22,1,255,255,21,1,255,255,24,1,144,0,21,1,255,255,123,0,255,255,98,0,255,255,25,1,51,0,255,255,25,1,255,255,120,0,255,255,99,0,255,255,27,1,51,0,255,255,144,0,28,1,255,255,48,1,255,255,11,1,255,255,255,255,146,0,31,1,164,0,41,1,255,255,48,1,255,255,33,1,43,1,255,255,34,1,255,255,33,1,144,0,34,1,255,255,188,0,91,0,188,0,255,255,57,0,188,0,255,255,51,0,255,255,55,0,255,255,52,0,255,255,51,0,255,255,55,0,255,255,52,0,255,255,185,0,255,255,51,0,255,255,52,0,255,255,185,0,255,255,143,0,255,255,88,0,255,255,255,255,47,1,255,255,255,255,45,1,255,255,40,1,147,0,255,255,40,1,148,0,255,255,255,255,45,1,255,255,144,0,255,255,149,0,255,255,45,1,255,255,255,255,150,0,46,1,0,1,255,255,44,1,255,255,47,1,149,0,255,255,255,255,0,2,0,2,2,1,1,3,2,1,0,5,4,2,1,1,3,2,0,4,2,3,3,3,3,3,4,1,3,3,6,5,5,5,5,3,3,3,3,1,3,3,1,3,3,3,2,1,1,1,1,1,4,0,5,2,3,4,5,4,5,2,2,2,2,2,1,3,1,3,1,2,3,5,2,4,2,4,1,3,1,3,2,3,1,2,1,4,3,3,3,3,2,1,1,4,3,3,3,3,2,1,1,1,2,1,3,1,1,1,1,1,1,1,1,0,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,5,3,5,6,5,5,5,5,4,3,3,3,3,3,3,3,3,3,4,4,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,6,1,1,1,2,4,2,3,1,1,1,1,2,4,2,1,2,2,4,1,0,2,2,2,1,1,2,3,4,3,4,2,1,1,1,1,1,1,1,1,0,4,0,4,0,3,3,3,2,3,3,1,4,3,1,4,3,2,1,2,0,4,6,6,0,0,7,0,0,7,5,4,0,0,9,0,6,0,0,8,0,5,0,6,0,0,9,1,1,1,1,1,1,1,2,1,1,1,5,1,2,1,1,1,3,1,3,1,4,6,3,5,2,4,1,3,6,8,4,6,4,2,6,2,4,6,2,4,2,4,1,1,1,3,1,4,1,4,1,3,1,1,4,1,3,3,0,5,2,4,5,5,2,4,4,3,3,3,2,1,4,0,5,0,5,5,1,1,6,1,1,1,1,2,1,2,1,1,1,1,1,1,1,2,3,1,2,1,0,4,1,2,3,2,3,1,1,1,1,2,1,2,2,3,1,4,2,1,1,1,1,1,2,2,3,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,4,2,3,2,6,8,4,6,4,6,2,4,6,2,4,2,4,1,0,1,1,1,1,1,1,1,3,1,3,3,3,1,3,1,3,1,1,2,1,1,1,2,2,1,1,0,4,1,2,1,3,3,2,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,2,2,0,1,1,1,1,0,3,1,2,0,0,0,0,0,0,151,0,153,0,152,0,154,0,155,0,155,0,155,0,155,0,156,0,157,0,156,0,158,0,159,0,160,0,160,0,160,0,160,0,162,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,163,0,163,0,164,0,164,0,164,0,164,0,164,0,164,0,165,0,166,0,166,0,167,0,167,0,169,0,168,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,171,0,171,0,172,0,172,0,173,0,173,0,173,0,173,0,173,0,173,0,173,0,173,0,173,0,173,0,174,0,174,0,175,0,175,0,176,0,176,0,177,0,177,0,177,0,177,0,177,0,177,0,177,0,177,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,179,0,179,0,180,0,180,0,180,0,181,0,181,0,181,0,181,0,181,0,182,0,182,0,183,0,184,0,183,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0])
.concat
.concat([117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,1,255,255,255,255,7,1,255,255,255,255,153,2,154,2,12,1,13,1,255,255,255,255,255,255,64,1,255,255,255,255,255,255,14,3,69,1,255,255,255,255,18,3,255,255,255,255,171,2,76,1,255,255,255,255,25,3,255,255,255,255,178,2,255,255,64,1,255,255,255,255,255,255,255,255,69,1,255,255,255,255,255,255,255,255,255,255,255,255,76,1,77,1,255,255,255,255,196,2,197,2,255,255,255,255,255,255,255,255,52,3,255,255,255,255,255,255,255,255,64,1,255,255,59,3,255,255,255,255,69,1,255,255,255,255,215,2,255,255,255,255,255,255,76,1,255,255,255,255,79,1,255,255,255,255,255,255,255,255,255,255,255,255,133,1,255,255,231,2,232,2,233,2,255,255,255,255,255,255,255,255,255,255,143,1,253,2,254,2,255,255,0,3,255,255,2,3,3,3,151,1,255,255,133,1,255,255,8,3,255,255,10,3,11,3,255,255,255,255,255,255,255,255,143,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,151,1,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,133,1,80,0,81,0,255,255,255,255,255,255,186,1,86,0,87,0,255,255,143,1,137,3,255,255,255,255,255,255,195,1,36,3,37,3,151,1,255,255,255,255,255,255,255,255,43,3,255,255,255,255,186,1,47,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,195,1,44,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,209,1,255,255,211,1,255,255,186,1,255,255,255,255,255,255,255,255,78,3,255,255,240,1,255,255,195,1,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,96,3,255,255,86,0,87,0,240,1,255,255,102,3,255,255,104,3,255,255,119,3,120,3,121,3,122,3,110,3,255,255,255,255,126,3,127,3,128,3,255,255,130,3,131,3,255,255,255,255,255,255,255,255,255,255,8,2,255,255,114,0,240,1,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,172,3,255,255,255,255,175,3,176,3,177,3,178,3,255,255,71,2,255,255,255,255,51,0,52,0,255,255,186,3,55,0,255,255,255,255,81,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,2,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,81,2,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,2,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,81,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,153,2,154,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,255,255,171,2,255,255,153,2,154,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,171,2,255,255,255,255,255,255,255,255,196,2,197,2,178,2,255,255,153,2,154,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,215,2,196,2,197,2,171,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,179,2,255,255,255,255,255,255,255,255,231,2,232,2,233,2,255,255,215,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,196,2,197,2,255,255,255,255,255,255,255,255,255,255,255,255,231,2,232,2,233,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,215,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,231,2,232,2,233,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,36,3,37,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,47,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,36,3,37,3,255,255,255,255,255,255,255,255,255,255,43,3,255,255,255,255,255,255,47,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,36,3,37,3,255,255,255,255,255,255,255,255,255,255,43,3,255,255,255,255,255,255,47,3,255,255,96,3,255,255,78,3,255,255,255,255,255,255,102,3,255,255,104,3,255,255,255,255,255,255,255,255,255,255,110,3,255,255,255,255,255,255,255,255,255,255,96,3,255,255,255,255,255,255,255,255,255,255,102,3,255,255,104,3,255,255,255,255,255,255,255,255,255,255,110,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,3,255,255,255,255,255,255,255,255,255,255,102,3,255,255,104,3,255,255,255,255,255,255,0,0,1,0,110,3,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,255,255,126,0,127,0,128,0,255,255,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,149,0,150,0,27,0,28,0,29,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,90,0,91,0,255,255,255,255,255,255,255,255,114,0,97,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,108,0,255,255,255,255,255,255,255,255,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,150,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,142,0,143,0,144,0,0,0,255,255,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,26,0,27,0,28,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,114,0,97,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,140,0,141,0,142,0,143,0,144,0,0,0,146,0,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,27,0,28,0,29,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,255,255,97,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,108,0,255,255,255,255,255,255,255,255,255,255,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,142,0,143,0,144,0,0,0,255,255,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,26,0,27,0,28,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,255,255,97,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,140,0,141,0,142,0,143,0,144,0,0,0,146,0,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,27,0,28,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,255,255,97,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,142,0,143,0,144,0,0,0,146,0,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,255,255,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,26,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,0,0,90,0,255,255,255,255,255,255,255,255,255,255,255,255,8,0,9,0,10,0,255,255,255,255,255,255,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,113,0,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,140,0,141,0,142,0,143,0,144,0,255,255,255,255,147,0,255,255,149,0,150,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,90,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,113,0,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,142,0,143,0,144,0,255,255,255,255,147,0,255,255,149,0,150,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,255,255,15,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,149,0,150,0,10,0,11,0,12,0,255,255,14,0,15,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,10,0,11,0,12,0,149,0,150,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,10,0,11,0,12,0,149,0,150,0,15,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,149,0,150,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,149,0,150,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,9,0,10,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,149,0,150,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,147,0,255,255,149,0,150,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,147,0,255,255,149,0,150,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,149,0,150,0,10,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,149,0,150,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,150,0,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,149,0,150,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,150,0,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,149,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,149,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,145,0,146,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,140,0,255,255,11,0,12,0,255,255,255,255,146,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,140,0,255,255,11,0,12,0,255,255,255,255,146,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,90,0,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,113,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,126,0,127,0,128,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,146,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,126,0,127,0,128,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,146,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,146,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,255,255,63,0,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,105,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,255,255,63,0,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,105,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,101,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,145,0,18,0,19,0,20,0])
.concat([21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,126,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,144,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,126,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,144,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,86,0,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,32,115,1,0,232,114,1,0,164,114,1,0,60,114,1,0,244,113,1,0,160,113,1,0,100,113,1,0,100,129,1,0,188,128,1,0,252,127,1,0,0,0,0,0,112,111,115,116,32,109,97,110,100,97,116,111,114,121,32,97,114,103,115,58,0,0,0,0,111,112,116,105,111,110,97,108,32,97,114,103,115,58,0,0,109,97,110,100,97,116,111,114,121,32,97,114,103,115,58,0,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,58,0,0,0,0,78,79,68,69,95,68,69,70,58,0,0,0,98,111,100,121,58,0,0,0,78,79,68,69,95,83,67,76,65,83,83,58,0,0,0,0,98,111,100,121,58,0,0,0,78,79,68,69,95,77,79,68,85,76,69,58,0,0,0,0,98,111,100,121,58,0,0,0,98,111,100,121,58,0,0,0,115,117,112,101,114,58,0,0,78,79,68,69,95,67,76,65,83,83,58,0,58,0,0,0,78,79,68,69,95,70,65,76,83,69,0,0,78,79,68,69,95,84,82,85,69,0,0,0,78,79,68,69,95,78,73,76,0,0,0,0,78,79,68,69,95,83,69,76,70,0,0,0,78,79,68,69,95,68,82,69,71,88,0,0,78,79,68,69,95,68,88,83,84,82,0,0,78,79,68,69,95,68,83,84,82,0,0,0,78,79,68,69,95,69,78,83,85,82,69,58,0,0,0,0,78,79,68,69,95,78,69,71,65,84,69,0,78,79,68,69,95,66,76,79,67,75,95,65,82,71,58,0,114,104,115,58,0,0,0,0,108,104,115,58,0,0,0,0,78,79,68,69,95,77,65,84,67,72,58,0,78,79,68,69,95,82,69,84,82,89,0,0,78,79,68,69,95,82,69,68,79,0,0,0,78,79,68,69,95,78,69,88,84,58,0,0,78,79,68,69,95,66,82,69,65,75,58,0,78,79,68,69,95,89,73,69,76,68,58,0,101,108,115,101,58,0,0,0,78,79,68,69,95,82,69,84,85,82,78,58,0,0,0,0,78,79,68,69,95,90,83,85,80,69,82,0,98,108,111,99,107,58,0,0,97,114,103,115,58,0,0,0,78,79,68,69,95,83,85,80,69,82,58,0,108,104,115,58,0,0,0,0,78,79,68,69,95,79,80,95,65,83,71,78,58,0,0,0,114,104,115,58,0,0,0,0,112,111,115,116,58,0,0,0,40,101,109,112,116,121,41,0,114,101,115,99,117,101,32,98,111,100,121,58,0,0,0,0,114,101,115,116,58,0,0,0,112,114,101,58,0,0,0,0,109,108,104,115,58,0,0,0,78,79,68,69,95,77,65,83,71,78,58,0,114,104,115,58,0,0,0,0,108,104,115,58,0,0,0,0,78,79,68,69,95,65,83,71,78,58,0,0,78,79,68,69,95,83,80,76,65,84,58,0,118,97,108,117,101,58,0,0,107,101,121,58,0,0,0,0,101,120,99,95,118,97,114,58,0,0,0,0,78,79,68,69,95,72,65,83,72,58,0,0,78,79,68,69,95,65,82,82,65,89,58,0,78,79,68,69,95,67,79,76,79,78,51,58,0,0,0,0,78,79,68,69,95,67,79,76,79,78,50,58,0,0,0,0,78,79,68,69,95,68,79,84,51,58,0,0,78,79,68,69,95,68,79,84,50,58,0,0,98,108,111,99,107,58,0,0,97,114,103,115,58,0,0,0,78,79,68,69,95,67,65,76,76,58,0,0,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,58,0,0,0,0,104,97,110,100,108,101,32,99,108,97,115,115,101,115,58,0,78,79,68,69,95,83,67,79,80,69,58,0,100,111,58,0,105,110,58,0,112,111,115,116,58,0,0,0,114,101,115,116,58,0,0,0,112,114,101,58,0,0,0,0,118,97,114,58,0,0,0,0,78,79,68,69,95,70,79,82,58,0,0,0,98,111,100,121,58,0,0,0,99,111,110,100,58,0,0,0,114,101,115,99,117,101,58,0,78,79,68,69,95,85,78,84,73,76,58,0,98,111,100,121,58,0,0,0,99,111,110,100,58,0,0,0,78,79,68,69,95,87,72,73,76,69,58,0,98,111,100,121,58,0,0,0,99,97,115,101,58,0,0,0,78,79,68,69,95,67,65,83,69,58,0,0,78,79,68,69,95,79,82,58,0,0,0,0,78,79,68,69,95,65,78,68,58,0,0,0,101,108,115,101,58,0,0,0,98,111,100,121,58,0,0,0,116,104,101,110,58,0,0,0,99,111,110,100,58,0,0,0,78,79,68,69,95,73,70,58,0,0,0,0,98,111,100,121,58,0,0,0,112,111,115,116,32,109,97,110,100,97,116,111,114,121,32,97,114,103,115,58,0,0,0,0,111,112,116,105,111,110,97,108,32,97,114,103,115,58,0,0,109,97,110,100,97,116,111,114,121,32,97,114,103,115,58,0,78,79,68,69,95,66,76,79,67,75,58,0,116,114,97,99,101,58,0,0,79,80,95,83,84,79,80,0,78,79,68,69,95,66,76,79,67,75,58,0,9,98,114,111,107,101,110,0,9,98,114,101,97,107,0,0,9,114,101,116,117,114,110,0,79,80,95,78,79,80,0,0,78,79,68,69,95,72,69,82,69,68,79,67,58,0,0,0,78,79,68,69,95,80,79,83,84,69,88,69,58,0,0,0,112,111,115,116,32,109,97,110,100,97,116,111,114,121,32,97,114,103,115,58,0,0,0,0,111,112,116,105,111,110,97,108,32,97,114,103,115,58,0,0,109,97,110,100,97,116,111,114,121,32,97,114,103,115,58,0,78,79,68,69,95,83,68,69,70,58,0,0,101,110,115,117,114,101,58,0,78,79,68,69,95,82,69,83,67,85,69,58,0,0,0,0,78,79,68,69,95,66,69,71,73,78,58,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0,0,0,0,96,129,1,0,0,0,0,0,0,0,0,0,0,0,0,0,96,129,1,0,0,0,0,0,0,0,0,0,0,0,0,0,96,129,1,0,0,0,0,0,0,0,0,0,0,0,0,0,96,129,1,0,0,0,0,0,0,0,0,0,0,0,0,0,96,129,1,0,0,0,0,0,0,0,0,0,0,0,0,0,96,129,1,0,0,0,0,0,0,0,0,0,0,0,0,0,96,129,1,0,0,0,0,0,0,0,0,0,0,0,0,0,96,129,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,161,1,0,20,1,0,0,20,1,0,0,6,0,0,0,244,160,1,0,14,1,0,0,14,1,0,0,0,0,0,0,240,160,1,0,33,1,0,0,33,1,0,0,1,0,0,0,92,160,1,0,8,1,0,0,8,1,0,0,0,0,0,0,88,160,1,0,9,1,0,0,9,1,0,0,1,0,0,0,80,160,1,0,12,1,0,0,12,1,0,0,0,0,0,0,72,160,1,0,38,1,0,0,38,1,0,0,4,0,0,0,52,160,1,0,35,1,0,0,35,1,0,0,1,0,0,0,12,160,1,0,32,1,0,0,32,1,0,0,1,0,0,0,4,160,1,0,13,1,0,0,13,1,0,0,10,0,0,0,236,159,1,0,7,1,0,0,43,1,0,0,6,0,0,0,208,159,1,0,34,1,0,0,34,1,0,0,1,0,0,0,136,159,1,0,18,1,0,0,42,1,0,0,10,0,0,0,252,158,1,0,11,1,0,0,40,1,0,0,10,0,0,0,208,158,1,0,29,1,0,0,29,1,0,0,6,0,0,0,188,158,1,0,4,1,0,0,4,1,0,0,7,0,0,0,148,158,1,0,36,1,0,0,36,1,0,0,10,0,0,0,92,158,1,0,25,1,0,0,25,1,0,0,0,0,0,0,16,158,1,0,30,1,0,0,30,1,0,0,4,0,0,0,232,157,1,0,19,1,0,0,19,1,0,0,10,0,0,0,196,157,1,0,5,1,0,0,5,1,0,0,7,0,0,0,164,157,1,0,37,1,0,0,37,1,0,0,10,0,0,0,160,157,1,0,24,1,0,0,24,1,0,0,10,0,0,0,0,157,1,0,16,1,0,0,16,1,0,0,10,0,0,0,248,156,1,0,23,1,0,0,23,1,0,0,1,0,0,0,244,156,1,0,10,1,0,0,39,1,0,0,10,0,0,0,236,156,1,0,15,1,0,0,15,1,0,0,10,0,0,0,224,156,1,0,22,1,0,0,22,1,0,0,1,0,0,0,212,156,1,0,21,1,0,0,21,1,0,0,6,0,0,0,204,156,1,0,31,1,0,0,31,1,0,0,4,0,0,0,168,156,1,0,3,1,0,0,3,1,0,0,10,0,0,0,144,156,1,0,6,1,0,0,6,1,0,0,0,0,0,0,132,156,1,0,47,1,0,0,47,1,0,0,1,0,0,0,248,155,1,0,48,1,0,0,48,1,0,0,1,0,0,0,232,155,1,0,49,1,0,0,49,1,0,0,1,0,0,0,228,155,1,0,46,1,0,0,46,1,0,0,1,0,0,0,220,155,1,0,44,1,0,0,44,1,0,0,7,0,0,0,208,155,1,0,45,1,0,0,45,1,0,0,1,0,0,0,96,129,1,0,0,0,0,0,0,0,0,0,0,0,0,0,180,155,1,0,2,1,0,0,2,1,0,0,9,0,0,0,96,129,1,0,0,0,0,0,0,0,0,0,0,0,0,0,96,129,1,0,0,0,0,0,0,0,0,0,0,0,0,0,172,155,1,0,17,1,0,0,41,1,0,0,10,0,0,0,154,1,0,0,110,2,0,0,150,1,0,0,152,1,0,0,100,2,0,0,148,1,0,0,142,1,0,0,144,1,0,0,138,1,0,0,140,1,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,89,64,0,0,0,0,0,136,195,64,0,0,0,0,132,215,151,65,0,128,224,55,121,195,65,67,23,110,5,181,181,184,147,70,245,249,63,233,3,79,56,77,50,29,48,249,72,119,130,90,60,191,115,127,221,79,21,117,31,0,0,0,28,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,29,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,113,2,0,0,224,178,1,0,178,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
.concat([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,136,1,0,114,0,0,0,82,73,84,69,48,48,48,49,107,173,0,0,57,174,77,65,84,90,48,48,48,48,73,82,69,80,0,0,57,144,48,48,48,48,0,143,0,0,0,0,3,47,0,1,0,3,0,0,0,123,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,128,0,5,0,128,64,68,0,128,4,69,0,128,0,5,0,128,128,68,0,128,4,197,0,128,0,5,1,0,0,5,0,128,0,67,0,128,5,69,0,128,0,5,1,0,0,5,0,128,192,67,0,128,6,69,0,128,0,5,0,128,128,68,0,128,10,197,0,128,0,5,0,128,64,68,0,128,14,69,0,128,0,5,1,0,0,5,0,129,0,67,0,128,32,69,0,128,0,5,1,0,2,145,0,129,128,67,0,128,33,69,0,128,0,5,1,0,2,145,0,129,192,67,0,128,33,197,0,128,0,5,1,0,2,145,0,130,0,67,0,128,34,69,0,128,0,5,1,0,4,17,0,130,64,67,0,128,34,197,0,128,0,5,1,0,2,145,0,130,128,67,0,128,35,69,0,128,0,5,1,0,2,145,0,130,192,67,0,128,35,197,0,128,0,5,1,0,2,145,0,131,0,67,0,128,36,69,0,128,0,5,1,0,6,17,0,131,64,67,0,128,37,197,0,128,0,5,1,0,2,145,0,131,128,67,0,128,38,69,0,128,0,5,1,0,7,17,0,131,192,67,0,128,38,197,0,128,0,5,1,0,8,17,0,132,64,67,0,128,39,69,0,128,0,5,1,0,0,5,0,132,128,67,0,128,39,197,0,128,0,5,0,128,64,68,0,128,51,69,0,128,0,5,1,0,0,5,0,132,128,67,0,128,51,197,0,128,0,5,0,132,192,68,0,128,52,69,0,128,0,5,1,0,0,5,0,133,0,67,0,128,55,197,0,128,0,5,0,128,128,68,0,128,60,69,0,128,0,5,1,0,0,5,0,133,64,67,0,128,60,197,0,128,0,5,0,132,192,68,0,128,61,69,0,128,0,5,1,0,0,5,0,133,128,67,0,128,63,197,0,128,0,5,0,128,64,68,0,128,64,197,0,128,0,5,1,0,0,5,0,133,128,67,0,128,65,69,0,128,0,5,1,0,0,5,0,133,192,67,0,128,65,197,0,128,0,5,0,128,128,68,0,128,70,197,0,128,0,5,1,0,0,5,0,133,192,67,0,128,71,69,0,0,0,74,0,0,0,0,0,0,0,24,0,5,65,114,114,97,121,0,0,10,69,110,117,109,101,114,97,98,108,101,0,0,10,67,111,109,112,97,114,97,98,108,101,0,0,6,77,111,100,117,108,101,0,0,9,69,120,99,101,112,116,105,111,110,0,0,13,83,116,97,110,100,97,114,100,69,114,114,111,114,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,14,76,111,99,97,108,74,117,109,112,69,114,114,111,114,0,0,10,82,97,110,103,101,69,114,114,111,114,0,0,16,70,108,111,97,116,68,111,109,97,105,110,69,114,114,111,114,0,0,11,82,101,103,101,120,112,69,114,114,111,114,0,0,9,84,121,112,101,69,114,114,111,114,0,0,9,78,97,109,101,69,114,114,111,114,0,0,13,78,111,77,101,116,104,111,100,69,114,114,111,114,0,0,10,73,110,100,101,120,69,114,114,111,114,0,0,8,75,101,121,69,114,114,111,114,0,0,11,83,99,114,105,112,116,69,114,114,111,114,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,4,72,97,115,104,0,0,6,75,101,114,110,101,108,0,0,7,73,110,116,101,103,101,114,0,0,7,78,117,109,101,114,105,99,0,0,5,82,97,110,103,101,0,0,6,83,116,114,105,110,103,0,0,0,0,183,0,1,0,4,0,0,0,22,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,1,132,1,128,1,4,2,0,0,5,0,129,1,32,0,128,0,72,1,0,10,192,0,129,64,70,0,128,0,72,1,0,12,192,0,129,128,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,7,0,4,101,97,99,104,0,0,10,101,97,99,104,95,105,110,100,101,120,0,0,8,99,111,108,108,101,99,116,33,0,0,4,109,97,112,33,0,0,12,97,108,105,97,115,95,109,101,116,104,111,100,0,0,10,105,110,105,116,105,97,108,105,122,101,0,0,6,100,101,108,101,116,101,0,0,0,0,252,0,5,0,8,0,0,0,46,0,0,0,166,2,191,255,3,3,0,0,6,3,0,0,32,3,0,64,175,1,1,64,1,1,129,128,1,0,64,11,23,2,128,0,6,3,0,128,1,3,0,192,173,1,1,128,1,2,128,128,160,2,1,64,1,2,129,0,1,2,192,0,153,0,64,5,23,2,129,0,1,3,0,0,5,2,129,0,178,2,192,2,25,2,128,192,1,3,0,0,6,3,0,0,32,2,129,64,182,2,192,0,153,0,64,8,151,2,128,64,1,3,1,0,1,2,129,128,160,2,128,128,1,3,0,192,1,2,129,192,179,2,192,2,25,2,128,192,1,3,0,0,6,3,0,0,32,2,130,0,180,2,192,2,25,2,128,0,6,2,128,0,32,2,128,64,175,1,129,64,1,2,191,238,24,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,9,0,6,108,101,110,103,116,104,0,0,1,45,0,0,2,91,93,0,0,1,43,0,0,2,61,61,0,0,2,62,61,0,0,4,99,97,108,108,0,0,1,60,0,0,2,60,61,0,0,0,0,108,0,3,0,5,0,0,0,16,0,0,0,166,1,63,255,131,0,64,3,23,1,128,64,1,2,0,128,1,1,128,0,160,1,128,128,1,1,128,64,173,1,0,192,1,1,128,128,1,2,0,0,6,2,0,192,32,1,128,128,179,1,191,250,152,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,4,0,4,99,97,108,108,0,0,1,43,0,0,1,60,0,0,6,108,101,110,103,116,104,0,0,0,0,57,0,2,0,4,0,0,0,6,0,0,0,166,1,0,0,6,1,128,3,64,1,0,0,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,1,0,10,101,97,99,104,95,105,110,100,101,120,0,0,0,0,82,0,3,0,7,0,0,0,11,2,0,0,38,1,128,64,21,2,0,0,6,2,128,64,1,2,0,64,160,1,128,0,160,2,0,0,6,2,128,64,1,3,0,192,1,2,0,129,32,1,128,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,2,91,93,0,0,3,91,93,61,0,0,0,1,144,0,5,0,9,0,0,0,57,0,32,0,166,0,64,1,23,0,64,1,23,0,64,1,23,0,191,255,131,1,0,0,5,2,128,64,1,3,0,0,145,2,128,0,160,2,192,0,153,0,64,2,23,2,128,0,6,3,0,1,145,3,128,0,61,2,128,129,32,2,128,64,1,3,63,255,131,2,129,0,179,2,192,2,25,2,128,0,6,3,0,2,145,3,128,0,189,2,128,129,32,2,128,0,6,2,129,128,32,2,128,64,1,3,63,255,131,2,129,192,181,2,192,13,25,2,128,0,5,3,0,0,6,3,128,64,1,3,130,64,175,4,1,64,1,3,2,1,32,2,63,255,131,0,64,7,23,2,128,192,1,2,192,2,25,2,128,192,1,3,1,0,1,2,130,128,160,0,64,0,151,2,128,128,1,3,0,0,6,3,129,0,1,4,1,64,1,3,2,1,32,2,129,0,1,2,130,192,173,2,1,64,1,2,129,0,1,3,0,64,1,2,129,0,179,2,191,247,24,0,0,0,6,0,0,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,19,110,101,103,97,116,105,118,101,32,97,114,114,97,121,32,115,105,122,101,0,0,0,12,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,1,60,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,5,99,108,101,97,114,0,0,1,62,0,0,3,91,93,61,0,0,1,45,0,0,4,99,97,108,108,0,0,1,43,0,0,0,0,140,0,5,0,7,0,0,0,22,2,0,0,166,0,64,2,23,2,128,0,6,3,0,192,1,2,128,0,160,2,0,64,1,2,128,0,6,3,0,64,1,2,128,64,160,1,129,64,1,2,191,251,152,2,129,0,1,3,0,0,5,2,128,128,178,2,192,0,153,2,128,128,1,2,192,1,153,2,128,128,1,2,128,192,32,0,64,0,151,2,129,0,1,2,128,0,41,0,0,0,0,0,0,0,4,0,9,100,101,108,101,116,101,95,97,116,0,0,5,105,110,100,101,120,0,0,2,61,61,0,0,4,99,97,108,108,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,108,0,1,0,3,0,0,0,11,0,128,0,6,1,0,0,145,0,128,0,160,0,128,0,6,1,0,1,17,0,128,0,160,0,128,0,72,1,0,2,192,0,128,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,4,0,7,105,110,99,108,117,100,101,0,0,10,69,110,117,109,101,114,97,98,108,101,0,0,10,67,111,109,112,97,114,97,98,108,101,0,0,5,115,111,114,116,33,0,0,0,0,65,0,2,0,5,0,0,0,7,0,0,0,166,1,0,0,6,1,128,0,6,2,0,64,1,1,128,64,33,1,0,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,114,101,112,108,97,99,101,0,0,4,115,111,114,116,0,0,0,0,127,0,1,0,2,0,0,0,14,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,8,192,0,128,64,70,0,128,0,72,1,0,14,192,0,128,128,70,0,128,0,72,1,0,16,192,0,128,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,4,0,11,97,116,116,114,95,114,101,97,100,101,114,0,0,11,97,116,116,114,95,119,114,105,116,101,114,0,0,13,97,116,116,114,95,97,99,99,101,115,115,111,114,0,0,4,97,116,116,114,0,0,0,0,47,0,3,0,5,0,0,0,5,0,8,0,38,1,128,64,1,2,0,3,64,1,128,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,108,0,4,0,7,0,0,0,12,2,0,0,38,2,0,0,61,2,128,64,1,2,128,64,32,2,0,0,172,2,0,128,32,1,129,0,1,2,0,0,6,2,128,64,1,3,0,3,64,2,0,192,161,2,0,0,41,0,0,0,1,16,0,1,64,0,0,0,4,0,1,43,0,0,4,116,111,95,115,0,0,6,105,110,116,101,114,110,0,0,13,100,101,102,105,110,101,95,109,101,116,104,111,100,0,0,0,0,60,0,1,0,3,0,0,0,4,0,128,0,6,1,0,192,21,0,128,0,160,0,128,0,41,0,0,0,0,0,0,0,1,0,21,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,103,101,116,0,0,0,0,47,0,3,0,5,0,0,0,5,0,8,0,38,1,128,64,1,2,0,3,64,1,128,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,136,0,4,0,7,0,0,0,18,2,0,0,38,2,0,0,61,2,128,64,1,2,128,64,32,2,0,0,172,2,0,128,32,1,129,0,1,2,0,64,1,2,0,64,32,2,128,0,189,2,0,0,172,2,0,128,32,0,129,0,1,2,0,0,6,2,128,64,1,3,0,3,64,2,0,192,161,2,0,0,41,0,0,0,2,16,0,1,64,16,0,1,61,0,0,0,4,0,1,43,0,0,4,116,111,95,115,0,0,6,105,110,116,101,114,110,0,0,13,100,101,102,105,110,101,95,109,101,116,104,111,100,0,0,0,0,68,0,3,0,6,0,0,0,6,2,0,0,38,1,128,0,6,2,0,192,21,2,128,64,1,1,128,1,32,1,128,0,41,0,0,0,0,0,0,0,1,0,21,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,115,101,116,0,0,0,0,96,0,3,0,6,0,0,0,12,0,8,0,38,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,127,160,1,128,0,41,0,0,0,0,0,0,0,2,0,11,97,116,116,114,95,114,101,97,100,101,114,0,0,11,97,116,116,114,95,119,114,105,116,101,114,0,0,0,0,54,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,11,97,116,116,114,95,114,101,97,100,101,114,0,0,0,0,134,0,1,0,2,0,0,0,20,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,128,0,72,1,0,12,192,0,129,64,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,6,0,1,60,0,0,2,60,61,0,0,2,61,61,0,0,1,62,0,0,2,62,61,0,0,8,98,101,116,119,101,101,110,63,0,0,0,0,109,0,4,0,6,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,179,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,0,0,0,0,0,0,0,3,0,3,60,61,62,0,0,4,110,105,108,63,0,0,1,60,0,0,0,0,110,0,4,0,6,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,180,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,0,0,0,0,0,0,0,3,0,3,60,61,62,0,0,4,110,105,108,63,0,0,2,60,61,0,0,0,0,83,0,4,0,6,0,0,0,13,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,191,255,131,2,0,64,178,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,0,0,0,0,0,0,0,2,0,3,60,61,62,0,0,2,61,61,0,0,0,0,109,0,4,0,6,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,181,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,0,0,0,0,0,0,0,3,0,3,60,61,62,0,0,4,110,105,108,63,0,0,1,62,0,0,0,0,110,0,4,0,6,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,182,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,0,0,0,0,0,0,0,3,0,3,60,61,62,0,0,4,110,105,108,63,0,0,2,62,61,0,0,0,0,80,0,4,0,6,0,0,0,13,4,0,0,38,2,0,0,6,2,128,64,1,2,0,0,179,2,64,1,152,2,0,0,6,2,128,128,1,2,0,64,181,2,64,1,25,2,0,0,8,0,64,0,151,2,0,0,7,2,0,0,41,0,0,0,0,0,0,0,2,0,1,60,0,0,1,62,0,0,0,2,41,0,1,0,4,0,0,0,79,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,8,192,0,128,64,70,0,128,0,72,1,0,14,192,0,128,128,70,0,128,0,72,1,0,18,192,0,128,192,70,0,128,0,72,1,0,22,192,0,129,0,70,0,128,0,72,1,0,26,192,0,129,64,70,0,128,0,72,1,0,3,4,1,128,1,132,2,0,0,5,0,129,193,32,0,128,0,72,1,0,30,192,0,130,0,70,0,128,0,72,1,0,34,192,0,130,64,70,0,128,0,72,1,0,38,192,0,130,128,70,0,128,0,72,1,0,42,192,0,130,192,70,0,128,0,72,1,0,6,4,1,128,5,132,2,0,0,5,0,129,193,32,0,128,0,72,1,0,6,132,1,128,1,4,2,0,0,5,0,129,193,32,0,128,0,72,1,0,48,192,0,131,128,70,0,128,0,72,1,0,52,192,0,131,192,70,0,128,0,72,1,0,8,4,1,128,5,4,2,0,0,5,0,129,193,32,0,128,0,72,1,0,56,192,0,132,64,70,0,128,0,72,1,0,60,192,0,132,128,70,0,128,0,72,1,0,9,132,1,128,4,4,2,0,0,5,0,129,193,32,0,128,0,72,1,0,64,192,0,133,0,70,0,128,0,72,1,0,68,192,0,133,64,70,0,128,0,72,1,0,11,4,1,128,2,132,2,0,0,5,0,129,193,32,1,0,0,41,0,0,0,0,0,0,0,23,0,4,97,108,108,63,0,0,4,97,110,121,63,0,0,7,99,111,108,108,101,99,116,0,0,6,100,101,116,101,99,116,0,0,15,101,97,99,104,95,119,105,116,104,95,105,110,100,101,120,0,0,7,101,110,116,114,105,101,115,0,0,4,102,105,110,100,0,0,12,97,108,105,97,115,95,109,101,116,104,111,100,0,0,8,102,105,110,100,95,97,108,108,0,0,4,103,114,101,112,0,0,8,105,110,99,108,117,100,101,63,0,0,6,105,110,106,101,99,116,0,0,6,114,101,100,117,99,101,0,0,3,109,97,112,0,0,3,109,97,120,0,0,3,109,105,110,0,0,7,109,101,109,98,101,114,63,0,0,9,112,97,114,116,105,116,105,111,110,0,0,6,114,101,106,101,99,116,0,0,6,115,101,108,101,99,116,0,0,12,95,95,115,111,114,116,95,115,117,98,95,95,0,0,4,115,111,114,116,0,0,4,116,111,95,97,0,0,0,0,75,0,3,0,5,0,0,0,12,0,0,0,166,1,0,0,7,1,128,64,1,1,192,2,25,1,128,0,6,2,0,3,64,1,128,0,33,0,64,1,151,1,128,0,6,2,0,5,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,71,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,8,1,128,128,22,1,128,64,41,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,56,0,3,0,4,0,0,0,9,2,0,0,38,1,128,64,1,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,8,1,128,128,22,1,128,64,41,1,128,0,41,0,0,0,0,0,0,0,0,0,0,0,75,0,3,0,5,0,0,0,12,0,0,0,166,1,0,0,8,1,128,64,1,1,192,2,25,1,128,0,6,2,0,3,64,1,128,0,33,0,64,1,151,1,128,0,6,2,0,5,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,71,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,2,25,1,128,0,7,1,128,128,22,1,128,64,41,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,56,0,3,0,4,0,0,0,9,2,0,0,38,1,128,64,1,1,192,2,25,1,128,0,7,1,128,128,22,1,128,64,41,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,62,0,3,0,6,0,0,0,7,2,0,0,38,1,128,128,21,2,0,64,21,2,128,64,1,2,0,64,160,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,112,117,115,104,0,0,4,99,97,108,108,0,0,0,0,63,0,4,0,6,0,0,0,9,0,16,0,166,0,64,0,151,0,64,0,151,0,128,0,5,1,128,64,1,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,67,0,3,0,5,0,0,0,10,2,0,0,38,1,128,128,21,2,0,64,1,1,128,0,160,1,192,1,153,0,128,192,22,1,128,64,41,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,55,0,3,0,5,0,0,0,7,0,0,0,166,1,63,255,131,1,128,0,6,2,0,3,64,1,128,0,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,67,0,3,0,6,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,2,128,128,21,1,128,1,32,1,128,128,21,1,128,64,173,1,128,128,22,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,1,43,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,38,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,47,0,3,0,5,0,0,0,5,2,0,0,38,1,128,128,21,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,4,112,117,115,104,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,78,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,2,25,1,128,128,21,2,0,64,1,1,128,64,160,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,4,112,117,115,104,0,0,0,0,51,0,4,0,6,0,0,0,6,2,0,0,166,1,129,0,55,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,108,0,3,0,6,0,0,0,17,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,5,25,1,128,192,21,2,0,128,21,2,64,2,25,2,0,128,21,2,128,64,1,2,0,128,160,0,64,0,151,2,0,64,1,1,128,64,160,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,3,0,3,61,61,61,0,0,4,112,117,115,104,0,0,4,99,97,108,108,0,0,0,0,51,0,4,0,6,0,0,0,6,2,0,0,38,1,128,0,8,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,69,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,1,2,0,64,21,1,128,0,178,1,192,2,25,1,128,0,7,1,128,192,22,1,128,64,41,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,1,0,2,61,61,0,0,0,1,18,0,6,0,9,0,0,0,39,0,8,0,166,3,0,64,1,3,0,0,32,3,192,0,131,3,0,64,181,3,64,2,25,3,0,0,6,3,128,1,145,4,0,0,61,3,0,129,32,3,0,2,17,3,128,64,1,4,63,255,3,3,129,128,160,3,1,64,160,3,64,4,25,3,0,64,1,3,191,255,3,3,1,128,160,1,129,128,1,3,0,3,192,1,1,128,1,3,0,64,1,3,1,192,32,3,0,64,1,3,2,0,32,3,64,1,153,2,0,0,7,2,128,0,5,0,64,2,151,2,0,0,8,3,0,64,1,3,191,255,131,3,1,128,160,2,129,128,1,3,0,0,6,3,128,5,64,3,2,64,33,2,128,0,41,0,0,0,1,16,0,18,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,0,0,0,10,0,4,115,105,122,101,0,0,1,62,0,0,5,114,97,105,115,101,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,6,83,121,109,98,111,108,0,0,3,61,61,61,0,0,2,91,93,0,0,3,112,111,112,0,0,6,101,109,112,116,121,63,0,0,4,101,97,99,104,0,0,0,0,51,0,4,0,7,0,0,0,6,4,0,0,38,2,0,64,1,2,128,192,21,3,0,128,1,2,0,1,32,2,0,0,41,0,0,0,0,0,0,0,1,0,4,115,101,110,100,0,0,0,0,83,0,3,0,6,0,0,0,14,2,0,0,38,1,129,0,21,1,192,2,153,1,128,0,8,1,129,0,22,1,128,64,1,1,129,64,22,0,64,2,151,1,128,128,21,2,1,64,21,2,128,64,1,1,128,1,32,1,129,64,22,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,55,0,4,0,6,0,0,0,7,0,0,0,166,1,0,0,7,1,128,0,5,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,165,0,3,0,6,0,0,0,32,2,0,0,38,1,128,128,21,1,192,2,25,0,128,192,22,1,128,0,8,1,128,128,22,0,64,12,23,1,128,64,21,1,192,6,25,1,128,64,21,2,0,64,1,2,128,192,21,1,128,1,32,2,63,255,131,1,128,64,181,1,192,1,153,1,128,64,1,1,128,192,22,0,64,0,151,1,128,0,5,0,64,5,23,1,128,64,1,2,0,192,21,1,128,128,160,2,63,255,131,1,128,64,181,1,192,1,153,1,128,64,1,1,128,192,22,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,1,62,0,0,3,60,61,62,0,0,0,0,55,0,4,0,6,0,0,0,7,0,0,0,166,1,0,0,7,1,128,0,5,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,165,0,3,0,6,0,0,0,32,2,0,0,38,1,128,128,21,1,192,2,25,0,128,192,22,1,128,0,8,1,128,128,22,0,64,12,23,1,128,64,21,1,192,6,25,1,128,64,21,2,0,64,1,2,128,192,21,1,128,1,32,2,63,255,131,1,128,64,179,1,192,1,153,1,128,64,1,1,128,192,22,0,64,0,151,1,128,0,5,0,64,5,23,1,128,64,1,2,0,192,21,1,128,128,160,2,63,255,131,1,128,64,179,1,192,1,153,1,128,64,1,1,128,192,22,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,1,60,0,0,3,60,61,62,0,0,0,0,67,0,4,0,6,0,0,0,10,0,0,0,166,1,1,0,55,1,129,0,55,2,0,0,6,2,128,3,64,2,0,0,33,2,0,128,1,2,128,192,1,0,1,1,55,0,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,86,0,3,0,5,0,0,0,13,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,2,25,1,128,128,21,2,0,64,1,1,128,64,160,0,64,1,151,1,128,192,21,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,4,112,117,115,104,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,78,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,1,25,1,128,0,5,0,64,1,151,1,128,128,21,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,4,112,117,115,104,0,0,0,1,154,0,12,0,19,0,0,0,83,10,0,0,166,6,1,0,1,6,129,64,1,6,0,0,178,6,64,6,153,6,0,192,1,6,192,0,3,6,0,0,178,6,64,3,153,6,0,128,1,6,129,0,1,6,0,64,160,6,128,64,1,7,1,0,1,7,131,0,1,6,128,129,32,0,0,0,5,0,0,0,41,6,0,192,1,6,191,255,131,6,0,0,178,6,64,2,153,6,0,64,1,6,128,128,1,3,131,0,1,4,3,64,1,0,64,2,23,6,0,128,1,6,128,64,1,3,131,0,1,4,3,64,1,6,1,192,1,6,129,0,1,6,0,64,160,4,131,0,1,6,1,0,1,6,129,64,1,5,3,0,1,5,131,64,1,6,1,0,1,6,0,192,173,6,129,64,1,7,0,3,64,6,1,0,161,6,2,64,1,6,128,64,1,7,2,128,1,7,131,0,1,6,128,129,32,6,0,192,1,6,0,192,173,6,192,0,131,6,1,64,160,1,131,0,1,6,2,128,1,6,129,0,1,6,1,128,181,6,64,4,153,6,0,0,6,6,128,64,1,7,0,128,1,7,128,192,1,8,1,0,1,8,130,128,1,8,130,0,175,9,1,128,1,6,1,194,161,6,2,128,1,6,129,64,1,6,2,64,179,6,64,5,25,6,0,0,6,6,128,64,1,7,0,128,1,7,128,192,1,8,2,128,1,8,0,192,173,8,129,64,1,9,1,128,1,6,1,194,161,0,64,0,151,6,0,0,5,6,0,0,41,0,0,0,0,0,0,0,10,0,2,61,61,0,0,2,91,93,0,0,3,91,93,61,0,0,1,43,0,0,4,117,112,116,111,0,0,1,37,0,0,1,62,0,0,12,95,95,115,111,114,116,95,115,117,98,95,95,0,0,1,45,0,0,1,60,0,0,0,0,216,0,3,0,7,0,0,0,40,2,0,0,38,1,129,128,21,1,192,3,153,1,129,128,21,2,1,192,21,2,128,64,1,2,0,64,160,2,130,64,21,1,128,1,32,0,64,2,151,1,129,192,21,2,0,64,1,1,128,64,160,2,2,64,21,1,128,128,160,2,63,255,131,1,128,192,181,1,192,5,153,1,129,192,21,2,0,64,1,1,128,64,160,2,2,0,21,2,130,192,21,3,0,192,1,2,1,1,32,1,130,192,21,1,129,64,175,1,130,192,22,0,64,5,23,1,129,192,21,2,0,64,1,1,128,64,160,2,2,0,21,2,130,128,21,3,0,192,1,2,1,1,32,1,130,128,21,1,129,128,173,1,130,128,22,1,128,0,41,0,0,0,0,0,0,0,7,0,4,99,97,108,108,0,0,2,91,93,0,0,3,60,61,62,0,0,1,62,0,0,3,91,93,61,0,0,1,45,0,0,1,43,0,0,0,0,172,0,3,0,10,0,0,0,24,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,128,1,1,128,64,32,1,192,0,153,0,64,7,23,1,128,0,6,2,0,128,1,2,128,0,66,2,128,1,147,3,0,128,1,3,1,64,32,2,129,0,160,3,63,255,131,3,191,255,131,4,0,128,1,4,1,64,32,4,1,128,175,4,128,64,1,1,128,130,161,1,0,0,41,0,0,0,0,0,0,0,7,0,4,101,97,99,104,0,0,6,101,109,112,116,121,63,0,0,12,95,95,115,111,114,116,95,115,117,98,95,95,0,0,5,65,114,114,97,121,0,0,3,110,101,119,0,0,4,115,105,122,101,0,0,1,45,0,0,0,0,47,0,3,0,5,0,0,0,5,2,0,0,38,1,128,128,21,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,4,112,117,115,104,0,0,0,0,56,0,1,0,2,0,0,0,6,0,128,0,6,0,128,64,71,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,9,101,120,99,101,112,116,105,111,110,0,0,0,0,58,0,3,0,6,0,0,0,8,0,8,0,166,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,2,128,128,1,1,128,63,161,1,128,0,41,0,0,0,0,0,0,0,1,0,3,110,101,119,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,106,0,1,0,3,0,0,0,11,0,128,0,6,1,0,0,132,0,128,0,160,0,128,0,72,1,0,2,192,0,128,128,70,0,128,0,72,1,0,4,192,0,128,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,4,0,13,97,116,116,114,95,97,99,99,101,115,115,111,114,0,0,4,110,97,109,101,0,0,3,110,101,119,0,0,10,105,110,105,116,105,97])
.concat([108,105,122,101,0,0,0,0,89,0,4,0,7,0,0,0,11,0,32,0,38,0,64,1,23,0,64,1,23,0,64,1,23,0,128,0,61,1,0,0,5,2,0,0,6,2,128,64,1,3,0,128,1,2,0,1,32,2,0,0,41,0,0,0,1,16,0,9,78,97,109,101,69,114,114,111,114,0,0,0,1,0,10,105,110,105,116,105,97,108,105,122,101,0,0,0,0,72,0,4,0,6,0,0,0,11,0,32,0,38,0,64,1,23,0,64,1,23,0,64,1,23,0,128,0,5,1,0,0,5,1,0,0,14,2,128,64,1,3,0,0,5,2,0,0,164,2,0,0,41,0,0,0,0,0,0,0,1,0,5,64,110,97,109,101,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,247,0,1,0,2,0,0,0,32,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,8,192,0,128,128,70,0,128,0,72,1,0,12,192,0,128,192,70,0,128,0,72,1,0,16,192,0,129,0,70,0,128,0,72,1,0,18,192,0,129,64,70,0,128,0,72,1,0,26,192,0,129,128,70,0,128,0,72,1,0,32,192,0,129,192,70,0,128,0,72,1,0,36,192,0,130,0,70,0,128,0,72,1,0,42,192,0,130,64,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,10,0,6,100,101,108,101,116,101,0,0,4,101,97,99,104,0,0,8,101,97,99,104,95,107,101,121,0,0,10,101,97,99,104,95,118,97,108,117,101,0,0,10,105,110,105,116,105,97,108,105,122,101,0,0,5,109,101,114,103,101,0,0,7,114,101,106,101,99,116,33,0,0,6,114,101,106,101,99,116,0,0,7,115,101,108,101,99,116,33,0,0,6,115,101,108,101,99,116,0,0,0,0,117,0,3,0,5,0,0,0,16,2,0,0,166,1,128,128,1,1,192,2,25,1,128,0,6,2,0,64,1,1,128,0,160,1,128,64,32,1,192,2,25,1,128,128,1,2,0,64,1,1,128,128,160,0,64,1,151,1,128,0,6,2,0,64,1,1,128,192,160,1,128,0,41,0,0,0,0,0,0,0,4,0,8,104,97,115,95,107,101,121,63,0,0,1,33,0,0,4,99,97,108,108,0,0,8,95,95,100,101,108,101,116,101,0,0,0,0,62,0,2,0,4,0,0,0,7,0,0,0,166,1,0,0,6,1,0,0,32,1,128,3,64,1,0,64,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,2,0,4,107,101,121,115,0,0,4,101,97,99,104,0,0,0,0,68,0,3,0,7,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,2,128,0,6,3,0,64,1,2,128,64,160,2,1,1,55,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,2,91,93,0,0,0,0,62,0,2,0,4,0,0,0,7,0,0,0,166,1,0,0,6,1,0,0,32,1,128,3,64,1,0,64,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,2,0,4,107,101,121,115,0,0,4,101,97,99,104,0,0,0,0,47,0,3,0,5,0,0,0,5,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,62,0,2,0,4,0,0,0,7,0,0,0,166,1,0,0,6,1,0,0,32,1,128,3,64,1,0,64,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,2,0,4,107,101,121,115,0,0,4,101,97,99,104,0,0,0,0,60,0,3,0,6,0,0,0,7,2,0,0,38,1,128,64,21,2,0,0,6,2,128,64,1,2,0,64,160,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,2,91,93,0,0,0,0,66,0,3,0,6,0,0,0,8,0,8,0,166,1,128,0,6,2,0,128,1,2,1,0,183,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,11,95,95,105,110,105,116,95,99,111,114,101,0,0,0,0,202,0,4,0,6,0,0,0,26,2,0,0,166,1,129,0,63,2,0,64,1,2,128,0,132,2,0,0,160,2,64,0,153,0,64,1,151,2,0,0,6,2,128,0,61,2,0,128,160,2,0,64,1,2,0,64,32,0,129,0,1,2,0,0,6,2,128,3,64,2,0,192,33,2,0,128,1,2,64,2,25,2,0,64,1,2,128,5,64,2,0,192,33,0,64,1,151,2,0,64,1,2,128,7,64,2,0,192,33,1,128,0,41,0,0,0,1,16,0,32,99,97,110,39,116,32,99,111,110,118,101,114,116,32,97,114,103,117,109,101,110,116,32,105,110,116,111,32,72,97,115,104,0,0,0,4,0,11,114,101,115,112,111,110,100,95,116,111,63,0,0,7,116,111,95,104,97,115,104,0,0,5,114,97,105,115,101,0,0,8,101,97,99,104,95,107,101,121,0,0,0,0,67,0,3,0,7,0,0,0,9,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,2,0,192,21,2,128,64,1,3,0,192,1,2,0,65,32,1,128,0,41,0,0,0,0,0,0,0,2,0,2,91,93,0,0,3,91,93,61,0,0,0,0,141,0,3,0,8,0,0,0,23,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,192,5,25,1,128,128,21,2,0,64,1,2,128,0,6,3,0,64,1,2,128,128,160,3,0,64,21,3,128,64,1,3,0,128,160,1,128,65,160,0,64,1,151,1,128,64,21,2,0,64,1,1,128,128,160,2,0,192,21,2,128,64,1,3,0,192,1,2,0,193,32,1,128,0,41,0,0,0,0,0,0,0,4,0,8,104,97,115,95,107,101,121,63,0,0,4,99,97,108,108,0,0,2,91,93,0,0,3,91,93,61,0,0,0,0,67,0,3,0,7,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,2,0,192,21,2,128,64,1,3,0,192,1,2,0,65,32,1,128,0,41,0,0,0,0,0,0,0,2,0,2,91,93,0,0,3,91,93,61,0,0,0,0,118,0,3,0,5,0,0,0,17,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,128,1,1,128,64,32,2,63,255,131,1,128,128,178,1,192,1,25,0,0,0,5,0,0,0,41,1,128,128,1,2,0,5,64,1,128,192,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,4,0,8,101,97,99,104,95,107,101,121,0,0,4,115,105,122,101,0,0,2,61,61,0,0,4,101,97,99,104,0,0,0,0,103,0,4,0,7,0,0,0,16,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,2,25,2,0,128,21,2,128,64,1,2,0,128,160,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,4,112,117,115,104,0,0,0,0,49,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,6,100,101,108,101,116,101,0,0,0,0,55,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,63,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,8,101,97,99,104,95,107,101,121,0,0,0,0,110,0,4,0,8,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,1,25,2,0,0,5,0,64,2,151,2,0,192,1,2,128,128,21,3,0,64,1,3,129,0,1,2,128,129,32,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,3,91,93,61,0,0,0,0,118,0,3,0,5,0,0,0,17,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,128,1,1,128,64,32,2,63,255,131,1,128,128,178,1,192,1,25,0,0,0,5,0,0,0,41,1,128,128,1,2,0,5,64,1,128,192,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,4,0,8,101,97,99,104,95,107,101,121,0,0,4,115,105,122,101,0,0,2,61,61,0,0,4,101,97,99,104,0,0,0,0,103,0,4,0,7,0,0,0,16,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,1,25,2,0,0,5,0,64,1,151,2,0,128,21,2,128,64,1,2,0,128,160,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,4,112,117,115,104,0,0,0,0,49,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,6,100,101,108,101,116,101,0,0,0,0,55,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,63,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,8,101,97,99,104,95,107,101,121,0,0,0,0,110,0,4,0,8,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,3,25,2,0,192,1,2,128,128,21,3,0,64,1,3,129,0,1,2,128,129,32,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,3,91,93,61,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,59,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,0,10,69,110,117,109,101,114,97,98,108,101,0,0,0,0,130,0,1,0,2,0,0,0,23,0,128,0,6,0,128,64,71,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,0,70,0,128,0,6,0,128,64,71,1,0,6,192,0,128,64,70,0,128,0,6,0,128,64,71,1,0,8,192,0,128,128,70,0,128,0,72,1,0,10,192,0,128,128,70,0,128,0,72,1,0,12,192,0,128,64,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,3,0,1,96,0,0,4,108,111,111,112,0,0,4,101,118,97,108,0,0,0,0,104,0,3,0,6,0,0,0,7,2,0,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,17,96,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,53,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,17,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,6,75,101,114,110,101,108,0,0,1,96,0,0,0,0,59,0,2,0,3,0,0,0,8,0,0,0,38,0,64,1,23,1,0,0,43,1,0,0,32,1,0,0,7,1,63,254,24,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,107,0,3,0,6,0,0,0,7,2,0,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,20,101,118,97,108,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,56,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,17,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,6,75,101,114,110,101,108,0,0,4,101,118,97,108,0,0,0,0,59,0,2,0,3,0,0,0,8,0,0,0,38,0,64,1,23,1,0,0,43,1,0,0,32,1,0,0,7,1,63,254,24,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,189,0,1,0,2,0,0,0,26,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,128,0,72,1,0,12,192,0,129,64,70,0,128,0,72,1,0,14,192,0,129,128,70,0,128,0,72,1,0,16,192,0,129,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,8,0,4,99,101,105,108,0,0,6,100,111,119,110,116,111,0,0,5,102,108,111,111,114,0,0,5,116,105,109,101,115,0,0,5,114,111,117,110,100,0,0,8,116,114,117,110,99,97,116,101,0,0,4,117,112,116,111,0,0,4,115,116,101,112,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,96,0,4,0,6,0,0,0,15,2,0,0,166,1,128,0,6,0,64,3,23,2,0,128,1,2,128,192,1,2,0,0,160,2,0,192,1,2,0,64,175,1,129,0,1,2,0,192,1,2,128,64,1,2,0,128,182,2,63,251,24,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,1,45,0,0,2,62,61,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,95,0,3,0,5,0,0,0,15,0,0,0,166,1,63,255,131,0,64,3,23,1,128,64,1,2,0,128,1,1,128,0,160,1,128,128,1,1,128,64,173,1,0,192,1,1,128,128,1,2,0,0,6,1,128,128,179,1,191,251,24,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,1,43,0,0,1,60,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,96,0,4,0,6,0,0,0,15,2,0,0,166,1,128,0,6,0,64,3,23,2,0,128,1,2,128,192,1,2,0,0,160,2,0,192,1,2,0,64,173,1,129,0,1,2,0,192,1,2,128,64,1,2,0,128,180,2,63,251,24,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,1,43,0,0,2,60,61,0,0,0,0,170,0,5,0,7,0,0,0,27,2,16,0,166,0,64,0,151,0,64,0,151,1,64,0,3,2,128,64,1,3,0,0,145,2,128,0,160,2,192,1,153,2,128,0,6,2,128,128,32,0,64,0,151,2,128,0,6,2,1,64,1,0,64,3,151,2,128,192,1,3,1,0,1,2,128,192,160,2,129,0,1,3,0,128,1,2,129,0,172,2,1,64,1,2,129,0,1,3,0,64,1,2,129,64,180,2,191,250,152,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,6,0,8,107,105,110,100,95,111,102,63,0,0,5,70,108,111,97,116,0,0,4,116,111,95,102,0,0,4,99,97,108,108,0,0,1,43,0,0,2,60,61,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,59,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,0,10,67,111,109,112,97,114,97,98,108,101,0,0,0,0,104,0,1,0,2,0,0,0,14,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,4,0,5,112,114,105,110,116,0,0,4,112,117,116,115,0,0,1,112,0,0,6,112,114,105,110,116,102,0,0,0,0,106,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,19,112,114,105,110,116,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,105,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,18,112,117,116,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,102,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,15,112,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,107,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,20,112,114,105,110,116,102,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,47,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,1,89,0,4,0,7,0,0,0,52,0,0,0,166,2,0,0,6,2,0,0,32,1,1,0,1,2,0,128,1,2,128,1,4,2,0,64,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,2,17,3,0,0,61,2,0,193,32,2,0,0,6,2,1,64,32,1,129,0,1,2,0,128,1,2,128,192,1,2,1,128,160,2,191,255,131,2,1,192,181,2,64,1,25,0,0,0,6,0,0,0,41,0,64,3,23,2,0,64,1,2,128,128,1,2,2,0,160,2,0,128,1,2,0,128,32,1,1,0,1,2,0,128,1,2,128,192,1,2,1,128,160,2,191,255,131,2,2,64,179,2,63,250,24,2,0,0,6,2,2,128,32,2,2,192,32,2,64,2,153,2,0,128,1,2,128,192,1,2,1,128,160,2,191,255,131,2,3,0,178,2,64,1,153,2,0,64,1,2,128,128,1,2,2,0,160,0,0,0,6,0,0,0,41,0,0,0,1,16,0,13,99,97,110,39,116,32,105,116,101,114,97,116,101,0,0,0,13,0,5,102,105,114,115,116,0,0,11,114,101,115,112,111,110,100,95,116,111,63,0,0,4,115,117,99,99,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,4,108,97,115,116,0,0,3,60,61,62,0,0,1,62,0,0,4,99,97,108,108,0,0,1,60,0,0,12,101,120,99,108,117,100,101,95,101,110,100,63,0,0,1,33,0,0,2,61,61,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,59,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,0,10,69,110,117,109,101,114,97,98,108,101,0,0,0,0,213,0,1,0,2,0,0,0,29,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,128,0,72,1,0,12,192,0,129,64,70,0,128,0,72,1,0,14,192,0,129,128,70,0,128,0,72,1,0,16,192,0,129,192,70,0,128,0,72,1,0,18,192,0,130,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,9,0,9,101,97,99,104,95,108,105,110,101,0,0,4,103,115,117,98,0,0,5,103,115,117,98,33,0,0,4,115,99,97,110,0,0,3,115,117,98,0,0,4,115,117,98,33,0,0,9,101,97,99,104,95,99,104,97,114,0,0,9,101,97,99,104,95,98,121,116,101,0,0,3,91,93,61,0,0,0,0,207,0,4,0,9,0,0,0,37,0,0,0,166,1,63,255,131,0,64,6,23,2,0,64,1,2,128,0,6,3,0,128,1,3,128,192,1,3,128,128,173,4,0,128,1,3,128,192,174,2,128,65,32,2,0,0,160,2,0,192,1,2,0,128,173,1,1,0,1,2,0,0,6,2,192,4,131,3,0,128,1,2,1,1,32,1,129,0,1,2,63,247,24,2,0,0,6,2,1,64,32,2,128,128,1,2,1,128,181,2,64,4,153,2,0,64,1,2,128,0,6,3,0,128,1,3,128,0,6,3,129,64,32,4,0,128,1,3,128,192,174,2,128,65,32,2,0,0,160,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,7,0,4,99,97,108,108,0,0,2,91,93,0,0,1,43,0,0,1,45,0,0,5,105,110,100,101,120,0,0,4,115,105,122,101,0,0,1,62,0,0,0,1,23,0,3,0,7,0,0,0,42,0,8,0,166,1,128,64,1,1,128,0,32,2,64,0,131,1,128,64,178,1,192,5,153,1,128,0,6,2,0,64,1,2,191,255,131,2,0,192,160,2,191,255,3,1,128,129,32,2,0,64,1,2,192,0,3,2,0,192,160,1,129,0,160,0,64,12,23,1,128,64,1,1,128,0,32,2,64,0,3,1,128,64,178,1,192,0,153,1,128,128,1,1,192,6,153,1,128,0,6,2,0,64,1,2,191,255,131,2,0,192,160,2,191,255,3,1,128,129,32,2,0,128,1,2,128,64,1,3,63,255,131,2,128,192,160,2,1,64,160,1,129,0,160,0,64,2,23,1,128,0,6,2,0,3,145,2,128,0,61,1,129,129,32,1,128,0,41,0,0,0,1,16,0,25,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,8,0,4,115,105,122,101,0,0,2,61,61,0,0,5,115,112,108,105,116,0,0,2,91,93,0,0,4,106,111,105,110,0,0,4,99,97,108,108,0,0,5,114,97,105,115,101,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,0,118,0,4,0,7,0,0,0,19,0,8,0,166,2,0,0,6,2,129,64,55,3,0,64,1,2,129,128,56,3,0,128,1,2,0,63,161,1,129,0,1,2,0,192,1,2,128,0,6,2,0,64,160,2,64,2,153,2,0,0,6,2,128,192,1,2,0,128,160,2,0,0,6,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,4,103,115,117,98,0,0,2,33,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,160,0,3,0,6,0,0,0,12,2,0,0,166,1,128,0,17,2,0,1,4,1,128,64,160,1,192,1,25,1,128,0,5,0,64,2,23,1,128,0,6,2,0,2,17,2,128,0,61,1,128,193,32,1,128,0,41,0,0,0,1,16,0,24,115,99,97,110,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,40,121,101,116,41,0,0,0,5,0,6,79,98,106,101,99,116,0,0,14,99,111,110,115,116,95,100,101,102,105,110,101,100,63,0,0,6,82,101,103,101,120,112,0,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,0,1,23,0,3,0,7,0,0,0,42,0,8,0,166,1,128,64,1,1,128,0,32,2,64,0,131,1,128,64,178,1,192,5,153,1,128,0,6,2,0,64,1,2,191,255,131,2,0,192,160,2,192,0,131,1,128,129,32,2,0,64,1,2,192,0,3,2,0,192,160,1,129,0,160,0,64,12,23,1,128,64,1,1,128,0,32,2,64,0,3,1,128,64,178,1,192,0,153,1,128,128,1,1,192,6,153,1,128,0,6,2,0,64,1,2,191,255,131,2,0,192,160,2,192,0,131,1,128,129,32,2,0,128,1,2,128,64,1,3,63,255,131,2,128,192,160,2,1,64,160,1,129,0,160,0,64,2,23,1,128,0,6,2,0,3,145,2,128,0,61,1,129,129,32,1,128,0,41,0,0,0,1,16,0,25,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,8,0,4,115,105,122,101,0,0,2,61,61,0,0,5,115,112,108,105,116,0,0,2,91,93,0,0,4,106,111,105,110,0,0,4,99,97,108,108,0,0,5,114,97,105,115,101,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,0,117,0,4,0,7,0,0,0,19,0,8,0,166,2,0,0,6,2,129,64,55,3,0,64,1,2,129,128,56,3,0,128,1,2,0,63,161,1,129,0,1,2,0,192,1,2,128,0,6,2,0,64,160,2,64,2,153,2,0,0,6,2,128,192,1,2,0,128,160,2,0,0,6,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,3,115,117,98,0,0,2,33,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,119,0,3,0,6,0,0,0,18,0,0,0,166,1,63,255,131,0,64,4,23,1,128,64,1,2,0,0,6,2,128,128,1,2,0,64,160,1,128,0,160,1,128,128,1,1,128,128,173,1,0,192,1,1,128,128,1,2,0,0,6,2,1,0,32,1,128,192,179,1,191,249,152,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,5,0,4,99,97,108,108,0,0,2,91,93,0,0,1,43,0,0,1,60,0,0,4,115,105,122,101,0,0,0,0,139,0,4,0,7,0,0,0,21,0,0,0,166,2,0,0,6,2,0,0,32,1,1,0,1,1,191,255,131,0,64,4,23,2,0,64,1,2,128,128,1,3,0,192,1,2,128,128,160,2,0,64,160,2,0,192,1,2,0,192,173,1,129,0,1,2,0,192,1,2,128,128,1,2,129,64,32,2,1,0,179,2,63,249,152,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,6,0,5,98,121,116,101,115,0,0,4,99,97,108,108,0,0,2,91,93,0,0,1,43,0,0,1,60,0,0,4,115,105,122,101,0,0,0,0,137,0,6,0,10,0,0,0,22,4,0,0,38,3,0,0,6,3,191,255,131,4,0,64,1,3,0,1,32,2,1,128,1,3,0,0,6,3,128,64,1,3,128,64,173,4,63,255,3,3,129,192,65,3,0,0,160,2,129,128,1,3,0,0,6,3,129,0,1,4,0,128,1,4,129,64,1,3,129,193,183,4,0,0,61,3,128,192,160,3,0,128,160,3,0,0,41,0,0,0,1,16,0,0,0,0,0,4,0,2,91,93,0,0,1,43,0,0,7,114,101,112,108,97,99,101,0,0,4,106,111,105,110,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,59,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,0,10,67,111,109,112,97,114,97,98,108,101,0,69,78,68,0,0,0,0,8,0,0,84,164,1,0,96,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,54,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,30,0,0,0,33,0,0,0,34,0,0,0,37,0,0,0,40,0,0,0,43,0,0,0,44,0,0,0,47,0,0,0,48,0,0,0,51,0,0,0,55,0,0,0,55,0,0,0,79,0,0,0,80,0,0,0,94,0,0,0,105,0,0,0,119,0,0,0,151,0,0,0,152,0,0,0,154,0,0,0,194,0,0,0,204,0,0,0,209,0,0,0,239,0,0,0,218,0,0,0,247,0,0,0,227,0,0,0,233,0,0,0,254,0,0,0,14,1,0,0,28,1,0,0,42,1,0,0,56,1,0,0,70,1,0,0,71,1,0,0,72,1,0,0,73,1,0,0,79,1,0,0,80,1,0,0,94,1,0,0,95,1,0,0,96,1,0,0,99,1,0,0,123,1,0,0,105,1,0,0,106,1,0,0,110,1,0,0,114,1,0,0,118,1,0,0,119,1,0,0,120,1,0,0,124,1,0,0,125,1,0,0,130,1,0,0,110,111,32,116,97,114,103,101,116,32,99,108,97,115,115,32,111,114,32,109,111,100,117,108,101,0,0,0,115,117,112,101,114,32,99,97,108,108,101,100,32,111,117,116,115,105,100,101,32,111,102,32,109,101,116,104,111,100,0,0,0,0,0,0,223,176,8,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,123,1,0,96,122,1,0,88,121,1,0,96,120,1,0,168,119,1,0,172,118,1,0,32,118,1,0,224,117,1,0,116,117,1,0,248,116,1,0,200,115,1,0,104,115,1,0,0,0,0,0,117,110,101,120,112,101,99,116,101,100,32,0,6,5,5,0,114,101,116,117,114,110,0,98,114,101,97,107,0,0,121,105,101,108,100,0,0,0,0,0,99,111,100,101,103,101,110,32,101,114,114,111,114,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,114,101,112,32,108,111,97,100,32,101,114,114,111,114,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,14,51,16,8,11,13,51,51,51,51,10,51,13,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,11,51,13,1,26,4,1,8,28,51,23,51,1,1,27,5,19,21,51,8,3,3,11,51,21,24,16,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,0,0,0,223,176,8,153,82,73,84,69,48,48,48,49,111,233,0,0,1,1,77,65,84,90,48,48,48,48,73,82,69,80,0,0,0,227,48,48,48,48,0,4,0,0,0,0,0,49,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,6,83,121,109,98,111,108,0,0,0,0,50,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,7,116,111,95,112,114,111,99,0,0,0,0,53,0,2,0,4,0,0,0,5,0,0,0,38,1,0,0,17,1,128,3,64,1,0,64,33,1,0,0,41,0,0,0,0,0,0,0,2,0,4,80,114,111,99,0,0,3,110,101,119,0,0,0,0,59,0,4,0,7,0,0,0,8,2,8,0,38,2,0,64,1,2,128,0,6,2,129,64,183,3,0,128,1,2,129,128,56,2,0,63,160,2,0,0,41,0,0,0,0,0,0,0,1,0,4,115,101,110,100,0,69,78,68,0,0,0,0,8,0,0,0,82,73,84,69,48,48,48,49,121,204,0,0,2,192,77,65,84,90,48,48,48,48,73,82,69,80,0,0,2,162,48,48,48,48,0,8,0,0,0,0,0,99,0,1,0,3,0,0,0,11,0,128,0,17,1,0,1,4,0,128,64,160,0,192,2,153,0,128,0,5,1,0,0,5,0,128,128,67,0,128,0,197,0,64,0,151,0,128,0,5,0,0,0,74,0,0,0,0,0,0,0,3,0,6,79,98,106,101,99,116,0,0,14,99,111,110,115,116,95,100,101,102,105,110,101,100,63,0,0,6,83,116,114,117,99,116,0,0,0,0,92,0,1,0,2,0,0,0,11,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,6,192,0,128,64,70,0,128,0,72,1,0,10,192,0,128,128,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,3,0,4,101,97,99,104,0,0,9,101,97,99,104,95,112,97,105,114,0,0,6,115,101,108,101,99,116,0,0,0,0,77,0,2,0,4,0,0,0,8,0,0,0,166,1,0,0,6,1,0,0,32,1,0,64,32,1,128,3,64,1,0,128,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,5,99,108,97,115,115,0,0,7,109,101,109,98,101,114,115,0,0,4,101,97,99,104,0,0,0,0,60,0,3,0,6,0,0,0,7,2,0,0,38,1,128,64,21,2,0,0,6,2,128,64,1,2,0,64,160,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,2,91,93,0,0,0,0,77,0,2,0,4,0,0,0,8,0,0,0,166,1,0,0,6,1,0,0,32,1,0,64,32,1,128,3,64,1,0,128,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,5,99,108,97,115,115,0,0,7,109,101,109,98,101,114,115,0,0,4,101,97,99,104,0,0,0,0,77,0,3,0,7,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,2,0,64,32,2,128,0,6,3,0,64,1,2,128,128,160,1,128,1,32,1,128,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,6,116,111,95,115,121,109,0,0,2,91,93,0,0,0,0,77,0,3,0,5,0,0,0,8,0,0,0,166,1,0,192,55,1,128,0,6,1,128,0,32,1,128,64,32,2,0,3,64,1,128,128,33,1,0,0,41,0,0,0,0,0,0,0,3,0,5,99,108,97,115,115,0,0,7,109,101,109,98,101,114,115,0,0,4,101,97,99,104,0,0,0,0,99,0,4,0,6,0,0,0,15,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,192,1,2,0,64,160,2,64,2,25,2,0,128,21,2,128,192,1,2,0,128,160,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,4,112,117,115,104,0,69,78,68,0,0,0,0,8,82,73,84,69,48,48,48,49,170,180,0,0,5,22,77,65,84,90,48,48,48,48,73,82,69,80,0,0,4,248,48,48,48,48,0,9,0,0,0,0,0,49,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,6,83,116,114,105,110,103,0,0,0,0,177,0,1,0,2,0,0,0,23,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,128,0,72,1,0,12,192,0,129,64,70,0,128,0,72,1,0,14,192,0,129,128,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,7,0,6,108,115,116,114,105,112,0,0,6,114,115,116,114,105,112,0,0,5,115,116,114,105,112,0,0,7,108,115,116,114,105,112,33,0,0,7,114,115,116,114,105,112,33,0,0,6,115,116,114,105,112,33,0,0,7,99,97,115,101,99,109,112,0,0,0,0,201,0,4,0,7,0,0,0,32,0,0,0,38,1,63,255,131,2,0,0,6,2,0,0,32,2,0,64,175,1,129,0,1,0,64,1,151,2,0,128,1,2,0,128,173,1,1,0,1,2,0,0,61,2,128,0,6,3,0,128,1,2,129,0,160,2,0,192,160,2,64,1,153,2,0,128,1,2,128,192,1,2,1,64,180,2,63,249,152,2,0,192,1,2,191,255,131,2,1,128,182,2,64,3,25,2,0,0,6,2,128,128,1,3,0,192,1,2,129,64,65,2,1,0,160,0,64,0,151,2,0,0,189,2,0,0,41,0,0,0,2,16,0,6,32,12,10,13,9,11,16,0,0,0,0,0,7,0,4,115,105,122,101,0,0,1,45,0,0,1,43,0,0,8,105,110,99,108,117,100,101,63,0,0,2,91,93,0,0,2,60,61,0,0,2,62,61,0,0,0,0,198,0,4,0,7,0,0,0,32,0,0,0,38,1,63,255,131,2,0,0,6,2,0,0,32,2,0,64,175,1,129,0,1,0,64,1,151,2,0,192,1,2,0,64,175,1,129,0,1,2,0,0,61,2,128,0,6,3,0,192,1,2,128,192,160,2,0,128,160,2,64,1,153,2,0,128,1,2,128,192,1,2,1,0,180,2,63,249,152,2,0,192,1,2,191,255,131,2,1,64,182,2,64,3,25,2,0,0,6,2,128,128,1,3,0,192,1,2,129,64,65,2,0,192,160,0,64,0,151,2,0,0,189,2,0,0,41,0,0,0,2,16,0,7,32,12,10,13,9,11,0,16,0,0,0,0,0,6,0,4,115,105,122,101,0,0,1,45,0,0,8,105,110,99,108,117,100,101,63,0,0,2,91,93,0,0,2,60,61,0,0,2,62,61,0,0,0,1,11,0,4,0,7,0,0,0,46,0,0,0,38,1,63,255,131,2,0,0,6,2,0,0,32,2,0,64,175,1,129,0,1,0,64,1,151,2,0,128,1,2,0,128,173,1,1,0,1,2,0,0,61,2,128,0,6,3,0,128,1,2,129,0,160,2,0,192,160,2,64,1,153,2,0,128,1,2,128,192,1,2,1,64,180,2,63,249,152,0,64,1,151,2,0,192,1,2,0,64,175,1,129,0,1,2,0,0,189,2,128,0,6,3,0,192,1,2,129,0,160,2,0,192,160,2,64,1,153,2,0,128,1,2,128,192,1,2,1,64,180,2,63,249,152,2,0,192,1,2,191,255,131,2,1,128,182,2,64,3,25,2,0,0,6,2,128,128,1,3,0,192,1,2,129,64,65,2,1,0,160,0,64,0,151,2,0,1,61,2,0,0,41,0,0,0,3,16,0,6,32,12,10,13,9,11,16,0,7,32,12,10,13,9,11,0,16,0,0,0,0,0,7,0,4,115,105,122,101,0,0,1,45,0,0,1,43,0,0,8,105,110,99,108,117,100,101,63,0,0,2,91,93,0,0,2,60,61,0,0,2,62,61,0,0,0,0,100,0,3,0,5,0,0,0,14,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,2,0,0,6,1,128,64,178,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,6,2,0,128,1,1,128,128,160,1,128,0,41,0,0,0,0,0,0,0,3,0,6,108,115,116,114,105,112,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,100,0,3,0,5,0,0,0,14,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,2,0,0,6,1,128,64,178,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,6,2,0,128,1,1,128,128,160,1,128,0,41,0,0,0,0,0,0,0,3,0,6,114,115,116,114,105,112,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,99,0,3,0,5,0,0,0,14,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,2,0,0,6,1,128,64,178,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,6,2,0,128,1,1,128,128,160,1,128,0,41,0,0,0,0,0,0,0,3,0,5,115,116,114,105,112,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,65,0,3,0,5,0,0,0,7,2,0,0,38,1,128,0,6,1,128,0,32,2,0,64,1,2,0,0,32,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,8,100,111,119,110,99,97,115,101,0,0,3,60,61,62,0,69,78,68,0,0,0,0,8,0,0,82,73,84,69,48,48,48,49,191,38,0,0,3,222,77,65,84,90,48,48,48,48,73,82,69,80,0,0,3,192,48,48])
.concat([48,48,0,9,0,0,0,0,0,47,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,4,80,114,111,99,0,0,0,0,108,0,1,0,2,0,0,0,14,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,4,0,3,61,61,61,0,0,5,121,105,101,108,100,0,0,7,116,111,95,112,114,111,99,0,0,5,99,117,114,114,121,0,0,0,0,55,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,55,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,1,134,0,7,0,12,0,0,0,60,0,16,0,38,0,64,0,151,0,64,1,151,3,128,0,6,3,128,0,32,0,129,192,1,3,128,0,6,4,0,3,64,3,128,64,33,1,129,192,1,3,128,192,1,4,0,64,1,3,128,128,160,0,129,192,1,3,128,0,6,3,128,192,32,3,192,17,153,3,128,0,6,3,128,0,32,2,1,192,1,3,129,0,1,4,63,255,131,3,129,0,182,3,192,1,153,3,128,64,1,4,1,0,1,3,129,64,160,3,192,4,152,3,129,0,1,4,63,255,131,3,129,128,179,3,192,2,153,3,128,192,1,4,1,0,1,3,128,128,160,4,0,64,1,3,129,192,181,3,192,7,25,3,128,0,6,4,0,4,145,4,128,0,61,5,0,64,1,4,130,128,62,5,0,0,189,4,130,128,62,5,0,192,1,5,129,0,1,5,0,128,160,4,130,128,62,5,0,1,61,4,130,128,62,3,130,1,32,2,128,0,6,3,128,0,6,4,0,5,64,3,130,128,33,3,1,192,1,3,129,128,1,3,130,192,32,3,128,0,41,0,0,0,3,16,0,27,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,16,0,5,32,102,111,114,32,16,0,1,41,0,0,0,12,0,5,97,114,105,116,121,0,0,6,108,97,109,98,100,97,0,0,2,91,93,0,0,7,108,97,109,98,100,97,63,0,0,2,62,61,0,0,2,33,61,0,0,1,60,0,0,1,62,0,0,5,114,97,105,115,101,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,112,114,111,99,0,0,4,99,97,108,108,0,0,0,0,77,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,1,2,63,255,131,1,128,0,179,1,192,2,25,1,128,64,1,1,128,64,32,1,128,128,175,0,64,0,151,1,128,64,1,1,128,0,41,0,0,0,0,0,0,0,3,0,1,60,0,0,2,45,64,0,0,1,45,0,0,0,0,59,0,3,0,5,0,0,0,8,0,16,0,38,0,64,0,151,0,64,0,151,0,128,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,112,114,111,99,0,0,0,0,121,0,4,0,7,0,0,0,20,0,8,0,38,2,0,64,21,2,128,64,1,2,0,0,172,1,129,0,1,2,0,192,1,2,0,64,32,2,128,64,149,2,0,128,182,2,64,3,25,2,1,64,149,2,129,64,55,3,0,192,1,2,129,128,56,2,0,255,160,0,64,1,151,2,1,128,149,2,128,192,1,2,0,192,160,2,0,0,41,0,0,0,0,0,0,0,4,0,1,43,0,0,4,115,105,122,101,0,0,2,62,61,0,0,2,91,93,0,69,78,68,0,0,0,0,8,0,0,82,73,84,69,48,48,48,49,95,93,0,0,4,103,77,65,84,90,48,48,48,48,73,82,69,80,0,0,4,73,48,48,48,48,0,8,0,0,0,0,0,45,0,1,0,2,0,0,0,4,0,128,0,5,0,128,0,68,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,6,75,101,114,110,101,108,0,0,0,0,185,0,1,0,3,0,0,0,26,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,1,145,1,0,2,132,0,129,0,160,0,192,2,153,0,128,0,72,1,0,8,192,0,129,128,70,0,128,0,5,0,64,3,151,0,128,0,72,1,0,10,192,0,129,128,70,0,128,0,72,1,0,12,192,0,129,64,70,0,128,0,5,1,0,0,41,0,0,0,0,0,0,0,7,0,5,112,114,105,110,116,0,0,4,112,117,116,115,0,0,1,112,0,0,6,75,101,114,110,101,108,0,0,11,114,101,115,112,111,110,100,95,116,111,63,0,0,7,115,112,114,105,110,116,102,0,0,6,112,114,105,110,116,102,0,0,0,0,146,0,5,0,8,0,0,0,21,0,8,0,38,1,191,255,131,2,128,64,1,2,128,0,32,2,1,64,1,0,64,4,151,2,128,0,6,3,0,64,1,3,128,192,1,3,0,128,160,3,0,192,32,2,128,64,160,2,128,192,1,2,129,0,173,1,129,64,1,2,128,192,1,3,1,0,1,2,129,64,179,2,191,249,152,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,6,0,4,115,105,122,101,0,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,0,2,91,93,0,0,4,116,111,95,115,0,0,1,43,0,0,1,60,0,0,0,0,232,0,6,0,8,0,0,0,39,0,8,0,38,1,191,255,131,3,0,64,1,3,0,0,32,2,1,128,1,0,64,10,23,3,0,64,1,3,128,192,1,3,0,64,160,3,0,128,32,2,129,128,1,3,0,0,6,3,129,64,1,3,0,192,160,3,1,64,1,3,191,255,3,3,0,64,160,3,128,0,61,3,1,0,160,3,64,1,153,3,0,0,6,3,128,0,61,3,0,192,160,3,0,192,1,3,1,64,173,1,129,128,1,3,0,192,1,3,129,0,1,3,1,128,179,3,63,244,24,3,1,0,1,3,191,255,131,3,1,192,178,3,64,1,153,3,0,0,6,3,128,0,61,3,0,192,160,0,0,0,5,0,0,0,41,0,0,0,1,16,0,1,10,0,0,0,8,0,4,115,105,122,101,0,0,2,91,93,0,0,4,116,111,95,115,0,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,0,2,33,61,0,0,1,43,0,0,1,60,0,0,2,61,61,0,0,0,0,173,0,5,0,8,0,0,0,26,0,8,0,38,1,191,255,131,2,128,64,1,2,128,0,32,2,1,64,1,0,64,6,23,2,128,0,6,3,0,64,1,3,128,192,1,3,0,128,160,3,0,192,32,2,128,64,160,2,128,0,6,3,0,0,61,2,128,64,160,2,128,192,1,2,129,0,173,1,129,64,1,2,128,192,1,3,1,0,1,2,129,64,179,2,191,248,24,2,128,64,1,3,63,255,131,2,128,128,160,2,128,0,41,0,0,0,1,16,0,1,10,0,0,0,6,0,4,115,105,122,101,0,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,0,2,91,93,0,0,7,105,110,115,112,101,99,116,0,0,1,43,0,0,1,60,0,0,0,0,85,0,3,0,7,0,0,0,10,0,8,0,38,1,128,0,6,2,0,0,6,2,129,64,55,3,0,64,1,2,129,128,56,2,0,127,160,1,128,0,160,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,2,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,0,7,115,112,114,105,110,116,102,0,0,0,0,107,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,20,112,114,105,110,116,102,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,108,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,21,115,112,114,105,110,116,102,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,69,78,68,0,0,0,0,8,0,82,73,84,69,48,48,48,49,200,30,0,0,11,33,77,65,84,90,48,48,48,48,73,82,69,80,0,0,11,3,48,48,48,48,0,27,0,0,0,0,0,117,0,1,0,3,0,0,0,16,0,128,0,5,0,128,0,68,0,128,0,197,0,128,0,5,1,0,0,5,0,128,64,67,0,128,9,197,0,128,0,5,1,0,0,5,0,128,128,67,0,128,10,197,0,128,0,5,1,0,0,5,0,128,192,67,0,128,12,69,0,0,0,74,0,0,0,0,0,0,0,4,0,7,77,114,117,98,121,74,115,0,0,4,80,114,111,99,0,0,4,72,97,115,104,0,0,6,83,121,109,98,111,108,0,0,0,0,179,0,1,0,3,0,0,0,23,0,128,64,63,0,128,0,16,0,128,0,6,0,128,64,71,1,0,2,192,0,128,64,70,0,128,0,6,0,128,64,71,1,0,4,192,0,128,128,70,0,128,0,5,1,0,0,5,0,128,192,67,0,128,1,197,0,128,0,5,1,0,0,5,0,129,0,67,0,128,4,197,0,128,0,5,1,0,0,5,0,129,64,67,0,128,8,69,1,0,0,41,0,0,0,0,0,0,0,6,0,7,64,64,112,114,111,99,115,0,0,8,97,100,100,95,112,114,111,99,0,0,9,99,97,108,108,95,112,114,111,99,0,0,8,74,115,79,98,106,101,99,116,0,0,10,74,115,70,117,110,99,116,105,111,110,0,0,7,74,115,65,114,114,97,121,0,0,0,0,111,0,4,0,8,0,0,0,16,2,16,0,38,0,64,0,151,0,64,0,151,1,63,255,3,2,0,0,15,2,128,64,1,2,0,64,160,2,64,1,25,2,0,0,5,0,64,2,151,2,0,128,1,2,128,0,15,3,0,64,1,3,129,0,1,2,128,129,32,2,0,0,41,0,0,0,0,0,0,0,3,0,7,64,64,112,114,111,99,115,0,0,8,104,97,115,95,107,101,121,63,0,0,3,91,93,61,0,0,0,0,203,0,4,0,8,0,0,0,32,2,0,0,38,2,0,0,15,2,128,64,1,2,0,64,160,2,64,12,153,2,0,0,15,2,128,64,1,2,0,128,160,1,129,0,1,2,0,192,1,2,191,255,3,2,0,192,178,2,64,1,25,0,0,0,5,0,0,0,41,2,0,192,1,2,192,0,3,2,1,0,180,2,64,2,25,2,0,0,15,2,128,64,1,2,1,64,160,0,64,3,23,2,0,192,1,2,1,128,175,2,128,0,15,3,0,64,1,3,129,0,1,2,129,193,32,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,8,0,7,64,64,112,114,111,99,115,0,0,8,104,97,115,95,107,101,121,63,0,0,2,91,93,0,0,2,61,61,0,0,2,60,61,0,0,6,100,101,108,101,116,101,0,0,1,45,0,0,3,91,93,61,0,0,0,0,151,0,1,0,2,0,0,0,17,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,5,0,4,99,97,108,108,0,0,8,99,97,108,108,95,110,101,119,0,0,14,99,97,108,108,95,119,105,116,104,95,116,104,105,115,0,0,8,103,101,116,95,102,117,110,99,0,0,14,109,101,116,104,111,100,95,109,105,115,115,105,110,103,0,0,0,0,76,0,4,0,7,0,0,0,9,2,8,0,38,2,0,0,6,2,128,64,1,2,0,0,160,2,129,64,55,3,0,128,1,2,129,128,56,2,0,127,160,2,0,0,41,0,0,0,0,0,0,0,2,0,8,103,101,116,95,102,117,110,99,0,0,6,105,110,118,111,107,101,0,0,0,0,80,0,4,0,7,0,0,0,9,2,8,0,38,2,0,0,6,2,128,64,1,2,0,0,160,2,129,64,55,3,0,128,1,2,129,128,56,2,0,127,160,2,0,0,41,0,0,0,0,0,0,0,2,0,8,103,101,116,95,102,117,110,99,0,0,10,105,110,118,111,107,101,95,110,101,119,0,0,0,0,90,0,5,0,8,0,0,0,10,4,8,0,38,2,128,0,6,3,0,64,1,2,128,0,160,3,0,128,1,3,1,128,183,3,128,192,1,3,1,192,56,2,128,127,160,2,128,0,41,0,0,0,0,0,0,0,2,0,8,103,101,116,95,102,117,110,99,0,0,16,105,110,118,111,107,101,95,119,105,116,104,95,116,104,105,115,0,0,0,0,140,0,4,0,8,0,0,0,17,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,64,0,153,0,64,4,23,2,0,0,6,2,128,1,17,3,0,0,61,3,128,64,1,3,1,192,62,3,128,0,189,3,1,192,62,2,0,65,32,1,128,0,41,0,0,0,2,16,0,0,16,0,16,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,33,0,0,0,3,0,3,103,101,116,0,0,5,114,97,105,115,101,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,1,13,0,4,0,8,0,0,0,44,2,8,0,166,2,0,64,1,2,0,0,32,0,129,0,1,2,0,64,1,2,191,255,3,2,0,64,160,2,128,0,61,2,0,128,178,2,64,5,153,2,0,0,6,2,128,64,1,3,63,255,131,3,191,254,131,3,1,128,65,2,128,64,160,2,129,64,183,3,0,128,1,2,129,128,56,2,0,255,160,0,64,11,23,2,0,192,1,2,64,2,153,2,0,128,1,2,128,2,145,3,0,192,1,2,129,128,33,2,1,0,160,2,0,128,1,2,1,192,32,2,191,255,131,2,2,0,181,2,64,3,153,2,0,0,6,2,128,64,1,2,129,64,183,3,0,128,1,2,129,128,56,2,2,127,160,2,0,0,41,2,0,0,6,2,128,64,1,2,2,128,160,2,0,0,41,0,0,0,1,16,0,1,61,0,0,0,11,0,4,116,111,95,115,0,0,2,91,93,0,0,2,61,61,0,0,3,115,101,116,0,0,4,112,117,115,104,0,0,4,80,114,111,99,0,0,3,110,101,119,0,0,6,108,101,110,103,116,104,0,0,1,62,0,0,4,99,97,108,108,0,0,3,103,101,116,0,0,0,0,218,0,1,0,3,0,0,0,23,0,128,0,6,1,0,0,132,0,128,0,160,0,128,0,72,1,0,2,192,0,128,128,70,0,128,0,72,1,0,4,192,0,128,192,70,0,128,0,72,1,0,6,192,0,129,0,70,0,128,0,72,1,0,8,192,0,129,64,70,0,128,0,72,1,0,10,192,0,129,128,70,0,128,0,72,1,0,12,192,0,129,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,8,0,11,97,116,116,114,95,114,101,97,100,101,114,0,0,13,112,97,114,101,110,116,95,111,98,106,101,99,116,0,0,10,105,110,105,116,105,97,108,105,122,101,0,0,6,105,110,118,111,107,101,0,0,10,105,110,118,111,107,101,95,110,101,119,0,0,16,105,110,118,111,107,101,95,119,105,116,104,95,116,104,105,115,0,0,2,91,93,0,0,14,109,101,116,104,111,100,95,109,105,115,115,105,110,103,0,0,0,0,61,0,4,0,6,0,0,0,6,4,0,0,38,2,128,64,1,3,0,0,5,2,0,0,164,1,0,0,14,1,0,0,41,0,0,0,0,0,0,0,1,0,14,64,112,97,114,101,110,116,95,111,98,106,101,99,116,0,0,0,0,70,0,3,0,6,0,0,0,8,0,8,0,38,1,128,0,6,2,63,255,131,2,1,0,183,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,15,105,110,118,111,107,101,95,105,110,116,101,114,110,97,108,0,0,0,0,70,0,3,0,6,0,0,0,8,0,8,0,38,1,128,0,6,2,64,0,3,2,1,0,183,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,15,105,110,118,111,107,101,95,105,110,116,101,114,110,97,108,0,0,0,0,74,0,4,0,7,0,0,0,9,2,8,0,38,2,0,0,6,2,192,0,131,3,0,64,1,2,129,65,55,3,0,128,1,2,129,128,56,2,0,63,160,2,0,0,41,0,0,0,0,0,0,0,1,0,15,105,110,118,111,107,101,95,105,110,116,101,114,110,97,108,0,0,0,0,57,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,6,105,110,118,111,107,101,0,0,0,0,72,0,4,0,7,0,0,0,9,2,8,0,38,2,0,0,6,2,128,64,1,2,128,64,32,2,129,64,183,3,0,128,1,2,129,128,56,2,0,63,160,2,0,0,41,0,0,0,0,0,0,0,2,0,6,105,110,118,111,107,101,0,0,4,116,111,95,115,0,0,0,0,47,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,133,0,4,0,7,0,0,0,21,0,0,0,166,2,63,255,131,2,128,0,6,2,128,0,32,1,1,0,1,1,129,64,1,0,64,4,23,2,0,64,1,2,128,0,6,3,0,128,1,2,128,128,160,2,0,64,160,2,0,128,1,2,0,192,173,1,1,0,1,2,0,128,1,2,128,192,1,2,1,0,179,2,63,250,24,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,5,0,6,108,101,110,103,116,104,0,0,4,99,97,108,108,0,0,2,91,93,0,0,1,43,0,0,1,60,0,0,0,0,56,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,13,114,101,108,101,97,115,101,95,97,102,116,101,114,0,0,0,0,69,0,3,0,6,0,0,0,7,2,0,0,38,1,128,0,17,2,0,0,6,2,128,64,1,1,128,65,32,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,2,0,7,77,114,117,98,121,74,115,0,0,8,97,100,100,95,112,114,111,99,0,0,0,0,53,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,10,116,111,74,115,79,98,106,101,99,116,0,0,0,0,93,0,3,0,5,0,0,0,9,0,0,0,38,1,128,0,145,1,128,0,19,1,128,128,32,1,0,192,1,1,128,0,6,2,0,3,64,1,128,192,33,1,0,0,41,0,0,0,0,0,0,0,4,0,8,74,115,79,98,106,101,99,116,0,0,7,77,114,117,98,121,74,115,0,0,6,99,114,101,97,116,101,0,0,4,101,97,99,104,0,0,0,0,54,0,4,0,8,0,0,0,7,4,0,0,38,2,0,128,1,2,128,128,21,3,0,64,1,3,129,0,1,2,128,1,32,2,0,0,41,0,0,0,0,0,0,0,1,0,3,91,93,61,0,0,0,0,53,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,10,116,111,95,106,115,95,112,114,111,99,0,0,0,0,69,0,5,0,7,0,0,0,9,2,16,0,38,0,64,0,151,0,64,0,151,1,63,255,3,2,0,0,6,2,128,0,17,3,0,3,64,2,128,64,33,2,128,0,41,0,0,0,0,0,0,0,2,0,4,80,114,111,99,0,0,3,110,101,119,0,0,0,0,138,0,3,0,6,0,0,0,22,0,8,0,38,1,128,128,21,2,63,255,3,1,128,0,160,1,192,2,25,1,128,64,1,1,128,64,32,2,0,128,21,1,128,128,181,1,192,2,153,1,128,64,1,2,63,255,131,2,128,128,21,1,128,193,32,0,128,192,1,1,128,64,21,2,1,0,21,2,1,0,183,2,128,64,1,2,1,64,56,1,129,63,160,1,128,0,41,0,0,0,0,0,0,0,5,0,2,33,61,0,0,6,108,101,110,103,116,104,0,0,1,62,0,0,2,91,93,0,0,4,115,101,110,100,0,69,78,68,0,0,0,0,8,0,0,0,82,73,84,69,48,48,48,49,106,86,0,0,2,16,77,65,84,90,48,48,48,48,73,82,69,80,0,0,1,242,48,48,48,48,0,5,0,0,0,0,0,47,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,4,72,97,115,104,0,0,0,0,49,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,6,109,101,114,103,101,33,0,0,0,0,178,0,3,0,5,0,0,0,20,2,0,0,166,1,128,64,1,2,0,0,132,1,128,0,160,1,192,0,153,0,64,1,151,1,128,0,6,2,0,0,61,1,128,128,160,1,128,128,1,1,192,2,25,1,128,64,1,2,0,3,64,1,128,192,33,0,64,1,151,1,128,64,1,2,0,5,64,1,128,192,33,0,0,0,6,0,0,0,41,0,0,0,1,16,0,32,99,97,110,39,116,32,99,111,110,118,101,114,116,32,97,114,103,117,109,101,110,116,32,105,110,116,111,32,72,97,115,104,0,0,0,4,0,11,114,101,115,112,111,110,100,95,116,111,63,0,0,7,116,111,95,104,97,115,104,0,0,5,114,97,105,115,101,0,0,8,101,97,99,104,95,107,101,121,0,0,0,0,141,0,3,0,8,0,0,0,23,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,192,5,25,1,128,128,21,2,0,64,1,2,128,0,6,3,0,64,1,2,128,128,160,3,0,64,21,3,128,64,1,3,0,128,160,1,128,65,160,0,64,1,151,1,128,64,21,2,0,64,1,1,128,128,160,2,0,0,6,2,128,64,1,3,0,192,1,2,0,193,32,1,128,0,41,0,0,0,0,0,0,0,4,0,8,104,97,115,95,107,101,121,63,0,0,4,99,97,108,108,0,0,2,91,93,0,0,3,91,93,61,0,0,0,0,67,0,3,0,7,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,2,0,0,6,2,128,64,1,3,0,192,1,2,0,65,32,1,128,0,41,0,0,0,0,0,0,0,2,0,2,91,93,0,0,3,91,93,61,0,69,78,68,0,0,0,0,8,82,73,84,69,48,48,48,49,8,107,0,0,8,173,77,65,84,90,48,48,48,48,73,82,69,80,0,0,8,143,48,48,48,48,0,16,0,0,0,0,0,49,0,1,0,2,0,0,0,4,0,128,0,5,0,128,0,68,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,10,69,110,117,109,101,114,97,98,108,101,0,0,0,0,188,0,1,0,2,0,0,0,23,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,6,192,0,128,64,70,0,128,0,72,1,0,10,192,0,128,128,70,0,128,0,72,1,0,14,192,0,128,192,70,0,128,0,72,1,0,18,192,0,129,0,70,0,128,0,72,1,0,22,192,0,129,64,70,0,128,0,72,1,0,26,192,0,129,128,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,7,0,4,100,114,111,112,0,0,10,100,114,111,112,95,119,104,105,108,101,0,0,4,116,97,107,101,0,0,10,116,97,107,101,95,119,104,105,108,101,0,0,9,101,97,99,104,95,99,111,110,115,0,0,10,101,97,99,104,95,115,108,105,99,101,0,0,8,103,114,111,117,112,95,98,121,0,0,0,0,248,0,4,0,7,0,0,0,23,2,0,0,38,2,0,64,1,2,128,0,145,2,0,0,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,1,145,3,0,0,61,2,0,129,32,2,0,64,1,2,191,255,131,2,1,0,179,2,64,2,25,2,0,0,6,2,128,2,145,3,0,0,189,2,0,129,32,1,129,0,55,2,0,0,6,2,128,3,64,2,1,128,33,1,128,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,29,97,116,116,101,109,112,116,32,116,111,32,100,114,111,112,32,110,101,103,97,116,105,118,101,32,115,105,122,101,0,0,0,7,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,1,60,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,86,0,3,0,5,0,0,0,13,2,0,0,38,1,128,64,21,2,63,255,131,1,128,0,178,1,192,2,25,1,128,192,21,2,0,64,1,1,128,64,160,0,64,1,151,1,128,64,21,1,128,128,175,1,128,64,22,1,128,0,41,0,0,0,0,0,0,0,3,0,2,61,61,0,0,2,60,60,0,0,1,45,0,0,0,0,63,0,4,0,6,0,0,0,9,0,0,0,166,2,1,0,55,2,128,0,8,1,1,0,1,1,129,64,1,2,0,0,6,2,128,3,64,2,0,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,112,0,3,0,5,0,0,0,19,2,0,0,38,1,128,192,21,1,128,0,32,1,192,2,25,1,128,64,21,2,0,64,1,1,128,64,160,1,128,0,32,1,192,1,25,1,128,0,7,1,128,192,22,1,128,192,21,1,192,2,25,1,128,128,21,2,0,64,1,1,128,128,160,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,3,0,1,33,0,0,4,99,97,108,108,0,0,2,60,60,0,0,0,0,248,0,4,0,7,0,0,0,23,2,0,0,38,2,0,64,1,2,128,0,145,2,0,0,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,1,145,3,0,0,61,2,0,129,32,2,0,64,1,2,191,255,131,2,1,0,179,2,64,2,25,2,0,0,6,2,128,2,145,3,0,0,189,2,0,129,32,1,129,0,55,2,0,0,6,2,128,3,64,2,1,128,33,1,128,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,29,97,116,116,101,109,112,116,32,116,111,32,116,97,107,101,32,110,101,103,97,116,105,118,101,32,115,105,122,101,0,0,0,7,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,1,60,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,81,0,3,0,5,0,0,0,11,2,0,0,38,1,128,192,21,1,128,0,32,2,0,64,21,1,128,64,182,1,192,0,153,1,128,64,41,1,128,192,21,2,0,64,1,1,128,128,160,1,128,0,41,0,0,0,0,0,0,0,3,0,4,115,105,122,101,0,0,2,62,61,0,0,2,60,60,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,80,0,3,0,5,0,0,0,12,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,0,153,0,64,1,23,1,128,128,21,1,128,128,41,1,128,128,21,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,2,60,60,0,0,0,0,232,0,4,0,7,0,0,0,23,2,0,0,166,2,0,64,1,2,128,0,145,2,0,0,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,1,145,3,0,0,61,2,0,129,32,2,0,64,1,2,191,255,131,2,1,0,180,2,64,2,25,2,0,0,6,2,128,2,145,3,0,0,189,2,0,129,32,1,129,0,55,2,0,0,6,2,128,3,64,2,1,128,33,2,0,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,12,105,110,118,97,108,105,100,32,115,105,122,101,0,0,0,7,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,2,60,61,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,150,0,3,0,5,0,0,0,23,2,0,0,38,1,128,192,21,1,128,0,32,2,0,64,21,1,128,64,178,1,192,1,25,1,128,192,21,1,128,128,32,1,128,192,21,2,0,64,1,1,128,192,160,1,128,192,21,1,128,0,32,2,0,64,21,1,128,64,178,1,192,2,153,1,128,128,21,2,0,192,21,2,1,64,32,1,129,0,160,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,6,0,4,115,105,122,101,0,0,2,61,61,0,0,5,115,104,105,102,116,0,0,2,60,60,0,0,4,99,97,108,108,0,0,3,100,117,112,0,0,0,1,30,0,4,0,7,0,0,0,31,2,0,0,166,2,0,64,1,2,128,0,145,2,0,0,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,1,145,3,0,0,61,2,0,129,32,2,0,64,1,2,191,255,131,2,1,0,180,2,64,2,25,2,0,0,6,2,128,2,145,3,0,0,189,2,0,129,32,1,129,0,55,2,0,0,6,2,128,3,64,2,1,128,33,2,0,192,1,2,1,192,32,2,64,1,25,2,0,0,5,0,64,1,151,2,0,128,1,2,128,192,1,2,2,0,160,2,0,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,18,105,110,118,97,108,105,100,32,115,108,105,99,101,32,115,105,122,101,0,0,0,9,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,2,60,61,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,101,97,99,104,0,0,6,101,109,112,116,121,63,0,0,4,99,97,108,108,0,0,0,0,112,0,3,0,5,0,0,0,17,2,0,0,38,1,128,192,21,2,0,64,1,1,128,0,160,1,128,192,21,1,128,64,32,2,0,64,21,1,128,128,178,1,192,3,25,1,128,128,21,2,0,192,21,1,128,192,160,1,128,192,55,1,128,192,22,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,4,0,2,60,60,0,0,4,115,105,122,101,0,0,2,61,61,0,0,4,99,97,108,108,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,63,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,138,0,4,0,8,0,0,0,22,2,0,0,38,2,0,64,21,2,128,64,1,2,0,0,160,1,129,0,1,2,0,128,21,2,128,192,1,2,0,64,160,2,64,3,25,2,0,128,21,2,128,192,1,2,0,128,160,2,128,64,1,2,0,192,160,0,64,3,23,2,0,64,1,2,1,0,183,2,128,128,21,3,0,192,1,3,129,0,1,2,129,1,32,2,0,0,41,0,0,0,0,0,0,0,5,0,4,99,97,108,108,0,0,4,107,101,121,63,0,0,2,91,93,0,0,2,60,60,0,0,3,91,93,61,0,69,78,68,0,0,0,0,8,0,0,0,82,73,84,69,48,48,48,49,127,107,0,0,8,174,77,65,84,90,48,48,48,48,73,82,69,80,0,0,8,144,48,48,48,48,0,18,0,0,0,0,0,48,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,5,65,114,114,97,121,0,0,0,0,205,0,1,0,2,0,0,0,29,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,12,192,0,128,192,70,0,128,0,72,1,0,14,192,0,129,0,70,0,128,0,72,1,0,20,192,0,129,64,70,0,128,0,72,1,0,24,192,0,129,128,70,0,128,0,72,1,0,28,192,0,129,192,70,0,128,0,72,1,0,30,192,0,130,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,9,0,5,117,110,105,113,33,0,0,4,117,110,105,113,0,0,1,45,0,0,1,124,0,0,1,38,0,0,7,102,108,97,116,116,101,110,0,0,8,102,108,97,116,116,101,110,33,0,0,7,99,111,109,112,97,99,116,0,0,8,99,111,109,112,97,99,116,33,0,0,0,0,205,0,4,0,6,0,0,0,31,0,0,0,38,2,0,0,6,2,0,0,32,1,1,0,1,1,129,0,55,0,64,4,23,2,0,192,1,2,128,128,1,2,128,128,32,2,0,64,160,2,0,128,1,2,128,192,1,2,129,0,32,2,0,192,160,2,0,128,1,2,1,64,32,2,191,255,131,2,1,128,181,2,63,249,152,2,0,192,1,2,1,64,32,2,128,0,6,2,129,64,32,2,1,192,178,2,64,1,25,2,0,0,5,0,64,1,151,2,0,0,6,2,128,192,1,2,2,0,160,2,0,0,41,0,0,0,0,0,0,0,9,0,3,100,117,112,0,0,2,60,60,0,0,5,115,104,105,102,116,0,0,6,100,101,108,101,116,101,0,0,4,108,97,115,116,0,0,4,115,105,122,101,0,0,1,62,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,62,0,3,0,4,0,0,0,7,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,1,128,64,32,1,0,0,41,0,0,0,0,0,0,0,2,0,3,100,117,112,0,0,5,117,110,105,113,33,0,0,0,0,199,0,5,0,9,0,0,0,25,2,0,0,38,2,128,64,1,2,128,0,32,3,0,1,17,2,128,64,178,2,192,0,153,0,64,4,151,2,128,0,6,3,0,2,17,3,128,0,61,4,0,64,1,4,0,0,32,3,130,0,62,4,0,0,189,3,130,0,62,2,128,193,32,1,129,64,63,2,1,64,55,2,128,64,1,3,0,3,64,2,129,64,33,2,128,0,6,3,0,5,64,2,129,64,33,2,0,0,41,0,0,0,2,16,0,14,99,97,110,39,116,32,99,111,110,118,101,114,116,32,16,0,11,32,105,110,116,111,32,65,114,114,97,121,0,0,0,6,0,5,99,108,97,115,115,0,0,2,61,61,0,0,5,65,114,114,97,121,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,54,0,3,0,7,0,0,0,7,2,0,0,38,1,128,0,7,2,0,192,21,2,128,64,1,3,0,192,1,2,0,1,32,1,128,0,41,0,0,0,0,0,0,0,1,0,3,91,93,61,0,0,0,0,74,0,3,0,5,0,0,0,11,2,0,0,38,1,128,192,21,2,0,64,1,1,128,0,160,1,192,1,25,1,128,0,5,0,64,1,151,1,129,0,21,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,2,91,93,0,0,2,60,60,0,0,0,0,204,0,4,0,8,0,0,0,25,2,0,0,38,2,0,64,1,2,0,0,32,2,128,1,17,2,0,64,178,2,64,0,153,0,64,4,151,2,0,0,6,2,128,2,17,3,0,0,61,3,128,64,1,3,128,0,32,3,1,192,62,3,128,0,189,3,1,192,62,2,0,193,32,2,0,0,6,2,128,64,1,2,1,64,172,1,129,0,1,2,0,192,1,2,1,128,32,2,64,0,152,2,0,192,1,2,0,0,41,0,0,0,2,16,0,14,99,97,110,39,116,32,99,111,110,118,101,114,116,32,16,0,11,32,105,110,116,111,32,65,114,114,97,121,0,0,0,7,0,5,99,108,97,115,115,0,0,2,61,61,0,0,5,65,114,114,97,121,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,1,43,0,0,5,117,110,105,113,33,0,0,0,0,199,0,5,0,9,0,0,0,25,2,0,0,38,2,128,64,1,2,128,0,32,3,0,1,17,2,128,64,178,2,192,0,153,0,64,4,151,2,128,0,6,3,0,2,17,3,128,0,61,4,0,64,1,4,0,0,32,3,130,0,62,4,0,0,189,3,130,0,62,2,128,193,32,1,129,64,63,2,1,64,55,2,128,64,1,3,0,3,64,2,129,64,33,2,128,0,6,3,0,5,64,2,129,64,33,2,0,0,41,0,0,0,2,16,0,14,99,97,110,39,116,32,99,111,110,118,101,114,116,32,16,0,11,32,105,110,116,111,32,65,114,114,97,121,0,0,0,6,0,5,99,108,97,115,115,0,0,2,61,61,0,0,5,65,114,114,97,121,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,54,0,3,0,7,0,0,0,7,2,0,0,38,1,128,0,7,2,0,192,21,2,128,64,1,3,0,192,1,2,0,1,32,1,128,0,41,0,0,0,0,0,0,0,1,0,3,91,93,61,0,0,0,0,95,0,3,0,5,0,0,0,14,2,0,0,38,1,128,192,21,2,0,64,1,1,128,0,160,1,192,3,153,1,129,0,21,2,0,64,1,1,128,64,160,1,128,192,21,2,0,64,1,1,128,128,160,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,2,60,60,0,0,6,100,101,108,101,116,101,0,0,0,0,63,0,4,0,6,0,0,0,9,0,16,0,38,0,64,0,151,0,64,0,151,0,128,0,5,1,129,0,55,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,186,0,3,0,7,0,0,0,29,2,0,0,38,1,128,64,1,2,0,0,145,1,128,0,160,1,192,3,25,1,128,64,21,1,128,128,32,1,192,1,152,1,128,64,21,2,63,255,131,1,128,192,181,1,192,6,153,1,128,192,21,2,0,64,1,2,128,64,21,2,128,128,32,2,192,1,25,2,128,0,5,0,64,1,23,2,128,64,21,2,129,64,175,2,1,0,160,1,129,128,172,1,128,192,22,0,64,1,151,1,128,192,21,2,0,64,1,1,129,192,160,1,128,0,41,0,0,0,0,0,0,0,8,0,5,105,115,95,97,63,0,0,5,65,114,114,97,121,0,0,4,110,105,108,63,0,0,1,62,0,0,7,102,108,97,116,116,101,110,0,0,1,45,0,0,1,43,0,0,2,60,60,0,0,0,0,105,0,5,0,7,0,0,0,17,0,16,0,38,0,64,0,151,0,64,0,151,0,128,0,5,1,128,0,8,2,1,64,55,2,128,0,6,3,0,3,64,2,128,0,33,2,128,192,1,2,192,2,25,2,128,0,6,3,1,0,1,2,128,64,160,0,64,0,151,2,128,0,5,2,128,0,41,0,0,0,0,0,0,0,2,0,4,101,97,99,104,0,0,7,114,101,112,108,97,99,101,0,0,0,0,194,0,3,0,7,0,0,0,31,2,0,0,38,1,128,64,1,2,0,0,145,1,128,0,160,1,192,3,25,1,128,64,21,1,128,128,32,1,192,1,152,1,128,64,21,2,63,255,131,1,128,192,181,1,192,7,153,1,129,0,21,2,0,64,1,2,128,64,21,2,128,128,32,2,192,1,25,2,128,0,5,0,64,1,23,2,128,64,21,2,129,64,175,2,1,0,160,1,129,128,172,1,129,0,22,1,128,0,7,1,128,192,22,0,64,1,151,1,129,0,21,2,0,64,1,1,129,192,160,1,128,0,41,0,0,0,0,0,0,0,8,0,5,105,115,95,97,63,0,0,5,65,114,114,97,121,0,0,4,110,105,108,63,0,0,1,62,0,0,7,102,108,97,116,116,101,110,0,0,1,45,0,0,1,43,0,0,2,60,60,0,0,0,0,65,0,3,0,4,0,0,0,7,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,1,128,64,32,1,0,0,41,0,0,0,0,0,0,0,2,0,3,100,117,112,0,0,8,99,111,109,112,97,99,116,33,0,0,0,0,119,0,3,0,5,0,0,0,17,0,0,0,38,1,128,0,6,2,0,3,64,1,128,0,33,1,0,192,1,1,128,128,1,1,128,64,32,2,0,0,6,2,0,64,32,1,128,128,178,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,6,2,0,128,1,1,128,192,160,1,128,0,41,0,0,0,0,0,0,0,4,0,6,115,101,108,101,99,116,0,0,4,115,105,122,101,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,45,0,3,0,5,0,0,0,5,2,0,0,38,1,128,64,1,2,0,0,5,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,2,33,61,0,69,78,68,0,0,0,0,8,0,0,35,0,0,0,0,0,0,0,240,142,1,0,2,0,0,0,28,142,1,0,3,0,0,0,4,169,1,0,4,0,0,0,152,167,1,0,10,0,0,0,72,141,1,0,8,0,0,0,128,140,1,0,9,0,0,0,100,139,1,0,11,0,0,0,184,138,1,0,12,0,0,0,112,137,1,0,13,0,0,0,60,136,1,0,6,0,0,0,24,153,1,0,14,0,0,0,64,135,1,0,15,0,0,0,124,133,1,0,16,0,0,0,64,132,1,0,17,0,0,0,56,131,1,0,19,0,0,0,52,130,1,0,21,0,0,0,108,129,1,0,255,0,0,0,0,0,0,0,82,73,84,69,48,48,48,49,188,85,0,0,0,152,77,65,84,90,48,48,48,48,73,82,69,80,0,0,0,122,48,48,48,48,0,2,0,0,0,0,0,44,0,1,0,3,0,0,0,4,0,192,2,3,1,0,3,64,0,128,0,33,0,0,0,74,0,0,0,0,0,0,0,1,0,5,116,105,109,101,115,0,0,0,0,62,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,61,0,128,0,160,0,128,0,41,0,0,0,1,16,0,16,82,117,98,121,32,105,115,32,97,119,101,115,111,109,101,33,0,0,0,1,0,4,112,117,116,115,0,69,78,68,0,0,0,0,8,79,80,95,117,110,107,110,111,119,110,32,37,100,9,37,100,9,37,100,9,37,100,10,0])
.concat([83,116,114,105,110,103,0,0,115,116,101,112,95,114,97,116,105,111,61,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,37,115,0,0,79,80,95,69,80,79,80,9,37,100,10,0,116,111,95,97,114,121,0,0,44,32,0,0,45,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,79,80,95,80,79,80,69,82,82,9,37,100,10,0,0,0,65,114,114,97,121,0,0,0,79,80,95,82,65,73,83,69,9,82,37,100,10,0,0,0,101,120,112,101,99,116,101,100,32,37,83,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,79,80,95,82,69,83,67,85,69,9,82,37,100,10,0,0,105,110,100,101,120,32,37,83,32,111,117,116,32,111,102,32,97,114,114,97,121,0,0,0,116,111,95,104,97,115,104,0,79,80,95,79,78,69,82,82,9,37,48,51,100,10,0,0,72,97,115,104,0,0,0,0,115,116,114,105,110,103,32,40,37,83,41,32,116,111,111,32,98,105,103,32,102,111,114,32,105,110,116,101,103,101,114,0,79,80,95,69,80,85,83,72,9,58,73,40,37,100,41,10,0,0,0,0,109,101,116,104,111,100,32,96,37,83,39,32,110,111,116,32,100,101,102,105,110,101,100,32,105,110,32,37,83,0,0,0,79,80,95,69,82,82,9,76,40,37,100,41,10,0,0,0,119,114,111,110,103,32,99,111,110,115,116,97,110,116,32,110,97,109,101,32,37,83,0,0,79,80,95,84,67,76,65,83,83,9,82,37,100,10,0,0,60,61,62,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,99,108,97,115,115,0,0,0,0,117,110,100,101,102,105,110,101,100,32,109,101,116,104,111,100,32,39,37,83,39,32,102,111,114,32,37,83,0,0,0,0,83,0,0,0,110,117,109,98,101,114,101,100,40,37,83,41,32,97,102,116,101,114,32,117,110,110,117,109,98,101,114,101,100,40,37,83,41,0,0,0,116,111,95,105,110,116,0,0,64,0,0,0,116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,80,114,111,99,32,111,98,106,101,99,116,32,119,105,116,104,111,117,116,32,97,32,98,108,111,99,107,0,66,69,71,73,78,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,77,82,66,95,84,84,95,70,76,79,65,84,0,0,0,0,97,116,97,110,0,0,0,0,116,111,74,115,65,114,114,97,121,0,0,0,114,101,115,117,109,105,110,103,32,100,101,97,100,32,102,105,98,101,114,0,61,61,0,0,100,111,117,98,108,101,32,114,101,115,117,109,101,0,0,0,84,114,117,101,67,108,97,115,115,0,0,0,45,73,110,102,105,110,105,116,121,0,0,0,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,84,121,112,101,69,114,114,111,114,0,0,0,61,61,0,0,79,80,95,83,67,76,65,83,83,9,82,37,100,9,82,37,100,10,0,0,78,111,77,101,116,104,111,100,69,114,114,111,114,0,0,0,110,101,119,0,80,114,111,99,0,0,0,0,79,80,95,69,88,69,67,9,82,37,100,9,73,40,37,100,41,10,0,0,110,97,109,101,32,115,104,111,117,108,100,32,98,101,32,97,32,115,121,109,98,111,108,0,115,116,101,112,95,114,97,116,105,111,0,0,101,120,99,101,112,116,105,111,110,32,99,108,97,115,115,47,111,98,106,101,99,116,32,101,120,112,101,99,116,101,100,0,79,80,95,77,79,68,85,76,69,9,82,37,100,9,58,37,115,10,0,0,111,42,0,0,111,0,0,0,36,0,0,0,79,80,95,67,76,65,83,83,9,82,37,100,9,58,37,115,10,0,0,0,96,37,83,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,0,0,0,79,80,95,79,67,76,65,83,83,9,82,37,100,10,0,0,124,98,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,79,80,95,72,65,83,72,9,82,37,100,9,82,37,100,9,37,100,10,0,73,110,100,101,120,69,114,114,111,114,0,0,35,60,63,63,63,63,63,63,58,0,0,0,79,80,95,83,84,82,67,65,84,9,82,37,100,9,82,37,100,10,0,0,35,60,77,111,100,117,108,101,58,0,0,0,79,80,95,83,84,82,73,78,71,9,82,37,100,9,37,115,10,0,0,0,105,108,108,101,103,97,108,32,114,97,100,105,120,32,37,83,0,0,0,0,95,95,97,116,116,97,99,104,101,100,95,95,0,0,0,0,79,80,95,65,80,79,83,84,9,82,37,100,9,37,100,9,37,100,10,0,110,111,32,98,108,111,99,107,32,103,105,118,101,110,0,0,9,91,37,100,93,32,37,115,58,37,100,10,0,0,0,0,79,80,95,65,82,69,70,9,82,37,100,9,82,37,100,9,37,100,10,0,61,61,0,0,111,0,0,0,42,0,0,0,110,38,0,0,118,97,108,117,101,32,103,105,118,101,110,32,116,119,105,99,101,32,45,32,37,83,36,0,70,105,120,110,117,109,0,0,35,60,80,114,111,99,58,0,83,104,105,102,116,105,110,103,0,0,0,0,77,82,66,95,84,84,95,85,78,68,69,70,0,0,0,0,97,99,111,115,0,0,0,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,110,32,97,114,114,97,121,33,0,100,111,117,98,108,101,32,114,101,115,117,109,101,0,0,0,101,110,100,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,105,110,115,112,101,99,116,0,70,108,111,97,116,68,111,109,97,105,110,69,114,114,111,114,0,0,0,0,124,83,38,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,99,111,110,115,116,97,110,116,32,37,83,0,0,0,69,110,117,109,101,114,97,98,108,101,0,0,79,80,95,65,82,89,80,85,83,72,9,82,37,100,9,82,37,100,10,0,111,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,79,80,95,65,82,89,67,65,84,9,82,37,100,9,82,37,100,10,0,0,77,111,100,117,108,101,46,99,111,110,115,116,97,110,116,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,0,105,110,116,101,114,118,97,108,95,114,97,116,105,111,61,0,109,114,98,95,109,97,108,108,111,99,0,0,84,121,112,101,69,114,114,111,114,0,0,0,98,108,107,61,38,37,115,10,0,0,0,0,79,80,95,65,82,82,65,89,9,82,37,100,9,82,37,100,9,37,100,10,0,0,0,0,61,61,61,0,105,110,105,116,105,97,108,105,122,101,0,0,117,110,101,120,112,101,99,116,101,100,32,114,101,116,114,121,0,0,0,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,115,0,114,101,115,116,61,42,37,115,10,0,0,0,79,80,95,69,81,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,100,101,102,105,110,101,95,109,101,116,104,111,100,0,0,0,110,111,32,115,117,112,101,114,32,99,108,97,115,115,32,102,111,114,32,96,37,83,58,58,37,83,39,44,32,79,98,106,101,99,116,32,97,115,115,117,109,101,100,0,37,115,61,0,79,80,95,71,69,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,110,101,103,97,116,105,118,101,32,97,114,103,117,109,101,110,116,0,0,0,114,101,109,111,118,101,95,99,111,110,115,116,0,0,0,0,79,80,95,71,84,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,99,111,110,115,116,97,110,116,115,0,0,0,83,121,109,98,111,108,0,0,79,80,95,76,69,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,99,111,110,115,116,95,115,101,116,0,0,0,116,111,95,115,0,0,0,0,102,124,102,0,115,116,114,105,110,103,32,115,105,122,101,115,32,116,111,111,32,98,105,103,0,0,0,0,79,80,95,76,84,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,99,111,110,115,116,95,103,101,116,0,0,0,105,124,105,105,105,105,105,105,0,0,0,0,110,101,103,97,116,105,118,101,32,97,114,103,117,109,101,110,116,0,0,0,9,91,37,100,93,32,37,115,58,37,100,58,105,110,32,37,115,10,0,0,79,80,95,68,73,86,9,82,37,100,9,58,37,115,9,37,100,10,0,0,117,116,99,0,37,83,32,105,115,32,110,111,116,32,115,116,114,117,99,116,32,109,101,109,98,101,114,0,101,110,100,95,119,105,116,104,63,0,0,0,99,111,110,115,116,95,100,101,102,105,110,101,100,63,0,0,109,97,108,102,111,114,109,101,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,32,45,32,37,42,91,48,45,57,93,0,0,0,60,61,62,0,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,116,121,112,101,0,0,0,116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,80,114,111,99,32,111,98,106,101,99,116,32,119,105,116,104,111,117,116,32,97,32,98,108,111,99,107,0,77,82,66,95,84,84,95,83,89,77,66,79,76,0,0,0,97,115,105,110,0,0,0,0,97,100,100,95,112,114,111,99,0,0,0,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,98,101,103,105,110,0,0,0,99,105,105,100,120,0,0,0,116,111,95,115,0,0,0,0,102,0,0,0,84,111,111,32,108,97,114,103,101,32,101,120,112,111,114,110,101,110,116,46,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,32,115,104,111,117,108,100,32,116,97,107,101,32,115,97,109,101,32,99,108,97,115,115,32,111,98,106,101,99,116,0,0,0,99,111,110,115,116,95,109,105,115,115,105,110,103,0,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,105,0,0,0,79,80,95,77,85,76,9,82,37,100,9,58,37,115,9,37,100,10,0,0,117,110,100,101,102,95,109,101,116,104,111,100,0,0,0,0,83,97,116,0,45,0,0,0,38,0,0,0,79,80,95,83,85,66,73,9,82,37,100,9,58,37,115,9,37,100,10,0,97,110,99,101,115,116,111,114,115,0,0,0,105,110,116,101,114,118,97,108,95,114,97,116,105,111,0,0,70,114,105,0,101,120,99,101,112,116,105,111,110,0,0,0,82,101,103,101,120,112,32,99,108,97,115,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,0,79,80,95,83,85,66,9,82,37,100,9,58,37,115,9,37,100,10,0,0,97,108,105,97,115,95,109,101,116,104,111,100,0,0,0,0,84,104,117,0,117,110,101,120,112,101,99,116,101,100,32,114,101,100,111,0,60,61,62,0,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,79,80,95,65,68,68,73,9,82,37,100,9,58,37,115,9,37,100,10,0,116,111,95,115,0,0,0,0,87,101,100,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,49,41,0,0,0,0,79,80,95,65,68,68,9,82,37,100,9,58,37,115,9,37,100,10,0,0,114,101,109,111,118,101,95,109,101,116,104,111,100,0,0,0,37,83,32,105,115,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,0,0,0,84,117,115,0,111,124,111,0,79,80,95,77,69,84,72,79,68,9,82,37,100,9,58,37,115,10,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,114,101,109,111,118,101,95,99,108,97,115,115,95,118,97,114,105,97,98,108,101,0,0,0,77,111,110,0,111,0,0,0,95,95,99,108,97,115,115,105,100,95,95,0,79,80,95,82,65,78,71,69,9,82,37,100,9,82,37,100,9,37,100,10,0,0,0,0,109,111,100,117,108,101,95,101,118,97,108,0,83,117,110,0,101,120,116,101,110,100,101,100,0,0,0,0,124,83,0,0,79,80,95,76,65,77,66,68,65,9,82,37,100,9,73,40,37,43,100,41,9,37,100,10,0,0,0,0,109,101,116,104,111,100,95,100,101,102,105,110,101,100,63,0,83,116,114,105,110,103,0,0,68,101,99,0,101,120,116,101,110,100,95,111,98,106,101,99,116,0,0,0,83,0,0,0,79,80,95,66,76,75,80,85,83,72,9,82,37,100,9,37,100,58,37,100,58,37,100,58,37,100,10,0,105,110,115,116,97,110,99,101,95,109,101,116,104,111,100,115,0,0,0,0,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,0,78,111,118,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,97,116,32,108,101,97,115,116,32,49,41,0,0,82,101,103,101,120,112,0,0,9,91,37,100,93,32,37,115,58,37,100,58,105,110,32,37,115,37,115,37,115,10,0,0,110,111,119,0,73,110,100,101,120,69,114,114,111,114,0,0,115,116,97,114,116,95,119,105,116,104,63,0,105,110,99,108,117,100,101,100,95,109,111,100,117,108,101,115,0,0,0,0,119,105,100,116,104,32,116,111,111,32,98,105,103,0,0,0,111,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,78,101,120,116,32,116,111,107,101,110,32,105,115,0,0,0,77,82,66,95,84,84,95,70,73,88,78,85,77,0,0,0,108,97,109,98,100,97,0,0,116,97,110,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,112,114,111,99,33,0,0,0,42,0,0,0,69,110,117,109,101,114,97,98,108,101,0,0,108,97,115,116,112,99,0,0,110,105,108,63,0,0,0,0,67,108,101,97,110,117,112,58,32,112,111,112,112,105,110,103,0,0,0,0,79,99,116,0,105,110,102,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,111,0,0,0,95,95,99,108,97,115,115,105,100,95,95,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,116,121,112,101,32,109,105,115,109,97,116,99,104,58,32,37,83,32,103,105,118,101,110,0,105,110,99,108,117,100,101,100,0,0,0,0,67,108,101,97,110,117,112,58,32,100,105,115,99,97,114,100,105,110,103,32,108,111,111,107,97,104,101,97,100,0,0,0,83,101,112,0,96,37,83,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,0,0,0,124,111,105,0,105,110,115,112,101,99,116,0,99,108,97,115,115,95,101,118,97,108,0,0,100,105,115,97,98,108,101,0,109,101,109,111,114,121,32,101,120,104,97,117,115,116,101,100,0,0,0,0,65,117,103,0,110,42,38,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,98,121,116,101,115,0,0,0,97,112,112,101,110,100,95,102,101,97,116,117,114,101,115,0,69,114,114,111,114,58,32,112,111,112,112,105,110,103,0,0,74,117,108,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,70,108,111,97,116,32,105,110,116,111,32,73,110,116,101,103,101,114,0,0,0,0,115,105,110,103,108,101,116,111,110,95,109,101,116,104,111,100,115,0,0,0,105,110,115,112,101,99,116,0,117,110,101,120,112,101,99,116,101,100,32,110,101,120,116,0,105,110,115,112,101,99,116,0,79,80,95,82,69,84,85,82,78,9,82,37,100,0,0,0,105,110,99,108,117,100,101,63,0,0,0,0,69,114,114,111,114,58,32,100,105,115,99,97,114,100,105,110,103,0,0,0,74,117,110,0,119,105,100,116,104,40,37,83,41,32,62,32,40,37,83,58,115,105,122,101,111,102,40,109,114,98,95,105,110,116,41,42,67,72,65,82,95,66,73,84,45,49,41,0,115,101,110,100,0,0,0,0,117,112,99,97,115,101,33,0,79,80,95,69,78,84,69,82,9,37,100,58,37,100,58,37,100,58,37,100,58,37,100,58,37,100,58,37,100,10,0,0,42,0,0,0,105,110,99,108,117,100,101,0,110,116,101,114,109,32,37,115,32,40,0,0,105,110,104,101,114,105,116,101,100,0,0,0,116,111,107,101,110,32,37,115,32,40,0,0,32,32,32,36,37,100,32,61,32,0,0,0,82,101,100,117,99,105,110,103,32,115,116,97,99,107,32,98,121,32,114,117,108,101,32,37,100,32,40,108,105,110,101,32,37,108,117,41,58,10,0,0,115,121,110,116,97,120,32,101,114,114,111,114,0,0,0,0,98,111,116,104,32,98,108,111,99,107,32,97,114,103,32,97,110,100,32,97,99,116,117,97,108,32,98,108,111,99,107,32,103,105,118,101,110,0,0,0,77,97,121,0,102,0,0,0,114,101,115,112,111,110,100,95,116,111,63,0,98,108,111,99,107,32,97,114,103,117,109,101,110,116,32,115,104,111,117,108,100,32,110,111,116,32,98,101,32,103,105,118,101,110,0,0,32,37,100,0,117,112,99,97,115,101,0,0,83,116,97,99,107,32,110,111,119,0,0,0,79,80,95,65,82,71,65,82,89,9,82,37,100,9,37,100,58,37,100,58,37,100,58,37,100,10,0,0,110,111,110,101,0,0,0,0,105,0,0,0,101,120,116,101,110,100,101,100,0,0,0,0,116,101,114,109,115,0,0,0,64,51,48,0,110,108,0,0,116,101,114,109,0,0,0,0,116,114,97,105,108,101,114,0,45,62,32,36,36,32,61,0,114,98,114,97,99,107,101,116,0,0,0,0,65,112,114,0,110,97,110,0,114,101,109,111,118,101,95,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,0,0,0,0,114,112,97,114,101,110,0,0,111,112,116,95,110,108,0,0,116,111,95,115,121,109,0,0,111,112,116,95,116,101,114,109,115,0,0,0,79,80,95,83,85,80,69,82,9,82,37,100,9,37,100,10,0,0,0,0,100,111,116,95,111,114,95,99,111,108,111,110,0,0,0,0,101,120,116,101,110,100,95,111,98,106,101,99,116,0,0,0,111,112,101,114,97,116,105,111,110,51,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,111,112,101,114,97,116,105,111,110,50,0,0,111,112,101,114,97,116,105,111,110,0,0,0,97,115,115,111,99,0,0,0,97,115,115,111,99,115,0,0,99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,32,109,101,116,104,111,100,32,102,111,114,32,108,105,116,101,114,97,108,115,0,0,97,115,115,111,99,95,108,105,115,116,0,0,77,97,114,0,111,0,0,0,112,117,98,108,105,99,95,109,101,116,104,111,100,115,0,0,64,50,57,0,115,105,110,103,108,101,116,111,110,0,0,0,116,111,95,102,0,0,0,0,111,112,116,95,102,95,98,108,111,99,107,95,97,114,103,0,79,80,95,84,65,73,76,67,65,76,76,9,82,37,100,9,58,37,115,9,37,100,10,0,102,95,98,108,111,99,107,95,97,114,103,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,95,115,101,116,0,0,98,108,107,97,114,103,95,109,97,114,107,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,102,95,114,101,115,116,95,97,114,103,0,0,114,101,115,116,97,114,103,95,109,97,114,107,0,0,0,0,116,111,95,115,116,114,0,0,102,95,111,112,116,97,114,103,0,0,0,0,102,95,98,108,111,99,107,95,111,112,116,97,114,103,0,0,99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,32,109,101,116,104,111,100,32,102,111,114,32,40,41,46,0,0,0,102,95,98,108,111,99,107,95,111,112,116,0,70,101,98,0,124,105,0,0,112,114,111,116,101,99,116,101,100,95,109,101,116,104,111,100,115,0,0,0,102,95,111,112,116,0,0,0,102,95,97,114,103,0,0,0,116,111,95,105,0,0,0,0,102,95,97,114,103,95,105,116,101,109,0,0,79,80,95,83,69,78,68,66,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,0,102,95,110,111,114,109,95,97,114,103,0,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,95,103,101,116,0,0,102,95,98,97,100,95,97,114,103,0,0,0,97,114,114,97,121,32,115,105,122,101,32,116,111,111,32,98,105,103,0,0,102,95,97,114,103,115,0,0,102,95,97,114,103,108,105,115,116,0,0,0,64,50,56,0,115,117,112,101,114,99,108,97,115,115,0,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,0,0,98,97,99,107,114,101,102,0,74,97,110,0,116,114,117,110,99,97,116,101,0,0,0,0,112,114,105,118,97,116,101,95,109,101,116,104,111,100,115,0,118,97,114,95,114,101,102,0,118,97,114,95,108,104,115,0,115,117,98,33,0,0,0,0,35,0,0,0,118,97,114,105,97,98,108,101,0,0,0,0,79,80,95,83,69,78,68,9,82,37,100,9,58,37,115,9,37,100,10,0,109,107,116,105,109,101,0,0,110,117,109,101,114,105,99,0,115,116,114,117,99,116,32,115,105,122,101,32,100,105,102,102,101,114,115,32,40,37,83,32,114,101,113,117,105,114,101,100,32,37,83,32,103,105,118,101,110,41,0,0,60,60,0,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,95,100,101,102,105,110,101,100,63,0,115,121,109,98,111,108,115,0,102,108,97,103,32,97,102,116,101,114,32,112,114,101,99,105,115,105,111,110,0,0,0,0,116,111,95,97,0,0,0,0,124,111,0,0,114,101,99,117,114,115,105,118,101,32,97,114,114,97,121,32,106,111,105,110,0,0,0,0,115,121,109,0,38,0,0,0,77,82,66,95,84,84,95,84,82,85,69,0,37,115,32,0,98,97,115,105,99,95,115,121,109,98,111,108,0,0,0,0,99,111,115,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,110,32,111,98,106,101,99,116,33,0,0,0,0,115,121,109,98,111,108,0,0,91,93,0,0,99,97,110,39,116,32,121,105,101,108,100,32,102,114,111,109,32,114,111,111,116,32,102,105,98,101,114,0,105,0,0,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,99,108,97,115,115,0,0,0,0,119,111,114,100,115,0,0,0,78,111,77,101,116,104,111,100,69,114,114,111,114,0,0,0,124,0,0,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,103,108,111,98,97,108,32,118,97,114,105,97,98,108,101,0,104,101,114,101,100,111,99,95,98,111,100,121,0,0,0,0,0,0,0,0,45,105,110,102,0,0,0,0,114,111,117,110,100,0,0,0,111,98,106,101,99,116,95,105,100,0,0,0,104,101,114,101,100,111,99,95,98,111,100,105,101,115,0,0,42,0,0,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,37,83,32,105,110,32,37,83,0,0,0,111,111,0,0,111,112,116,95,104,101,114,101,100,111,99,95,98,111,100,105,101,115,0,0,115,117,98,0,104,101,114,101,100,111,99,0,79,80,95,74,77,80,78,79,84,9,82,37,100,9,37,48,51,100,10,0,114,101,103,101,120,112,0,0,120,115,116,114,105,110,103,0,115,117,112,101,114,99,108,97,115,115,0,0,124,83,0,0,64,50,55,0,115,116,114,105,110,103,95,105,110,116,101,114,112,0,0,0,115,116,114,105,110,103,95,114,101,112,0,0,115,116,114,105,110,103,0,0,108,105,116,101,114,97,108,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,0,0,85,84,67,32,0,0,0,0,105,110,102,105,110,105,116,101,63,0,0,0,110,105,108,63,0,0,0,0,111,112,116,95,101,110,115,117,114,101,0,0,101,120,99,95,118,97,114,0,115,112,108,105,116,0,0,0,48,48,48,49,0,0,0,0,101,120,99,95,108,105,115,116,0,0,0,0,79,80,95,74,77,80,73,70,9,82,37,100,9,37,48,51,100,10,0,0,111,112,116,95,114,101,115,99,117,101,0,0,99,97,115,101,115,0,0,0,109,101,116,104,111,100,95,109,105,115,115,105,110,103,0,0,101,110,97,98,108,101,0,0,91,46,46,46,93,0,0,0,99,97,115,101,95,98,111,100,121,0,0,0,64,50,54,0,64,50,53,0,98,114,97,99,101,95,98,108,111,99,107,0,109,101,116,104,111,100,95,99,97,108,108,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,99,111,110,115,116,97,110,116,0,0,0,0,37,115,32,37,115,32,37,48,50,100,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,32,37,115,37,100,0,0,102,108,111,111,114,0,0,0,109,101,116,104,111,100,115,0,98,108,111,99,107,95,99,97,108,108,0,0,64,50,52,0,115,108,105,99,101,0,0,0,100,111,95,98,108,111,99,107,0,0,0,0,79,80,95,74,77,80,9,9,37,48,51,100,10,0,0,0,108,97,109,98,100,97,95,98,111,100,121,0,102,95,108,97,114,103,108,105,115,116,0,0,33,0,0,0,101,113,108,63,0,0,0,0,98,118,97,114,0,0,0,0,98,118,95,100,101,99,108,115,0,0,0,0,111,112,116,95,98,118,95,100,101,99,108,0,98,108,111,99,107,95,112,97,114,97,109,95,100,101,102,0,111,112,116,95,98,108,111,99,107,95,112,97,114,97,109,0,37,100,0,0,76,79,67,65,76,0,0,0,98,0,0,0,102,105,110,105,116,101,63,0,107,105,110,100,95,111,102,63,0,0,0,0,98,108,111,99,107,95,112,97,114,97,109,0,102,95,109,97,114,103,115,0,115,99,97,110,0,0,0,0,99,97,108,108,0,0,0,0,102,95,109,97,114,103,95,108,105,115,116,0,79,80,95,83,69,84,67,86,9,37,115,9,82,37,100,10,0,0,0,0,102,95,109,97,114,103,0,0,116,111,95,115,121,109,0,0,102,111,114,95,118,97,114,0,105,110,105,116,105,97,108,105,122,101,0,0,61,61,0,0,111,112,116,95,101,108,115,101,0,0,0,0,105,102,95,116,97,105,108,0,112,114,105,109,97,114,121,95,118,97,108,117,101,0,0,0,64,50,51,0,64,50,50,0,40,110,117,108,108,41,0,0,85,84,67,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,37,83,32,105,110,116,111,32,37,83,0,0,0,0,99,101,105,108,0,0,0,0,105,115,95,97,63,0,0,0,64,50,49,0,64,50,48,0,114,105,110,100,101,120,0,0,64,49,57,0,79,80,95,71,69,84,67,86,9,82,37,100,9,37,115,10,0,0,0,0,64,49,56,0,64,49,55,0,110,101,119,0,116,111,95,115,0,0,0,0,64,49,54,0,115,117,112,101,114,99,108,97,115,115,32,109,105,115,109,97,116,99,104,32,102,111,114,32,99,108,97,115,115,32,37,83,0,0,0,0,64,49,53,0,64,49,52,0,64,49,51,0,64,49,50,0,0,0,0,0,110,111,110,101,0,0,0,0,68,97,116,97,0,0,0,0,70,108,111,97,116,0,0,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,115,0,0,64,49,49,0,64,49,48,0,114,101,118,101,114,115,101,33,0,0,0,0,64,57,0,0,79,80,95,83,69,84,85,80,86,65,82,9,82,37,100,9,37,100,9,37,100,10,0,0,64,56,0,0,65,0,0,0,64,55,0,0,67,108,97,115,115,0,0,0,105,110,115,112,101,99,116,0,112,114,105,109,97,114,121,0,109,114,104,115,0,0,0,0,97,114,103,115,0,0,0,0,111,112,116,95,98,108,111,99,107,95,97,114,103,0,0,0,98,108,111,99,107,95,97,114,103,0,0,0,99,97,108,108,0,0,0,0,78,111,116,32,97,32,118,97,108,105,100,32,116,105,109,101,46,0,0,0,116,111,95,104,97,115,104,0,70,105,108,101,0,0,0,0,100,105,118,109,111,100,0,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,115,101,116,0,0,0,104,97,115,104,0,0,0,0,64,54,0,0,99,111,109,109,97,110,100,95,97,114,103,115,0,0,0,0,114,101,118,101,114,115,101,0,99,97,108,108,95,97,114,103,115,0,0,0,79,80,95,71,69,84,85,80,86,65,82,9,82,37,100,9,37,100,9,37,100,10,0,0,111,112,116,95,99,97,108,108,95,97,114,103,115,0,0,0,111,112,116,95,112,97,114,101,110,95,97,114,103,115,0,0,77,111,100,117,108,101,0,0,117,110,115,104,105,102,116,0,112,97,114,101,110,95,97,114,103,115,0,0,97,114,101,102,95,97,114,103,115,0,0,0,97,114,103,95,118,97,108,117,101,0,0,0,97,114,103,0,114,101,115,119,111,114,100,115,0,0,0,0,98,108,111,99,107,32,103,105,118,101,110,32,116,111,32,121,105,101,108,100,0,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,72,97,115,104,0,0,0,0,82,97,110,103,101,0,0,0,105,110,115,112,101,99,116,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,103,101,116,0,0,0,42,0,0,0,111,112,0,0,64,53,0,0,114,101,112,108,97,99,101,0,117,110,100,101,102,95,108,105,115,116,0,0,79,80,95,83,69,84,73,86,9,37,115,9,82,37,100,10,0,0,0,0,102,115,121,109,0,0,0,0,102,110,97,109,101,0,0,0,79,98,106,101,99,116,0,0,115,108,105,99,101,0,0,0,99,112,97,116,104,0,0,0,99,110,97,109,101,0,0,0,108,104,115,0,115,116,114,105,110,103,32,99,111,110,116,97,105,110,115,32,110,117,108,108,32,98,121,116,101,0,0,0,109,108,104,115,95,110,111,100,101,0,0,0,109,108,104,115,95,112,111,115,116,0,0,0,109,111,100,117,108,101,32,100,101,102,105,110,105,116,105,111,110,32,105,110,32,109,101,116,104,111,100,32,98,111,100,121,0,0,0,0,124,105,105,105,105,105,105,105,0,0,0,0,111,110,101,32,104,97,115,104,32,114,101,113,117,105,114,101,100,0,0,0,83,116,114,105,110,103,0,0,116,111,95,115,0,0,0,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,100,101,102,105,110,101,100,63,0,0,111,42,0,0,109,108,104,115,95,108,105,115,116,0,0,0,109,108,104,115,95,105,116,101,109,0,0,0,109,97,116,99,104,0,0,0,109,108,104,115,95,98,97,115,105,99,0,0,79,80,95,71,69,84,73,86,9,82,37,100,9,37,115,10,0,0,0,0,109,108,104,115,95,105,110,110,101,114,0,0,109,108,104,115,0,0,0,0,66,97,115,105,99,79,98,106,101,99,116,0,115,105,122,101,0,0,0,0,99,111,109,109,97,110,100,0,64,52,0,0,99,109,100,95,98,114,97,99,101,95,98,108,111,99,107,0,98,108,111,99,107,95,99,111,109,109,97,110,100,0,0,0,99,111,109,109,97,110,100,95,99,97,108,108,0,0,0,0,99,108,97,115,115,32,100,101,102,105,110,105,116,105,111,110,32,105,110,32,109,101,116,104,111,100,32,98,111,100,121,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,99,108,97,115,115,0,0,0,0,105,110,118,97,108,105,100,32,114,97,100,105,120,32,37,83,0,0,0,0,67,97,110,110,111,116,32,103,101,116,32,104,97,110,100,108,101,32,118,97,108,117,101,33,0,0,0,0,72,97,115,104,0,0,0,0,116,111,95,102,0,0,0,0,105,110,115,116,97,110,99,101,95,111,102,63,0,0,0,0,125,0,0,0,101,120,112,114,95,118,97,108,117,101,0,0,101,120,112,114,0,0,0,0,105,110,116,101,114,110,0,0,46,0,0,0,99,111,109,109,97,110,100,95,97,115,103,110,0,0,0,0,79,80,95,83,69,84,77,67,78,83,84,9,82,37,100,58,58,37,115,9,82,37,100,10,0,0,0,0,108,111,99,97,108,0,0,0,64,51,0,0,83,116,114,117,99,116,0,0,99,111,110,99,97,116,0,0,115,116,109,116,0,0,0,0,99,111,110,115,116,97,110,116,32,37,83,32,110,111,116,32,100,101,102,105,110,101,100,0,102,108,97,103,32,97,102,116,101,114,32,119,105,100,116,104,0,0,0,0,124,111,0,0,36,109,114,98,95,105,95,114,97,110,100,95,115,101,101,100,0,0,0,0,115,104,105,102,116,0,0,0,115,116,109,116,115,0,0,0,112,114,111,99,0,0,0,0,77,82,66,95,84,84,95,70,82,69,69,0,78,111,119,32,97,116,32,101,110,100,32,111,102,32,105,110,112,117,116,46,10,0,0,0,99,111,109,112,115,116,109,116,0,0,0,0,115,105,110,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,102,108,111,97,116,33,0,0,98,111,100,121,115,116,109,116,0,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,111,0,0,0,64,50,0,0,101,120,112,101,99,116,101,100,32,82,97,110,103,101,46,0,99,97,108,108,0,0,0,0,110,111,32,98,108,111,99,107,32,103,105,118,101,110,0,0,94,0,0,0,116,111,112,95,115,116,109,116,0,0,0,0,126,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,46,37,100,0,78,97,78,0,82,79,79,84,95,79,66,74,69,67,84,0,65,114,114,97,121,0,0,0,115,117,99,99,0,0,0,0,105,110,115,116,97,110,99,101,95,101,118,97,108,0,0,0,61,62,0,0,116,111,112,95,115,116,109,116,115,0,0,0,99,97,110,39,116,32,100,117,112,32,37,83,0,0,0,0,62,0,0,0,111,0,0,0,116,111,112,95,99,111,109,112,115,116,109,116,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,64,49,0,0,79,80,95,71,69,84,77,67,78,83,84,9,82,37,100,9,82,37,100,58,58,37,115,10,0,0,0,0,112,114,111,103,114,97,109,0,36,97,99,99,101,112,116,0,110,111,0,0,114,105,110,100,101,120,0,0,39,92,110,39,0,0,0,0,39,59,39,0,39,93,39,0,39,41,39,0,39,40,39,0,60,0,0,0,111,0,0,0,96,37,83,39,32,105,115,32,110,111,116,32,97,32,115,116,114,117,99,116,32,109,101,109,98,101,114,0,37,100,0,0,109,114,117,98,121,95,106,115,95,111,98,106,101,99,116,95,104,97,110,100,108,101,0,0,80,114,111,99,0,0,0,0,110,101,120,116,0,0,0,0,105,110,115,112,101,99,116,0,44,32,0,0,39,96,39,0,39,44,39,0,105,110,105,116,105,97,108,105,122,101,0,0,82,73,84,69,0,0,0,0,39,46,39,0,79,80,95,83,69,84,67,79,78,83,84,9,58,37,115,9,82,37,100,10,0,0,0,0,39,91,39,0,39,125,39,0,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,37,83,32,110,111,116,32,100,101,102,105,110,101,100,32,102,111,114,32,37,83,0,0,0,0,115,116,97,114,116,0,0,0,114,101,118,101,114,115,101,33,0,0,0,0,39,123,39,0,116,76,65,83,84,95,84,79,75,69,78,0,105,100,95,99,111,114,101,95,115,101,116,95,112,111,115,116,101,120,101,0,105,100,95,99,111,114,101,95,100,101,102,105,110,101,95,115,105,110,103,108,101,116,111,110,95,109,101,116,104,111,100,0,105,100,95,99,111,114,101,95,100,101,102,105,110,101,95,109,101,116,104,111,100,0,0,0,62,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,114,101,100,101,102,105,110,105,110,103,32,99,111,110,115,116,97,110,116,32,83,116,114,117,99,116,58,58,37,83,0,0,0,0,0,0,104,97,110,100,108,101,0,0,83,67,108,97,115,115,0,0,104,97,115,104,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,123,0,0,0,105,100,95,99,111,114,101,95,117,110,100,101,102,95,109,101,116,104,111,100,0,0,0,0,98,117,103,58,32,0,0,0,105,100,95,99,111,114,101,95,115,101,116,95,118,97,114,105,97,98,108,101,95,97,108,105,97,115,0,0,105,110,100,101,120,0,0,0,105,100,95,99,111,114,101,95,115,101,116,95,109,101,116,104,111,100,95,97,108,105,97,115,0,0,0,0,79,80,95,71,69,84,67,79,78,83,84,9,82,37,100,9,58,37,115,10,0,0,0,0,105,100,67,70,85,78,67,0,105,100,73,70,85,78,67,0,99,97,110,110,111,116,32,114,101,109,111,118,101,32,37,83,32,102,111,114,32,37,83,0,114,101,118,101,114,115,101,0,105,100,82,101,115,112,111,110,100,95,116,111,0,0,0,0,105,100,78,85,76,76,0,0,39,126,39,0,39,33,39,0,116,85,77,73,78,85,83,95,78,85,77,0,38,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,105,100,101,110,116,105,102,105,101,114,32,37,83,32,110,101,101,100,115,32,116,111,32,98,101,32,99,111,110,115,116,97,110,116,0,0,37,42,115,0,67,97,110,110,111,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,33,0,105,67,108,97,115,115,0,0,101,113,108,63,0,0,0,0,104,97,115,104,0,0,0,0,39,37,39,0,39,47,39,0,105,110,99,108,117,100,101,63,0,0,0,0,61,61,61,0,39,42,39,0,79,80,95,83,69,84,71,76,79,66,65,76,9,58,37,115,9,82,37,100,10,0,0,0,39,45,39,0,39,43,39,0,116,111,95,115,0,0,0,0,110,0,0,0,114,101,112,108,97,99,101,0,39,38,39,0,39,94,39,0,39,124,39,0,39,60,39,0,39,62,39,0,94,0,0,0,122,111,110,101,0,0,0,0,98,114,111,107,101,110,32,109,101,109,98,101,114,115,0,0,73,110,102,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,67,108,97,115,115,0,0,0,62,62,0,0,101,120,116,101,110,100,0,0,123,125,0,0,39,58,39,0,39,63,39,0,104,97,115,104,0,0,0,0,39,61,39,0,79,80,95,71,69,84,71,76,79,66,65,76,9,82,37,100,9,58,37,115,10,0,0,0,116,76,79,87,69,83,84,0,116,76,73,84,69,82,65,76,95,68,69,76,73,77,0,0,42,0,0,0,112,117,115,104,0,0,0,0,116,72,69,82,69,68,79,67,95,69,78,68,0,0,0,0,115,117,112,101,114,99,108,97,115,115,32,109,117,115,116,32,98,101,32,97,32,67,108,97,115,115,32,40,37,83,32,103,105,118,101,110,41,0,0,0,116,72,69,82,69,68,79,67,95,66,69,71,0,0,0,0,116,76,65,77,66,69,71,0,116,83,84,82,73,78,71,95,68,86,65,82,0,0,0,0,116,88,83,84,82,73,78,71,95,66,69,71,0,0,0,0,121,101,97,114,0,0,0,0,124,0,0,0,115,116,114,117,99,116,32,115,105,122,101,32,100,105,102,102,101,114,115,0,78,97,78,0,78,111,32,118,97,108,105,100,32,104,97,110,100,108,101,32,105,115,32,112,114,111,118,105,100,101,100,33,0,0,0,0,79,98,106,101,99,116,0,0,60,60,0,0,101,113,117,97,108,63,0,0,101,113,108,63,0,0,0,0,116,83,84,82,73,78,71,95,66,69,71,0,116,83,89,77,66,79,76,83,95,66,69,71,0,0,0,0,103,115,117,98,33,0,0,0,116,87,79,82,68,83,95,66,69,71,0,0,79,80,95,76,79,65,68,70,9,82,37,100,10,0,0,0,116,82,69,71,69,88,80,95,66,69,71,0,60,61,62,0,116,83,89,77,66,69,71,0,111,111,0,0,112,111,112,0,116,76,65,77,66,68,65,0,116,65,77,80,69,82,0,0,116,83,84,65,82,0,0,0,116,76,66,82,65,67,69,95,65,82,71,0,116,76,66,82,65,67,69,0,121,100,97,121,0,0,0,0,37,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,105,0,0,0,77,111,100,117,108,101,0,0,94,0,0,0,101,113,108,63,0,0,0,0,116,111,95,115,0,0,0,0,116,76,66,82,65,67,75,0,116,82,80,65,82,69,78,0,103,115,117,98,0,0,0,0,116,76,80,65,82,69,78,95,65,82,71,0,79,80,95,76,79,65,68,84,9,82,37,100,10,0,0,0,116,76,80,65,82,69,78,0,116,65,83,83,79,67,0,0,99,97,110,39,116,32,109,97,107,101,32,115,117,98,99,108,97,115,115,32,111,102,32,67,108,97,115,115,0,0,0,0,108,101,110,103,116,104,0,0,116,79,80,95,65,83,71,78,0,0,0,0,116,67,79,76,79,78,51,0,116,67,79,76,79,78,50,0,116,82,83,72,70,84,0,0,116,76,83,72,70,84,0,0,119,100,97,121,0,0,0,0,47,0,0,0,99,97,108,108,0,0,0,0,37,37,108,37,99,0,0,0,111,0,0,0,116,114,117,101,0,0,0,0,124,0,0,0,100,117,112,0,105,110,115,112,101,99,116,0,116,65,83,69,84,0,0,0,116,65,82,69,70,0,0,0,101,113,108,63,0,0,0,0,99,105,105,100,120,0,0,0,116,68,79,84,51,0,0,0,79,80,95,76,79,65,68,83,69,76,70,9,82,37,100,10,0,0,0,0,116,68,79,84,50,0,0,0,116,78,77,65,84,67,72,0,99,97,110,39,116,32,109,97,107,101,32,115,117,98,99,108,97,115,115,32,111,102,32,115,105,110,103,108,101,116,111,110,32,99,108,97,115,115,0,0,108,97,115,116,0,0,0,0,116,77,65,84,67,72,0,0,116,79,82,79,80,0,0,0,116,65,78,68,79,80,0,0,116,76,69,81,0,0,0,0,116,71,69,81,0,0,0,0,117,116,99,63,0,0,0,0,42,0,0,0,42,38,0,0,48,66,0,0,111,111,0,0,102,97,108,115,101,0,0,0,38,0,0,0,99,108,111,110,101,0,0,0,118,97,108,117,101,115,0,0,116,78,69,81,0,0,0,0,116,69,81,81,0,0,0,0,101,109,112,116,121,63,0,0,115,101,116,95,98,97,99,107,116,114,97,99,101,0,0,0,116,69,81,0,79,80,95,76,79,65,68,78,73,76,9,82,37,100,10,0,116,67,77,80,0,0,0,0,116,80,79,87,0,0,0,0,62,0,0,0,106,111,105,110,0,0,0,0,116,85,77,73,78,85,83,0,116,85,80,76,85,83,0,0,116,82,69,71,69,88,80,95,69,78,68,0,116,66,65,67,75,95,82,69,70,0,0,0,116,78,84,72,95,82,69,70,0,0,0,0,117,115,101,99,0,0,0,0,45,0,0,0,42,0,0,0,48,98,0,0,112,97,114,101,110,116,95,111,98,106,101,99,116,0,0,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,37,83,32,116,111,32,73,110,116,101,103,101,114,32,40,37,83,35,37,83,32,103,105,118,101,115,32,37,83,41,0,0,0,0,126,0,0,0,99,108,97,115,115,0,0,0,118,97,108,117,101,63,0,0,116,83,84,82])
.concat([73,78,71,95,77,73,68,0,116,83,84,82,73,78,71,95,80,65,82,84,0,0,0,0,100,111,119,110,99,97,115,101,33,0,0,0,124,111,0,0,37,83,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,0,0,108,97,115,116,112,99,0,0,116,83,84,82,73,78,71,0,79,80,95,76,79,65,68,83,89,77,9,82,37,100,9,58,37,115,10,0,103,109,0,0,116,82,69,71,69,88,80,0,99,111,114,114,117,112,116,101,100,32,115,116,114,117,99,116,0,0,0,0,115,119,97,112,99,97,115,101,0,0,0,0,116,88,83,84,82,73,78,71,0,0,0,0,35,60,67,108,97,115,115,58,0,0,0,0,109,97,108,102,111,114,109,101,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,32,45,32,92,37,37,83,0,0,108,97,115,116,0,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,116,67,72,65,82,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,105,110,115,112,101,99,116,0,77,82,66,95,84,84,95,70,65,76,83,69,0,0,0,0,37,83,32,111,117,116,32,111,102,32,99,104,97,114,32,114,97,110,103,101,0,0,0,0,82,101,97,100,105,110,103,32,97,32,116,111,107,101,110,58,32,0,0,0,116,70,76,79,65,84,0,0,84,79,76,69,82,65,78,67,69,0,0,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,110,32,105,110,116,101,103,101,114,33,0,0,0,116,73,78,84,69,71,69,82,0,0,0,0,121,105,101,108,100,0,0,0,114,97,115,115,111,99,0,0,84,121,112,101,69,114,114,111,114,0,0,0,116,76,65,66,69,76,0,0,109,101,116,104,111,100,95,109,105,115,115,105,110,103,0,0,38,0,0,0,116,67,86,65,82,0,0,0,97,114,105,116,121,0,0,0,116,111,95,102,0,0,0,0,43,0,0,0,62,0,0,0,48,88,0,0,110,111,110,32,102,108,111,97,116,32,118,97,108,117,101,0,102,124,102,0,105,42,0,0,116,111,95,105,0,0,0,0,61,61,0,0,95,95,115,101,110,100,95,95,0,0,0,0,115,116,111,114,101,0,0,0,116,67,79,78,83,84,65,78,84,0,0,0,99,97,110,39,116,32,99,108,111,110,101,32,37,83,0,0,116,111,95,104,97,115,104,0,58,0,0,0,116,73,86,65,82,0,0,0,100,111,119,110,99,97,115,101,0,0,0,0,111,0,0,0,116,71,86,65,82,0,0,0,79,80,95,76,79,65,68,73,9,82,37,100,9,37,100,10,0,0,0,0,116,70,73,68,0,0,0,0,116,73,68,69,78,84,73,70,73,69,82,0,58,58,0,0,107,101,121,119,111,114,100,95,95,69,78,67,79,68,73,78,71,95,95,0,105,110,100,101,120,0,0,0,107,101,121,119,111,114,100,95,95,70,73,76,69,95,95,0,99,104,111,112,33,0,0,0,107,101,121,119,111,114,100,95,95,76,73,78,69,95,95,0,107,101,121,119,111,114,100,95,69,78,68,0,107,101,121,119,111,114,100,95,66,69,71,73,78,0,0,0,116,111,95,105,0,0,0,0,91,93,61,0,61,0,0,0,48,120,0,0,102,105,0,0,74,115,65,114,114,97,121,0,37,0,0,0,95,95,105,100,95,95,0,0,115,105,122,101,0,0,0,0,107,101,121,119,111,114,100,95,97,108,105,97,115,0,0,0,109,111,100,105,102,105,101,114,95,114,101,115,99,117,101,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,83,99,114,105,112,116,69,114,114,111,114,0,41,0,0,0,109,111,100,105,102,105,101,114,95,117,110,116,105,108,0,0,79,80,95,76,79,65,68,76,9,82,37,100,9,76,40,37,100,41,10,0,109,111,100,105,102,105,101,114,95,119,104,105,108,101,0,0,109,111,100,105,102,105,101,114,95,117,110,108,101,115,115,0,95,95,99,108,97,115,115,112,97,116,104,95,95,0,0,0,71,67,0,0,109,111,100,105,102,105,101,114,95,105,102,0,102,105,114,115,116,0,0,0,107,101,121,119,111,114,100,95,110,111,116,0,107,101,121,119,111,114,100,95,111,114,0,0,107,101,121,119,111,114,100,95,97,110,100,0,107,101,121,119,111,114,100,95,102,97,108,115,101,0,0,0,115,101,99,0,45,64,0,0,32,0,0,0,48,0,0,0,102,102,0,0,105,110,118,111,107,101,95,105,110,116,101,114,110,97,108,0,42,0,0,0,61,61,61,0,115,104,105,102,116,0,0,0,107,101,121,119,111,114,100,95,116,114,117,101,0,0,0,0,119,97,114,110,105,110,103,58,32,0,0,0,107,101,121,119,111,114,100,95,110,105,108,0,99,104,111,112,0,0,0,0,32,40,0,0,107,101,121,119,111,114,100,95,115,101,108,102,0,0,0,0,79,80,95,77,79,86,69,9,82,37,100,9,82,37,100,10,0,0,0,0,107,101,121,119,111,114,100,95,115,117,112,101,114,0,0,0,107,101,121,119,111,114,100,95,121,105,101,108,100,0,0,0,124,111,0,0,107,101,121,119,111,114,100,95,114,101,116,117,114,110,0,0,101,109,112,116,121,63,0,0,107,101,121,119,111,114,100,95,100,111,95,76,65,77,66,68,65,0,0,0,107,101,121,119,111,114,100,95,100,111,95,98,108,111,99,107,0,0,0,0,107,101,121,119,111,114,100,95,100,111,95,99,111,110,100,0,107,101,121,119,111,114,100,95,100,111,0,0,109,111,110,116,104,0,0,0,44,32,0,0,43,64,0,0,105,110,118,97,108,105,100,32,109,98,115,116,114,105,110,103,32,115,101,113,117,101,110,99,101,0,0,0,102,0,0,0,74,115,70,117,110,99,116,105,111,110,0,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,110,105,108,32,105,110,116,111,32,73,110,116,101,103,101,114,0,0,45,0,0,0,33,61,0,0,114,101,112,108,97,99,101,0,107,101,121,119,111,114,100,95,105,110,0,0,107,101,121,119,111,114,100,95,114,101,116,114,121,0,0,0,99,104,111,109,112,33,0,0,83,116,97,110,100,97,114,100,69,114,114,111,114,0,0,0,58,32,0,0,107,101,121,119,111,114,100,95,114,101,100,111,0,0,0,0,107,101,121,119,111,114,100,95,110,101,120,116,0,0,0,0,107,101,121,119,111,114,100,95,98,114,101,97,107,0,0,0,42,38,0,0,107,101,121,119,111,114,100,95,102,111,114,0,105,100,50,110,97,109,101,0,100,101,108,101,116,101,95,97,116,0,0,0,107,101,121,119,111,114,100,95,117,110,116,105,108,0,0,0,107,101,121,119,111,114,100,95,119,104,105,108,101,0,0,0,107,101,121,119,111,114,100,95,119,104,101,110,0,0,0,0,107,101,121,119,111,114,100,95,99,97,115,101,0,0,0,0,109,111,110,0,42,42,0,0,101,114,102,99,0,0,0,0,99,114,101,97,116,101,0,0,101,113,108,63,0,0,0,0,43,0,0,0,61,61,0,0,109,101,109,98,101,114,63,0,107,101,121,119,111,114,100,95,101,108,115,101,0,0,0,0,107,101,121,119,111,114,100,95,101,108,115,105,102,0,0,0,99,104,111,109,112,0,0,0,58,0,0,0,107,101,121,119,111,114,100,95,116,104,101,110,0,0,0,0,37,48,51,100,32,0,0,0,107,101,121,119,111,114,100,95,117,110,108,101,115,115,0,0,107,101,121,119,111,114,100,95,105,102,0,0,117,110,100,101,102,105,110,101,100,32,109,101,116,104,111,100,32,39,37,83,39,32,102,111,114,32,99,108,97,115,115,32,37,83,0,0,107,101,121,119,111,114,100,95,101,110,100,0,99,111,110,99,97,116,0,0,84,121,112,101,69,114,114,111,114,0,0,0,107,101,121,119,111,114,100,95,101,110,115,117,114,101,0,0,107,101,121,119,111,114,100,95,114,101,115,99,117,101,0,0,107,101,121,119,111,114,100,95,98,101,103,105,110,0,0,0,107,101,121,119,111,114,100,95,117,110,100,101,102,0,0,0,109,105,110,0,35,60,115,116,114,117,99,116,32,0,0,0,62,62,0,0,37,99,32,114,101,113,117,105,114,101,115,32,97,32,99,104,97,114,97,99,116,101,114,0,99,111,117,110,116,95,111,98,106,101,99,116,115,0,0,0,101,114,102,0,91,93,61,0,116,111,95,102,0,0,0,0,70,105,120,110,117,109,0,0,115,105,110,103,108,101,116,111,110,95,99,108,97,115,115,0,108,101,110,103,116,104,0,0,107,101,121,119,111,114,100,95,100,101,102,0,107,101,121,119,111,114,100,95,109,111,100,117,108,101,0,0,99,97,112,105,116,97,108,105,122,101,33,0,108,105,110,101,0,0,0,0,107,101,121,119,111,114,100,95,99,108,97,115,115,0,0,0,105,114,101,112,32,37,100,32,110,114,101,103,115,61,37,100,32,110,108,111,99,97,108,115,61,37,100,32,112,111,111,108,115,61,37,100,32,115,121,109,115,61,37,100,10,0,0,0,36,117,110,100,101,102,105,110,101,100,0,0,111,0,0,0,101,114,114,111,114,0,0,0,99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,0,0,36,101,110,100,0,0,0,0,99,108,101,97,114,0,0,0,68,101,108,101,116,105,110,103,0,0,0,0,108,105,110,101,32,37,100,58,37,100,58,32,37,115,10,0,37,115,58,37,100,58,37,100,58,32,37,115,10,0,0,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,32,98,97,99,107,114,101,102,95,101,114,114,111,114,40,41,32,58,32,110,61,62,99,97,114,32,61,61,32,37,100,0,0,0,0,109,100,97,121,0,0,0,0,105,110,99,111,110,115,105,115,116,101,110,116,32,115,116,114,117,99,116,0,60,60,0,0,79,98,106,101,99,116,83,112,97,99,101,0,104,121,112,111,116,0,0,0,91,93,0,0,98,97,100,32,118,97,108,117,101,32,102,111,114,32,114,97,110,103,101,0,70,108,111,97,116,0,0,0,116,111,95,105,110,116,0,0,114,97,105,115,101,0,0,0,107,101,121,115,0,0,0,0,99,97,110,39,116,32,115,101,116,32,118,97,114,105,97,98,108,101,32,36,37,99,0,0,99,97,110,39,116,32,115,101,116,32,118,97,114,105,97,98,108,101,32,36,37,100,0,0,99,97,112,105,116,97,108,105,122,101,0,0,102,105,108,101,0,0,0,0,116,111,111,32,99,111,109,112,108,101,120,32,101,120,112,114,101,115,115,105,111,110,0,0,109,111,100,117,108,101,95,101,118,97,108,47,99,108,97,115,115,95,101,118,97,108,32,119,105,116,104,32,115,116,114,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,115,0,0,0,91,93,61,0,117,110,107,110,111,119,110,32,114,101,103,101,120,112,32,111,112,116,105,111,110,37,115,32,45,32,37,115,0,0,0,0,117,110,116,101,114,109,105,110,97,116,101,100,32,115,116,114,105,110,103,32,109,101,101,116,115,32,101,110,100,32,111,102,32,102,105,108,101,0,0,0,99,97,110,39,116,32,102,105,110,100,32,115,116,114,105,110,103,32,34,37,115,34,32,97,110,121,119,104,101,114,101,32,98,101,102,111,114,101,32,69,79,70,0,0,117,110,116,101,114,109,105,110,97,116,101,100,32,104,101,114,101,32,100,111,99,117,109,101,110,116,32,105,100,101,110,116,105,102,105,101,114,0,0,0,108,111,99,97,108,116,105,109,101,0,0,0,101,113,108,63,0,0,0,0,33,61,0,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,99,104,97,114,97,99,116,101,114,32,45,32,37,0,0,0,0,77,82,66,95,84,84,95,68,65,84,65,0,108,100,101,120,112,0,0,0,115,101,116,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,110,105,108,32,105,110,116,111,32,70,108,111,97,116,0,0,0,0,116,111,95,105,0,0,0,0,105,116,101,114,97,116,111,114,63,0,0,0,107,101,121,63,0,0,0,0,73,110,118,97,108,105,100,32,101,115,99,97,112,101,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,0,115,116,114,105,110,103,32,116,111,111,32,108,111,110,103,32,40,116,114,117,110,99,97,116,101,100,41,0,91,93,0,0,109,101,115,103,0,0,0,0,97,109,98,105,103,117,111,117,115,32,102,105,114,115,116,32,97,114,103,117,109,101,110,116,59,32,112,117,116,32,112,97,114,101,110,116,104,101,115,101,115,32,111,114,32,101,118,101,110,32,115,112,97,99,101,115,0,0,0,0,98,117,103,58,32,100,105,115,112,97,116,99,104,32,111,110,32,110,111,110,32,74,77,80,32,111,112,10,0,0,0,0,119,104,105,108,101,0,0,0,99,108,97,115,115,0,0,0,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,66,69,71,73,78,0,0,0,60,60,0,0,97,108,105,97,115,0,0,0,69,78,68,0,95,95,69,78,67,79,68,73,78,71,95,95,0,0,0,0,95,95,70,73,76,69,95,95,0,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,104,111,117,114,0,0,0,0,116,111,95,115,0,0,0,0,60,61,0,0,112,114,101,99,105,115,105,111,110,32,116,111,111,32,98,105,103,0,0,0,77,82,66,95,84,84,95,69,78,86,0,0,102,114,101,120,112,0,0,0,103,101,116,0,60,61,62,0,116,111,95,105,110,116,0,0,110,101,119,0,103,108,111,98,97,108,95,118,97,114,105,97,98,108,101,115,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,95,95,76,73,78,69,95,95,0,0,0,0,98,101,103,105,110,0,0,0,61,126,0,0,83,121,110,116,97,120,69,114,114,111,114,0,109,111,100,117,108,101,0,0,116,111,111,32,109,97,110,121,32,115,121,109,98,111,108,115,32,40,109,97,120,32,50,53,54,41,0,0,115,117,112,101,114,0,0,0,110,101,120,116,0,0,0,0,124,83,38,0,114,101,100,111,0,0,0,0,43,0,0,0,99,97,115,101,0,0,0,0,105,102,0,0,114,101,116,114,121,0,0,0,119,104,101,110,0,0,0,0,109,97,105,110,0,0,0,0,103,109,116,105,109,101,0,0,105,110,115,112,101,99,116,0,62,61,0,0,112,114,101,99,105,115,105,111,110,32,103,105,118,101,110,32,116,119,105,99,101,0,0,0,77,82,66,95,84,84,95,70,73,76,69,0,99,98,114,116,0,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,46,46,46,0,99,108,97,115,115,32,111,114,32,109,111,100,117,108,101,32,114,101,113,117,105,114,101,100,0,0,0,0,73,110,116,101,103,101,114,0,98,108,111,99,107,95,103,105,118,101,110,63,0,0,0,0,95,95,105,110,105,116,95,99,111,114,101,0,105,110,0,0,111,114,0,0,61,61,0,0,83,99,114,105,112,116,69,114,114,111,114,0,40,117,110,107,110,111,119,110,41,0,0,0,117,110,100,101,102,0,0,0,97,116,0,0,112,111,111,108,32,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,0,0,102,111,114,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,115,116,114,117,99,116,0,0,0,0,115,119,97,112,99,97,115,101,33,0,0,0,121,105,101,108,100,0,0,0,116,111,111,32,102,101,119,32,97,114,103,117,109,101,110,116,115,0,0,0,99,121,99,108,105,99,32,105,110,99,108,117,100,101,32,100,101,116,101,99,116,101,100,0,102,111,114,109,97,116,0,0,102,105,114,115,116,0,0,0,82,97,110,100,111,109,0,0,100,111,0,0,116,111,95,115,0,0,0,0,91,93,0,0,70,82,69,69,0,0,0,0,82,97,110,103,101,69,114,114,111,114,0,0,69,110,116,101,114,105,110,103,32,115,116,97,116,101,32,37,100,10,0,0,97,110,100,0,69,0,0,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,115,116,114,105,110,103,33,0,100,101,102,0,114,101,115,117,109,101,0,0,97,116,0,0,111,0,0,0,114,101,116,117,114,110,0,0,110,101,103,97,116,105,118,101,32,97,114,103,99,32,102,111,114,32,102,117,110,99,97,108,108,32,40,37,83,41,0,0,110,101,119,0,117,110,108,101,115,115,0,0,103,109,116,63,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,33,126,0,0,117,110,110,117,109,98,101,114,101,100,40,37,83,41,32,109,105,120,101,100,32,119,105,116,104,32,110,97,109,101,100,0,84,121,112,101,69,114,114,111,114,0,0,0,77,82,66,95,84,84,95,69,88,67,69,80,84,73,79,78,0,0,0,0,115,113,114,116,0,0,0,0,74,115,79,98,106,101,99,116,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,62,0,0,0,117,110,116,105,108,0,0,0,60,61,62,0,75,101,114,110,101,108,0,0,105,110,99,108,117,100,101,63,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,84,121,112,101,69,114,114,111,114,0,0,0,72,97,115,104,0,0,0,0,45,60,0,0,116,114,117,101,0,0,0,0,60,61,62,0,83,116,97,110,100,97,114,100,69,114,114,111,114,0,0,0,114,101,115,99,117,101,0,0,117,110,107,110,111,119,110,32,108,104,115,32,37,100,10,0,101,108,115,105,102,0,0,0,115,101,108,102,0,0,0,0,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,115,112,101,99,105,102,105,101,114,32,37,83,0,0,0,102,97,108,115,101,0,0,0,69,110,117,109,101,114,97,98,108,101,0,0,110,111,116,0,42,0,0,0,116,104,101,110,0,0,0,0,101,110,100,0,101,110,115,117,114,101,0,0,103,101,116,117,116,99,0,0,105,110,105,116,105,97,108,105,122,101,0,0,61,126,0,0,117,110,110,117,109,98,101,114,101,100,40,37,83,41,32,109,105,120,101,100,32,119,105,116,104,32,110,117,109,98,101,114,101,100,0,0,77,82,66,95,84,84,95,82,65,78,71,69,0,0,0,0,108,111,103,49,48,0,0,0,103,108,111,98,97,108,0,0,101,113,108,63,0,0,0,0,58,0,0,0,97,98,115,0,114,101,115,112,111,110,100,95,116,111,95,109,105,115,115,105,110,103,63,0,104,97,115,95,118,97,108,117,101,63,0,0,110,105,108,0,101,108,115,101,0,0,0,0,105,110,115,112,101,99,116,0,69,78,68,0,0,0,0,0,105,110,115,112,101,99,116,0,98,114,101,97,107,0,0,0,99,97,110,110,111,116,32,115,101,116,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,0,0,0,0,101,97,99,104,0,0,0,0,95,95,69,78,68,95,95,0,73,110,118,97,108,105,100,32,99,104,97,114,32,96,92,120,37,48,50,88,39,32,105,110,32,101,120,112,114,101,115,115,105,111,110,0,37,83,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,96,64,64,37,99,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,0,116,111,95,97,114,121,0,0,96,64,37,99,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,0,0,105,110,99,111,109,112,108,101,116,101,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,115,121,110,116,97,120,0,0,0,0,105,110,99,111,109,112,108,101,116,101,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,115,121,110,116,97,120,0,84,121,112,101,69,114,114,111,114,0,0,0,105,110,99,111,109,112,108,101,116,101,32,103,108,111,98,97,108,32,118,97,114,105,97,98,108,101,32,115,121,110,116,97,120,0,0,0,103,101,116,108,111,99,97,108,0,0,0,0,69,110,117,109,101,114,97,98,108,101,0,0,109,101,109,98,101,114,115,0,118,97,108,32,116,111,111,32,98,105,103,0,61,61,61,0,77,82,66,95,84,84,95,83,84,82,73,78,71,0,0,0,108,111,103,50,0,0,0,0,67,111,109,112,97,114,97,98,108,101,0,0,119,105,110,100,111,119,0,0,105,110,115,112,101,99,116,0,35,60,0,0,113,117,111,0,37,83,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,0,0,104,97,115,95,107,101,121,63,0,0,0,0,117,110,116,101,114,109,105,110,97,116,101,100,32,113,117,111,116,101,100,32,115,116,114,105,110,103,32,109,101,101,116,115,32,101,110,100,32,111,102,32,102,105,108,101,0,0,0,0,78,97,109,101,69,114,114,111,114,0,0,0,117,110,107,110,111,119,110,32,116,121,112,101,32,111,102,32,37,115,116,114,105,110,103,0,108,101,110,103,116,104,0,0,109,101,115,115,97,103,101,0,102,108,111,97,116,32,37,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,117,110,101,120,112,101,99,116,101,100,32,98,114,101,97,107,0,0,0,0,99,111,114,114,117,112,116,101,100,32,102,108,111,97,116,32,118,97,108,117,101,32,37,115,0,0,0,0,116,114,97,105,108,105,110,103,32,96,37,99,39,32,105,110,32,110,117,109,98,101,114,0,105,110,115,112,101,99,116,0,48,0,0,0,65,114,114,97,121,0,0,0,73,110,118,97,108,105,100,32,111,99,116,97,108,32,100,105,103,105,116,0,110,117,109,101,114,105,99,32,108,105,116,101,114,97,108,32,119,105,116,104,111,117,116,32,100,105,103,105,116,115,0,0,110,111,32,46,60,100,105,103,105,116,62,32,102,108,111,97,116,105,110,103,32,108,105,116,101,114,97,108,32,97,110,121,109,111,114,101,59,32,112,117,116,32,48,32,98,101,102,111,114,101,32,100,111,116,0,0,124,124,0,0,103,101,116,103,109,0,0,0,84,105,109,101,0,0,0,0,91,93,61,0,107,101,121,37,83,32,110,111,116,32,102,111,117,110,100,0,61,61,0,0,77,82,66,95,84,84,95,72,65,83,72,0,108,111,103,0,103,101,116,95,114,111,111,116,95,111,98,106,101,99,116,0,116,111,95,115,0,0,0,0,117,110,107,110,111,119,110,32,116,121,112,101,32,37,83,32,40,37,83,32,103,105,118,101,110,41,0,0,47,0,0,0,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,37,83,32,110,111,116,32,100,101,102,105,110,101,100,0,0,0,0,101,109,112,116,121,63,0,0,96,38,39,32,105,110,116,101,114,112,114,101,116,101,100,32,97,115,32,97,114,103,117,109,101,110,116,32,112,114,101,102,105,120,0,0,97,108,108,95,115,121,109,98,111,108,115,0,38,38,0,0,115,105,122,101,0,0,0,0,109,114,98,95,114,101,97,108,108,111,99,0,116,111,95,115,0,0,0,0,105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,59,32,117,115,101,32,63,92,37,99,0,0,109,97,108,102,111,114,109,101,100,32,114,101,97,100,105,110,116,32,105,110,112,117,116,0,105,110,99,111,109,112,108,101,116,101,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,0,10,61,101,110,100,10,0,0,116,111,95,105,110,116,0,0,98,101,103,105,110,10,0,0,110,101,103,97,116,105,118,101,32,97,114,114,97,121,32,115,105,122,101,0,96,42,39,32,105,110,116,101,114,112,114,101,116,101,100,32,97,115,32,97,114,103,117,109,101,110,116,32,112,114,101,102,105,120,0,0,95,95,109,101,109,98,101,114,115,95,95,0,61,61,61,0,83,99,114,105,112,116,69,114,114,111,114,0,100,117,109,112,0,0,0,0,83,121,110,116,97,120,69,114,114,111,114,0,100,115,116,63,0,0,0,0,91,93,0,0,75,101,121,69,114,114,111,114,0,0,0,0,60,61,62,0,77,82,66,95,84,84,95,65,82,82,65,89,0,0,0,0,101,120,112,0,77,114,117,98,121,74,115,0,109,101,109,98,101,114,63,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,116,121,112,101,32,37,83,32,40,101,120,112,101,99,116,101,100,32,37,83,41,0,0,0,0,42,42,0,0,108,97,115,116,112,99,0,0,95,95,100,101,108,101,116,101,0,0,0,0,108,105,110,101,32,37,100,58,32,37,115,10,0,0,0,0,110,111,100,101,32,116,121,112,101,58,32,37,100,32,40,48,120,37,120,41,10,0,0,0,98,121,116,101,115,105,122,101,0,0,0,0,61,61,0,0,105,110,116,101,114,110,0,0,42,0,0,0,73,110,116,101,103,101,114,0,75,101,114,110,101,108,0,0,124,105,0,0,95,95,111,117,116,101,114,95,95,0,0,0,82,97,110,103,101,0,0,0,100,97,121,0,61,61,0,0,110,97,109,101,100,37,83,32,97,102,116,101,114,32,110,117,109,98,101,114,101,100,0,0,99,108,97,115,115,47,109,111,100,117,108,101,32,110,97,109,101,32,109,117,115,116,32,98,101,32,67,79,78,83,84,65,78,84,0,0,114,97,110,100,0,0,0,0,77,82,66,95,84,84,95,80,82,79,67,0,97,116,97,110,104,0,0,0,69,114,114,111,114,32,111,99,99,117,114,115,32,119,104,101,110,32,108,111,99,97,116,105,110,103,32,116,104,101,32,102,117,110,99,116,105,111,110,32,116,111,32,99,97,108,108,33,0,0,0,0,108,97,115,116,0,0,0,0,83,121,109,98,111,108,0,0,45,64,0,0,0,0,0,0,100,101,102,97,117,108,116,95,112,114,111,99,61,0,0,0,58,37,115,10,0,0,0,0,43,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,108,97,109,98,100,97,63,0,117,110,100,101,102,95,109,101,116,104,111,100,0,0,0,0,32,37,115,0,111,0,0,0,78,79,68,69,95,85,78,68,69,70,0,0,97,0,0,0,102,108,111,97,116,32,116,111,111,32,98,105,103,32,102,111,114,32,105,110,116,0,0,0,78,79,68,69,95,65,76,73,65,83,32,37,115,32,37,115,58,10,0,0,101,120,112,101,99,116,101,100,32,70,105,120,110,117,109,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,0,0,0,0,124,72,0,0,73,110,116,101,103,101,114,0,99,116,105,109,101,0,0,0,110,101,119,0,110,97,109,101,100,37,83,32,97,102,116,101,114,32,117,110,110,117,109,98,101,114,101,100,40,37,83,41,0,0,0,0,100,121,110,97,109,105,99,32,99,111,110,115,116,97,110,116,32,97,115,115,105,103,110,109,101,110,116,0,77,82,66,95,84,84,95,83,67,76,65,83,83,0,0,0,97,99,111,115,104,0,0,0,99,97,108,108,95,112,114,111,99,0,0,0,115,116,97,99,107,32,108,101,118,101,108,32,116,111,111,32,100,101,101,112,46,32,40,108,105,109,105,116,61,40,48,120,52,48,48,48,48,32,45,32,49,50,56,41,41,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,70,105,120,110,117,109,0,0,43,64,0,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,100,101,102,97,117,108,116,95,112,114,111,99,0,0,0,0,78,79,68,69,95,83,89,77,32,58,37,115,10,0,0,0,111,112,116,58,32,37,115,10,0,0,0,0,67,111,109,112,97,114,97,98,108,101,0,0,97,114,101,110,97,32,111,118,101,114,102,108,111,119,32,101,114,114,111,114,0,0,0,0,116,97,105,108,58,32,37,115,10,0,0,0,69,120,99,101,112,116,105,111,110,0,0,0,83,116,97,114,116,105,110,103,32,112,97,114,115,101,10,0,77,97,116,104,0,0,0,0,97,108,105,97,115,95,109,101,116,104,111,100,0,0,0,0,78,79,68,69,95,82,69,71,88,32,47,37,115,47,37,115,10,0,0,0,82,97,110,103,101,69,114,114,111,114,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,78,79,68,69,95,88,83,84,82,32,34,37,115,34,32,108,101,110,32,37,100,10,0,0,78,79,68,69,95,83,84,82,32,34,37,115,34,32,108,101,110,32,37,100,10,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,97,115,99,116,105,109,101,0,111,111,0,0,118,97,108,117,101,115,95,97,116,0,0,0,110,97,109,101,37,83,32,97,102,116,101,114,32,60,37,83,62,0,0,0,33,0,0,0,77,82,66,95,84,84,95,73,67,76,65,83,83,0,0,0,97,115,105,110,104,0,0,0,70,97,105,108,101,100,32,116,111,32,99,111,110,118,101,114,116,32,115,121,109,98,111,108,32,116,111,32,115,116,114,105,110,103,33,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,37,83,41,0,0,0,105,110,99,108,117,100,101,63,0,0,0,0,110,105,108,0,67,111,109,112,97,114,97,98,108,101,0,0,124,111,111,0,100,101,102,97,117,108,116,61,0,0,0,0,78,79,68,69,95,70,76,79,65,84,32,37,115,10,0,0,78,79,68,69,95,73,78,84,32,37,115,32,98,97,115,101,32,37,100,10,0,0,0,0,34,0,0,0,105,0,0,0,70,105,98,101,114,0,0,0,101,118,97,108,0,0,0,0,99,111,109,112,105,108,101,0,78,79,68,69,95,65,82,71,32,37,115,10,0,0,0,0,78,79,68,69,95,78,84,72,95,82,69,70,58,32,36,37,100,10,0,0,116,111,95,102,0,0,0,0,78,79,68,69,95,66,65,67,75,95,82,69,70,58,32,36,37,99,10,0,101,120,112,101,99,116,101,100,32,70,105,120,110,117,109,0,116,114,121,95,99,111,110,118,101,114,116,0,78,79,68,69,95,67,79,78,83,84,32,37,115,10,0,0,78,79,68,69,95,67,86,65,82,32,37,115,10,0,0,0,78,79,68,69,95,73,86,65,82,32,37,115,10,0,0,0,105,110,115,112,101,99,116,0,111,102,102,115,101,116,32,37,83,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,115,116,114,117,99,116,40,115,105,122,101,58,37,83,41,0,119,105,100,116,104,32,97,102,116,101,114,32,112,114,101,99,105,115,105,111,110,0,0,0,36,109,114,98,95,103,95,114,97,110,100,95,115,101,101,100,0,0,0,0,99,111,110,115,116,97,110,116,32,114,101,45,97,115,115,105,103,110,109,101,110,116,0,0,62,0,0,0,77,82,66,95,84,84,95,77,79,68,85,76,69,0,0,0,116,97,110,104,0,0,0,0,116,111,95,115,0,0,0,0,116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,70,105,98,101,114,32,102,114,111,109,32,67,32,100,101,102,105,110,101,100,32,109,101,116,104,111,100,0,39,37,83,39,58,32,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,37,83,41,0,102,105,114,115,116,0,0,0,37,83,32,99,97,110,110,111,116,32,98,101,32,99,111,110,118,101,114,116,101,100,32,116,111,32,37,83,32,98,121,32,35,37,83,0,78,79,68,69,95,71,86,65,82,32,37,115,10,0,0,0,82,97,110,103,101,0,0,0,78,117,109,101,114,105,99,0,61,0,0,0,124,98,0,0,100,101,102,97,117,108,116,0,97,114,103,117,109,101,110,116,32,116,111,111,32,98,105,103,0,0,0,0,78,79,68,69,95,76,86,65,82,32,37,115,10,0,0,0,110,101,103,97,116,105,118,101,32,115,116,114,105,110,103,32,115,105,122,101,32,40,111,114,32,115,105,122,101,32,116,111,111,32,98,105,103,41,0,0,98,0,0,0,82,101,103,101,120,112,0,0,70,108,111,97,116,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,61,61,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,116,111,95,115,0,0,0,0,111,102,102,115,101,116,32,37,83,32,116,111,111,32,115,109,97,108,108,32,102,111,114,32,115,116,114,117,99,116,40,115,105,122,101,58,37,83,41,0,119,105,100,116,104,32,103,105,118,101,110,32,116,119,105,99,101,0,0,0,109,116,95,115,116,97,116,101,32,103,101,116,32,102,114,111,109,32,109,114,98,95,105,118,95,103,101,116,32,102,97,105,108,101,100,0,91,93,0,0,32,40,108,97,109,98,100,97,41,0,0,0,77,82,66,95,84,84,95,67,76,65,83,83,0,0,0,0,99,111,115,104,0,0,0,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,33,0,116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,70,105,98,101,114,32,111,98,106,101,99,116,32,119,105,116,104,111,117,116,32,97,32,98,108,111,99,107,0,0,0,0,76,111,99,97,108,74,117,109,112,69,114,114,111,114,0,0,101,120,99,108,117,100,101,95,101,110,100,63,0,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,111,112,61,39,37,115,39,32,40,37,100,41,10,0,0,0,105,110,118,97,108,105,100,32,114,97,100,105,120,32,37,83,0,0,0,0,44,32,0,0,110,111,0,0,99,108,101,97,114,0,0,0,116,111,95,115,0,0,0,0,115,116,114,105,110,103,32,102,111,114,32,70,108,111,97,116,32,99,111,110,116,97,105,110,115,32,110,117,108,108,32,98,121,116,101,0,103,101,110,101,114,97,116,105,111,110,97,108,95,109,111,100,101,0,0,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,116,121,112,101,32,37,83,32,40,101,120,112,101,99,116,101,100,32,37,83,41,0,0,0,0,101,120,99,101,112,116,105,111,110,32,111,98,106,101,99,116,32,101,120,112,101,99,116,101,100,0,0,0,99,105,105,100,120,0,0,0,67,111,109,112,97,114,97,98,108,101,0,0,96,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,103,101,116,98,121,116,101,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,115,112,114,105,110,116,102,0,83,116,114,105,110,103,32,99,97,110,39,116,32,98,101,32,99,111,101,114,99,101,100,32,105,110,116,111,32,70,108,111,97,116,0,0,99,111,118,101,114,63,0,0,115,114,97,110,100,0,0,0,115,111,117,114,99,101,95,108,111,99,97,116,105,111,110,0,95,95,112,114,105,110,116,115,116,114,95,95,0,0,0,0,105,42,0,0,82,97,110,103,101,69,114,114,111,114,0,0,84,79,84,65,76,0,0,0,99,104,114,0,83,116,97,99,107,32,115,105,122,101,32,105,110,99,114,101,97,115,101,100,32,116,111,32,37,108,117,10,0,0,0,0,80,73,0,0,71,105,118,101,110,32,116,121,112,101,32,37,100,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,74,97,118,97,83,99,114,105,112,116,33,10,0,0,42,0,0,0,105,110,118,97,108,105,100,32,115,116,114,105,110,103,32,102,111,114,32,102,108,111,97,116,40,37,83,41,0,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,115,0,0,0,97,115,115,111,99,0,0,0,111,111,124,98,0,0,0,0,84,111,111,32,108,111,110,103,32,97,114,103,117,109,101,110,116,115,46,32,40,108,105,109,105,116,61,49,54,41,0,0,78,105,108,67,108,97,115,115,0,0,0,0,45,0,0,0,110,111,32,109,101,109,98,101,114,32,39,37,83,39,32,105,110,32,115,116,114,117,99,116,0,0,0,0,105,110,118,97,108,105,100,32,105,110,100,101,120,32,45,32,37,83,36,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,58,0,0,0,69,78,68,32,110,111,116,32,115,117,112,111,114,116,101,100,0,0,0,0,84,111,111,32,108,97,114,103,101,32,109,97,120,95,100,105,103,105,116,46,0,0,0,0,77,82,66,95,84,84,95,79,66,74,69,67,84,0,0,0,115,105,110,104,0,0,0,0,116,111,74,115,79,98,106,101,99,116,0,0,38,0,0,0,79,80,95,68,69,66,85,71,32,37,100,32,37,100,32,37,100,10,0,0,101,97,99,104,0,0,0,0,73,110,116,101,103,101,114,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,32,0,0,0,110,0,0,0,91,93,61,0,95,95,97,116,116,97,99,104,101,100,95,95,0,0,0,0,99,97,108,108,0,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,110,111,116,32,97,32,112,114,111,99,0,0,103,101,110,101,114,97,116,105,111,110,97,108,95,109,111,100,101,61,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,48,46,46,51,41,0,75,101,114,110,101,108,0,0,116,111,95,115,0,0,0,0,58,58,37,115,10,0,0,0,83,116,114,105,110,103,32,99,111,110,116,97,105,110,115,32,78,85,76,0,105,110,100,101,120,32,105,115,32,111,117,116,32,111,102,32,97,114,114,97,121,0,0,0,105,110,118,97,108,105,100,32,115,116,114,105,110,103,32,102,111,114,32,110,117,109,98,101,114,40,37,83,41,0,0,0,99,111,100,101,103,101,110,32,101,114,114,111,114,58,32,37,115,10,0,0,43,0,0,0,115,116,114,117,99,116,32,115,105,122,101,32,109,105,115,109,97,116,99,104,0,0,0,0,37,83,32,105,115,32,110,111,116,32,97,32,99,108,97,115,115,47,109,111,100,117,108,101,0,0,0,0,105,0,0,0,110,117,109,98,101,114,101,100,40,37,83,41,32,97,102,116,101,114,32,110,97,109,101,100,0,0,0,0,36,109,114,98,95,105,95,109,116,95,115,116,97,116,101,0,45,0,0,0,101,108,115,101,32,119,105,116,104,111,117,116,32,114,101,115,99,117,101,32,105,115,32,117,115,101,108,101,115,115,0,0,77,82,66,95,84,84,95,86,79,73,68,80,0,0,0,0,97,116,97,110,50,0,0,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,104,97,115,104,33,0,0,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,70,105,98,101,114,0,61,61,61,0,84,121,112,101,69,114,114,111,114,0,0,0,70,97,108,115,101,67,108,97,115,115,0,0,73,110,102,105,110,105,116,121,0,0,0,0,105,110,115,116,97,110,99,101,95,101,118,97,108,32,119,105,116,104,32,115,116,114,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,99,111,110,115,116,97,110,116,32,108,111,111,107,45,117,112,32,102,111,114,32,110,111,110,32,99,108,97,115,115,47,109,111,100,117,108,101,0,0,0,91,93,0,0,109,101,116,104,111,100,61,39,37,115,39,32,40,37,100,41,10,0,0,0,99,111,100,101,103,101,110,32,101,114,114,111,114,58,37,115,58,37,100,58,32,37,115,10,0,0,0,0,116,111,95,115,116,114,0,0,105,102,110,111,110,101,0,0,111,0,0,0,76,73,78,69,0,0,0,0,73,82,69,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,8,16,32,64,128,1,2,4,8,16,32,64,128,1,2,4,8,16,32,64,128,1,2,4,8,16,32,64,128,1,2,4,8,16,32,64,128,1,2,4,8,16,32,64,128])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
}
if (!awaitingMemoryInitializer) runPostSets();
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  Module["_memcpy"] = _memcpy;var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  Module["_memcmp"] = _memcmp;
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOPNOTSUPP:45,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  var __impure_ptr=allocate(1, "i32*", ALLOC_STATIC);var FS={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.init();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureRoot();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === 10) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        // TODO: put these low in memory like we used to assert on: assert(Math.max(_stdin, _stdout, _stderr) < 15000); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_NORMAL) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output(10);
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output(10);
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[(((buf)+(i))|0)];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[(((buf)+(i))|0)]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }var _putc=_fputc;
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  Module["_strlen"] = _strlen;
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }
  function _islower(chr) {
      return chr >= 97 && chr <= 122;
    }
  function _isupper(chr) {
      return chr >= 65 && chr <= 90;
    }
  function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == 45) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
      // Apply sign.
      ret *= multiplier;
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
      if (bits == 64) {
        return ((asm["setTempRet0"](Math.min(Math.floor((ret)/(+(4294967296))), (+(4294967295)))>>>0),ret>>>0)|0);
      }
      return ret;
    }function _strtoul(str, endptr, base) {
      return __parseInt(str, endptr, base, 0, 4294967295, 32, true);  // ULONG_MAX.
    }
  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }
  function _isprint(chr) {
      return 0x1F < chr && chr < 0x7F;
    }
  function _toupper(chr) {
      if (chr >= 97 && chr <= 122) {
        return chr - 97 + 65;
      } else {
        return chr;
      }
    }
  Module["_tolower"] = _tolower;
  function _isalpha(chr) {
      return (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }
  function _isalnum(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }
  var _llvm_va_start=undefined;
  function _llvm_va_end() {}
  function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    } 
  Module["_saveSetjmp"] = _saveSetjmp;
  Module["_testSetjmp"] = _testSetjmp;var _setjmp=undefined;
  function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (flagAlwaysSigned) {
                if (currArg < 0) {
                  prefix = '-' + prefix;
                } else {
                  prefix = '+' + prefix;
                }
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (flagAlwaysSigned && currArg >= 0) {
                  argText = '+' + argText;
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }
  function ___errno_location() {
      return ___errno_state;
    }var ___errno=___errno_location;
  function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }
  function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }
  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      return Number(FS.streams[stream] && FS.streams[stream].eof);
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[((buf++)|0)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        if (contents.subarray) { // typed array
          HEAPU8.set(contents.subarray(offset, offset+size), buf);
        } else
        if (contents.slice) { // normal array
          for (var i = 0; i < size; i++) {
            HEAP8[(((buf)+(i))|0)]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[(((buf)+(i))|0)]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[((buf++)|0)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[(((buf)+(i))|0)]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!FS.streams[stream]) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }
  Module["_memset"] = _memset;var _llvm_memset_p0i8_i32=_memset;
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      function ExitStatus() {
        this.name = "ExitStatus";
        this.message = "Program terminated with exit(" + status + ")";
        this.status = status;
        Module.print('Exit Status: ' + status);
      };
      ExitStatus.prototype = new Error();
      ExitStatus.prototype.constructor = ExitStatus;
      exitRuntime();
      ABORT = true;
      throw new ExitStatus();
    }function _exit(status) {
      __exit(status);
    }
  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }
  function ___fpclassifyf(x) {
      if (isNaN(x)) return 0;
      if (!isFinite(x)) return 1;
      if (x == 0) return 2;
      // FP_SUBNORMAL..?
      return 4;
    }var ___fpclassifyd=___fpclassifyf;
  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }
  var _llvm_pow_f64=Math.pow;
  var _floor=Math.floor;
  var _ceil=Math.ceil;
  function _fmod(x, y) {
      return x % y;
    }
  function ___js_global_object() {
      return (typeof window === 'object') ? (window) : (global);
    }function ___js_fetch_object(mrb, handle) {
      var obj = ___js_global_object()["MRB_JS_OBJ_CACHE"];
      if (obj && (typeof obj === 'object') &&
          (typeof handle === 'number') && (handle > 0)) {
        return obj[handle];
      }
    }
  function ___js_add_object(mrb, obj) {
      var global_object = ___js_global_object();
      global_object["MRB_JS_OBJ_CACHE"] = global_object["MRB_JS_OBJ_CACHE"] ||
        {"_mruby_js_next_id": 1, "_mruby_js_recycled_ids": []};
      var cache_object = global_object["MRB_JS_OBJ_CACHE"];
      var object_handle = -1;
      if (!("_mruby_js_id" in obj)) {
        // create new cache
        var new_id;
        if (cache_object["_mruby_js_recycled_ids"].length > 0) {
          // use recycled ids
          new_id = cache_object["_mruby_js_recycled_ids"].pop();
        } else {
          new_id = cache_object["_mruby_js_next_id"];
          cache_object["_mruby_js_next_id"] = new_id + 1;
        }
        cache_object[new_id] = obj;
        obj["_mruby_js_id"] = new_id;
        obj["_mruby_js_count"] = 1;
        object_handle = new_id;
      } else {
        // existing cache, only updates count
        obj["_mruby_js_count"] = obj["_mruby_js_count"] + 1;
        object_handle = obj["_mruby_js_id"];
      }
      return object_handle;
    }
  function ___js_is_floating_number(val) {
      var fixed = Math.round(val);
      var diff = Math.abs(fixed - val);
      var EPSILON = 1e-5;
      return (diff >= EPSILON);
    }
  function ___js_is_array(val) {
      return (typeof val !== 'undefined' &&
              val && val.constructor === Array);
    }function ___js_fill_return_arg(mrb, ret_p, val, parent_p) {
      var stack = 0;
      var RETURN_HANDLERS = {
        'object': function () {
          var handle = ___js_add_object(mrb, val);
          if (___js_is_array(val)) {
            _mruby_js_set_array_handle(mrb, ret_p, handle);
          } else {
            _mruby_js_set_object_handle(mrb, ret_p, handle);
          }
        },
        'function': function () {
          var handle = ___js_add_object(mrb, val);
          _mruby_js_set_function_handle(mrb, ret_p, handle, parent_p);
        },
        'number': function () {
          if (___js_is_floating_number(val)) {
            _mruby_js_set_float(mrb, ret_p, val);
          } else {
            _mruby_js_set_integer(mrb, ret_p, val);
          }
        },
        'boolean': function () {
          _mruby_js_set_boolean(mrb, ret_p, (val) ? (1) : (0));
        },
        'undefined': function () {
          _mruby_js_set_nil(mrb, ret_p);
        },
        'string': function () {
          if (!stack) stack = Runtime.stackSave();
          var ret = Runtime.stackAlloc(val.length + 1);
          writeStringToMemory(val, ret);
          _mruby_js_set_string(mrb, ret_p, ret);
        }
      };
      if (ret_p) {
        var val_type = typeof val;
        if (val_type !== null) {
          RETURN_HANDLERS[val_type]();
        }
      }
      if (stack) Runtime.stackRestore(stack);
    }function ___js_fetch_argument(mrb, argv_p, idx) {
      var TYPE_HANDLERS = {
        0: function() { return false; }, // MRB_TT_FALSE
        1: function() { return true; },  // MRB_TT_TRUE
        2: _mruby_js_get_integer,        // MRB_TT_FIXNUM
        3: _mruby_js_get_float,          // MRB_TT_FLOAT
        4: function() {
          var handle = _mruby_js_get_object_handle.apply(null, arguments);
          return ___js_fetch_object(mrb, handle);
        },                        // MRB_TT_OBJECT
        5: function() {
          var str_len = _mruby_js_get_string_len.apply(null, arguments);
          var str_p = _mruby_js_get_string_ptr.apply(null, arguments);
          return Module['Pointer_stringify'](str_p, str_len);
        },                        // MRB_TT_STRING
        6: function() { return undefined; }, // nil value
        7: function() {
          var proc = _mruby_js_get_proc.apply(null, arguments);
          return function() {
            // Callback arguments
            var cargc = arguments.length;
            var cargv = 0;
            if (cargc > 0) {
              var i;
              cargv = _mruby_js_invoke_alloc_argv(mrb, cargc);
              for (i = 0; i < cargc; i++) {
                ___js_fill_return_arg(mrb,
                                      _mruby_js_invoke_fetch_argp(mrb, cargv, i),
                                      arguments[i], 0);
              }
            }
            _mruby_js_invoke_proc(mrb, proc, cargc, cargv);
            if (cargc > 0) {
              _mruby_js_invoke_release_argv(mrb, cargv);
            }
          };
        },                        // MRB_TT_PROC
        8: function() {
          var handle = _mruby_js_get_array_handle.apply(null, arguments);
          return ___js_fetch_object(mrb, handle);
        },                        // MRB_TT_ARRAY
        9: function() {
          var handle = _mruby_js_get_hash_handle.apply(null, arguments);
          return ___js_fetch_object(mrb, handle);
        },                        // MRB_TT_HASH
        10: function() {
          _mruby_js_convert_symbol_to_string.apply(null, arguments);
          return TYPE_HANDLERS[5].apply(null, arguments);
        }                         // MRB_TT_SYMBOL
      };
      var handler = TYPE_HANDLERS[_mruby_js_argument_type(mrb, argv_p, idx)];
      return handler(mrb, argv_p, idx);
    }function _js_create_array(mrb, arr_p, len, ret_p) {
      var ret = [], i;
      if ((arr_p !== 0) && (len !== -1)) {
        for (i = 0; i < len; i++) {
          ret.push(___js_fetch_argument(mrb, arr_p, i));
        }
      }
      ___js_fill_return_arg(mrb, ret_p, ret, 0);
    }
  function ___js_invoke_using_new(func, args) {
      // This function uses "new" operator to call JavaScript functions.
      // It is implemented in the following way for two reasons:
      // 1. Function.prototype.bind only exists in ECMAScript 5
      // 2. Even if we only work with ECMAScript 5 compatible browsers,
      // my test shows that we cannot use this method to create ArrayBuffer
      // (at least in Chrome).
      // So we will use the old-fashioned way to do this:)
      switch(args.length) {
        case 0:
          return new func();
        case 1:
          return new func(args[0]);
        case 2:
          return new func(args[0], args[1]);
        case 3:
          return new func(args[0], args[1], args[2]);
        case 4:
          return new func(args[0], args[1], args[2], args[3]);
        case 5:
          return new func(args[0], args[1], args[2], args[3], args[4]);
        case 6:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5]);
        case 7:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5],
                          args[6]);
        case 8:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5],
                          args[6], args[7]);
        case 9:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5],
                          args[6], args[7], args[8]);
        case 10:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5],
                          args[6], args[7], args[8], args[9]);
        default:
          assert(false, "We do not support that many arguments now-_-");
      }
    }function _js_invoke(mrb, this_value_p,
                         func_handle,
                         argv_p, argc,
                         ret_p, type) {
      var func = ___js_fetch_object(mrb, func_handle);
      if (typeof func !== 'function') {
        _mruby_js_name_error(mrb);
      }
      var this_value = ___js_fetch_argument(mrb, this_value_p, 0);
      if (type !== 2) {
        if (this_value === ___js_global_object()) {
          // ECMAScript 5 compatible calling convention
          this_value = undefined;
        }
      }
      var i = 0, args = [], type_handler;
      for (i = 0; i < argc; i++) {
        args.push(___js_fetch_argument(mrb, argv_p, i));
      }
      var val;
      if (type === 1) {
        val = ___js_invoke_using_new(func, args);
      } else {
        val = func.apply(this_value, args);
      }
      // Returned value does not have a parent
      ___js_fill_return_arg(mrb, ret_p, val, 0);
    }
  function _js_create_empty_object(mrb, ret_p) {
      ___js_fill_return_arg(mrb, ret_p, {}, 0);
    }
  function _js_set_field(mrb, obj_p, field_p, val_p) {
      var handle = _mruby_js_get_object_handle(mrb, obj_p, 0);
      var obj = ___js_fetch_object(mrb, handle);
      var field = ___js_fetch_argument(mrb, field_p, 0);
      var val = ___js_fetch_argument(mrb, val_p, 0);
      obj[field] = val;
    }
  function _js_get_field(mrb, obj_p, field_p, ret_p) {
      var handle = _mruby_js_get_object_handle(mrb, obj_p, 0);
      var obj = ___js_fetch_object(mrb, handle);
      var val = obj[___js_fetch_argument(mrb, field_p, 0)];
      ___js_fill_return_arg(mrb, ret_p, val, obj_p);
    }
  function _js_release_object(mrb, handle) {
      var cache_object = ___js_global_object()["MRB_JS_OBJ_CACHE"];
      if (cache_object) {
        var rel_object = cache_object[handle];
        if (rel_object && ("_mruby_js_id" in rel_object)) {
          rel_object["_mruby_js_count"] = rel_object["_mruby_js_count"] - 1;
          if (rel_object["_mruby_js_count"] === 0) {
            // reference count reaches 0, release object
            var next_id = cache_object["_mruby_js_next_id"];
            delete cache_object[handle];
            if (handle === (next_id - 1)) {
              cache_object["_mruby_js_next_id"] = next_id - 1;
            } else {
              cache_object["_mruby_js_recycled_ids"].push(handle);
            }
            delete rel_object["_mruby_js_id"];
            delete rel_object["_mruby_js_count"];
            // Reset the next id when we have all recycled ids. I wonder
            // if a slice loop which can recycle partial ids is needed here.
            if (cache_object["_mruby_js_recycled_ids"].length ===
                (cache_object["_mruby_js_next_id"] - 1)) {
              cache_object["_mruby_js_next_id"] = 1;
              cache_object["_mruby_js_recycled_ids"] = [];
            }
          }
        }
      }
    }
  function _js_get_root_object(mrb, ret_p) {
      // Global object must be of object type, and has no parent.
      ___js_fill_return_arg(mrb, ret_p, ___js_global_object(), 0);
    }
  function _erfc(x) {
      var MATH_TOLERANCE = 1E-12;
      var ONE_SQRTPI = 0.564189583547756287;
      var a = 1;
      var b = x;
      var c = x;
      var d = x * x + 0.5;
      var n = 1.0;
      var q2 = b / d;
      var q1, t;
      if (Math.abs(x) < 2.2) {
        return 1.0 - _erf(x);
      }
      if (x < 0) {
        return 2.0 - _erfc(-x);
      }
      do {
        t = a * n + b * x;
        a = b;
        b = t;
        t = c * n + d * x;
        c = d;
        d = t;
        n += 0.5;
        q1 = q2;
        q2 = b / d;
      } while (Math.abs(q1 - q2) / q2 > MATH_TOLERANCE);
      return (ONE_SQRTPI * Math.exp(- x * x) * q2);
    }
  function _erf(x) {
      var MATH_TOLERANCE = 1E-12;
      var TWO_SQRTPI = 1.128379167095512574;
      var sum = x;
      var term = x;
      var xsqr = x*x;
      var j = 1;
      if (Math.abs(x) > 2.2) {
        return 1.0 - _erfc(x);
      }
      do {
        term *= xsqr / j;
        sum -= term / (2 * j + 1);
        ++j;
        term *= xsqr / j;
        sum += term / (2 * j + 1);
        ++j;
      } while (Math.abs(term / sum) > MATH_TOLERANCE);
      return (TWO_SQRTPI * sum);
    }
  function _hypot(a, b) {
       return Math.sqrt(a*a + b*b);
    }
  function _ldexp(x, exp_) {
      return x * Math.pow(2, exp_);
    }
  function _frexp(x, exp_addr) {
      var sig = 0, exp_ = 0;
      if (x !== 0) {
        var raw_exp = Math.log(x)/Math.log(2);
        exp_ = Math.ceil(raw_exp);
        if (exp_ === raw_exp) exp_ += 1;
        sig = x/Math.pow(2, exp_);
      }
      HEAP32[((exp_addr)>>2)]=exp_
      return sig;
    }
  function _cbrt(x) {
      return Math.pow(x, 1/3);
    }
  var _sqrt=Math.sqrt;
  var _log=Math.log;
  var _exp=Math.exp;
  function _atanh(x) {
      return Math.log((1 + x) / (1 - x)) / 2;
    }
  function _acosh(x) {
      return Math.log(x * 1 + Math.sqrt(x * x - 1));
    }
  function _asinh(x) {
      return Math.log(x + Math.sqrt(x * x + 1));
    }
  function _sinh(x) {
      var p = Math.pow(Math.E, x);
      return (p - (1 / p)) / 2;
    }
  function _cosh(x) {
      var p = Math.pow(Math.E, x);
      return (p + (1 / p)) / 2;
    }function _tanh(x) {
      return _sinh(x) / _cosh(x);
    }
  var _atan2=Math.atan2;
  var _atan=Math.atan;
  var _acos=Math.acos;
  var _asin=Math.asin;
  var _tan=Math.tan;
  var _cos=Math.cos;
  var _sin=Math.sin;
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  var __tzname=allocate(8, "i32*", ALLOC_STATIC);
  var __daylight=allocate(1, "i32*", ALLOC_STATIC);
  var __timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
      HEAP32[((__timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((__tzname)>>2)]=winterNamePtr
      HEAP32[(((__tzname)+(4))>>2)]=summerNamePtr
    }function _mktime(tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var year = HEAP32[(((tmPtr)+(offsets.tm_year))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_min))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=new Date(timestamp).getDay()
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      return timestamp;
    }
  var ___tm_timezones={};function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      var offsets = ___tm_struct_layout;
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getUTCSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getUTCMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getUTCHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getUTCDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getUTCMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getUTCFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getUTCDay()
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=0
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=0
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.round((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      var timezone = "GMT";
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
      return tmPtr;
    }
  function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getDay()
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=start.getTimezoneOffset() * 60
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=dst
      var timezone = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | date.toString().match(/\(([A-Z]+)\)/)[1];
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
      return tmPtr;
    }
  function _gettimeofday(ptr) {
      // %struct.timeval = type { i32, i32 }
      var now = Date.now();
      HEAP32[((ptr)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((ptr)+(4))>>2)]=Math.floor((now-1000*Math.floor(now/1000))*1000); // microseconds
      return 0;
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
        case 10: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function _llvm_uadd_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return ((asm["setTempRet0"](x+y > 4294967295),(x+y)>>>0)|0);
    }
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (Browser.initted) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(name.lastIndexOf('.')+1)];
        }
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/.exec(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x = event.pageX - (window.scrollX + rect.left);
          var y = event.pageY - (window.scrollY + rect.top);
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        Browser.updateResizeListeners();
      }};
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var Math_min = Math.min;
function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var _stdout=env._stdout|0;
  var _stderr=env._stderr|0;
  var NaN=+env.NaN;
  var Infinity=+env.Infinity;
  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var copyTempDouble=env.copyTempDouble;
  var copyTempFloat=env.copyTempFloat;
  var Math_min=env.min;
  var invoke_ii=env.invoke_ii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viiii=env.invoke_viiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var _strtoul=env._strtoul;
  var _acosh=env._acosh;
  var _isxdigit=env._isxdigit;
  var _strtol=env._strtol;
  var _fputc=env._fputc;
  var _fwrite=env._fwrite;
  var _frexp=env._frexp;
  var _mktime=env._mktime;
  var _cbrt=env._cbrt;
  var _isspace=env._isspace;
  var _read=env._read;
  var __exit=env.__exit;
  var _js_release_object=env._js_release_object;
  var _ceil=env._ceil;
  var ___js_is_array=env.___js_is_array;
  var _js_get_root_object=env._js_get_root_object;
  var _fmod=env._fmod;
  var _strcmp=env._strcmp;
  var _memchr=env._memchr;
  var _llvm_va_end=env._llvm_va_end;
  var _snprintf=env._snprintf;
  var _fgetc=env._fgetc;
  var _cosh=env._cosh;
  var _hypot=env._hypot;
  var _asin=env._asin;
  var ___setErrNo=env.___setErrNo;
  var ___js_fetch_argument=env.___js_fetch_argument;
  var _js_invoke=env._js_invoke;
  var _exit=env._exit;
  var _isupper=env._isupper;
  var _llvm_uadd_with_overflow_i32=env._llvm_uadd_with_overflow_i32;
  var _localtime_r=env._localtime_r;
  var _sinh=env._sinh;
  var _js_create_empty_object=env._js_create_empty_object;
  var _cos=env._cos;
  var _putchar=env._putchar;
  var _puts=env._puts;
  var _erfc=env._erfc;
  var _islower=env._islower;
  var _acos=env._acos;
  var ___js_fill_return_arg=env.___js_fill_return_arg;
  var ___js_fetch_object=env.___js_fetch_object;
  var _strncmp=env._strncmp;
  var _tzset=env._tzset;
  var _js_create_array=env._js_create_array;
  var _ldexp=env._ldexp;
  var _js_set_field=env._js_set_field;
  var _isprint=env._isprint;
  var _toupper=env._toupper;
  var _printf=env._printf;
  var _pread=env._pread;
  var _log=env._log;
  var _isalnum=env._isalnum;
  var _fputs=env._fputs;
  var _isalpha=env._isalpha;
  var _log10=env._log10;
  var ___js_global_object=env.___js_global_object;
  var _asinh=env._asinh;
  var __reallyNegative=env.__reallyNegative;
  var __formatString=env.__formatString;
  var _gettimeofday=env._gettimeofday;
  var _atoi=env._atoi;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _sbrk=env._sbrk;
  var _tanh=env._tanh;
  var ___errno_location=env.___errno_location;
  var _erf=env._erf;
  var __parseInt=env.__parseInt;
  var _gmtime_r=env._gmtime_r;
  var _sysconf=env._sysconf;
  var _abort=env._abort;
  var _fprintf=env._fprintf;
  var ___fpclassifyf=env.___fpclassifyf;
  var _tan=env._tan;
  var _feof=env._feof;
  var _js_get_field=env._js_get_field;
  var _floor=env._floor;
  var _atanh=env._atanh;
  var _sqrt=env._sqrt;
  var _write=env._write;
  var _sin=env._sin;
  var _longjmp=env._longjmp;
  var _atan=env._atan;
  var ___js_add_object=env.___js_add_object;
  var ___js_invoke_using_new=env.___js_invoke_using_new;
  var _pwrite=env._pwrite;
  var ___js_is_floating_number=env.___js_is_floating_number;
  var _atan2=env._atan2;
  var _exp=env._exp;
  var _time=env._time;
// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size | 0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = STACKTOP + size | 0;
  STACKTOP = STACKTOP + 3 >> 2 << 2;
  return ret | 0;
}
function stackSave() {
  return STACKTOP | 0;
}
function stackRestore(top) {
  top = top | 0;
  STACKTOP = top;
}
function setThrew(threw, value) {
  threw = threw | 0;
  value = value | 0;
  if ((__THREW__ | 0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function setTempRet0(value) {
  value = value | 0;
  tempRet0 = value;
}
function setTempRet1(value) {
  value = value | 0;
  tempRet1 = value;
}
function setTempRet2(value) {
  value = value | 0;
  tempRet2 = value;
}
function setTempRet3(value) {
  value = value | 0;
  tempRet3 = value;
}
function setTempRet4(value) {
  value = value | 0;
  tempRet4 = value;
}
function setTempRet5(value) {
  value = value | 0;
  tempRet5 = value;
}
function setTempRet6(value) {
  value = value | 0;
  tempRet6 = value;
}
function setTempRet7(value) {
  value = value | 0;
  tempRet7 = value;
}
function setTempRet8(value) {
  value = value | 0;
  tempRet8 = value;
}
function setTempRet9(value) {
  value = value | 0;
  tempRet9 = value;
}
function _mrb_obj_value($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _bin_to_uint32($bin) {
  $bin = $bin | 0;
  return (HEAPU8[$bin + 1 | 0] | 0) << 16 | (HEAPU8[$bin] | 0) << 24 | (HEAPU8[$bin + 2 | 0] | 0) << 8 | (HEAPU8[$bin + 3 | 0] | 0) | 0;
}
function _mrb_nil_value($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _bin_to_uint16($bin) {
  $bin = $bin | 0;
  return (HEAPU8[$bin] | 0) << 8 | (HEAPU8[$bin + 1 | 0] | 0) | 0;
}
function _mrb_float_value($agg_result, $f) {
  $agg_result = $agg_result | 0;
  $f = +$f;
  var $v_sroa_0_0__idx = 0;
  $v_sroa_0_0__idx = $agg_result | 0;
  HEAPF64[tempDoublePtr >> 3] = $f, HEAP32[$v_sroa_0_0__idx >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$v_sroa_0_0__idx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  HEAP32[$agg_result + 8 >> 2] = 6;
  return;
}
function _mrb_proc_copy($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $3 = 0;
  $3 = $a;
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] & 2047 | HEAP32[$b >> 2] & -2048;
  HEAP32[$a + 12 >> 2] = HEAP32[$b + 12 >> 2] | 0;
  HEAP32[$a + 16 >> 2] = HEAP32[$b + 16 >> 2] | 0;
  HEAP32[$a + 20 >> 2] = HEAP32[$b + 20 >> 2] | 0;
  return;
}
function _mrb_proc_iseq($mrb, $p) {
  $mrb = $mrb | 0;
  $p = $p | 0;
  return HEAP32[(HEAP32[$p + 12 >> 2] | 0) + 12 >> 2] | 0;
}
function _webruby_internal_run_bytecode($mrb, $bc, $print_level) {
  $mrb = $mrb | 0;
  $bc = $bc | 0;
  $print_level = $print_level | 0;
  var $agg_tmp = 0, $call = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $agg_tmp = __stackBase__ | 0;
  _mrb_load_irep($agg_tmp, $mrb, $bc);
  $call = _check_and_print_errors($mrb, $agg_tmp, $print_level) | 0;
  STACKTOP = __stackBase__;
  return $call | 0;
}
function _check_and_print_errors($mrb, $result, $print_level) {
  $mrb = $mrb | 0;
  $result = $result | 0;
  $print_level = $print_level | 0;
  var $agg_tmp = 0, $exc = 0, $0 = 0, $tobool = 0, $cmp = 0, $or_cond = 0, $1 = 0, $cmp3 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $result;
  $result = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$result >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$result + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$result + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $exc = $mrb + 16 | 0;
    $0 = HEAP32[$exc >> 2] | 0;
    $tobool = ($0 | 0) != 0;
    $cmp = ($print_level | 0) > 0;
    $or_cond = $tobool & $cmp;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $1 = $0 | 0;
    _mrb_obj_value($agg_tmp, $1);
    _mrb_p($mrb, $agg_tmp);
    HEAP32[$exc >> 2] = 0;
    $retval_0 = 1;
    label = 6;
    break;
   case 4:
    $cmp3 = ($print_level | 0) > 1;
    if ($cmp3) {
      label = 5;
      break;
    } else {
      $retval_0 = 0;
      label = 6;
      break;
    }
   case 5:
    _mrb_p($mrb, $result);
    $retval_0 = 0;
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _webruby_internal_run($mrb, $print_level) {
  $mrb = $mrb | 0;
  $print_level = $print_level | 0;
  return _webruby_internal_run_bytecode($mrb, 91988, $print_level) | 0;
}
function _webruby_internal_run_source($mrb, $s, $print_level) {
  $mrb = $mrb | 0;
  $s = $s | 0;
  $print_level = $print_level | 0;
  var $agg_tmp = 0, $call = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $agg_tmp = __stackBase__ | 0;
  _mrb_load_string($agg_tmp, $mrb, $s);
  $call = _check_and_print_errors($mrb, $agg_tmp, $print_level) | 0;
  STACKTOP = __stackBase__;
  return $call | 0;
}
function _mrb_read_irep($mrb, $bin) {
  $mrb = $mrb | 0;
  $bin = $bin | 0;
  var $crc = 0, $bin_size = 0, $cmp = 0, $cmp1 = 0, $or_cond = 0, $call = 0, $cmp2 = 0, $0 = 0, $add_ptr = 0, $1 = 0, $sub = 0, $call6 = 0, $cmp8 = 0, $add_ptr12 = 0, $irep_len = 0, $2 = 0, $total_nirep_0 = 0, $bin_addr_0 = 0, $call13 = 0, $cmp14 = 0, $call17 = 0, $cmp18 = 0, $add = 0, $call24 = 0, $cmp25 = 0, $call28 = 0, $cmp29 = 0, $total_nirep_1 = 0, $section_size = 0, $call36 = 0, $add_ptr37 = 0, $call40 = 0, $cmp41 = 0, $retval_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $crc = __stackBase__ | 0;
    $bin_size = __stackBase__ + 4 | 0;
    HEAP32[$bin_size >> 2] = 0;
    $cmp = ($mrb | 0) == 0;
    $cmp1 = ($bin | 0) == 0;
    $or_cond = $cmp | $cmp1;
    if ($or_cond) {
      $retval_0 = -7;
      label = 12;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _read_rite_binary_header($bin, $bin_size, $crc) | 0;
    $cmp2 = ($call | 0) == 0;
    if ($cmp2) {
      label = 4;
      break;
    } else {
      $retval_0 = $call;
      label = 12;
      break;
    }
   case 4:
    $0 = HEAP16[$crc >> 1] | 0;
    $add_ptr = $bin + 10 | 0;
    $1 = HEAP32[$bin_size >> 2] | 0;
    $sub = $1 - 10 | 0;
    $call6 = _calc_crc_16_ccitt($add_ptr, $sub, 0) | 0;
    $cmp8 = $0 << 16 >> 16 == $call6 << 16 >> 16;
    if ($cmp8) {
      label = 5;
      break;
    } else {
      $retval_0 = -5;
      label = 12;
      break;
    }
   case 5:
    $add_ptr12 = $bin + 22 | 0;
    $irep_len = $mrb + 28 | 0;
    $2 = HEAP32[$irep_len >> 2] | 0;
    $bin_addr_0 = $add_ptr12;
    $total_nirep_0 = 0;
    label = 6;
    break;
   case 6:
    $call13 = _memcmp($bin_addr_0 | 0, 111660, 4) | 0;
    $cmp14 = ($call13 | 0) == 0;
    if ($cmp14) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    $call17 = _read_rite_section_irep($mrb, $bin_addr_0) | 0;
    $cmp18 = ($call17 | 0) < 0;
    if ($cmp18) {
      $retval_0 = $call17;
      label = 12;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $add = $call17 + $total_nirep_0 | 0;
    $total_nirep_1 = $add;
    label = 11;
    break;
   case 9:
    $call24 = _memcmp($bin_addr_0 | 0, 111652, 4) | 0;
    $cmp25 = ($call24 | 0) == 0;
    if ($cmp25) {
      label = 10;
      break;
    } else {
      $total_nirep_1 = $total_nirep_0;
      label = 11;
      break;
    }
   case 10:
    $call28 = _read_rite_section_lineno($mrb, $bin_addr_0, $2) | 0;
    $cmp29 = ($call28 | 0) < 0;
    if ($cmp29) {
      $retval_0 = $call28;
      label = 12;
      break;
    } else {
      $total_nirep_1 = $total_nirep_0;
      label = 11;
      break;
    }
   case 11:
    $section_size = $bin_addr_0 + 4 | 0;
    $call36 = _bin_to_uint32($section_size) | 0;
    $add_ptr37 = $bin_addr_0 + $call36 | 0;
    $call40 = _memcmp($bin_addr_0 | 0, 106756, 4) | 0;
    $cmp41 = ($call40 | 0) == 0;
    if ($cmp41) {
      $retval_0 = $total_nirep_1;
      label = 12;
      break;
    } else {
      $bin_addr_0 = $add_ptr37;
      $total_nirep_0 = $total_nirep_1;
      label = 6;
      break;
    }
   case 12:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _read_rite_binary_header($bin, $bin_size, $crc) {
  $bin = $bin | 0;
  $bin_size = $bin_size | 0;
  $crc = $crc | 0;
  var $call = 0, $cmp = 0, $binary_version = 0, $call2 = 0, $cmp3 = 0, $binary_crc = 0, $call7 = 0, $tobool = 0, $binary_size = 0, $call10 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _memcmp($bin | 0, 100460, 4) | 0;
    $cmp = ($call | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $retval_0 = -5;
      label = 6;
      break;
    }
   case 3:
    $binary_version = $bin + 4 | 0;
    $call2 = _memcmp($binary_version | 0, 97920, 4) | 0;
    $cmp3 = ($call2 | 0) == 0;
    if ($cmp3) {
      label = 4;
      break;
    } else {
      $retval_0 = -5;
      label = 6;
      break;
    }
   case 4:
    $binary_crc = $bin + 8 | 0;
    $call7 = _bin_to_uint16($binary_crc) | 0;
    HEAP16[$crc >> 1] = $call7;
    $tobool = ($bin_size | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $binary_size = $bin + 10 | 0;
    $call10 = _bin_to_uint32($binary_size) | 0;
    HEAP32[$bin_size >> 2] = $call10;
    $retval_0 = 0;
    label = 6;
    break;
   case 6:
    return $retval_0 | 0;
  }
  return 0;
}
function _read_rite_section_irep($mrb, $bin) {
  $mrb = $mrb | 0;
  $bin = $bin | 0;
  var $len = 0, $irep_len = 0, $0 = 0, $nirep1 = 0, $call = 0, $cmp12 = 0, $add_ptr = 0, $bin_addr_014 = 0, $n_013 = 0, $call4 = 0, $cmp5 = 0, $1 = 0, $add_ptr7 = 0, $inc = 0, $cmp = 0, $sirep9 = 0, $call11 = 0, $conv12 = 0, $add = 0, $result_0 = 0, $cmp13 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $len = __stackBase__ | 0;
    $irep_len = $mrb + 28 | 0;
    $0 = HEAP32[$irep_len >> 2] | 0;
    $nirep1 = $bin + 12 | 0;
    $call = _bin_to_uint16($nirep1) | 0;
    $cmp12 = $call << 16 >> 16 == 0;
    if ($cmp12) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $add_ptr = $bin + 16 | 0;
    $n_013 = 0;
    $bin_addr_014 = $add_ptr;
    label = 4;
    break;
   case 4:
    $call4 = _read_rite_irep_record($mrb, $bin_addr_014, $len) | 0;
    $cmp5 = ($call4 | 0) == 0;
    if ($cmp5) {
      label = 5;
      break;
    } else {
      $result_0 = $call4;
      label = 7;
      break;
    }
   case 5:
    $1 = HEAP32[$len >> 2] | 0;
    $add_ptr7 = $bin_addr_014 + $1 | 0;
    $inc = $n_013 + 1 & 65535;
    $cmp = ($inc & 65535) < ($call & 65535);
    if ($cmp) {
      $n_013 = $inc;
      $bin_addr_014 = $add_ptr7;
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $sirep9 = $bin + 14 | 0;
    $call11 = _bin_to_uint16($sirep9) | 0;
    $conv12 = $call11 & 65535;
    $add = $conv12 + $0 | 0;
    $result_0 = $add;
    label = 7;
    break;
   case 7:
    $cmp13 = ($result_0 | 0) < 0;
    if ($cmp13) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    _irep_free($0, $mrb);
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return $result_0 | 0;
  }
  return 0;
}
function _read_rite_section_lineno($mrb, $bin, $sirep) {
  $mrb = $mrb | 0;
  $bin = $bin | 0;
  $sirep = $sirep | 0;
  var $len = 0, $nirep1 = 0, $call = 0, $cmp9 = 0, $add_ptr = 0, $bin_addr_012 = 0, $n_011 = 0, $i_010 = 0, $call4 = 0, $cmp5 = 0, $0 = 0, $add_ptr7 = 0, $inc = 0, $inc8 = 0, $cmp = 0, $sirep9 = 0, $call11 = 0, $conv12 = 0, $add = 0, $result_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $len = __stackBase__ | 0;
    HEAP32[$len >> 2] = 0;
    $nirep1 = $bin + 8 | 0;
    $call = _bin_to_uint16($nirep1) | 0;
    $cmp9 = $call << 16 >> 16 == 0;
    if ($cmp9) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $add_ptr = $bin + 12 | 0;
    $i_010 = $sirep;
    $n_011 = 0;
    $bin_addr_012 = $add_ptr;
    label = 4;
    break;
   case 4:
    $call4 = _read_rite_lineno_record($mrb, $bin_addr_012, $i_010, $len) | 0;
    $cmp5 = ($call4 | 0) == 0;
    if ($cmp5) {
      label = 5;
      break;
    } else {
      $result_0 = $call4;
      label = 7;
      break;
    }
   case 5:
    $0 = HEAP32[$len >> 2] | 0;
    $add_ptr7 = $bin_addr_012 + $0 | 0;
    $inc = $n_011 + 1 & 65535;
    $inc8 = $i_010 + 1 | 0;
    $cmp = ($inc & 65535) < ($call & 65535);
    if ($cmp) {
      $i_010 = $inc8;
      $n_011 = $inc;
      $bin_addr_012 = $add_ptr7;
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $sirep9 = $bin + 10 | 0;
    $call11 = _bin_to_uint16($sirep9) | 0;
    $conv12 = $call11 & 65535;
    $add = $conv12 + $sirep | 0;
    $result_0 = $add;
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return $result_0 | 0;
  }
  return 0;
}
function _mrb_load_irep($agg_result, $mrb, $bin) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $bin = $bin | 0;
  var $agg_tmp = 0, $call = 0, $cmp = 0, $irep = 0, $0 = 0, $arrayidx = 0, $1 = 0, $call1 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $call = _mrb_read_irep($mrb, $bin) | 0;
    $cmp = ($call | 0) < 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _irep_error($mrb);
    _mrb_nil_value($agg_result);
    label = 5;
    break;
   case 4:
    $irep = $mrb + 24 | 0;
    $0 = HEAP32[$irep >> 2] | 0;
    $arrayidx = $0 + ($call << 2) | 0;
    $1 = HEAP32[$arrayidx >> 2] | 0;
    $call1 = _mrb_proc_new($mrb, $1) | 0;
    _mrb_top_self($agg_tmp, $mrb);
    _mrb_run($agg_result, $mrb, $call1, $agg_tmp);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _irep_error($mrb) {
  $mrb = $mrb | 0;
  var $tmp = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $tmp = __stackBase__ | 0;
  _mrb_exc_new($tmp, $mrb, _mrb_class_get($mrb, 103240) | 0, 79344, 15);
  HEAP32[$mrb + 16 >> 2] = HEAP32[$tmp >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _read_rite_lineno_record($mrb, $bin, $irepno, $len) {
  $mrb = $mrb | 0;
  $bin = $bin | 0;
  $irepno = $irepno | 0;
  $len = $len | 0;
  var $add_ptr = 0, $call = 0, $conv = 0, $add3 = 0, $call4 = 0, $cmp = 0, $add_ptr1 = 0, $arrayidx = 0, $add_ptr1_sum = 0, $add_ptr6 = 0, $0 = 0, $add7 = 0, $call8 = 0, $add10 = 0, $mul = 0, $call11 = 0, $1 = 0, $cmp12 = 0, $cmp1630 = 0, $add_ptr6_sum = 0, $add_ptr9 = 0, $bin_addr_032 = 0, $i_031 = 0, $call18 = 0, $arrayidx19 = 0, $add_ptr20 = 0, $2 = 0, $add21 = 0, $inc = 0, $exitcond = 0, $irep = 0, $3 = 0, $arrayidx22 = 0, $4 = 0, $filename = 0, $5 = 0, $arrayidx24 = 0, $6 = 0, $lines25 = 0, $ret_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $add_ptr = $bin + 4 | 0;
    HEAP32[$len >> 2] = 4;
    $call = _bin_to_uint16($add_ptr) | 0;
    $conv = $call & 65535;
    HEAP32[$len >> 2] = 6;
    $add3 = $conv + 1 | 0;
    $call4 = _mrb_malloc($mrb, $add3) | 0;
    $cmp = ($call4 | 0) == 0;
    if ($cmp) {
      $ret_0 = -1;
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $add_ptr1 = $bin + 6 | 0;
    _memcpy($call4 | 0, $add_ptr1 | 0, $conv);
    $arrayidx = $call4 + $conv | 0;
    HEAP8[$arrayidx] = 0;
    $add_ptr1_sum = $conv + 6 | 0;
    $add_ptr6 = $bin + $add_ptr1_sum | 0;
    $0 = HEAP32[$len >> 2] | 0;
    $add7 = $0 + $conv | 0;
    HEAP32[$len >> 2] = $add7;
    $call8 = _bin_to_uint32($add_ptr6) | 0;
    $add10 = $add7 + 4 | 0;
    HEAP32[$len >> 2] = $add10;
    $mul = $call8 << 1;
    $call11 = _mrb_malloc($mrb, $mul) | 0;
    $1 = $call11;
    $cmp12 = ($call11 | 0) == 0;
    if ($cmp12) {
      $ret_0 = -1;
      label = 8;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $cmp1630 = ($call8 | 0) == 0;
    if ($cmp1630) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $add_ptr6_sum = $conv + 10 | 0;
    $add_ptr9 = $bin + $add_ptr6_sum | 0;
    $i_031 = 0;
    $bin_addr_032 = $add_ptr9;
    label = 6;
    break;
   case 6:
    $call18 = _bin_to_uint16($bin_addr_032) | 0;
    $arrayidx19 = $1 + ($i_031 << 1) | 0;
    HEAP16[$arrayidx19 >> 1] = $call18;
    $add_ptr20 = $bin_addr_032 + 2 | 0;
    $2 = HEAP32[$len >> 2] | 0;
    $add21 = $2 + 2 | 0;
    HEAP32[$len >> 2] = $add21;
    $inc = $i_031 + 1 | 0;
    $exitcond = ($inc | 0) == ($call8 | 0);
    if ($exitcond) {
      label = 7;
      break;
    } else {
      $i_031 = $inc;
      $bin_addr_032 = $add_ptr20;
      label = 6;
      break;
    }
   case 7:
    $irep = $mrb + 24 | 0;
    $3 = HEAP32[$irep >> 2] | 0;
    $arrayidx22 = $3 + ($irepno << 2) | 0;
    $4 = HEAP32[$arrayidx22 >> 2] | 0;
    $filename = $4 + 24 | 0;
    HEAP32[$filename >> 2] = $call4;
    $5 = HEAP32[$irep >> 2] | 0;
    $arrayidx24 = $5 + ($irepno << 2) | 0;
    $6 = HEAP32[$arrayidx24 >> 2] | 0;
    $lines25 = $6 + 28 | 0;
    HEAP32[$lines25 >> 2] = $1;
    $ret_0 = 0;
    label = 8;
    break;
   case 8:
    return $ret_0 | 0;
  }
  return 0;
}
function _irep_free($sirep, $mrb) {
  $sirep = $sirep | 0;
  $mrb = $mrb | 0;
  var $irep_len = 0, $0 = 0, $cmp21 = 0, $irep = 0, $i_022 = 0, $1 = 0, $arrayidx = 0, $2 = 0, $tobool = 0, $iseq = 0, $3 = 0, $tobool3 = 0, $4 = 0, $5 = 0, $arrayidx6 = 0, $6 = 0, $pool = 0, $7 = 0, $tobool7 = 0, $8 = 0, $9 = 0, $arrayidx11 = 0, $10 = 0, $syms = 0, $11 = 0, $tobool12 = 0, $12 = 0, $13 = 0, $arrayidx16 = 0, $14 = 0, $15 = 0, $inc = 0, $16 = 0, $cmp = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $irep_len = $mrb + 28 | 0;
    $0 = HEAP32[$irep_len >> 2] | 0;
    $cmp21 = $0 >>> 0 > $sirep >>> 0;
    if ($cmp21) {
      label = 3;
      break;
    } else {
      label = 13;
      break;
    }
   case 3:
    $irep = $mrb + 24 | 0;
    $i_022 = $sirep;
    label = 4;
    break;
   case 4:
    $1 = HEAP32[$irep >> 2] | 0;
    $arrayidx = $1 + ($i_022 << 2) | 0;
    $2 = HEAP32[$arrayidx >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 12;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $iseq = $2 + 12 | 0;
    $3 = HEAP32[$iseq >> 2] | 0;
    $tobool3 = ($3 | 0) == 0;
    if ($tobool3) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $4 = $3;
    _mrb_free($mrb, $4);
    label = 7;
    break;
   case 7:
    $5 = HEAP32[$irep >> 2] | 0;
    $arrayidx6 = $5 + ($i_022 << 2) | 0;
    $6 = HEAP32[$arrayidx6 >> 2] | 0;
    $pool = $6 + 16 | 0;
    $7 = HEAP32[$pool >> 2] | 0;
    $tobool7 = ($7 | 0) == 0;
    if ($tobool7) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $8 = $7;
    _mrb_free($mrb, $8);
    label = 9;
    break;
   case 9:
    $9 = HEAP32[$irep >> 2] | 0;
    $arrayidx11 = $9 + ($i_022 << 2) | 0;
    $10 = HEAP32[$arrayidx11 >> 2] | 0;
    $syms = $10 + 20 | 0;
    $11 = HEAP32[$syms >> 2] | 0;
    $tobool12 = ($11 | 0) == 0;
    if ($tobool12) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $12 = $11;
    _mrb_free($mrb, $12);
    label = 11;
    break;
   case 11:
    $13 = HEAP32[$irep >> 2] | 0;
    $arrayidx16 = $13 + ($i_022 << 2) | 0;
    $14 = HEAP32[$arrayidx16 >> 2] | 0;
    $15 = $14;
    _mrb_free($mrb, $15);
    label = 12;
    break;
   case 12:
    $inc = $i_022 + 1 | 0;
    $16 = HEAP32[$irep_len >> 2] | 0;
    $cmp = $inc >>> 0 < $16 >>> 0;
    if ($cmp) {
      $i_022 = $inc;
      label = 4;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    return;
  }
}
function _read_rite_irep_record($mrb, $bin, $len) {
  $mrb = $mrb | 0;
  $bin = $bin | 0;
  $len = $len | 0;
  var $s = 0, $tmp41 = 0, $tmp46 = 0, $tmp52 = 0, $call = 0, $call1 = 0, $add_ptr = 0, $call2 = 0, $nlocals = 0, $add_ptr3 = 0, $call4 = 0, $nregs = 0, $add_ptr5 = 0, $call6 = 0, $ilen = 0, $add_ptr7 = 0, $cmp = 0, $mul = 0, $call10 = 0, $0 = 0, $iseq = 0, $cmp12 = 0, $1 = 0, $cmp1582 = 0, $i_084 = 0, $src_083 = 0, $call16 = 0, $2 = 0, $arrayidx = 0, $add_ptr18 = 0, $inc = 0, $3 = 0, $cmp15 = 0, $src_1 = 0, $call20 = 0, $add_ptr21 = 0, $cmp22 = 0, $mul24 = 0, $call25 = 0, $4 = 0, $pool = 0, $cmp27 = 0, $5 = 0, $6 = 0, $plen53 = 0, $7 = 0, $8 = 0, $i_180 = 0, $src_279 = 0, $incdec_ptr = 0, $9 = 0, $call33 = 0, $add_ptr34 = 0, $conv35 = 0, $add_ptr34_sum = 0, $add_ptr37 = 0, $conv38 = 0, $10 = 0, $arrayidx40 = 0, $11 = 0, $12 = 0, $arrayidx44 = 0, $call45 = 0.0, $13 = 0, $14 = 0, $arrayidx49 = 0, $15 = 0, $16 = 0, $arrayidx51 = 0, $17 = 0, $18 = 0, $inc54 = 0, $inc56 = 0, $exitcond = 0, $src_3 = 0, $call59 = 0, $slen = 0, $add_ptr60 = 0, $cmp62 = 0, $mul66 = 0, $call67 = 0, $19 = 0, $syms = 0, $cmp69 = 0, $20 = 0, $cmp7575 = 0, $i_277 = 0, $src_476 = 0, $call78 = 0, $add_ptr79 = 0, $conv80 = 0, $cmp81 = 0, $21 = 0, $arrayidx85 = 0, $call88 = 0, $22 = 0, $arrayidx90 = 0, $add_ptr79_sum = 0, $add_ptr92 = 0, $src_5 = 0, $inc94 = 0, $23 = 0, $cmp75 = 0, $src_6 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $ret_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $s = __stackBase__ | 0;
    $tmp41 = __stackBase__ + 12 | 0;
    $tmp46 = __stackBase__ + 24 | 0;
    $tmp52 = __stackBase__ + 36 | 0;
    $call = _mrb_gc_arena_save($mrb) | 0;
    $call1 = _mrb_add_irep($mrb) | 0;
    $add_ptr = $bin + 4 | 0;
    $call2 = _bin_to_uint16($add_ptr) | 0;
    $nlocals = $call1 + 4 | 0;
    HEAP16[$nlocals >> 1] = $call2;
    $add_ptr3 = $bin + 6 | 0;
    $call4 = _bin_to_uint16($add_ptr3) | 0;
    $nregs = $call1 + 6 | 0;
    HEAP16[$nregs >> 1] = $call4;
    $add_ptr5 = $bin + 8 | 0;
    $call6 = _bin_to_uint32($add_ptr5) | 0;
    $ilen = $call1 + 32 | 0;
    HEAP32[$ilen >> 2] = $call6;
    $add_ptr7 = $bin + 12 | 0;
    $cmp = ($call6 | 0) == 0;
    if ($cmp) {
      $src_1 = $add_ptr7;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $mul = $call6 << 2;
    $call10 = _mrb_malloc($mrb, $mul) | 0;
    $0 = $call10;
    $iseq = $call1 + 12 | 0;
    HEAP32[$iseq >> 2] = $0;
    $cmp12 = ($call10 | 0) == 0;
    if ($cmp12) {
      $ret_0 = -1;
      label = 23;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $1 = HEAP32[$ilen >> 2] | 0;
    $cmp1582 = ($1 | 0) == 0;
    if ($cmp1582) {
      $src_1 = $add_ptr7;
      label = 6;
      break;
    } else {
      $src_083 = $add_ptr7;
      $i_084 = 0;
      label = 5;
      break;
    }
   case 5:
    $call16 = _bin_to_uint32($src_083) | 0;
    $2 = HEAP32[$iseq >> 2] | 0;
    $arrayidx = $2 + ($i_084 << 2) | 0;
    HEAP32[$arrayidx >> 2] = $call16;
    $add_ptr18 = $src_083 + 4 | 0;
    $inc = $i_084 + 1 | 0;
    $3 = HEAP32[$ilen >> 2] | 0;
    $cmp15 = $inc >>> 0 < $3 >>> 0;
    if ($cmp15) {
      $src_083 = $add_ptr18;
      $i_084 = $inc;
      label = 5;
      break;
    } else {
      $src_1 = $add_ptr18;
      label = 6;
      break;
    }
   case 6:
    $call20 = _bin_to_uint32($src_1) | 0;
    $add_ptr21 = $src_1 + 4 | 0;
    $cmp22 = ($call20 | 0) == 0;
    if ($cmp22) {
      $src_3 = $add_ptr21;
      label = 15;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $mul24 = $call20 * 12 & -1;
    $call25 = _mrb_malloc($mrb, $mul24) | 0;
    $4 = $call25;
    $pool = $call1 + 16 | 0;
    HEAP32[$pool >> 2] = $4;
    $cmp27 = ($call25 | 0) == 0;
    if ($cmp27) {
      $ret_0 = -1;
      label = 23;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $5 = $s;
    $6 = $tmp52;
    $plen53 = $call1 + 36 | 0;
    $7 = $tmp41;
    $8 = $tmp46;
    $src_279 = $add_ptr21;
    $i_180 = 0;
    label = 9;
    break;
   case 9:
    $incdec_ptr = $src_279 + 1 | 0;
    $9 = HEAP8[$src_279] | 0;
    $call33 = _bin_to_uint16($incdec_ptr) | 0;
    $add_ptr34 = $src_279 + 3 | 0;
    $conv35 = $call33 & 65535;
    _mrb_str_new($s, $mrb, $add_ptr34, $conv35);
    $add_ptr34_sum = $conv35 + 3 | 0;
    $add_ptr37 = $src_279 + $add_ptr34_sum | 0;
    $conv38 = $9 & 255;
    if (($conv38 | 0) == 3) {
      label = 10;
      break;
    } else if (($conv38 | 0) == 6) {
      label = 11;
      break;
    } else if (($conv38 | 0) == 16) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 10:
    $10 = HEAP32[$pool >> 2] | 0;
    $arrayidx40 = $10 + ($i_180 * 12 & -1) | 0;
    _mrb_str_to_inum($tmp41, $mrb, $s, 10, 0);
    $11 = $arrayidx40;
    HEAP32[$11 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$11 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$11 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    label = 14;
    break;
   case 11:
    $12 = HEAP32[$pool >> 2] | 0;
    $arrayidx44 = $12 + ($i_180 * 12 & -1) | 0;
    $call45 = +_mrb_str_to_dbl($mrb, $s, 0);
    _mrb_float_value($tmp46, $call45);
    $13 = $arrayidx44;
    HEAP32[$13 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$13 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$13 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    label = 14;
    break;
   case 12:
    $14 = HEAP32[$pool >> 2] | 0;
    $arrayidx49 = $14 + ($i_180 * 12 & -1) | 0;
    $15 = $arrayidx49;
    HEAP32[$15 >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$15 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$15 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    label = 14;
    break;
   case 13:
    $16 = HEAP32[$pool >> 2] | 0;
    $arrayidx51 = $16 + ($i_180 * 12 & -1) | 0;
    _mrb_nil_value($tmp52);
    $17 = $arrayidx51;
    HEAP32[$17 >> 2] = HEAP32[$6 >> 2] | 0;
    HEAP32[$17 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
    HEAP32[$17 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
    label = 14;
    break;
   case 14:
    $18 = HEAP32[$plen53 >> 2] | 0;
    $inc54 = $18 + 1 | 0;
    HEAP32[$plen53 >> 2] = $inc54;
    _mrb_gc_arena_restore($mrb, $call);
    $inc56 = $i_180 + 1 | 0;
    $exitcond = ($inc56 | 0) == ($call20 | 0);
    if ($exitcond) {
      $src_3 = $add_ptr37;
      label = 15;
      break;
    } else {
      $src_279 = $add_ptr37;
      $i_180 = $inc56;
      label = 9;
      break;
    }
   case 15:
    $call59 = _bin_to_uint32($src_3) | 0;
    $slen = $call1 + 40 | 0;
    HEAP32[$slen >> 2] = $call59;
    $add_ptr60 = $src_3 + 4 | 0;
    $cmp62 = ($call59 | 0) == 0;
    if ($cmp62) {
      $src_6 = $add_ptr60;
      label = 22;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $mul66 = $call59 << 1;
    $call67 = _mrb_malloc($mrb, $mul66) | 0;
    $19 = $call67;
    $syms = $call1 + 20 | 0;
    HEAP32[$syms >> 2] = $19;
    $cmp69 = ($call67 | 0) == 0;
    if ($cmp69) {
      $ret_0 = -1;
      label = 23;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $20 = HEAP32[$slen >> 2] | 0;
    $cmp7575 = ($20 | 0) == 0;
    if ($cmp7575) {
      $src_6 = $add_ptr60;
      label = 22;
      break;
    } else {
      $src_476 = $add_ptr60;
      $i_277 = 0;
      label = 18;
      break;
    }
   case 18:
    $call78 = _bin_to_uint16($src_476) | 0;
    $add_ptr79 = $src_476 + 2 | 0;
    $conv80 = $call78 & 65535;
    $cmp81 = $call78 << 16 >> 16 == -1;
    if ($cmp81) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    $21 = HEAP32[$syms >> 2] | 0;
    $arrayidx85 = $21 + ($i_277 << 1) | 0;
    HEAP16[$arrayidx85 >> 1] = 0;
    $src_5 = $add_ptr79;
    label = 21;
    break;
   case 20:
    $call88 = _mrb_intern2($mrb, $add_ptr79, $conv80) | 0;
    $22 = HEAP32[$syms >> 2] | 0;
    $arrayidx90 = $22 + ($i_277 << 1) | 0;
    HEAP16[$arrayidx90 >> 1] = $call88;
    $add_ptr79_sum = $conv80 + 3 | 0;
    $add_ptr92 = $src_476 + $add_ptr79_sum | 0;
    _mrb_gc_arena_restore($mrb, $call);
    $src_5 = $add_ptr92;
    label = 21;
    break;
   case 21:
    $inc94 = $i_277 + 1 | 0;
    $23 = HEAP32[$slen >> 2] | 0;
    $cmp75 = $inc94 >>> 0 < $23 >>> 0;
    if ($cmp75) {
      $src_476 = $src_5;
      $i_277 = $inc94;
      label = 18;
      break;
    } else {
      $src_6 = $src_5;
      label = 22;
      break;
    }
   case 22:
    $sub_ptr_lhs_cast = $src_6;
    $sub_ptr_rhs_cast = $bin;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    HEAP32[$len >> 2] = $sub_ptr_sub;
    $ret_0 = 0;
    label = 23;
    break;
   case 23:
    STACKTOP = __stackBase__;
    return $ret_0 | 0;
  }
  return 0;
}
function _mrb_p($mrb, $obj) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $tmp = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $tmp = __stackBase__ | 0;
  _mrb_funcall($tmp, $mrb, $obj, 95664, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
  $0 = $obj;
  $1 = $tmp;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  _printstr($tmp);
  _fputc(10, HEAP32[_stdout >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _printstr($obj) {
  $obj = $obj | 0;
  var $tt = 0, $0 = 0, $cmp = 0, $p = 0, $1 = 0, $ptr = 0, $2 = 0, $3 = 0, $len1 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $obj + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 16;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $p = $obj;
    $1 = HEAP32[$p >> 2] | 0;
    $ptr = $1 + 20 | 0;
    $2 = $ptr;
    $3 = HEAP32[$2 >> 2] | 0;
    $len1 = $1 + 12 | 0;
    $4 = $len1;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = HEAP32[_stdout >> 2] | 0;
    $call = _fwrite($3 | 0, $5 | 0, 1, $6 | 0) | 0;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_proc_new($mrb, $irep) {
  $mrb = $mrb | 0;
  $irep = $irep | 0;
  var $proc_class = 0, $0 = 0, $call = 0, $1 = 0, $c = 0, $2 = 0, $ci = 0, $3 = 0, $tobool = 0, $target_class = 0, $4 = 0, $cond = 0, $5 = 0, $body = 0, $irep4 = 0, $env = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $proc_class = $mrb + 56 | 0;
    $0 = HEAP32[$proc_class >> 2] | 0;
    $call = _mrb_obj_alloc($mrb, 13, $0) | 0;
    $1 = $call;
    $c = $mrb + 8 | 0;
    $2 = HEAP32[$c >> 2] | 0;
    $ci = $2 + 16 | 0;
    $3 = HEAP32[$ci >> 2] | 0;
    $tobool = ($3 | 0) == 0;
    if ($tobool) {
      $cond = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $target_class = $3 + 28 | 0;
    $4 = HEAP32[$target_class >> 2] | 0;
    $cond = $4;
    label = 4;
    break;
   case 4:
    $5 = $call + 16 | 0;
    HEAP32[$5 >> 2] = $cond;
    $body = $call + 12 | 0;
    $irep4 = $body;
    HEAP32[$irep4 >> 2] = $irep;
    $env = $call + 20 | 0;
    HEAP32[$env >> 2] = 0;
    return $1 | 0;
  }
  return 0;
}
function _mrb_closure_new($mrb, $irep) {
  $mrb = $mrb | 0;
  $irep = $irep | 0;
  var $call = 0;
  $call = _mrb_proc_new($mrb, $irep) | 0;
  _closure_setup($mrb, $call, HEAPU16[(HEAP32[(HEAP32[(HEAP32[(HEAP32[$mrb + 8 >> 2] | 0) + 16 >> 2] | 0) + 4 >> 2] | 0) + 12 >> 2] | 0) + 4 >> 1] | 0);
  return $call | 0;
}
function _closure_setup($mrb, $p, $nlocals) {
  $mrb = $mrb | 0;
  $p = $p | 0;
  $nlocals = $nlocals | 0;
  var $c = 0, $0 = 0, $ci = 0, $1 = 0, $env = 0, $2 = 0, $tobool = 0, $proc = 0, $3 = 0, $env3 = 0, $4 = 0, $5 = 0, $call = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $ci5 = 0, $13 = 0, $mid = 0, $14 = 0, $mid6 = 0, $15 = 0, $16 = 0, $ci8 = 0, $17 = 0, $cibase = 0, $18 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $sub_ptr_div = 0, $cioff = 0, $sub_ptr_div_c = 0, $19 = 0, $stack = 0, $20 = 0, $stack11 = 0, $21 = 0, $22 = 0, $ci13 = 0, $23 = 0, $env14 = 0, $e_0 = 0, $env18 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $c = $mrb + 8 | 0;
    $0 = HEAP32[$c >> 2] | 0;
    $ci = $0 + 16 | 0;
    $1 = HEAP32[$ci >> 2] | 0;
    $env = $1 + 40 | 0;
    $2 = HEAP32[$env >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $e_0 = $2;
      label = 4;
      break;
    }
   case 3:
    $proc = $1 + 4 | 0;
    $3 = HEAP32[$proc >> 2] | 0;
    $env3 = $3 + 20 | 0;
    $4 = HEAP32[$env3 >> 2] | 0;
    $5 = $4;
    $call = _mrb_obj_alloc($mrb, 20, $5) | 0;
    $6 = $call;
    $7 = $call;
    $8 = $nlocals << 11;
    $9 = HEAP32[$7 >> 2] | 0;
    $10 = $9 & 2047;
    $11 = $10 | $8;
    HEAP32[$7 >> 2] = $11;
    $12 = HEAP32[$c >> 2] | 0;
    $ci5 = $12 + 16 | 0;
    $13 = HEAP32[$ci5 >> 2] | 0;
    $mid = $13 | 0;
    $14 = HEAP16[$mid >> 1] | 0;
    $mid6 = $call + 16 | 0;
    $15 = $mid6;
    HEAP16[$15 >> 1] = $14;
    $16 = HEAP32[$c >> 2] | 0;
    $ci8 = $16 + 16 | 0;
    $17 = HEAP32[$ci8 >> 2] | 0;
    $cibase = $16 + 20 | 0;
    $18 = HEAP32[$cibase >> 2] | 0;
    $sub_ptr_lhs_cast = $17;
    $sub_ptr_rhs_cast = $18;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $sub_ptr_div = ($sub_ptr_sub | 0) / 44 & -1;
    $cioff = $call + 20 | 0;
    $sub_ptr_div_c = $sub_ptr_div;
    HEAP32[$cioff >> 2] = $sub_ptr_div_c;
    $19 = HEAP32[$c >> 2] | 0;
    $stack = $19 + 4 | 0;
    $20 = HEAP32[$stack >> 2] | 0;
    $stack11 = $call + 12 | 0;
    $21 = $stack11;
    HEAP32[$21 >> 2] = $20;
    $22 = HEAP32[$c >> 2] | 0;
    $ci13 = $22 + 16 | 0;
    $23 = HEAP32[$ci13 >> 2] | 0;
    $env14 = $23 + 40 | 0;
    HEAP32[$env14 >> 2] = $6;
    $e_0 = $6;
    label = 4;
    break;
   case 4:
    $env18 = $p + 20 | 0;
    HEAP32[$env18 >> 2] = $e_0;
    return;
  }
}
function _mrb_proc_new_cfunc($mrb, $func) {
  $mrb = $mrb | 0;
  $func = $func | 0;
  var $call = 0, $2 = 0;
  $call = _mrb_obj_alloc($mrb, 13, HEAP32[$mrb + 56 >> 2] | 0) | 0;
  HEAP32[$call + 12 >> 2] = $func;
  $2 = $call;
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 262144;
  return $call | 0;
}
function _mrb_init_proc($mrb) {
  $mrb = $mrb | 0;
  var $call = 0, $cmp = 0, $0 = 0, $1 = 0, $idx = 0, $iseq = 0, $2 = 0, $ilen = 0, $3 = 0, $object_class = 0, $4 = 0, $call1 = 0, $proc_class = 0, $5 = 0, $6 = 0, $or = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $call7 = 0, $11 = 0, $call9 = 0, $12 = 0, $call11 = 0, $kernel_module = 0, $13 = 0, $14 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_alloca($mrb, 44) | 0;
    $cmp = ($call | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $0 = $call;
    _memset($call | 0, 0, 44);
    $1 = $call + 8 | 0;
    HEAP8[$1] = 1;
    $idx = $call;
    HEAP32[$idx >> 2] = -1;
    $iseq = $call + 12 | 0;
    $2 = $iseq;
    HEAP32[$2 >> 2] = 91840;
    $ilen = $call + 32 | 0;
    $3 = $ilen;
    HEAP32[$3 >> 2] = 1;
    $object_class = $mrb + 44 | 0;
    $4 = HEAP32[$object_class >> 2] | 0;
    $call1 = _mrb_define_class($mrb, 92908, $4) | 0;
    $proc_class = $mrb + 56 | 0;
    HEAP32[$proc_class >> 2] = $call1;
    $5 = $call1;
    $6 = HEAP32[$5 >> 2] | 0;
    $or = $6 & -522241;
    $7 = $or | 26624;
    HEAP32[$5 >> 2] = $7;
    $8 = HEAP32[$proc_class >> 2] | 0;
    _mrb_define_method($mrb, $8, 111036, 176, 0);
    $9 = HEAP32[$proc_class >> 2] | 0;
    _mrb_define_method($mrb, $9, 106408, 108, 0);
    $10 = HEAP32[$proc_class >> 2] | 0;
    _mrb_define_method($mrb, $10, 102844, 770, 0);
    $call7 = _mrb_proc_new($mrb, $0) | 0;
    $11 = HEAP32[$proc_class >> 2] | 0;
    $call9 = _mrb_intern($mrb, 100084) | 0;
    _mrb_define_method_raw($mrb, $11, $call9, $call7);
    $12 = HEAP32[$proc_class >> 2] | 0;
    $call11 = _mrb_intern($mrb, 97440) | 0;
    _mrb_define_method_raw($mrb, $12, $call11, $call7);
    $kernel_module = $mrb + 96 | 0;
    $13 = HEAP32[$kernel_module >> 2] | 0;
    _mrb_define_class_method($mrb, $13, 95384, 434, 0);
    $14 = HEAP32[$kernel_module >> 2] | 0;
    _mrb_define_method($mrb, $14, 95384, 434, 0);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _mrb_proc_initialize($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $blk = 0, $call = 0, $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $tobool = 0, $call1 = 0, $p = 0, $2 = 0, $3 = 0, $p4 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $blk = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 94572, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $blk, tempInt) | 0) | 0;
    $tt = $blk + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $i = $blk;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $call1 = _mrb_class_get($mrb, 93600) | 0;
    _mrb_raise($mrb, $call1, 92668);
    label = 6;
    break;
   case 5:
    $p = $self;
    $2 = HEAP32[$p >> 2] | 0;
    $3 = $2;
    $p4 = $blk;
    $4 = HEAP32[$p4 >> 2] | 0;
    $5 = $4;
    _mrb_proc_copy($3, $5);
    label = 6;
    break;
   case 6:
    $6 = $agg_result;
    $7 = $self;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_proc_init_copy($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $proc = 0, $call = 0, $tt = 0, $0 = 0, $cmp = 0, $call1 = 0, $p = 0, $1 = 0, $2 = 0, $p3 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $proc = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 111648, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $proc, tempInt) | 0) | 0;
    $tt = $proc + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 13;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call1 = _mrb_class_get($mrb, 93600) | 0;
    _mrb_raise($mrb, $call1, 111048);
    label = 4;
    break;
   case 4:
    $p = $self;
    $1 = HEAP32[$p >> 2] | 0;
    $2 = $1;
    $p3 = $proc;
    $3 = HEAP32[$p3 >> 2] | 0;
    $4 = $3;
    _mrb_proc_copy($2, $4);
    $5 = $agg_result;
    $6 = $self;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2] | 0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_obj_value19($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_fixnum_value($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_obj_value29($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _str_with_class($mrb, $s, $obj) {
  $mrb = $mrb | 0;
  $s = $s | 0;
  $obj = $obj | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  HEAP32[$s + 4 >> 2] = HEAP32[(HEAP32[$obj >> 2] | 0) + 4 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_value44($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_proc_arity($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $2 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $2 = HEAP32[_mrb_proc_iseq(0, HEAP32[$self >> 2] | 0) >> 2] | 0;
  _mrb_fixnum_value($agg_result, ($2 >>> 25 & 31) + ($2 >>> 14 & 31) ^ $2 << 12 >> 31);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_intern($mrb, $cstr) {
  $mrb = $mrb | 0;
  $cstr = $cstr | 0;
  return _mrb_intern_cstr($mrb, $cstr) | 0;
}
function _proc_lambda($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $blk = 0, $call = 0, $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $tobool = 0, $call1 = 0, $p3 = 0, $2 = 0, $3 = 0, $4 = 0, $and = 0, $cmp4 = 0, $5 = 0, $c = 0, $6 = 0, $7 = 0, $call6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $blk = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 94572, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $blk, tempInt) | 0) | 0;
    $tt = $blk + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $i = $blk;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $call1 = _mrb_class_get($mrb, 93600) | 0;
    _mrb_raise($mrb, $call1, 92668);
    label = 5;
    break;
   case 5:
    $p3 = $blk;
    $2 = HEAP32[$p3 >> 2] | 0;
    $3 = $2;
    $4 = HEAP32[$3 >> 2] | 0;
    $and = $4 & 524288;
    $cmp4 = ($and | 0) == 0;
    if ($cmp4) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $5 = $2;
    $c = $2 + 4 | 0;
    $6 = $c;
    $7 = HEAP32[$6 >> 2] | 0;
    $call6 = _mrb_obj_alloc($mrb, 13, $7) | 0;
    $8 = $call6;
    _mrb_proc_copy($8, $5);
    $9 = $call6;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $10 | 524288;
    HEAP32[$9 >> 2] = $11;
    $12 = $call6 | 0;
    _mrb_obj_value19($agg_result, $12);
    label = 8;
    break;
   case 7:
    $13 = $agg_result;
    $14 = $blk;
    HEAP32[$13 >> 2] = HEAP32[$14 >> 2] | 0;
    HEAP32[$13 + 4 >> 2] = HEAP32[$14 + 4 >> 2] | 0;
    HEAP32[$13 + 8 >> 2] = HEAP32[$14 + 8 >> 2] | 0;
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_open_allocf($f, $ud) {
  $f = $f | 0;
  $ud = $ud | 0;
  var $call = 0, $0 = 0, $cmp = 0, $ud1 = 0, $1 = 0, $allocf = 0, $2 = 0, $current_white_part = 0, $3 = 0, $call2 = 0, $4 = 0, $c = 0, $5 = 0, $6 = 0, $root_c = 0, $7 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = FUNCTION_TABLE_iiiii[$f & 1023](0, 0, 584, $ud) | 0;
    $0 = $call;
    $cmp = ($call | 0) == 0;
    if ($cmp) {
      $retval_0 = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _memset($call | 0, 0, 580);
    $ud1 = $call + 580 | 0;
    $1 = $ud1;
    HEAP32[$1 >> 2] = $ud;
    $allocf = $call + 4 | 0;
    $2 = $allocf;
    HEAP32[$2 >> 2] = $f;
    $current_white_part = $call + 524 | 0;
    $3 = $current_white_part;
    HEAP32[$3 >> 2] = 1;
    _mrb_init_heap($0);
    $call2 = _mrb_malloc($0, 52) | 0;
    $4 = $call2;
    $c = $call + 8 | 0;
    $5 = $c;
    HEAP32[$5 >> 2] = $4;
    _memset($call2 | 0, 0, 52);
    $6 = HEAP32[$5 >> 2] | 0;
    $root_c = $call + 12 | 0;
    $7 = $root_c;
    HEAP32[$7 >> 2] = $6;
    _mrb_init_core($0);
    $retval_0 = $0;
    label = 4;
    break;
   case 4:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_alloca($mrb, $size) {
  $mrb = $mrb | 0;
  $size = $size | 0;
  var $add = 0, $call = 0, $cmp = 0, $0 = 0, $mems = 0, $1 = 0, $next = 0, $buf = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $add = $size + 4 | 0;
    $call = _mrb_malloc($mrb, $add) | 0;
    $cmp = ($call | 0) == 0;
    if ($cmp) {
      $retval_0 = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $0 = $call;
    $mems = $mrb + 560 | 0;
    $1 = HEAP32[$mems >> 2] | 0;
    $next = $call;
    HEAP32[$next >> 2] = $1;
    HEAP32[$mems >> 2] = $0;
    $buf = $call + 4 | 0;
    $retval_0 = $buf;
    label = 4;
    break;
   case 4:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_open() {
  return _mrb_open_allocf(316, 0) | 0;
}
function _allocf($mrb, $p, $size, $ud) {
  $mrb = $mrb | 0;
  $p = $p | 0;
  $size = $size | 0;
  $ud = $ud | 0;
  var $cmp = 0, $call = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = ($size | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _free($p);
    $retval_0 = 0;
    label = 5;
    break;
   case 4:
    $call = _realloc($p, $size) | 0;
    $retval_0 = $call;
    label = 5;
    break;
   case 5:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_irep_free($mrb, $irep) {
  $mrb = $mrb | 0;
  $irep = $irep | 0;
  var $flags = 0, $0 = 0, $and = 0, $tobool = 0, $iseq = 0, $1 = 0, $2 = 0, $pool = 0, $3 = 0, $4 = 0, $syms = 0, $5 = 0, $6 = 0, $filename = 0, $7 = 0, $lines = 0, $8 = 0, $9 = 0, $10 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $flags = $irep + 8 | 0;
    $0 = HEAP8[$flags] | 0;
    $and = $0 & 1;
    $tobool = $and << 24 >> 24 == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $iseq = $irep + 12 | 0;
    $1 = HEAP32[$iseq >> 2] | 0;
    $2 = $1;
    _mrb_free($mrb, $2);
    label = 4;
    break;
   case 4:
    $pool = $irep + 16 | 0;
    $3 = HEAP32[$pool >> 2] | 0;
    $4 = $3;
    _mrb_free($mrb, $4);
    $syms = $irep + 20 | 0;
    $5 = HEAP32[$syms >> 2] | 0;
    $6 = $5;
    _mrb_free($mrb, $6);
    $filename = $irep + 24 | 0;
    $7 = HEAP32[$filename >> 2] | 0;
    _mrb_free($mrb, $7);
    $lines = $irep + 28 | 0;
    $8 = HEAP32[$lines >> 2] | 0;
    $9 = $8;
    _mrb_free($mrb, $9);
    $10 = $irep;
    _mrb_free($mrb, $10);
    return;
  }
}
function _mrb_free_context($mrb, $c) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  var $tobool = 0, $stbase = 0, $0 = 0, $1 = 0, $cibase = 0, $2 = 0, $3 = 0, $rescue = 0, $4 = 0, $5 = 0, $ensure = 0, $6 = 0, $7 = 0, $8 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($c | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $stbase = $c + 8 | 0;
    $0 = HEAP32[$stbase >> 2] | 0;
    $1 = $0;
    _mrb_free($mrb, $1);
    $cibase = $c + 20 | 0;
    $2 = HEAP32[$cibase >> 2] | 0;
    $3 = $2;
    _mrb_free($mrb, $3);
    $rescue = $c + 28 | 0;
    $4 = HEAP32[$rescue >> 2] | 0;
    $5 = $4;
    _mrb_free($mrb, $5);
    $ensure = $c + 36 | 0;
    $6 = HEAP32[$ensure >> 2] | 0;
    $7 = $6;
    _mrb_free($mrb, $7);
    $8 = $c;
    _mrb_free($mrb, $8);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _mrb_close($mrb) {
  $mrb = $mrb | 0;
  var $irep_len = 0, $0 = 0, $cmp15 = 0, $irep = 0, $1 = 0, $2 = 0, $i_016 = 0, $arrayidx = 0, $3 = 0, $inc = 0, $4 = 0, $cmp = 0, $5 = 0, $_lcssa = 0, $6 = 0, $root_c = 0, $7 = 0, $8 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    _mrb_final_core($mrb);
    _mrb_gc_free_gv($mrb);
    $irep_len = $mrb + 28 | 0;
    $0 = HEAP32[$irep_len >> 2] | 0;
    $cmp15 = ($0 | 0) == 0;
    $irep = $mrb + 24 | 0;
    $1 = HEAP32[$irep >> 2] | 0;
    if ($cmp15) {
      $_lcssa = $1;
      label = 4;
      break;
    } else {
      $i_016 = 0;
      $2 = $1;
      label = 3;
      break;
    }
   case 3:
    $arrayidx = $2 + ($i_016 << 2) | 0;
    $3 = HEAP32[$arrayidx >> 2] | 0;
    _mrb_irep_free($mrb, $3);
    $inc = $i_016 + 1 | 0;
    $4 = HEAP32[$irep_len >> 2] | 0;
    $cmp = $inc >>> 0 < $4 >>> 0;
    $5 = HEAP32[$irep >> 2] | 0;
    if ($cmp) {
      $i_016 = $inc;
      $2 = $5;
      label = 3;
      break;
    } else {
      $_lcssa = $5;
      label = 4;
      break;
    }
   case 4:
    $6 = $_lcssa;
    _mrb_free($mrb, $6);
    $root_c = $mrb + 12 | 0;
    $7 = HEAP32[$root_c >> 2] | 0;
    _mrb_free_context($mrb, $7);
    _mrb_free_symtbl($mrb);
    _mrb_free_heap($mrb);
    _mrb_alloca_free($mrb);
    $8 = $mrb;
    _mrb_free($mrb, $8);
    return;
  }
}
function _mrb_alloca_free($mrb) {
  $mrb = $mrb | 0;
  var $cmp = 0, $mems = 0, $0 = 0, $tobool5 = 0, $p_06 = 0, $next = 0, $1 = 0, $2 = 0, $tobool = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = ($mrb | 0) == 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $mems = $mrb + 560 | 0;
    $0 = HEAP32[$mems >> 2] | 0;
    $tobool5 = ($0 | 0) == 0;
    if ($tobool5) {
      label = 5;
      break;
    } else {
      $p_06 = $0;
      label = 4;
      break;
    }
   case 4:
    $next = $p_06 | 0;
    $1 = HEAP32[$next >> 2] | 0;
    $2 = $p_06;
    _mrb_free($mrb, $2);
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      $p_06 = $1;
      label = 4;
      break;
    }
   case 5:
    return;
  }
}
function _mrb_add_irep($mrb) {
  $mrb = $mrb | 0;
  var $irep1 = 0, $0 = 0, $tobool = 0, $irep_len = 0, $1 = 0, $cmp = 0, $add = 0, $add_ = 0, $call = 0, $2 = 0, $irep_capa = 0, $irep_capa5 = 0, $3 = 0, $irep_len6 = 0, $4 = 0, $cmp7 = 0, $5 = 0, $6 = 0, $cmp1230 = 0, $7 = 0, $8 = 0, $mul = 0, $cmp12 = 0, $_lcssa = 0, $9 = 0, $10 = 0, $mul16 = 0, $call17 = 0, $11 = 0, $12 = 0, $cmp2028 = 0, $i_029 = 0, $13 = 0, $arrayidx = 0, $inc = 0, $14 = 0, $cmp20 = 0, $call24 = 0, $15 = 0, $irep_len25 = 0, $16 = 0, $17 = 0, $arrayidx27 = 0, $18 = 0, $inc29 = 0, $idx = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $irep1 = $mrb + 24 | 0;
    $0 = HEAP32[$irep1 >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $irep_len = $mrb + 28 | 0;
    $1 = HEAP32[$irep_len >> 2] | 0;
    $cmp = $1 >>> 0 > 256;
    $add = $1 + 1 | 0;
    $add_ = $cmp ? $add : 256;
    $call = _mrb_calloc($mrb, $add_, 4) | 0;
    $2 = $call;
    HEAP32[$irep1 >> 2] = $2;
    $irep_capa = $mrb + 32 | 0;
    HEAP32[$irep_capa >> 2] = $add_;
    label = 11;
    break;
   case 4:
    $irep_capa5 = $mrb + 32 | 0;
    $3 = HEAP32[$irep_capa5 >> 2] | 0;
    $irep_len6 = $mrb + 28 | 0;
    $4 = HEAP32[$irep_len6 >> 2] | 0;
    $cmp7 = $3 >>> 0 > $4 >>> 0;
    if ($cmp7) {
      label = 11;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $5 = HEAP32[$irep_capa5 >> 2] | 0;
    $6 = HEAP32[$irep_len6 >> 2] | 0;
    $cmp1230 = $5 >>> 0 > $6 >>> 0;
    if ($cmp1230) {
      $_lcssa = $5;
      label = 9;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $7 = HEAP32[$irep_len6 >> 2] | 0;
    $8 = $5;
    label = 7;
    break;
   case 7:
    $mul = $8 << 1;
    $cmp12 = $mul >>> 0 > $7 >>> 0;
    if ($cmp12) {
      label = 8;
      break;
    } else {
      $8 = $mul;
      label = 7;
      break;
    }
   case 8:
    HEAP32[$irep_capa5 >> 2] = $mul;
    $_lcssa = $mul;
    label = 9;
    break;
   case 9:
    $9 = HEAP32[$irep1 >> 2] | 0;
    $10 = $9;
    $mul16 = $_lcssa << 2;
    $call17 = _mrb_realloc($mrb, $10, $mul16) | 0;
    $11 = $call17;
    HEAP32[$irep1 >> 2] = $11;
    $12 = HEAP32[$irep_capa5 >> 2] | 0;
    $cmp2028 = $3 >>> 0 < $12 >>> 0;
    if ($cmp2028) {
      $i_029 = $3;
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $13 = HEAP32[$irep1 >> 2] | 0;
    $arrayidx = $13 + ($i_029 << 2) | 0;
    HEAP32[$arrayidx >> 2] = 0;
    $inc = $i_029 + 1 | 0;
    $14 = HEAP32[$irep_capa5 >> 2] | 0;
    $cmp20 = $inc >>> 0 < $14 >>> 0;
    if ($cmp20) {
      $i_029 = $inc;
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $call24 = _mrb_malloc($mrb, 44) | 0;
    $15 = $call24;
    _memset($call24 | 0, 0, 44);
    $irep_len25 = $mrb + 28 | 0;
    $16 = HEAP32[$irep_len25 >> 2] | 0;
    $17 = HEAP32[$irep1 >> 2] | 0;
    $arrayidx27 = $17 + ($16 << 2) | 0;
    HEAP32[$arrayidx27 >> 2] = $15;
    $18 = HEAP32[$irep_len25 >> 2] | 0;
    $inc29 = $18 + 1 | 0;
    HEAP32[$irep_len25 >> 2] = $inc29;
    $idx = $call24;
    HEAP32[$idx >> 2] = $18;
    return $15 | 0;
  }
  return 0;
}
function _mrb_top_self($agg_result, $mrb) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  var $top_self = 0, $0 = 0, $tobool = 0, $object_class = 0, $1 = 0, $call = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $top_self = $mrb + 40 | 0;
    $0 = HEAP32[$top_self >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $object_class = $mrb + 44 | 0;
    $1 = HEAP32[$object_class >> 2] | 0;
    $call = _mrb_obj_alloc($mrb, 8, $1) | 0;
    $2 = $call;
    HEAP32[$top_self >> 2] = $2;
    _mrb_define_singleton_method($mrb, $2, 106748, 658, 0);
    $3 = HEAP32[$top_self >> 2] | 0;
    _mrb_define_singleton_method($mrb, $3, 110284, 658, 0);
    label = 4;
    break;
   case 4:
    $4 = HEAP32[$top_self >> 2] | 0;
    $5 = $4 | 0;
    _mrb_obj_value29($agg_result, $5);
    return;
  }
}
function _inspect_main($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_str_new($agg_result, $mrb, 105736, 4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_modify($mrb, $s) {
  $mrb = $mrb | 0;
  $s = $s | 0;
  var $0 = 0, $1 = 0, $2 = 0, $and = 0, $tobool = 0, $aux = 0, $shared1 = 0, $3 = 0, $refcnt = 0, $4 = 0, $cmp = 0, $ptr = 0, $5 = 0, $ptr2 = 0, $6 = 0, $cmp3 = 0, $len = 0, $7 = 0, $capa = 0, $8 = 0, $ptr10 = 0, $9 = 0, $len11 = 0, $10 = 0, $add = 0, $call = 0, $tobool12 = 0, $arrayidx = 0, $capa16 = 0, $11 = 0, $12 = 0, $and22 = 0, $tobool23 = 0, $ptr26 = 0, $13 = 0, $len27 = 0, $14 = 0, $add28 = 0, $call29 = 0, $tobool31 = 0, $15 = 0, $16 = 0, $17 = 0, $arrayidx38 = 0, $18 = 0, $capa41 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $s;
    $1 = HEAP32[$0 >> 2] | 0;
    $2 = $1 >>> 11;
    $and = $2 & 1;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $aux = $s + 16 | 0;
    $shared1 = $aux;
    $3 = HEAP32[$shared1 >> 2] | 0;
    $refcnt = $3 + 4 | 0;
    $4 = HEAP32[$refcnt >> 2] | 0;
    $cmp = ($4 | 0) == 1;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $ptr = $s + 20 | 0;
    $5 = HEAP32[$ptr >> 2] | 0;
    $ptr2 = $3 + 8 | 0;
    $6 = HEAP32[$ptr2 >> 2] | 0;
    $cmp3 = ($5 | 0) == ($6 | 0);
    if ($cmp3) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[$ptr >> 2] = $6;
    $len = $3 + 12 | 0;
    $7 = HEAP32[$len >> 2] | 0;
    $capa = $aux | 0;
    HEAP32[$capa >> 2] = $7;
    $8 = $3 | 0;
    _mrb_free($mrb, $8);
    label = 9;
    break;
   case 6:
    $ptr10 = $s + 20 | 0;
    $9 = HEAP32[$ptr10 >> 2] | 0;
    $len11 = $s + 12 | 0;
    $10 = HEAP32[$len11 >> 2] | 0;
    $add = $10 + 1 | 0;
    $call = _mrb_malloc($mrb, $add) | 0;
    $tobool12 = ($9 | 0) == 0;
    if ($tobool12) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _memcpy($call | 0, $9 | 0, $10);
    label = 8;
    break;
   case 8:
    $arrayidx = $call + $10 | 0;
    HEAP8[$arrayidx] = 0;
    HEAP32[$ptr10 >> 2] = $call;
    $capa16 = $aux | 0;
    HEAP32[$capa16 >> 2] = $10;
    _str_decref($mrb, $3);
    label = 9;
    break;
   case 9:
    $11 = HEAP32[$0 >> 2] | 0;
    $12 = $11 & -2049;
    HEAP32[$0 >> 2] = $12;
    label = 14;
    break;
   case 10:
    $and22 = $2 & 2;
    $tobool23 = ($and22 | 0) == 0;
    if ($tobool23) {
      label = 14;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $ptr26 = $s + 20 | 0;
    $13 = HEAP32[$ptr26 >> 2] | 0;
    $len27 = $s + 12 | 0;
    $14 = HEAP32[$len27 >> 2] | 0;
    $add28 = $14 + 1 | 0;
    $call29 = _mrb_malloc($mrb, $add28) | 0;
    HEAP32[$ptr26 >> 2] = $call29;
    $tobool31 = ($13 | 0) == 0;
    if ($tobool31) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $15 = HEAP32[$len27 >> 2] | 0;
    _memcpy($call29 | 0, $13 | 0, $15);
    label = 13;
    break;
   case 13:
    $16 = HEAP32[$len27 >> 2] | 0;
    $17 = HEAP32[$ptr26 >> 2] | 0;
    $arrayidx38 = $17 + $16 | 0;
    HEAP8[$arrayidx38] = 0;
    $18 = HEAP32[$len27 >> 2] | 0;
    $capa41 = $s + 16 | 0;
    HEAP32[$capa41 >> 2] = $18;
    label = 14;
    break;
   case 14:
    return;
  }
}
function _str_decref($mrb, $shared) {
  $mrb = $mrb | 0;
  $shared = $shared | 0;
  var $refcnt = 0, $0 = 0, $dec = 0, $cmp = 0, $nofree = 0, $1 = 0, $tobool = 0, $ptr = 0, $2 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $refcnt = $shared + 4 | 0;
    $0 = HEAP32[$refcnt >> 2] | 0;
    $dec = $0 - 1 | 0;
    HEAP32[$refcnt >> 2] = $dec;
    $cmp = ($dec | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $nofree = $shared | 0;
    $1 = HEAP8[$nofree] | 0;
    $tobool = $1 << 24 >> 24 == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $ptr = $shared + 8 | 0;
    $2 = HEAP32[$ptr >> 2] | 0;
    _mrb_free($mrb, $2);
    label = 5;
    break;
   case 5:
    _mrb_free($mrb, $nofree);
    label = 6;
    break;
   case 6:
    return;
  }
}
function _mrb_str_resize($agg_result, $mrb, $str, $len) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  $len = $len | 0;
  var $p = 0, $0 = 0, $1 = 0, $len1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp2 = 0, $sub = 0, $cmp3 = 0, $or_cond = 0, $ptr = 0, $4 = 0, $5 = 0, $add = 0, $call = 0, $aux = 0, $capa = 0, $ptr7 = 0, $6 = 0, $7 = 0, $arrayidx = 0, $8 = 0, $9 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $str;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    _mrb_str_modify($mrb, $1);
    $len1 = $0 + 12 | 0;
    $2 = $len1;
    $3 = HEAP32[$2 >> 2] | 0;
    $cmp = ($3 | 0) == ($len | 0);
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $cmp2 = ($3 | 0) < ($len | 0);
    $sub = $3 - $len | 0;
    $cmp3 = ($sub | 0) > 1024;
    $or_cond = $cmp2 | $cmp3;
    if ($or_cond) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $ptr = $0 + 20 | 0;
    $4 = $ptr;
    $5 = HEAP32[$4 >> 2] | 0;
    $add = $len + 1 | 0;
    $call = _mrb_realloc($mrb, $5, $add) | 0;
    HEAP32[$4 >> 2] = $call;
    label = 5;
    break;
   case 5:
    $aux = $0 + 16 | 0;
    $capa = $aux;
    HEAP32[$capa >> 2] = $len;
    HEAP32[$2 >> 2] = $len;
    $ptr7 = $0 + 20 | 0;
    $6 = $ptr7;
    $7 = HEAP32[$6 >> 2] | 0;
    $arrayidx = $7 + $len | 0;
    HEAP8[$arrayidx] = 0;
    label = 6;
    break;
   case 6:
    $8 = $agg_result;
    $9 = $str;
    HEAP32[$8 >> 2] = HEAP32[$9 >> 2] | 0;
    HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2] | 0;
    HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_buf_new($agg_result, $mrb, $capa) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $capa = $capa | 0;
  var $call = 0, $_capa = 0, $call2 = 0;
  $call = _mrb_obj_alloc($mrb, 16, HEAP32[$mrb + 60 >> 2] | 0) | 0;
  $_capa = ($capa | 0) < 128 ? 128 : $capa;
  HEAP32[$call + 12 >> 2] = 0;
  HEAP32[$call + 16 >> 2] = $_capa;
  $call2 = _mrb_malloc($mrb, $_capa + 1 | 0) | 0;
  HEAP32[$call + 20 >> 2] = $call2;
  HEAP8[$call2] = 0;
  _mrb_obj_value44($agg_result, $call | 0);
  return;
}
function _mrb_str_buf_cat($agg_result, $mrb, $str, $ptr, $len) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  $ptr = $ptr | 0;
  $len = $len | 0;
  var $cmp = 0, $0 = 0, $1 = 0, $p = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = ($len | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $0 = $agg_result;
    $1 = $str;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 5;
    break;
   case 4:
    $p = $str;
    $2 = HEAP32[$p >> 2] | 0;
    $3 = $2;
    _str_buf_cat($mrb, $3, $ptr, $len);
    $4 = $agg_result;
    $5 = $str;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _str_buf_cat($mrb, $s, $ptr, $len) {
  $mrb = $mrb | 0;
  $s = $s | 0;
  $ptr = $ptr | 0;
  $len = $len | 0;
  var $ptr1 = 0, $0 = 0, $cmp = 0, $len3 = 0, $1 = 0, $add_ptr = 0, $cmp4 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $off_0 = 0, $cmp6 = 0, $capa9 = 0, $2 = 0, $len10 = 0, $3 = 0, $sub = 0, $cmp11 = 0, $call = 0, $4 = 0, $add = 0, $cmp15 = 0, $capa_0 = 0, $cmp17 = 0, $add18 = 0, $cmp19 = 0, $mul = 0, $add21 = 0, $div = 0, $capa_1 = 0, $5 = 0, $add25 = 0, $call26 = 0, $cmp31 = 0, $6 = 0, $add_ptr34 = 0, $ptr_addr_0 = 0, $7 = 0, $8 = 0, $add_ptr38 = 0, $9 = 0, $arrayidx = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    _mrb_str_modify($mrb, $s);
    $ptr1 = $s + 20 | 0;
    $0 = HEAP32[$ptr1 >> 2] | 0;
    $cmp = $0 >>> 0 > $ptr >>> 0;
    if ($cmp) {
      $off_0 = -1;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $len3 = $s + 12 | 0;
    $1 = HEAP32[$len3 >> 2] | 0;
    $add_ptr = $0 + $1 | 0;
    $cmp4 = $add_ptr >>> 0 < $ptr >>> 0;
    if ($cmp4) {
      $off_0 = -1;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $sub_ptr_lhs_cast = $ptr;
    $sub_ptr_rhs_cast = $0;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $off_0 = $sub_ptr_sub;
    label = 5;
    break;
   case 5:
    $cmp6 = ($len | 0) == 0;
    if ($cmp6) {
      label = 16;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $capa9 = $s + 16 | 0;
    $2 = HEAP32[$capa9 >> 2] | 0;
    $len10 = $s + 12 | 0;
    $3 = HEAP32[$len10 >> 2] | 0;
    $sub = 2147483647 - $len | 0;
    $cmp11 = ($3 | 0) < ($sub | 0);
    if ($cmp11) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $call = _mrb_class_get($mrb, 103224) | 0;
    _mrb_raise($mrb, $call, 94036);
    label = 8;
    break;
   case 8:
    $4 = HEAP32[$len10 >> 2] | 0;
    $add = $4 + $len | 0;
    $cmp15 = ($2 | 0) > ($add | 0);
    if ($cmp15) {
      label = 13;
      break;
    } else {
      $capa_0 = $2;
      label = 9;
      break;
    }
   case 9:
    $cmp17 = ($add | 0) > ($capa_0 | 0);
    if ($cmp17) {
      label = 10;
      break;
    } else {
      $capa_1 = $capa_0;
      label = 12;
      break;
    }
   case 10:
    $add18 = $capa_0 + 1 | 0;
    $cmp19 = ($add18 | 0) > 1073741822;
    $mul = $add18 << 1;
    if ($cmp19) {
      label = 11;
      break;
    } else {
      $capa_0 = $mul;
      label = 9;
      break;
    }
   case 11:
    $add21 = $add + 4095 | 0;
    $div = ($add21 | 0) / 4096 & -1;
    $capa_1 = $div;
    label = 12;
    break;
   case 12:
    $5 = HEAP32[$ptr1 >> 2] | 0;
    $add25 = $capa_1 + 1 | 0;
    $call26 = _mrb_realloc($mrb, $5, $add25) | 0;
    HEAP32[$ptr1 >> 2] = $call26;
    HEAP32[$capa9 >> 2] = $capa_1;
    label = 13;
    break;
   case 13:
    $cmp31 = ($off_0 | 0) == -1;
    if ($cmp31) {
      $ptr_addr_0 = $ptr;
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $6 = HEAP32[$ptr1 >> 2] | 0;
    $add_ptr34 = $6 + $off_0 | 0;
    $ptr_addr_0 = $add_ptr34;
    label = 15;
    break;
   case 15:
    $7 = HEAP32[$ptr1 >> 2] | 0;
    $8 = HEAP32[$len10 >> 2] | 0;
    $add_ptr38 = $7 + $8 | 0;
    _memcpy($add_ptr38 | 0, $ptr_addr_0 | 0, $len);
    HEAP32[$len10 >> 2] = $add;
    $9 = HEAP32[$ptr1 >> 2] | 0;
    $arrayidx = $9 + $add | 0;
    HEAP8[$arrayidx] = 0;
    label = 16;
    break;
   case 16:
    return;
  }
}
function _mrb_str_new($agg_result, $mrb, $p, $len) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $p = $p | 0;
  $len = $len | 0;
  _mrb_obj_value44($agg_result, _str_new($mrb, $p, $len) | 0);
  return;
}
function _str_new($mrb, $p, $len) {
  $mrb = $mrb | 0;
  $p = $p | 0;
  $len = $len | 0;
  var $string_class = 0, $0 = 0, $call = 0, $1 = 0, $len1 = 0, $2 = 0, $aux = 0, $len_c = 0, $add = 0, $call2 = 0, $ptr = 0, $call2_c = 0, $tobool = 0, $3 = 0, $4 = 0, $arrayidx = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $string_class = $mrb + 60 | 0;
    $0 = HEAP32[$string_class >> 2] | 0;
    $call = _mrb_obj_alloc($mrb, 16, $0) | 0;
    $1 = $call;
    $len1 = $call + 12 | 0;
    $2 = $len1;
    HEAP32[$2 >> 2] = $len;
    $aux = $call + 16 | 0;
    $len_c = $len;
    HEAP32[$aux >> 2] = $len_c;
    $add = $len + 1 | 0;
    $call2 = _mrb_malloc($mrb, $add) | 0;
    $ptr = $call + 20 | 0;
    $call2_c = $call2;
    HEAP32[$ptr >> 2] = $call2_c;
    $tobool = ($p | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _memcpy($call2 | 0, $p | 0, $len);
    label = 4;
    break;
   case 4:
    $3 = HEAP32[$ptr >> 2] | 0;
    $4 = $3 | 0;
    $arrayidx = $4 + $len | 0;
    HEAP8[$arrayidx] = 0;
    return $1 | 0;
  }
  return 0;
}
function _mrb_str_new_cstr($agg_result, $mrb, $p) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $p = $p | 0;
  var $tobool = 0, $call = 0, $cmp = 0, $call2 = 0, $len_0 = 0, $string_class = 0, $0 = 0, $call4 = 0, $add = 0, $call5 = 0, $ptr = 0, $call5_c = 0, $1 = 0, $2 = 0, $arrayidx = 0, $len11 = 0, $3 = 0, $aux = 0, $len_0_c = 0, $4 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($p | 0) != 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $len_0 = 0;
      label = 5;
      break;
    }
   case 3:
    $call = _strlen($p | 0) | 0;
    $cmp = ($call | 0) < 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      $len_0 = $call;
      label = 5;
      break;
    }
   case 4:
    $call2 = _mrb_class_get($mrb, 103224) | 0;
    _mrb_raise($mrb, $call2, 109836);
    $len_0 = $call;
    label = 5;
    break;
   case 5:
    $string_class = $mrb + 60 | 0;
    $0 = HEAP32[$string_class >> 2] | 0;
    $call4 = _mrb_obj_alloc($mrb, 16, $0) | 0;
    $add = $len_0 + 1 | 0;
    $call5 = _mrb_malloc($mrb, $add) | 0;
    $ptr = $call4 + 20 | 0;
    $call5_c = $call5;
    HEAP32[$ptr >> 2] = $call5_c;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _memcpy($call5 | 0, $p | 0, $len_0);
    label = 7;
    break;
   case 7:
    $1 = HEAP32[$ptr >> 2] | 0;
    $2 = $1 | 0;
    $arrayidx = $2 + $len_0 | 0;
    HEAP8[$arrayidx] = 0;
    $len11 = $call4 + 12 | 0;
    $3 = $len11;
    HEAP32[$3 >> 2] = $len_0;
    $aux = $call4 + 16 | 0;
    $len_0_c = $len_0;
    HEAP32[$aux >> 2] = $len_0_c;
    $4 = $call4 | 0;
    _mrb_obj_value44($agg_result, $4);
    return;
  }
}
function _mrb_str_new_static($agg_result, $mrb, $p, $len) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $p = $p | 0;
  $len = $len | 0;
  var $call = 0, $2 = 0;
  $call = _mrb_obj_alloc($mrb, 16, HEAP32[$mrb + 60 >> 2] | 0) | 0;
  HEAP32[$call + 12 >> 2] = $len;
  HEAP32[$call + 16 >> 2] = 0;
  HEAP32[$call + 20 >> 2] = $p;
  $2 = $call;
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] & 2047 | 4096;
  _mrb_obj_value44($agg_result, $call | 0);
  return;
}
function _mrb_gc_free_str($mrb, $str) {
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $0 = 0, $1 = 0, $2 = 0, $and = 0, $tobool = 0, $aux = 0, $shared = 0, $3 = 0, $and2 = 0, $cmp = 0, $ptr = 0, $4 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $str;
    $1 = HEAP32[$0 >> 2] | 0;
    $2 = $1 >>> 11;
    $and = $2 & 1;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $aux = $str + 16 | 0;
    $shared = $aux;
    $3 = HEAP32[$shared >> 2] | 0;
    _str_decref($mrb, $3);
    label = 6;
    break;
   case 4:
    $and2 = $2 & 2;
    $cmp = ($and2 | 0) == 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $ptr = $str + 20 | 0;
    $4 = HEAP32[$ptr >> 2] | 0;
    _mrb_free($mrb, $4);
    label = 6;
    break;
   case 6:
    return;
  }
}
function _mrb_str_literal($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $string_class = 0, $0 = 0, $call = 0, $p = 0, $1 = 0, $2 = 0, $3 = 0, $and = 0, $tobool = 0, $4 = 0, $aux = 0, $shared1 = 0, $5 = 0, $refcnt = 0, $6 = 0, $inc = 0, $ptr = 0, $7 = 0, $ptr2 = 0, $_c = 0, $len = 0, $8 = 0, $len3 = 0, $9 = 0, $aux4 = 0, $_c12 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $string_class = $mrb + 60 | 0;
    $0 = HEAP32[$string_class >> 2] | 0;
    $call = _mrb_obj_alloc($mrb, 16, $0) | 0;
    $p = $str;
    $1 = HEAP32[$p >> 2] | 0;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $and = $3 & 2048;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $4 = $1;
    _str_make_shared($mrb, $4);
    label = 4;
    break;
   case 4:
    $aux = $1 + 16 | 0;
    $shared1 = $aux;
    $5 = HEAP32[$shared1 >> 2] | 0;
    $refcnt = $5 + 4 | 0;
    $6 = HEAP32[$refcnt >> 2] | 0;
    $inc = $6 + 1 | 0;
    HEAP32[$refcnt >> 2] = $inc;
    $ptr = $5 + 8 | 0;
    $7 = HEAP32[$ptr >> 2] | 0;
    $ptr2 = $call + 20 | 0;
    $_c = $7;
    HEAP32[$ptr2 >> 2] = $_c;
    $len = $5 + 12 | 0;
    $8 = HEAP32[$len >> 2] | 0;
    $len3 = $call + 12 | 0;
    $9 = $len3;
    HEAP32[$9 >> 2] = $8;
    $aux4 = $call + 16 | 0;
    $_c12 = $5;
    HEAP32[$aux4 >> 2] = $_c12;
    $10 = $call;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $11 | 2048;
    HEAP32[$10 >> 2] = $12;
    $13 = $call | 0;
    _mrb_obj_value44($agg_result, $13);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_fixnum_value47($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_nil_value48($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_str_hash($mrb, $str) {
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $p = 0, $0 = 0, $len1 = 0, $1 = 0, $2 = 0, $tobool5 = 0, $ptr = 0, $3 = 0, $4 = 0, $key_08 = 0, $p2_07 = 0, $len_06 = 0, $dec = 0, $mul = 0, $5 = 0, $conv = 0, $add = 0, $incdec_ptr = 0, $tobool = 0, $key_0_lcssa = 0, $shr = 0, $add3 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $str;
    $0 = HEAP32[$p >> 2] | 0;
    $len1 = $0 + 12 | 0;
    $1 = $len1;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool5 = ($2 | 0) == 0;
    if ($tobool5) {
      $key_0_lcssa = 0;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $ptr = $0 + 20 | 0;
    $3 = $ptr;
    $4 = HEAP32[$3 >> 2] | 0;
    $len_06 = $2;
    $p2_07 = $4;
    $key_08 = 0;
    label = 4;
    break;
   case 4:
    $dec = $len_06 - 1 | 0;
    $mul = $key_08 * 65599 & -1;
    $5 = HEAP8[$p2_07] | 0;
    $conv = $5 << 24 >> 24;
    $add = $conv + $mul | 0;
    $incdec_ptr = $p2_07 + 1 | 0;
    $tobool = ($dec | 0) == 0;
    if ($tobool) {
      $key_0_lcssa = $add;
      label = 5;
      break;
    } else {
      $len_06 = $dec;
      $p2_07 = $incdec_ptr;
      $key_08 = $add;
      label = 4;
      break;
    }
   case 5:
    $shr = $key_0_lcssa >> 5;
    $add3 = $shr + $key_0_lcssa | 0;
    STACKTOP = __stackBase__;
    return $add3 | 0;
  }
  return 0;
}
function _str_make_shared($mrb, $s) {
  $mrb = $mrb | 0;
  $s = $s | 0;
  var $0 = 0, $1 = 0, $and = 0, $tobool = 0, $call = 0, $refcnt = 0, $2 = 0, $3 = 0, $and2 = 0, $tobool3 = 0, $ptr = 0, $4 = 0, $ptr5 = 0, $5 = 0, $6 = 0, $7 = 0, $capa = 0, $8 = 0, $len = 0, $9 = 0, $cmp = 0, $ptr10 = 0, $10 = 0, $add = 0, $call12 = 0, $ptr13 = 0, $11 = 0, $ptr17 = 0, $12 = 0, $len19 = 0, $13 = 0, $len20 = 0, $14 = 0, $15 = 0, $_c = 0, $16 = 0, $17 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $s;
    $1 = HEAP32[$0 >> 2] | 0;
    $and = $1 & 2048;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 9;
      break;
    }
   case 3:
    $call = _mrb_malloc($mrb, 16) | 0;
    $refcnt = $call + 4 | 0;
    $2 = $refcnt;
    HEAP32[$2 >> 2] = 1;
    $3 = HEAP32[$0 >> 2] | 0;
    $and2 = $3 & 4096;
    $tobool3 = ($and2 | 0) == 0;
    if ($tobool3) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    HEAP8[$call] = 1;
    $ptr = $s + 20 | 0;
    $4 = HEAP32[$ptr >> 2] | 0;
    $ptr5 = $call + 8 | 0;
    $5 = $ptr5;
    HEAP32[$5 >> 2] = $4;
    $6 = HEAP32[$0 >> 2] | 0;
    $7 = $6 & -4097;
    HEAP32[$0 >> 2] = $7;
    label = 8;
    break;
   case 5:
    HEAP8[$call] = 0;
    $capa = $s + 16 | 0;
    $8 = HEAP32[$capa >> 2] | 0;
    $len = $s + 12 | 0;
    $9 = HEAP32[$len >> 2] | 0;
    $cmp = ($8 | 0) > ($9 | 0);
    $ptr10 = $s + 20 | 0;
    $10 = HEAP32[$ptr10 >> 2] | 0;
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $add = $9 + 1 | 0;
    $call12 = _mrb_realloc($mrb, $10, $add) | 0;
    $ptr13 = $call + 8 | 0;
    $11 = $ptr13;
    HEAP32[$11 >> 2] = $call12;
    HEAP32[$ptr10 >> 2] = $call12;
    label = 8;
    break;
   case 7:
    $ptr17 = $call + 8 | 0;
    $12 = $ptr17;
    HEAP32[$12 >> 2] = $10;
    label = 8;
    break;
   case 8:
    $len19 = $s + 12 | 0;
    $13 = HEAP32[$len19 >> 2] | 0;
    $len20 = $call + 12 | 0;
    $14 = $len20;
    HEAP32[$14 >> 2] = $13;
    $15 = $s + 16 | 0;
    $_c = $call;
    HEAP32[$15 >> 2] = $_c;
    $16 = HEAP32[$0 >> 2] | 0;
    $17 = $16 | 2048;
    HEAP32[$0 >> 2] = $17;
    label = 9;
    break;
   case 9:
    return;
  }
}
function _mrb_str_concat($mrb, $self, $other) {
  $mrb = $mrb | 0;
  $self = $self | 0;
  $other = $other | 0;
  var $tmp = 0, $p = 0, $0 = 0, $1 = 0, $tt = 0, $2 = 0, $cmp = 0, $3 = 0, $4 = 0, $p2 = 0, $5 = 0, $len3 = 0, $6 = 0, $7 = 0, $len4 = 0, $8 = 0, $9 = 0, $add = 0, $aux = 0, $capa = 0, $10 = 0, $cmp5 = 0, $ptr = 0, $11 = 0, $12 = 0, $add9 = 0, $call = 0, $ptr12 = 0, $13 = 0, $14 = 0, $15 = 0, $add_ptr = 0, $ptr14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $arrayidx = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $other;
  $other = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$other >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$other + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$other + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    _mrb_str_modify($mrb, $1);
    $tt = $other + 8 | 0;
    $2 = HEAP32[$tt >> 2] | 0;
    $cmp = ($2 | 0) == 16;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_str_to_str($tmp, $mrb, $other);
    $3 = $other;
    $4 = $tmp;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    label = 4;
    break;
   case 4:
    $p2 = $other;
    $5 = HEAP32[$p2 >> 2] | 0;
    $len3 = $0 + 12 | 0;
    $6 = $len3;
    $7 = HEAP32[$6 >> 2] | 0;
    $len4 = $5 + 12 | 0;
    $8 = $len4;
    $9 = HEAP32[$8 >> 2] | 0;
    $add = $9 + $7 | 0;
    $aux = $0 + 16 | 0;
    $capa = $aux;
    $10 = HEAP32[$capa >> 2] | 0;
    $cmp5 = ($10 | 0) < ($add | 0);
    if ($cmp5) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[$capa >> 2] = $add;
    $ptr = $0 + 20 | 0;
    $11 = $ptr;
    $12 = HEAP32[$11 >> 2] | 0;
    $add9 = $add + 1 | 0;
    $call = _mrb_realloc($mrb, $12, $add9) | 0;
    HEAP32[$11 >> 2] = $call;
    label = 6;
    break;
   case 6:
    $ptr12 = $0 + 20 | 0;
    $13 = $ptr12;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = HEAP32[$6 >> 2] | 0;
    $add_ptr = $14 + $15 | 0;
    $ptr14 = $5 + 20 | 0;
    $16 = $ptr14;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = HEAP32[$8 >> 2] | 0;
    _memcpy($add_ptr | 0, $17 | 0, $18);
    HEAP32[$6 >> 2] = $add;
    $19 = HEAP32[$13 >> 2] | 0;
    $arrayidx = $19 + $add | 0;
    HEAP8[$arrayidx] = 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_to_str($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $tmp = 0, $tmp4 = 0, $tt = 0, $0 = 0, $cmp = 0, $s_sroa_0_0__cast3 = 0, $s_sroa_0_0_copyload4 = 0, $s_sroa_2_8__idx14 = 0, $s_sroa_2_8_copyload15 = 0, $1 = 0, $2 = 0, $s_sroa_0_0__cast1 = 0, $s_sroa_0_0_copyload2 = 0, $s_sroa_2_8__idx12 = 0, $s_sroa_2_8_copyload13 = 0, $s_sroa_2_0 = 0, $_pn_in = 0, $s_sroa_0_0 = 0, $_pn = 0, $s_sroa_1_0_in_in = 0, $s_sroa_1_0_in = 0, $s_sroa_1_0 = 0, $3 = 0, $s_sroa_0_0__cast = 0, $s_sroa_1_4__idx = 0, $s_sroa_1_4__cast = 0, $s_sroa_2_8__idx11 = 0, $4 = 0, $5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $tmp4 = __stackBase__ + 12 | 0;
    $tt = $str + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 16;
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_check_convert_type($tmp, $mrb, $str, 16, 95072, 96776);
    $s_sroa_0_0__cast3 = $tmp;
    $s_sroa_0_0_copyload4 = HEAP32[$s_sroa_0_0__cast3 >> 2] | 0;
    $s_sroa_2_8__idx14 = $tmp + 8 | 0;
    $s_sroa_2_8_copyload15 = HEAP32[$s_sroa_2_8__idx14 >> 2] | 0;
    $1 = $s_sroa_2_8_copyload15 | $s_sroa_0_0_copyload4;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 4;
      break;
    } else {
      $s_sroa_0_0 = $s_sroa_0_0_copyload4;
      $_pn_in = $tmp;
      $s_sroa_2_0 = $s_sroa_2_8_copyload15;
      label = 5;
      break;
    }
   case 4:
    _mrb_convert_type($tmp4, $mrb, $str, 16, 95072, 94024);
    $s_sroa_0_0__cast1 = $tmp4;
    $s_sroa_0_0_copyload2 = HEAP32[$s_sroa_0_0__cast1 >> 2] | 0;
    $s_sroa_2_8__idx12 = $tmp4 + 8 | 0;
    $s_sroa_2_8_copyload13 = HEAP32[$s_sroa_2_8__idx12 >> 2] | 0;
    $s_sroa_0_0 = $s_sroa_0_0_copyload2;
    $_pn_in = $tmp4;
    $s_sroa_2_0 = $s_sroa_2_8_copyload13;
    label = 5;
    break;
   case 5:
    $_pn = $_pn_in;
    $s_sroa_1_0_in_in = $_pn + 4 | 0;
    $s_sroa_1_0_in = $s_sroa_1_0_in_in;
    $s_sroa_1_0 = HEAP32[$s_sroa_1_0_in >> 2] | 0;
    $3 = $agg_result;
    $s_sroa_0_0__cast = $agg_result;
    HEAP32[$s_sroa_0_0__cast >> 2] = $s_sroa_0_0;
    $s_sroa_1_4__idx = $3 + 4 | 0;
    $s_sroa_1_4__cast = $s_sroa_1_4__idx;
    HEAP32[$s_sroa_1_4__cast >> 2] = $s_sroa_1_0;
    $s_sroa_2_8__idx11 = $agg_result + 8 | 0;
    HEAP32[$s_sroa_2_8__idx11 >> 2] = $s_sroa_2_0;
    label = 7;
    break;
   case 6:
    $4 = $agg_result;
    $5 = $str;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_plus($agg_result, $mrb, $a, $b) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $0 = 0, $1 = 0, $2 = 0, $4 = 0, $call = 0, $ptr = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $a;
  $a = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$a >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$a + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$a + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $b;
  $b = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$b >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$b + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$b + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $0 = HEAP32[$a >> 2] | 0;
  $1 = HEAP32[$b >> 2] | 0;
  $2 = $0 + 12 | 0;
  $4 = $1 + 12 | 0;
  $call = _str_new($mrb, 0, (HEAP32[$4 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) | 0) | 0;
  $ptr = $call + 20 | 0;
  _memcpy(HEAP32[$ptr >> 2] | 0, HEAP32[$0 + 20 >> 2] | 0, HEAP32[$2 >> 2] | 0);
  _memcpy((HEAP32[$ptr >> 2] | 0) + (HEAP32[$2 >> 2] | 0) | 0, HEAP32[$1 + 20 >> 2] | 0, HEAP32[$4 >> 2] | 0);
  _mrb_obj_value44($agg_result, $call | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_size($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_fixnum_value47($agg_result, HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_cmp($mrb, $str1, $str2) {
  $mrb = $mrb | 0;
  $str1 = $str1 | 0;
  $str2 = $str2 | 0;
  var $p = 0, $0 = 0, $p3 = 0, $1 = 0, $len4 = 0, $2 = 0, $3 = 0, $len5 = 0, $4 = 0, $5 = 0, $cmp = 0, $_ = 0, $ptr = 0, $6 = 0, $7 = 0, $ptr8 = 0, $8 = 0, $9 = 0, $call = 0, $cmp9 = 0, $cmp12 = 0, $_10 = 0, $cmp20 = 0, $_11 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str1;
  $str1 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str1 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str1 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str1 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $str2;
  $str2 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str2 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str2 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str2 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $str1;
    $0 = HEAP32[$p >> 2] | 0;
    $p3 = $str2;
    $1 = HEAP32[$p3 >> 2] | 0;
    $len4 = $0 + 12 | 0;
    $2 = $len4;
    $3 = HEAP32[$2 >> 2] | 0;
    $len5 = $1 + 12 | 0;
    $4 = $len5;
    $5 = HEAP32[$4 >> 2] | 0;
    $cmp = ($3 | 0) > ($5 | 0);
    $_ = $cmp ? $5 : $3;
    $ptr = $0 + 20 | 0;
    $6 = $ptr;
    $7 = HEAP32[$6 >> 2] | 0;
    $ptr8 = $1 + 20 | 0;
    $8 = $ptr8;
    $9 = HEAP32[$8 >> 2] | 0;
    $call = _memcmp($7 | 0, $9 | 0, $_ | 0) | 0;
    $cmp9 = ($call | 0) == 0;
    if ($cmp9) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $cmp12 = ($3 | 0) == ($5 | 0);
    if ($cmp12) {
      $retval_0 = 0;
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $_10 = $cmp ? 1 : -1;
    $retval_0 = $_10;
    label = 6;
    break;
   case 5:
    $cmp20 = ($call | 0) > 0;
    $_11 = $cmp20 ? 1 : -1;
    $retval_0 = $_11;
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_str_equal($mrb, $str1, $str2) {
  $mrb = $mrb | 0;
  $str1 = $str1 | 0;
  $str2 = $str2 | 0;
  var $tmp = 0, $call = 0, $tobool = 0, $tt = 0, $0 = 0, $i = 0, $1 = 0, $tobool4 = 0, $call7 = 0, $call8 = 0, $tobool9 = 0, $2 = 0, $3 = 0, $call12 = 0, $call14 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $str1;
  $str1 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str1 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str1 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str1 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $str2;
  $str2 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str2 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str2 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str2 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $call = _mrb_obj_equal(0, $str1, $str2) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $retval_0 = 1;
      label = 8;
      break;
    }
   case 3:
    $tt = $str2 + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    if (($0 | 0) == 0) {
      label = 4;
      break;
    } else if (($0 | 0) == 16) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $i = $str2;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool4 = ($1 | 0) == 0;
    if ($tobool4) {
      $retval_0 = 0;
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $call7 = _mrb_intern2($mrb, 96776, 6) | 0;
    $call8 = _mrb_respond_to($mrb, $str2, $call7) | 0;
    $tobool9 = ($call8 | 0) == 0;
    if ($tobool9) {
      $retval_0 = 0;
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _mrb_funcall($tmp, $mrb, $str2, 96776, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    $2 = $str2;
    $3 = $tmp;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    $call12 = _mrb_equal($mrb, $tmp, $str1) | 0;
    $retval_0 = $call12;
    label = 8;
    break;
   case 7:
    $call14 = _str_eql($str1, $str2) | 0;
    $retval_0 = $call14;
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _str_eql($str1, $str2) {
  $str1 = $str1 | 0;
  $str2 = $str2 | 0;
  var $p = 0, $0 = 0, $len1 = 0, $1 = 0, $2 = 0, $p3 = 0, $3 = 0, $len4 = 0, $4 = 0, $5 = 0, $cmp = 0, $ptr = 0, $6 = 0, $7 = 0, $ptr9 = 0, $8 = 0, $9 = 0, $call = 0, $cmp10 = 0, $_ = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str1;
  $str1 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str1 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str1 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str1 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $str2;
  $str2 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str2 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str2 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str2 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $str1;
    $0 = HEAP32[$p >> 2] | 0;
    $len1 = $0 + 12 | 0;
    $1 = $len1;
    $2 = HEAP32[$1 >> 2] | 0;
    $p3 = $str2;
    $3 = HEAP32[$p3 >> 2] | 0;
    $len4 = $3 + 12 | 0;
    $4 = $len4;
    $5 = HEAP32[$4 >> 2] | 0;
    $cmp = ($2 | 0) == ($5 | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      $retval_0 = 0;
      label = 4;
      break;
    }
   case 3:
    $ptr = $0 + 20 | 0;
    $6 = $ptr;
    $7 = HEAP32[$6 >> 2] | 0;
    $ptr9 = $3 + 20 | 0;
    $8 = $ptr9;
    $9 = HEAP32[$8 >> 2] | 0;
    $call = _memcmp($7 | 0, $9 | 0, $2 | 0) | 0;
    $cmp10 = ($call | 0) == 0;
    $_ = $cmp10 & 1;
    $retval_0 = $_;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_str_dup($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $0 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $0 = HEAP32[$str >> 2] | 0;
  _mrb_str_new($agg_result, $mrb, HEAP32[$0 + 20 >> 2] | 0, HEAP32[$0 + 12 >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_substr($agg_result, $mrb, $str, $beg, $len) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  $beg = $beg | 0;
  $len = $len | 0;
  var $cmp = 0, $p = 0, $0 = 0, $len1 = 0, $1 = 0, $2 = 0, $tobool = 0, $_len = 0, $cmp7 = 0, $cmp10 = 0, $add = 0, $cmp15 = 0, $beg_addr_0 = 0, $add19 = 0, $3 = 0, $len22 = 0, $4 = 0, $5 = 0, $cmp23 = 0, $sub = 0, $len_addr_1 = 0, $cmp29 = 0, $_len_addr_1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = ($len | 0) < 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value48($agg_result);
    label = 10;
    break;
   case 4:
    $p = $str;
    $0 = HEAP32[$p >> 2] | 0;
    $len1 = $0 + 12 | 0;
    $1 = $len1;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    $_len = $tobool ? 0 : $len;
    $cmp7 = ($2 | 0) < ($beg | 0);
    if ($cmp7) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _mrb_nil_value48($agg_result);
    label = 10;
    break;
   case 6:
    $cmp10 = ($beg | 0) < 0;
    if ($cmp10) {
      label = 7;
      break;
    } else {
      $beg_addr_0 = $beg;
      label = 9;
      break;
    }
   case 7:
    $add = $2 + $beg | 0;
    $cmp15 = ($add | 0) < 0;
    if ($cmp15) {
      label = 8;
      break;
    } else {
      $beg_addr_0 = $add;
      label = 9;
      break;
    }
   case 8:
    _mrb_nil_value48($agg_result);
    label = 10;
    break;
   case 9:
    $add19 = $beg_addr_0 + $_len | 0;
    $3 = HEAP32[$p >> 2] | 0;
    $len22 = $3 + 12 | 0;
    $4 = $len22;
    $5 = HEAP32[$4 >> 2] | 0;
    $cmp23 = ($add19 | 0) > ($5 | 0);
    $sub = $5 - $beg_addr_0 | 0;
    $len_addr_1 = $cmp23 ? $sub : $_len;
    $cmp29 = ($len_addr_1 | 0) > 0;
    $_len_addr_1 = $cmp29 ? $len_addr_1 : 0;
    _mrb_str_subseq($agg_result, $mrb, $str, $beg_addr_0, $_len_addr_1);
    label = 10;
    break;
   case 10:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_subseq($agg_result, $mrb, $str, $beg, $len) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  $beg = $beg | 0;
  $len = $len | 0;
  var $0 = 0, $2 = 0, $call = 0, $7 = 0, $refcnt = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $0 = HEAP32[$str >> 2] | 0;
  _str_make_shared($mrb, $0);
  $2 = HEAP32[$0 + 16 >> 2] | 0;
  $call = _mrb_obj_alloc($mrb, 16, HEAP32[$mrb + 60 >> 2] | 0) | 0;
  HEAP32[$call + 20 >> 2] = (HEAP32[$0 + 20 >> 2] | 0) + $beg | 0;
  HEAP32[$call + 12 >> 2] = $len;
  HEAP32[$call + 16 >> 2] = $2;
  $7 = $call;
  HEAP32[$7 >> 2] = HEAP32[$7 >> 2] | 2048;
  $refcnt = $2 + 4 | 0;
  HEAP32[$refcnt >> 2] = (HEAP32[$refcnt >> 2] | 0) + 1 | 0;
  _mrb_obj_value44($agg_result, $call | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_buf_append($agg_result, $mrb, $str, $str2) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  $str2 = $str2 | 0;
  var $0 = 0, $5 = 0, $6 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $str2;
  $str2 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str2 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str2 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str2 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $0 = HEAP32[$str2 >> 2] | 0;
  _mrb_str_cat(__stackBase__ | 0, $mrb, $str, HEAP32[$0 + 20 >> 2] | 0, HEAP32[$0 + 12 >> 2] | 0);
  $5 = $agg_result;
  $6 = $str;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2] | 0;
  HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
  HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_cat($agg_result, $mrb, $str, $ptr, $len) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  $ptr = $ptr | 0;
  $len = $len | 0;
  var $cmp = 0, $call = 0, $p = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = ($len | 0) < 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 103224) | 0;
    _mrb_raise($mrb, $call, 109872);
    label = 4;
    break;
   case 4:
    $p = $str;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    _str_buf_cat($mrb, $1, $ptr, $len);
    $2 = $agg_result;
    $3 = $str;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_intern($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_symbol_value($agg_result, _mrb_intern_str($mrb, $self) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_symbol_value($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  var $v_sroa_1_2__raw_idx = 0, $v_sroa_1_2_idx = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP16[$agg_result >> 1] = $i;
  $v_sroa_1_2__raw_idx = $agg_result + 2 | 0;
  $v_sroa_1_2_idx = __stackBase__ | 0;
  HEAP16[$v_sroa_1_2__raw_idx >> 1] = HEAP16[$v_sroa_1_2_idx >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 2 >> 1] = HEAP16[$v_sroa_1_2_idx + 2 >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 4 >> 1] = HEAP16[$v_sroa_1_2_idx + 4 >> 1] | 0;
  HEAP32[$agg_result + 8 >> 2] = 4;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_as_string($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $tmp = 0, $tt = 0, $0 = 0, $cmp = 0, $1 = 0, $2 = 0, $str_sroa_1_8__idx4 = 0, $str_sroa_1_8_copyload5 = 0, $cmp2 = 0, $str_sroa_0_0__idx1 = 0, $str_sroa_0_0_copyload2 = 0.0, $str_sroa_0_0__idx = 0, $str_sroa_1_8__idx3 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $tt = $obj + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 16;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $1 = $agg_result;
    $2 = $obj;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    label = 7;
    break;
   case 4:
    _mrb_funcall($tmp, $mrb, $obj, 94024, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    $str_sroa_1_8__idx4 = $tmp + 8 | 0;
    $str_sroa_1_8_copyload5 = HEAP32[$str_sroa_1_8__idx4 >> 2] | 0;
    $cmp2 = ($str_sroa_1_8_copyload5 | 0) == 16;
    if ($cmp2) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _mrb_any_to_s($agg_result, $mrb, $obj);
    label = 7;
    break;
   case 6:
    $str_sroa_0_0__idx1 = $tmp | 0;
    $str_sroa_0_0_copyload2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$str_sroa_0_0__idx1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$str_sroa_0_0__idx1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $str_sroa_0_0__idx = $agg_result | 0;
    HEAPF64[tempDoublePtr >> 3] = $str_sroa_0_0_copyload2, HEAP32[$str_sroa_0_0__idx >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$str_sroa_0_0__idx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $str_sroa_1_8__idx3 = $agg_result + 8 | 0;
    HEAP32[$str_sroa_1_8__idx3 >> 2] = $str_sroa_1_8_copyload5;
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ptr_to_str($agg_result, $mrb, $p) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $p = $p | 0;
  var $0 = 0, $call = 0, $ptr = 0, $1 = 0, $incdec_ptr = 0, $incdec_ptr1 = 0, $p2_0 = 0, $n_0 = 0, $rem = 0, $arrayidx = 0, $2 = 0, $incdec_ptr2 = 0, $div = 0, $cmp = 0, $3 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $len = 0, $cmp416 = 0, $p1_018 = 0, $p2_117 = 0, $4 = 0, $incdec_ptr5 = 0, $5 = 0, $incdec_ptr6 = 0, $cmp4 = 0, $6 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $p;
    $call = _str_new($mrb, 0, 10) | 0;
    $ptr = $call + 20 | 0;
    $1 = HEAP32[$ptr >> 2] | 0;
    $incdec_ptr = $1 + 1 | 0;
    HEAP8[$1] = 48;
    $incdec_ptr1 = $1 + 2 | 0;
    HEAP8[$incdec_ptr] = 120;
    $n_0 = $0;
    $p2_0 = $incdec_ptr1;
    label = 3;
    break;
   case 3:
    $rem = ($n_0 | 0) % 16;
    $arrayidx = $rem + 78888 | 0;
    $2 = HEAP8[$arrayidx] | 0;
    $incdec_ptr2 = $p2_0 + 1 | 0;
    HEAP8[$p2_0] = $2;
    $div = ($n_0 | 0) / 16 & -1;
    $cmp = ($n_0 | 0) > 15;
    if ($cmp) {
      $n_0 = $div;
      $p2_0 = $incdec_ptr2;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    HEAP8[$incdec_ptr2] = 0;
    $3 = HEAP32[$ptr >> 2] | 0;
    $sub_ptr_lhs_cast = $incdec_ptr2;
    $sub_ptr_rhs_cast = $3;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $len = $call + 12 | 0;
    HEAP32[$len >> 2] = $sub_ptr_sub;
    $cmp416 = $incdec_ptr1 >>> 0 < $incdec_ptr2 >>> 0;
    if ($cmp416) {
      $p2_117 = $incdec_ptr2;
      $p1_018 = $incdec_ptr1;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $4 = HEAP8[$p1_018] | 0;
    $incdec_ptr5 = $p2_117 - 1 | 0;
    $5 = HEAP8[$incdec_ptr5] | 0;
    $incdec_ptr6 = $p1_018 + 1 | 0;
    HEAP8[$p1_018] = $5;
    HEAP8[$incdec_ptr5] = $4;
    $cmp4 = $incdec_ptr6 >>> 0 < $incdec_ptr5 >>> 0;
    if ($cmp4) {
      $p2_117 = $incdec_ptr5;
      $p1_018 = $incdec_ptr6;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $6 = $call | 0;
    _mrb_obj_value44($agg_result, $6);
    return;
  }
}
function _mrb_check_string_type($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_check_convert_type($agg_result, $mrb, $str, 16, 95072, 96776);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_cstr_to_inum($agg_result, $mrb, $str, $base, $badcheck) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  $base = $base | 0;
  $badcheck = $badcheck | 0;
  var $end = 0, $agg_tmp = 0, $agg_tmp201 = 0, $agg_tmp230 = 0, $tobool = 0, $tobool1 = 0, $str_addr_0 = 0, $0 = 0, $conv = 0, $call = 0, $tobool4 = 0, $incdec_ptr = 0, $1 = 0, $incdec_ptr8 = 0, $incdec_ptr14 = 0, $sign_0 = 0, $str_addr_1 = 0, $2 = 0, $tobool26 = 0, $cmp30 = 0, $cmp35 = 0, $arrayidx38 = 0, $3 = 0, $conv39 = 0, $cmp44 = 0, $sub = 0, $sub_ = 0, $base_addr_0 = 0, $4 = 0, $cmp54 = 0, $arrayidx56 = 0, $5 = 0, $add_ptr = 0, $6 = 0, $cmp71 = 0, $arrayidx74 = 0, $7 = 0, $add_ptr84 = 0, $8 = 0, $cmp90 = 0, $arrayidx93 = 0, $9 = 0, $add_ptr103 = 0, $10 = 0, $cmp109 = 0, $arrayidx112 = 0, $11 = 0, $add_ptr122 = 0, $base_addr_0_off = 0, $12 = 0, $call131 = 0, $base_addr_062 = 0, $str_addr_2 = 0, $13 = 0, $cmp135 = 0, $str_addr_3 = 0, $us_0 = 0, $incdec_ptr139 = 0, $14 = 0, $inc = 0, $cmp149 = 0, $_pr = 0, $15 = 0, $tobool157 = 0, $conv160 = 0, $call161 = 0, $tobool162 = 0, $str_addr_4 = 0, $16 = 0, $conv167 = 0, $isdigittmp = 0, $isdigit = 0, $sub170 = 0, $call171 = 0, $tobool172 = 0, $add = 0, $call176 = 0, $tobool177 = 0, $add180 = 0, $_add180 = 0, $cond185 = 0, $cmp186 = 0, $cmp189 = 0, $or_cond = 0, $tobool192 = 0, $call196 = 0, $cmp197 = 0, $call200 = 0, $tobool203 = 0, $17 = 0, $cmp205 = 0, $18 = 0, $19 = 0, $tobool21170 = 0, $20 = 0, $21 = 0, $conv212 = 0, $call213 = 0, $tobool214 = 0, $22 = 0, $incdec_ptr216 = 0, $23 = 0, $tobool211 = 0, $24 = 0, $25 = 0, $tobool218 = 0, $tobool223 = 0, $sub226 = 0, $cond228 = 0, $str_addr_5 = 0, $call229 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $end = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 4 | 0;
    $agg_tmp201 = __stackBase__ + 16 | 0;
    $agg_tmp230 = __stackBase__ + 28 | 0;
    $tobool = ($str | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $str_addr_0 = $str;
      label = 5;
      break;
    }
   case 3:
    $tobool1 = ($badcheck | 0) == 0;
    if ($tobool1) {
      label = 4;
      break;
    } else {
      $str_addr_5 = 0;
      label = 56;
      break;
    }
   case 4:
    _mrb_fixnum_value47($agg_result, 0);
    label = 57;
    break;
   case 5:
    $0 = HEAP8[$str_addr_0] | 0;
    $conv = $0 & 255;
    $call = _isspace($conv | 0) | 0;
    $tobool4 = ($call | 0) == 0;
    $incdec_ptr = $str_addr_0 + 1 | 0;
    if ($tobool4) {
      label = 6;
      break;
    } else {
      $str_addr_0 = $incdec_ptr;
      label = 5;
      break;
    }
   case 6:
    $1 = HEAP8[$str_addr_0] | 0;
    if (($1 << 24 >> 24 | 0) == 43) {
      label = 7;
      break;
    } else if (($1 << 24 >> 24 | 0) == 45) {
      label = 8;
      break;
    } else {
      $str_addr_1 = $str_addr_0;
      $sign_0 = 1;
      label = 9;
      break;
    }
   case 7:
    $incdec_ptr8 = $str_addr_0 + 1 | 0;
    $str_addr_1 = $incdec_ptr8;
    $sign_0 = 1;
    label = 9;
    break;
   case 8:
    $incdec_ptr14 = $str_addr_0 + 1 | 0;
    $str_addr_1 = $incdec_ptr14;
    $sign_0 = 0;
    label = 9;
    break;
   case 9:
    $2 = HEAP8[$str_addr_1] | 0;
    if (($2 << 24 >> 24 | 0) == 43 | ($2 << 24 >> 24 | 0) == 45) {
      label = 10;
      break;
    } else {
      label = 12;
      break;
    }
   case 10:
    $tobool26 = ($badcheck | 0) == 0;
    if ($tobool26) {
      label = 11;
      break;
    } else {
      $str_addr_5 = $str_addr_1;
      label = 56;
      break;
    }
   case 11:
    _mrb_fixnum_value47($agg_result, 0);
    label = 57;
    break;
   case 12:
    $cmp30 = ($base | 0) < 1;
    if ($cmp30) {
      label = 13;
      break;
    } else {
      $base_addr_0 = $base;
      label = 16;
      break;
    }
   case 13:
    $cmp35 = $2 << 24 >> 24 == 48;
    if ($cmp35) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $arrayidx38 = $str_addr_1 + 1 | 0;
    $3 = HEAP8[$arrayidx38] | 0;
    $conv39 = $3 << 24 >> 24;
    if (($conv39 | 0) == 98 | ($conv39 | 0) == 66) {
      label = 17;
      break;
    } else if (($conv39 | 0) == 68 | ($conv39 | 0) == 100) {
      label = 23;
      break;
    } else if (($conv39 | 0) == 120 | ($conv39 | 0) == 88) {
      label = 26;
      break;
    } else {
      label = 20;
      break;
    }
   case 15:
    $cmp44 = ($base | 0) < -1;
    $sub = -$base | 0;
    $sub_ = $cmp44 ? $sub : 10;
    $base_addr_0 = $sub_;
    label = 16;
    break;
   case 16:
    if (($base_addr_0 | 0) == 2) {
      label = 17;
      break;
    } else if (($base_addr_0 | 0) == 8) {
      label = 20;
      break;
    } else if (($base_addr_0 | 0) == 10) {
      label = 23;
      break;
    } else if (($base_addr_0 | 0) == 16) {
      label = 26;
      break;
    } else if (($base_addr_0 | 0) == 3 | ($base_addr_0 | 0) == 4 | ($base_addr_0 | 0) == 5 | ($base_addr_0 | 0) == 6 | ($base_addr_0 | 0) == 7 | ($base_addr_0 | 0) == 9 | ($base_addr_0 | 0) == 11 | ($base_addr_0 | 0) == 12 | ($base_addr_0 | 0) == 13 | ($base_addr_0 | 0) == 14 | ($base_addr_0 | 0) == 15) {
      $str_addr_2 = $str_addr_1;
      $base_addr_062 = $base_addr_0;
      label = 31;
      break;
    } else {
      label = 29;
      break;
    }
   case 17:
    $4 = HEAP8[$str_addr_1] | 0;
    $cmp54 = $4 << 24 >> 24 == 48;
    if ($cmp54) {
      label = 18;
      break;
    } else {
      $str_addr_2 = $str_addr_1;
      $base_addr_062 = 2;
      label = 31;
      break;
    }
   case 18:
    $arrayidx56 = $str_addr_1 + 1 | 0;
    $5 = HEAP8[$arrayidx56] | 0;
    if (($5 << 24 >> 24 | 0) == 98 | ($5 << 24 >> 24 | 0) == 66) {
      label = 19;
      break;
    } else {
      $str_addr_2 = $str_addr_1;
      $base_addr_062 = 2;
      label = 31;
      break;
    }
   case 19:
    $add_ptr = $str_addr_1 + 2 | 0;
    $str_addr_2 = $add_ptr;
    $base_addr_062 = 2;
    label = 31;
    break;
   case 20:
    $6 = HEAP8[$str_addr_1] | 0;
    $cmp71 = $6 << 24 >> 24 == 48;
    if ($cmp71) {
      label = 21;
      break;
    } else {
      $str_addr_2 = $str_addr_1;
      $base_addr_062 = 8;
      label = 31;
      break;
    }
   case 21:
    $arrayidx74 = $str_addr_1 + 1 | 0;
    $7 = HEAP8[$arrayidx74] | 0;
    if (($7 << 24 >> 24 | 0) == 111 | ($7 << 24 >> 24 | 0) == 79) {
      label = 22;
      break;
    } else {
      $str_addr_2 = $str_addr_1;
      $base_addr_062 = 8;
      label = 31;
      break;
    }
   case 22:
    $add_ptr84 = $str_addr_1 + 2 | 0;
    $str_addr_2 = $add_ptr84;
    $base_addr_062 = 8;
    label = 31;
    break;
   case 23:
    $8 = HEAP8[$str_addr_1] | 0;
    $cmp90 = $8 << 24 >> 24 == 48;
    if ($cmp90) {
      label = 24;
      break;
    } else {
      $str_addr_2 = $str_addr_1;
      $base_addr_062 = 10;
      label = 31;
      break;
    }
   case 24:
    $arrayidx93 = $str_addr_1 + 1 | 0;
    $9 = HEAP8[$arrayidx93] | 0;
    if (($9 << 24 >> 24 | 0) == 100 | ($9 << 24 >> 24 | 0) == 68) {
      label = 25;
      break;
    } else {
      $str_addr_2 = $str_addr_1;
      $base_addr_062 = 10;
      label = 31;
      break;
    }
   case 25:
    $add_ptr103 = $str_addr_1 + 2 | 0;
    $str_addr_2 = $add_ptr103;
    $base_addr_062 = 10;
    label = 31;
    break;
   case 26:
    $10 = HEAP8[$str_addr_1] | 0;
    $cmp109 = $10 << 24 >> 24 == 48;
    if ($cmp109) {
      label = 27;
      break;
    } else {
      $str_addr_2 = $str_addr_1;
      $base_addr_062 = 16;
      label = 31;
      break;
    }
   case 27:
    $arrayidx112 = $str_addr_1 + 1 | 0;
    $11 = HEAP8[$arrayidx112] | 0;
    if (($11 << 24 >> 24 | 0) == 120 | ($11 << 24 >> 24 | 0) == 88) {
      label = 28;
      break;
    } else {
      $str_addr_2 = $str_addr_1;
      $base_addr_062 = 16;
      label = 31;
      break;
    }
   case 28:
    $add_ptr122 = $str_addr_1 + 2 | 0;
    $str_addr_2 = $add_ptr122;
    $base_addr_062 = 16;
    label = 31;
    break;
   case 29:
    $base_addr_0_off = $base_addr_0 - 2 | 0;
    $12 = $base_addr_0_off >>> 0 > 34;
    if ($12) {
      label = 30;
      break;
    } else {
      $str_addr_2 = $str_addr_1;
      $base_addr_062 = $base_addr_0;
      label = 31;
      break;
    }
   case 30:
    $call131 = _mrb_class_get($mrb, 103224) | 0;
    _mrb_fixnum_value47($agg_tmp, $base_addr_0);
    _mrb_raisef($mrb, $call131, 93236, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    $str_addr_2 = $str_addr_1;
    $base_addr_062 = $base_addr_0;
    label = 31;
    break;
   case 31:
    $13 = HEAP8[$str_addr_2] | 0;
    $cmp135 = $13 << 24 >> 24 == 48;
    if ($cmp135) {
      $us_0 = 0;
      $str_addr_3 = $str_addr_2;
      label = 32;
      break;
    } else {
      $str_addr_4 = $str_addr_2;
      label = 38;
      break;
    }
   case 32:
    $incdec_ptr139 = $str_addr_3 + 1 | 0;
    $14 = HEAP8[$incdec_ptr139] | 0;
    if (($14 << 24 >> 24 | 0) == 48) {
      $us_0 = 0;
      $str_addr_3 = $incdec_ptr139;
      label = 32;
      break;
    } else if (($14 << 24 >> 24 | 0) == 95) {
      label = 33;
      break;
    } else {
      $15 = $14;
      label = 35;
      break;
    }
   case 33:
    $inc = $us_0 + 1 | 0;
    $cmp149 = ($us_0 | 0) > 0;
    if ($cmp149) {
      label = 34;
      break;
    } else {
      $us_0 = $inc;
      $str_addr_3 = $incdec_ptr139;
      label = 32;
      break;
    }
   case 34:
    $_pr = HEAP8[$incdec_ptr139] | 0;
    $15 = $_pr;
    label = 35;
    break;
   case 35:
    $tobool157 = $15 << 24 >> 24 == 0;
    if ($tobool157) {
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    $conv160 = $15 & 255;
    $call161 = _isspace($conv160 | 0) | 0;
    $tobool162 = ($call161 | 0) == 0;
    if ($tobool162) {
      $str_addr_4 = $incdec_ptr139;
      label = 38;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    $str_addr_4 = $str_addr_3;
    label = 38;
    break;
   case 38:
    $16 = HEAP8[$str_addr_4] | 0;
    $conv167 = $16 << 24 >> 24;
    $isdigittmp = $conv167 - 48 | 0;
    $isdigit = $isdigittmp >>> 0 < 10;
    if ($isdigit) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    $sub170 = $conv167 - 48 | 0;
    $cond185 = $sub170;
    label = 43;
    break;
   case 40:
    $call171 = _islower($conv167 | 0) | 0;
    $tobool172 = ($call171 | 0) == 0;
    if ($tobool172) {
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    $add = $conv167 - 87 | 0;
    $cond185 = $add;
    label = 43;
    break;
   case 42:
    $call176 = _isupper($conv167 | 0) | 0;
    $tobool177 = ($call176 | 0) == 0;
    $add180 = $conv167 - 55 | 0;
    $_add180 = $tobool177 ? -1 : $add180;
    $cond185 = $_add180;
    label = 43;
    break;
   case 43:
    $cmp186 = ($cond185 | 0) > -1;
    $cmp189 = ($cond185 | 0) < ($base_addr_062 | 0);
    $or_cond = $cmp186 & $cmp189;
    if ($or_cond) {
      label = 46;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    $tobool192 = ($badcheck | 0) == 0;
    if ($tobool192) {
      label = 45;
      break;
    } else {
      $str_addr_5 = $str_addr_4;
      label = 56;
      break;
    }
   case 45:
    _mrb_fixnum_value47($agg_result, 0);
    label = 57;
    break;
   case 46:
    $call196 = _strtoul($str_addr_4 | 0, $end | 0, $base_addr_062 | 0) | 0;
    $cmp197 = ($call196 | 0) < 0;
    if ($cmp197) {
      label = 47;
      break;
    } else {
      label = 48;
      break;
    }
   case 47:
    $call200 = _mrb_class_get($mrb, 103224) | 0;
    _mrb_str_new_cstr($agg_tmp201, $mrb, $str_addr_4);
    _mrb_raisef($mrb, $call200, 92416, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp201 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp201 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp201 + 8 >> 2] | 0, tempInt) | 0);
    label = 48;
    break;
   case 48:
    $tobool203 = ($badcheck | 0) == 0;
    if ($tobool203) {
      label = 55;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    $17 = HEAP32[$end >> 2] | 0;
    $cmp205 = ($17 | 0) == ($str_addr_4 | 0);
    if ($cmp205) {
      $str_addr_5 = $str_addr_4;
      label = 56;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    $18 = HEAP32[$end >> 2] | 0;
    $19 = HEAP8[$18] | 0;
    $tobool21170 = $19 << 24 >> 24 == 0;
    if ($tobool21170) {
      label = 51;
      break;
    } else {
      $21 = $19;
      label = 52;
      break;
    }
   case 51:
    $20 = HEAP32[$end >> 2] | 0;
    $24 = $20;
    label = 54;
    break;
   case 52:
    $conv212 = $21 & 255;
    $call213 = _isspace($conv212 | 0) | 0;
    $tobool214 = ($call213 | 0) == 0;
    $22 = HEAP32[$end >> 2] | 0;
    if ($tobool214) {
      $24 = $22;
      label = 54;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    $incdec_ptr216 = $22 + 1 | 0;
    HEAP32[$end >> 2] = $incdec_ptr216;
    $23 = HEAP8[$incdec_ptr216] | 0;
    $tobool211 = $23 << 24 >> 24 == 0;
    if ($tobool211) {
      label = 51;
      break;
    } else {
      $21 = $23;
      label = 52;
      break;
    }
   case 54:
    $25 = HEAP8[$24] | 0;
    $tobool218 = $25 << 24 >> 24 == 0;
    if ($tobool218) {
      label = 55;
      break;
    } else {
      $str_addr_5 = $str_addr_4;
      label = 56;
      break;
    }
   case 55:
    $tobool223 = ($sign_0 | 0) != 0;
    $sub226 = -$call196 | 0;
    $cond228 = $tobool223 ? $call196 : $sub226;
    _mrb_fixnum_value47($agg_result, $cond228);
    label = 57;
    break;
   case 56:
    $call229 = _mrb_class_get($mrb, 103224) | 0;
    _mrb_str_new_cstr($agg_tmp230, $mrb, $str_addr_5);
    _mrb_raisef($mrb, $call229, 111188, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp230 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp230 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp230 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_fixnum_value47($agg_result, 0);
    label = 57;
    break;
   case 57:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_string_value_cstr($mrb, $ptr) {
  $mrb = $mrb | 0;
  $ptr = $ptr | 0;
  var $p = 0, $0 = 0, $ptr1 = 0, $1 = 0, $2 = 0, $tobool = 0, $len = 0, $3 = 0, $4 = 0, $call = 0, $cmp = 0, $call2 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $ptr;
    $0 = HEAP32[$p >> 2] | 0;
    $ptr1 = $0 + 20 | 0;
    $1 = $ptr1;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $len = $0 + 12 | 0;
    $3 = $len;
    $4 = HEAP32[$3 >> 2] | 0;
    $call = _strlen($2 | 0) | 0;
    $cmp = ($4 | 0) == ($call | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call2 = _mrb_class_get($mrb, 103224) | 0;
    _mrb_raise($mrb, $call2, 99272);
    label = 5;
    break;
   case 5:
    return $2 | 0;
  }
  return 0;
}
function _mrb_str_to_inum($agg_result, $mrb, $str, $base, $badcheck) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  $base = $base | 0;
  $badcheck = $badcheck | 0;
  var $tmp = 0, $0 = 0, $1 = 0, $tobool = 0, $call = 0, $p = 0, $2 = 0, $ptr = 0, $3 = 0, $4 = 0, $s_0 = 0, $tobool1 = 0, $p4 = 0, $5 = 0, $len5 = 0, $6 = 0, $7 = 0, $arrayidx = 0, $8 = 0, $tobool6 = 0, $call9 = 0, $ptr10 = 0, $9 = 0, $s_1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    _mrb_str_to_str($tmp, $mrb, $str);
    $0 = $str;
    $1 = $tmp;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    $tobool = ($badcheck | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _mrb_string_value_cstr($mrb, $str) | 0;
    $s_0 = $call;
    label = 5;
    break;
   case 4:
    $p = $str;
    $2 = HEAP32[$p >> 2] | 0;
    $ptr = $2 + 20 | 0;
    $3 = $ptr;
    $4 = HEAP32[$3 >> 2] | 0;
    $s_0 = $4;
    label = 5;
    break;
   case 5:
    $tobool1 = ($s_0 | 0) == 0;
    if ($tobool1) {
      $s_1 = 0;
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $p4 = $str;
    $5 = HEAP32[$p4 >> 2] | 0;
    $len5 = $5 + 12 | 0;
    $6 = $len5;
    $7 = HEAP32[$6 >> 2] | 0;
    $arrayidx = $s_0 + $7 | 0;
    $8 = HEAP8[$arrayidx] | 0;
    $tobool6 = $8 << 24 >> 24 == 0;
    if ($tobool6) {
      $s_1 = $s_0;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $call9 = _str_new($mrb, $s_0, $7) | 0;
    $ptr10 = $call9 + 20 | 0;
    $9 = HEAP32[$ptr10 >> 2] | 0;
    $s_1 = $9;
    label = 8;
    break;
   case 8:
    _mrb_cstr_to_inum($agg_result, $mrb, $s_1, $base, $badcheck);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_cstr_to_dbl($mrb, $p, $badcheck) {
  $mrb = $mrb | 0;
  $p = $p | 0;
  $badcheck = $badcheck | 0;
  var $end = 0, $agg_tmp = 0, $buf = 0, $tobool = 0, $p_addr_0 = 0, $0 = 0, $conv = 0, $call = 0, $tobool1 = 0, $incdec_ptr = 0, $tobool2 = 0, $1 = 0, $cmp = 0, $arrayidx6 = 0, $2 = 0, $call16 = 0.0, $3 = 0, $cmp17 = 0, $p_addr_1 = 0, $d_0 = 0.0, $call22 = 0, $4 = 0, $tobool25 = 0, $arraydecay = 0, $add_ptr28 = 0, $5 = 0, $cmp3052 = 0, $n_056 = 0, $p_addr_255 = 0, $incdec_ptr35 = 0, $6 = 0, $incdec_ptr36 = 0, $7 = 0, $cmp30 = 0, $cmp32 = 0, $or_cond = 0, $p_addr_3 = 0, $8 = 0, $cmp52 = 0, $or_cond38 = 0, $cmp56 = 0, $or_cond39 = 0, $incdec_ptr60 = 0, $9 = 0, $_off = 0, $10 = 0, $p_addr_4 = 0, $incdec_ptr71 = 0, $11 = 0, $cmp73 = 0, $p_addr_5 = 0, $incdec_ptr79 = 0, $12 = 0, $p_addr_3_ph48 = 0, $prev_1_ph49 = 0, $incdec_ptr83 = 0, $p_addr_3_ph = 0, $n_1_ph = 0, $prev_1_ph = 0, $cmp80 = 0, $cmp48 = 0, $call10542 = 0.0, $13 = 0, $cmp91 = 0, $call10545 = 0.0, $arrayidx94 = 0, $14 = 0, $call105 = 0.0, $call10543 = 0.0, $15 = 0, $tobool108 = 0, $cmp110 = 0, $or_cond41 = 0, $16 = 0, $17 = 0, $tobool11646 = 0, $18 = 0, $19 = 0, $conv118 = 0, $call119 = 0, $tobool120 = 0, $20 = 0, $incdec_ptr123 = 0, $21 = 0, $tobool116 = 0, $22 = 0, $23 = 0, $tobool125 = 0, $retval_0 = 0.0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 92 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $end = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 4 | 0;
    $buf = __stackBase__ + 16 | 0;
    $tobool = ($p | 0) == 0;
    if ($tobool) {
      $retval_0 = 0.0;
      label = 34;
      break;
    } else {
      $p_addr_0 = $p;
      label = 3;
      break;
    }
   case 3:
    $0 = HEAP8[$p_addr_0] | 0;
    $conv = $0 & 255;
    $call = _isspace($conv | 0) | 0;
    $tobool1 = ($call | 0) == 0;
    $incdec_ptr = $p_addr_0 + 1 | 0;
    if ($tobool1) {
      label = 4;
      break;
    } else {
      $p_addr_0 = $incdec_ptr;
      label = 3;
      break;
    }
   case 4:
    $tobool2 = ($badcheck | 0) != 0;
    if ($tobool2) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $1 = HEAP8[$p_addr_0] | 0;
    $cmp = $1 << 24 >> 24 == 48;
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $arrayidx6 = $p_addr_0 + 1 | 0;
    $2 = HEAP8[$arrayidx6] | 0;
    if (($2 << 24 >> 24 | 0) == 120 | ($2 << 24 >> 24 | 0) == 88) {
      $retval_0 = 0.0;
      label = 34;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $call16 = +_strtod($p_addr_0, $end);
    $3 = HEAP32[$end >> 2] | 0;
    $cmp17 = ($p_addr_0 | 0) == ($3 | 0);
    if ($cmp17) {
      label = 8;
      break;
    } else {
      label = 10;
      break;
    }
   case 8:
    if ($tobool2) {
      $d_0 = $call16;
      $p_addr_1 = $p_addr_0;
      label = 9;
      break;
    } else {
      $retval_0 = $call16;
      label = 34;
      break;
    }
   case 9:
    $call22 = _mrb_class_get($mrb, 103224) | 0;
    _mrb_str_new_cstr($agg_tmp, $mrb, $p_addr_1);
    _mrb_raisef($mrb, $call22, 110684, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    $retval_0 = $d_0;
    label = 34;
    break;
   case 10:
    $4 = HEAP8[$3] | 0;
    $tobool25 = $4 << 24 >> 24 == 0;
    if ($tobool25) {
      $retval_0 = $call16;
      label = 34;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $arraydecay = $buf | 0;
    $add_ptr28 = $buf + 73 | 0;
    $5 = HEAP32[$end >> 2] | 0;
    $cmp3052 = $p_addr_0 >>> 0 < $5 >>> 0;
    if ($cmp3052) {
      $p_addr_255 = $p_addr_0;
      $n_056 = $arraydecay;
      label = 12;
      break;
    } else {
      $prev_1_ph = 0;
      $n_1_ph = $arraydecay;
      $p_addr_3_ph = $p_addr_0;
      label = 21;
      break;
    }
   case 12:
    $incdec_ptr35 = $p_addr_255 + 1 | 0;
    $6 = HEAP8[$p_addr_255] | 0;
    $incdec_ptr36 = $n_056 + 1 | 0;
    HEAP8[$n_056] = $6;
    $7 = HEAP32[$end >> 2] | 0;
    $cmp30 = $incdec_ptr35 >>> 0 < $7 >>> 0;
    $cmp32 = $incdec_ptr36 >>> 0 < $add_ptr28 >>> 0;
    $or_cond = $cmp30 & $cmp32;
    if ($or_cond) {
      $p_addr_255 = $incdec_ptr35;
      $n_056 = $incdec_ptr36;
      label = 12;
      break;
    } else {
      $prev_1_ph = $6;
      $n_1_ph = $incdec_ptr36;
      $p_addr_3_ph = $incdec_ptr35;
      label = 21;
      break;
    }
   case 13:
    $8 = HEAP8[$p_addr_3] | 0;
    if (($8 << 24 >> 24 | 0) == 95) {
      label = 14;
      break;
    } else if (($8 << 24 >> 24 | 0) == 0) {
      label = 22;
      break;
    } else {
      $p_addr_5 = $p_addr_3;
      label = 18;
      break;
    }
   case 14:
    if ($tobool2) {
      label = 15;
      break;
    } else {
      $p_addr_4 = $p_addr_3;
      label = 17;
      break;
    }
   case 15:
    $cmp52 = $prev_1_ph49 << 24 >> 24 > 47;
    $or_cond38 = $cmp48 & $cmp52;
    $cmp56 = $prev_1_ph49 << 24 >> 24 < 58;
    $or_cond39 = $or_cond38 & $cmp56;
    if ($or_cond39) {
      label = 16;
      break;
    } else {
      $d_0 = $call16;
      $p_addr_1 = $p_addr_3;
      label = 9;
      break;
    }
   case 16:
    $incdec_ptr60 = $p_addr_3 + 1 | 0;
    $9 = HEAP8[$incdec_ptr60] | 0;
    $_off = $9 - 48 & 255;
    $10 = ($_off & 255) < 10;
    if ($10) {
      $p_addr_5 = $incdec_ptr60;
      label = 18;
      break;
    } else {
      $d_0 = $call16;
      $p_addr_1 = $incdec_ptr60;
      label = 9;
      break;
    }
   case 17:
    $incdec_ptr71 = $p_addr_4 + 1 | 0;
    $11 = HEAP8[$incdec_ptr71] | 0;
    $cmp73 = $11 << 24 >> 24 == 95;
    if ($cmp73) {
      $p_addr_4 = $incdec_ptr71;
      label = 17;
      break;
    } else {
      $p_addr_3 = $incdec_ptr71;
      label = 13;
      break;
    }
   case 18:
    $incdec_ptr79 = $p_addr_5 + 1 | 0;
    $12 = HEAP8[$p_addr_5] | 0;
    if ($cmp80) {
      label = 20;
      break;
    } else {
      $prev_1_ph49 = $12;
      $p_addr_3_ph48 = $incdec_ptr79;
      label = 19;
      break;
    }
   case 19:
    $p_addr_3 = $p_addr_3_ph48;
    label = 13;
    break;
   case 20:
    $incdec_ptr83 = $n_1_ph + 1 | 0;
    HEAP8[$n_1_ph] = $12;
    $prev_1_ph = $12;
    $n_1_ph = $incdec_ptr83;
    $p_addr_3_ph = $incdec_ptr79;
    label = 21;
    break;
   case 21:
    $cmp80 = $n_1_ph >>> 0 < $add_ptr28 >>> 0;
    $cmp48 = ($n_1_ph | 0) != ($arraydecay | 0);
    $prev_1_ph49 = $prev_1_ph;
    $p_addr_3_ph48 = $p_addr_3_ph;
    label = 19;
    break;
   case 22:
    HEAP8[$n_1_ph] = 0;
    if ($tobool2) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    $call10542 = +_strtod($arraydecay, $end);
    $call10543 = $call10542;
    label = 28;
    break;
   case 24:
    $13 = HEAP8[$arraydecay] | 0;
    $cmp91 = $13 << 24 >> 24 == 48;
    if ($cmp91) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $call10545 = +_strtod($arraydecay, $end);
    $retval_0 = $call10545;
    label = 34;
    break;
   case 26:
    $arrayidx94 = $buf + 1 | 0;
    $14 = HEAP8[$arrayidx94] | 0;
    if (($14 << 24 >> 24 | 0) == 120 | ($14 << 24 >> 24 | 0) == 88) {
      $retval_0 = 0.0;
      label = 34;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $call105 = +_strtod($arraydecay, $end);
    if ($tobool2) {
      $call10543 = $call105;
      label = 28;
      break;
    } else {
      $retval_0 = $call105;
      label = 34;
      break;
    }
   case 28:
    $15 = HEAP32[$end >> 2] | 0;
    $tobool108 = ($15 | 0) == 0;
    $cmp110 = ($arraydecay | 0) == ($15 | 0);
    $or_cond41 = $tobool108 | $cmp110;
    if ($or_cond41) {
      $d_0 = $call10543;
      $p_addr_1 = $arraydecay;
      label = 9;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $16 = HEAP32[$end >> 2] | 0;
    $17 = HEAP8[$16] | 0;
    $tobool11646 = $17 << 24 >> 24 == 0;
    if ($tobool11646) {
      label = 30;
      break;
    } else {
      $19 = $17;
      label = 31;
      break;
    }
   case 30:
    $18 = HEAP32[$end >> 2] | 0;
    $22 = $18;
    label = 33;
    break;
   case 31:
    $conv118 = $19 & 255;
    $call119 = _isspace($conv118 | 0) | 0;
    $tobool120 = ($call119 | 0) == 0;
    $20 = HEAP32[$end >> 2] | 0;
    if ($tobool120) {
      $22 = $20;
      label = 33;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $incdec_ptr123 = $20 + 1 | 0;
    HEAP32[$end >> 2] = $incdec_ptr123;
    $21 = HEAP8[$incdec_ptr123] | 0;
    $tobool116 = $21 << 24 >> 24 == 0;
    if ($tobool116) {
      label = 30;
      break;
    } else {
      $19 = $21;
      label = 31;
      break;
    }
   case 33:
    $23 = HEAP8[$22] | 0;
    $tobool125 = $23 << 24 >> 24 == 0;
    if ($tobool125) {
      $retval_0 = $call10543;
      label = 34;
      break;
    } else {
      $d_0 = $call10543;
      $p_addr_1 = $arraydecay;
      label = 9;
      break;
    }
   case 34:
    STACKTOP = __stackBase__;
    return +$retval_0;
  }
  return 0.0;
}
function _mrb_str_to_dbl($mrb, $str, $badcheck) {
  $mrb = $mrb | 0;
  $str = $str | 0;
  $badcheck = $badcheck | 0;
  var $tmp = 0, $0 = 0, $1 = 0, $p = 0, $2 = 0, $ptr = 0, $3 = 0, $4 = 0, $len3 = 0, $5 = 0, $6 = 0, $tobool = 0, $tobool4 = 0, $call = 0, $tobool5 = 0, $call7 = 0, $arrayidx = 0, $7 = 0, $tobool8 = 0, $call11 = 0, $ptr12 = 0, $8 = 0, $s_0 = 0, $call15 = 0.0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    _mrb_str_to_str($tmp, $mrb, $str);
    $0 = $str;
    $1 = $tmp;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    $p = $str;
    $2 = HEAP32[$p >> 2] | 0;
    $ptr = $2 + 20 | 0;
    $3 = $ptr;
    $4 = HEAP32[$3 >> 2] | 0;
    $len3 = $2 + 12 | 0;
    $5 = $len3;
    $6 = HEAP32[$5 >> 2] | 0;
    $tobool = ($4 | 0) == 0;
    if ($tobool) {
      $s_0 = 0;
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $tobool4 = ($badcheck | 0) == 0;
    if ($tobool4) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call = _memchr($4 | 0, 0, $6 | 0) | 0;
    $tobool5 = ($call | 0) == 0;
    if ($tobool5) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $call7 = _mrb_class_get($mrb, 103224) | 0;
    _mrb_raise($mrb, $call7, 110292);
    label = 6;
    break;
   case 6:
    $arrayidx = $4 + $6 | 0;
    $7 = HEAP8[$arrayidx] | 0;
    $tobool8 = $7 << 24 >> 24 == 0;
    if ($tobool8) {
      $s_0 = $4;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $call11 = _str_new($mrb, $4, $6) | 0;
    $ptr12 = $call11 + 20 | 0;
    $8 = HEAP32[$ptr12 >> 2] | 0;
    $s_0 = $8;
    label = 8;
    break;
   case 8:
    $call15 = +_mrb_cstr_to_dbl($mrb, $s_0, $badcheck);
    STACKTOP = __stackBase__;
    return +$call15;
  }
  return 0.0;
}
function _mrb_str_dump($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $p1 = 0, $0 = 0, $ptr = 0, $1 = 0, $2 = 0, $len4 = 0, $3 = 0, $4 = 0, $add_ptr = 0, $cmp66 = 0, $len_068 = 0, $p_067 = 0, $incdec_ptr = 0, $5 = 0, $conv = 0, $add = 0, $cmp6 = 0, $6 = 0, $cmp15 = 0, $phitmp = 0, $7 = 0, $add17 = 0, $call = 0, $tobool = 0, $inc = 0, $len_0_be = 0, $cmp = 0, $add19 = 0, $len_0_lcssa = 0, $call20 = 0, $8 = 0, $ptr23 = 0, $9 = 0, $10 = 0, $len26 = 0, $11 = 0, $12 = 0, $add_ptr27 = 0, $ptr28 = 0, $13 = 0, $incdec_ptr29 = 0, $cmp3162 = 0, $p_164 = 0, $q_063 = 0, $incdec_ptr35 = 0, $14 = 0, $conv36 = 0, $incdec_ptr38 = 0, $incdec_ptr39 = 0, $incdec_ptr41 = 0, $incdec_ptr42 = 0, $incdec_ptr44 = 0, $incdec_ptr45 = 0, $incdec_ptr47 = 0, $incdec_ptr48 = 0, $incdec_ptr50 = 0, $incdec_ptr51 = 0, $incdec_ptr53 = 0, $incdec_ptr54 = 0, $incdec_ptr56 = 0, $incdec_ptr57 = 0, $incdec_ptr59 = 0, $incdec_ptr60 = 0, $incdec_ptr62 = 0, $incdec_ptr63 = 0, $cmp65 = 0, $15 = 0, $incdec_ptr79 = 0, $q_1 = 0, $incdec_ptr81 = 0, $call84 = 0, $tobool85 = 0, $incdec_ptr89 = 0, $q_0_be = 0, $cmp31 = 0, $rem = 0, $add9159 = 0, $arrayidx = 0, $div = 0, $rem96 = 0, $add9760 = 0, $arrayidx99 = 0, $div101 = 0, $add10561 = 0, $add_ptr108 = 0, $q_0_lcssa = 0, $16 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p1 = $str;
    $0 = HEAP32[$p1 >> 2] | 0;
    $ptr = $0 + 20 | 0;
    $1 = $ptr;
    $2 = HEAP32[$1 >> 2] | 0;
    $len4 = $0 + 12 | 0;
    $3 = $len4;
    $4 = HEAP32[$3 >> 2] | 0;
    $add_ptr = $2 + $4 | 0;
    $cmp66 = ($4 | 0) > 0;
    if ($cmp66) {
      $p_067 = $2;
      $len_068 = 2;
      label = 3;
      break;
    } else {
      $len_0_lcssa = 2;
      label = 13;
      break;
    }
   case 3:
    $incdec_ptr = $p_067 + 1 | 0;
    $5 = HEAP8[$p_067] | 0;
    $conv = $5 & 255;
    if (($conv | 0) == 34 | ($conv | 0) == 92 | ($conv | 0) == 10 | ($conv | 0) == 13 | ($conv | 0) == 9 | ($conv | 0) == 12 | ($conv | 0) == 11 | ($conv | 0) == 8 | ($conv | 0) == 7 | ($conv | 0) == 27) {
      label = 4;
      break;
    } else if (($conv | 0) == 35) {
      label = 5;
      break;
    } else {
      label = 9;
      break;
    }
   case 4:
    $add = $len_068 + 2 | 0;
    $len_0_be = $add;
    label = 11;
    break;
   case 5:
    $cmp6 = $incdec_ptr >>> 0 < $add_ptr >>> 0;
    if ($cmp6) {
      label = 6;
      break;
    } else {
      $7 = 1;
      label = 8;
      break;
    }
   case 6:
    $6 = HEAP8[$incdec_ptr] | 0;
    if (($6 << 24 >> 24 | 0) == 36 | ($6 << 24 >> 24 | 0) == 64) {
      $7 = 2;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $cmp15 = $6 << 24 >> 24 == 123;
    $phitmp = $cmp15 ? 2 : 1;
    $7 = $phitmp;
    label = 8;
    break;
   case 8:
    $add17 = $7 + $len_068 | 0;
    $len_0_be = $add17;
    label = 11;
    break;
   case 9:
    $call = _isprint($conv | 0) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 12;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $inc = $len_068 + 1 | 0;
    $len_0_be = $inc;
    label = 11;
    break;
   case 11:
    $cmp = $incdec_ptr >>> 0 < $add_ptr >>> 0;
    if ($cmp) {
      $p_067 = $incdec_ptr;
      $len_068 = $len_0_be;
      label = 3;
      break;
    } else {
      $len_0_lcssa = $len_0_be;
      label = 13;
      break;
    }
   case 12:
    $add19 = $len_068 + 4 | 0;
    $len_0_be = $add19;
    label = 11;
    break;
   case 13:
    $call20 = _str_new($mrb, 0, $len_0_lcssa) | 0;
    _str_with_class(0, $call20, $str);
    $8 = HEAP32[$p1 >> 2] | 0;
    $ptr23 = $8 + 20 | 0;
    $9 = $ptr23;
    $10 = HEAP32[$9 >> 2] | 0;
    $len26 = $8 + 12 | 0;
    $11 = $len26;
    $12 = HEAP32[$11 >> 2] | 0;
    $add_ptr27 = $10 + $12 | 0;
    $ptr28 = $call20 + 20 | 0;
    $13 = HEAP32[$ptr28 >> 2] | 0;
    $incdec_ptr29 = $13 + 1 | 0;
    HEAP8[$13] = 34;
    $cmp3162 = ($12 | 0) > 0;
    if ($cmp3162) {
      $q_063 = $incdec_ptr29;
      $p_164 = $10;
      label = 14;
      break;
    } else {
      $q_0_lcssa = $incdec_ptr29;
      label = 32;
      break;
    }
   case 14:
    $incdec_ptr35 = $p_164 + 1 | 0;
    $14 = HEAP8[$p_164] | 0;
    $conv36 = $14 & 255;
    if (($conv36 | 0) == 34 | ($conv36 | 0) == 92) {
      label = 15;
      break;
    } else if (($conv36 | 0) == 10) {
      label = 16;
      break;
    } else if (($conv36 | 0) == 13) {
      label = 17;
      break;
    } else if (($conv36 | 0) == 9) {
      label = 18;
      break;
    } else if (($conv36 | 0) == 12) {
      label = 19;
      break;
    } else if (($conv36 | 0) == 11) {
      label = 20;
      break;
    } else if (($conv36 | 0) == 8) {
      label = 21;
      break;
    } else if (($conv36 | 0) == 7) {
      label = 22;
      break;
    } else if (($conv36 | 0) == 27) {
      label = 23;
      break;
    } else if (($conv36 | 0) == 35) {
      label = 24;
      break;
    } else {
      label = 28;
      break;
    }
   case 15:
    $incdec_ptr38 = $q_063 + 1 | 0;
    HEAP8[$q_063] = 92;
    $incdec_ptr39 = $q_063 + 2 | 0;
    HEAP8[$incdec_ptr38] = $14;
    $q_0_be = $incdec_ptr39;
    label = 30;
    break;
   case 16:
    $incdec_ptr41 = $q_063 + 1 | 0;
    HEAP8[$q_063] = 92;
    $incdec_ptr42 = $q_063 + 2 | 0;
    HEAP8[$incdec_ptr41] = 110;
    $q_0_be = $incdec_ptr42;
    label = 30;
    break;
   case 17:
    $incdec_ptr44 = $q_063 + 1 | 0;
    HEAP8[$q_063] = 92;
    $incdec_ptr45 = $q_063 + 2 | 0;
    HEAP8[$incdec_ptr44] = 114;
    $q_0_be = $incdec_ptr45;
    label = 30;
    break;
   case 18:
    $incdec_ptr47 = $q_063 + 1 | 0;
    HEAP8[$q_063] = 92;
    $incdec_ptr48 = $q_063 + 2 | 0;
    HEAP8[$incdec_ptr47] = 116;
    $q_0_be = $incdec_ptr48;
    label = 30;
    break;
   case 19:
    $incdec_ptr50 = $q_063 + 1 | 0;
    HEAP8[$q_063] = 92;
    $incdec_ptr51 = $q_063 + 2 | 0;
    HEAP8[$incdec_ptr50] = 102;
    $q_0_be = $incdec_ptr51;
    label = 30;
    break;
   case 20:
    $incdec_ptr53 = $q_063 + 1 | 0;
    HEAP8[$q_063] = 92;
    $incdec_ptr54 = $q_063 + 2 | 0;
    HEAP8[$incdec_ptr53] = 118;
    $q_0_be = $incdec_ptr54;
    label = 30;
    break;
   case 21:
    $incdec_ptr56 = $q_063 + 1 | 0;
    HEAP8[$q_063] = 92;
    $incdec_ptr57 = $q_063 + 2 | 0;
    HEAP8[$incdec_ptr56] = 98;
    $q_0_be = $incdec_ptr57;
    label = 30;
    break;
   case 22:
    $incdec_ptr59 = $q_063 + 1 | 0;
    HEAP8[$q_063] = 92;
    $incdec_ptr60 = $q_063 + 2 | 0;
    HEAP8[$incdec_ptr59] = 97;
    $q_0_be = $incdec_ptr60;
    label = 30;
    break;
   case 23:
    $incdec_ptr62 = $q_063 + 1 | 0;
    HEAP8[$q_063] = 92;
    $incdec_ptr63 = $q_063 + 2 | 0;
    HEAP8[$incdec_ptr62] = 101;
    $q_0_be = $incdec_ptr63;
    label = 30;
    break;
   case 24:
    $cmp65 = $incdec_ptr35 >>> 0 < $add_ptr27 >>> 0;
    if ($cmp65) {
      label = 25;
      break;
    } else {
      $q_1 = $q_063;
      label = 27;
      break;
    }
   case 25:
    $15 = HEAP8[$incdec_ptr35] | 0;
    if (($15 << 24 >> 24 | 0) == 36 | ($15 << 24 >> 24 | 0) == 64 | ($15 << 24 >> 24 | 0) == 123) {
      label = 26;
      break;
    } else {
      $q_1 = $q_063;
      label = 27;
      break;
    }
   case 26:
    $incdec_ptr79 = $q_063 + 1 | 0;
    HEAP8[$q_063] = 92;
    $q_1 = $incdec_ptr79;
    label = 27;
    break;
   case 27:
    $incdec_ptr81 = $q_1 + 1 | 0;
    HEAP8[$q_1] = 35;
    $q_0_be = $incdec_ptr81;
    label = 30;
    break;
   case 28:
    $call84 = _isprint($conv36 | 0) | 0;
    $tobool85 = ($call84 | 0) == 0;
    $incdec_ptr89 = $q_063 + 1 | 0;
    if ($tobool85) {
      label = 31;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    HEAP8[$q_063] = $14;
    $q_0_be = $incdec_ptr89;
    label = 30;
    break;
   case 30:
    $cmp31 = $incdec_ptr35 >>> 0 < $add_ptr27 >>> 0;
    if ($cmp31) {
      $q_063 = $q_0_be;
      $p_164 = $incdec_ptr35;
      label = 14;
      break;
    } else {
      $q_0_lcssa = $q_0_be;
      label = 32;
      break;
    }
   case 31:
    HEAP8[$q_063] = 92;
    $rem = $14 & 7;
    $add9159 = $rem | 48;
    $arrayidx = $q_063 + 3 | 0;
    HEAP8[$arrayidx] = $add9159;
    $div = ($14 & 255) >>> 3;
    $rem96 = $div & 7;
    $add9760 = $rem96 | 48;
    $arrayidx99 = $q_063 + 2 | 0;
    HEAP8[$arrayidx99] = $add9760;
    $div101 = ($14 & 255) >>> 6;
    $add10561 = $div101 | 48;
    HEAP8[$incdec_ptr89] = $add10561;
    $add_ptr108 = $q_063 + 4 | 0;
    $q_0_be = $add_ptr108;
    label = 30;
    break;
   case 32:
    HEAP8[$q_0_lcssa] = 34;
    $16 = $call20 | 0;
    _mrb_obj_value44($agg_result, $16);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_cat_cstr($agg_result, $mrb, $str, $ptr) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  $ptr = $ptr | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_str_cat($agg_result, $mrb, $str, $ptr, _strlen($ptr | 0) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_append($agg_result, $mrb, $str, $str2) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  $str2 = $str2 | 0;
  var $tmp = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $str2;
  $str2 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str2 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str2 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str2 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $tmp = __stackBase__ | 0;
  _mrb_str_to_str($tmp, $mrb, $str2);
  $0 = $str2;
  $1 = $tmp;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  _mrb_str_buf_append($agg_result, $mrb, $str, $tmp);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_inspect($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $buf = 0, $result = 0, $tmp = 0, $tmp36 = 0, $tmp51 = 0, $tmp65 = 0, $tmp66 = 0, $p1 = 0, $0 = 0, $ptr = 0, $1 = 0, $2 = 0, $len = 0, $3 = 0, $4 = 0, $add_ptr = 0, $cmp31 = 0, $arrayidx47 = 0, $arrayidx54 = 0, $arrayidx58 = 0, $arrayidx63 = 0, $arrayidx4728 = 0, $arrayidx49 = 0, $arrayidx34 = 0, $arrayidx = 0, $arrayidx29 = 0, $p_032 = 0, $5 = 0, $conv = 0, $conv31 = 0, $call = 0, $tobool = 0, $cc_0_ph = 0, $rem = 0, $add24 = 0, $div = 0, $rem55 = 0, $add5625 = 0, $conv57 = 0, $div59 = 0, $rem60 = 0, $add6126 = 0, $conv62 = 0, $incdec_ptr = 0, $cmp = 0, $6 = 0, $7 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 88 | 0;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $buf = __stackBase__ | 0;
    $result = __stackBase__ + 16 | 0;
    $tmp = __stackBase__ + 28 | 0;
    $tmp36 = __stackBase__ + 40 | 0;
    $tmp51 = __stackBase__ + 52 | 0;
    $tmp65 = __stackBase__ + 64 | 0;
    $tmp66 = __stackBase__ + 76 | 0;
    _mrb_str_new($result, $mrb, 109332, 1);
    $p1 = $str;
    $0 = HEAP32[$p1 >> 2] | 0;
    $ptr = $0 + 20 | 0;
    $1 = $ptr;
    $2 = HEAP32[$1 >> 2] | 0;
    $len = $0 + 12 | 0;
    $3 = $len;
    $4 = HEAP32[$3 >> 2] | 0;
    $add_ptr = $2 + $4 | 0;
    $cmp31 = ($4 | 0) > 0;
    if ($cmp31) {
      label = 3;
      break;
    } else {
      label = 19;
      break;
    }
   case 3:
    $arrayidx47 = $buf | 0;
    $arrayidx54 = $buf + 3 | 0;
    $arrayidx58 = $buf + 2 | 0;
    $arrayidx63 = $buf + 1 | 0;
    $arrayidx4728 = $buf | 0;
    $arrayidx49 = $buf + 1 | 0;
    $arrayidx34 = $buf | 0;
    $arrayidx = $buf | 0;
    $arrayidx29 = $buf + 1 | 0;
    $p_032 = $2;
    label = 4;
    break;
   case 4:
    $5 = HEAP8[$p_032] | 0;
    $conv = $5 << 24 >> 24;
    if (($5 << 24 >> 24 | 0) == 92 | ($5 << 24 >> 24 | 0) == 34) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP8[$arrayidx] = 92;
    HEAP8[$arrayidx29] = $5;
    _mrb_str_buf_cat($tmp, $mrb, $result, $arrayidx, 2);
    label = 18;
    break;
   case 6:
    $conv31 = $5 & 255;
    $call = _isprint($conv31 | 0) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    HEAP8[$arrayidx34] = $5;
    _mrb_str_buf_cat($tmp36, $mrb, $result, $arrayidx34, 1);
    label = 18;
    break;
   case 8:
    if (($conv | 0) == 13) {
      label = 9;
      break;
    } else if (($conv | 0) == 9) {
      label = 10;
      break;
    } else if (($conv | 0) == 12) {
      label = 11;
      break;
    } else if (($conv | 0) == 11) {
      label = 12;
      break;
    } else if (($conv | 0) == 8) {
      label = 13;
      break;
    } else if (($conv | 0) == 7) {
      label = 14;
      break;
    } else if (($conv | 0) == 27) {
      label = 15;
      break;
    } else if (($conv | 0) == 10) {
      $cc_0_ph = 110;
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 9:
    $cc_0_ph = 114;
    label = 16;
    break;
   case 10:
    $cc_0_ph = 116;
    label = 16;
    break;
   case 11:
    $cc_0_ph = 102;
    label = 16;
    break;
   case 12:
    $cc_0_ph = 118;
    label = 16;
    break;
   case 13:
    $cc_0_ph = 98;
    label = 16;
    break;
   case 14:
    $cc_0_ph = 97;
    label = 16;
    break;
   case 15:
    $cc_0_ph = 101;
    label = 16;
    break;
   case 16:
    HEAP8[$arrayidx4728] = 92;
    HEAP8[$arrayidx49] = $cc_0_ph;
    _mrb_str_buf_cat($tmp51, $mrb, $result, $arrayidx4728, 2);
    label = 18;
    break;
   case 17:
    HEAP8[$arrayidx47] = 92;
    $rem = $5 & 7;
    $add24 = $rem | 48;
    HEAP8[$arrayidx54] = $add24;
    $div = $conv >>> 3;
    $rem55 = $div & 7;
    $add5625 = $rem55 | 48;
    $conv57 = $add5625 & 255;
    HEAP8[$arrayidx58] = $conv57;
    $div59 = $conv >>> 6;
    $rem60 = $div59 & 7;
    $add6126 = $rem60 | 48;
    $conv62 = $add6126 & 255;
    HEAP8[$arrayidx63] = $conv62;
    _mrb_str_buf_cat($tmp65, $mrb, $result, $arrayidx47, 4);
    label = 18;
    break;
   case 18:
    $incdec_ptr = $p_032 + 1 | 0;
    $cmp = $incdec_ptr >>> 0 < $add_ptr >>> 0;
    if ($cmp) {
      $p_032 = $incdec_ptr;
      label = 4;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    _mrb_str_buf_cat($tmp66, $mrb, $result, 109332, 1);
    $6 = $agg_result;
    $7 = $result;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_init_string($mrb) {
  $mrb = $mrb | 0;
  var $call = 0, $1 = 0;
  $call = _mrb_define_class($mrb, 95072, HEAP32[$mrb + 44 >> 2] | 0) | 0;
  HEAP32[$mrb + 60 >> 2] = $call;
  $1 = $call;
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -522241 | 32768;
  _mrb_include_module($mrb, $call, _mrb_class_get($mrb, 108876) | 0);
  _mrb_define_method($mrb, $call, 108480, 680, 0);
  _mrb_define_method($mrb, $call, 108216, 28, 0);
  _mrb_define_method($mrb, $call, 107804, 682, 0);
  _mrb_define_method($mrb, $call, 107352, 682, 0);
  _mrb_define_method($mrb, $call, 106572, 234, 0);
  _mrb_define_method($mrb, $call, 106456, 564, 0);
  _mrb_define_method($mrb, $call, 105896, 726, 0);
  _mrb_define_method($mrb, $call, 105624, 560, 0);
  _mrb_define_method($mrb, $call, 105284, 740, 0);
  _mrb_define_method($mrb, $call, 104808, 220, 0);
  _mrb_define_method($mrb, $call, 104408, 12, 0);
  _mrb_define_method($mrb, $call, 104076, 834, 0);
  _mrb_define_method($mrb, $call, 103820, 172, 0);
  _mrb_define_method($mrb, $call, 103508, 268, 0);
  _mrb_define_method($mrb, $call, 103088, 824, 0);
  _mrb_define_method($mrb, $call, 102976, 380, 0);
  _mrb_define_method($mrb, $call, 102428, 804, 0);
  _mrb_define_method($mrb, $call, 102172, 152, 0);
  _mrb_define_method($mrb, $call, 101956, 850, 0);
  _mrb_define_method($mrb, $call, 101748, 560, 0);
  _mrb_define_method($mrb, $call, 101560, 560, 0);
  _mrb_define_method($mrb, $call, 101252, 620, 0);
  _mrb_define_method($mrb, $call, 101080, 372, 0);
  _mrb_define_method($mrb, $call, 100816, 392, 0);
  _mrb_define_method($mrb, $call, 100448, 374, 0);
  _mrb_define_method($mrb, $call, 100248, 640, 0);
  _mrb_define_method($mrb, $call, 99764, 348, 0);
  _mrb_define_method($mrb, $call, 99464, 560, 0);
  _mrb_define_method($mrb, $call, 99180, 640, 0);
  _mrb_define_method($mrb, $call, 98936, 166, 0);
  _mrb_define_method($mrb, $call, 98712, 310, 0);
  _mrb_define_method($mrb, $call, 98548, 460, 0);
  _mrb_define_method($mrb, $call, 98352, 560, 0);
  _mrb_define_method($mrb, $call, 98160, 740, 0);
  _mrb_define_method($mrb, $call, 97912, 412, 0);
  _mrb_define_method($mrb, $call, 97704, 560, 0);
  _mrb_define_method($mrb, $call, 97152, 560, 0);
  _mrb_define_method($mrb, $call, 96908, 72, 0);
  _mrb_define_method($mrb, $call, 96640, 70, 0);
  _mrb_define_method($mrb, $call, 94024, 62, 0);
  _mrb_define_method($mrb, $call, 96776, 62, 0);
  _mrb_define_method($mrb, $call, 96404, 348, 0);
  _mrb_define_method($mrb, $call, 96228, 578, 0);
  _mrb_define_method($mrb, $call, 95972, 492, 0);
  _mrb_define_method($mrb, $call, 95836, 666, 0);
  _mrb_define_method($mrb, $call, 95736, 520, 0);
  return;
}
function _mrb_str_plus_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $str = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $str = __stackBase__ | 0;
  _mrb_get_args($mrb, 95100, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $str, tempInt) | 0);
  _mrb_str_plus($agg_result, $mrb, $self, $str);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_bytesize($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_fixnum_value47($agg_result, HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_times($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $times = 0, $call = 0, $0 = 0, $cmp = 0, $call1 = 0, $_pr = 0, $1 = 0, $tobool = 0, $div = 0, $p2 = 0, $2 = 0, $len3 = 0, $3 = 0, $4 = 0, $cmp4 = 0, $call6 = 0, $p9 = 0, $5 = 0, $len10 = 0, $6 = 0, $7 = 0, $8 = 0, $mul = 0, $call11 = 0, $ptr = 0, $9 = 0, $cmp12 = 0, $10 = 0, $len16 = 0, $11 = 0, $12 = 0, $ptr19 = 0, $13 = 0, $14 = 0, $div20 = 0, $cmp2121 = 0, $add_ptr22 = 0, $add_ptr24 = 0, $n_023 = 0, $mul22 = 0, $cmp21 = 0, $add_ptr = 0, $add_ptr_lcssa = 0, $n_0_lcssa = 0, $sub = 0, $len25 = 0, $15 = 0, $arrayidx = 0, $16 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $times = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 94524, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $times, tempInt) | 0) | 0;
    $0 = HEAP32[$times >> 2] | 0;
    $cmp = ($0 | 0) < 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $1 = $0;
      label = 4;
      break;
    }
   case 3:
    $call1 = _mrb_class_get($mrb, 103224) | 0;
    _mrb_raise($mrb, $call1, 94104);
    $_pr = HEAP32[$times >> 2] | 0;
    $1 = $_pr;
    label = 4;
    break;
   case 4:
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $div = 2147483647 / ($1 | 0) & -1;
    $p2 = $self;
    $2 = HEAP32[$p2 >> 2] | 0;
    $len3 = $2 + 12 | 0;
    $3 = $len3;
    $4 = HEAP32[$3 >> 2] | 0;
    $cmp4 = ($div | 0) < ($4 | 0);
    if ($cmp4) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $call6 = _mrb_class_get($mrb, 103224) | 0;
    _mrb_raise($mrb, $call6, 109836);
    label = 7;
    break;
   case 7:
    $p9 = $self;
    $5 = HEAP32[$p9 >> 2] | 0;
    $len10 = $5 + 12 | 0;
    $6 = $len10;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = HEAP32[$times >> 2] | 0;
    $mul = Math_imul($8, $7);
    $call11 = _str_new($mrb, 0, $mul) | 0;
    _str_with_class(0, $call11, $self);
    $ptr = $call11 + 20 | 0;
    $9 = HEAP32[$ptr >> 2] | 0;
    $cmp12 = ($mul | 0) > 0;
    if ($cmp12) {
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
   case 8:
    $10 = HEAP32[$p9 >> 2] | 0;
    $len16 = $10 + 12 | 0;
    $11 = $len16;
    $12 = HEAP32[$11 >> 2] | 0;
    $ptr19 = $10 + 20 | 0;
    $13 = $ptr19;
    $14 = HEAP32[$13 >> 2] | 0;
    _memcpy($9 | 0, $14 | 0, $12);
    $div20 = ($mul | 0) / 2 & -1;
    $cmp2121 = ($12 | 0) > ($div20 | 0);
    $add_ptr22 = $9 + $12 | 0;
    if ($cmp2121) {
      $n_0_lcssa = $12;
      $add_ptr_lcssa = $add_ptr22;
      label = 10;
      break;
    } else {
      $n_023 = $12;
      $add_ptr24 = $add_ptr22;
      label = 9;
      break;
    }
   case 9:
    _memcpy($add_ptr24 | 0, $9 | 0, $n_023);
    $mul22 = $n_023 << 1;
    $cmp21 = ($mul22 | 0) > ($div20 | 0);
    $add_ptr = $9 + $mul22 | 0;
    if ($cmp21) {
      $n_0_lcssa = $mul22;
      $add_ptr_lcssa = $add_ptr;
      label = 10;
      break;
    } else {
      $n_023 = $mul22;
      $add_ptr24 = $add_ptr;
      label = 9;
      break;
    }
   case 10:
    $sub = $mul - $n_0_lcssa | 0;
    _memcpy($add_ptr_lcssa | 0, $9 | 0, $sub);
    label = 11;
    break;
   case 11:
    $len25 = $call11 + 12 | 0;
    $15 = HEAP32[$len25 >> 2] | 0;
    $arrayidx = $9 + $15 | 0;
    HEAP8[$arrayidx] = 0;
    $16 = $call11 | 0;
    _mrb_obj_value44($agg_result, $16);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_cmp_m($agg_result, $mrb, $str1) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str1 = $str1 | 0;
  var $str2 = 0, $tmp = 0, $agg_tmp = 0, $call = 0, $tt = 0, $0 = 0, $cmp = 0, $call1 = 0, $call2 = 0, $tobool = 0, $call4 = 0, $call5 = 0, $tobool6 = 0, $tt9 = 0, $1 = 0, $cmp10 = 0, $i = 0, $2 = 0, $tobool11 = 0, $i14 = 0, $3 = 0, $tobool15 = 0, $sub = 0, $call23 = 0, $result_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  tempParam = $str1;
  $str1 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str1 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str1 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str1 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $str2 = __stackBase__ | 0;
    $tmp = __stackBase__ + 12 | 0;
    $agg_tmp = __stackBase__ + 24 | 0;
    $call = _mrb_get_args($mrb, 94956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $str2, tempInt) | 0) | 0;
    $tt = $str2 + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 16;
    if ($cmp) {
      label = 13;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call1 = _mrb_intern2($mrb, 94024, 4) | 0;
    $call2 = _mrb_respond_to($mrb, $str2, $call1) | 0;
    $tobool = ($call2 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _mrb_nil_value48($agg_result);
    label = 15;
    break;
   case 5:
    $call4 = _mrb_intern2($mrb, 106456, 3) | 0;
    $call5 = _mrb_respond_to($mrb, $str2, $call4) | 0;
    $tobool6 = ($call5 | 0) == 0;
    if ($tobool6) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _mrb_nil_value48($agg_result);
    label = 15;
    break;
   case 7:
    _mrb_funcall($tmp, $mrb, $str2, 106456, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$str1 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$str1 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$str1 + 8 >> 2] | 0, tempInt) | 0);
    $tt9 = $tmp + 8 | 0;
    $1 = HEAP32[$tt9 >> 2] | 0;
    $cmp10 = ($1 | 0) == 0;
    if ($cmp10) {
      label = 8;
      break;
    } else {
      label = 10;
      break;
    }
   case 8:
    $i = $tmp;
    $2 = HEAP32[$i >> 2] | 0;
    $tobool11 = ($2 | 0) == 0;
    if ($tobool11) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _mrb_nil_value48($agg_result);
    label = 15;
    break;
   case 10:
    $i14 = $tmp;
    $3 = HEAP32[$i14 >> 2] | 0;
    $tobool15 = ($3 | 0) == 0;
    if ($tobool15) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    _mrb_fixnum_value47($agg_tmp, 0);
    _mrb_funcall($agg_result, $mrb, $agg_tmp, 94568, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$tmp + 8 >> 2] | 0, tempInt) | 0);
    label = 15;
    break;
   case 12:
    $sub = -$3 | 0;
    $result_0 = $sub;
    label = 14;
    break;
   case 13:
    $call23 = _mrb_str_cmp(0, $str1, $str2) | 0;
    $result_0 = $call23;
    label = 14;
    break;
   case 14:
    _mrb_fixnum_value47($agg_result, $result_0);
    label = 15;
    break;
   case 15:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_equal_m($agg_result, $mrb, $str1) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str1 = $str1 | 0;
  var $str2 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $str1;
  $str1 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str1 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str1 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str1 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $str2 = __stackBase__ | 0;
  _mrb_get_args($mrb, 94956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $str2, tempInt) | 0);
  _mrb_bool_value($agg_result, _mrb_str_equal($mrb, $str1, $str2) & 255);
  STACKTOP = __stackBase__;
  return;
}
function _noregexp($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_raise($mrb, _mrb_class_get($mrb, 94732) | 0, 94640);
  _mrb_nil_value48($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_aref_m($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $a1 = 0, $a2 = 0, $agg_tmp = 0, $call = 0, $i = 0, $0 = 0, $i2 = 0, $1 = 0, $call5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $a1 = __stackBase__ | 0;
    $a2 = __stackBase__ + 12 | 0;
    $agg_tmp = __stackBase__ + 24 | 0;
    $call = _mrb_get_args($mrb, 94888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $a1, HEAP32[tempInt + 4 >> 2] = $a2, tempInt) | 0) | 0;
    if (($call | 0) == 2) {
      label = 3;
      break;
    } else if (($call | 0) == 1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _regexp_check($mrb, $a1);
    $i = $a1;
    $0 = HEAP32[$i >> 2] | 0;
    $i2 = $a2;
    $1 = HEAP32[$i2 >> 2] | 0;
    _mrb_str_substr($agg_result, $mrb, $str, $0, $1);
    label = 6;
    break;
   case 4:
    $call5 = _mrb_class_get($mrb, 103224) | 0;
    _mrb_fixnum_value47($agg_tmp, $call);
    _mrb_raisef($mrb, $call5, 94784, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    label = 5;
    break;
   case 5:
    _mrb_str_aref($agg_result, $mrb, $str, $a1);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_capitalize($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $str = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $str = __stackBase__ | 0;
  _mrb_str_dup($str, $mrb, $self);
  $0 = $str;
  _mrb_str_capitalize_bang(__stackBase__ + 12 | 0, $mrb, $str);
  $1 = $agg_result;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2] | 0;
  HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_capitalize_bang($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $p1 = 0, $0 = 0, $1 = 0, $len = 0, $2 = 0, $3 = 0, $cmp = 0, $ptr = 0, $4 = 0, $5 = 0, $tobool = 0, $add_ptr = 0, $6 = 0, $conv = 0, $call = 0, $tobool5 = 0, $7 = 0, $conv7 = 0, $call8 = 0, $conv9 = 0, $modify_0_ph12 = 0, $p_0_ph = 0, $p_0 = 0, $incdec_ptr = 0, $cmp11 = 0, $8 = 0, $conv13 = 0, $call14 = 0, $tobool15 = 0, $9 = 0, $conv17 = 0, $call18 = 0, $conv19 = 0, $tobool21 = 0, $10 = 0, $11 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p1 = $str;
    $0 = HEAP32[$p1 >> 2] | 0;
    $1 = $0;
    _mrb_str_modify($mrb, $1);
    $len = $0 + 12 | 0;
    $2 = $len;
    $3 = HEAP32[$2 >> 2] | 0;
    $cmp = ($3 | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $ptr = $0 + 20 | 0;
    $4 = $ptr;
    $5 = HEAP32[$4 >> 2] | 0;
    $tobool = ($5 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _mrb_nil_value48($agg_result);
    label = 14;
    break;
   case 5:
    $add_ptr = $5 + $3 | 0;
    $6 = HEAP8[$5] | 0;
    $conv = $6 & 255;
    $call = _islower($conv | 0) | 0;
    $tobool5 = ($call | 0) == 0;
    if ($tobool5) {
      $p_0_ph = $5;
      $modify_0_ph12 = 0;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $7 = HEAP8[$5] | 0;
    $conv7 = $7 & 255;
    $call8 = _toupper($conv7 | 0) | 0;
    $conv9 = $call8 & 255;
    HEAP8[$5] = $conv9;
    $p_0_ph = $5;
    $modify_0_ph12 = 1;
    label = 7;
    break;
   case 7:
    $p_0 = $p_0_ph;
    label = 8;
    break;
   case 8:
    $incdec_ptr = $p_0 + 1 | 0;
    $cmp11 = $incdec_ptr >>> 0 < $add_ptr >>> 0;
    if ($cmp11) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    $8 = HEAP8[$incdec_ptr] | 0;
    $conv13 = $8 & 255;
    $call14 = _isupper($conv13 | 0) | 0;
    $tobool15 = ($call14 | 0) == 0;
    if ($tobool15) {
      $p_0 = $incdec_ptr;
      label = 8;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $9 = HEAP8[$incdec_ptr] | 0;
    $conv17 = $9 & 255;
    $call18 = _tolower($conv17 | 0) | 0;
    $conv19 = $call18 & 255;
    HEAP8[$incdec_ptr] = $conv19;
    $p_0_ph = $incdec_ptr;
    $modify_0_ph12 = 1;
    label = 7;
    break;
   case 11:
    $tobool21 = ($modify_0_ph12 | 0) == 0;
    if ($tobool21) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $10 = $agg_result;
    $11 = $str;
    HEAP32[$10 >> 2] = HEAP32[$11 >> 2] | 0;
    HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2] | 0;
    HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2] | 0;
    label = 14;
    break;
   case 13:
    _mrb_nil_value48($agg_result);
    label = 14;
    break;
   case 14:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_chomp($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $str = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $str = __stackBase__ | 0;
  _mrb_str_dup($str, $mrb, $self);
  $0 = $str;
  _mrb_str_chomp_bang(__stackBase__ + 12 | 0, $mrb, $str);
  $1 = $agg_result;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2] | 0;
  HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_chomp_bang($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $rs = 0, $p1 = 0, $0 = 0, $1 = 0, $len2 = 0, $2 = 0, $3 = 0, $call = 0, $cmp = 0, $cmp3 = 0, $sub = 0, $ptr = 0, $4 = 0, $5 = 0, $arrayidx = 0, $6 = 0, $7 = 0, $dec = 0, $cmp10 = 0, $sub13 = 0, $8 = 0, $arrayidx15 = 0, $9 = 0, $cmp17 = 0, $10 = 0, $dec31 = 0, $11 = 0, $12 = 0, $arrayidx37 = 0, $13 = 0, $14 = 0, $tt = 0, $15 = 0, $cmp41 = 0, $i = 0, $16 = 0, $tobool = 0, $ptr47 = 0, $17 = 0, $18 = 0, $p49 = 0, $19 = 0, $len50 = 0, $20 = 0, $21 = 0, $cmp51 = 0, $cmp5449 = 0, $len_050 = 0, $sub56 = 0, $arrayidx57 = 0, $22 = 0, $cmp59 = 0, $cmp62 = 0, $sub65 = 0, $arrayidx66 = 0, $23 = 0, $cmp68 = 0, $dec71_dec61 = 0, $cmp54 = 0, $len_0_lcssa = 0, $24 = 0, $cmp74 = 0, $arrayidx78 = 0, $25 = 0, $26 = 0, $cmp81 = 0, $sub85 = 0, $ptr88 = 0, $27 = 0, $28 = 0, $arrayidx89 = 0, $29 = 0, $cmp91 = 0, $cmp94 = 0, $or_cond48 = 0, $add_ptr_sum = 0, $add_ptr111 = 0, $sub112 = 0, $arrayidx113 = 0, $30 = 0, $cmp115 = 0, $cmp118 = 0, $call124 = 0, $cmp125 = 0, $sub128 = 0, $arrayidx131 = 0, $31 = 0, $32 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $rs = __stackBase__ | 0;
    $p1 = $str;
    $0 = HEAP32[$p1 >> 2] | 0;
    $1 = $0;
    _mrb_str_modify($mrb, $1);
    $len2 = $0 + 12 | 0;
    $2 = $len2;
    $3 = HEAP32[$2 >> 2] | 0;
    $call = _mrb_get_args($mrb, 95024, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $rs, tempInt) | 0) | 0;
    $cmp = ($call | 0) == 0;
    $cmp3 = ($3 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 12;
      break;
    }
   case 3:
    if ($cmp3) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _mrb_nil_value48($agg_result);
    label = 32;
    break;
   case 5:
    $sub = $3 - 1 | 0;
    $ptr = $0 + 20 | 0;
    $4 = $ptr;
    $5 = HEAP32[$4 >> 2] | 0;
    $arrayidx = $5 + $sub | 0;
    $6 = HEAP8[$arrayidx] | 0;
    if (($6 << 24 >> 24 | 0) == 10) {
      label = 6;
      break;
    } else if (($6 << 24 >> 24 | 0) == 13) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 6:
    $7 = HEAP32[$2 >> 2] | 0;
    $dec = $7 - 1 | 0;
    HEAP32[$2 >> 2] = $dec;
    $cmp10 = ($dec | 0) > 0;
    if ($cmp10) {
      label = 7;
      break;
    } else {
      label = 11;
      break;
    }
   case 7:
    $sub13 = $7 - 2 | 0;
    $8 = HEAP32[$4 >> 2] | 0;
    $arrayidx15 = $8 + $sub13 | 0;
    $9 = HEAP8[$arrayidx15] | 0;
    $cmp17 = $9 << 24 >> 24 == 13;
    if ($cmp17) {
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
   case 8:
    HEAP32[$2 >> 2] = $sub13;
    label = 11;
    break;
   case 9:
    $10 = HEAP32[$2 >> 2] | 0;
    $dec31 = $10 - 1 | 0;
    HEAP32[$2 >> 2] = $dec31;
    label = 11;
    break;
   case 10:
    _mrb_nil_value48($agg_result);
    label = 32;
    break;
   case 11:
    $11 = HEAP32[$2 >> 2] | 0;
    $12 = HEAP32[$4 >> 2] | 0;
    $arrayidx37 = $12 + $11 | 0;
    HEAP8[$arrayidx37] = 0;
    $13 = $agg_result;
    $14 = $str;
    HEAP32[$13 >> 2] = HEAP32[$14 >> 2] | 0;
    HEAP32[$13 + 4 >> 2] = HEAP32[$14 + 4 >> 2] | 0;
    HEAP32[$13 + 8 >> 2] = HEAP32[$14 + 8 >> 2] | 0;
    label = 32;
    break;
   case 12:
    if ($cmp3) {
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $tt = $rs + 8 | 0;
    $15 = HEAP32[$tt >> 2] | 0;
    $cmp41 = ($15 | 0) == 0;
    if ($cmp41) {
      label = 14;
      break;
    } else {
      label = 16;
      break;
    }
   case 14:
    $i = $rs;
    $16 = HEAP32[$i >> 2] | 0;
    $tobool = ($16 | 0) == 0;
    if ($tobool) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    _mrb_nil_value48($agg_result);
    label = 32;
    break;
   case 16:
    $ptr47 = $0 + 20 | 0;
    $17 = $ptr47;
    $18 = HEAP32[$17 >> 2] | 0;
    $p49 = $rs;
    $19 = HEAP32[$p49 >> 2] | 0;
    $len50 = $19 + 12 | 0;
    $20 = $len50;
    $21 = HEAP32[$20 >> 2] | 0;
    $cmp51 = ($21 | 0) == 0;
    if ($cmp51) {
      label = 17;
      break;
    } else {
      label = 24;
      break;
    }
   case 17:
    $cmp5449 = ($3 | 0) > 0;
    if ($cmp5449) {
      $len_050 = $3;
      label = 18;
      break;
    } else {
      $len_0_lcssa = $3;
      label = 21;
      break;
    }
   case 18:
    $sub56 = $len_050 - 1 | 0;
    $arrayidx57 = $18 + $sub56 | 0;
    $22 = HEAP8[$arrayidx57] | 0;
    $cmp59 = $22 << 24 >> 24 == 10;
    if ($cmp59) {
      label = 19;
      break;
    } else {
      $len_0_lcssa = $len_050;
      label = 21;
      break;
    }
   case 19:
    $cmp62 = ($sub56 | 0) > 0;
    if ($cmp62) {
      label = 20;
      break;
    } else {
      $len_0_lcssa = $sub56;
      label = 21;
      break;
    }
   case 20:
    $sub65 = $len_050 - 2 | 0;
    $arrayidx66 = $18 + $sub65 | 0;
    $23 = HEAP8[$arrayidx66] | 0;
    $cmp68 = $23 << 24 >> 24 == 13;
    $dec71_dec61 = $cmp68 ? $sub65 : $sub56;
    $cmp54 = ($dec71_dec61 | 0) > 0;
    if ($cmp54) {
      $len_050 = $dec71_dec61;
      label = 18;
      break;
    } else {
      $len_0_lcssa = $dec71_dec61;
      label = 21;
      break;
    }
   case 21:
    $24 = HEAP32[$2 >> 2] | 0;
    $cmp74 = ($len_0_lcssa | 0) < ($24 | 0);
    if ($cmp74) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    HEAP32[$2 >> 2] = $len_0_lcssa;
    $arrayidx78 = $18 + $len_0_lcssa | 0;
    HEAP8[$arrayidx78] = 0;
    $25 = $agg_result;
    $26 = $str;
    HEAP32[$25 >> 2] = HEAP32[$26 >> 2] | 0;
    HEAP32[$25 + 4 >> 2] = HEAP32[$26 + 4 >> 2] | 0;
    HEAP32[$25 + 8 >> 2] = HEAP32[$26 + 8 >> 2] | 0;
    label = 32;
    break;
   case 23:
    _mrb_nil_value48($agg_result);
    label = 32;
    break;
   case 24:
    $cmp81 = ($21 | 0) > ($3 | 0);
    if ($cmp81) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    _mrb_nil_value48($agg_result);
    label = 32;
    break;
   case 26:
    $sub85 = $21 - 1 | 0;
    $ptr88 = $19 + 20 | 0;
    $27 = $ptr88;
    $28 = HEAP32[$27 >> 2] | 0;
    $arrayidx89 = $28 + $sub85 | 0;
    $29 = HEAP8[$arrayidx89] | 0;
    $cmp91 = ($21 | 0) == 1;
    $cmp94 = $29 << 24 >> 24 == 10;
    $or_cond48 = $cmp91 & $cmp94;
    if ($or_cond48) {
      label = 5;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $add_ptr_sum = $3 - $21 | 0;
    $add_ptr111 = $18 + $add_ptr_sum | 0;
    $sub112 = $3 - 1 | 0;
    $arrayidx113 = $18 + $sub112 | 0;
    $30 = HEAP8[$arrayidx113] | 0;
    $cmp115 = $30 << 24 >> 24 == $29 << 24 >> 24;
    if ($cmp115) {
      label = 28;
      break;
    } else {
      label = 31;
      break;
    }
   case 28:
    $cmp118 = ($21 | 0) < 2;
    if ($cmp118) {
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $call124 = _memcmp($28 | 0, $add_ptr111 | 0, $21 | 0) | 0;
    $cmp125 = ($call124 | 0) == 0;
    if ($cmp125) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    $sub128 = $3 - $21 | 0;
    HEAP32[$2 >> 2] = $sub128;
    $arrayidx131 = $18 + $sub128 | 0;
    HEAP8[$arrayidx131] = 0;
    $31 = $agg_result;
    $32 = $str;
    HEAP32[$31 >> 2] = HEAP32[$32 >> 2] | 0;
    HEAP32[$31 + 4 >> 2] = HEAP32[$32 + 4 >> 2] | 0;
    HEAP32[$31 + 8 >> 2] = HEAP32[$32 + 8 >> 2] | 0;
    label = 32;
    break;
   case 31:
    _mrb_nil_value48($agg_result);
    label = 32;
    break;
   case 32:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_chop($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $str = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $str = __stackBase__ | 0;
  _mrb_str_dup($str, $mrb, $self);
  $0 = $str;
  _mrb_str_chop_bang(__stackBase__ + 12 | 0, $mrb, $str);
  $1 = $agg_result;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2] | 0;
  HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_chop_bang($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $p = 0, $0 = 0, $1 = 0, $len = 0, $2 = 0, $3 = 0, $cmp = 0, $sub = 0, $ptr = 0, $4 = 0, $5 = 0, $arrayidx = 0, $6 = 0, $cmp3 = 0, $cmp6 = 0, $or_cond = 0, $sub8 = 0, $arrayidx10 = 0, $7 = 0, $cmp12 = 0, $dec_sub = 0, $len1_0 = 0, $8 = 0, $arrayidx18 = 0, $9 = 0, $10 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $str;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    _mrb_str_modify($mrb, $1);
    $len = $0 + 12 | 0;
    $2 = $len;
    $3 = HEAP32[$2 >> 2] | 0;
    $cmp = ($3 | 0) > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $sub = $3 - 1 | 0;
    $ptr = $0 + 20 | 0;
    $4 = $ptr;
    $5 = HEAP32[$4 >> 2] | 0;
    $arrayidx = $5 + $sub | 0;
    $6 = HEAP8[$arrayidx] | 0;
    $cmp3 = $6 << 24 >> 24 == 10;
    $cmp6 = ($sub | 0) > 0;
    $or_cond = $cmp3 & $cmp6;
    if ($or_cond) {
      label = 4;
      break;
    } else {
      $len1_0 = $sub;
      label = 5;
      break;
    }
   case 4:
    $sub8 = $3 - 2 | 0;
    $arrayidx10 = $5 + $sub8 | 0;
    $7 = HEAP8[$arrayidx10] | 0;
    $cmp12 = $7 << 24 >> 24 == 13;
    $dec_sub = $cmp12 ? $sub8 : $sub;
    $len1_0 = $dec_sub;
    label = 5;
    break;
   case 5:
    HEAP32[$2 >> 2] = $len1_0;
    $8 = HEAP32[$4 >> 2] | 0;
    $arrayidx18 = $8 + $len1_0 | 0;
    HEAP8[$arrayidx18] = 0;
    $9 = $agg_result;
    $10 = $str;
    HEAP32[$9 >> 2] = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 + 4 >> 2] = HEAP32[$10 + 4 >> 2] | 0;
    HEAP32[$9 + 8 >> 2] = HEAP32[$10 + 8 >> 2] | 0;
    label = 7;
    break;
   case 6:
    _mrb_nil_value48($agg_result);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_downcase($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $str = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $str = __stackBase__ | 0;
  _mrb_str_dup($str, $mrb, $self);
  $0 = $str;
  _mrb_str_downcase_bang(__stackBase__ + 12 | 0, $mrb, $str);
  $1 = $agg_result;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2] | 0;
  HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_downcase_bang($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $p1 = 0, $0 = 0, $1 = 0, $ptr = 0, $2 = 0, $3 = 0, $len = 0, $4 = 0, $5 = 0, $add_ptr = 0, $cmp8 = 0, $p_010 = 0, $modify_09 = 0, $6 = 0, $conv = 0, $call = 0, $tobool = 0, $7 = 0, $conv3 = 0, $call4 = 0, $conv5 = 0, $modify_1 = 0, $incdec_ptr = 0, $cmp = 0, $tobool6 = 0, $8 = 0, $9 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p1 = $str;
    $0 = HEAP32[$p1 >> 2] | 0;
    $1 = $0;
    _mrb_str_modify($mrb, $1);
    $ptr = $0 + 20 | 0;
    $2 = $ptr;
    $3 = HEAP32[$2 >> 2] | 0;
    $len = $0 + 12 | 0;
    $4 = $len;
    $5 = HEAP32[$4 >> 2] | 0;
    $add_ptr = $3 + $5 | 0;
    $cmp8 = ($5 | 0) > 0;
    if ($cmp8) {
      $modify_09 = 0;
      $p_010 = $3;
      label = 3;
      break;
    } else {
      label = 8;
      break;
    }
   case 3:
    $6 = HEAP8[$p_010] | 0;
    $conv = $6 & 255;
    $call = _isupper($conv | 0) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      $modify_1 = $modify_09;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $7 = HEAP8[$p_010] | 0;
    $conv3 = $7 & 255;
    $call4 = _tolower($conv3 | 0) | 0;
    $conv5 = $call4 & 255;
    HEAP8[$p_010] = $conv5;
    $modify_1 = 1;
    label = 5;
    break;
   case 5:
    $incdec_ptr = $p_010 + 1 | 0;
    $cmp = $incdec_ptr >>> 0 < $add_ptr >>> 0;
    if ($cmp) {
      $modify_09 = $modify_1;
      $p_010 = $incdec_ptr;
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $tobool6 = ($modify_1 | 0) == 0;
    if ($tobool6) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $8 = $agg_result;
    $9 = $str;
    HEAP32[$8 >> 2] = HEAP32[$9 >> 2] | 0;
    HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2] | 0;
    HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2] | 0;
    label = 9;
    break;
   case 8:
    _mrb_nil_value48($agg_result);
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_empty_p($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_bool_value($agg_result, (HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] | 0) == 0 & 1);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_eql($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $str2 = 0, $call = 0, $tt = 0, $0 = 0, $cmp = 0, $call1 = 0, $tobool = 0, $1 = 0, $conv = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $str2 = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 94956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $str2, tempInt) | 0) | 0;
    $tt = $str2 + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 16;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $1 = 0;
      label = 4;
      break;
    }
   case 3:
    $call1 = _str_eql($self, $str2) | 0;
    $tobool = ($call1 | 0) != 0;
    $1 = $tobool;
    label = 4;
    break;
   case 4:
    $conv = $1 & 1;
    _mrb_bool_value($agg_result, $conv);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_hash_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_fixnum_value47($agg_result, _mrb_str_hash(0, $self) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_include($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $str2 = 0, $tmp = 0, $call = 0, $tt = 0, $0 = 0, $cmp = 0, $p = 0, $1 = 0, $ptr = 0, $2 = 0, $3 = 0, $i2 = 0, $4 = 0, $len = 0, $5 = 0, $6 = 0, $call5 = 0, $cmp6 = 0, $7 = 0, $8 = 0, $call8 = 0, $cmp9 = 0, $cmp6_sink = 0, $conv7 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $str2 = __stackBase__ | 0;
    $tmp = __stackBase__ + 12 | 0;
    $call = _mrb_get_args($mrb, 94956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $str2, tempInt) | 0) | 0;
    $tt = $str2 + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $p = $self;
    $1 = HEAP32[$p >> 2] | 0;
    $ptr = $1 + 20 | 0;
    $2 = $ptr;
    $3 = HEAP32[$2 >> 2] | 0;
    $i2 = $str2;
    $4 = HEAP32[$i2 >> 2] | 0;
    $len = $1 + 12 | 0;
    $5 = $len;
    $6 = HEAP32[$5 >> 2] | 0;
    $call5 = _memchr($3 | 0, $4 | 0, $6 | 0) | 0;
    $cmp6 = ($call5 | 0) != 0;
    $cmp6_sink = $cmp6;
    label = 5;
    break;
   case 4:
    _mrb_str_to_str($tmp, $mrb, $str2);
    $7 = $str2;
    $8 = $tmp;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    $call8 = _mrb_str_index($self, $tmp, 0) | 0;
    $cmp9 = ($call8 | 0) != -1;
    $cmp6_sink = $cmp9;
    label = 5;
    break;
   case 5:
    $conv7 = $cmp6_sink & 1;
    _mrb_bool_value($agg_result, $conv7);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_index_m($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $argv = 0, $argc = 0, $sub = 0, $tmp = 0, $tmp34 = 0, $call = 0, $0 = 0, $cmp = 0, $cmp2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $value = 0, $i = 0, $7 = 0, $8 = 0, $9 = 0, $cmp7 = 0, $p = 0, $10 = 0, $len = 0, $11 = 0, $12 = 0, $add = 0, $cmp10 = 0, $pos_1 = 0, $tt = 0, $13 = 0, $i16 = 0, $14 = 0, $p20 = 0, $15 = 0, $len21 = 0, $16 = 0, $17 = 0, $ptr = 0, $18 = 0, $19 = 0, $pos_2 = 0, $cmp26 = 0, $arrayidx27 = 0, $20 = 0, $conv = 0, $cmp28 = 0, $inc = 0, $21 = 0, $tmp33_sroa_0_0__cast1 = 0, $tmp33_sroa_0_0_copyload2 = 0, $tmp33_sroa_1_4__idx3 = 0, $tmp33_sroa_1_4__cast4 = 0, $tmp33_sroa_1_4_copyload5 = 0, $tmp33_sroa_2_8__idx7 = 0, $tmp33_sroa_2_8_copyload8 = 0, $22 = 0, $23 = 0, $call41 = 0, $24 = 0, $tmp33_sroa_0_0__cast = 0, $tmp33_sroa_1_4__idx = 0, $tmp33_sroa_1_4__cast = 0, $call44 = 0, $cmp45 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $argv = __stackBase__ | 0;
    $argc = __stackBase__ + 4 | 0;
    $sub = __stackBase__ + 8 | 0;
    $tmp = __stackBase__ + 20 | 0;
    $tmp34 = __stackBase__ + 32 | 0;
    $call = _mrb_get_args($mrb, 106572, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $argv, HEAP32[tempInt + 4 >> 2] = $argc, tempInt) | 0) | 0;
    $0 = HEAP32[$argc >> 2] | 0;
    $cmp = ($0 | 0) == 2;
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $cmp2 = ($0 | 0) > 0;
    if ($cmp2) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $1 = HEAP32[$argv >> 2] | 0;
    $2 = $sub;
    $3 = $1;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    label = 6;
    break;
   case 5:
    _mrb_nil_value48($tmp);
    $4 = $sub;
    $5 = $tmp;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    label = 6;
    break;
   case 6:
    _regexp_check($mrb, $sub);
    $pos_1 = 0;
    label = 10;
    break;
   case 7:
    $6 = HEAP32[$argv >> 2] | 0;
    $value = $6 + 12 | 0;
    $i = $value;
    $7 = HEAP32[$i >> 2] | 0;
    $8 = $sub;
    $9 = $6;
    HEAP32[$8 >> 2] = HEAP32[$9 >> 2] | 0;
    HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2] | 0;
    HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2] | 0;
    _regexp_check($mrb, $6);
    $cmp7 = ($7 | 0) < 0;
    if ($cmp7) {
      label = 8;
      break;
    } else {
      $pos_1 = $7;
      label = 10;
      break;
    }
   case 8:
    $p = $str;
    $10 = HEAP32[$p >> 2] | 0;
    $len = $10 + 12 | 0;
    $11 = $len;
    $12 = HEAP32[$11 >> 2] | 0;
    $add = $12 + $7 | 0;
    $cmp10 = ($add | 0) < 0;
    if ($cmp10) {
      label = 9;
      break;
    } else {
      $pos_1 = $add;
      label = 10;
      break;
    }
   case 9:
    _mrb_nil_value48($agg_result);
    label = 22;
    break;
   case 10:
    $tt = $sub + 8 | 0;
    $13 = HEAP32[$tt >> 2] | 0;
    if (($13 | 0) == 3) {
      label = 11;
      break;
    } else if (($13 | 0) == 16) {
      label = 19;
      break;
    } else {
      label = 16;
      break;
    }
   case 11:
    $i16 = $sub;
    $14 = HEAP32[$i16 >> 2] | 0;
    $p20 = $str;
    $15 = HEAP32[$p20 >> 2] | 0;
    $len21 = $15 + 12 | 0;
    $16 = $len21;
    $17 = HEAP32[$16 >> 2] | 0;
    $ptr = $15 + 20 | 0;
    $18 = $ptr;
    $19 = HEAP32[$18 >> 2] | 0;
    $pos_2 = $pos_1;
    label = 12;
    break;
   case 12:
    $cmp26 = ($pos_2 | 0) < ($17 | 0);
    if ($cmp26) {
      label = 13;
      break;
    } else {
      label = 15;
      break;
    }
   case 13:
    $arrayidx27 = $19 + $pos_2 | 0;
    $20 = HEAP8[$arrayidx27] | 0;
    $conv = $20 & 255;
    $cmp28 = ($conv | 0) == ($14 | 0);
    $inc = $pos_2 + 1 | 0;
    if ($cmp28) {
      label = 14;
      break;
    } else {
      $pos_2 = $inc;
      label = 12;
      break;
    }
   case 14:
    _mrb_fixnum_value47($agg_result, $pos_2);
    label = 22;
    break;
   case 15:
    _mrb_nil_value48($agg_result);
    label = 22;
    break;
   case 16:
    _mrb_check_string_type($tmp34, $mrb, $sub);
    $21 = $tmp34;
    $tmp33_sroa_0_0__cast1 = $tmp34;
    $tmp33_sroa_0_0_copyload2 = HEAP32[$tmp33_sroa_0_0__cast1 >> 2] | 0;
    $tmp33_sroa_1_4__idx3 = $21 + 4 | 0;
    $tmp33_sroa_1_4__cast4 = $tmp33_sroa_1_4__idx3;
    $tmp33_sroa_1_4_copyload5 = HEAP32[$tmp33_sroa_1_4__cast4 >> 2] | 0;
    $tmp33_sroa_2_8__idx7 = $tmp34 + 8 | 0;
    $tmp33_sroa_2_8_copyload8 = HEAP32[$tmp33_sroa_2_8__idx7 >> 2] | 0;
    $22 = $tmp33_sroa_2_8_copyload8 | $tmp33_sroa_0_0_copyload2;
    $23 = ($22 | 0) == 0;
    if ($23) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $call41 = _mrb_class_get($mrb, 105476) | 0;
    _mrb_raisef($mrb, $call41, 95536, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$sub >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$sub + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$sub + 8 >> 2] | 0, tempInt) | 0);
    label = 18;
    break;
   case 18:
    $24 = $sub;
    $tmp33_sroa_0_0__cast = $sub;
    HEAP32[$tmp33_sroa_0_0__cast >> 2] = $tmp33_sroa_0_0_copyload2;
    $tmp33_sroa_1_4__idx = $24 + 4 | 0;
    $tmp33_sroa_1_4__cast = $tmp33_sroa_1_4__idx;
    HEAP32[$tmp33_sroa_1_4__cast >> 2] = $tmp33_sroa_1_4_copyload5;
    HEAP32[$tt >> 2] = $tmp33_sroa_2_8_copyload8;
    label = 19;
    break;
   case 19:
    $call44 = _mrb_str_index($str, $sub, $pos_1) | 0;
    $cmp45 = ($call44 | 0) == -1;
    if ($cmp45) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    _mrb_nil_value48($agg_result);
    label = 22;
    break;
   case 21:
    _mrb_fixnum_value47($agg_result, $call44);
    label = 22;
    break;
   case 22:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_init($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $str2 = 0, $tmp = 0, $call = 0, $cmp = 0, $p = 0, $0 = 0, $1 = 0, $p2 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $str2 = __stackBase__ | 0;
    $tmp = __stackBase__ + 12 | 0;
    $call = _mrb_get_args($mrb, 95024, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $str2, tempInt) | 0) | 0;
    $cmp = ($call | 0) == 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    $p2 = $str2;
    $2 = HEAP32[$p2 >> 2] | 0;
    $3 = $2;
    _str_replace($tmp, $mrb, $1, $3);
    label = 4;
    break;
   case 4:
    $4 = $agg_result;
    $5 = $self;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_replace($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $str2 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $str2 = __stackBase__ | 0;
  _mrb_get_args($mrb, 95100, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $str2, tempInt) | 0);
  _str_replace($agg_result, $mrb, HEAP32[$str >> 2] | 0, HEAP32[$str2 >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_reverse($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $p1 = 0, $0 = 0, $len = 0, $1 = 0, $2 = 0, $cmp = 0, $call = 0, $3 = 0, $ptr = 0, $4 = 0, $5 = 0, $len12 = 0, $6 = 0, $7 = 0, $add_ptr_sum = 0, $cmp155 = 0, $ptr14 = 0, $add_ptr13 = 0, $8 = 0, $p_07 = 0, $e_06 = 0, $incdec_ptr = 0, $9 = 0, $incdec_ptr16 = 0, $cmp15 = 0, $10 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p1 = $str;
    $0 = HEAP32[$p1 >> 2] | 0;
    $len = $0 + 12 | 0;
    $1 = $len;
    $2 = HEAP32[$1 >> 2] | 0;
    $cmp = ($2 | 0) < 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_str_dup($agg_result, $mrb, $str);
    label = 8;
    break;
   case 4:
    $call = _str_new($mrb, 0, $2) | 0;
    _str_with_class(0, $call, $str);
    $3 = HEAP32[$p1 >> 2] | 0;
    $ptr = $3 + 20 | 0;
    $4 = $ptr;
    $5 = HEAP32[$4 >> 2] | 0;
    $len12 = $3 + 12 | 0;
    $6 = $len12;
    $7 = HEAP32[$6 >> 2] | 0;
    $add_ptr_sum = $7 - 1 | 0;
    $cmp155 = ($add_ptr_sum | 0) < 0;
    if ($cmp155) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $ptr14 = $call + 20 | 0;
    $add_ptr13 = $5 + $add_ptr_sum | 0;
    $8 = HEAP32[$ptr14 >> 2] | 0;
    $e_06 = $add_ptr13;
    $p_07 = $8;
    label = 6;
    break;
   case 6:
    $incdec_ptr = $e_06 - 1 | 0;
    $9 = HEAP8[$e_06] | 0;
    $incdec_ptr16 = $p_07 + 1 | 0;
    HEAP8[$p_07] = $9;
    $cmp15 = $incdec_ptr >>> 0 < $5 >>> 0;
    if ($cmp15) {
      label = 7;
      break;
    } else {
      $e_06 = $incdec_ptr;
      $p_07 = $incdec_ptr16;
      label = 6;
      break;
    }
   case 7:
    $10 = $call | 0;
    _mrb_obj_value44($agg_result, $10);
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_reverse_bang($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $p = 0, $0 = 0, $1 = 0, $len = 0, $2 = 0, $3 = 0, $cmp = 0, $ptr = 0, $4 = 0, $5 = 0, $add_ptr_sum = 0, $cmp49 = 0, $add_ptr3 = 0, $p1_011 = 0, $e_010 = 0, $6 = 0, $7 = 0, $incdec_ptr = 0, $incdec_ptr5 = 0, $cmp4 = 0, $8 = 0, $9 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $str;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    _mrb_str_modify($mrb, $1);
    $len = $0 + 12 | 0;
    $2 = $len;
    $3 = HEAP32[$2 >> 2] | 0;
    $cmp = ($3 | 0) > 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $ptr = $0 + 20 | 0;
    $4 = $ptr;
    $5 = HEAP32[$4 >> 2] | 0;
    $add_ptr_sum = $3 - 1 | 0;
    $cmp49 = ($add_ptr_sum | 0) > 0;
    if ($cmp49) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $add_ptr3 = $5 + $add_ptr_sum | 0;
    $e_010 = $add_ptr3;
    $p1_011 = $5;
    label = 5;
    break;
   case 5:
    $6 = HEAP8[$p1_011] | 0;
    $7 = HEAP8[$e_010] | 0;
    $incdec_ptr = $p1_011 + 1 | 0;
    HEAP8[$p1_011] = $7;
    $incdec_ptr5 = $e_010 - 1 | 0;
    HEAP8[$e_010] = $6;
    $cmp4 = $incdec_ptr >>> 0 < $incdec_ptr5 >>> 0;
    if ($cmp4) {
      $e_010 = $incdec_ptr5;
      $p1_011 = $incdec_ptr;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $8 = $agg_result;
    $9 = $str;
    HEAP32[$8 >> 2] = HEAP32[$9 >> 2] | 0;
    HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2] | 0;
    HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_rindex_m($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $argv = 0, $argc = 0, $sub = 0, $tmp = 0, $tmp38 = 0, $p = 0, $0 = 0, $len1 = 0, $1 = 0, $2 = 0, $call = 0, $3 = 0, $cmp = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx2 = 0, $vpos_sroa_0_0__cast = 0, $vpos_sroa_0_0_copyload = 0, $cmp4 = 0, $add = 0, $cmp6 = 0, $pos_0 = 0, $cmp9 = 0, $_pos_0 = 0, $cmp12 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $pos_1 = 0, $tt = 0, $13 = 0, $i20 = 0, $14 = 0, $15 = 0, $len25 = 0, $16 = 0, $17 = 0, $ptr = 0, $18 = 0, $19 = 0, $pos_2 = 0, $cmp30 = 0, $arrayidx31 = 0, $20 = 0, $conv = 0, $cmp32 = 0, $dec = 0, $21 = 0, $tmp37_sroa_0_0__cast1 = 0, $tmp37_sroa_0_0_copyload2 = 0, $tmp37_sroa_1_4__idx3 = 0, $tmp37_sroa_1_4__cast4 = 0, $tmp37_sroa_1_4_copyload5 = 0, $tmp37_sroa_2_8__idx7 = 0, $tmp37_sroa_2_8_copyload8 = 0, $22 = 0, $23 = 0, $call45 = 0, $24 = 0, $tmp37_sroa_0_0__cast = 0, $tmp37_sroa_1_4__idx = 0, $tmp37_sroa_1_4__cast = 0, $call48 = 0, $cmp49 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $argv = __stackBase__ | 0;
    $argc = __stackBase__ + 4 | 0;
    $sub = __stackBase__ + 8 | 0;
    $tmp = __stackBase__ + 20 | 0;
    $tmp38 = __stackBase__ + 32 | 0;
    $p = $str;
    $0 = HEAP32[$p >> 2] | 0;
    $len1 = $0 + 12 | 0;
    $1 = $len1;
    $2 = HEAP32[$1 >> 2] | 0;
    $call = _mrb_get_args($mrb, 106572, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $argv, HEAP32[tempInt + 4 >> 2] = $argc, tempInt) | 0) | 0;
    $3 = HEAP32[$argc >> 2] | 0;
    $cmp = ($3 | 0) == 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    $4 = HEAP32[$argv >> 2] | 0;
    $5 = $sub;
    $6 = $4;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2] | 0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
    $7 = HEAP32[$argv >> 2] | 0;
    $arrayidx2 = $7 + 12 | 0;
    $vpos_sroa_0_0__cast = $arrayidx2;
    $vpos_sroa_0_0_copyload = HEAP32[$vpos_sroa_0_0__cast >> 2] | 0;
    $cmp4 = ($vpos_sroa_0_0_copyload | 0) < 0;
    if ($cmp4) {
      label = 4;
      break;
    } else {
      $pos_0 = $vpos_sroa_0_0_copyload;
      label = 6;
      break;
    }
   case 4:
    $add = $vpos_sroa_0_0_copyload + $2 | 0;
    $cmp6 = ($add | 0) < 0;
    if ($cmp6) {
      label = 5;
      break;
    } else {
      $pos_0 = $add;
      label = 6;
      break;
    }
   case 5:
    _regexp_check($mrb, $sub);
    _mrb_nil_value48($agg_result);
    label = 22;
    break;
   case 6:
    $cmp9 = ($pos_0 | 0) > ($2 | 0);
    $_pos_0 = $cmp9 ? $2 : $pos_0;
    $pos_1 = $_pos_0;
    label = 10;
    break;
   case 7:
    $cmp12 = ($3 | 0) > 0;
    if ($cmp12) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $8 = HEAP32[$argv >> 2] | 0;
    $9 = $sub;
    $10 = $8;
    HEAP32[$9 >> 2] = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 + 4 >> 2] = HEAP32[$10 + 4 >> 2] | 0;
    HEAP32[$9 + 8 >> 2] = HEAP32[$10 + 8 >> 2] | 0;
    $pos_1 = $2;
    label = 10;
    break;
   case 9:
    _mrb_nil_value48($tmp);
    $11 = $sub;
    $12 = $tmp;
    HEAP32[$11 >> 2] = HEAP32[$12 >> 2] | 0;
    HEAP32[$11 + 4 >> 2] = HEAP32[$12 + 4 >> 2] | 0;
    HEAP32[$11 + 8 >> 2] = HEAP32[$12 + 8 >> 2] | 0;
    $pos_1 = $2;
    label = 10;
    break;
   case 10:
    _regexp_check($mrb, $sub);
    $tt = $sub + 8 | 0;
    $13 = HEAP32[$tt >> 2] | 0;
    if (($13 | 0) == 3) {
      label = 11;
      break;
    } else if (($13 | 0) == 16) {
      label = 19;
      break;
    } else {
      label = 16;
      break;
    }
   case 11:
    $i20 = $sub;
    $14 = HEAP32[$i20 >> 2] | 0;
    $15 = HEAP32[$p >> 2] | 0;
    $len25 = $15 + 12 | 0;
    $16 = $len25;
    $17 = HEAP32[$16 >> 2] | 0;
    $ptr = $15 + 20 | 0;
    $18 = $ptr;
    $19 = HEAP32[$18 >> 2] | 0;
    $pos_2 = $17;
    label = 12;
    break;
   case 12:
    $cmp30 = ($pos_2 | 0) > -1;
    if ($cmp30) {
      label = 13;
      break;
    } else {
      label = 15;
      break;
    }
   case 13:
    $arrayidx31 = $19 + $pos_2 | 0;
    $20 = HEAP8[$arrayidx31] | 0;
    $conv = $20 & 255;
    $cmp32 = ($conv | 0) == ($14 | 0);
    $dec = $pos_2 - 1 | 0;
    if ($cmp32) {
      label = 14;
      break;
    } else {
      $pos_2 = $dec;
      label = 12;
      break;
    }
   case 14:
    _mrb_fixnum_value47($agg_result, $pos_2);
    label = 22;
    break;
   case 15:
    _mrb_nil_value48($agg_result);
    label = 22;
    break;
   case 16:
    _mrb_check_string_type($tmp38, $mrb, $sub);
    $21 = $tmp38;
    $tmp37_sroa_0_0__cast1 = $tmp38;
    $tmp37_sroa_0_0_copyload2 = HEAP32[$tmp37_sroa_0_0__cast1 >> 2] | 0;
    $tmp37_sroa_1_4__idx3 = $21 + 4 | 0;
    $tmp37_sroa_1_4__cast4 = $tmp37_sroa_1_4__idx3;
    $tmp37_sroa_1_4_copyload5 = HEAP32[$tmp37_sroa_1_4__cast4 >> 2] | 0;
    $tmp37_sroa_2_8__idx7 = $tmp38 + 8 | 0;
    $tmp37_sroa_2_8_copyload8 = HEAP32[$tmp37_sroa_2_8__idx7 >> 2] | 0;
    $22 = $tmp37_sroa_2_8_copyload8 | $tmp37_sroa_0_0_copyload2;
    $23 = ($22 | 0) == 0;
    if ($23) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $call45 = _mrb_class_get($mrb, 105476) | 0;
    _mrb_raisef($mrb, $call45, 95536, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$sub >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$sub + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$sub + 8 >> 2] | 0, tempInt) | 0);
    label = 18;
    break;
   case 18:
    $24 = $sub;
    $tmp37_sroa_0_0__cast = $sub;
    HEAP32[$tmp37_sroa_0_0__cast >> 2] = $tmp37_sroa_0_0_copyload2;
    $tmp37_sroa_1_4__idx = $24 + 4 | 0;
    $tmp37_sroa_1_4__cast = $tmp37_sroa_1_4__idx;
    HEAP32[$tmp37_sroa_1_4__cast >> 2] = $tmp37_sroa_1_4_copyload5;
    HEAP32[$tt >> 2] = $tmp37_sroa_2_8_copyload8;
    label = 19;
    break;
   case 19:
    $call48 = _mrb_str_rindex($str, $sub, $pos_1) | 0;
    $cmp49 = ($call48 | 0) > -1;
    if ($cmp49) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    _mrb_fixnum_value47($agg_result, $call48);
    label = 22;
    break;
   case 21:
    _mrb_nil_value48($agg_result);
    label = 22;
    break;
   case 22:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_float_value53($agg_result, $f) {
  $agg_result = $agg_result | 0;
  $f = +$f;
  var $v_sroa_0_0__idx = 0;
  $v_sroa_0_0__idx = $agg_result | 0;
  HEAPF64[tempDoublePtr >> 3] = $f, HEAP32[$v_sroa_0_0__idx >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$v_sroa_0_0__idx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  HEAP32[$agg_result + 8 >> 2] = 6;
  return;
}
function _mrb_bool_value($agg_result, $boolean) {
  $agg_result = $agg_result | 0;
  $boolean = $boolean | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = $boolean << 24 >> 24 != 0 ? 2 : 0;
  return;
}
function _mrb_str_split_m($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $spat = 0, $lim = 0, $result = 0, $tmp = 0, $tmp29 = 0, $tmp32 = 0, $agg_tmp = 0, $agg_tmp124 = 0, $agg_tmp158 = 0, $tmp238 = 0, $call = 0, $0 = 0, $cmp = 0, $cmp1 = 0, $cmp1_ = 0, $cmp3 = 0, $p = 0, $1 = 0, $len = 0, $2 = 0, $3 = 0, $cmp5 = 0, $cmp9 = 0, $i_065 = 0, $tt = 0, $4 = 0, $cmp10 = 0, $i12 = 0, $5 = 0, $tobool = 0, $_pr = 0, $6 = 0, $cmp15 = 0, $p18 = 0, $7 = 0, $len19 = 0, $8 = 0, $9 = 0, $cmp20 = 0, $i_066_ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $ptr = 0, $14 = 0, $15 = 0, $16 = 0, $cmp24 = 0, $17 = 0, $18 = 0, $19 = 0, $i_06667 = 0, $p39 = 0, $20 = 0, $ptr40 = 0, $21 = 0, $22 = 0, $len47 = 0, $23 = 0, $24 = 0, $add_ptr = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_rhs_cast87 = 0, $cmp1__not = 0, $sub_ptr_rhs_cast80 = 0, $inc = 0, $ptr37_0_ph_ph = 0, $end_0_ph_ph = 0, $beg_0_ph_ph = 0, $i_1_ph_ph = 0, $25 = 0, $cmp68 = 0, $or_cond = 0, $skip_0_ph = 0, $ptr37_0_ph = 0, $end_0_ph = 0, $beg_0_ph = 0, $ptr37_0_ph74 = 0, $end_0_ph75 = 0, $beg_0_ph76 = 0, $ptr37_0 = 0, $beg_0 = 0, $cmp51 = 0, $incdec_ptr = 0, $26 = 0, $idxprom = 0, $arrayidx59 = 0, $27 = 0, $tobool60 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_sub = 0, $call54 = 0, $sub = 0, $sub_ptr_lhs_cast79 = 0, $sub_ptr_sub81 = 0, $inc_i_1 = 0, $sub_ptr_lhs_cast86 = 0, $sub_ptr_sub88 = 0, $28 = 0, $p98 = 0, $29 = 0, $ptr99 = 0, $30 = 0, $31 = 0, $len108 = 0, $32 = 0, $33 = 0, $add_ptr109 = 0, $p112 = 0, $34 = 0, $len113 = 0, $35 = 0, $36 = 0, $cmp114 = 0, $call119 = 0, $sub_ptr_rhs_cast126 = 0, $ptr96_0_ph = 0, $i_2_ph = 0, $ptr96_0 = 0, $cmp121 = 0, $sub_ptr_lhs_cast125 = 0, $sub_ptr_sub127 = 0, $incdec_ptr128 = 0, $37 = 0, $inc131 = 0, $cmp132 = 0, $ptr141 = 0, $38 = 0, $39 = 0, $call144 = 0, $sub_ptr_lhs_cast149 = 0, $sub_ptr_rhs_cast160 = 0, $ptr96_1_ph = 0, $i_3_ph = 0, $ptr96_1 = 0, $cmp146 = 0, $sub_ptr_rhs_cast150 = 0, $sub_ptr_sub151 = 0, $call152 = 0, $cmp153 = 0, $sub_ptr_sub161 = 0, $add = 0, $add_ptr162 = 0, $40 = 0, $inc165 = 0, $cmp166 = 0, $ptr96_2 = 0, $sub_ptr_lhs_cast172 = 0, $sub_ptr_rhs_cast173 = 0, $sub_ptr_sub174 = 0, $41 = 0, $beg_1 = 0, $p180 = 0, $42 = 0, $len181 = 0, $43 = 0, $44 = 0, $cmp182 = 0, $cmp190 = 0, $or_cond61 = 0, $45 = 0, $cmp193 = 0, $46 = 0, $len198 = 0, $47 = 0, $48 = 0, $cmp199 = 0, $sub207 = 0, $cmp1__not62 = 0, $49 = 0, $cmp213 = 0, $or_cond63 = 0, $p220 = 0, $50 = 0, $len22171 = 0, $51 = 0, $52 = 0, $cmp22272 = 0, $53 = 0, $p231 = 0, $54 = 0, $55 = 0, $sub225 = 0, $ptr228 = 0, $56 = 0, $57 = 0, $arrayidx229 = 0, $58 = 0, $59 = 0, $len232 = 0, $60 = 0, $61 = 0, $cmp233 = 0, $62 = 0, $len221 = 0, $63 = 0, $64 = 0, $cmp222 = 0, $65 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 112 | 0;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $spat = __stackBase__ | 0;
    $lim = __stackBase__ + 12 | 0;
    $result = __stackBase__ + 16 | 0;
    $tmp = __stackBase__ + 28 | 0;
    $tmp29 = __stackBase__ + 40 | 0;
    $tmp32 = __stackBase__ + 52 | 0;
    $agg_tmp = __stackBase__ + 64 | 0;
    $agg_tmp124 = __stackBase__ + 76 | 0;
    $agg_tmp158 = __stackBase__ + 88 | 0;
    $tmp238 = __stackBase__ + 100 | 0;
    _mrb_nil_value48($spat);
    HEAP32[$lim >> 2] = 0;
    $call = _mrb_get_args($mrb, 95660, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $spat, HEAP32[tempInt + 4 >> 2] = $lim, tempInt) | 0) | 0;
    $0 = HEAP32[$lim >> 2] | 0;
    $cmp = ($0 | 0) > 0;
    $cmp1 = ($call | 0) == 2;
    $cmp1_ = $cmp & $cmp1;
    if ($cmp1) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    $cmp3 = ($0 | 0) == 1;
    if ($cmp3) {
      label = 4;
      break;
    } else {
      $i_065 = 1;
      label = 8;
      break;
    }
   case 4:
    $p = $str;
    $1 = HEAP32[$p >> 2] | 0;
    $len = $1 + 12 | 0;
    $2 = $len;
    $3 = HEAP32[$2 >> 2] | 0;
    $cmp5 = ($3 | 0) == 0;
    if ($cmp5) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _mrb_ary_new_capa($agg_result, $mrb, 0);
    label = 54;
    break;
   case 6:
    _mrb_ary_new_from_values($agg_result, $mrb, 1, $str);
    label = 54;
    break;
   case 7:
    $cmp9 = ($call | 0) == 0;
    if ($cmp9) {
      $i_066_ph = 0;
      label = 14;
      break;
    } else {
      $i_065 = 0;
      label = 8;
      break;
    }
   case 8:
    $tt = $spat + 8 | 0;
    $4 = HEAP32[$tt >> 2] | 0;
    $cmp10 = ($4 | 0) == 0;
    if ($cmp10) {
      label = 9;
      break;
    } else {
      $6 = $4;
      label = 11;
      break;
    }
   case 9:
    $i12 = $spat;
    $5 = HEAP32[$i12 >> 2] | 0;
    $tobool = ($5 | 0) == 0;
    if ($tobool) {
      $i_066_ph = $i_065;
      label = 14;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $_pr = HEAP32[$tt >> 2] | 0;
    $6 = $_pr;
    label = 11;
    break;
   case 11:
    $cmp15 = ($6 | 0) == 16;
    if ($cmp15) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $p18 = $spat;
    $7 = HEAP32[$p18 >> 2] | 0;
    $len19 = $7 + 12 | 0;
    $8 = $len19;
    $9 = HEAP32[$8 >> 2] | 0;
    $cmp20 = ($9 | 0) == 1;
    if ($cmp20) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 13:
    _noregexp($tmp29, $mrb, $str);
    label = 15;
    break;
   case 14:
    _mrb_ary_new($tmp32, $mrb);
    $10 = $result;
    $11 = $tmp32;
    HEAP32[$10 >> 2] = HEAP32[$11 >> 2] | 0;
    HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2] | 0;
    HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2] | 0;
    $i_06667 = $i_066_ph;
    $19 = $10;
    label = 17;
    break;
   case 15:
    _mrb_ary_new($tmp32, $mrb);
    $12 = $result;
    $13 = $tmp32;
    HEAP32[$12 >> 2] = HEAP32[$13 >> 2] | 0;
    HEAP32[$12 + 4 >> 2] = HEAP32[$13 + 4 >> 2] | 0;
    HEAP32[$12 + 8 >> 2] = HEAP32[$13 + 8 >> 2] | 0;
    $28 = $12;
    label = 28;
    break;
   case 16:
    $ptr = $7 + 20 | 0;
    $14 = $ptr;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = HEAP8[$15] | 0;
    $cmp24 = $16 << 24 >> 24 == 32;
    _mrb_ary_new($tmp32, $mrb);
    $17 = $result;
    $18 = $tmp32;
    HEAP32[$17 >> 2] = HEAP32[$18 >> 2] | 0;
    HEAP32[$17 + 4 >> 2] = HEAP32[$18 + 4 >> 2] | 0;
    HEAP32[$17 + 8 >> 2] = HEAP32[$18 + 8 >> 2] | 0;
    if ($cmp24) {
      $i_06667 = $i_065;
      $19 = $17;
      label = 17;
      break;
    } else {
      $28 = $17;
      label = 28;
      break;
    }
   case 17:
    $p39 = $str;
    $20 = HEAP32[$p39 >> 2] | 0;
    $ptr40 = $20 + 20 | 0;
    $21 = $ptr40;
    $22 = HEAP32[$21 >> 2] | 0;
    $len47 = $20 + 12 | 0;
    $23 = $len47;
    $24 = HEAP32[$23 >> 2] | 0;
    $add_ptr = $22 + $24 | 0;
    $sub_ptr_rhs_cast = $22;
    $sub_ptr_rhs_cast87 = $22;
    $cmp1__not = $cmp1_ ^ 1;
    $sub_ptr_rhs_cast80 = $22;
    $inc = $cmp1_ & 1;
    $i_1_ph_ph = $i_06667;
    $beg_0_ph_ph = 0;
    $end_0_ph_ph = 0;
    $ptr37_0_ph_ph = $22;
    label = 18;
    break;
   case 18:
    $25 = HEAP32[$lim >> 2] | 0;
    $cmp68 = ($25 | 0) > ($i_1_ph_ph | 0);
    $or_cond = $cmp68 | $cmp1__not;
    $beg_0_ph = $beg_0_ph_ph;
    $end_0_ph = $end_0_ph_ph;
    $ptr37_0_ph = $ptr37_0_ph_ph;
    $skip_0_ph = 0;
    label = 19;
    break;
   case 19:
    $beg_0_ph76 = $beg_0_ph;
    $end_0_ph75 = $end_0_ph;
    $ptr37_0_ph74 = $ptr37_0_ph;
    label = 20;
    break;
   case 20:
    $beg_0 = $beg_0_ph76;
    $ptr37_0 = $ptr37_0_ph74;
    label = 21;
    break;
   case 21:
    $cmp51 = $ptr37_0 >>> 0 < $add_ptr >>> 0;
    if ($cmp51) {
      label = 22;
      break;
    } else {
      $beg_1 = $beg_0;
      $41 = $19;
      label = 41;
      break;
    }
   case 22:
    $incdec_ptr = $ptr37_0 + 1 | 0;
    $26 = HEAP8[$ptr37_0] | 0;
    $idxprom = $26 & 255;
    $arrayidx59 = $idxprom + 79088 | 0;
    $27 = HEAP8[$arrayidx59] | 0;
    $tobool60 = $27 << 24 >> 24 != 0;
    if ($skip_0_ph) {
      label = 25;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $sub_ptr_lhs_cast = $incdec_ptr;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    if ($tobool60) {
      $beg_0 = $sub_ptr_sub;
      $ptr37_0 = $incdec_ptr;
      label = 21;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    if ($or_cond) {
      $beg_0_ph = $beg_0;
      $end_0_ph = $sub_ptr_sub;
      $ptr37_0_ph = $incdec_ptr;
      $skip_0_ph = 1;
      label = 19;
      break;
    } else {
      $beg_1 = $beg_0;
      $41 = $19;
      label = 41;
      break;
    }
   case 25:
    if ($tobool60) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    $call54 = _mrb_gc_arena_save($mrb) | 0;
    $sub = $end_0_ph75 - $beg_0 | 0;
    _mrb_str_subseq($agg_tmp, $mrb, $str, $beg_0, $sub);
    _mrb_ary_push($mrb, $result, $agg_tmp);
    _mrb_gc_arena_restore($mrb, $call54);
    $sub_ptr_lhs_cast79 = $incdec_ptr;
    $sub_ptr_sub81 = $sub_ptr_lhs_cast79 - $sub_ptr_rhs_cast80 | 0;
    $inc_i_1 = $i_1_ph_ph + $inc | 0;
    $i_1_ph_ph = $inc_i_1;
    $beg_0_ph_ph = $sub_ptr_sub81;
    $end_0_ph_ph = $end_0_ph75;
    $ptr37_0_ph_ph = $incdec_ptr;
    label = 18;
    break;
   case 27:
    $sub_ptr_lhs_cast86 = $incdec_ptr;
    $sub_ptr_sub88 = $sub_ptr_lhs_cast86 - $sub_ptr_rhs_cast87 | 0;
    $beg_0_ph76 = $beg_0;
    $end_0_ph75 = $sub_ptr_sub88;
    $ptr37_0_ph74 = $incdec_ptr;
    label = 20;
    break;
   case 28:
    $p98 = $str;
    $29 = HEAP32[$p98 >> 2] | 0;
    $ptr99 = $29 + 20 | 0;
    $30 = $ptr99;
    $31 = HEAP32[$30 >> 2] | 0;
    $len108 = $29 + 12 | 0;
    $32 = $len108;
    $33 = HEAP32[$32 >> 2] | 0;
    $add_ptr109 = $31 + $33 | 0;
    $p112 = $spat;
    $34 = HEAP32[$p112 >> 2] | 0;
    $len113 = $34 + 12 | 0;
    $35 = $len113;
    $36 = HEAP32[$35 >> 2] | 0;
    $cmp114 = ($36 | 0) == 0;
    if ($cmp114) {
      label = 29;
      break;
    } else {
      label = 34;
      break;
    }
   case 29:
    $call119 = _mrb_gc_arena_save($mrb) | 0;
    $sub_ptr_rhs_cast126 = $31;
    $i_2_ph = $i_065;
    $ptr96_0_ph = $31;
    label = 30;
    break;
   case 30:
    $ptr96_0 = $ptr96_0_ph;
    label = 31;
    break;
   case 31:
    $cmp121 = $ptr96_0 >>> 0 < $add_ptr109 >>> 0;
    if ($cmp121) {
      label = 32;
      break;
    } else {
      $ptr96_2 = $ptr96_0;
      label = 40;
      break;
    }
   case 32:
    $sub_ptr_lhs_cast125 = $ptr96_0;
    $sub_ptr_sub127 = $sub_ptr_lhs_cast125 - $sub_ptr_rhs_cast126 | 0;
    _mrb_str_subseq($agg_tmp124, $mrb, $str, $sub_ptr_sub127, 1);
    _mrb_ary_push($mrb, $result, $agg_tmp124);
    _mrb_gc_arena_restore($mrb, $call119);
    $incdec_ptr128 = $ptr96_0 + 1 | 0;
    if ($cmp1_) {
      label = 33;
      break;
    } else {
      $ptr96_0 = $incdec_ptr128;
      label = 31;
      break;
    }
   case 33:
    $37 = HEAP32[$lim >> 2] | 0;
    $inc131 = $i_2_ph + 1 | 0;
    $cmp132 = ($37 | 0) > ($inc131 | 0);
    if ($cmp132) {
      $i_2_ph = $inc131;
      $ptr96_0_ph = $incdec_ptr128;
      label = 30;
      break;
    } else {
      $ptr96_2 = $incdec_ptr128;
      label = 40;
      break;
    }
   case 34:
    $ptr141 = $34 + 20 | 0;
    $38 = $ptr141;
    $39 = HEAP32[$38 >> 2] | 0;
    $call144 = _mrb_gc_arena_save($mrb) | 0;
    $sub_ptr_lhs_cast149 = $add_ptr109;
    $sub_ptr_rhs_cast160 = $31;
    $i_3_ph = $i_065;
    $ptr96_1_ph = $31;
    label = 35;
    break;
   case 35:
    $ptr96_1 = $ptr96_1_ph;
    label = 36;
    break;
   case 36:
    $cmp146 = $ptr96_1 >>> 0 < $add_ptr109 >>> 0;
    if ($cmp146) {
      label = 37;
      break;
    } else {
      $ptr96_2 = $ptr96_1;
      label = 40;
      break;
    }
   case 37:
    $sub_ptr_rhs_cast150 = $ptr96_1;
    $sub_ptr_sub151 = $sub_ptr_lhs_cast149 - $sub_ptr_rhs_cast150 | 0;
    $call152 = _mrb_memsearch($39, $36, $ptr96_1, $sub_ptr_sub151) | 0;
    $cmp153 = ($call152 | 0) > -1;
    if ($cmp153) {
      label = 38;
      break;
    } else {
      $ptr96_2 = $ptr96_1;
      label = 40;
      break;
    }
   case 38:
    $sub_ptr_sub161 = $sub_ptr_rhs_cast150 - $sub_ptr_rhs_cast160 | 0;
    _mrb_str_subseq($agg_tmp158, $mrb, $str, $sub_ptr_sub161, $call152);
    _mrb_ary_push($mrb, $result, $agg_tmp158);
    _mrb_gc_arena_restore($mrb, $call144);
    $add = $call152 + $36 | 0;
    $add_ptr162 = $ptr96_1 + $add | 0;
    if ($cmp1_) {
      label = 39;
      break;
    } else {
      $ptr96_1 = $add_ptr162;
      label = 36;
      break;
    }
   case 39:
    $40 = HEAP32[$lim >> 2] | 0;
    $inc165 = $i_3_ph + 1 | 0;
    $cmp166 = ($40 | 0) > ($inc165 | 0);
    if ($cmp166) {
      $i_3_ph = $inc165;
      $ptr96_1_ph = $add_ptr162;
      label = 35;
      break;
    } else {
      $ptr96_2 = $add_ptr162;
      label = 40;
      break;
    }
   case 40:
    $sub_ptr_lhs_cast172 = $ptr96_2;
    $sub_ptr_rhs_cast173 = $31;
    $sub_ptr_sub174 = $sub_ptr_lhs_cast172 - $sub_ptr_rhs_cast173 | 0;
    $beg_1 = $sub_ptr_sub174;
    $41 = $28;
    label = 41;
    break;
   case 41:
    $p180 = $str;
    $42 = HEAP32[$p180 >> 2] | 0;
    $len181 = $42 + 12 | 0;
    $43 = $len181;
    $44 = HEAP32[$43 >> 2] | 0;
    $cmp182 = ($44 | 0) > 0;
    if ($cmp182) {
      label = 42;
      break;
    } else {
      label = 48;
      break;
    }
   case 42:
    $cmp190 = ($44 | 0) > ($beg_1 | 0);
    $or_cond61 = $cmp1_ | $cmp190;
    if ($or_cond61) {
      label = 44;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    $45 = HEAP32[$lim >> 2] | 0;
    $cmp193 = ($45 | 0) < 0;
    if ($cmp193) {
      label = 44;
      break;
    } else {
      label = 48;
      break;
    }
   case 44:
    $46 = HEAP32[$p180 >> 2] | 0;
    $len198 = $46 + 12 | 0;
    $47 = $len198;
    $48 = HEAP32[$47 >> 2] | 0;
    $cmp199 = ($48 | 0) == ($beg_1 | 0);
    if ($cmp199) {
      label = 45;
      break;
    } else {
      label = 46;
      break;
    }
   case 45:
    _mrb_str_new_empty($tmp, $mrb, $str);
    label = 47;
    break;
   case 46:
    $sub207 = $48 - $beg_1 | 0;
    _mrb_str_subseq($tmp, $mrb, $str, $beg_1, $sub207);
    label = 47;
    break;
   case 47:
    _mrb_ary_push($mrb, $result, $tmp);
    label = 48;
    break;
   case 48:
    $cmp1__not62 = $cmp1_ ^ 1;
    $49 = HEAP32[$lim >> 2] | 0;
    $cmp213 = ($49 | 0) == 0;
    $or_cond63 = $cmp213 & $cmp1__not62;
    if ($or_cond63) {
      label = 49;
      break;
    } else {
      label = 53;
      break;
    }
   case 49:
    $p220 = $result;
    $50 = HEAP32[$p220 >> 2] | 0;
    $len22171 = $50 + 12 | 0;
    $51 = $len22171;
    $52 = HEAP32[$51 >> 2] | 0;
    $cmp22272 = ($52 | 0) > 0;
    if ($cmp22272) {
      label = 50;
      break;
    } else {
      label = 53;
      break;
    }
   case 50:
    $53 = $tmp;
    $p231 = $tmp;
    $55 = $50;
    $54 = $52;
    label = 51;
    break;
   case 51:
    $sub225 = $54 - 1 | 0;
    $ptr228 = $55 + 20 | 0;
    $56 = $ptr228;
    $57 = HEAP32[$56 >> 2] | 0;
    $arrayidx229 = $57 + ($sub225 * 12 & -1) | 0;
    $58 = $arrayidx229;
    HEAP32[$53 >> 2] = HEAP32[$58 >> 2] | 0;
    HEAP32[$53 + 4 >> 2] = HEAP32[$58 + 4 >> 2] | 0;
    HEAP32[$53 + 8 >> 2] = HEAP32[$58 + 8 >> 2] | 0;
    $59 = HEAP32[$p231 >> 2] | 0;
    $len232 = $59 + 12 | 0;
    $60 = $len232;
    $61 = HEAP32[$60 >> 2] | 0;
    $cmp233 = ($61 | 0) == 0;
    if ($cmp233) {
      label = 52;
      break;
    } else {
      label = 53;
      break;
    }
   case 52:
    _mrb_ary_pop($tmp238, 0, $result);
    $62 = HEAP32[$p220 >> 2] | 0;
    $len221 = $62 + 12 | 0;
    $63 = $len221;
    $64 = HEAP32[$63 >> 2] | 0;
    $cmp222 = ($64 | 0) > 0;
    if ($cmp222) {
      $55 = $62;
      $54 = $64;
      label = 51;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    $65 = $agg_result;
    HEAP32[$65 >> 2] = HEAP32[$41 >> 2] | 0;
    HEAP32[$65 + 4 >> 2] = HEAP32[$41 + 4 >> 2] | 0;
    HEAP32[$65 + 8 >> 2] = HEAP32[$41 + 8 >> 2] | 0;
    label = 54;
    break;
   case 54:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_to_i($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $argv = 0, $argc = 0, $agg_tmp = 0, $call = 0, $0 = 0, $cmp = 0, $1 = 0, $i = 0, $2 = 0, $cmp1 = 0, $call3 = 0, $base_07 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $argv = __stackBase__ | 0;
    $argc = __stackBase__ + 4 | 0;
    $agg_tmp = __stackBase__ + 8 | 0;
    $call = _mrb_get_args($mrb, 106572, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $argv, HEAP32[tempInt + 4 >> 2] = $argc, tempInt) | 0) | 0;
    $0 = HEAP32[$argc >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      $base_07 = 10;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $1 = HEAP32[$argv >> 2] | 0;
    $i = $1;
    $2 = HEAP32[$i >> 2] | 0;
    $cmp1 = ($2 | 0) < 0;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      $base_07 = $2;
      label = 5;
      break;
    }
   case 4:
    $call3 = _mrb_class_get($mrb, 103224) | 0;
    _mrb_fixnum_value47($agg_tmp, $2);
    _mrb_raisef($mrb, $call3, 93236, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    $base_07 = $2;
    label = 5;
    break;
   case 5:
    _mrb_str_to_inum($agg_result, $mrb, $self, $base_07, 0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_to_f($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_float_value53($agg_result, +_mrb_str_to_dbl($mrb, $self, 0));
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_to_s($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $string_class = 0, $0 = 0, $cmp = 0, $1 = 0, $2 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_obj_class($mrb, $self) | 0;
    $string_class = $mrb + 60 | 0;
    $0 = HEAP32[$string_class >> 2] | 0;
    $cmp = ($call | 0) == ($0 | 0);
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_str_dup($agg_result, $mrb, $self);
    label = 5;
    break;
   case 4:
    $1 = $agg_result;
    $2 = $self;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_upcase($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $str = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $str = __stackBase__ | 0;
  _mrb_str_dup($str, $mrb, $self);
  $0 = $str;
  _mrb_str_upcase_bang(__stackBase__ + 12 | 0, $mrb, $str);
  $1 = $agg_result;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2] | 0;
  HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_upcase_bang($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $p = 0, $0 = 0, $1 = 0, $2 = 0, $ptr = 0, $3 = 0, $4 = 0, $len = 0, $5 = 0, $6 = 0, $add_ptr = 0, $cmp5 = 0, $modify_07 = 0, $p1_06 = 0, $7 = 0, $conv = 0, $call = 0, $tobool = 0, $8 = 0, $conv9 = 0, $call10 = 0, $conv11 = 0, $modify_1 = 0, $incdec_ptr = 0, $cmp = 0, $tobool12 = 0, $9 = 0, $10 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $str;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    _mrb_str_modify($mrb, $1);
    $2 = HEAP32[$p >> 2] | 0;
    $ptr = $2 + 20 | 0;
    $3 = $ptr;
    $4 = HEAP32[$3 >> 2] | 0;
    $len = $2 + 12 | 0;
    $5 = $len;
    $6 = HEAP32[$5 >> 2] | 0;
    $add_ptr = $4 + $6 | 0;
    $cmp5 = ($6 | 0) > 0;
    if ($cmp5) {
      $p1_06 = $4;
      $modify_07 = 0;
      label = 3;
      break;
    } else {
      label = 8;
      break;
    }
   case 3:
    $7 = HEAP8[$p1_06] | 0;
    $conv = $7 & 255;
    $call = _islower($conv | 0) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      $modify_1 = $modify_07;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $8 = HEAP8[$p1_06] | 0;
    $conv9 = $8 & 255;
    $call10 = _toupper($conv9 | 0) | 0;
    $conv11 = $call10 & 255;
    HEAP8[$p1_06] = $conv11;
    $modify_1 = 1;
    label = 5;
    break;
   case 5:
    $incdec_ptr = $p1_06 + 1 | 0;
    $cmp = $incdec_ptr >>> 0 < $add_ptr >>> 0;
    if ($cmp) {
      $p1_06 = $incdec_ptr;
      $modify_07 = $modify_1;
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $tobool12 = ($modify_1 | 0) == 0;
    if ($tobool12) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $9 = $agg_result;
    $10 = $str;
    HEAP32[$9 >> 2] = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 + 4 >> 2] = HEAP32[$10 + 4 >> 2] | 0;
    HEAP32[$9 + 8 >> 2] = HEAP32[$10 + 8 >> 2] | 0;
    label = 9;
    break;
   case 8:
    _mrb_nil_value48($agg_result);
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_bytes($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $a = 0, $agg_tmp = 0, $p = 0, $0 = 0, $len = 0, $1 = 0, $2 = 0, $ptr = 0, $3 = 0, $4 = 0, $5 = 0, $add_ptr = 0, $cmp7 = 0, $p1_08 = 0, $6 = 0, $conv = 0, $incdec_ptr = 0, $cmp = 0, $7 = 0, $8 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $a = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $p = $str;
    $0 = HEAP32[$p >> 2] | 0;
    $len = $0 + 12 | 0;
    $1 = $len;
    $2 = HEAP32[$1 >> 2] | 0;
    _mrb_ary_new_capa($a, $mrb, $2);
    $ptr = $0 + 20 | 0;
    $3 = $ptr;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = HEAP32[$1 >> 2] | 0;
    $add_ptr = $4 + $5 | 0;
    $cmp7 = ($5 | 0) > 0;
    if ($cmp7) {
      $p1_08 = $4;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $6 = HEAP8[$p1_08] | 0;
    $conv = $6 & 255;
    _mrb_fixnum_value47($agg_tmp, $conv);
    _mrb_ary_push($mrb, $a, $agg_tmp);
    $incdec_ptr = $p1_08 + 1 | 0;
    $cmp = $incdec_ptr >>> 0 < $add_ptr >>> 0;
    if ($cmp) {
      $p1_08 = $incdec_ptr;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $7 = $agg_result;
    $8 = $a;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_memsearch($x0, $m, $y0, $n) {
  $x0 = $x0 | 0;
  $m = $m | 0;
  $y0 = $y0 | 0;
  $n = $n | 0;
  var $cmp = 0, $cmp1 = 0, $call = 0, $not_cmp3 = 0, $cond = 0, $cmp5 = 0, $cmp8 = 0, $add_ptr = 0, $y_0 = 0, $cmp10 = 0, $0 = 0, $1 = 0, $cmp12 = 0, $incdec_ptr = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $call19 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = ($m | 0) > ($n | 0);
    if ($cmp) {
      $retval_0 = -1;
      label = 12;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $cmp1 = ($m | 0) == ($n | 0);
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $call = _memcmp($x0 | 0, $y0 | 0, $m | 0) | 0;
    $not_cmp3 = ($call | 0) != 0;
    $cond = $not_cmp3 << 31 >> 31;
    $retval_0 = $cond;
    label = 12;
    break;
   case 5:
    $cmp5 = ($m | 0) < 1;
    if ($cmp5) {
      $retval_0 = 0;
      label = 12;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $cmp8 = ($m | 0) == 1;
    if ($cmp8) {
      label = 7;
      break;
    } else {
      label = 11;
      break;
    }
   case 7:
    $add_ptr = $y0 + $n | 0;
    $y_0 = $y0;
    label = 8;
    break;
   case 8:
    $cmp10 = $y_0 >>> 0 < $add_ptr >>> 0;
    if ($cmp10) {
      label = 9;
      break;
    } else {
      $retval_0 = -1;
      label = 12;
      break;
    }
   case 9:
    $0 = HEAP8[$x0] | 0;
    $1 = HEAP8[$y_0] | 0;
    $cmp12 = $0 << 24 >> 24 == $1 << 24 >> 24;
    $incdec_ptr = $y_0 + 1 | 0;
    if ($cmp12) {
      label = 10;
      break;
    } else {
      $y_0 = $incdec_ptr;
      label = 8;
      break;
    }
   case 10:
    $sub_ptr_lhs_cast = $y_0;
    $sub_ptr_rhs_cast = $y0;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $retval_0 = $sub_ptr_sub;
    label = 12;
    break;
   case 11:
    $call19 = _mrb_memsearch_qs($x0, $m, $y0, $n) | 0;
    $retval_0 = $call19;
    label = 12;
    break;
   case 12:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_str_new_empty($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $call = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $call = _str_new($mrb, 0, 0) | 0;
  _str_with_class(0, $call, $str);
  _mrb_obj_value44($agg_result, $call | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_memsearch_qs($xs, $m, $ys, $n) {
  $xs = $xs | 0;
  $m = $m | 0;
  $ys = $ys | 0;
  $n = $n | 0;
  var $qstable = 0, $add = 0, $add_ptr = 0, $cmp226 = 0, $sub_ptr_lhs_cast = 0, $i_028 = 0, $arrayidx = 0, $inc = 0, $exitcond = 0, $add_ptr9 = 0, $cmp1023 = 0, $add_ptr822 = 0, $0 = 0, $x_027 = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $1 = 0, $idxprom = 0, $arrayidx4 = 0, $incdec_ptr = 0, $cmp2 = 0, $add_ptr825 = 0, $y_024 = 0, $2 = 0, $cmp13 = 0, $call = 0, $cmp15 = 0, $sub_ptr_lhs_cast17 = 0, $sub_ptr_rhs_cast18 = 0, $sub_ptr_sub19 = 0, $3 = 0, $conv22 = 0, $add_ptr23 = 0, $4 = 0, $add_ptr24 = 0, $add_ptr24_sum = 0, $add_ptr8 = 0, $cmp10 = 0, $retval_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1024 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $qstable = __stackBase__ | 0;
    $add = $m + 1 | 0;
    $i_028 = 0;
    label = 5;
    break;
   case 3:
    $add_ptr = $xs + $m | 0;
    $cmp226 = ($m | 0) > 0;
    if ($cmp226) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $sub_ptr_lhs_cast = $add_ptr;
    $x_027 = $xs;
    label = 8;
    break;
   case 5:
    $arrayidx = $qstable + ($i_028 << 2) | 0;
    HEAP32[$arrayidx >> 2] = $add;
    $inc = $i_028 + 1 | 0;
    $exitcond = ($inc | 0) == 256;
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_028 = $inc;
      label = 5;
      break;
    }
   case 6:
    $add_ptr9 = $ys + $n | 0;
    $cmp1023 = ($m | 0) > ($n | 0);
    if ($cmp1023) {
      $retval_0 = -1;
      label = 13;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $add_ptr822 = $ys + $m | 0;
    $0 = HEAP8[$xs] | 0;
    $y_024 = $ys;
    $add_ptr825 = $add_ptr822;
    label = 9;
    break;
   case 8:
    $sub_ptr_rhs_cast = $x_027;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $1 = HEAP8[$x_027] | 0;
    $idxprom = $1 & 255;
    $arrayidx4 = $qstable + ($idxprom << 2) | 0;
    HEAP32[$arrayidx4 >> 2] = $sub_ptr_sub;
    $incdec_ptr = $x_027 + 1 | 0;
    $cmp2 = $incdec_ptr >>> 0 < $add_ptr >>> 0;
    if ($cmp2) {
      $x_027 = $incdec_ptr;
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 9:
    $2 = HEAP8[$y_024] | 0;
    $cmp13 = $0 << 24 >> 24 == $2 << 24 >> 24;
    if ($cmp13) {
      label = 10;
      break;
    } else {
      label = 12;
      break;
    }
   case 10:
    $call = _memcmp($xs | 0, $y_024 | 0, $m | 0) | 0;
    $cmp15 = ($call | 0) == 0;
    if ($cmp15) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $sub_ptr_lhs_cast17 = $y_024;
    $sub_ptr_rhs_cast18 = $ys;
    $sub_ptr_sub19 = $sub_ptr_lhs_cast17 - $sub_ptr_rhs_cast18 | 0;
    $retval_0 = $sub_ptr_sub19;
    label = 13;
    break;
   case 12:
    $3 = HEAP8[$add_ptr825] | 0;
    $conv22 = $3 & 255;
    $add_ptr23 = $qstable + ($conv22 << 2) | 0;
    $4 = HEAP32[$add_ptr23 >> 2] | 0;
    $add_ptr24 = $y_024 + $4 | 0;
    $add_ptr24_sum = $4 + $m | 0;
    $add_ptr8 = $y_024 + $add_ptr24_sum | 0;
    $cmp10 = $add_ptr8 >>> 0 > $add_ptr9 >>> 0;
    if ($cmp10) {
      $retval_0 = -1;
      label = 13;
      break;
    } else {
      $y_024 = $add_ptr24;
      $add_ptr825 = $add_ptr8;
      label = 9;
      break;
    }
   case 13:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _regexp_check($mrb, $obj) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $tmp = 0, $call = 0, $call1 = 0, $tobool = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $call = _mrb_obj_classname($mrb, $obj) | 0;
    $call1 = _memcmp($call | 0, 95220, 6) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _noregexp($tmp, $mrb, $obj);
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_rindex($str, $sub, $pos) {
  $str = $str | 0;
  $sub = $sub | 0;
  $pos = $pos | 0;
  var $p = 0, $0 = 0, $p2 = 0, $1 = 0, $len3 = 0, $2 = 0, $3 = 0, $len4 = 0, $4 = 0, $5 = 0, $cmp = 0, $sub6 = 0, $cmp7 = 0, $sub10 = 0, $sub10_pos = 0, $ptr = 0, $6 = 0, $7 = 0, $ptr13 = 0, $8 = 0, $9 = 0, $tobool = 0, $add_ptr = 0, $s_0 = 0, $cmp15 = 0, $call = 0, $cmp16 = 0, $incdec_ptr = 0, $10 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $sub;
  $sub = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$sub >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$sub + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$sub + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $str;
    $0 = HEAP32[$p >> 2] | 0;
    $p2 = $sub;
    $1 = HEAP32[$p2 >> 2] | 0;
    $len3 = $1 + 12 | 0;
    $2 = $len3;
    $3 = HEAP32[$2 >> 2] | 0;
    $len4 = $0 + 12 | 0;
    $4 = $len4;
    $5 = HEAP32[$4 >> 2] | 0;
    $cmp = ($5 | 0) < ($3 | 0);
    if ($cmp) {
      $retval_0 = -1;
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $sub6 = $5 - $pos | 0;
    $cmp7 = ($sub6 | 0) < ($3 | 0);
    $sub10 = $5 - $3 | 0;
    $sub10_pos = $cmp7 ? $sub10 : $pos;
    $ptr = $0 + 20 | 0;
    $6 = $ptr;
    $7 = HEAP32[$6 >> 2] | 0;
    $ptr13 = $1 + 20 | 0;
    $8 = $ptr13;
    $9 = HEAP32[$8 >> 2] | 0;
    $tobool = ($3 | 0) == 0;
    if ($tobool) {
      $retval_0 = $sub10_pos;
      label = 8;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $add_ptr = $7 + $sub10_pos | 0;
    $s_0 = $add_ptr;
    label = 5;
    break;
   case 5:
    $cmp15 = $7 >>> 0 > $s_0 >>> 0;
    if ($cmp15) {
      $retval_0 = -1;
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $call = _memcmp($s_0 | 0, $9 | 0, $3 | 0) | 0;
    $cmp16 = ($call | 0) == 0;
    $incdec_ptr = $s_0 - 1 | 0;
    if ($cmp16) {
      label = 7;
      break;
    } else {
      $s_0 = $incdec_ptr;
      label = 5;
      break;
    }
   case 7:
    $10 = HEAP32[$6 >> 2] | 0;
    $sub_ptr_lhs_cast = $s_0;
    $sub_ptr_rhs_cast = $10;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $retval_0 = $sub_ptr_sub;
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _str_replace($agg_result, $mrb, $s1, $s2) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $s1 = $s1 | 0;
  $s2 = $s2 | 0;
  var $0 = 0, $1 = 0, $and = 0, $tobool = 0, $2 = 0, $3 = 0, $and2 = 0, $tobool3 = 0, $aux = 0, $shared = 0, $4 = 0, $ptr = 0, $5 = 0, $ptr5 = 0, $6 = 0, $ptr6 = 0, $len = 0, $7 = 0, $len7 = 0, $aux8 = 0, $shared9 = 0, $8 = 0, $aux10 = 0, $shared11 = 0, $9 = 0, $_c = 0, $10 = 0, $11 = 0, $12 = 0, $refcnt = 0, $13 = 0, $inc = 0, $len16 = 0, $14 = 0, $cmp = 0, $15 = 0, $16 = 0, $and20 = 0, $tobool21 = 0, $aux23 = 0, $shared24 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $add = 0, $call = 0, $ptr29 = 0, $ptr31 = 0, $21 = 0, $add33 = 0, $call34 = 0, $ptr37 = 0, $22 = 0, $ptr38 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $arrayidx = 0, $27 = 0, $len43 = 0, $28 = 0, $capa = 0, $29 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $s2;
    $1 = HEAP32[$0 >> 2] | 0;
    $and = $1 & 2048;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $2 = $s1;
    $3 = HEAP32[$2 >> 2] | 0;
    $and2 = $3 & 2048;
    $tobool3 = ($and2 | 0) == 0;
    if ($tobool3) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $aux = $s1 + 16 | 0;
    $shared = $aux;
    $4 = HEAP32[$shared >> 2] | 0;
    _str_decref($mrb, $4);
    label = 6;
    break;
   case 5:
    $ptr = $s1 + 20 | 0;
    $5 = HEAP32[$ptr >> 2] | 0;
    _mrb_free($mrb, $5);
    label = 6;
    break;
   case 6:
    $ptr5 = $s2 + 20 | 0;
    $6 = HEAP32[$ptr5 >> 2] | 0;
    $ptr6 = $s1 + 20 | 0;
    HEAP32[$ptr6 >> 2] = $6;
    $len = $s2 + 12 | 0;
    $7 = HEAP32[$len >> 2] | 0;
    $len7 = $s1 + 12 | 0;
    HEAP32[$len7 >> 2] = $7;
    $aux8 = $s2 + 16 | 0;
    $shared9 = $aux8;
    $8 = HEAP32[$shared9 >> 2] | 0;
    $aux10 = $s1 + 16 | 0;
    $shared11 = $aux10;
    $9 = $aux10 | 0;
    $_c = $8;
    HEAP32[$9 >> 2] = $_c;
    $10 = HEAP32[$2 >> 2] | 0;
    $11 = $10 | 2048;
    HEAP32[$2 >> 2] = $11;
    $12 = HEAP32[$shared11 >> 2] | 0;
    $refcnt = $12 + 4 | 0;
    $13 = HEAP32[$refcnt >> 2] | 0;
    $inc = $13 + 1 | 0;
    HEAP32[$refcnt >> 2] = $inc;
    label = 13;
    break;
   case 7:
    $len16 = $s2 + 12 | 0;
    $14 = HEAP32[$len16 >> 2] | 0;
    $cmp = ($14 | 0) > 10;
    if ($cmp) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    _str_make_shared($mrb, $s2);
    label = 3;
    break;
   case 9:
    $15 = $s1;
    $16 = HEAP32[$15 >> 2] | 0;
    $and20 = $16 & 2048;
    $tobool21 = ($and20 | 0) == 0;
    if ($tobool21) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $aux23 = $s1 + 16 | 0;
    $shared24 = $aux23;
    $17 = HEAP32[$shared24 >> 2] | 0;
    _str_decref($mrb, $17);
    $18 = HEAP32[$15 >> 2] | 0;
    $19 = $18 & -2049;
    HEAP32[$15 >> 2] = $19;
    $20 = HEAP32[$len16 >> 2] | 0;
    $add = $20 + 1 | 0;
    $call = _mrb_malloc($mrb, $add) | 0;
    $ptr29 = $s1 + 20 | 0;
    HEAP32[$ptr29 >> 2] = $call;
    label = 12;
    break;
   case 11:
    $ptr31 = $s1 + 20 | 0;
    $21 = HEAP32[$ptr31 >> 2] | 0;
    $add33 = $14 + 1 | 0;
    $call34 = _mrb_realloc($mrb, $21, $add33) | 0;
    HEAP32[$ptr31 >> 2] = $call34;
    label = 12;
    break;
   case 12:
    $ptr37 = $s1 + 20 | 0;
    $22 = HEAP32[$ptr37 >> 2] | 0;
    $ptr38 = $s2 + 20 | 0;
    $23 = HEAP32[$ptr38 >> 2] | 0;
    $24 = HEAP32[$len16 >> 2] | 0;
    _memcpy($22 | 0, $23 | 0, $24);
    $25 = HEAP32[$len16 >> 2] | 0;
    $26 = HEAP32[$ptr37 >> 2] | 0;
    $arrayidx = $26 + $25 | 0;
    HEAP8[$arrayidx] = 0;
    $27 = HEAP32[$len16 >> 2] | 0;
    $len43 = $s1 + 12 | 0;
    HEAP32[$len43 >> 2] = $27;
    $28 = HEAP32[$len16 >> 2] | 0;
    $capa = $s1 + 16 | 0;
    HEAP32[$capa >> 2] = $28;
    label = 13;
    break;
   case 13:
    $29 = $s1 | 0;
    _mrb_obj_value44($agg_result, $29);
    return;
  }
}
function _mrb_str_index($str, $sub, $offset) {
  $str = $str | 0;
  $sub = $sub | 0;
  $offset = $offset | 0;
  var $p = 0, $0 = 0, $len1 = 0, $1 = 0, $2 = 0, $p3 = 0, $3 = 0, $len4 = 0, $4 = 0, $5 = 0, $cmp = 0, $add = 0, $cmp5 = 0, $offset_addr_0 = 0, $sub8 = 0, $cmp9 = 0, $6 = 0, $ptr = 0, $7 = 0, $8 = 0, $tobool = 0, $add_ptr = 0, $s_0 = 0, $cmp16 = 0, $9 = 0, $ptr21 = 0, $10 = 0, $11 = 0, $len24 = 0, $12 = 0, $13 = 0, $14 = 0, $len27 = 0, $15 = 0, $16 = 0, $sub28 = 0, $call = 0, $cmp29 = 0, $add32 = 0, $call_add32 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $sub;
  $sub = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$sub >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$sub + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$sub + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $str;
    $0 = HEAP32[$p >> 2] | 0;
    $len1 = $0 + 12 | 0;
    $1 = $len1;
    $2 = HEAP32[$1 >> 2] | 0;
    $p3 = $sub;
    $3 = HEAP32[$p3 >> 2] | 0;
    $len4 = $3 + 12 | 0;
    $4 = $len4;
    $5 = HEAP32[$4 >> 2] | 0;
    $cmp = ($offset | 0) < 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $offset_addr_0 = $offset;
      label = 4;
      break;
    }
   case 3:
    $add = $2 + $offset | 0;
    $cmp5 = ($add | 0) < 0;
    if ($cmp5) {
      $retval_0 = -1;
      label = 9;
      break;
    } else {
      $offset_addr_0 = $add;
      label = 4;
      break;
    }
   case 4:
    $sub8 = $2 - $offset_addr_0 | 0;
    $cmp9 = ($sub8 | 0) < ($5 | 0);
    if ($cmp9) {
      $retval_0 = -1;
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $6 = HEAP32[$p >> 2] | 0;
    $ptr = $6 + 20 | 0;
    $7 = $ptr;
    $8 = HEAP32[$7 >> 2] | 0;
    $tobool = ($offset_addr_0 | 0) == 0;
    if ($tobool) {
      $s_0 = $8;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $add_ptr = $8 + $offset_addr_0 | 0;
    $s_0 = $add_ptr;
    label = 7;
    break;
   case 7:
    $cmp16 = ($5 | 0) == 0;
    if ($cmp16) {
      $retval_0 = $offset_addr_0;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $9 = HEAP32[$p3 >> 2] | 0;
    $ptr21 = $9 + 20 | 0;
    $10 = $ptr21;
    $11 = HEAP32[$10 >> 2] | 0;
    $len24 = $9 + 12 | 0;
    $12 = $len24;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = HEAP32[$p >> 2] | 0;
    $len27 = $14 + 12 | 0;
    $15 = $len27;
    $16 = HEAP32[$15 >> 2] | 0;
    $sub28 = $16 - $offset_addr_0 | 0;
    $call = _mrb_memsearch($11, $13, $s_0, $sub28) | 0;
    $cmp29 = ($call | 0) < 0;
    $add32 = $cmp29 ? 0 : $offset_addr_0;
    $call_add32 = $add32 + $call | 0;
    STACKTOP = __stackBase__;
    return $call_add32 | 0;
   case 9:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _sym_hash_func($s_0, $s_1) {
  $s_0 = $s_0 | 0;
  $s_1 = $s_1 | 0;
  var $cmp1 = 0, $p_04 = 0, $i_03 = 0, $h_02 = 0, $sub = 0, $incdec_ptr = 0, $0 = 0, $conv = 0, $add = 0, $inc = 0, $exitcond = 0, $h_0_lcssa = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp1 = ($s_0 | 0) == 0;
    if ($cmp1) {
      $h_0_lcssa = 0;
      label = 4;
      break;
    } else {
      $h_02 = 0;
      $i_03 = 0;
      $p_04 = $s_1;
      label = 3;
      break;
    }
   case 3:
    $sub = $h_02 * 31 & -1;
    $incdec_ptr = $p_04 + 1 | 0;
    $0 = HEAP8[$p_04] | 0;
    $conv = $0 << 24 >> 24;
    $add = $conv + $sub | 0;
    $inc = $i_03 + 1 | 0;
    $exitcond = ($inc | 0) == ($s_0 | 0);
    if ($exitcond) {
      $h_0_lcssa = $add;
      label = 4;
      break;
    } else {
      $h_02 = $add;
      $i_03 = $inc;
      $p_04 = $incdec_ptr;
      label = 3;
      break;
    }
   case 4:
    return $h_0_lcssa | 0;
  }
  return 0;
}
function _mrb_nil_value91($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_sym2name_len($mrb, $sym, $lenp) {
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  $lenp = $lenp | 0;
  var $name2sym = 0, $0 = 0, $n_buckets = 0, $1 = 0, $cmp17 = 0, $e_flags = 0, $2 = 0, $d_flags = 0, $vals = 0, $k_018 = 0, $div = 0, $arrayidx = 0, $3 = 0, $rem = 0, $arrayidx1 = 0, $4 = 0, $and14 = 0, $tobool = 0, $5 = 0, $arrayidx4 = 0, $6 = 0, $and915 = 0, $tobool10 = 0, $7 = 0, $arrayidx11 = 0, $8 = 0, $cmp14 = 0, $keys = 0, $9 = 0, $sname_sroa_0_0__idx = 0, $sname_sroa_0_0_copyload = 0, $sname_sroa_1_4__idx1 = 0, $sname_sroa_1_4_copyload = 0, $inc = 0, $10 = 0, $cmp = 0, $storemerge = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $name2sym = $mrb + 568 | 0;
    $0 = HEAP32[$name2sym >> 2] | 0;
    $n_buckets = $0 | 0;
    $1 = HEAP32[$n_buckets >> 2] | 0;
    $cmp17 = ($1 | 0) == 0;
    if ($cmp17) {
      $retval_0 = 0;
      $storemerge = 0;
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $e_flags = $0 + 16 | 0;
    $2 = HEAP32[$e_flags >> 2] | 0;
    $d_flags = $0 + 20 | 0;
    $vals = $0 + 28 | 0;
    $k_018 = 0;
    label = 4;
    break;
   case 4:
    $div = $k_018 >>> 3;
    $arrayidx = $2 + $div | 0;
    $3 = HEAP8[$arrayidx] | 0;
    $rem = $k_018 & 7;
    $arrayidx1 = $rem + 112180 | 0;
    $4 = HEAP8[$arrayidx1] | 0;
    $and14 = $4 & $3;
    $tobool = $and14 << 24 >> 24 == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 8;
      break;
    }
   case 5:
    $5 = HEAP32[$d_flags >> 2] | 0;
    $arrayidx4 = $5 + $div | 0;
    $6 = HEAP8[$arrayidx4] | 0;
    $and915 = $6 & $4;
    $tobool10 = $and915 << 24 >> 24 == 0;
    if ($tobool10) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    $7 = HEAP32[$vals >> 2] | 0;
    $arrayidx11 = $7 + ($k_018 << 1) | 0;
    $8 = HEAP16[$arrayidx11 >> 1] | 0;
    $cmp14 = $8 << 16 >> 16 == $sym << 16 >> 16;
    if ($cmp14) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $keys = $0 + 24 | 0;
    $9 = HEAP32[$keys >> 2] | 0;
    $sname_sroa_0_0__idx = $9 + ($k_018 << 3) | 0;
    $sname_sroa_0_0_copyload = HEAP32[$sname_sroa_0_0__idx >> 2] | 0;
    $sname_sroa_1_4__idx1 = $9 + ($k_018 << 3) + 4 | 0;
    $sname_sroa_1_4_copyload = HEAP32[$sname_sroa_1_4__idx1 >> 2] | 0;
    $retval_0 = $sname_sroa_1_4_copyload;
    $storemerge = $sname_sroa_0_0_copyload;
    label = 9;
    break;
   case 8:
    $inc = $k_018 + 1 | 0;
    $10 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($inc | 0) == ($10 | 0);
    if ($cmp) {
      $retval_0 = 0;
      $storemerge = 0;
      label = 9;
      break;
    } else {
      $k_018 = $inc;
      label = 4;
      break;
    }
   case 9:
    HEAP32[$lenp >> 2] = $storemerge;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_undef_value($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 5;
  return;
}
function _mrb_str_aref($agg_result, $mrb, $str, $indx) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  $indx = $indx | 0;
  var $tmp = 0, $beg = 0, $len14 = 0, $tmp16 = 0, $tt = 0, $0 = 0, $idx_0_in = 0, $idx_0 = 0, $1 = 0, $2 = 0, $tt1 = 0, $3 = 0, $cmp = 0, $i3 = 0, $4 = 0, $tobool = 0, $p = 0, $5 = 0, $len = 0, $6 = 0, $7 = 0, $cmp6 = 0, $8 = 0, $call = 0, $cmp8 = 0, $p18 = 0, $9 = 0, $len19 = 0, $10 = 0, $11 = 0, $call20 = 0, $tobool21 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $indx;
  $indx = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$indx >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$indx + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$indx + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $beg = __stackBase__ + 12 | 0;
    $len14 = __stackBase__ + 16 | 0;
    $tmp16 = __stackBase__ + 20 | 0;
    _regexp_check($mrb, $indx);
    $tt = $indx + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    if (($0 | 0) == 16) {
      label = 8;
      break;
    } else if (($0 | 0) == 17) {
      label = 11;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $idx_0_in = $indx;
    $idx_0 = HEAP32[$idx_0_in >> 2] | 0;
    _mrb_str_substr($tmp, $mrb, $str, $idx_0, 1);
    $1 = $str;
    $2 = $tmp;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    $tt1 = $str + 8 | 0;
    $3 = HEAP32[$tt1 >> 2] | 0;
    $cmp = ($3 | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $i3 = $str;
    $4 = HEAP32[$i3 >> 2] | 0;
    $tobool = ($4 | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $p = $str;
    $5 = HEAP32[$p >> 2] | 0;
    $len = $5 + 12 | 0;
    $6 = $len;
    $7 = HEAP32[$6 >> 2] | 0;
    $cmp6 = ($7 | 0) == 0;
    if ($cmp6) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _mrb_nil_value48($agg_result);
    label = 14;
    break;
   case 7:
    $8 = $agg_result;
    HEAP32[$8 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$8 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$8 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 14;
    break;
   case 8:
    $call = _mrb_str_index($str, $indx, 0) | 0;
    $cmp8 = ($call | 0) == -1;
    if ($cmp8) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    _mrb_str_dup($agg_result, $mrb, $indx);
    label = 14;
    break;
   case 10:
    _mrb_nil_value48($agg_result);
    label = 14;
    break;
   case 11:
    $p18 = $str;
    $9 = HEAP32[$p18 >> 2] | 0;
    $len19 = $9 + 12 | 0;
    $10 = $len19;
    $11 = HEAP32[$10 >> 2] | 0;
    HEAP32[$len14 >> 2] = $11;
    $call20 = _mrb_range_beg_len($mrb, $indx, $beg, $len14, $11) | 0;
    $tobool21 = ($call20 | 0) == 0;
    if ($tobool21) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $12 = HEAP32[$beg >> 2] | 0;
    $13 = HEAP32[$len14 >> 2] | 0;
    _mrb_str_subseq($tmp16, $mrb, $str, $12, $13);
    $14 = $tmp16;
    $15 = $agg_result;
    HEAP32[$15 >> 2] = HEAP32[$14 >> 2] | 0;
    HEAP32[$15 + 4 >> 2] = HEAP32[$14 + 4 >> 2] | 0;
    HEAP32[$15 + 8 >> 2] = HEAP32[$14 + 8 >> 2] | 0;
    label = 14;
    break;
   case 13:
    _mrb_nil_value48($agg_result);
    label = 14;
    break;
   case 14:
    STACKTOP = __stackBase__;
    return;
  }
}
function _kh_alloc_n2s($h) {
  $h = $h | 0;
  var $0 = 0, $shr = 0, $shr1 = 0, $mrb = 0, $call = 0, $e_flags = 0, $div3 = 0, $d_flags = 0;
  $0 = HEAP32[$h >> 2] | 0;
  HEAP32[$h + 8 >> 2] = 0;
  HEAP32[$h + 4 >> 2] = 0;
  $shr = $0 >>> 2;
  $shr1 = $0 >>> 1;
  HEAP32[$h + 12 >> 2] = $shr | $shr1;
  $mrb = $h + 40 | 0;
  $call = _mrb_malloc(HEAP32[$mrb >> 2] | 0, $shr) | 0;
  $e_flags = $h + 16 | 0;
  HEAP32[$e_flags >> 2] = $call;
  $div3 = $0 >>> 3;
  $d_flags = $h + 20 | 0;
  HEAP32[$d_flags >> 2] = $call + $div3 | 0;
  _kh_fill_flags(HEAP32[$e_flags >> 2] | 0, -1, $div3);
  _kh_fill_flags(HEAP32[$d_flags >> 2] | 0, 0, $div3);
  HEAP32[$h + 24 >> 2] = _mrb_malloc(HEAP32[$mrb >> 2] | 0, $0 << 3) | 0;
  HEAP32[$h + 28 >> 2] = _mrb_malloc(HEAP32[$mrb >> 2] | 0, $0 << 1) | 0;
  HEAP32[$h + 32 >> 2] = $0 - 1 | 0;
  HEAP32[$h + 36 >> 2] = $shr1 - 1 | 0;
  return;
}
function _kh_fill_flags($p, $c, $len) {
  $p = $p | 0;
  $c = $c | 0;
  $len = $len | 0;
  var $cmp1 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp1 = ($len | 0) == 0;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _memset($p | 0, $c | 0, $len | 0);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _kh_init_n2s_size($mrb, $size) {
  $mrb = $mrb | 0;
  $size = $size | 0;
  var $call = 0, $0 = 0, $dec = 0, $or = 0, $or2 = 0, $or4 = 0, $or6 = 0;
  $call = _mrb_calloc($mrb, 1, 44) | 0;
  $0 = $call;
  $dec = $size >>> 0 < 8 ? 7 : $size - 1 | 0;
  $or = $dec >>> 1 | $dec;
  $or2 = $or >>> 2 | $or;
  $or4 = $or2 >>> 4 | $or2;
  $or6 = $or4 >>> 8 | $or4;
  HEAP32[$call >> 2] = ($or6 >>> 16 | $or6) + 1 | 0;
  HEAP32[$call + 40 >> 2] = $mrb;
  _kh_alloc_n2s($0);
  return $0 | 0;
}
function _kh_init_n2s($mrb) {
  $mrb = $mrb | 0;
  return _kh_init_n2s_size($mrb, 32) | 0;
}
function _kh_destroy_n2s($h) {
  $h = $h | 0;
  var $tobool = 0, $mrb = 0, $0 = 0, $keys = 0, $1 = 0, $2 = 0, $3 = 0, $vals = 0, $4 = 0, $5 = 0, $6 = 0, $e_flags = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($h | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $mrb = $h + 40 | 0;
    $0 = HEAP32[$mrb >> 2] | 0;
    $keys = $h + 24 | 0;
    $1 = HEAP32[$keys >> 2] | 0;
    $2 = $1;
    _mrb_free($0, $2);
    $3 = HEAP32[$mrb >> 2] | 0;
    $vals = $h + 28 | 0;
    $4 = HEAP32[$vals >> 2] | 0;
    $5 = $4;
    _mrb_free($3, $5);
    $6 = HEAP32[$mrb >> 2] | 0;
    $e_flags = $h + 16 | 0;
    $7 = HEAP32[$e_flags >> 2] | 0;
    _mrb_free($6, $7);
    $8 = HEAP32[$mrb >> 2] | 0;
    $9 = $h;
    _mrb_free($8, $9);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _kh_get_n2s($h, $key_0, $key_1) {
  $h = $h | 0;
  $key_0 = $key_0 | 0;
  $key_1 = $key_1 | 0;
  var $call = 0, $mask = 0, $0 = 0, $and = 0, $div23 = 0, $e_flags = 0, $1 = 0, $arrayidx24 = 0, $2 = 0, $rem25 = 0, $arrayidx326 = 0, $3 = 0, $and52027 = 0, $lnot28 = 0, $d_flags = 0, $4 = 0, $keys = 0, $inc = 0, $5 = 0, $div30 = 0, $k_029 = 0, $arrayidx7 = 0, $6 = 0, $and1221 = 0, $tobool13 = 0, $7 = 0, $len15 = 0, $8 = 0, $cmp = 0, $name20 = 0, $9 = 0, $call25 = 0, $cmp26 = 0, $10 = 0, $add = 0, $11 = 0, $and31 = 0, $div = 0, $12 = 0, $arrayidx = 0, $13 = 0, $rem = 0, $arrayidx3 = 0, $14 = 0, $and520 = 0, $lnot = 0, $n_buckets = 0, $15 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _sym_hash_func($key_0, $key_1) | 0;
    $mask = $h + 32 | 0;
    $0 = HEAP32[$mask >> 2] | 0;
    $and = $0 & $call;
    $div23 = $and >>> 3;
    $e_flags = $h + 16 | 0;
    $1 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx24 = $1 + $div23 | 0;
    $2 = HEAP8[$arrayidx24] | 0;
    $rem25 = $and & 7;
    $arrayidx326 = $rem25 + 112180 | 0;
    $3 = HEAP8[$arrayidx326] | 0;
    $and52027 = $3 & $2;
    $lnot28 = $and52027 << 24 >> 24 == 0;
    if ($lnot28) {
      label = 3;
      break;
    } else {
      label = 8;
      break;
    }
   case 3:
    $d_flags = $h + 20 | 0;
    $4 = HEAP32[$d_flags >> 2] | 0;
    $keys = $h + 24 | 0;
    $inc = $h + 36 | 0;
    $k_029 = $and;
    $div30 = $div23;
    $5 = $3;
    label = 4;
    break;
   case 4:
    $arrayidx7 = $4 + $div30 | 0;
    $6 = HEAP8[$arrayidx7] | 0;
    $and1221 = $6 & $5;
    $tobool13 = $and1221 << 24 >> 24 == 0;
    if ($tobool13) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    $7 = HEAP32[$keys >> 2] | 0;
    $len15 = $7 + ($k_029 << 3) | 0;
    $8 = HEAP32[$len15 >> 2] | 0;
    $cmp = ($8 | 0) == ($key_0 | 0);
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $name20 = $7 + ($k_029 << 3) + 4 | 0;
    $9 = HEAP32[$name20 >> 2] | 0;
    $call25 = _memcmp($9 | 0, $key_1 | 0, $8 | 0) | 0;
    $cmp26 = ($call25 | 0) == 0;
    if ($cmp26) {
      $retval_0 = $k_029;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $10 = HEAP32[$inc >> 2] | 0;
    $add = $10 + $k_029 | 0;
    $11 = HEAP32[$mask >> 2] | 0;
    $and31 = $add & $11;
    $div = $and31 >>> 3;
    $12 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $12 + $div | 0;
    $13 = HEAP8[$arrayidx] | 0;
    $rem = $and31 & 7;
    $arrayidx3 = $rem + 112180 | 0;
    $14 = HEAP8[$arrayidx3] | 0;
    $and520 = $14 & $13;
    $lnot = $and520 << 24 >> 24 == 0;
    if ($lnot) {
      $k_029 = $and31;
      $div30 = $div;
      $5 = $14;
      label = 4;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $n_buckets = $h | 0;
    $15 = HEAP32[$n_buckets >> 2] | 0;
    $retval_0 = $15;
    label = 9;
    break;
   case 9:
    return $retval_0 | 0;
  }
  return 0;
}
function _kh_resize_n2s($h, $new_n_buckets) {
  $h = $h | 0;
  $new_n_buckets = $new_n_buckets | 0;
  var $cmp = 0, $new_n_buckets_op = 0, $dec = 0, $shr = 0, $or = 0, $shr1 = 0, $or2 = 0, $shr3 = 0, $or4 = 0, $shr5 = 0, $or6 = 0, $shr7 = 0, $or8 = 0, $inc = 0, $e_flags = 0, $0 = 0, $keys = 0, $1 = 0, $vals = 0, $2 = 0, $n_buckets = 0, $3 = 0, $cmp1033 = 0, $i_034 = 0, $div = 0, $arrayidx = 0, $4 = 0, $rem = 0, $arrayidx11 = 0, $5 = 0, $and32 = 0, $tobool = 0, $len = 0, $6 = 0, $name = 0, $7 = 0, $call = 0, $arrayidx15 = 0, $8 = 0, $9 = 0, $arrayidx17 = 0, $inc19 = 0, $exitcond = 0, $mrb = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = $new_n_buckets >>> 0 < 8;
    $new_n_buckets_op = $new_n_buckets - 1 | 0;
    $dec = $cmp ? 7 : $new_n_buckets_op;
    $shr = $dec >>> 1;
    $or = $shr | $dec;
    $shr1 = $or >>> 2;
    $or2 = $shr1 | $or;
    $shr3 = $or2 >>> 4;
    $or4 = $shr3 | $or2;
    $shr5 = $or4 >>> 8;
    $or6 = $shr5 | $or4;
    $shr7 = $or6 >>> 16;
    $or8 = $shr7 | $or6;
    $inc = $or8 + 1 | 0;
    $e_flags = $h + 16 | 0;
    $0 = HEAP32[$e_flags >> 2] | 0;
    $keys = $h + 24 | 0;
    $1 = HEAP32[$keys >> 2] | 0;
    $vals = $h + 28 | 0;
    $2 = HEAP32[$vals >> 2] | 0;
    $n_buckets = $h | 0;
    $3 = HEAP32[$n_buckets >> 2] | 0;
    HEAP32[$n_buckets >> 2] = $inc;
    _kh_alloc_n2s($h);
    $cmp1033 = ($3 | 0) == 0;
    if ($cmp1033) {
      label = 6;
      break;
    } else {
      $i_034 = 0;
      label = 3;
      break;
    }
   case 3:
    $div = $i_034 >>> 3;
    $arrayidx = $0 + $div | 0;
    $4 = HEAP8[$arrayidx] | 0;
    $rem = $i_034 & 7;
    $arrayidx11 = $rem + 112180 | 0;
    $5 = HEAP8[$arrayidx11] | 0;
    $and32 = $5 & $4;
    $tobool = $and32 << 24 >> 24 == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $len = $1 + ($i_034 << 3) | 0;
    $6 = HEAP32[$len >> 2] | 0;
    $name = $1 + ($i_034 << 3) + 4 | 0;
    $7 = HEAP32[$name >> 2] | 0;
    $call = _kh_put_n2s($h, $6, $7) | 0;
    $arrayidx15 = $2 + ($i_034 << 1) | 0;
    $8 = HEAP16[$arrayidx15 >> 1] | 0;
    $9 = HEAP32[$vals >> 2] | 0;
    $arrayidx17 = $9 + ($call << 1) | 0;
    HEAP16[$arrayidx17 >> 1] = $8;
    label = 5;
    break;
   case 5:
    $inc19 = $i_034 + 1 | 0;
    $exitcond = ($inc19 | 0) == ($3 | 0);
    if ($exitcond) {
      label = 6;
      break;
    } else {
      $i_034 = $inc19;
      label = 3;
      break;
    }
   case 6:
    $mrb = $h + 40 | 0;
    $10 = HEAP32[$mrb >> 2] | 0;
    _mrb_free($10, $0);
    $11 = HEAP32[$mrb >> 2] | 0;
    $12 = $1;
    _mrb_free($11, $12);
    $13 = HEAP32[$mrb >> 2] | 0;
    $14 = $2;
    _mrb_free($13, $14);
    return;
  }
}
function _kh_put_n2s($h, $key_0, $key_1) {
  $h = $h | 0;
  $key_0 = $key_0 | 0;
  $key_1 = $key_1 | 0;
  var $n_occupied = 0, $0 = 0, $upper_bound = 0, $1 = 0, $cmp = 0, $n_buckets = 0, $2 = 0, $mul = 0, $call = 0, $mask = 0, $3 = 0, $and = 0, $div50 = 0, $e_flags = 0, $4 = 0, $arrayidx51 = 0, $5 = 0, $rem52 = 0, $arrayidx353 = 0, $6 = 0, $and54654 = 0, $tobool55 = 0, $d_flags = 0, $7 = 0, $keys = 0, $inc = 0, $8 = 0, $arrayidx358 = 0, $div57 = 0, $k_056 = 0, $arrayidx7 = 0, $9 = 0, $and1247 = 0, $phitmp = 0, $10 = 0, $len15 = 0, $11 = 0, $cmp17 = 0, $name21 = 0, $12 = 0, $call26 = 0, $cmp27 = 0, $13 = 0, $add = 0, $14 = 0, $and32 = 0, $div = 0, $15 = 0, $arrayidx = 0, $16 = 0, $rem = 0, $arrayidx3 = 0, $17 = 0, $and546 = 0, $tobool = 0, $arrayidx3_lcssa = 0, $div_lcssa = 0, $k_0_lcssa = 0, $18 = 0, $arrayidx35 = 0, $19 = 0, $20 = 0, $and4048 = 0, $tobool41 = 0, $keys43 = 0, $21 = 0, $key_sroa_0_0__idx18 = 0, $key_sroa_1_4__idx22 = 0, $22 = 0, $neg = 0, $23 = 0, $arrayidx50 = 0, $24 = 0, $and52 = 0, $size = 0, $25 = 0, $inc54 = 0, $26 = 0, $inc56 = 0, $d_flags58 = 0, $27 = 0, $arrayidx59 = 0, $28 = 0, $and6449 = 0, $tobool65 = 0, $keys67 = 0, $29 = 0, $key_sroa_0_0__idx = 0, $key_sroa_1_4__idx21 = 0, $30 = 0, $neg72 = 0, $31 = 0, $arrayidx75 = 0, $32 = 0, $and77 = 0, $size79 = 0, $33 = 0, $inc80 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $n_occupied = $h + 8 | 0;
    $0 = HEAP32[$n_occupied >> 2] | 0;
    $upper_bound = $h + 12 | 0;
    $1 = HEAP32[$upper_bound >> 2] | 0;
    $cmp = $0 >>> 0 < $1 >>> 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $n_buckets = $h | 0;
    $2 = HEAP32[$n_buckets >> 2] | 0;
    $mul = $2 << 1;
    _kh_resize_n2s($h, $mul);
    label = 4;
    break;
   case 4:
    $call = _sym_hash_func($key_0, $key_1) | 0;
    $mask = $h + 32 | 0;
    $3 = HEAP32[$mask >> 2] | 0;
    $and = $3 & $call;
    $div50 = $and >>> 3;
    $e_flags = $h + 16 | 0;
    $4 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx51 = $4 + $div50 | 0;
    $5 = HEAP8[$arrayidx51] | 0;
    $rem52 = $and & 7;
    $arrayidx353 = $rem52 + 112180 | 0;
    $6 = HEAP8[$arrayidx353] | 0;
    $and54654 = $6 & $5;
    $tobool55 = $and54654 << 24 >> 24 == 0;
    if ($tobool55) {
      label = 5;
      break;
    } else {
      $k_0_lcssa = $and;
      $div_lcssa = $div50;
      $arrayidx3_lcssa = $arrayidx353;
      label = 10;
      break;
    }
   case 5:
    $d_flags = $h + 20 | 0;
    $7 = HEAP32[$d_flags >> 2] | 0;
    $keys = $h + 24 | 0;
    $inc = $h + 36 | 0;
    $k_056 = $and;
    $div57 = $div50;
    $arrayidx358 = $arrayidx353;
    $8 = $6;
    label = 6;
    break;
   case 6:
    $arrayidx7 = $7 + $div57 | 0;
    $9 = HEAP8[$arrayidx7] | 0;
    $and1247 = $9 & $8;
    $phitmp = $and1247 << 24 >> 24 == 0;
    if ($phitmp) {
      label = 7;
      break;
    } else {
      $k_0_lcssa = $k_056;
      $div_lcssa = $div57;
      $arrayidx3_lcssa = $arrayidx358;
      label = 10;
      break;
    }
   case 7:
    $10 = HEAP32[$keys >> 2] | 0;
    $len15 = $10 + ($k_056 << 3) | 0;
    $11 = HEAP32[$len15 >> 2] | 0;
    $cmp17 = ($11 | 0) == ($key_0 | 0);
    if ($cmp17) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $name21 = $10 + ($k_056 << 3) + 4 | 0;
    $12 = HEAP32[$name21 >> 2] | 0;
    $call26 = _memcmp($12 | 0, $key_1 | 0, $11 | 0) | 0;
    $cmp27 = ($call26 | 0) == 0;
    if ($cmp27) {
      $k_0_lcssa = $k_056;
      $div_lcssa = $div57;
      $arrayidx3_lcssa = $arrayidx358;
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $13 = HEAP32[$inc >> 2] | 0;
    $add = $13 + $k_056 | 0;
    $14 = HEAP32[$mask >> 2] | 0;
    $and32 = $add & $14;
    $div = $and32 >>> 3;
    $15 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $15 + $div | 0;
    $16 = HEAP8[$arrayidx] | 0;
    $rem = $and32 & 7;
    $arrayidx3 = $rem + 112180 | 0;
    $17 = HEAP8[$arrayidx3] | 0;
    $and546 = $17 & $16;
    $tobool = $and546 << 24 >> 24 == 0;
    if ($tobool) {
      $k_056 = $and32;
      $div57 = $div;
      $arrayidx358 = $arrayidx3;
      $8 = $17;
      label = 6;
      break;
    } else {
      $k_0_lcssa = $and32;
      $div_lcssa = $div;
      $arrayidx3_lcssa = $arrayidx3;
      label = 10;
      break;
    }
   case 10:
    $18 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx35 = $18 + $div_lcssa | 0;
    $19 = HEAP8[$arrayidx35] | 0;
    $20 = HEAP8[$arrayidx3_lcssa] | 0;
    $and4048 = $20 & $19;
    $tobool41 = $and4048 << 24 >> 24 == 0;
    if ($tobool41) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $keys43 = $h + 24 | 0;
    $21 = HEAP32[$keys43 >> 2] | 0;
    $key_sroa_0_0__idx18 = $21 + ($k_0_lcssa << 3) | 0;
    HEAP32[$key_sroa_0_0__idx18 >> 2] = $key_0;
    $key_sroa_1_4__idx22 = $21 + ($k_0_lcssa << 3) + 4 | 0;
    HEAP32[$key_sroa_1_4__idx22 >> 2] = $key_1;
    $22 = HEAP8[$arrayidx3_lcssa] | 0;
    $neg = $22 ^ -1;
    $23 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx50 = $23 + $div_lcssa | 0;
    $24 = HEAP8[$arrayidx50] | 0;
    $and52 = $24 & $neg;
    HEAP8[$arrayidx50] = $and52;
    $size = $h + 4 | 0;
    $25 = HEAP32[$size >> 2] | 0;
    $inc54 = $25 + 1 | 0;
    HEAP32[$size >> 2] = $inc54;
    $26 = HEAP32[$n_occupied >> 2] | 0;
    $inc56 = $26 + 1 | 0;
    HEAP32[$n_occupied >> 2] = $inc56;
    label = 14;
    break;
   case 12:
    $d_flags58 = $h + 20 | 0;
    $27 = HEAP32[$d_flags58 >> 2] | 0;
    $arrayidx59 = $27 + $div_lcssa | 0;
    $28 = HEAP8[$arrayidx59] | 0;
    $and6449 = $28 & $20;
    $tobool65 = $and6449 << 24 >> 24 == 0;
    if ($tobool65) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $keys67 = $h + 24 | 0;
    $29 = HEAP32[$keys67 >> 2] | 0;
    $key_sroa_0_0__idx = $29 + ($k_0_lcssa << 3) | 0;
    HEAP32[$key_sroa_0_0__idx >> 2] = $key_0;
    $key_sroa_1_4__idx21 = $29 + ($k_0_lcssa << 3) + 4 | 0;
    HEAP32[$key_sroa_1_4__idx21 >> 2] = $key_1;
    $30 = HEAP8[$arrayidx3_lcssa] | 0;
    $neg72 = $30 ^ -1;
    $31 = HEAP32[$d_flags58 >> 2] | 0;
    $arrayidx75 = $31 + $div_lcssa | 0;
    $32 = HEAP8[$arrayidx75] | 0;
    $and77 = $32 & $neg72;
    HEAP8[$arrayidx75] = $and77;
    $size79 = $h + 4 | 0;
    $33 = HEAP32[$size79 >> 2] | 0;
    $inc80 = $33 + 1 | 0;
    HEAP32[$size79 >> 2] = $inc80;
    label = 14;
    break;
   case 14:
    return $k_0_lcssa | 0;
  }
  return 0;
}
function _mrb_intern2($mrb, $name, $len) {
  $mrb = $mrb | 0;
  $name = $name | 0;
  $len = $len | 0;
  var $name2sym = 0, $0 = 0, $call = 0, $n_buckets = 0, $1 = 0, $cmp = 0, $vals = 0, $2 = 0, $arrayidx = 0, $3 = 0, $symidx = 0, $4 = 0, $inc = 0, $add = 0, $call5 = 0, $arrayidx6 = 0, $call10 = 0, $vals11 = 0, $5 = 0, $arrayidx12 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $name2sym = $mrb + 568 | 0;
    $0 = HEAP32[$name2sym >> 2] | 0;
    $call = _kh_get_n2s($0, $len, $name) | 0;
    $n_buckets = $0 | 0;
    $1 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($call | 0) == ($1 | 0);
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $vals = $0 + 28 | 0;
    $2 = HEAP32[$vals >> 2] | 0;
    $arrayidx = $2 + ($call << 1) | 0;
    $3 = HEAP16[$arrayidx >> 1] | 0;
    $retval_0 = $3;
    label = 5;
    break;
   case 4:
    $symidx = $mrb + 564 | 0;
    $4 = HEAP16[$symidx >> 1] | 0;
    $inc = $4 + 1 & 65535;
    HEAP16[$symidx >> 1] = $inc;
    $add = $len + 1 | 0;
    $call5 = _mrb_malloc($mrb, $add) | 0;
    _memcpy($call5 | 0, $name | 0, $len);
    $arrayidx6 = $call5 + $len | 0;
    HEAP8[$arrayidx6] = 0;
    $call10 = _kh_put_n2s($0, $len, $call5) | 0;
    $vals11 = $0 + 28 | 0;
    $5 = HEAP32[$vals11 >> 2] | 0;
    $arrayidx12 = $5 + ($call10 << 1) | 0;
    HEAP16[$arrayidx12 >> 1] = $inc;
    $retval_0 = $inc;
    label = 5;
    break;
   case 5:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_intern_cstr($mrb, $name) {
  $mrb = $mrb | 0;
  $name = $name | 0;
  return _mrb_intern2($mrb, $name, _strlen($name | 0) | 0) | 0;
}
function _mrb_intern_str($mrb, $str) {
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $0 = 0, $call = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $0 = HEAP32[$str >> 2] | 0;
  $call = _mrb_intern2($mrb, HEAP32[$0 + 20 >> 2] | 0, HEAP32[$0 + 12 >> 2] | 0) | 0;
  STACKTOP = __stackBase__;
  return $call | 0;
}
function _mrb_check_intern($agg_result, $mrb, $name, $len) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $name = $name | 0;
  $len = $len | 0;
  var $name2sym = 0, $0 = 0, $call = 0, $n_buckets = 0, $1 = 0, $cmp = 0, $vals = 0, $2 = 0, $arrayidx = 0, $3 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $name2sym = $mrb + 568 | 0;
    $0 = HEAP32[$name2sym >> 2] | 0;
    $call = _kh_get_n2s($0, $len, $name) | 0;
    $n_buckets = $0 | 0;
    $1 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($call | 0) == ($1 | 0);
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $vals = $0 + 28 | 0;
    $2 = HEAP32[$vals >> 2] | 0;
    $arrayidx = $2 + ($call << 1) | 0;
    $3 = HEAP16[$arrayidx >> 1] | 0;
    _mrb_symbol_value90($agg_result, $3);
    label = 5;
    break;
   case 4:
    _mrb_nil_value91($agg_result);
    label = 5;
    break;
   case 5:
    return;
  }
}
function _mrb_symbol_value90($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  var $v_sroa_1_2__raw_idx = 0, $v_sroa_1_2_idx = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP16[$agg_result >> 1] = $i;
  $v_sroa_1_2__raw_idx = $agg_result + 2 | 0;
  $v_sroa_1_2_idx = __stackBase__ | 0;
  HEAP16[$v_sroa_1_2__raw_idx >> 1] = HEAP16[$v_sroa_1_2_idx >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 2 >> 1] = HEAP16[$v_sroa_1_2_idx + 2 >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 4 >> 1] = HEAP16[$v_sroa_1_2_idx + 4 >> 1] | 0;
  HEAP32[$agg_result + 8 >> 2] = 4;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_check_intern_str($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $0 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $0 = HEAP32[$str >> 2] | 0;
  _mrb_check_intern($agg_result, $mrb, HEAP32[$0 + 20 >> 2] | 0, HEAP32[$0 + 12 >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_free_symtbl($mrb) {
  $mrb = $mrb | 0;
  var $name2sym = 0, $0 = 0, $n_buckets = 0, $1 = 0, $cmp14 = 0, $e_flags = 0, $d_flags = 0, $keys = 0, $k_015 = 0, $div = 0, $2 = 0, $arrayidx = 0, $3 = 0, $rem = 0, $arrayidx1 = 0, $4 = 0, $and12 = 0, $tobool = 0, $5 = 0, $arrayidx4 = 0, $6 = 0, $and913 = 0, $tobool10 = 0, $7 = 0, $name = 0, $8 = 0, $inc = 0, $9 = 0, $cmp = 0, $10 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $name2sym = $mrb + 568 | 0;
    $0 = HEAP32[$name2sym >> 2] | 0;
    $n_buckets = $0 | 0;
    $1 = HEAP32[$n_buckets >> 2] | 0;
    $cmp14 = ($1 | 0) == 0;
    if ($cmp14) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $e_flags = $0 + 16 | 0;
    $d_flags = $0 + 20 | 0;
    $keys = $0 + 24 | 0;
    $k_015 = 0;
    label = 4;
    break;
   case 4:
    $div = $k_015 >>> 3;
    $2 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $2 + $div | 0;
    $3 = HEAP8[$arrayidx] | 0;
    $rem = $k_015 & 7;
    $arrayidx1 = $rem + 112180 | 0;
    $4 = HEAP8[$arrayidx1] | 0;
    $and12 = $4 & $3;
    $tobool = $and12 << 24 >> 24 == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    $5 = HEAP32[$d_flags >> 2] | 0;
    $arrayidx4 = $5 + $div | 0;
    $6 = HEAP8[$arrayidx4] | 0;
    $and913 = $6 & $4;
    $tobool10 = $and913 << 24 >> 24 == 0;
    if ($tobool10) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $7 = HEAP32[$keys >> 2] | 0;
    $name = $7 + ($k_015 << 3) + 4 | 0;
    $8 = HEAP32[$name >> 2] | 0;
    _mrb_free($mrb, $8);
    label = 7;
    break;
   case 7:
    $inc = $k_015 + 1 | 0;
    $9 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($inc | 0) == ($9 | 0);
    if ($cmp) {
      label = 8;
      break;
    } else {
      $k_015 = $inc;
      label = 4;
      break;
    }
   case 8:
    $10 = HEAP32[$name2sym >> 2] | 0;
    _kh_destroy_n2s($10);
    return;
  }
}
function _mrb_init_symtbl($mrb) {
  $mrb = $mrb | 0;
  HEAP32[$mrb + 568 >> 2] = _kh_init_n2s($mrb) | 0;
  return;
}
function _mrb_sym_to_s($agg_result, $mrb, $sym) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  var $len = 0, $call = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $sym;
  $sym = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$sym >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$sym + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$sym + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $len = __stackBase__ | 0;
  $call = _mrb_sym2name_len($mrb, HEAP16[$sym >> 1] | 0, $len) | 0;
  _mrb_str_new_static($agg_result, $mrb, $call, HEAP32[$len >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_sym2str($agg_result, $mrb, $sym) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  var $len = 0, $str = 0, $call = 0, $tobool = 0, $0 = 0, $1 = 0, $call1 = 0, $tobool2 = 0, $call3 = 0, $2 = 0, $cmp = 0, $3 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $len = __stackBase__ | 0;
    $str = __stackBase__ + 4 | 0;
    $call = _mrb_sym2name_len($mrb, $sym, $len) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_undef_value($agg_result);
    label = 8;
    break;
   case 4:
    $0 = HEAP32[$len >> 2] | 0;
    _mrb_str_new_static($str, $mrb, $call, $0);
    $1 = $str;
    $call1 = _symname_p($call) | 0;
    $tobool2 = ($call1 | 0) == 0;
    if ($tobool2) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $call3 = _strlen($call | 0) | 0;
    $2 = HEAP32[$len >> 2] | 0;
    $cmp = ($call3 | 0) == ($2 | 0);
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $3 = $agg_result;
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 8;
    break;
   case 7:
    _mrb_str_dump($agg_result, $mrb, $str);
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_fixnum_value95($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_bool_value96($agg_result, $boolean) {
  $agg_result = $agg_result | 0;
  $boolean = $boolean | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = $boolean << 24 >> 24 != 0 ? 2 : 0;
  return;
}
function _kh_get_iv($h, $key) {
  $h = $h | 0;
  $key = $key | 0;
  var $conv = 0, $shl = 0, $xor = 0, $shr = 0, $xor3 = 0, $mask = 0, $0 = 0, $and = 0, $div19 = 0, $e_flags = 0, $1 = 0, $arrayidx20 = 0, $2 = 0, $rem21 = 0, $arrayidx522 = 0, $3 = 0, $and71623 = 0, $lnot24 = 0, $d_flags = 0, $4 = 0, $keys = 0, $inc = 0, $5 = 0, $div26 = 0, $k_025 = 0, $arrayidx9 = 0, $6 = 0, $and1417 = 0, $tobool15 = 0, $7 = 0, $arrayidx16 = 0, $8 = 0, $cmp = 0, $9 = 0, $add = 0, $10 = 0, $and23 = 0, $div = 0, $11 = 0, $arrayidx = 0, $12 = 0, $rem = 0, $arrayidx5 = 0, $13 = 0, $and716 = 0, $lnot = 0, $n_buckets = 0, $14 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $conv = $key << 16 >> 16;
    $shl = $conv << 2;
    $xor = $shl ^ $conv;
    $shr = $conv >> 2;
    $xor3 = $xor ^ $shr;
    $mask = $h + 32 | 0;
    $0 = HEAP32[$mask >> 2] | 0;
    $and = $0 & $xor3;
    $div19 = $and >>> 3;
    $e_flags = $h + 16 | 0;
    $1 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx20 = $1 + $div19 | 0;
    $2 = HEAP8[$arrayidx20] | 0;
    $rem21 = $and & 7;
    $arrayidx522 = $rem21 + 112140 | 0;
    $3 = HEAP8[$arrayidx522] | 0;
    $and71623 = $3 & $2;
    $lnot24 = $and71623 << 24 >> 24 == 0;
    if ($lnot24) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    $d_flags = $h + 20 | 0;
    $4 = HEAP32[$d_flags >> 2] | 0;
    $keys = $h + 24 | 0;
    $inc = $h + 36 | 0;
    $k_025 = $and;
    $div26 = $div19;
    $5 = $3;
    label = 4;
    break;
   case 4:
    $arrayidx9 = $4 + $div26 | 0;
    $6 = HEAP8[$arrayidx9] | 0;
    $and1417 = $6 & $5;
    $tobool15 = $and1417 << 24 >> 24 == 0;
    if ($tobool15) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $7 = HEAP32[$keys >> 2] | 0;
    $arrayidx16 = $7 + ($k_025 << 1) | 0;
    $8 = HEAP16[$arrayidx16 >> 1] | 0;
    $cmp = $8 << 16 >> 16 == $key << 16 >> 16;
    if ($cmp) {
      $retval_0 = $k_025;
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $9 = HEAP32[$inc >> 2] | 0;
    $add = $9 + $k_025 | 0;
    $10 = HEAP32[$mask >> 2] | 0;
    $and23 = $add & $10;
    $div = $and23 >>> 3;
    $11 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $11 + $div | 0;
    $12 = HEAP8[$arrayidx] | 0;
    $rem = $and23 & 7;
    $arrayidx5 = $rem + 112140 | 0;
    $13 = HEAP8[$arrayidx5] | 0;
    $and716 = $13 & $12;
    $lnot = $and716 << 24 >> 24 == 0;
    if ($lnot) {
      $k_025 = $and23;
      $div26 = $div;
      $5 = $13;
      label = 4;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $n_buckets = $h | 0;
    $14 = HEAP32[$n_buckets >> 2] | 0;
    $retval_0 = $14;
    label = 8;
    break;
   case 8:
    return $retval_0 | 0;
  }
  return 0;
}
function _kh_del_iv($h, $x) {
  $h = $h | 0;
  $x = $x | 0;
  var $arrayidx1 = 0, $size = 0;
  $arrayidx1 = (HEAP32[$h + 20 >> 2] | 0) + ($x >>> 3) | 0;
  HEAP8[$arrayidx1] = HEAP8[$arrayidx1] | HEAP8[112140 + ($x & 7) | 0];
  $size = $h + 4 | 0;
  HEAP32[$size >> 2] = (HEAP32[$size >> 2] | 0) - 1 | 0;
  return;
}
function _symname_p($name) {
  $name = $name | 0;
  var $tobool = 0, $0 = 0, $conv = 0, $incdec_ptr = 0, $call = 0, $tobool2 = 0, $incdec_ptr6 = 0, $1 = 0, $cmp = 0, $incdec_ptr10 = 0, $incdec_ptr10_incdec_ptr6 = 0, $incdec_ptr13 = 0, $2 = 0, $conv14 = 0, $incdec_ptr16 = 0, $incdec_ptr18 = 0, $3 = 0, $cmp20 = 0, $incdec_ptr23 = 0, $incdec_ptr23_incdec_ptr18 = 0, $incdec_ptr26 = 0, $4 = 0, $conv27 = 0, $conv27_off = 0, $switch = 0, $incdec_ptr29 = 0, $incdec_ptr29_incdec_ptr26 = 0, $incdec_ptr33 = 0, $5 = 0, $conv34 = 0, $incdec_ptr36 = 0, $incdec_ptr38 = 0, $6 = 0, $cmp40 = 0, $incdec_ptr43 = 0, $incdec_ptr43_incdec_ptr38 = 0, $incdec_ptr48 = 0, $7 = 0, $cmp50 = 0, $incdec_ptr53 = 0, $incdec_ptr53_incdec_ptr48 = 0, $incdec_ptr56 = 0, $8 = 0, $cmp58 = 0, $incdec_ptr61 = 0, $incdec_ptr61_incdec_ptr56 = 0, $incdec_ptr64 = 0, $9 = 0, $cmp66 = 0, $incdec_ptr69 = 0, $incdec_ptr69_incdec_ptr64 = 0, $incdec_ptr72 = 0, $10 = 0, $cmp74 = 0, $incdec_ptr77 = 0, $incdec_ptr77_incdec_ptr72 = 0, $incdec_ptr80 = 0, $11 = 0, $cmp82 = 0, $incdec_ptr85 = 0, $incdec_ptr85_incdec_ptr80 = 0, $incdec_ptr88 = 0, $incdec_ptr90 = 0, $12 = 0, $cmp92 = 0, $incdec_ptr96 = 0, $13 = 0, $cmp98 = 0, $incdec_ptr101 = 0, $incdec_ptr101_incdec_ptr96 = 0, $conv104 = 0, $call105 = 0, $lnot = 0, $lnot_ext = 0, $m_0 = 0, $localid_0 = 0, $14 = 0, $cmp108 = 0, $conv110 = 0, $call111 = 0, $tobool112 = 0, $_pr = 0, $cmp11639 = 0, $15 = 0, $m_140 = 0, $conv118 = 0, $call119 = 0, $tobool120 = 0, $16 = 0, $cmp122 = 0, $add_ptr = 0, $17 = 0, $cmp116 = 0, $m_1_lcssa = 0, $tobool124 = 0, $18 = 0, $conv126 = 0, $incdec_ptr128 = 0, $m_2 = 0, $19 = 0, $not_tobool134 = 0, $cond = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($name | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 32;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $0 = HEAP8[$name] | 0;
    $conv = $0 << 24 >> 24;
    if (($conv | 0) == 36) {
      label = 4;
      break;
    } else if (($conv | 0) == 64) {
      label = 5;
      break;
    } else if (($conv | 0) == 60) {
      label = 6;
      break;
    } else if (($conv | 0) == 62) {
      label = 9;
      break;
    } else if (($conv | 0) == 61) {
      label = 10;
      break;
    } else if (($conv | 0) == 42) {
      label = 13;
      break;
    } else if (($conv | 0) == 33) {
      label = 14;
      break;
    } else if (($conv | 0) == 43 | ($conv | 0) == 45) {
      label = 15;
      break;
    } else if (($conv | 0) == 124) {
      label = 16;
      break;
    } else if (($conv | 0) == 38) {
      label = 17;
      break;
    } else if (($conv | 0) == 94 | ($conv | 0) == 47 | ($conv | 0) == 37 | ($conv | 0) == 126 | ($conv | 0) == 96) {
      label = 18;
      break;
    } else if (($conv | 0) == 91) {
      label = 19;
      break;
    } else if (($conv | 0) == 0) {
      $retval_0 = 0;
      label = 32;
      break;
    } else {
      label = 21;
      break;
    }
   case 4:
    $incdec_ptr = $name + 1 | 0;
    $call = _is_special_global_name($incdec_ptr) | 0;
    $tobool2 = ($call | 0) == 0;
    if ($tobool2) {
      $localid_0 = 0;
      $m_0 = $incdec_ptr;
      label = 22;
      break;
    } else {
      $retval_0 = 1;
      label = 32;
      break;
    }
   case 5:
    $incdec_ptr6 = $name + 1 | 0;
    $1 = HEAP8[$incdec_ptr6] | 0;
    $cmp = $1 << 24 >> 24 == 64;
    $incdec_ptr10 = $name + 2 | 0;
    $incdec_ptr10_incdec_ptr6 = $cmp ? $incdec_ptr10 : $incdec_ptr6;
    $localid_0 = 0;
    $m_0 = $incdec_ptr10_incdec_ptr6;
    label = 22;
    break;
   case 6:
    $incdec_ptr13 = $name + 1 | 0;
    $2 = HEAP8[$incdec_ptr13] | 0;
    $conv14 = $2 << 24 >> 24;
    if (($conv14 | 0) == 60) {
      label = 7;
      break;
    } else if (($conv14 | 0) == 61) {
      label = 8;
      break;
    } else {
      $m_2 = $incdec_ptr13;
      label = 31;
      break;
    }
   case 7:
    $incdec_ptr16 = $name + 2 | 0;
    $m_2 = $incdec_ptr16;
    label = 31;
    break;
   case 8:
    $incdec_ptr18 = $name + 2 | 0;
    $3 = HEAP8[$incdec_ptr18] | 0;
    $cmp20 = $3 << 24 >> 24 == 62;
    $incdec_ptr23 = $name + 3 | 0;
    $incdec_ptr23_incdec_ptr18 = $cmp20 ? $incdec_ptr23 : $incdec_ptr18;
    $m_2 = $incdec_ptr23_incdec_ptr18;
    label = 31;
    break;
   case 9:
    $incdec_ptr26 = $name + 1 | 0;
    $4 = HEAP8[$incdec_ptr26] | 0;
    $conv27 = $4 << 24 >> 24;
    $conv27_off = $conv27 - 61 | 0;
    $switch = $conv27_off >>> 0 < 2;
    $incdec_ptr29 = $name + 2 | 0;
    $incdec_ptr29_incdec_ptr26 = $switch ? $incdec_ptr29 : $incdec_ptr26;
    $m_2 = $incdec_ptr29_incdec_ptr26;
    label = 31;
    break;
   case 10:
    $incdec_ptr33 = $name + 1 | 0;
    $5 = HEAP8[$incdec_ptr33] | 0;
    $conv34 = $5 << 24 >> 24;
    if (($conv34 | 0) == 126) {
      label = 11;
      break;
    } else if (($conv34 | 0) == 61) {
      label = 12;
      break;
    } else {
      $retval_0 = 0;
      label = 32;
      break;
    }
   case 11:
    $incdec_ptr36 = $name + 2 | 0;
    $m_2 = $incdec_ptr36;
    label = 31;
    break;
   case 12:
    $incdec_ptr38 = $name + 2 | 0;
    $6 = HEAP8[$incdec_ptr38] | 0;
    $cmp40 = $6 << 24 >> 24 == 61;
    $incdec_ptr43 = $name + 3 | 0;
    $incdec_ptr43_incdec_ptr38 = $cmp40 ? $incdec_ptr43 : $incdec_ptr38;
    $m_2 = $incdec_ptr43_incdec_ptr38;
    label = 31;
    break;
   case 13:
    $incdec_ptr48 = $name + 1 | 0;
    $7 = HEAP8[$incdec_ptr48] | 0;
    $cmp50 = $7 << 24 >> 24 == 42;
    $incdec_ptr53 = $name + 2 | 0;
    $incdec_ptr53_incdec_ptr48 = $cmp50 ? $incdec_ptr53 : $incdec_ptr48;
    $m_2 = $incdec_ptr53_incdec_ptr48;
    label = 31;
    break;
   case 14:
    $incdec_ptr56 = $name + 1 | 0;
    $8 = HEAP8[$incdec_ptr56] | 0;
    $cmp58 = $8 << 24 >> 24 == 61;
    $incdec_ptr61 = $name + 2 | 0;
    $incdec_ptr61_incdec_ptr56 = $cmp58 ? $incdec_ptr61 : $incdec_ptr56;
    $m_2 = $incdec_ptr61_incdec_ptr56;
    label = 31;
    break;
   case 15:
    $incdec_ptr64 = $name + 1 | 0;
    $9 = HEAP8[$incdec_ptr64] | 0;
    $cmp66 = $9 << 24 >> 24 == 64;
    $incdec_ptr69 = $name + 2 | 0;
    $incdec_ptr69_incdec_ptr64 = $cmp66 ? $incdec_ptr69 : $incdec_ptr64;
    $m_2 = $incdec_ptr69_incdec_ptr64;
    label = 31;
    break;
   case 16:
    $incdec_ptr72 = $name + 1 | 0;
    $10 = HEAP8[$incdec_ptr72] | 0;
    $cmp74 = $10 << 24 >> 24 == 124;
    $incdec_ptr77 = $name + 2 | 0;
    $incdec_ptr77_incdec_ptr72 = $cmp74 ? $incdec_ptr77 : $incdec_ptr72;
    $m_2 = $incdec_ptr77_incdec_ptr72;
    label = 31;
    break;
   case 17:
    $incdec_ptr80 = $name + 1 | 0;
    $11 = HEAP8[$incdec_ptr80] | 0;
    $cmp82 = $11 << 24 >> 24 == 38;
    $incdec_ptr85 = $name + 2 | 0;
    $incdec_ptr85_incdec_ptr80 = $cmp82 ? $incdec_ptr85 : $incdec_ptr80;
    $m_2 = $incdec_ptr85_incdec_ptr80;
    label = 31;
    break;
   case 18:
    $incdec_ptr88 = $name + 1 | 0;
    $m_2 = $incdec_ptr88;
    label = 31;
    break;
   case 19:
    $incdec_ptr90 = $name + 1 | 0;
    $12 = HEAP8[$incdec_ptr90] | 0;
    $cmp92 = $12 << 24 >> 24 == 93;
    if ($cmp92) {
      label = 20;
      break;
    } else {
      $retval_0 = 0;
      label = 32;
      break;
    }
   case 20:
    $incdec_ptr96 = $name + 2 | 0;
    $13 = HEAP8[$incdec_ptr96] | 0;
    $cmp98 = $13 << 24 >> 24 == 61;
    $incdec_ptr101 = $name + 3 | 0;
    $incdec_ptr101_incdec_ptr96 = $cmp98 ? $incdec_ptr101 : $incdec_ptr96;
    $m_2 = $incdec_ptr101_incdec_ptr96;
    label = 31;
    break;
   case 21:
    $conv104 = $0 & 255;
    $call105 = _isupper($conv104 | 0) | 0;
    $lnot = ($call105 | 0) == 0;
    $lnot_ext = $lnot & 1;
    $localid_0 = $lnot_ext;
    $m_0 = $name;
    label = 22;
    break;
   case 22:
    $14 = HEAP8[$m_0] | 0;
    $cmp108 = $14 << 24 >> 24 == 95;
    if ($cmp108) {
      $m_140 = $m_0;
      $15 = 95;
      label = 25;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $conv110 = $14 & 255;
    $call111 = _isalpha($conv110 | 0) | 0;
    $tobool112 = ($call111 | 0) == 0;
    if ($tobool112) {
      $retval_0 = 0;
      label = 32;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $_pr = HEAP8[$m_0] | 0;
    $cmp11639 = $_pr << 24 >> 24 == -1;
    if ($cmp11639) {
      $m_1_lcssa = $m_0;
      label = 28;
      break;
    } else {
      $m_140 = $m_0;
      $15 = $_pr;
      label = 25;
      break;
    }
   case 25:
    $conv118 = $15 & 255;
    $call119 = _isalnum($conv118 | 0) | 0;
    $tobool120 = ($call119 | 0) == 0;
    if ($tobool120) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    $16 = HEAP8[$m_140] | 0;
    $cmp122 = $16 << 24 >> 24 == 95;
    if ($cmp122) {
      label = 27;
      break;
    } else {
      $m_1_lcssa = $m_140;
      label = 28;
      break;
    }
   case 27:
    $add_ptr = $m_140 + 1 | 0;
    $17 = HEAP8[$add_ptr] | 0;
    $cmp116 = $17 << 24 >> 24 == -1;
    if ($cmp116) {
      $m_1_lcssa = $add_ptr;
      label = 28;
      break;
    } else {
      $m_140 = $add_ptr;
      $15 = $17;
      label = 25;
      break;
    }
   case 28:
    $tobool124 = ($localid_0 | 0) == 0;
    if ($tobool124) {
      $m_2 = $m_1_lcssa;
      label = 31;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $18 = HEAP8[$m_1_lcssa] | 0;
    $conv126 = $18 << 24 >> 24;
    if (($conv126 | 0) == 33 | ($conv126 | 0) == 63 | ($conv126 | 0) == 61) {
      label = 30;
      break;
    } else {
      $m_2 = $m_1_lcssa;
      label = 31;
      break;
    }
   case 30:
    $incdec_ptr128 = $m_1_lcssa + 1 | 0;
    $m_2 = $incdec_ptr128;
    label = 31;
    break;
   case 31:
    $19 = HEAP8[$m_2] | 0;
    $not_tobool134 = $19 << 24 >> 24 == 0;
    $cond = $not_tobool134 & 1;
    $retval_0 = $cond;
    label = 32;
    break;
   case 32:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_sym2name($mrb, $sym) {
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  var $len = 0, $str = 0, $agg_tmp = 0, $call = 0, $tobool = 0, $call1 = 0, $tobool2 = 0, $call3 = 0, $0 = 0, $cmp = 0, $1 = 0, $p = 0, $2 = 0, $ptr = 0, $3 = 0, $4 = 0, $retval_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $len = __stackBase__ | 0;
    $str = __stackBase__ + 4 | 0;
    $agg_tmp = __stackBase__ + 16 | 0;
    $call = _mrb_sym2name_len($mrb, $sym, $len) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call1 = _symname_p($call) | 0;
    $tobool2 = ($call1 | 0) == 0;
    if ($tobool2) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call3 = _strlen($call | 0) | 0;
    $0 = HEAP32[$len >> 2] | 0;
    $cmp = ($call3 | 0) == ($0 | 0);
    if ($cmp) {
      $retval_0 = $call;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $1 = HEAP32[$len >> 2] | 0;
    _mrb_str_new_static($agg_tmp, $mrb, $call, $1);
    _mrb_str_dump($str, $mrb, $agg_tmp);
    $p = $str;
    $2 = HEAP32[$p >> 2] | 0;
    $ptr = $2 + 20 | 0;
    $3 = $ptr;
    $4 = HEAP32[$3 >> 2] | 0;
    $retval_0 = $4;
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_init_symbol($mrb) {
  $mrb = $mrb | 0;
  var $call = 0;
  $call = _mrb_define_class($mrb, 93984, HEAP32[$mrb + 44 >> 2] | 0) | 0;
  HEAP32[$mrb + 92 >> 2] = $call;
  _mrb_define_method($mrb, $call, 108012, 742, 0);
  _mrb_define_method($mrb, $call, 103912, 746, 0);
  _mrb_define_method($mrb, $call, 101132, 746, 0);
  _mrb_define_method($mrb, $call, 98408, 870, 0);
  _mrb_define_method($mrb, $call, 95860, 832, 0);
  _mrb_define_method($mrb, $call, 94728, 60, 0);
  HEAP16[$mrb + 36 >> 1] = _mrb_intern94($mrb) | 0;
  return;
}
function _sym_equal($agg_result, $mrb, $sym1) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $sym1 = $sym1 | 0;
  var $sym2 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $sym1;
  $sym1 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$sym1 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$sym1 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$sym1 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $sym2 = __stackBase__ | 0;
  _mrb_get_args($mrb, 93028, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $sym2, tempInt) | 0);
  _mrb_bool_value96($agg_result, _mrb_obj_equal(0, $sym1, $sym2) & 255);
  STACKTOP = __stackBase__;
  return;
}
function _sym_to_sym($agg_result, $mrb, $sym) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  var $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $sym;
  $sym = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$sym >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$sym + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$sym + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $0 = $agg_result;
  $1 = $sym;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _sym_inspect($agg_result, $mrb, $sym) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  var $str = 0, $len = 0, $tmp8 = 0, $sym1 = 0, $0 = 0, $call = 0, $1 = 0, $add = 0, $2 = 0, $p = 0, $3 = 0, $ptr = 0, $4 = 0, $5 = 0, $6 = 0, $ptr5 = 0, $7 = 0, $8 = 0, $add_ptr = 0, $9 = 0, $call6 = 0, $tobool = 0, $call7 = 0, $10 = 0, $cmp = 0, $11 = 0, $12 = 0, $ptr11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  tempParam = $sym;
  $sym = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$sym >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$sym + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$sym + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $str = __stackBase__ | 0;
    $len = __stackBase__ + 12 | 0;
    $tmp8 = __stackBase__ + 16 | 0;
    $sym1 = $sym;
    $0 = HEAP16[$sym1 >> 1] | 0;
    $call = _mrb_sym2name_len($mrb, $0, $len) | 0;
    $1 = HEAP32[$len >> 2] | 0;
    $add = $1 + 1 | 0;
    _mrb_str_new($str, $mrb, 0, $add);
    $2 = $str;
    $p = $str;
    $3 = HEAP32[$p >> 2] | 0;
    $ptr = $3 + 20 | 0;
    $4 = $ptr;
    $5 = HEAP32[$4 >> 2] | 0;
    HEAP8[$5] = 58;
    $6 = HEAP32[$p >> 2] | 0;
    $ptr5 = $6 + 20 | 0;
    $7 = $ptr5;
    $8 = HEAP32[$7 >> 2] | 0;
    $add_ptr = $8 + 1 | 0;
    $9 = HEAP32[$len >> 2] | 0;
    _memcpy($add_ptr | 0, $call | 0, $9);
    $call6 = _symname_p($call) | 0;
    $tobool = ($call6 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call7 = _strlen($call | 0) | 0;
    $10 = HEAP32[$len >> 2] | 0;
    $cmp = ($call7 | 0) == ($10 | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _mrb_str_dump($tmp8, $mrb, $str);
    $11 = $tmp8;
    HEAP32[$2 >> 2] = HEAP32[$11 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$11 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$11 + 8 >> 2] | 0;
    $12 = HEAP32[$p >> 2] | 0;
    $ptr11 = $12 + 20 | 0;
    $13 = $ptr11;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $14;
    tempBigInt = 8762;
    HEAP8[$15] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$15 + 1 | 0] = tempBigInt & 255;
    label = 5;
    break;
   case 5:
    $16 = $agg_result;
    HEAP32[$16 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$16 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$16 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _sym_cmp($agg_result, $mrb, $s1) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $s1 = $s1 | 0;
  var $s2 = 0, $len1 = 0, $len2 = 0, $call = 0, $tt = 0, $0 = 0, $cmp = 0, $sym = 0, $1 = 0, $sym3 = 0, $2 = 0, $cmp5 = 0, $call8 = 0, $call9 = 0, $3 = 0, $4 = 0, $cmp10 = 0, $cond = 0, $call12 = 0, $cmp13 = 0, $cmp16 = 0, $cmp25 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  tempParam = $s1;
  $s1 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$s1 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$s1 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$s1 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $s2 = __stackBase__ | 0;
    $len1 = __stackBase__ + 12 | 0;
    $len2 = __stackBase__ + 16 | 0;
    $call = _mrb_get_args($mrb, 93028, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $s2, tempInt) | 0) | 0;
    $tt = $s2 + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 4;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_nil_value91($agg_result);
    label = 15;
    break;
   case 4:
    $sym = $s1;
    $1 = HEAP16[$sym >> 1] | 0;
    $sym3 = $s2;
    $2 = HEAP16[$sym3 >> 1] | 0;
    $cmp5 = $1 << 16 >> 16 == $2 << 16 >> 16;
    if ($cmp5) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _mrb_fixnum_value95($agg_result, 0);
    label = 15;
    break;
   case 6:
    $call8 = _mrb_sym2name_len($mrb, $1, $len1) | 0;
    $call9 = _mrb_sym2name_len($mrb, $2, $len2) | 0;
    $3 = HEAP32[$len1 >> 2] | 0;
    $4 = HEAP32[$len2 >> 2] | 0;
    $cmp10 = $3 >>> 0 > $4 >>> 0;
    $cond = $cmp10 ? $4 : $3;
    $call12 = _memcmp($call8 | 0, $call9 | 0, $cond | 0) | 0;
    $cmp13 = ($call12 | 0) == 0;
    if ($cmp13) {
      label = 7;
      break;
    } else {
      label = 12;
      break;
    }
   case 7:
    $cmp16 = ($3 | 0) == ($4 | 0);
    if ($cmp16) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    _mrb_fixnum_value95($agg_result, 0);
    label = 15;
    break;
   case 9:
    if ($cmp10) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    _mrb_fixnum_value95($agg_result, 1);
    label = 15;
    break;
   case 11:
    _mrb_fixnum_value95($agg_result, -1);
    label = 15;
    break;
   case 12:
    $cmp25 = ($call12 | 0) > 0;
    if ($cmp25) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    _mrb_fixnum_value95($agg_result, 1);
    label = 15;
    break;
   case 14:
    _mrb_fixnum_value95($agg_result, -1);
    label = 15;
    break;
   case 15:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_intern94($mrb) {
  $mrb = $mrb | 0;
  return _mrb_intern_cstr($mrb, 93752) | 0;
}
function _is_special_global_name($m) {
  $m = $m | 0;
  var $0 = 0, $conv = 0, $incdec_ptr = 0, $incdec_ptr2 = 0, $1 = 0, $cmp = 0, $conv5 = 0, $call = 0, $tobool = 0, $2 = 0, $cmp7 = 0, $add_ptr = 0, $conv9 = 0, $isdigittmp = 0, $isdigit = 0, $m_addr_0 = 0, $incdec_ptr14 = 0, $3 = 0, $conv15 = 0, $isdigittmp11 = 0, $isdigit12 = 0, $m_addr_1 = 0, $4 = 0, $lnot = 0, $lnot_ext = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = HEAP8[$m] | 0;
    $conv = $0 << 24 >> 24;
    if (($conv | 0) == 126 | ($conv | 0) == 42 | ($conv | 0) == 36 | ($conv | 0) == 63 | ($conv | 0) == 33 | ($conv | 0) == 64 | ($conv | 0) == 47 | ($conv | 0) == 92 | ($conv | 0) == 59 | ($conv | 0) == 44 | ($conv | 0) == 46 | ($conv | 0) == 61 | ($conv | 0) == 58 | ($conv | 0) == 60 | ($conv | 0) == 62 | ($conv | 0) == 34 | ($conv | 0) == 38 | ($conv | 0) == 96 | ($conv | 0) == 39 | ($conv | 0) == 43 | ($conv | 0) == 48) {
      label = 3;
      break;
    } else if (($conv | 0) == 45) {
      label = 4;
      break;
    } else {
      label = 8;
      break;
    }
   case 3:
    $incdec_ptr = $m + 1 | 0;
    $m_addr_1 = $incdec_ptr;
    label = 10;
    break;
   case 4:
    $incdec_ptr2 = $m + 1 | 0;
    $1 = HEAP8[$incdec_ptr2] | 0;
    $cmp = $1 << 24 >> 24 == -1;
    if ($cmp) {
      $m_addr_1 = $incdec_ptr2;
      label = 10;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $conv5 = $1 & 255;
    $call = _isalnum($conv5 | 0) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $2 = HEAP8[$incdec_ptr2] | 0;
    $cmp7 = $2 << 24 >> 24 == 95;
    if ($cmp7) {
      label = 7;
      break;
    } else {
      $m_addr_1 = $incdec_ptr2;
      label = 10;
      break;
    }
   case 7:
    $add_ptr = $m + 2 | 0;
    $m_addr_1 = $add_ptr;
    label = 10;
    break;
   case 8:
    $conv9 = $0 & 255;
    $isdigittmp = $conv9 - 48 | 0;
    $isdigit = $isdigittmp >>> 0 < 10;
    if ($isdigit) {
      $m_addr_0 = $m;
      label = 9;
      break;
    } else {
      $retval_0 = 0;
      label = 11;
      break;
    }
   case 9:
    $incdec_ptr14 = $m_addr_0 + 1 | 0;
    $3 = HEAP8[$incdec_ptr14] | 0;
    $conv15 = $3 & 255;
    $isdigittmp11 = $conv15 - 48 | 0;
    $isdigit12 = $isdigittmp11 >>> 0 < 10;
    if ($isdigit12) {
      $m_addr_0 = $incdec_ptr14;
      label = 9;
      break;
    } else {
      $m_addr_1 = $incdec_ptr14;
      label = 10;
      break;
    }
   case 10:
    $4 = HEAP8[$m_addr_1] | 0;
    $lnot = $4 << 24 >> 24 == 0;
    $lnot_ext = $lnot & 1;
    $retval_0 = $lnot_ext;
    label = 11;
    break;
   case 11:
    return $retval_0 | 0;
  }
  return 0;
}
function _kh_alloc_iv($h) {
  $h = $h | 0;
  var $0 = 0, $shr = 0, $shr1 = 0, $mrb = 0, $call = 0, $e_flags = 0, $div3 = 0, $d_flags = 0;
  $0 = HEAP32[$h >> 2] | 0;
  HEAP32[$h + 8 >> 2] = 0;
  HEAP32[$h + 4 >> 2] = 0;
  $shr = $0 >>> 2;
  $shr1 = $0 >>> 1;
  HEAP32[$h + 12 >> 2] = $shr | $shr1;
  $mrb = $h + 40 | 0;
  $call = _mrb_malloc(HEAP32[$mrb >> 2] | 0, $shr) | 0;
  $e_flags = $h + 16 | 0;
  HEAP32[$e_flags >> 2] = $call;
  $div3 = $0 >>> 3;
  $d_flags = $h + 20 | 0;
  HEAP32[$d_flags >> 2] = $call + $div3 | 0;
  _kh_fill_flags112(HEAP32[$e_flags >> 2] | 0, -1, $div3);
  _kh_fill_flags112(HEAP32[$d_flags >> 2] | 0, 0, $div3);
  HEAP32[$h + 24 >> 2] = _mrb_malloc(HEAP32[$mrb >> 2] | 0, $0 << 1) | 0;
  HEAP32[$h + 28 >> 2] = _mrb_malloc(HEAP32[$mrb >> 2] | 0, $0 * 12 & -1) | 0;
  HEAP32[$h + 32 >> 2] = $0 - 1 | 0;
  HEAP32[$h + 36 >> 2] = $shr1 - 1 | 0;
  return;
}
function _kh_fill_flags112($p, $c, $len) {
  $p = $p | 0;
  $c = $c | 0;
  $len = $len | 0;
  var $cmp1 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp1 = ($len | 0) == 0;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _memset($p | 0, $c | 0, $len | 0);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _kh_init_iv_size($mrb, $size) {
  $mrb = $mrb | 0;
  $size = $size | 0;
  var $call = 0, $0 = 0, $dec = 0, $or = 0, $or2 = 0, $or4 = 0, $or6 = 0;
  $call = _mrb_calloc($mrb, 1, 44) | 0;
  $0 = $call;
  $dec = $size >>> 0 < 8 ? 7 : $size - 1 | 0;
  $or = $dec >>> 1 | $dec;
  $or2 = $or >>> 2 | $or;
  $or4 = $or2 >>> 4 | $or2;
  $or6 = $or4 >>> 8 | $or4;
  HEAP32[$call >> 2] = ($or6 >>> 16 | $or6) + 1 | 0;
  HEAP32[$call + 40 >> 2] = $mrb;
  _kh_alloc_iv($0);
  return $0 | 0;
}
function _kh_init_iv($mrb) {
  $mrb = $mrb | 0;
  return _kh_init_iv_size($mrb, 32) | 0;
}
function _kh_destroy_iv($h) {
  $h = $h | 0;
  var $tobool = 0, $mrb = 0, $0 = 0, $keys = 0, $1 = 0, $2 = 0, $3 = 0, $vals = 0, $4 = 0, $5 = 0, $6 = 0, $e_flags = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($h | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $mrb = $h + 40 | 0;
    $0 = HEAP32[$mrb >> 2] | 0;
    $keys = $h + 24 | 0;
    $1 = HEAP32[$keys >> 2] | 0;
    $2 = $1;
    _mrb_free($0, $2);
    $3 = HEAP32[$mrb >> 2] | 0;
    $vals = $h + 28 | 0;
    $4 = HEAP32[$vals >> 2] | 0;
    $5 = $4;
    _mrb_free($3, $5);
    $6 = HEAP32[$mrb >> 2] | 0;
    $e_flags = $h + 16 | 0;
    $7 = HEAP32[$e_flags >> 2] | 0;
    _mrb_free($6, $7);
    $8 = HEAP32[$mrb >> 2] | 0;
    $9 = $h;
    _mrb_free($8, $9);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _kh_resize_iv($h, $new_n_buckets) {
  $h = $h | 0;
  $new_n_buckets = $new_n_buckets | 0;
  var $cmp = 0, $new_n_buckets_op = 0, $dec = 0, $shr = 0, $or = 0, $shr1 = 0, $or2 = 0, $shr3 = 0, $or4 = 0, $shr5 = 0, $or6 = 0, $shr7 = 0, $or8 = 0, $inc = 0, $e_flags = 0, $0 = 0, $keys = 0, $1 = 0, $vals = 0, $2 = 0, $n_buckets = 0, $3 = 0, $cmp1033 = 0, $i_034 = 0, $div = 0, $arrayidx = 0, $4 = 0, $rem = 0, $arrayidx11 = 0, $5 = 0, $and32 = 0, $tobool = 0, $arrayidx14 = 0, $6 = 0, $call = 0, $7 = 0, $arrayidx16 = 0, $arrayidx17 = 0, $8 = 0, $9 = 0, $inc19 = 0, $exitcond = 0, $mrb = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = $new_n_buckets >>> 0 < 8;
    $new_n_buckets_op = $new_n_buckets - 1 | 0;
    $dec = $cmp ? 7 : $new_n_buckets_op;
    $shr = $dec >>> 1;
    $or = $shr | $dec;
    $shr1 = $or >>> 2;
    $or2 = $shr1 | $or;
    $shr3 = $or2 >>> 4;
    $or4 = $shr3 | $or2;
    $shr5 = $or4 >>> 8;
    $or6 = $shr5 | $or4;
    $shr7 = $or6 >>> 16;
    $or8 = $shr7 | $or6;
    $inc = $or8 + 1 | 0;
    $e_flags = $h + 16 | 0;
    $0 = HEAP32[$e_flags >> 2] | 0;
    $keys = $h + 24 | 0;
    $1 = HEAP32[$keys >> 2] | 0;
    $vals = $h + 28 | 0;
    $2 = HEAP32[$vals >> 2] | 0;
    $n_buckets = $h | 0;
    $3 = HEAP32[$n_buckets >> 2] | 0;
    HEAP32[$n_buckets >> 2] = $inc;
    _kh_alloc_iv($h);
    $cmp1033 = ($3 | 0) == 0;
    if ($cmp1033) {
      label = 6;
      break;
    } else {
      $i_034 = 0;
      label = 3;
      break;
    }
   case 3:
    $div = $i_034 >>> 3;
    $arrayidx = $0 + $div | 0;
    $4 = HEAP8[$arrayidx] | 0;
    $rem = $i_034 & 7;
    $arrayidx11 = $rem + 112140 | 0;
    $5 = HEAP8[$arrayidx11] | 0;
    $and32 = $5 & $4;
    $tobool = $and32 << 24 >> 24 == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $arrayidx14 = $1 + ($i_034 << 1) | 0;
    $6 = HEAP16[$arrayidx14 >> 1] | 0;
    $call = _kh_put_iv($h, $6) | 0;
    $7 = HEAP32[$vals >> 2] | 0;
    $arrayidx16 = $7 + ($call * 12 & -1) | 0;
    $arrayidx17 = $2 + ($i_034 * 12 & -1) | 0;
    $8 = $arrayidx16;
    $9 = $arrayidx17;
    HEAP32[$8 >> 2] = HEAP32[$9 >> 2] | 0;
    HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2] | 0;
    HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2] | 0;
    label = 5;
    break;
   case 5:
    $inc19 = $i_034 + 1 | 0;
    $exitcond = ($inc19 | 0) == ($3 | 0);
    if ($exitcond) {
      label = 6;
      break;
    } else {
      $i_034 = $inc19;
      label = 3;
      break;
    }
   case 6:
    $mrb = $h + 40 | 0;
    $10 = HEAP32[$mrb >> 2] | 0;
    _mrb_free($10, $0);
    $11 = HEAP32[$mrb >> 2] | 0;
    $12 = $1;
    _mrb_free($11, $12);
    $13 = HEAP32[$mrb >> 2] | 0;
    $14 = $2;
    _mrb_free($13, $14);
    return;
  }
}
function _kh_put_iv($h, $key) {
  $h = $h | 0;
  $key = $key | 0;
  var $n_occupied = 0, $0 = 0, $upper_bound = 0, $1 = 0, $cmp = 0, $n_buckets = 0, $2 = 0, $mul = 0, $conv = 0, $shl = 0, $xor = 0, $shr = 0, $xor3 = 0, $mask = 0, $3 = 0, $and = 0, $keys = 0, $div44 = 0, $e_flags = 0, $4 = 0, $arrayidx45 = 0, $5 = 0, $rem46 = 0, $arrayidx547 = 0, $6 = 0, $and74048 = 0, $tobool49 = 0, $d_flags = 0, $7 = 0, $inc = 0, $8 = 0, $arrayidx552 = 0, $div51 = 0, $k_050 = 0, $arrayidx9 = 0, $9 = 0, $and1441 = 0, $phitmp = 0, $10 = 0, $arrayidx16 = 0, $11 = 0, $cmp19 = 0, $12 = 0, $add = 0, $13 = 0, $and24 = 0, $div = 0, $14 = 0, $arrayidx = 0, $15 = 0, $rem = 0, $arrayidx5 = 0, $16 = 0, $and740 = 0, $tobool = 0, $arrayidx5_lcssa = 0, $div_lcssa = 0, $k_0_lcssa = 0, $17 = 0, $arrayidx27 = 0, $18 = 0, $19 = 0, $and3242 = 0, $tobool33 = 0, $keys35 = 0, $20 = 0, $arrayidx36 = 0, $21 = 0, $neg = 0, $22 = 0, $arrayidx42 = 0, $23 = 0, $and44 = 0, $size = 0, $24 = 0, $inc46 = 0, $25 = 0, $inc48 = 0, $d_flags50 = 0, $26 = 0, $arrayidx51 = 0, $27 = 0, $and5643 = 0, $tobool57 = 0, $keys59 = 0, $28 = 0, $arrayidx60 = 0, $29 = 0, $neg64 = 0, $30 = 0, $arrayidx67 = 0, $31 = 0, $and69 = 0, $size71 = 0, $32 = 0, $inc72 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $n_occupied = $h + 8 | 0;
    $0 = HEAP32[$n_occupied >> 2] | 0;
    $upper_bound = $h + 12 | 0;
    $1 = HEAP32[$upper_bound >> 2] | 0;
    $cmp = $0 >>> 0 < $1 >>> 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $n_buckets = $h | 0;
    $2 = HEAP32[$n_buckets >> 2] | 0;
    $mul = $2 << 1;
    _kh_resize_iv($h, $mul);
    label = 4;
    break;
   case 4:
    $conv = $key << 16 >> 16;
    $shl = $conv << 2;
    $xor = $shl ^ $conv;
    $shr = $conv >> 2;
    $xor3 = $xor ^ $shr;
    $mask = $h + 32 | 0;
    $3 = HEAP32[$mask >> 2] | 0;
    $and = $3 & $xor3;
    $keys = $h + 24 | 0;
    $div44 = $and >>> 3;
    $e_flags = $h + 16 | 0;
    $4 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx45 = $4 + $div44 | 0;
    $5 = HEAP8[$arrayidx45] | 0;
    $rem46 = $and & 7;
    $arrayidx547 = $rem46 + 112140 | 0;
    $6 = HEAP8[$arrayidx547] | 0;
    $and74048 = $6 & $5;
    $tobool49 = $and74048 << 24 >> 24 == 0;
    if ($tobool49) {
      label = 5;
      break;
    } else {
      $k_0_lcssa = $and;
      $div_lcssa = $div44;
      $arrayidx5_lcssa = $arrayidx547;
      label = 9;
      break;
    }
   case 5:
    $d_flags = $h + 20 | 0;
    $7 = HEAP32[$d_flags >> 2] | 0;
    $inc = $h + 36 | 0;
    $k_050 = $and;
    $div51 = $div44;
    $arrayidx552 = $arrayidx547;
    $8 = $6;
    label = 6;
    break;
   case 6:
    $arrayidx9 = $7 + $div51 | 0;
    $9 = HEAP8[$arrayidx9] | 0;
    $and1441 = $9 & $8;
    $phitmp = $and1441 << 24 >> 24 == 0;
    if ($phitmp) {
      label = 7;
      break;
    } else {
      $k_0_lcssa = $k_050;
      $div_lcssa = $div51;
      $arrayidx5_lcssa = $arrayidx552;
      label = 9;
      break;
    }
   case 7:
    $10 = HEAP32[$keys >> 2] | 0;
    $arrayidx16 = $10 + ($k_050 << 1) | 0;
    $11 = HEAP16[$arrayidx16 >> 1] | 0;
    $cmp19 = $11 << 16 >> 16 == $key << 16 >> 16;
    if ($cmp19) {
      $k_0_lcssa = $k_050;
      $div_lcssa = $div51;
      $arrayidx5_lcssa = $arrayidx552;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $12 = HEAP32[$inc >> 2] | 0;
    $add = $12 + $k_050 | 0;
    $13 = HEAP32[$mask >> 2] | 0;
    $and24 = $add & $13;
    $div = $and24 >>> 3;
    $14 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $14 + $div | 0;
    $15 = HEAP8[$arrayidx] | 0;
    $rem = $and24 & 7;
    $arrayidx5 = $rem + 112140 | 0;
    $16 = HEAP8[$arrayidx5] | 0;
    $and740 = $16 & $15;
    $tobool = $and740 << 24 >> 24 == 0;
    if ($tobool) {
      $k_050 = $and24;
      $div51 = $div;
      $arrayidx552 = $arrayidx5;
      $8 = $16;
      label = 6;
      break;
    } else {
      $k_0_lcssa = $and24;
      $div_lcssa = $div;
      $arrayidx5_lcssa = $arrayidx5;
      label = 9;
      break;
    }
   case 9:
    $17 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx27 = $17 + $div_lcssa | 0;
    $18 = HEAP8[$arrayidx27] | 0;
    $19 = HEAP8[$arrayidx5_lcssa] | 0;
    $and3242 = $19 & $18;
    $tobool33 = $and3242 << 24 >> 24 == 0;
    if ($tobool33) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $keys35 = $h + 24 | 0;
    $20 = HEAP32[$keys35 >> 2] | 0;
    $arrayidx36 = $20 + ($k_0_lcssa << 1) | 0;
    HEAP16[$arrayidx36 >> 1] = $key;
    $21 = HEAP8[$arrayidx5_lcssa] | 0;
    $neg = $21 ^ -1;
    $22 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx42 = $22 + $div_lcssa | 0;
    $23 = HEAP8[$arrayidx42] | 0;
    $and44 = $23 & $neg;
    HEAP8[$arrayidx42] = $and44;
    $size = $h + 4 | 0;
    $24 = HEAP32[$size >> 2] | 0;
    $inc46 = $24 + 1 | 0;
    HEAP32[$size >> 2] = $inc46;
    $25 = HEAP32[$n_occupied >> 2] | 0;
    $inc48 = $25 + 1 | 0;
    HEAP32[$n_occupied >> 2] = $inc48;
    label = 13;
    break;
   case 11:
    $d_flags50 = $h + 20 | 0;
    $26 = HEAP32[$d_flags50 >> 2] | 0;
    $arrayidx51 = $26 + $div_lcssa | 0;
    $27 = HEAP8[$arrayidx51] | 0;
    $and5643 = $27 & $19;
    $tobool57 = $and5643 << 24 >> 24 == 0;
    if ($tobool57) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $keys59 = $h + 24 | 0;
    $28 = HEAP32[$keys59 >> 2] | 0;
    $arrayidx60 = $28 + ($k_0_lcssa << 1) | 0;
    HEAP16[$arrayidx60 >> 1] = $key;
    $29 = HEAP8[$arrayidx5_lcssa] | 0;
    $neg64 = $29 ^ -1;
    $30 = HEAP32[$d_flags50 >> 2] | 0;
    $arrayidx67 = $30 + $div_lcssa | 0;
    $31 = HEAP8[$arrayidx67] | 0;
    $and69 = $31 & $neg64;
    HEAP8[$arrayidx67] = $and69;
    $size71 = $h + 4 | 0;
    $32 = HEAP32[$size71 >> 2] | 0;
    $inc72 = $32 + 1 | 0;
    HEAP32[$size71 >> 2] = $inc72;
    label = 13;
    break;
   case 13:
    return $k_0_lcssa | 0;
  }
  return 0;
}
function _kh_copy_iv($mrb, $h) {
  $mrb = $mrb | 0;
  $h = $h | 0;
  var $call = 0, $n_buckets = 0, $0 = 0, $cmp16 = 0, $e_flags = 0, $d_flags = 0, $keys = 0, $vals = 0, $vals14 = 0, $k_017 = 0, $div = 0, $1 = 0, $arrayidx = 0, $2 = 0, $rem = 0, $arrayidx1 = 0, $3 = 0, $and14 = 0, $tobool = 0, $4 = 0, $arrayidx4 = 0, $5 = 0, $and915 = 0, $tobool10 = 0, $6 = 0, $arrayidx11 = 0, $7 = 0, $call12 = 0, $8 = 0, $arrayidx13 = 0, $9 = 0, $arrayidx15 = 0, $10 = 0, $11 = 0, $inc = 0, $12 = 0, $cmp = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _kh_init_iv($mrb) | 0;
    $n_buckets = $h | 0;
    $0 = HEAP32[$n_buckets >> 2] | 0;
    $cmp16 = ($0 | 0) == 0;
    if ($cmp16) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $e_flags = $h + 16 | 0;
    $d_flags = $h + 20 | 0;
    $keys = $h + 24 | 0;
    $vals = $call + 28 | 0;
    $vals14 = $h + 28 | 0;
    $k_017 = 0;
    label = 4;
    break;
   case 4:
    $div = $k_017 >>> 3;
    $1 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $1 + $div | 0;
    $2 = HEAP8[$arrayidx] | 0;
    $rem = $k_017 & 7;
    $arrayidx1 = $rem + 112140 | 0;
    $3 = HEAP8[$arrayidx1] | 0;
    $and14 = $3 & $2;
    $tobool = $and14 << 24 >> 24 == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    $4 = HEAP32[$d_flags >> 2] | 0;
    $arrayidx4 = $4 + $div | 0;
    $5 = HEAP8[$arrayidx4] | 0;
    $and915 = $5 & $3;
    $tobool10 = $and915 << 24 >> 24 == 0;
    if ($tobool10) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $6 = HEAP32[$keys >> 2] | 0;
    $arrayidx11 = $6 + ($k_017 << 1) | 0;
    $7 = HEAP16[$arrayidx11 >> 1] | 0;
    $call12 = _kh_put_iv($call, $7) | 0;
    $8 = HEAP32[$vals >> 2] | 0;
    $arrayidx13 = $8 + ($call12 * 12 & -1) | 0;
    $9 = HEAP32[$vals14 >> 2] | 0;
    $arrayidx15 = $9 + ($k_017 * 12 & -1) | 0;
    $10 = $arrayidx13;
    $11 = $arrayidx15;
    HEAP32[$10 >> 2] = HEAP32[$11 >> 2] | 0;
    HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2] | 0;
    HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2] | 0;
    label = 7;
    break;
   case 7:
    $inc = $k_017 + 1 | 0;
    $12 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($inc | 0) == ($12 | 0);
    if ($cmp) {
      label = 8;
      break;
    } else {
      $k_017 = $inc;
      label = 4;
      break;
    }
   case 8:
    return $call | 0;
  }
  return 0;
}
function _iv_size($t) {
  $t = $t | 0;
  var $tobool = 0, $size = 0, $0 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($t | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $size = $t + 4 | 0;
    $0 = HEAP32[$size >> 2] | 0;
    $retval_0 = $0;
    label = 4;
    break;
   case 4:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_fixnum_value115($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_nil_value116($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _obj_iv_p($obj) {
  $obj = $obj | 0;
  var $tt = 0, $0 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $obj + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    if (($0 | 0) == 8 | ($0 | 0) == 9 | ($0 | 0) == 10 | ($0 | 0) == 12 | ($0 | 0) == 15 | ($0 | 0) == 21) {
      $retval_0 = 1;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $retval_0 = 0;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_obj_value117($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_undef_value118($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 5;
  return;
}
function _mrb_gc_mark_gv($mrb) {
  $mrb = $mrb | 0;
  _mark_tbl($mrb, HEAP32[$mrb + 20 >> 2] | 0);
  return;
}
function _mark_tbl($mrb, $t) {
  $mrb = $mrb | 0;
  $t = $t | 0;
  var $tobool = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($t | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _iv_foreach($mrb, $t, 260, 0);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _mrb_gc_free_gv($mrb) {
  $mrb = $mrb | 0;
  var $globals = 0, $0 = 0, $tobool = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $globals = $mrb + 20 | 0;
    $0 = HEAP32[$globals >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _iv_free($0);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _iv_free($t) {
  $t = $t | 0;
  _kh_destroy_iv($t | 0);
  return;
}
function _mrb_gc_mark_iv($mrb, $obj) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  _mark_tbl($mrb, HEAP32[$obj + 12 >> 2] | 0);
  return;
}
function _mrb_gc_mark_iv_size($mrb, $obj) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  return _iv_size(HEAP32[$obj + 12 >> 2] | 0) | 0;
}
function _mrb_gc_free_iv($mrb, $obj) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $iv = 0, $0 = 0, $tobool = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $iv = $obj + 12 | 0;
    $0 = HEAP32[$iv >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _iv_free($0);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _mrb_vm_special_get($agg_result, $mrb, $i) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $i = $i | 0;
  _mrb_fixnum_value115($agg_result);
  return;
}
function _mrb_obj_iv_get($agg_result, $mrb, $obj, $sym) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $sym = $sym | 0;
  var $v = 0, $iv = 0, $0 = 0, $tobool = 0, $call = 0, $tobool2 = 0, $1 = 0, $2 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $v = __stackBase__ | 0;
    $iv = $obj + 12 | 0;
    $0 = HEAP32[$iv >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _iv_get($0, $sym, $v) | 0;
    $tobool2 = $call << 24 >> 24 == 0;
    if ($tobool2) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $1 = $agg_result;
    $2 = $v;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    label = 6;
    break;
   case 5:
    _mrb_nil_value116($agg_result);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _iv_get($t, $sym, $vp) {
  $t = $t | 0;
  $sym = $sym | 0;
  $vp = $vp | 0;
  var $h1 = 0, $call = 0, $n_buckets = 0, $0 = 0, $cmp = 0, $tobool = 0, $vals = 0, $1 = 0, $arrayidx = 0, $2 = 0, $3 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $h1 = $t | 0;
    $call = _kh_get_iv($h1, $sym) | 0;
    $n_buckets = $t | 0;
    $0 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($call | 0) == ($0 | 0);
    if ($cmp) {
      $retval_0 = 0;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $tobool = ($vp | 0) == 0;
    if ($tobool) {
      $retval_0 = 1;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $vals = $t + 28 | 0;
    $1 = HEAP32[$vals >> 2] | 0;
    $arrayidx = $1 + ($call * 12 & -1) | 0;
    $2 = $vp;
    $3 = $arrayidx;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    $retval_0 = 1;
    label = 5;
    break;
   case 5:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_iv_get($agg_result, $mrb, $obj, $sym) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $sym = $sym | 0;
  var $call = 0, $tobool = 0, $p = 0, $0 = 0, $1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _obj_iv_p($obj) | 0;
    $tobool = $call << 24 >> 24 == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $p = $obj;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    _mrb_obj_iv_get($agg_result, 0, $1, $sym);
    label = 5;
    break;
   case 4:
    _mrb_nil_value116($agg_result);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_obj_iv_set($mrb, $obj, $sym, $v) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $sym = $sym | 0;
  $v = $v | 0;
  var $iv = 0, $0 = 0, $tobool = 0, $call = 0, $t_0 = 0, $1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $iv = $obj + 12 | 0;
    $0 = HEAP32[$iv >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $t_0 = $0;
      label = 4;
      break;
    }
   case 3:
    $call = _iv_new($mrb) | 0;
    HEAP32[$iv >> 2] = $call;
    $t_0 = $call;
    label = 4;
    break;
   case 4:
    $1 = $obj;
    _mrb_write_barrier($mrb, $1);
    _iv_put($t_0, $sym, $v);
    STACKTOP = __stackBase__;
    return;
  }
}
function _iv_new($mrb) {
  $mrb = $mrb | 0;
  return _kh_init_iv_size($mrb, 8) | 0;
}
function _iv_put($t, $sym, $val) {
  $t = $t | 0;
  $sym = $sym | 0;
  $val = $val | 0;
  var $call = 0, $1 = 0, $2 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $call = _kh_put_iv($t | 0, $sym) | 0;
  $1 = (HEAP32[$t + 28 >> 2] | 0) + ($call * 12 & -1) | 0;
  $2 = $val;
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
  HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_iv_ifnone($mrb, $obj, $sym, $v) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $sym = $sym | 0;
  $v = $v | 0;
  var $iv = 0, $0 = 0, $tobool = 0, $call = 0, $call2 = 0, $tobool3 = 0, $t_0 = 0, $1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $iv = $obj + 12 | 0;
    $0 = HEAP32[$iv >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _iv_new($mrb) | 0;
    HEAP32[$iv >> 2] = $call;
    $t_0 = $call;
    label = 5;
    break;
   case 4:
    $call2 = _iv_get($0, $sym, $v) | 0;
    $tobool3 = $call2 << 24 >> 24 == 0;
    if ($tobool3) {
      $t_0 = $0;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $1 = $obj;
    _mrb_write_barrier($mrb, $1);
    _iv_put($t_0, $sym, $v);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_iv_set($mrb, $obj, $sym, $v) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $sym = $sym | 0;
  $v = $v | 0;
  var $call = 0, $tobool = 0, $p = 0, $0 = 0, $1 = 0, $call1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _obj_iv_p($obj) | 0;
    $tobool = $call << 24 >> 24 == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $p = $obj;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    _mrb_obj_iv_set($mrb, $1, $sym, $v);
    label = 5;
    break;
   case 4:
    $call1 = _mrb_class_get($mrb, 92232) | 0;
    _mrb_raise($mrb, $call1, 106780);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_obj_iv_defined($mrb, $obj, $sym) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $sym = $sym | 0;
  var $iv = 0, $0 = 0, $tobool = 0, $call = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $iv = $obj + 12 | 0;
    $0 = HEAP32[$iv >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _iv_get($0, $sym, 0) | 0;
    $retval_0 = $call;
    label = 4;
    break;
   case 4:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_iv_copy($mrb, $dest, $src) {
  $mrb = $mrb | 0;
  $dest = $dest | 0;
  $src = $src | 0;
  var $p = 0, $0 = 0, $p2 = 0, $1 = 0, $iv = 0, $2 = 0, $3 = 0, $tobool = 0, $iv5 = 0, $4 = 0, $5 = 0, $tobool6 = 0, $call = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $dest;
  $dest = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$dest >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$dest + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$dest + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $src;
  $src = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$src >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$src + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$src + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $dest;
    $0 = HEAP32[$p >> 2] | 0;
    $p2 = $src;
    $1 = HEAP32[$p2 >> 2] | 0;
    $iv = $0 + 12 | 0;
    $2 = $iv;
    $3 = HEAP32[$2 >> 2] | 0;
    $tobool = ($3 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _iv_free($3);
    HEAP32[$2 >> 2] = 0;
    label = 4;
    break;
   case 4:
    $iv5 = $1 + 12 | 0;
    $4 = $iv5;
    $5 = HEAP32[$4 >> 2] | 0;
    $tobool6 = ($5 | 0) == 0;
    if ($tobool6) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $call = _iv_copy($mrb, $5) | 0;
    HEAP32[$2 >> 2] = $call;
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _iv_copy($mrb, $t) {
  $mrb = $mrb | 0;
  $t = $t | 0;
  return _kh_copy_iv($mrb, $t | 0) | 0;
}
function _mrb_obj_iv_inspect($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $agg_tmp = 0, $str = 0, $tmp = 0, $tmp2 = 0, $tmp3 = 0, $agg_tmp4 = 0, $tmp6 = 0, $agg_tmp7 = 0, $iv = 0, $0 = 0, $call = 0, $cmp = 0, $1 = 0, $call1 = 0, $2 = 0, $3 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $str = __stackBase__ + 12 | 0;
    $tmp = __stackBase__ + 24 | 0;
    $tmp2 = __stackBase__ + 36 | 0;
    $tmp3 = __stackBase__ + 48 | 0;
    $agg_tmp4 = __stackBase__ + 60 | 0;
    $tmp6 = __stackBase__ + 72 | 0;
    $agg_tmp7 = __stackBase__ + 84 | 0;
    $iv = $obj + 12 | 0;
    $0 = HEAP32[$iv >> 2] | 0;
    $call = _iv_size($0) | 0;
    $cmp = ($call | 0) == 0;
    $1 = $obj | 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_obj_value117($agg_tmp, $1);
    $call1 = _mrb_obj_classname($mrb, $agg_tmp) | 0;
    _mrb_str_buf_new($str, $mrb, 30);
    _mrb_str_buf_cat($tmp, $mrb, $str, 106444, 2);
    _mrb_str_cat2($tmp2, $mrb, $str, $call1);
    _mrb_str_cat($tmp3, $mrb, $str, 102964, 1);
    _mrb_ptr_to_str($agg_tmp4, $mrb, $1);
    _mrb_str_concat($mrb, $str, $agg_tmp4);
    $2 = $str;
    _iv_foreach($mrb, $0, 360, $2);
    _mrb_str_cat($tmp6, $mrb, $str, 100224, 1);
    $3 = $agg_result;
    HEAP32[$3 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$3 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    label = 5;
    break;
   case 4:
    _mrb_obj_value117($agg_tmp7, $1);
    _mrb_any_to_s($agg_result, $mrb, $agg_tmp7);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_cat2($agg_result, $mrb, $str, $ptr) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  $ptr = $ptr | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_str_cat_cstr($agg_result, $mrb, $str, $ptr);
  STACKTOP = __stackBase__;
  return;
}
function _iv_foreach($mrb, $t, $func, $p) {
  $mrb = $mrb | 0;
  $t = $t | 0;
  $func = $func | 0;
  $p = $p | 0;
  var $h1 = 0, $tobool = 0, $keys = 0, $n_buckets = 0, $0 = 0, $cmp3 = 0, $e_flags = 0, $d_flags = 0, $vals = 0, $k_04 = 0, $div = 0, $1 = 0, $arrayidx = 0, $2 = 0, $rem = 0, $arrayidx2 = 0, $3 = 0, $and1 = 0, $tobool4 = 0, $4 = 0, $arrayidx6 = 0, $5 = 0, $and112 = 0, $tobool12 = 0, $6 = 0, $arrayidx14 = 0, $7 = 0, $8 = 0, $arrayidx15 = 0, $call = 0, $cmp16 = 0, $cmp19 = 0, $inc = 0, $9 = 0, $cmp = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $h1 = $t | 0;
    $tobool = ($t | 0) == 0;
    if ($tobool) {
      label = 11;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $keys = $t + 24 | 0;
    $n_buckets = $t | 0;
    $0 = HEAP32[$n_buckets >> 2] | 0;
    $cmp3 = ($0 | 0) == 0;
    if ($cmp3) {
      label = 11;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $e_flags = $t + 16 | 0;
    $d_flags = $t + 20 | 0;
    $vals = $t + 28 | 0;
    $k_04 = 0;
    label = 5;
    break;
   case 5:
    $div = $k_04 >>> 3;
    $1 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $1 + $div | 0;
    $2 = HEAP8[$arrayidx] | 0;
    $rem = $k_04 & 7;
    $arrayidx2 = $rem + 112140 | 0;
    $3 = HEAP8[$arrayidx2] | 0;
    $and1 = $3 & $2;
    $tobool4 = $and1 << 24 >> 24 == 0;
    if ($tobool4) {
      label = 6;
      break;
    } else {
      label = 10;
      break;
    }
   case 6:
    $4 = HEAP32[$d_flags >> 2] | 0;
    $arrayidx6 = $4 + $div | 0;
    $5 = HEAP8[$arrayidx6] | 0;
    $and112 = $5 & $3;
    $tobool12 = $and112 << 24 >> 24 == 0;
    if ($tobool12) {
      label = 7;
      break;
    } else {
      label = 10;
      break;
    }
   case 7:
    $6 = HEAP32[$keys >> 2] | 0;
    $arrayidx14 = $6 + ($k_04 << 1) | 0;
    $7 = HEAP16[$arrayidx14 >> 1] | 0;
    $8 = HEAP32[$vals >> 2] | 0;
    $arrayidx15 = $8 + ($k_04 * 12 & -1) | 0;
    $call = FUNCTION_TABLE_iiiii[$func & 1023]($mrb, $7, $arrayidx15, $p) | 0;
    $cmp16 = ($call | 0) > 0;
    if ($cmp16) {
      label = 11;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $cmp19 = ($call | 0) < 0;
    if ($cmp19) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _kh_del_iv($h1, $k_04);
    label = 10;
    break;
   case 10:
    $inc = $k_04 + 1 | 0;
    $9 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($inc | 0) == ($9 | 0);
    if ($cmp) {
      label = 11;
      break;
    } else {
      $k_04 = $inc;
      label = 5;
      break;
    }
   case 11:
    return;
  }
}
function _inspect_i($mrb, $sym, $v, $p) {
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  $v = $v | 0;
  $p = $p | 0;
  var $str = 0, $len = 0, $tmp = 0, $tmp7 = 0, $tmp8 = 0, $tmp9 = 0, $agg_tmp = 0, $tmp10 = 0, $0 = 0, $p1 = 0, $1 = 0, $ptr = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $call = 0, $5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 88 | 0;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $str = __stackBase__ | 0;
    $len = __stackBase__ + 12 | 0;
    $tmp = __stackBase__ + 16 | 0;
    $tmp7 = __stackBase__ + 28 | 0;
    $tmp8 = __stackBase__ + 40 | 0;
    $tmp9 = __stackBase__ + 52 | 0;
    $agg_tmp = __stackBase__ + 64 | 0;
    $tmp10 = __stackBase__ + 76 | 0;
    $0 = $str;
    HEAP32[$0 >> 2] = HEAP32[$p >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$p + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$p + 8 >> 2] | 0;
    $p1 = $str;
    $1 = HEAP32[$p1 >> 2] | 0;
    $ptr = $1 + 20 | 0;
    $2 = $ptr;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = HEAP8[$3] | 0;
    $cmp = $4 << 24 >> 24 == 45;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP8[$3] = 35;
    _mrb_str_cat($tmp, $mrb, $str, 111e3, 1);
    label = 5;
    break;
   case 4:
    _mrb_str_cat($tmp7, $mrb, $str, 110268, 2);
    label = 5;
    break;
   case 5:
    $call = _mrb_sym2name_len($mrb, $sym, $len) | 0;
    $5 = HEAP32[$len >> 2] | 0;
    _mrb_str_cat($tmp8, $mrb, $str, $call, $5);
    _mrb_str_cat($tmp9, $mrb, $str, 109820, 1);
    _mrb_inspect($agg_tmp, $mrb, $v);
    _mrb_str_append($tmp10, $mrb, $str, $agg_tmp);
    STACKTOP = __stackBase__;
    return 0;
  }
  return 0;
}
function _mrb_iv_remove($agg_result, $mrb, $obj, $sym) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $sym = $sym | 0;
  var $val = 0, $call = 0, $tobool = 0, $p = 0, $0 = 0, $iv = 0, $1 = 0, $2 = 0, $tobool1 = 0, $call2 = 0, $tobool3 = 0, $3 = 0, $4 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $val = __stackBase__ | 0;
    $call = _obj_iv_p($obj) | 0;
    $tobool = $call << 24 >> 24 == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $p = $obj;
    $0 = HEAP32[$p >> 2] | 0;
    $iv = $0 + 12 | 0;
    $1 = $iv;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool1 = ($2 | 0) == 0;
    if ($tobool1) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call2 = _iv_del($2, $sym, $val) | 0;
    $tobool3 = $call2 << 24 >> 24 == 0;
    if ($tobool3) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $3 = $agg_result;
    $4 = $val;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    label = 7;
    break;
   case 6:
    _mrb_undef_value118($agg_result);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _iv_del($t, $sym, $vp) {
  $t = $t | 0;
  $sym = $sym | 0;
  $vp = $vp | 0;
  var $val = 0, $h1 = 0, $tobool = 0, $call = 0, $n_buckets = 0, $0 = 0, $cmp = 0, $vals = 0, $1 = 0, $arrayidx = 0, $2 = 0, $3 = 0, $tobool3 = 0, $4 = 0, $retval_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $val = __stackBase__ | 0;
    $h1 = $t | 0;
    $tobool = ($t | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _kh_get_iv($h1, $sym) | 0;
    $n_buckets = $t | 0;
    $0 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($call | 0) == ($0 | 0);
    if ($cmp) {
      $retval_0 = 0;
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $vals = $t + 28 | 0;
    $1 = HEAP32[$vals >> 2] | 0;
    $arrayidx = $1 + ($call * 12 & -1) | 0;
    $2 = $val;
    $3 = $arrayidx;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    _kh_del_iv($h1, $call);
    $tobool3 = ($vp | 0) == 0;
    if ($tobool3) {
      $retval_0 = 1;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $4 = $vp;
    HEAP32[$4 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$4 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$4 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    $retval_0 = 1;
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_vm_iv_get($agg_result, $mrb, $sym) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  _mrb_iv_get($agg_result, 0, HEAP32[(HEAP32[$mrb + 8 >> 2] | 0) + 4 >> 2] | 0, $sym);
  return;
}
function _mrb_vm_iv_set($mrb, $sym, $v) {
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  $v = $v | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_iv_set($mrb, HEAP32[(HEAP32[$mrb + 8 >> 2] | 0) + 4 >> 2] | 0, $sym, $v);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_instance_variables($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $ary = 0, $0 = 0, $call = 0, $tobool = 0, $p = 0, $1 = 0, $iv = 0, $2 = 0, $3 = 0, $tobool1 = 0, $4 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ary = __stackBase__ | 0;
    _mrb_ary_new($ary, $mrb);
    $0 = $ary;
    $call = _obj_iv_p($self) | 0;
    $tobool = $call << 24 >> 24 == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $p = $self;
    $1 = HEAP32[$p >> 2] | 0;
    $iv = $1 + 12 | 0;
    $2 = $iv;
    $3 = HEAP32[$2 >> 2] | 0;
    $tobool1 = ($3 | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _iv_foreach($mrb, $3, 134, $0);
    label = 5;
    break;
   case 5:
    $4 = $agg_result;
    HEAP32[$4 >> 2] = HEAP32[$0 >> 2] | 0;
    HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 0;
    HEAP32[$4 + 8 >> 2] = HEAP32[$0 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _iv_i($mrb, $sym, $v, $p) {
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  $v = $v | 0;
  $p = $p | 0;
  var $ary = 0, $len = 0, $agg_tmp = 0, $0 = 0, $call = 0, $1 = 0, $cmp = 0, $2 = 0, $cmp1 = 0, $arrayidx4 = 0, $3 = 0, $cmp6 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ary = __stackBase__ | 0;
    $len = __stackBase__ + 12 | 0;
    $agg_tmp = __stackBase__ + 16 | 0;
    $0 = $ary;
    HEAP32[$0 >> 2] = HEAP32[$p >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$p + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$p + 8 >> 2] | 0;
    $call = _mrb_sym2name_len($mrb, $sym, $len) | 0;
    $1 = HEAP32[$len >> 2] | 0;
    $cmp = $1 >>> 0 > 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $2 = HEAP8[$call] | 0;
    $cmp1 = $2 << 24 >> 24 == 64;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $arrayidx4 = $call + 1 | 0;
    $3 = HEAP8[$arrayidx4] | 0;
    $cmp6 = $3 << 24 >> 24 == 64;
    if ($cmp6) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _mrb_symbol_value120($agg_tmp, $sym);
    _mrb_ary_push($mrb, $ary, $agg_tmp);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return 0;
  }
  return 0;
}
function _mrb_mod_class_variables($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $ary = 0, $0 = 0, $p = 0, $1 = 0, $tobool5 = 0, $2 = 0, $c_06 = 0, $iv = 0, $3 = 0, $tobool1 = 0, $super = 0, $4 = 0, $tobool = 0, $5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ary = __stackBase__ | 0;
    _mrb_ary_new($ary, $mrb);
    $0 = $ary;
    $p = $mod;
    $1 = HEAP32[$p >> 2] | 0;
    $tobool5 = ($1 | 0) == 0;
    if ($tobool5) {
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $2 = $1;
    $c_06 = $2;
    label = 4;
    break;
   case 4:
    $iv = $c_06 + 12 | 0;
    $3 = HEAP32[$iv >> 2] | 0;
    $tobool1 = ($3 | 0) == 0;
    if ($tobool1) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _iv_foreach($mrb, $3, 186, $0);
    label = 6;
    break;
   case 6:
    $super = $c_06 + 20 | 0;
    $4 = HEAP32[$super >> 2] | 0;
    $tobool = ($4 | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      $c_06 = $4;
      label = 4;
      break;
    }
   case 7:
    $5 = $agg_result;
    HEAP32[$5 >> 2] = HEAP32[$0 >> 2] | 0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$0 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _cv_i($mrb, $sym, $v, $p) {
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  $v = $v | 0;
  $p = $p | 0;
  var $ary = 0, $len = 0, $agg_tmp = 0, $0 = 0, $call = 0, $1 = 0, $cmp = 0, $2 = 0, $cmp1 = 0, $arrayidx4 = 0, $3 = 0, $cmp6 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ary = __stackBase__ | 0;
    $len = __stackBase__ + 12 | 0;
    $agg_tmp = __stackBase__ + 16 | 0;
    $0 = $ary;
    HEAP32[$0 >> 2] = HEAP32[$p >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$p + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$p + 8 >> 2] | 0;
    $call = _mrb_sym2name_len($mrb, $sym, $len) | 0;
    $1 = HEAP32[$len >> 2] | 0;
    $cmp = $1 >>> 0 > 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $2 = HEAP8[$call] | 0;
    $cmp1 = $2 << 24 >> 24 == 64;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $arrayidx4 = $call + 1 | 0;
    $3 = HEAP8[$arrayidx4] | 0;
    $cmp6 = $3 << 24 >> 24 == 64;
    if ($cmp6) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _mrb_symbol_value120($agg_tmp, $sym);
    _mrb_ary_push($mrb, $ary, $agg_tmp);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return 0;
  }
  return 0;
}
function _mrb_mod_cv_get($agg_result, $mrb, $c, $sym) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $c = $c | 0;
  $sym = $sym | 0;
  var $v = 0, $agg_tmp = 0, $agg_tmp6 = 0, $tobool9 = 0, $c_addr_010 = 0, $iv = 0, $0 = 0, $tobool1 = 0, $call = 0, $tobool3 = 0, $1 = 0, $2 = 0, $super = 0, $3 = 0, $tobool = 0, $4 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $v = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $agg_tmp6 = __stackBase__ + 24 | 0;
    $tobool9 = ($c | 0) == 0;
    if ($tobool9) {
      label = 7;
      break;
    } else {
      $c_addr_010 = $c;
      label = 3;
      break;
    }
   case 3:
    $iv = $c_addr_010 + 12 | 0;
    $0 = HEAP32[$iv >> 2] | 0;
    $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call = _iv_get($0, $sym, $v) | 0;
    $tobool3 = $call << 24 >> 24 == 0;
    if ($tobool3) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $1 = $agg_result;
    $2 = $v;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    label = 8;
    break;
   case 6:
    $super = $c_addr_010 + 20 | 0;
    $3 = HEAP32[$super >> 2] | 0;
    $tobool = ($3 | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      $c_addr_010 = $3;
      label = 3;
      break;
    }
   case 7:
    _mrb_sym2str($agg_tmp, $mrb, $sym);
    $4 = $c | 0;
    _mrb_obj_value117($agg_tmp6, $4);
    _mrb_name_error($mrb, $sym, 97640, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp6 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp6 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp6 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_nil_value116($agg_result);
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_cv_get($agg_result, $mrb, $mod, $sym) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  $sym = $sym | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_mod_cv_get($agg_result, $mrb, HEAP32[$mod >> 2] | 0, $sym);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_cv_set($mrb, $c, $sym, $v) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  $sym = $sym | 0;
  $v = $v | 0;
  var $tobool18 = 0, $c_addr_019 = 0, $iv = 0, $0 = 0, $tobool1 = 0, $call = 0, $tobool3 = 0, $1 = 0, $super = 0, $2 = 0, $tobool = 0, $iv6 = 0, $3 = 0, $tobool7 = 0, $call9 = 0, $4 = 0, $5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool18 = ($c | 0) == 0;
    if ($tobool18) {
      label = 7;
      break;
    } else {
      $c_addr_019 = $c;
      label = 3;
      break;
    }
   case 3:
    $iv = $c_addr_019 + 12 | 0;
    $0 = HEAP32[$iv >> 2] | 0;
    $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call = _iv_get($0, $sym, 0) | 0;
    $tobool3 = $call << 24 >> 24 == 0;
    if ($tobool3) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $1 = $c_addr_019;
    _mrb_write_barrier($mrb, $1);
    _iv_put($0, $sym, $v);
    label = 10;
    break;
   case 6:
    $super = $c_addr_019 + 20 | 0;
    $2 = HEAP32[$super >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      $c_addr_019 = $2;
      label = 3;
      break;
    }
   case 7:
    $iv6 = $c + 12 | 0;
    $3 = HEAP32[$iv6 >> 2] | 0;
    $tobool7 = ($3 | 0) == 0;
    if ($tobool7) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $call9 = _iv_new($mrb) | 0;
    HEAP32[$iv6 >> 2] = $call9;
    label = 9;
    break;
   case 9:
    $4 = $c;
    _mrb_write_barrier($mrb, $4);
    $5 = HEAP32[$iv6 >> 2] | 0;
    _iv_put($5, $sym, $v);
    label = 10;
    break;
   case 10:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_cv_set($mrb, $mod, $sym, $v) {
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  $sym = $sym | 0;
  $v = $v | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_mod_cv_set($mrb, HEAP32[$mod >> 2] | 0, $sym, $v);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_cv_defined($mrb, $c, $sym) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  $sym = $sym | 0;
  var $tobool4 = 0, $c_addr_05 = 0, $iv = 0, $0 = 0, $tobool1 = 0, $call = 0, $tobool3 = 0, $super = 0, $1 = 0, $tobool = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool4 = ($c | 0) == 0;
    if ($tobool4) {
      $retval_0 = 0;
      label = 6;
      break;
    } else {
      $c_addr_05 = $c;
      label = 3;
      break;
    }
   case 3:
    $iv = $c_addr_05 + 12 | 0;
    $0 = HEAP32[$iv >> 2] | 0;
    $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call = _iv_get($0, $sym, 0) | 0;
    $tobool3 = $call << 24 >> 24 == 0;
    if ($tobool3) {
      label = 5;
      break;
    } else {
      $retval_0 = 1;
      label = 6;
      break;
    }
   case 5:
    $super = $c_addr_05 + 20 | 0;
    $1 = HEAP32[$super >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 6;
      break;
    } else {
      $c_addr_05 = $1;
      label = 3;
      break;
    }
   case 6:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_cv_defined($mrb, $mod, $sym) {
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  $sym = $sym | 0;
  var $call = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $call = _mrb_mod_cv_defined(0, HEAP32[$mod >> 2] | 0, $sym) | 0;
  STACKTOP = __stackBase__;
  return $call | 0;
}
function _mrb_vm_cv_get($agg_result, $mrb, $sym) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  var $c1 = 0, $0 = 0, $ci = 0, $1 = 0, $proc = 0, $2 = 0, $target_class = 0, $3 = 0, $tobool = 0, $target_class4 = 0, $4 = 0, $c_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $c1 = $mrb + 8 | 0;
    $0 = HEAP32[$c1 >> 2] | 0;
    $ci = $0 + 16 | 0;
    $1 = HEAP32[$ci >> 2] | 0;
    $proc = $1 + 4 | 0;
    $2 = HEAP32[$proc >> 2] | 0;
    $target_class = $2 + 16 | 0;
    $3 = HEAP32[$target_class >> 2] | 0;
    $tobool = ($3 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $c_0 = $3;
      label = 4;
      break;
    }
   case 3:
    $target_class4 = $1 + 28 | 0;
    $4 = HEAP32[$target_class4 >> 2] | 0;
    $c_0 = $4;
    label = 4;
    break;
   case 4:
    _mrb_mod_cv_get($agg_result, $mrb, $c_0, $sym);
    return;
  }
}
function _mrb_vm_cv_set($mrb, $sym, $v) {
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  $v = $v | 0;
  var $c1 = 0, $0 = 0, $ci = 0, $1 = 0, $proc = 0, $2 = 0, $target_class = 0, $3 = 0, $tobool = 0, $target_class4 = 0, $4 = 0, $tobool522 = 0, $c_023 = 0, $iv = 0, $5 = 0, $tobool6 = 0, $call = 0, $tobool9 = 0, $6 = 0, $super = 0, $7 = 0, $tobool5 = 0, $8 = 0, $ci14 = 0, $9 = 0, $target_class15 = 0, $10 = 0, $iv16 = 0, $11 = 0, $tobool17 = 0, $call19 = 0, $12 = 0, $13 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $c1 = $mrb + 8 | 0;
    $0 = HEAP32[$c1 >> 2] | 0;
    $ci = $0 + 16 | 0;
    $1 = HEAP32[$ci >> 2] | 0;
    $proc = $1 + 4 | 0;
    $2 = HEAP32[$proc >> 2] | 0;
    $target_class = $2 + 16 | 0;
    $3 = HEAP32[$target_class >> 2] | 0;
    $tobool = ($3 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $c_023 = $3;
      label = 4;
      break;
    }
   case 3:
    $target_class4 = $1 + 28 | 0;
    $4 = HEAP32[$target_class4 >> 2] | 0;
    $tobool522 = ($4 | 0) == 0;
    if ($tobool522) {
      label = 8;
      break;
    } else {
      $c_023 = $4;
      label = 4;
      break;
    }
   case 4:
    $iv = $c_023 + 12 | 0;
    $5 = HEAP32[$iv >> 2] | 0;
    $tobool6 = ($5 | 0) == 0;
    if ($tobool6) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $call = _iv_get($5, $sym, 0) | 0;
    $tobool9 = $call << 24 >> 24 == 0;
    if ($tobool9) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $6 = $c_023;
    _mrb_write_barrier($mrb, $6);
    _iv_put($5, $sym, $v);
    label = 11;
    break;
   case 7:
    $super = $c_023 + 20 | 0;
    $7 = HEAP32[$super >> 2] | 0;
    $tobool5 = ($7 | 0) == 0;
    if ($tobool5) {
      label = 8;
      break;
    } else {
      $c_023 = $7;
      label = 4;
      break;
    }
   case 8:
    $8 = HEAP32[$c1 >> 2] | 0;
    $ci14 = $8 + 16 | 0;
    $9 = HEAP32[$ci14 >> 2] | 0;
    $target_class15 = $9 + 28 | 0;
    $10 = HEAP32[$target_class15 >> 2] | 0;
    $iv16 = $10 + 12 | 0;
    $11 = HEAP32[$iv16 >> 2] | 0;
    $tobool17 = ($11 | 0) == 0;
    if ($tobool17) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $call19 = _iv_new($mrb) | 0;
    HEAP32[$iv16 >> 2] = $call19;
    label = 10;
    break;
   case 10:
    $12 = $10;
    _mrb_write_barrier($mrb, $12);
    $13 = HEAP32[$iv16 >> 2] | 0;
    _iv_put($13, $sym, $v);
    label = 11;
    break;
   case 11:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_const_defined($mrb, $mod, $sym) {
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  $sym = $sym | 0;
  var $p = 0, $0 = 0, $iv = 0, $1 = 0, $2 = 0, $tobool = 0, $call = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $mod;
    $0 = HEAP32[$p >> 2] | 0;
    $iv = $0 + 12 | 0;
    $1 = $iv;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _iv_get($2, $sym, 0) | 0;
    $retval_0 = $call;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_const_get($agg_result, $mrb, $mod, $sym) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  $sym = $sym | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mod_const_check($mrb, $mod);
  _const_get($agg_result, $mrb, HEAP32[$mod >> 2] | 0, $sym);
  STACKTOP = __stackBase__;
  return;
}
function _mod_const_check($mrb, $mod) {
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $tt = 0, $0 = 0, $call = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $mod + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    if (($0 | 0) == 9 | ($0 | 0) == 10 | ($0 | 0) == 12) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 92852) | 0;
    _mrb_raise($mrb, $call, 111540);
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return;
  }
}
function _csym_i($mrb, $sym, $v, $p) {
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  $v = $v | 0;
  $p = $p | 0;
  var $c1 = 0, $0 = 0, $tt = 0, $1 = 0, $2 = 0, $3 = 0, $bf_clear = 0, $cmp = 0, $p2 = 0, $4 = 0, $5 = 0, $cmp3 = 0, $sym4 = 0, $6 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $c1 = $p;
    $0 = HEAP32[$c1 >> 2] | 0;
    $tt = $v + 8 | 0;
    $1 = HEAP32[$tt >> 2] | 0;
    $2 = $0;
    $3 = HEAP32[$2 >> 2] | 0;
    $bf_clear = $3 & 255;
    $cmp = ($1 | 0) == ($bf_clear | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      $retval_0 = 0;
      label = 5;
      break;
    }
   case 3:
    $p2 = $v;
    $4 = HEAP32[$p2 >> 2] | 0;
    $5 = $4;
    $cmp3 = ($5 | 0) == ($0 | 0);
    if ($cmp3) {
      label = 4;
      break;
    } else {
      $retval_0 = 0;
      label = 5;
      break;
    }
   case 4:
    $sym4 = $p + 4 | 0;
    $6 = $sym4;
    HEAP16[$6 >> 1] = $sym;
    $retval_0 = 1;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_obj_value143($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_fixnum_value144($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _const_get($agg_result, $mrb, $base, $sym) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $base = $base | 0;
  $sym = $sym | 0;
  var $v = 0, $agg_tmp = 0, $name = 0, $agg_tmp18 = 0, $agg_tmp22 = 0, $tobool7 = 0, $0 = 0, $object_class = 0, $retry_0_ph = 0, $c_0_ph = 0, $tobool22 = 0, $c_023 = 0, $iv = 0, $1 = 0, $tobool1 = 0, $call = 0, $tobool3 = 0, $2 = 0, $3 = 0, $super = 0, $4 = 0, $tobool = 0, $tobool6 = 0, $or_cond = 0, $5 = 0, $bf_clear = 0, $cmp = 0, $call1125 = 0, $6 = 0, $call11 = 0, $tobool1320 = 0, $call1127 = 0, $c_121 = 0, $7 = 0, $call15 = 0, $tobool16 = 0, $super20 = 0, $8 = 0, $tobool13 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 60 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $v = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $name = __stackBase__ + 24 | 0;
    $agg_tmp18 = __stackBase__ + 36 | 0;
    $agg_tmp22 = __stackBase__ + 48 | 0;
    $tobool7 = ($base | 0) == 0;
    $0 = $base;
    $object_class = $mrb + 44 | 0;
    $c_0_ph = $base;
    $retry_0_ph = 0;
    label = 3;
    break;
   case 3:
    $tobool22 = ($c_0_ph | 0) == 0;
    if ($tobool22) {
      label = 8;
      break;
    } else {
      $c_023 = $c_0_ph;
      label = 4;
      break;
    }
   case 4:
    $iv = $c_023 + 12 | 0;
    $1 = HEAP32[$iv >> 2] | 0;
    $tobool1 = ($1 | 0) == 0;
    if ($tobool1) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $call = _iv_get($1, $sym, $v) | 0;
    $tobool3 = $call << 24 >> 24 == 0;
    if ($tobool3) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $2 = $agg_result;
    $3 = $v;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    label = 18;
    break;
   case 7:
    $super = $c_023 + 20 | 0;
    $4 = HEAP32[$super >> 2] | 0;
    $tobool = ($4 | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      $c_023 = $4;
      label = 4;
      break;
    }
   case 8:
    $tobool6 = $retry_0_ph << 24 >> 24 != 0;
    $or_cond = $tobool6 | $tobool7;
    if ($or_cond) {
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $5 = HEAP32[$0 >> 2] | 0;
    $bf_clear = $5 & 255;
    $cmp = ($bf_clear | 0) == 10;
    if ($cmp) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $call1125 = _mrb_intern2($mrb, 94480, 13) | 0;
    $call1127 = $call1125;
    label = 13;
    break;
   case 11:
    $6 = HEAP32[$object_class >> 2] | 0;
    $c_0_ph = $6;
    $retry_0_ph = 1;
    label = 3;
    break;
   case 12:
    $call11 = _mrb_intern2($mrb, 94480, 13) | 0;
    $tobool1320 = ($base | 0) == 0;
    if ($tobool1320) {
      label = 17;
      break;
    } else {
      $call1127 = $call11;
      label = 13;
      break;
    }
   case 13:
    $c_121 = $base;
    label = 14;
    break;
   case 14:
    $7 = $c_121 | 0;
    _mrb_obj_value117($agg_tmp, $7);
    $call15 = _mrb_respond_to($mrb, $agg_tmp, $call1127) | 0;
    $tobool16 = ($call15 | 0) == 0;
    if ($tobool16) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    _mrb_symbol_value120($name, $sym);
    _mrb_obj_value117($agg_tmp18, $7);
    _mrb_funcall_argv($agg_result, $mrb, $agg_tmp18, $call1127, 1, $name);
    label = 18;
    break;
   case 16:
    $super20 = $c_121 + 20 | 0;
    $8 = HEAP32[$super20 >> 2] | 0;
    $tobool13 = ($8 | 0) == 0;
    if ($tobool13) {
      label = 17;
      break;
    } else {
      $c_121 = $8;
      label = 14;
      break;
    }
   case 17:
    _mrb_sym2str($agg_tmp22, $mrb, $sym);
    _mrb_name_error($mrb, $sym, 93536, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp22 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp22 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp22 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_nil_value116($agg_result);
    label = 18;
    break;
   case 18:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_vm_const_get($agg_result, $mrb, $sym) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  var $v = 0, $c1 = 0, $0 = 0, $ci = 0, $1 = 0, $proc = 0, $2 = 0, $target_class = 0, $3 = 0, $tobool = 0, $target_class4 = 0, $4 = 0, $tobool5 = 0, $c_017 = 0, $iv = 0, $5 = 0, $tobool8 = 0, $call1319 = 0, $tobool1420 = 0, $call = 0, $tobool10 = 0, $6 = 0, $7 = 0, $call1321 = 0, $iv17 = 0, $8 = 0, $tobool18 = 0, $call13 = 0, $tobool14 = 0, $call21 = 0, $tobool23 = 0, $9 = 0, $10 = 0, $c_018 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $v = __stackBase__ | 0;
    $c1 = $mrb + 8 | 0;
    $0 = HEAP32[$c1 >> 2] | 0;
    $ci = $0 + 16 | 0;
    $1 = HEAP32[$ci >> 2] | 0;
    $proc = $1 + 4 | 0;
    $2 = HEAP32[$proc >> 2] | 0;
    $target_class = $2 + 16 | 0;
    $3 = HEAP32[$target_class >> 2] | 0;
    $tobool = ($3 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $c_017 = $3;
      label = 4;
      break;
    }
   case 3:
    $target_class4 = $1 + 28 | 0;
    $4 = HEAP32[$target_class4 >> 2] | 0;
    $tobool5 = ($4 | 0) == 0;
    if ($tobool5) {
      $c_018 = 0;
      label = 12;
      break;
    } else {
      $c_017 = $4;
      label = 4;
      break;
    }
   case 4:
    $iv = $c_017 + 12 | 0;
    $5 = HEAP32[$iv >> 2] | 0;
    $tobool8 = ($5 | 0) == 0;
    if ($tobool8) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $call1319 = _mrb_class_outer_module($mrb, $c_017) | 0;
    $tobool1420 = ($call1319 | 0) == 0;
    if ($tobool1420) {
      $c_018 = $c_017;
      label = 12;
      break;
    } else {
      $call1321 = $call1319;
      label = 8;
      break;
    }
   case 6:
    $call = _iv_get($5, $sym, $v) | 0;
    $tobool10 = $call << 24 >> 24 == 0;
    if ($tobool10) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $6 = $agg_result;
    $7 = $v;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    label = 13;
    break;
   case 8:
    $iv17 = $call1321 + 12 | 0;
    $8 = HEAP32[$iv17 >> 2] | 0;
    $tobool18 = ($8 | 0) == 0;
    if ($tobool18) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $call13 = _mrb_class_outer_module($mrb, $call1321) | 0;
    $tobool14 = ($call13 | 0) == 0;
    if ($tobool14) {
      $c_018 = $c_017;
      label = 12;
      break;
    } else {
      $call1321 = $call13;
      label = 8;
      break;
    }
   case 10:
    $call21 = _iv_get($8, $sym, $v) | 0;
    $tobool23 = $call21 << 24 >> 24 == 0;
    if ($tobool23) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $9 = $agg_result;
    $10 = $v;
    HEAP32[$9 >> 2] = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 + 4 >> 2] = HEAP32[$10 + 4 >> 2] | 0;
    HEAP32[$9 + 8 >> 2] = HEAP32[$10 + 8 >> 2] | 0;
    label = 13;
    break;
   case 12:
    _const_get($agg_result, $mrb, $c_018, $sym);
    label = 13;
    break;
   case 13:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_const_set($mrb, $mod, $sym, $v) {
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  $sym = $sym | 0;
  $v = $v | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mod_const_check($mrb, $mod);
  _mrb_iv_set($mrb, $mod, $sym, $v);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_vm_const_set($mrb, $sym, $v) {
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  $v = $v | 0;
  var $c1 = 0, $0 = 0, $ci = 0, $1 = 0, $proc = 0, $2 = 0, $target_class = 0, $3 = 0, $tobool = 0, $target_class4 = 0, $4 = 0, $c_0 = 0, $5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $c1 = $mrb + 8 | 0;
    $0 = HEAP32[$c1 >> 2] | 0;
    $ci = $0 + 16 | 0;
    $1 = HEAP32[$ci >> 2] | 0;
    $proc = $1 + 4 | 0;
    $2 = HEAP32[$proc >> 2] | 0;
    $target_class = $2 + 16 | 0;
    $3 = HEAP32[$target_class >> 2] | 0;
    $tobool = ($3 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $c_0 = $3;
      label = 4;
      break;
    }
   case 3:
    $target_class4 = $1 + 28 | 0;
    $4 = HEAP32[$target_class4 >> 2] | 0;
    $c_0 = $4;
    label = 4;
    break;
   case 4:
    $5 = $c_0;
    _mrb_obj_iv_set($mrb, $5, $sym, $v);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_define_const($mrb, $mod, $name, $v) {
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  $name = $name | 0;
  $v = $v | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_obj_iv_set($mrb, $mod, _mrb_intern119($mrb, $name) | 0, $v);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_intern119($mrb, $cstr) {
  $mrb = $mrb | 0;
  $cstr = $cstr | 0;
  return _mrb_intern_cstr($mrb, $cstr) | 0;
}
function _mrb_mod_constants($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $ary = 0, $p = 0, $0 = 0, $1 = 0, $tobool_old = 0, $2 = 0, $object_class = 0, $c_0 = 0, $iv = 0, $3 = 0, $tobool1 = 0, $super = 0, $4 = 0, $5 = 0, $cmp = 0, $tobool = 0, $or_cond = 0, $6 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ary = __stackBase__ | 0;
    $p = $mod;
    $0 = HEAP32[$p >> 2] | 0;
    _mrb_ary_new($ary, $mrb);
    $1 = $ary;
    $tobool_old = ($0 | 0) == 0;
    if ($tobool_old) {
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $2 = $0;
    $object_class = $mrb + 44 | 0;
    $c_0 = $2;
    label = 4;
    break;
   case 4:
    $iv = $c_0 + 12 | 0;
    $3 = HEAP32[$iv >> 2] | 0;
    $tobool1 = ($3 | 0) == 0;
    if ($tobool1) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _iv_foreach($mrb, $3, 862, $1);
    label = 6;
    break;
   case 6:
    $super = $c_0 + 20 | 0;
    $4 = HEAP32[$super >> 2] | 0;
    $5 = HEAP32[$object_class >> 2] | 0;
    $cmp = ($4 | 0) != ($5 | 0);
    $tobool = ($4 | 0) != 0;
    $or_cond = $cmp & $tobool;
    if ($or_cond) {
      $c_0 = $4;
      label = 4;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $6 = $agg_result;
    HEAP32[$6 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$6 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _const_i($mrb, $sym, $v, $p) {
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  $v = $v | 0;
  $p = $p | 0;
  var $ary = 0, $len = 0, $agg_tmp = 0, $0 = 0, $call = 0, $1 = 0, $cmp = 0, $2 = 0, $conv = 0, $call1 = 0, $tobool = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ary = __stackBase__ | 0;
    $len = __stackBase__ + 12 | 0;
    $agg_tmp = __stackBase__ + 16 | 0;
    $0 = $ary;
    HEAP32[$0 >> 2] = HEAP32[$p >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$p + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$p + 8 >> 2] | 0;
    $call = _mrb_sym2name_len($mrb, $sym, $len) | 0;
    $1 = HEAP32[$len >> 2] | 0;
    $cmp = $1 >>> 0 > 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $2 = HEAP8[$call] | 0;
    $conv = $2 & 255;
    $call1 = _isupper($conv | 0) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _mrb_symbol_value120($agg_tmp, $sym);
    _mrb_ary_push($mrb, $ary, $agg_tmp);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return 0;
  }
  return 0;
}
function _mrb_gv_get($agg_result, $mrb, $sym) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  var $v = 0, $globals = 0, $0 = 0, $tobool = 0, $call = 0, $tobool2 = 0, $1 = 0, $2 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $v = __stackBase__ | 0;
    $globals = $mrb + 20 | 0;
    $0 = HEAP32[$globals >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value116($agg_result);
    label = 7;
    break;
   case 4:
    $call = _iv_get($0, $sym, $v) | 0;
    $tobool2 = $call << 24 >> 24 == 0;
    if ($tobool2) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $1 = $agg_result;
    $2 = $v;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    label = 7;
    break;
   case 6:
    _mrb_nil_value116($agg_result);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_gv_set($mrb, $sym, $v) {
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  $v = $v | 0;
  var $globals = 0, $0 = 0, $tobool = 0, $call = 0, $t_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $globals = $mrb + 20 | 0;
    $0 = HEAP32[$globals >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $t_0 = $0;
      label = 4;
      break;
    }
   case 3:
    $call = _iv_new($mrb) | 0;
    HEAP32[$globals >> 2] = $call;
    $t_0 = $call;
    label = 4;
    break;
   case 4:
    _iv_put($t_0, $sym, $v);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_f_global_variables($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $ary = 0, $buf = 0, $agg_tmp = 0, $globals = 0, $0 = 0, $tobool = 0, $1 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx2 = 0, $call3 = 0, $call3_1 = 0, $call3_2 = 0, $call3_3 = 0, $call3_4 = 0, $call3_5 = 0, $call3_6 = 0, $call3_7 = 0, $call3_8 = 0, $2 = 0, $3 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ary = __stackBase__ | 0;
    $buf = __stackBase__ + 12 | 0;
    $agg_tmp = __stackBase__ + 16 | 0;
    $globals = $mrb + 20 | 0;
    $0 = HEAP32[$globals >> 2] | 0;
    _mrb_ary_new($ary, $mrb);
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $1 = $ary;
    _iv_foreach($mrb, $0, 298, $1);
    label = 4;
    break;
   case 4:
    $arrayidx = $buf | 0;
    HEAP8[$arrayidx] = 36;
    $arrayidx1 = $buf + 2 | 0;
    HEAP8[$arrayidx1] = 0;
    $arrayidx2 = $buf + 1 | 0;
    HEAP8[$arrayidx2] = 49;
    $call3 = _mrb_intern2($mrb, $arrayidx, 2) | 0;
    _mrb_symbol_value120($agg_tmp, $call3);
    _mrb_ary_push($mrb, $ary, $agg_tmp);
    HEAP8[$arrayidx2] = 50;
    $call3_1 = _mrb_intern2($mrb, $arrayidx, 2) | 0;
    _mrb_symbol_value120($agg_tmp, $call3_1);
    _mrb_ary_push($mrb, $ary, $agg_tmp);
    HEAP8[$arrayidx2] = 51;
    $call3_2 = _mrb_intern2($mrb, $arrayidx, 2) | 0;
    _mrb_symbol_value120($agg_tmp, $call3_2);
    _mrb_ary_push($mrb, $ary, $agg_tmp);
    HEAP8[$arrayidx2] = 52;
    $call3_3 = _mrb_intern2($mrb, $arrayidx, 2) | 0;
    _mrb_symbol_value120($agg_tmp, $call3_3);
    _mrb_ary_push($mrb, $ary, $agg_tmp);
    HEAP8[$arrayidx2] = 53;
    $call3_4 = _mrb_intern2($mrb, $arrayidx, 2) | 0;
    _mrb_symbol_value120($agg_tmp, $call3_4);
    _mrb_ary_push($mrb, $ary, $agg_tmp);
    HEAP8[$arrayidx2] = 54;
    $call3_5 = _mrb_intern2($mrb, $arrayidx, 2) | 0;
    _mrb_symbol_value120($agg_tmp, $call3_5);
    _mrb_ary_push($mrb, $ary, $agg_tmp);
    HEAP8[$arrayidx2] = 55;
    $call3_6 = _mrb_intern2($mrb, $arrayidx, 2) | 0;
    _mrb_symbol_value120($agg_tmp, $call3_6);
    _mrb_ary_push($mrb, $ary, $agg_tmp);
    HEAP8[$arrayidx2] = 56;
    $call3_7 = _mrb_intern2($mrb, $arrayidx, 2) | 0;
    _mrb_symbol_value120($agg_tmp, $call3_7);
    _mrb_ary_push($mrb, $ary, $agg_tmp);
    HEAP8[$arrayidx2] = 57;
    $call3_8 = _mrb_intern2($mrb, $arrayidx, 2) | 0;
    _mrb_symbol_value120($agg_tmp, $call3_8);
    _mrb_ary_push($mrb, $ary, $agg_tmp);
    $2 = $agg_result;
    $3 = $ary;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _gv_i($mrb, $sym, $v, $p) {
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  $v = $v | 0;
  $p = $p | 0;
  var $ary = 0, $agg_tmp = 0, $0 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $ary = __stackBase__ | 0;
  $agg_tmp = __stackBase__ + 12 | 0;
  $0 = $ary;
  HEAP32[$0 >> 2] = HEAP32[$p >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$p + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$p + 8 >> 2] | 0;
  _mrb_symbol_value120($agg_tmp, $sym);
  _mrb_ary_push($mrb, $ary, $agg_tmp);
  STACKTOP = __stackBase__;
  return 0;
}
function _mrb_symbol_value120($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  var $v_sroa_1_2__raw_idx = 0, $v_sroa_1_2_idx = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP16[$agg_result >> 1] = $i;
  $v_sroa_1_2__raw_idx = $agg_result + 2 | 0;
  $v_sroa_1_2_idx = __stackBase__ | 0;
  HEAP16[$v_sroa_1_2__raw_idx >> 1] = HEAP16[$v_sroa_1_2_idx >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 2 >> 1] = HEAP16[$v_sroa_1_2_idx + 2 >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 4 >> 1] = HEAP16[$v_sroa_1_2_idx + 4 >> 1] | 0;
  HEAP32[$agg_result + 8 >> 2] = 4;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_const_defined_at($mrb, $klass, $id) {
  $mrb = $mrb | 0;
  $klass = $klass | 0;
  $id = $id | 0;
  return _mrb_const_defined_0($mrb, $klass, $id) & 255 | 0;
}
function _mrb_const_defined_0($mrb, $klass, $id) {
  $mrb = $mrb | 0;
  $klass = $klass | 0;
  $id = $id | 0;
  var $tobool1 = 0, $object_class = 0, $tmp_02 = 0, $iv = 0, $0 = 0, $tobool2 = 0, $call = 0, $tobool4 = 0, $1 = 0, $cmp = 0, $super = 0, $2 = 0, $tobool = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool1 = ($klass | 0) == 0;
    if ($tobool1) {
      $retval_0 = 0;
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $object_class = $mrb + 44 | 0;
    $tmp_02 = $klass;
    label = 4;
    break;
   case 4:
    $iv = $tmp_02 + 12 | 0;
    $0 = HEAP32[$iv >> 2] | 0;
    $tobool2 = ($0 | 0) == 0;
    if ($tobool2) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $call = _iv_get($0, $id, 0) | 0;
    $tobool4 = $call << 24 >> 24 == 0;
    if ($tobool4) {
      label = 6;
      break;
    } else {
      $retval_0 = 1;
      label = 8;
      break;
    }
   case 6:
    $1 = HEAP32[$object_class >> 2] | 0;
    $cmp = ($1 | 0) == ($klass | 0);
    if ($cmp) {
      label = 7;
      break;
    } else {
      $retval_0 = 0;
      label = 8;
      break;
    }
   case 7:
    $super = $tmp_02 + 20 | 0;
    $2 = HEAP32[$super >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 8;
      break;
    } else {
      $tmp_02 = $2;
      label = 4;
      break;
    }
   case 8:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_attr_get($agg_result, $mrb, $obj, $id) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $id = $id | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_iv_get($agg_result, 0, $obj, $id);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_class_sym($mrb, $c, $outer) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  $outer = $outer | 0;
  var $tmp = 0, $arg = 0, $0 = 0, $call = 0, $name_sroa_0_0__cast = 0, $name_sroa_0_0_copyload = 0, $name_sroa_2_8__idx2 = 0, $name_sroa_2_8_copyload = 0, $1 = 0, $2 = 0, $tobool1 = 0, $c4 = 0, $sym = 0, $iv = 0, $3 = 0, $4 = 0, $5 = 0, $name_sroa_0_0_extract_trunc = 0, $retval_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $arg = __stackBase__ + 12 | 0;
    $0 = $c;
    $call = _mrb_intern2($mrb, 95508, 11) | 0;
    _mrb_obj_iv_get($tmp, 0, $0, $call);
    $name_sroa_0_0__cast = $tmp;
    $name_sroa_0_0_copyload = HEAP32[$name_sroa_0_0__cast >> 2] | 0;
    $name_sroa_2_8__idx2 = $tmp + 8 | 0;
    $name_sroa_2_8_copyload = HEAP32[$name_sroa_2_8__idx2 >> 2] | 0;
    $1 = $name_sroa_2_8_copyload | $name_sroa_0_0_copyload;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $tobool1 = ($outer | 0) == 0;
    if ($tobool1) {
      $retval_0 = 0;
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $c4 = $arg | 0;
    HEAP32[$c4 >> 2] = $c;
    $sym = $arg + 4 | 0;
    HEAP16[$sym >> 1] = 0;
    $iv = $outer + 12 | 0;
    $3 = HEAP32[$iv >> 2] | 0;
    $4 = $arg;
    _iv_foreach($mrb, $3, 390, $4);
    $5 = HEAP16[$sym >> 1] | 0;
    $retval_0 = $5;
    label = 6;
    break;
   case 5:
    $name_sroa_0_0_extract_trunc = $name_sroa_0_0_copyload & 65535;
    $retval_0 = $name_sroa_0_0_extract_trunc;
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _iv_mark_i($mrb, $sym, $v, $p) {
  $mrb = $mrb | 0;
  $sym = $sym | 0;
  $v = $v | 0;
  $p = $p | 0;
  var $tt = 0, $0 = 0, $cmp = 0, $p1 = 0, $1 = 0, $2 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $v + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = $0 >>> 0 > 7;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $p1 = $v;
    $1 = HEAP32[$p1 >> 2] | 0;
    $2 = $1;
    _mrb_gc_mark($mrb, $2);
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return 0;
  }
  return 0;
}
function _mrb_funcall($agg_result, $mrb, $self, $name, $argc, varrp) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  $name = $name | 0;
  $argc = $argc | 0;
  varrp = varrp | 0;
  var $v = 0, $ap = 0, $argv = 0, $ap6 = 0, $call = 0, $ap3 = 0, $ap_cur = 0, $ap_next = 0, $0 = 0, $cmp7 = 0, $call9 = 0, $ap610 = 0, $cmp1114 = 0, $ap6_promoted = 0, $1 = 0, $ap_next1316 = 0, $i_015 = 0, $arrayidx = 0, $ap_next13 = 0, $2 = 0, $inc = 0, $exitcond = 0, $scevgep = 0, $arraydecay = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 212 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $v = __stackBase__ | 0;
    $ap = __stackBase__ + 12 | 0;
    $argv = __stackBase__ + 16 | 0;
    $ap6 = __stackBase__ + 208 | 0;
    $call = _mrb_intern140($mrb, $name) | 0;
    if (($argc | 0) == 0) {
      label = 3;
      break;
    } else if (($argc | 0) == 1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    _mrb_funcall_argv($agg_result, $mrb, $self, $call, 0, 0);
    label = 12;
    break;
   case 4:
    $ap3 = $ap;
    HEAP32[$ap3 >> 2] = varrp;
    $ap_cur = HEAP32[$ap >> 2] | 0;
    $ap_next = $ap_cur + 12 | 0;
    HEAP32[$ap >> 2] = $ap_next;
    $0 = $v;
    HEAP32[$0 >> 2] = HEAP32[$ap_cur >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$ap_cur + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$ap_cur + 8 >> 2] | 0;
    _mrb_funcall_argv($agg_result, $mrb, $self, $call, 1, $v);
    label = 12;
    break;
   case 5:
    $cmp7 = ($argc | 0) > 16;
    if ($cmp7) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $call9 = _mrb_class_get($mrb, 109948) | 0;
    _mrb_raise($mrb, $call9, 110748);
    label = 7;
    break;
   case 7:
    $ap610 = $ap6;
    HEAP32[$ap610 >> 2] = varrp;
    $cmp1114 = ($argc | 0) > 0;
    if ($cmp1114) {
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
   case 8:
    $ap6_promoted = HEAP32[$ap6 >> 2] | 0;
    $1 = $argc * 12 & -1;
    $i_015 = 0;
    $ap_next1316 = $ap6_promoted;
    label = 9;
    break;
   case 9:
    $arrayidx = $argv + ($i_015 * 12 & -1) | 0;
    $ap_next13 = $ap_next1316 + 12 | 0;
    $2 = $arrayidx;
    HEAP32[$2 >> 2] = HEAP32[$ap_next1316 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$ap_next1316 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$ap_next1316 + 8 >> 2] | 0;
    $inc = $i_015 + 1 | 0;
    $exitcond = ($inc | 0) == ($argc | 0);
    if ($exitcond) {
      label = 10;
      break;
    } else {
      $i_015 = $inc;
      $ap_next1316 = $ap_next13;
      label = 9;
      break;
    }
   case 10:
    $scevgep = $ap6_promoted + $1 | 0;
    HEAP32[$ap6 >> 2] = $scevgep;
    label = 11;
    break;
   case 11:
    $arraydecay = $argv | 0;
    _mrb_funcall_argv($agg_result, $mrb, $self, $call, $argc, $arraydecay);
    label = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_intern140($mrb, $cstr) {
  $mrb = $mrb | 0;
  $cstr = $cstr | 0;
  return _mrb_intern_cstr($mrb, $cstr) | 0;
}
function _mrb_funcall_argv($agg_result, $mrb, $self, $mid, $argc, $argv) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  $mid = $mid | 0;
  $argc = $argc | 0;
  $argv = $argv | 0;
  var $agg_tmp = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $agg_tmp = __stackBase__ | 0;
  _mrb_nil_value148($agg_tmp);
  _mrb_funcall_with_block($agg_result, $mrb, $self, $mid, $argc, $argv, $agg_tmp);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_funcall_with_block($agg_result, $mrb, $self, $mid, $argc, $argv, $blk) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  $mid = $mid | 0;
  $argc = $argc | 0;
  $argv = $argv | 0;
  $blk = $blk | 0;
  var $val = 0, $c_jmp = 0, $c16 = 0, $agg_tmp = 0, $tmp70 = 0, $tmp105 = 0, $jmp = 0, $0 = 0, $tobool = 0, $c = 0, $1 = 0, $ci = 0, $2 = 0, $arraydecay = 0, $call = 0, $cmp = 0, $3 = 0, $ci372 = 0, $4 = 0, $cmp473 = 0, $5 = 0, $6 = 0, $stbase = 0, $7 = 0, $stackidx = 0, $8 = 0, $add_ptr = 0, $stack = 0, $9 = 0, $ci3 = 0, $10 = 0, $cmp4 = 0, $exc = 0, $11 = 0, $12 = 0, $13 = 0, $stack22 = 0, $14 = 0, $tobool23 = 0, $15 = 0, $ci27 = 0, $16 = 0, $nregs = 0, $17 = 0, $cmp28 = 0, $call30 = 0, $call32 = 0, $call33 = 0, $tobool34 = 0, $call36 = 0, $call37 = 0, $inc = 0, $inc38 = 0, $p_0 = 0, $undef_0 = 0, $argc_addr_0 = 0, $n_0 = 0, $mid_addr_0 = 0, $call40 = 0, $mid41 = 0, $proc = 0, $18 = 0, $stack43 = 0, $19 = 0, $stbase45 = 0, $20 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $sub_ptr_div = 0, $stackidx46 = 0, $argc47 = 0, $target_class = 0, $21 = 0, $target_class48 = 0, $22 = 0, $23 = 0, $and = 0, $cmp49 = 0, $add = 0, $nregs51 = 0, $irep = 0, $24 = 0, $nregs53 = 0, $25 = 0, $conv = 0, $add54 = 0, $nregs55 = 0, $acc = 0, $26 = 0, $stack58 = 0, $27 = 0, $add_ptr59 = 0, $nregs62 = 0, $28 = 0, $29 = 0, $stack64 = 0, $30 = 0, $31 = 0, $32 = 0, $tobool65 = 0, $33 = 0, $stack68 = 0, $34 = 0, $arrayidx69 = 0, $35 = 0, $36 = 0, $37 = 0, $stack72 = 0, $38 = 0, $add_ptr73 = 0, $sub = 0, $cmp75 = 0, $39 = 0, $stack79 = 0, $40 = 0, $add_ptr80 = 0, $add83 = 0, $41 = 0, $stack85 = 0, $42 = 0, $arrayidx86 = 0, $43 = 0, $44 = 0, $45 = 0, $and88 = 0, $cmp89 = 0, $call93 = 0, $body94 = 0, $func = 0, $46 = 0, $47 = 0, $stbase97 = 0, $48 = 0, $ci99 = 0, $49 = 0, $stackidx100 = 0, $50 = 0, $add_ptr101 = 0, $stack103 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, label = 0, tempParam = 0, __stackBase__ = 0, setjmpLabel = 0, setjmpTable = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 92 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $blk;
  $blk = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$blk >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$blk + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$blk + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  setjmpLabel = 0;
  setjmpTable = STACKTOP;
  STACKTOP = STACKTOP + 168 | 0;
  HEAP32[setjmpTable >> 2] = 0;
  while (1) switch (label | 0) {
   case 2:
    $val = __stackBase__ | 0;
    $c_jmp = __stackBase__ + 12 | 0;
    $c16 = __stackBase__ + 52 | 0;
    $agg_tmp = __stackBase__ + 56 | 0;
    $tmp70 = __stackBase__ + 68 | 0;
    $tmp105 = __stackBase__ + 80 | 0;
    $jmp = $mrb | 0;
    $0 = HEAP32[$jmp >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    $c = $mrb + 8 | 0;
    $1 = HEAP32[$c >> 2] | 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 8;
      break;
    }
   case 3:
    $ci = $1 + 16 | 0;
    $2 = HEAP32[$ci >> 2] | 0;
    $arraydecay = $c_jmp | 0;
    $call = _saveSetjmp($arraydecay | 0, label, setjmpTable) | 0;
    label = 25;
    break;
   case 25:
    $cmp = ($call | 0) == 0;
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $3 = HEAP32[$c >> 2] | 0;
    $ci372 = $3 + 16 | 0;
    $4 = HEAP32[$ci372 >> 2] | 0;
    $cmp473 = ($2 | 0) == ($4 | 0);
    if ($cmp473) {
      label = 6;
      break;
    } else {
      $6 = $3;
      $5 = $4;
      label = 5;
      break;
    }
   case 5:
    $stbase = $6 + 8 | 0;
    $7 = HEAP32[$stbase >> 2] | 0;
    $stackidx = $5 + 8 | 0;
    $8 = HEAP32[$stackidx >> 2] | 0;
    $add_ptr = $7 + ($8 * 12 & -1) | 0;
    $stack = $6 + 4 | 0;
    HEAP32[$stack >> 2] = $add_ptr;
    invoke_vi(300, $mrb | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $9 = HEAP32[$c >> 2] | 0;
    $ci3 = $9 + 16 | 0;
    $10 = HEAP32[$ci3 >> 2] | 0;
    $cmp4 = ($2 | 0) == ($10 | 0);
    if ($cmp4) {
      label = 6;
      break;
    } else {
      $6 = $9;
      $5 = $10;
      label = 5;
      break;
    }
   case 6:
    HEAP32[$jmp >> 2] = 0;
    $exc = $mrb + 16 | 0;
    $11 = HEAP32[$exc >> 2] | 0;
    $12 = $11 | 0;
    invoke_vii(538, $val | 0, $12 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 24;
    break;
   case 7:
    $13 = $c_jmp;
    HEAP32[$jmp >> 2] = $13;
    invoke_viiiiiii(6, $val | 0, $mrb | 0, $self | 0, $mid | 0, $argc | 0, $argv | 0, $blk | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    HEAP32[$jmp >> 2] = 0;
    label = 24;
    break;
   case 8:
    $stack22 = $1 + 4 | 0;
    $14 = HEAP32[$stack22 >> 2] | 0;
    $tobool23 = ($14 | 0) == 0;
    if ($tobool23) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    invoke_vi(810, $mrb | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 10;
    break;
   case 10:
    $15 = HEAP32[$c >> 2] | 0;
    $ci27 = $15 + 16 | 0;
    $16 = HEAP32[$ci27 >> 2] | 0;
    $nregs = $16 + 12 | 0;
    $17 = HEAP32[$nregs >> 2] | 0;
    $cmp28 = ($argc | 0) < 0;
    if ($cmp28) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $call30 = invoke_iii(198, $mrb | 0, 109948) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    invoke_vii(438, $agg_tmp | 0, $argc | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    invoke_viiii(262, $mrb | 0, $call30 | 0, 106200, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 12;
    break;
   case 12:
    $call32 = invoke_iii(454, $mrb | 0, $self | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    HEAP32[$c16 >> 2] = $call32;
    $call33 = invoke_iiii(180, 0, $c16 | 0, $mid | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $tobool34 = ($call33 | 0) == 0;
    if ($tobool34) {
      label = 13;
      break;
    } else {
      $mid_addr_0 = $mid;
      $n_0 = $17;
      $argc_addr_0 = $argc;
      $undef_0 = 0;
      $p_0 = $call33;
      label = 14;
      break;
    }
   case 13:
    $call36 = invoke_iiii(100, $mrb | 0, 102816, 14) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $call37 = invoke_iiii(180, 0, $c16 | 0, $call36 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $inc = $17 + 1 | 0;
    $inc38 = $argc + 1 | 0;
    $mid_addr_0 = $call36;
    $n_0 = $inc;
    $argc_addr_0 = $inc38;
    $undef_0 = $mid;
    $p_0 = $call37;
    label = 14;
    break;
   case 14:
    $call40 = invoke_ii(808, $mrb | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $mid41 = $call40 | 0;
    HEAP16[$mid41 >> 1] = $mid_addr_0;
    $proc = $call40 + 4 | 0;
    HEAP32[$proc >> 2] = $p_0;
    $18 = HEAP32[$c >> 2] | 0;
    $stack43 = $18 + 4 | 0;
    $19 = HEAP32[$stack43 >> 2] | 0;
    $stbase45 = $18 + 8 | 0;
    $20 = HEAP32[$stbase45 >> 2] | 0;
    $sub_ptr_lhs_cast = $19;
    $sub_ptr_rhs_cast = $20;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $sub_ptr_div = ($sub_ptr_sub | 0) / 12 & -1;
    $stackidx46 = $call40 + 8 | 0;
    HEAP32[$stackidx46 >> 2] = $sub_ptr_div;
    $argc47 = $call40 + 16 | 0;
    HEAP32[$argc47 >> 2] = $argc_addr_0;
    $target_class = $p_0 + 16 | 0;
    $21 = HEAP32[$target_class >> 2] | 0;
    $target_class48 = $call40 + 28 | 0;
    HEAP32[$target_class48 >> 2] = $21;
    $22 = $p_0;
    $23 = HEAP32[$22 >> 2] | 0;
    $and = $23 & 262144;
    $cmp49 = ($and | 0) == 0;
    if ($cmp49) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $add = $argc_addr_0 + 2 | 0;
    $nregs51 = $call40 + 12 | 0;
    HEAP32[$nregs51 >> 2] = $add;
    label = 17;
    break;
   case 16:
    $irep = $p_0 + 12 | 0;
    $24 = HEAP32[$irep >> 2] | 0;
    $nregs53 = $24 + 6 | 0;
    $25 = HEAP16[$nregs53 >> 1] | 0;
    $conv = $25 & 65535;
    $add54 = $conv + $n_0 | 0;
    $nregs55 = $call40 + 12 | 0;
    HEAP32[$nregs55 >> 2] = $add54;
    label = 17;
    break;
   case 17:
    $acc = $call40 + 24 | 0;
    HEAP32[$acc >> 2] = -1;
    $26 = HEAP32[$c >> 2] | 0;
    $stack58 = $26 + 4 | 0;
    $27 = HEAP32[$stack58 >> 2] | 0;
    $add_ptr59 = $27 + ($n_0 * 12 & -1) | 0;
    HEAP32[$stack58 >> 2] = $add_ptr59;
    $nregs62 = $call40 + 12 | 0;
    $28 = HEAP32[$nregs62 >> 2] | 0;
    invoke_viii(642, $mrb | 0, $28 | 0, 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $29 = HEAP32[$c >> 2] | 0;
    $stack64 = $29 + 4 | 0;
    $30 = HEAP32[$stack64 >> 2] | 0;
    $31 = $30;
    $32 = $self;
    HEAP32[$31 >> 2] = HEAP32[$32 >> 2] | 0;
    HEAP32[$31 + 4 >> 2] = HEAP32[$32 + 4 >> 2] | 0;
    HEAP32[$31 + 8 >> 2] = HEAP32[$32 + 8 >> 2] | 0;
    $tobool65 = $undef_0 << 16 >> 16 == 0;
    if ($tobool65) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $33 = HEAP32[$c >> 2] | 0;
    $stack68 = $33 + 4 | 0;
    $34 = HEAP32[$stack68 >> 2] | 0;
    $arrayidx69 = $34 + 12 | 0;
    invoke_vii(338, $tmp70 | 0, $undef_0 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $35 = $arrayidx69;
    $36 = $tmp70;
    HEAP32[$35 >> 2] = HEAP32[$36 >> 2] | 0;
    HEAP32[$35 + 4 >> 2] = HEAP32[$36 + 4 >> 2] | 0;
    HEAP32[$35 + 8 >> 2] = HEAP32[$36 + 8 >> 2] | 0;
    $37 = HEAP32[$c >> 2] | 0;
    $stack72 = $37 + 4 | 0;
    $38 = HEAP32[$stack72 >> 2] | 0;
    $add_ptr73 = $38 + 24 | 0;
    $sub = $argc_addr_0 - 1 | 0;
    invoke_viii(216, $add_ptr73 | 0, $argv | 0, $sub | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 21;
    break;
   case 19:
    $cmp75 = ($argc_addr_0 | 0) > 0;
    if ($cmp75) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    $39 = HEAP32[$c >> 2] | 0;
    $stack79 = $39 + 4 | 0;
    $40 = HEAP32[$stack79 >> 2] | 0;
    $add_ptr80 = $40 + 12 | 0;
    invoke_viii(216, $add_ptr80 | 0, $argv | 0, $argc_addr_0 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 21;
    break;
   case 21:
    $add83 = $argc_addr_0 + 1 | 0;
    $41 = HEAP32[$c >> 2] | 0;
    $stack85 = $41 + 4 | 0;
    $42 = HEAP32[$stack85 >> 2] | 0;
    $arrayidx86 = $42 + ($add83 * 12 & -1) | 0;
    $43 = $arrayidx86;
    $44 = $blk;
    HEAP32[$43 >> 2] = HEAP32[$44 >> 2] | 0;
    HEAP32[$43 + 4 >> 2] = HEAP32[$44 + 4 >> 2] | 0;
    HEAP32[$43 + 8 >> 2] = HEAP32[$44 + 8 >> 2] | 0;
    $45 = HEAP32[$22 >> 2] | 0;
    $and88 = $45 & 262144;
    $cmp89 = ($and88 | 0) == 0;
    if ($cmp89) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $call93 = invoke_ii(38, $mrb | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $body94 = $p_0 + 12 | 0;
    $func = $body94;
    $46 = HEAP32[$func >> 2] | 0;
    invoke_viii($46 | 0, $val | 0, $mrb | 0, $self | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    invoke_vii(802, $mrb | 0, $call93 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $47 = HEAP32[$c >> 2] | 0;
    $stbase97 = $47 + 8 | 0;
    $48 = HEAP32[$stbase97 >> 2] | 0;
    $ci99 = $47 + 16 | 0;
    $49 = HEAP32[$ci99 >> 2] | 0;
    $stackidx100 = $49 + 8 | 0;
    $50 = HEAP32[$stackidx100 >> 2] | 0;
    $add_ptr101 = $48 + ($50 * 12 & -1) | 0;
    $stack103 = $47 + 4 | 0;
    HEAP32[$stack103 >> 2] = $add_ptr101;
    invoke_vi(300, $mrb | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 24;
    break;
   case 23:
    invoke_viiii(312, $tmp105 | 0, $mrb | 0, $p_0 | 0, $self | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $51 = $val;
    $52 = $tmp105;
    HEAP32[$51 >> 2] = HEAP32[$52 >> 2] | 0;
    HEAP32[$51 + 4 >> 2] = HEAP32[$52 + 4 >> 2] | 0;
    HEAP32[$51 + 8 >> 2] = HEAP32[$52 + 8 >> 2] | 0;
    label = 24;
    break;
   case 24:
    invoke_vii(370, $mrb | 0, $val | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $53 = $agg_result;
    $54 = $val;
    HEAP32[$53 >> 2] = HEAP32[$54 >> 2] | 0;
    HEAP32[$53 + 4 >> 2] = HEAP32[$54 + 4 >> 2] | 0;
    HEAP32[$53 + 8 >> 2] = HEAP32[$54 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
   case -1111:
    if ((setjmpLabel | 0) == 3) {
      $call = threwValue;
      label = 25;
    }
    __THREW__ = threwValue = 0;
    break;
  }
}
function _cipop($mrb) {
  $mrb = $mrb | 0;
  var $c1 = 0, $0 = 0, $ci = 0, $1 = 0, $env = 0, $2 = 0, $tobool = 0, $3 = 0, $4 = 0, $5 = 0, $mul = 0, $call = 0, $6 = 0, $cioff = 0, $stack = 0, $7 = 0, $8 = 0, $incdec_ptr = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $c1 = $mrb + 8 | 0;
    $0 = HEAP32[$c1 >> 2] | 0;
    $ci = $0 + 16 | 0;
    $1 = HEAP32[$ci >> 2] | 0;
    $env = $1 + 40 | 0;
    $2 = HEAP32[$env >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $3 = $2;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 >>> 11;
    $mul = $5 * 12 & -1;
    $call = _mrb_malloc($mrb, $mul) | 0;
    $6 = $call;
    $cioff = $2 + 20 | 0;
    HEAP32[$cioff >> 2] = -1;
    $stack = $2 + 12 | 0;
    $7 = HEAP32[$stack >> 2] | 0;
    _stack_copy($6, $7, $5);
    HEAP32[$stack >> 2] = $6;
    label = 4;
    break;
   case 4:
    $8 = HEAP32[$ci >> 2] | 0;
    $incdec_ptr = $8 - 44 | 0;
    HEAP32[$ci >> 2] = $incdec_ptr;
    return;
  }
}
function _stack_init($mrb) {
  $mrb = $mrb | 0;
  var $0 = 0, $call = 0, $stbase = 0, $call4 = 0, $cibase = 0, $6 = 0;
  $0 = HEAP32[$mrb + 8 >> 2] | 0;
  $call = _mrb_calloc($mrb, 128, 12) | 0;
  $stbase = $0 + 8 | 0;
  HEAP32[$stbase >> 2] = $call;
  HEAP32[$0 + 12 >> 2] = $call + 1536 | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$stbase >> 2] | 0;
  $call4 = _mrb_calloc($mrb, 32, 44) | 0;
  $cibase = $0 + 20 | 0;
  HEAP32[$cibase >> 2] = $call4;
  HEAP32[$0 + 24 >> 2] = $call4 + 1408 | 0;
  $6 = HEAP32[$cibase >> 2] | 0;
  HEAP32[$0 + 16 >> 2] = $6;
  HEAP32[$6 + 28 >> 2] = HEAP32[$mrb + 44 >> 2] | 0;
  return;
}
function _mrb_class($mrb, $v) {
  $mrb = $mrb | 0;
  $v = $v | 0;
  var $tt = 0, $0 = 0, $i = 0, $1 = 0, $tobool = 0, $false_class = 0, $nil_class = 0, $true_class = 0, $symbol_class = 0, $fixnum_class = 0, $float_class = 0, $p = 0, $2 = 0, $c = 0, $3 = 0, $retval_0_in = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $v + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    if (($0 | 0) == 0) {
      label = 3;
      break;
    } else if (($0 | 0) == 2) {
      label = 6;
      break;
    } else if (($0 | 0) == 4) {
      label = 7;
      break;
    } else if (($0 | 0) == 3) {
      label = 8;
      break;
    } else if (($0 | 0) == 6) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 3:
    $i = $v;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $false_class = $mrb + 84 | 0;
    $retval_0_in = $false_class;
    label = 11;
    break;
   case 5:
    $nil_class = $mrb + 88 | 0;
    $retval_0_in = $nil_class;
    label = 11;
    break;
   case 6:
    $true_class = $mrb + 80 | 0;
    $retval_0_in = $true_class;
    label = 11;
    break;
   case 7:
    $symbol_class = $mrb + 92 | 0;
    $retval_0_in = $symbol_class;
    label = 11;
    break;
   case 8:
    $fixnum_class = $mrb + 76 | 0;
    $retval_0_in = $fixnum_class;
    label = 11;
    break;
   case 9:
    $float_class = $mrb + 72 | 0;
    $retval_0_in = $float_class;
    label = 11;
    break;
   case 10:
    $p = $v;
    $2 = HEAP32[$p >> 2] | 0;
    $c = $2 + 4 | 0;
    $3 = $c;
    $retval_0_in = $3;
    label = 11;
    break;
   case 11:
    $retval_0 = HEAP32[$retval_0_in >> 2] | 0;
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _cipush($mrb) {
  $mrb = $mrb | 0;
  var $c1 = 0, $0 = 0, $ci2 = 0, $1 = 0, $eidx3 = 0, $2 = 0, $ridx4 = 0, $3 = 0, $add_ptr = 0, $ciend = 0, $4 = 0, $cmp = 0, $cibase = 0, $5 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $sub_ptr_div = 0, $6 = 0, $mul6 = 0, $call = 0, $7 = 0, $add_ptr9 = 0, $8 = 0, $mul12 = 0, $add_ptr13 = 0, $9 = 0, $incdec_ptr = 0, $nregs = 0, $eidx16 = 0, $ridx17 = 0, $env = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $c1 = $mrb + 8 | 0;
    $0 = HEAP32[$c1 >> 2] | 0;
    $ci2 = $0 + 16 | 0;
    $1 = HEAP32[$ci2 >> 2] | 0;
    $eidx3 = $1 + 36 | 0;
    $2 = HEAP32[$eidx3 >> 2] | 0;
    $ridx4 = $1 + 32 | 0;
    $3 = HEAP32[$ridx4 >> 2] | 0;
    $add_ptr = $1 + 44 | 0;
    $ciend = $0 + 24 | 0;
    $4 = HEAP32[$ciend >> 2] | 0;
    $cmp = ($add_ptr | 0) == ($4 | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $cibase = $0 + 20 | 0;
    $5 = HEAP32[$cibase >> 2] | 0;
    $sub_ptr_lhs_cast = $1;
    $sub_ptr_rhs_cast = $5;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $sub_ptr_div = ($sub_ptr_sub | 0) / 44 & -1;
    $6 = $5;
    $mul6 = $sub_ptr_sub << 1;
    $call = _mrb_realloc($mrb, $6, $mul6) | 0;
    $7 = $call;
    HEAP32[$cibase >> 2] = $7;
    $add_ptr9 = $7 + ($sub_ptr_div * 44 & -1) | 0;
    HEAP32[$ci2 >> 2] = $add_ptr9;
    $8 = HEAP32[$cibase >> 2] | 0;
    $mul12 = $sub_ptr_div << 1;
    $add_ptr13 = $8 + ($mul12 * 44 & -1) | 0;
    HEAP32[$ciend >> 2] = $add_ptr13;
    label = 4;
    break;
   case 4:
    $9 = HEAP32[$ci2 >> 2] | 0;
    $incdec_ptr = $9 + 44 | 0;
    HEAP32[$ci2 >> 2] = $incdec_ptr;
    $nregs = $9 + 56 | 0;
    HEAP32[$nregs >> 2] = 2;
    $eidx16 = $9 + 80 | 0;
    HEAP32[$eidx16 >> 2] = $2;
    $ridx17 = $9 + 76 | 0;
    HEAP32[$ridx17 >> 2] = $3;
    $env = $9 + 84 | 0;
    HEAP32[$env >> 2] = 0;
    return $incdec_ptr | 0;
  }
  return 0;
}
function _stack_extend($mrb, $room, $keep) {
  $mrb = $mrb | 0;
  $room = $room | 0;
  $keep = $keep | 0;
  var $c = 0, $0 = 0, $stack = 0, $1 = 0, $add_ptr = 0, $stend = 0, $2 = 0, $cmp = 0, $stbase = 0, $3 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $sub_ptr_div = 0, $sub_ptr_lhs_cast11 = 0, $sub_ptr_sub13 = 0, $sub_ptr_div14 = 0, $cmp15 = 0, $sub_ptr_div_keep = 0, $cmp17 = 0, $size_0_v = 0, $size_0 = 0, $4 = 0, $mul = 0, $call = 0, $5 = 0, $6 = 0, $stbase24 = 0, $7 = 0, $stbase26 = 0, $8 = 0, $add_ptr27 = 0, $stack29 = 0, $9 = 0, $stbase31 = 0, $10 = 0, $add_ptr32 = 0, $stend34 = 0, $11 = 0, $stbase36 = 0, $12 = 0, $cmp37 = 0, $call39 = 0, $keep_addr_1 = 0, $cmp42 = 0, $13 = 0, $stack45 = 0, $14 = 0, $arrayidx = 0, $sub = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $c = $mrb + 8 | 0;
    $0 = HEAP32[$c >> 2] | 0;
    $stack = $0 + 4 | 0;
    $1 = HEAP32[$stack >> 2] | 0;
    $add_ptr = $1 + ($room * 12 & -1) | 0;
    $stend = $0 + 12 | 0;
    $2 = HEAP32[$stend >> 2] | 0;
    $cmp = $add_ptr >>> 0 < $2 >>> 0;
    if ($cmp) {
      $keep_addr_1 = $keep;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $stbase = $0 + 8 | 0;
    $3 = HEAP32[$stbase >> 2] | 0;
    $sub_ptr_lhs_cast = $2;
    $sub_ptr_rhs_cast = $3;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $sub_ptr_div = ($sub_ptr_sub | 0) / 12 & -1;
    $sub_ptr_lhs_cast11 = $1;
    $sub_ptr_sub13 = $sub_ptr_lhs_cast11 - $sub_ptr_rhs_cast | 0;
    $sub_ptr_div14 = ($sub_ptr_sub13 | 0) / 12 & -1;
    $cmp15 = ($sub_ptr_div | 0) < ($keep | 0);
    $sub_ptr_div_keep = $cmp15 ? $sub_ptr_div : $keep;
    $cmp17 = ($sub_ptr_div | 0) < ($room | 0);
    $size_0_v = $cmp17 ? $room : 128;
    $size_0 = $size_0_v + $sub_ptr_div | 0;
    $4 = $3;
    $mul = $size_0 * 12 & -1;
    $call = _mrb_realloc($mrb, $4, $mul) | 0;
    $5 = $call;
    $6 = HEAP32[$c >> 2] | 0;
    $stbase24 = $6 + 8 | 0;
    HEAP32[$stbase24 >> 2] = $5;
    $7 = HEAP32[$c >> 2] | 0;
    $stbase26 = $7 + 8 | 0;
    $8 = HEAP32[$stbase26 >> 2] | 0;
    $add_ptr27 = $8 + ($sub_ptr_div14 * 12 & -1) | 0;
    $stack29 = $7 + 4 | 0;
    HEAP32[$stack29 >> 2] = $add_ptr27;
    $9 = HEAP32[$c >> 2] | 0;
    $stbase31 = $9 + 8 | 0;
    $10 = HEAP32[$stbase31 >> 2] | 0;
    $add_ptr32 = $10 + ($size_0 * 12 & -1) | 0;
    $stend34 = $9 + 12 | 0;
    HEAP32[$stend34 >> 2] = $add_ptr32;
    $11 = HEAP32[$c >> 2] | 0;
    $stbase36 = $11 + 8 | 0;
    $12 = HEAP32[$stbase36 >> 2] | 0;
    _envadjust($mrb, $3, $12);
    $cmp37 = ($size_0 | 0) > 262016;
    if ($cmp37) {
      label = 4;
      break;
    } else {
      $keep_addr_1 = $sub_ptr_div_keep;
      label = 5;
      break;
    }
   case 4:
    $call39 = _mrb_class_get($mrb, 93488) | 0;
    _mrb_raise($mrb, $call39, 108744);
    $keep_addr_1 = $sub_ptr_div_keep;
    label = 5;
    break;
   case 5:
    $cmp42 = ($keep_addr_1 | 0) < ($room | 0);
    if ($cmp42) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $13 = HEAP32[$c >> 2] | 0;
    $stack45 = $13 + 4 | 0;
    $14 = HEAP32[$stack45 >> 2] | 0;
    $arrayidx = $14 + ($keep_addr_1 * 12 & -1) | 0;
    $sub = $room - $keep_addr_1 | 0;
    _stack_clear($arrayidx, $sub);
    label = 7;
    break;
   case 7:
    return;
  }
}
function _mrb_symbol_value145($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  var $v_sroa_1_2__raw_idx = 0, $v_sroa_1_2_idx = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP16[$agg_result >> 1] = $i;
  $v_sroa_1_2__raw_idx = $agg_result + 2 | 0;
  $v_sroa_1_2_idx = __stackBase__ | 0;
  HEAP16[$v_sroa_1_2__raw_idx >> 1] = HEAP16[$v_sroa_1_2_idx >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 2 >> 1] = HEAP16[$v_sroa_1_2_idx + 2 >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 4 >> 1] = HEAP16[$v_sroa_1_2_idx + 4 >> 1] | 0;
  HEAP32[$agg_result + 8 >> 2] = 4;
  STACKTOP = __stackBase__;
  return;
}
function _stack_copy($dst, $src, $size) {
  $dst = $dst | 0;
  $src = $src | 0;
  $size = $size | 0;
  var $cmp1 = 0, $size_addr_04 = 0, $src_addr_03 = 0, $dst_addr_02 = 0, $dec = 0, $incdec_ptr = 0, $incdec_ptr1 = 0, $0 = 0, $1 = 0, $cmp = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp1 = ($size | 0) == 0;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      $dst_addr_02 = $dst;
      $src_addr_03 = $src;
      $size_addr_04 = $size;
      label = 3;
      break;
    }
   case 3:
    $dec = $size_addr_04 - 1 | 0;
    $incdec_ptr = $dst_addr_02 + 12 | 0;
    $incdec_ptr1 = $src_addr_03 + 12 | 0;
    $0 = $dst_addr_02;
    $1 = $src_addr_03;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    $cmp = ($dec | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      $dst_addr_02 = $incdec_ptr;
      $src_addr_03 = $incdec_ptr1;
      $size_addr_04 = $dec;
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _mrb_run($agg_result, $mrb, $proc, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $proc = $proc | 0;
  $self = $self | 0;
  var $c_jmp = 0, $tmp = 0, $tmp126 = 0, $tmp145 = 0, $tmp164 = 0, $tmp183 = 0, $tmp204 = 0, $tmp231 = 0, $c461 = 0, $recv = 0, $result = 0, $sym506 = 0, $tmp514 = 0, $recv639 = 0, $tmp679 = 0, $tmp712 = 0, $recv751 = 0, $c759 = 0, $agg_tmp = 0, $tmp786 = 0, $tmp844 = 0, $tmp929 = 0, $tmp942 = 0, $tmp961 = 0, $tmp1127 = 0, $tmp1158 = 0, $agg_tmp1205 = 0, $agg_tmp1208 = 0, $v = 0, $exc1368 = 0, $agg_tmp1370 = 0, $c1442 = 0, $recv1446 = 0, $sym1458 = 0, $tmp1466 = 0, $tmp1504 = 0, $tmp1697 = 0, $tmp2922 = 0, $agg_tmp2929 = 0, $v2954 = 0, $tmp2981 = 0, $tmp3016 = 0, $tmp3050 = 0, $tmp3065 = 0, $tmp3105 = 0, $hash = 0, $tmp3178 = 0, $tmp3185 = 0, $base = 0, $super3197 = 0, $tmp3216 = 0, $tmp3220 = 0, $base3231 = 0, $tmp3249 = 0, $tmp3253 = 0, $recv3264 = 0, $tmp3309 = 0, $tmp3363 = 0, $exc3373 = 0, $tmp3385 = 0, $tmp3401 = 0, $msg = 0, $tmp3444 = 0, $tmp3447 = 0, $irep1 = 0, $0 = 0, $iseq = 0, $1 = 0, $pool2 = 0, $2 = 0, $syms3 = 0, $3 = 0, $call = 0, $jmp = 0, $4 = 0, $arraydecay = 0, $call4 = 0, $cmp = 0, $5 = 0, $c = 0, $6 = 0, $stack = 0, $7 = 0, $tobool = 0, $nregs = 0, $8 = 0, $conv = 0, $9 = 0, $ci = 0, $10 = 0, $proc11 = 0, $11 = 0, $conv13 = 0, $add = 0, $12 = 0, $ci15 = 0, $13 = 0, $nregs16 = 0, $14 = 0, $stack18 = 0, $15 = 0, $16 = 0, $17 = 0, $incdec_ptr = 0, $18 = 0, $and20 = 0, $arrayidx21 = 0, $shr = 0, $arrayidx23 = 0, $shr24 = 0, $and25 = 0, $arrayidx26 = 0, $19 = 0, $20 = 0, $incdec_ptr27 = 0, $21 = 0, $and28 = 0, $arrayidx29 = 0, $shr30 = 0, $arrayidx32 = 0, $shr33 = 0, $and34 = 0, $arrayidx35 = 0, $22 = 0, $23 = 0, $incdec_ptr36 = 0, $24 = 0, $and37 = 0, $arrayidx38 = 0, $shr39 = 0, $tt = 0, $shr42 = 0, $and43 = 0, $sub = 0, $value = 0, $i47 = 0, $incdec_ptr48 = 0, $25 = 0, $and49 = 0, $arrayidx50 = 0, $shr52 = 0, $tt55 = 0, $shr56 = 0, $and57 = 0, $arrayidx58 = 0, $26 = 0, $value62 = 0, $sym = 0, $incdec_ptr64 = 0, $27 = 0, $and65 = 0, $arrayidx66 = 0, $shr67 = 0, $arrayidx69 = 0, $28 = 0, $29 = 0, $incdec_ptr71 = 0, $30 = 0, $and72 = 0, $arrayidx73 = 0, $shr75 = 0, $tt78 = 0, $value82 = 0, $i83 = 0, $incdec_ptr85 = 0, $31 = 0, $and86 = 0, $arrayidx87 = 0, $shr89 = 0, $tt92 = 0, $value96 = 0, $i97 = 0, $incdec_ptr99 = 0, $32 = 0, $and100 = 0, $arrayidx101 = 0, $shr102 = 0, $arrayidx104 = 0, $shr105 = 0, $and106 = 0, $arrayidx107 = 0, $33 = 0, $34 = 0, $incdec_ptr108 = 0, $35 = 0, $and109 = 0, $arrayidx110 = 0, $shr111 = 0, $and112 = 0, $arrayidx113 = 0, $36 = 0, $shr114 = 0, $arrayidx116 = 0, $incdec_ptr117 = 0, $37 = 0, $and118 = 0, $arrayidx119 = 0, $shr120 = 0, $arrayidx122 = 0, $38 = 0, $incdec_ptr127 = 0, $39 = 0, $and128 = 0, $arrayidx129 = 0, $incdec_ptr136 = 0, $40 = 0, $and137 = 0, $arrayidx138 = 0, $shr139 = 0, $arrayidx141 = 0, $shr142 = 0, $and143 = 0, $arrayidx144 = 0, $41 = 0, $42 = 0, $incdec_ptr146 = 0, $43 = 0, $and147 = 0, $arrayidx148 = 0, $shr149 = 0, $and150 = 0, $arrayidx151 = 0, $44 = 0, $shr152 = 0, $arrayidx154 = 0, $incdec_ptr155 = 0, $45 = 0, $and156 = 0, $arrayidx157 = 0, $shr158 = 0, $arrayidx160 = 0, $shr161 = 0, $and162 = 0, $arrayidx163 = 0, $46 = 0, $47 = 0, $incdec_ptr165 = 0, $48 = 0, $and166 = 0, $arrayidx167 = 0, $shr168 = 0, $and169 = 0, $arrayidx170 = 0, $49 = 0, $shr171 = 0, $arrayidx173 = 0, $incdec_ptr174 = 0, $50 = 0, $and175 = 0, $arrayidx176 = 0, $shr177 = 0, $arrayidx179 = 0, $shr180 = 0, $and181 = 0, $arrayidx182 = 0, $51 = 0, $52 = 0, $incdec_ptr184 = 0, $53 = 0, $and185 = 0, $arrayidx186 = 0, $shr187 = 0, $and188 = 0, $arrayidx189 = 0, $54 = 0, $shr190 = 0, $arrayidx192 = 0, $incdec_ptr193 = 0, $55 = 0, $and194 = 0, $arrayidx195 = 0, $shr197 = 0, $arrayidx199 = 0, $shr201 = 0, $and202 = 0, $arrayidx203 = 0, $56 = 0, $57 = 0, $incdec_ptr205 = 0, $58 = 0, $and206 = 0, $arrayidx207 = 0, $shr210 = 0, $add212 = 0, $arrayidx213 = 0, $shr214 = 0, $and215 = 0, $arrayidx216 = 0, $59 = 0, $arrayidx217 = 0, $incdec_ptr218 = 0, $60 = 0, $and219 = 0, $arrayidx220 = 0, $shr222 = 0, $add_ptr = 0, $shr225 = 0, $and226 = 0, $call228 = 0, $tobool229 = 0, $61 = 0, $shr234 = 0, $and235 = 0, $stack236 = 0, $62 = 0, $arrayidx237 = 0, $63 = 0, $64 = 0, $incdec_ptr239 = 0, $65 = 0, $and240 = 0, $arrayidx241 = 0, $shr244 = 0, $and245 = 0, $call248 = 0, $tobool249 = 0, $shr253 = 0, $add_ptr255 = 0, $shr258 = 0, $and259 = 0, $stack260 = 0, $66 = 0, $arrayidx261 = 0, $67 = 0, $68 = 0, $69 = 0, $incdec_ptr263 = 0, $70 = 0, $and264 = 0, $arrayidx265 = 0, $shr266 = 0, $and267 = 0, $sub268 = 0, $add_ptr269 = 0, $71 = 0, $and270 = 0, $arrayidx271 = 0, $shr272 = 0, $tt275 = 0, $72 = 0, $cmp276 = 0, $shr279 = 0, $and280 = 0, $sub281 = 0, $add_ptr282 = 0, $73 = 0, $and283 = 0, $arrayidx284 = 0, $incdec_ptr286 = 0, $74 = 0, $and287 = 0, $arrayidx288 = 0, $shr289 = 0, $tt292 = 0, $75 = 0, $cmp293 = 0, $shr296 = 0, $and297 = 0, $sub298 = 0, $add_ptr299 = 0, $76 = 0, $and300 = 0, $arrayidx301 = 0, $incdec_ptr303 = 0, $77 = 0, $and304 = 0, $arrayidx305 = 0, $78 = 0, $rsize = 0, $79 = 0, $ci308 = 0, $80 = 0, $ridx = 0, $81 = 0, $cmp309 = 0, $cmp314 = 0, $mul = 0, $storemerge1544 = 0, $82 = 0, $rescue = 0, $83 = 0, $84 = 0, $rsize325 = 0, $85 = 0, $mul326 = 0, $call327 = 0, $86 = 0, $87 = 0, $rescue329 = 0, $shr331 = 0, $and332 = 0, $sub333 = 0, $add_ptr334 = 0, $88 = 0, $ci336 = 0, $89 = 0, $ridx337 = 0, $90 = 0, $inc = 0, $91 = 0, $rescue339 = 0, $92 = 0, $arrayidx340 = 0, $incdec_ptr341 = 0, $93 = 0, $and342 = 0, $arrayidx343 = 0, $94 = 0, $95 = 0, $96 = 0, $bf_clear = 0, $shr345 = 0, $tt348 = 0, $97 = 0, $98 = 0, $value353 = 0, $p = 0, $incdec_ptr356 = 0, $99 = 0, $and357 = 0, $arrayidx358 = 0, $shr361 = 0, $tobool3631588 = 0, $a360_01589 = 0, $dec = 0, $100 = 0, $ci365 = 0, $101 = 0, $ridx366 = 0, $102 = 0, $dec367 = 0, $tobool363 = 0, $incdec_ptr368 = 0, $103 = 0, $and369 = 0, $arrayidx370 = 0, $shr371 = 0, $value374 = 0, $p375 = 0, $104 = 0, $105 = 0, $exc376 = 0, $idx379 = 0, $106 = 0, $shr380 = 0, $and381 = 0, $add382 = 0, $107 = 0, $arrayidx384 = 0, $108 = 0, $call385 = 0, $109 = 0, $esize = 0, $110 = 0, $ci388 = 0, $111 = 0, $eidx = 0, $112 = 0, $cmp389 = 0, $cmp394 = 0, $mul402 = 0, $storemerge = 0, $113 = 0, $ensure = 0, $114 = 0, $115 = 0, $esize406 = 0, $116 = 0, $mul407 = 0, $call408 = 0, $117 = 0, $118 = 0, $ensure410 = 0, $119 = 0, $ci413 = 0, $120 = 0, $eidx414 = 0, $121 = 0, $inc415 = 0, $122 = 0, $ensure417 = 0, $123 = 0, $arrayidx418 = 0, $incdec_ptr419 = 0, $124 = 0, $and420 = 0, $arrayidx421 = 0, $shr425 = 0, $cmp4271586 = 0, $n_01587 = 0, $125 = 0, $ci430 = 0, $126 = 0, $eidx431 = 0, $127 = 0, $dec432 = 0, $inc433 = 0, $cmp427 = 0, $incdec_ptr434 = 0, $128 = 0, $and435 = 0, $arrayidx436 = 0, $shr439 = 0, $tt443 = 0, $value445 = 0, $i446 = 0, $incdec_ptr448 = 0, $129 = 0, $and449 = 0, $arrayidx450 = 0, $i_0 = 0, $shr453 = 0, $shr457 = 0, $and458 = 0, $shr467 = 0, $and468 = 0, $arrayidx469 = 0, $130 = 0, $arrayidx470 = 0, $131 = 0, $and471 = 0, $cmp472 = 0, $cmp475 = 0, $add479 = 0, $tt481 = 0, $value484 = 0, $i485 = 0, $add489 = 0, $add490 = 0, $tt492 = 0, $value496 = 0, $i497 = 0, $call501 = 0, $call502 = 0, $tobool503 = 0, $call507 = 0, $call508 = 0, $cmp509 = 0, $add512 = 0, $arrayidx513 = 0, $arrayidx470_sum = 0, $add_ptr517 = 0, $arrayidx470_sum1526 = 0, $add_ptr519 = 0, $inc520 = 0, $add521 = 0, $arrayidx522 = 0, $132 = 0, $mid_0 = 0, $m_0 = 0, $n456_0 = 0, $call525 = 0, $mid526 = 0, $proc527 = 0, $133 = 0, $stack529 = 0, $134 = 0, $stbase = 0, $135 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $sub_ptr_div = 0, $stackidx = 0, $cmp531 = 0, $argc = 0, $_n456_0 = 0, $136 = 0, $137 = 0, $138 = 0, $bf_clear537 = 0, $cmp538 = 0, $c541 = 0, $139 = 0, $target_class = 0, $target_class543 = 0, $add_ptr545 = 0, $pc546 = 0, $acc = 0, $140 = 0, $stack548 = 0, $141 = 0, $add_ptr549 = 0, $142 = 0, $143 = 0, $and551 = 0, $cmp552 = 0, $nregs558 = 0, $add560 = 0, $nregs561 = 0, $body563 = 0, $func = 0, $144 = 0, $145 = 0, $stack566 = 0, $146 = 0, $147 = 0, $148 = 0, $tobool569 = 0, $149 = 0, $ci573 = 0, $150 = 0, $target_class574 = 0, $151 = 0, $tobool575 = 0, $proc578 = 0, $152 = 0, $153 = 0, $154 = 0, $and580 = 0, $cmp581 = 0, $irep587 = 0, $155 = 0, $pool588 = 0, $156 = 0, $syms589 = 0, $157 = 0, $syms_0 = 0, $pool_0 = 0, $irep_0 = 0, $158 = 0, $stbase593 = 0, $159 = 0, $stackidx594 = 0, $160 = 0, $add_ptr595 = 0, $stack597 = 0, $pc598 = 0, $161 = 0, $162 = 0, $and599 = 0, $arrayidx600 = 0, $163 = 0, $ci603 = 0, $164 = 0, $proc604 = 0, $irep606 = 0, $165 = 0, $pool607 = 0, $166 = 0, $syms608 = 0, $167 = 0, $nregs609 = 0, $168 = 0, $conv610 = 0, $nregs611 = 0, $169 = 0, $cmp613 = 0, $170 = 0, $conv617 = 0, $cmp618 = 0, $_conv617 = 0, $add626 = 0, $171 = 0, $stack629 = 0, $172 = 0, $iseq630 = 0, $173 = 0, $174 = 0, $and631 = 0, $arrayidx632 = 0, $incdec_ptr633 = 0, $175 = 0, $and634 = 0, $arrayidx635 = 0, $176 = 0, $stack641 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $ci648 = 0, $182 = 0, $target_class649 = 0, $183 = 0, $184 = 0, $target_class650 = 0, $proc651 = 0, $env = 0, $185 = 0, $186 = 0, $tobool652 = 0, $mid655 = 0, $187 = 0, $tobool656 = 0, $mid660 = 0, $188 = 0, $stack663 = 0, $189 = 0, $tobool664 = 0, $190 = 0, $stack667 = 0, $191 = 0, $192 = 0, $193 = 0, $and673 = 0, $cmp674 = 0, $body705 = 0, $func678 = 0, $194 = 0, $195 = 0, $tobool681 = 0, $196 = 0, $ci685 = 0, $197 = 0, $stbase687 = 0, $198 = 0, $stackidx688 = 0, $199 = 0, $add_ptr689 = 0, $stack691 = 0, $acc692 = 0, $200 = 0, $add_ptr689_sum = 0, $arrayidx693 = 0, $201 = 0, $pc694 = 0, $202 = 0, $203 = 0, $ci696 = 0, $204 = 0, $proc697 = 0, $205 = 0, $irep699 = 0, $206 = 0, $pool700 = 0, $207 = 0, $syms701 = 0, $208 = 0, $209 = 0, $and702 = 0, $arrayidx703 = 0, $irep706 = 0, $210 = 0, $tobool707 = 0, $211 = 0, $stack710 = 0, $212 = 0, $213 = 0, $214 = 0, $pool714 = 0, $215 = 0, $syms715 = 0, $216 = 0, $nregs716 = 0, $217 = 0, $conv717 = 0, $nregs718 = 0, $argc719 = 0, $218 = 0, $cmp720 = 0, $219 = 0, $conv724 = 0, $cmp725 = 0, $_conv724 = 0, $add737 = 0, $220 = 0, $stack740 = 0, $221 = 0, $222 = 0, $stack743 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $iseq747 = 0, $227 = 0, $228 = 0, $and748 = 0, $arrayidx749 = 0, $229 = 0, $ci755 = 0, $230 = 0, $mid762 = 0, $231 = 0, $shr765 = 0, $shr769 = 0, $and770 = 0, $232 = 0, $233 = 0, $ci773 = 0, $234 = 0, $target_class774 = 0, $235 = 0, $super = 0, $236 = 0, $call775 = 0, $tobool776 = 0, $call778 = 0, $call779 = 0, $cmp780 = 0, $add783 = 0, $arrayidx784 = 0, $237 = 0, $add_ptr788_sum = 0, $add_ptr789 = 0, $add_ptr788_sum1543 = 0, $add_ptr791 = 0, $inc792 = 0, $add794 = 0, $tt796 = 0, $238 = 0, $value800 = 0, $sym801 = 0, $n768_0 = 0, $mid761_0 = 0, $m757_0 = 0, $call805 = 0, $mid806 = 0, $proc807 = 0, $239 = 0, $stack809 = 0, $240 = 0, $stbase811 = 0, $241 = 0, $sub_ptr_lhs_cast812 = 0, $sub_ptr_rhs_cast813 = 0, $sub_ptr_sub814 = 0, $sub_ptr_div815 = 0, $stackidx816 = 0, $cmp817 = 0, $argc820 = 0, $_n768_0 = 0, $target_class824 = 0, $242 = 0, $target_class825 = 0, $add_ptr826 = 0, $pc827 = 0, $243 = 0, $stack829 = 0, $244 = 0, $add_ptr830 = 0, $245 = 0, $stack832 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $and835 = 0, $cmp836 = 0, $250 = 0, $stack840 = 0, $251 = 0, $body842 = 0, $func843 = 0, $252 = 0, $253 = 0, $254 = 0, $tobool846 = 0, $255 = 0, $stbase850 = 0, $256 = 0, $ci852 = 0, $257 = 0, $stackidx853 = 0, $258 = 0, $add_ptr854 = 0, $stack856 = 0, $259 = 0, $and858 = 0, $arrayidx859 = 0, $acc861 = 0, $irep864 = 0, $260 = 0, $pool865 = 0, $261 = 0, $syms866 = 0, $262 = 0, $nregs867 = 0, $263 = 0, $conv868 = 0, $nregs869 = 0, $264 = 0, $conv874 = 0, $cmp875 = 0, $_conv874 = 0, $265 = 0, $add887 = 0, $266 = 0, $stack890 = 0, $267 = 0, $iseq891 = 0, $268 = 0, $269 = 0, $and892 = 0, $arrayidx893 = 0, $shr896 = 0, $shr899 = 0, $shr9021538 = 0, $and903 = 0, $shr9051539 = 0, $and906 = 0, $shr9081540 = 0, $and909 = 0, $and912 = 0, $cmp915 = 0, $sub922 = 0, $call923 = 0, $tobool924 = 0, $call928 = 0, $exc927_sroa_0_0__cast = 0, $exc927_sroa_0_0_copyload = 0, $270 = 0, $exc932 = 0, $stack934 = 0, $271 = 0, $regs_3_pn1541 = 0, $stack914_0 = 0, $cmp937 = 0, $arrayidx940 = 0, $add941 = 0, $272 = 0, $stack914_0_sum = 0, $tt948 = 0, $273 = 0, $cmp949 = 0, $value954 = 0, $p955 = 0, $274 = 0, $ptr = 0, $275 = 0, $276 = 0, $len956 = 0, $277 = 0, $278 = 0, $len_0 = 0, $pp_0 = 0, $arrayidx958 = 0, $add959 = 0, $add960 = 0, $279 = 0, $p964 = 0, $280 = 0, $ptr965 = 0, $281 = 0, $282 = 0, $cmp966 = 0, $283 = 0, $add_ptr970 = 0, $cmp972 = 0, $284 = 0, $add_ptr976_sum = 0, $add_ptr977 = 0, $arrayidx947_sum = 0, $add_ptr979 = 0, $len983 = 0, $285 = 0, $add985 = 0, $arrayidx986 = 0, $add987 = 0, $add988 = 0, $stack914_0_sum1542 = 0, $arrayidx989 = 0, $286 = 0, $287 = 0, $incdec_ptr990 = 0, $288 = 0, $and991 = 0, $arrayidx992 = 0, $shr994 = 0, $shr998 = 0, $and999 = 0, $shr1001 = 0, $and1002 = 0, $shr1005 = 0, $and1006 = 0, $and1010 = 0, $289 = 0, $ci1014 = 0, $290 = 0, $argc1015 = 0, $291 = 0, $add_ptr1017 = 0, $add1021 = 0, $add1022 = 0, $add1023 = 0, $cmp1025 = 0, $_op = 0, $add_ptr1017_sum = 0, $arrayidx1031 = 0, $p1039 = 0, $292 = 0, $ptr1040 = 0, $293 = 0, $294 = 0, $len1041 = 0, $295 = 0, $296 = 0, $argv_0 = 0, $argc1012_0 = 0, $297 = 0, $ci1045 = 0, $298 = 0, $proc1046 = 0, $299 = 0, $tobool1047 = 0, $300 = 0, $301 = 0, $and1052 = 0, $cmp1053 = 0, $cmp1056 = 0, $add1059 = 0, $cmp1060 = 0, $cmp1062 = 0, $cmp1065 = 0, $or_cond = 0, $cmp1072 = 0, $cmp1075 = 0, $or_cond1545 = 0, $tt1079 = 0, $302 = 0, $cmp1080 = 0, $p1085 = 0, $303 = 0, $len1086 = 0, $304 = 0, $305 = 0, $ptr1090 = 0, $306 = 0, $307 = 0, $argv_1 = 0, $argc1012_1 = 0, $308 = 0, $ci1094 = 0, $309 = 0, $argc1095 = 0, $cmp1096 = 0, $add1099 = 0, $arrayidx1100 = 0, $310 = 0, $311 = 0, $cmp1101 = 0, $sub1105 = 0, $tobool1107 = 0, $sub1110 = 0, $cmp1111 = 0, $sub1114 = 0, $and1010_sub1114 = 0, $add1117 = 0, $arrayidx1118 = 0, $sub1119 = 0, $arrayidx1120 = 0, $tobool1122 = 0, $add1125 = 0, $arrayidx1126 = 0, $312 = 0, $cmp1129 = 0, $incdec_ptr1132 = 0, $sub1134 = 0, $sub1135 = 0, $add1136 = 0, $add_ptr1137 = 0, $cmp1140 = 0, $add1143 = 0, $arrayidx1144 = 0, $313 = 0, $314 = 0, $tobool1148 = 0, $add1151 = 0, $arrayidx1152 = 0, $sum1651 = 0, $sum1652 = 0, $sub1155 = 0, $add_ptr1156_sum = 0, $add_ptr1157 = 0, $315 = 0, $tobool1160 = 0, $sub1162 = 0, $cmp1163 = 0, $add1168 = 0, $arrayidx1169 = 0, $arrayidx1171 = 0, $add1177 = 0, $arrayidx1178 = 0, $316 = 0, $317 = 0, $add1180 = 0, $add_ptr1181 = 0, $pc_0 = 0, $318 = 0, $and1183 = 0, $arrayidx1184 = 0, $incdec_ptr1185 = 0, $319 = 0, $and1186 = 0, $arrayidx1187 = 0, $incdec_ptr1188 = 0, $320 = 0, $and1189 = 0, $arrayidx1190 = 0, $irep_1 = 0, $proc_addr_0 = 0, $shr1191 = 0, $or = 0, $i_1 = 0, $irep_2 = 0, $proc_addr_1 = 0, $exc1194 = 0, $321 = 0, $tobool1195 = 0, $regs_0 = 0, $pc_1 = 0, $irep_3 = 0, $proc_addr_2 = 0, $c1201 = 0, $322 = 0, $ci1202 = 0, $323 = 0, $exc1203 = 0, $324 = 0, $call1204 = 0, $325 = 0, $326 = 0, $call1207 = 0, $327 = 0, $cibase = 0, $328 = 0, $sub_ptr_lhs_cast1210 = 0, $sub_ptr_rhs_cast1211 = 0, $sub_ptr_sub1212 = 0, $sub_ptr_div1213 = 0, $eidx1214 = 0, $329 = 0, $330 = 0, $cibase1216 = 0, $331 = 0, $cmp1217 = 0, $eidx1228 = 0, $332 = 0, $cmp12291560 = 0, $ridx1220 = 0, $333 = 0, $cmp1221 = 0, $eidx1200_0_lcssa = 0, $tobool1256 = 0, $eidx1200_01561 = 0, $dec1232 = 0, $334 = 0, $cmp1229 = 0, $eidx1200_1 = 0, $ci1198_0 = 0, $ridx1236 = 0, $335 = 0, $ridx1238 = 0, $336 = 0, $cmp1239 = 0, $337 = 0, $ci1243 = 0, $338 = 0, $stbase1245 = 0, $339 = 0, $stackidx1247 = 0, $340 = 0, $add_ptr1248 = 0, $stack1250 = 0, $acc1252 = 0, $341 = 0, $cmp1253 = 0, $or_cond1546 = 0, $eidx1263 = 0, $342 = 0, $cmp12641555 = 0, $arraydecay1260 = 0, $eidx1200_21556 = 0, $dec1267 = 0, $343 = 0, $cmp1264 = 0, $eidx1200_2_lcssa = 0, $344 = 0, $cibase1270 = 0, $345 = 0, $cmp1271 = 0, $ridx1274 = 0, $346 = 0, $cmp1275 = 0, $stbase1279 = 0, $347 = 0, $stack1281 = 0, $ci1198_1 = 0, $proc1285 = 0, $348 = 0, $irep1287 = 0, $349 = 0, $pool1288 = 0, $350 = 0, $syms1289 = 0, $351 = 0, $352 = 0, $stbase1291 = 0, $353 = 0, $stackidx1293 = 0, $354 = 0, $add_ptr1294 = 0, $stack1296 = 0, $ridx1297 = 0, $355 = 0, $dec1298 = 0, $356 = 0, $rescue1300 = 0, $357 = 0, $arrayidx1301 = 0, $358 = 0, $c1305 = 0, $359 = 0, $ci1306 = 0, $360 = 0, $eidx1313 = 0, $361 = 0, $shr1315 = 0, $arrayidx1317 = 0, $362 = 0, $363 = 0, $shr1318 = 0, $and1319 = 0, $env1320 = 0, $364 = 0, $tobool1321 = 0, $365 = 0, $366 = 0, $and1324 = 0, $cmp1325 = 0, $call1330 = 0, $cioff = 0, $367 = 0, $cmp1331 = 0, $368 = 0, $cibase1336 = 0, $369 = 0, $add_ptr1338 = 0, $cmp1341 = 0, $ci1346 = 0, $370 = 0, $cibase1350 = 0, $371 = 0, $cmp1351 = 0, $prev = 0, $372 = 0, $tobool1355 = 0, $ci1360 = 0, $373 = 0, $cibase1363 = 0, $374 = 0, $cmp1364 = 0, $call1369 = 0, $p1372 = 0, $375 = 0, $376 = 0, $status = 0, $377 = 0, $prev1377 = 0, $378 = 0, $379 = 0, $ci1381 = 0, $380 = 0, $env1383 = 0, $381 = 0, $cioff1384 = 0, $382 = 0, $cmp1385 = 0, $383 = 0, $cibase1390 = 0, $384 = 0, $add_ptr1393_sum = 0, $add_ptr1394 = 0, $ci1396 = 0, $ci1304_0_ph = 0, $385 = 0, $ci13991563 = 0, $386 = 0, $eidx14011564 = 0, $387 = 0, $cmp14021565 = 0, $eidx1310_01566 = 0, $dec1405 = 0, $388 = 0, $ci1399 = 0, $389 = 0, $eidx1401 = 0, $390 = 0, $cmp1402 = 0, $acc1407 = 0, $391 = 0, $pc1408 = 0, $392 = 0, $393 = 0, $stbase1410 = 0, $394 = 0, $stackidx1411 = 0, $395 = 0, $add_ptr1412 = 0, $stack1414 = 0, $cmp1415 = 0, $396 = 0, $397 = 0, $ci1421 = 0, $398 = 0, $proc1422 = 0, $399 = 0, $irep1424 = 0, $400 = 0, $pool1425 = 0, $401 = 0, $syms1426 = 0, $402 = 0, $add_ptr1412_sum = 0, $arrayidx1427 = 0, $403 = 0, $regs_1 = 0, $syms_1 = 0, $pool_1 = 0, $pc_2 = 0, $irep_4 = 0, $proc_addr_3 = 0, $i_2_ph_in = 0, $regs_3_ph = 0, $syms_2_ph = 0, $pool_2_ph = 0, $pc_3_ph = 0, $irep_6_ph = 0, $proc_addr_4_ph = 0, $i_2_ph = 0, $and1429_pn = 0, $indirect_goto_dest_in_ph = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $c306 = 0, $exc = 0, $c364 = 0, $irep383 = 0, $c386 = 0, $c429 = 0, $411 = 0, $412 = 0, $c528 = 0, $413 = 0, $exc568 = 0, $c640 = 0, $414 = 0, $p646 = 0, $415 = 0, $exc680 = 0, $c754 = 0, $416 = 0, $417 = 0, $exc845 = 0, $418 = 0, $419 = 0, $c1013 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $c1477 = 0, $424 = 0, $425 = 0, $426 = 0, $tt2958 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $irep3157 = 0, $433 = 0, $434 = 0, $object_class = 0, $435 = 0, $436 = 0, $437 = 0, $tt3205 = 0, $i3210 = 0, $c3213 = 0, $438 = 0, $439 = 0, $440 = 0, $tt3238 = 0, $i3243 = 0, $c3246 = 0, $441 = 0, $442 = 0, $443 = 0, $c3273 = 0, $p3284 = 0, $irep3293 = 0, $444 = 0, $exc3310 = 0, $445 = 0, $c3367 = 0, $446 = 0, $shr1433 = 0, $shr1437 = 0, $and1438 = 0, $shr1449 = 0, $and1450 = 0, $arrayidx1451 = 0, $447 = 0, $arrayidx1452 = 0, $448 = 0, $call1453 = 0, $call1454 = 0, $tobool1455 = 0, $call1459 = 0, $call1460 = 0, $cmp1461 = 0, $add1464 = 0, $arrayidx1465 = 0, $arrayidx1452_sum = 0, $add_ptr1469 = 0, $arrayidx1452_sum1537 = 0, $add_ptr1471 = 0, $inc1472 = 0, $add1473 = 0, $arrayidx1474 = 0, $449 = 0, $mid1448_0 = 0, $m1440_0 = 0, $n1436_0 = 0, $450 = 0, $ci1478 = 0, $451 = 0, $mid1479 = 0, $target_class1480 = 0, $452 = 0, $target_class1481 = 0, $cmp1482 = 0, $argc1485 = 0, $_n1436_0 = 0, $453 = 0, $stack1490 = 0, $454 = 0, $add1493 = 0, $455 = 0, $456 = 0, $and1495 = 0, $cmp1496 = 0, $457 = 0, $stack1500 = 0, $458 = 0, $body1502 = 0, $func1503 = 0, $459 = 0, $460 = 0, $461 = 0, $irep1507 = 0, $462 = 0, $pool1508 = 0, $463 = 0, $syms1509 = 0, $464 = 0, $465 = 0, $cmp1511 = 0, $nregs1514 = 0, $466 = 0, $conv1515 = 0, $cmp1516 = 0, $_conv1515 = 0, $add1528 = 0, $467 = 0, $stack1531 = 0, $468 = 0, $iseq1532 = 0, $469 = 0, $470 = 0, $and1534 = 0, $arrayidx1535 = 0, $shr1538 = 0, $shr1542 = 0, $shr15461534 = 0, $and1547 = 0, $shr15501535 = 0, $and1551 = 0, $shr15541536 = 0, $and1555 = 0, $and1559 = 0, $cmp1562 = 0, $sub1569 = 0, $call1570 = 0, $tobool1571 = 0, $stack1574 = 0, $471 = 0, $regs_3_pn = 0, $arrayidx1577 = 0, $add1578 = 0, $add1579 = 0, $stack1561_0_sum = 0, $arrayidx1580 = 0, $472 = 0, $473 = 0, $incdec_ptr1581 = 0, $474 = 0, $and1582 = 0, $arrayidx1583 = 0, $shr1586 = 0, $arrayidx1588 = 0, $tt1589 = 0, $475 = 0, $conv1591 = 0, $shl1592 = 0, $add1593 = 0, $arrayidx1594 = 0, $tt1595 = 0, $476 = 0, $and1598 = 0, $or1599 = 0, $i1609 = 0, $477 = 0, $arrayidx1588_sum = 0, $value1611 = 0, $i1612 = 0, $478 = 0, $add1613 = 0, $_lobit1531 = 0, $add1613_lobit = 0, $cmp1618 = 0, $_lobit15311533 = 0, $cmp1625 = 0, $or_cond1547 = 0, $conv1631 = 0.0, $conv1632 = 0.0, $add1633 = 0.0, $f = 0, $i1647 = 0, $479 = 0, $f1653 = 0, $480 = 0.0, $conv1657 = 0.0, $add1658 = 0.0, $f1661 = 0, $f1667 = 0, $481 = 0.0, $i1671 = 0, $482 = 0, $conv1672 = 0.0, $add1673 = 0.0, $f1682 = 0, $483 = 0.0, $f1686 = 0, $484 = 0.0, $add1687 = 0.0, $485 = 0, $incdec_ptr1700 = 0, $486 = 0, $and1701 = 0, $arrayidx1702 = 0, $shr1705 = 0, $arrayidx1707 = 0, $tt1708 = 0, $487 = 0, $conv1710 = 0, $shl1711 = 0, $add1712 = 0, $arrayidx1713 = 0, $tt1714 = 0, $488 = 0, $and1717 = 0, $or1718 = 0, $i1728 = 0, $489 = 0, $i1732 = 0, $490 = 0, $sub1733 = 0, $_lobit15271529 = 0, $cmp1739 = 0, $_lobit1527 = 0, $sub1733_lobit = 0, $cmp1746 = 0, $conv1752 = 0.0, $conv1753 = 0.0, $sub1754 = 0.0, $f1757 = 0, $i1772 = 0, $491 = 0, $f1778 = 0, $492 = 0.0, $conv1782 = 0.0, $sub1783 = 0.0, $f1786 = 0, $f1792 = 0, $493 = 0.0, $i1796 = 0, $494 = 0, $conv1797 = 0.0, $sub1798 = 0.0, $f1807 = 0, $495 = 0.0, $f1811 = 0, $496 = 0.0, $sub1812 = 0.0, $incdec_ptr1819 = 0, $497 = 0, $and1820 = 0, $arrayidx1821 = 0, $shr1824 = 0, $arrayidx1826 = 0, $tt1827 = 0, $498 = 0, $conv1829 = 0, $shl1830 = 0, $add1831 = 0, $arrayidx1832 = 0, $tt1833 = 0, $499 = 0, $and1836 = 0, $or1837 = 0, $i1847 = 0, $500 = 0, $i1851 = 0, $501 = 0, $mul1852 = 0, $i1883 = 0, $502 = 0, $f1889 = 0, $503 = 0.0, $conv1893 = 0.0, $mul1894 = 0.0, $f1897 = 0, $f1903 = 0, $504 = 0.0, $i1907 = 0, $505 = 0, $conv1908 = 0.0, $mul1909 = 0.0, $f1918 = 0, $506 = 0.0, $f1922 = 0, $507 = 0.0, $mul1923 = 0.0, $incdec_ptr1930 = 0, $508 = 0, $and1931 = 0, $arrayidx1932 = 0, $shr1935 = 0, $arrayidx1937 = 0, $tt1938 = 0, $509 = 0, $conv1940 = 0, $shl1941 = 0, $add1942 = 0, $arrayidx1943 = 0, $tt1944 = 0, $510 = 0, $and1947 = 0, $or1948 = 0, $i1954 = 0, $511 = 0, $i1960 = 0, $512 = 0, $conv1964 = 0.0, $conv1965 = 0.0, $div1966 = 0.0, $f1969 = 0, $i1976 = 0, $513 = 0, $f1982 = 0, $514 = 0.0, $conv1986 = 0.0, $div1987 = 0.0, $f1990 = 0, $f1996 = 0, $515 = 0.0, $i2000 = 0, $516 = 0, $conv2001 = 0.0, $div2002 = 0.0, $f2011 = 0, $517 = 0.0, $f2015 = 0, $518 = 0.0, $div2016 = 0.0, $incdec_ptr2023 = 0, $519 = 0, $and2024 = 0, $arrayidx2025 = 0, $shr2028 = 0, $arrayidx2030 = 0, $tt2031 = 0, $520 = 0, $i2037 = 0, $521 = 0, $shr2040 = 0, $and2041 = 0, $add2044 = 0, $_lobit1530 = 0, $cmp2050 = 0, $add2044_lobit = 0, $cmp2057 = 0, $conv2063 = 0.0, $conv2064 = 0.0, $add2065 = 0.0, $f2068 = 0, $shr2075 = 0, $and2076 = 0, $conv2077 = 0.0, $f2080 = 0, $522 = 0.0, $add2081 = 0.0, $add2084 = 0, $tt2086 = 0, $shr2087 = 0, $and2088 = 0, $value2091 = 0, $i2092 = 0, $shl2095 = 0, $and2098 = 0, $or2096 = 0, $or2102 = 0, $incdec_ptr2104 = 0, $523 = 0, $and2105 = 0, $arrayidx2106 = 0, $shr2109 = 0, $add_ptr2113 = 0, $tt2115 = 0, $524 = 0, $i2121 = 0, $525 = 0, $shr2124 = 0, $and2125 = 0, $sub2128 = 0, $_lobit = 0, $sub2128_lobit = 0, $cmp2133 = 0, $cmp2129 = 0, $or_cond1548 = 0, $conv2147 = 0.0, $conv2148 = 0.0, $sub2149 = 0.0, $f2152 = 0, $shr2160 = 0, $and2161 = 0, $conv2162 = 0.0, $f2165 = 0, $526 = 0.0, $sub2166 = 0.0, $add_ptr2113_sum = 0, $tt2170 = 0, $shr2171 = 0, $and2172 = 0, $value2174 = 0, $i2175 = 0, $shl2178 = 0, $and2181 = 0, $or2179 = 0, $or2185 = 0, $incdec_ptr2187 = 0, $527 = 0, $and2188 = 0, $arrayidx2189 = 0, $shr2192 = 0, $arrayidx2194 = 0, $add2195 = 0, $arrayidx2196 = 0, $call2197 = 0, $tobool2198 = 0, $tt2214 = 0, $i2205 = 0, $528 = 0, $conv2216 = 0, $shl2217 = 0, $tt2220 = 0, $529 = 0, $and2223 = 0, $or2224 = 0, $i2229 = 0, $530 = 0, $i2233 = 0, $531 = 0, $cmp2234 = 0, $i2258 = 0, $532 = 0, $conv2259 = 0.0, $f2263 = 0, $533 = 0.0, $cmp2264 = 0, $f2288 = 0, $534 = 0.0, $i2292 = 0, $535 = 0, $conv2293 = 0.0, $cmp2294 = 0, $i2302 = 0, $i2310 = 0, $f2318 = 0, $536 = 0.0, $f2322 = 0, $537 = 0.0, $cmp2323 = 0, $i2331 = 0, $i2339 = 0, $incdec_ptr2347 = 0, $538 = 0, $and2348 = 0, $arrayidx2349 = 0, $shr2353 = 0, $arrayidx2355 = 0, $tt2356 = 0, $539 = 0, $conv2358 = 0, $shl2359 = 0, $add2360 = 0, $arrayidx2361 = 0, $tt2362 = 0, $540 = 0, $and2365 = 0, $or2366 = 0, $i2371 = 0, $541 = 0, $i2375 = 0, $542 = 0, $cmp2376 = 0, $i2400 = 0, $543 = 0, $conv2401 = 0.0, $f2405 = 0, $544 = 0.0, $cmp2406 = 0, $f2430 = 0, $545 = 0.0, $i2434 = 0, $546 = 0, $conv2435 = 0.0, $cmp2436 = 0, $i2444 = 0, $i2452 = 0, $f2460 = 0, $547 = 0.0, $f2464 = 0, $548 = 0.0, $cmp2465 = 0, $i2473 = 0, $i2481 = 0, $incdec_ptr2488 = 0, $549 = 0, $and2489 = 0, $arrayidx2490 = 0, $shr2494 = 0, $arrayidx2496 = 0, $tt2497 = 0, $550 = 0, $conv2499 = 0, $shl2500 = 0, $add2501 = 0, $arrayidx2502 = 0, $tt2503 = 0, $551 = 0, $and2506 = 0, $or2507 = 0, $i2512 = 0, $552 = 0, $i2516 = 0, $553 = 0, $cmp2517 = 0, $i2541 = 0, $554 = 0, $conv2542 = 0.0, $f2546 = 0, $555 = 0.0, $cmp2547 = 0, $f2571 = 0, $556 = 0.0, $i2575 = 0, $557 = 0, $conv2576 = 0.0, $cmp2577 = 0, $i2585 = 0, $i2593 = 0, $f2601 = 0, $558 = 0.0, $f2605 = 0, $559 = 0.0, $cmp2606 = 0, $i2614 = 0, $i2622 = 0, $incdec_ptr2629 = 0, $560 = 0, $and2630 = 0, $arrayidx2631 = 0, $shr2635 = 0, $arrayidx2637 = 0, $tt2638 = 0, $561 = 0, $conv2640 = 0, $shl2641 = 0, $add2642 = 0, $arrayidx2643 = 0, $tt2644 = 0, $562 = 0, $and2647 = 0, $or2648 = 0, $i2653 = 0, $563 = 0, $i2657 = 0, $564 = 0, $cmp2658 = 0, $i2682 = 0, $565 = 0, $conv2683 = 0.0, $f2687 = 0, $566 = 0.0, $cmp2688 = 0, $f2712 = 0, $567 = 0.0, $i2716 = 0, $568 = 0, $conv2717 = 0.0, $cmp2718 = 0, $i2726 = 0, $i2734 = 0, $f2742 = 0, $569 = 0.0, $f2746 = 0, $570 = 0.0, $cmp2747 = 0, $i2755 = 0, $i2763 = 0, $incdec_ptr2770 = 0, $571 = 0, $and2771 = 0, $arrayidx2772 = 0, $shr2776 = 0, $arrayidx2778 = 0, $tt2779 = 0, $572 = 0, $conv2781 = 0, $shl2782 = 0, $add2783 = 0, $arrayidx2784 = 0, $tt2785 = 0, $573 = 0, $and2788 = 0, $or2789 = 0, $i2794 = 0, $574 = 0, $i2798 = 0, $575 = 0, $cmp2799 = 0, $i2823 = 0, $576 = 0, $conv2824 = 0.0, $f2828 = 0, $577 = 0.0, $cmp2829 = 0, $f2853 = 0, $578 = 0.0, $i2857 = 0, $579 = 0, $conv2858 = 0.0, $cmp2859 = 0, $i2867 = 0, $i2875 = 0, $f2883 = 0, $580 = 0.0, $f2887 = 0, $581 = 0.0, $cmp2888 = 0, $i2896 = 0, $i2904 = 0, $incdec_ptr2911 = 0, $582 = 0, $and2912 = 0, $arrayidx2913 = 0, $shr2914 = 0, $arrayidx2916 = 0, $shr2917 = 0, $and2918 = 0, $shr2919 = 0, $and2920 = 0, $arrayidx2921 = 0, $583 = 0, $incdec_ptr2923 = 0, $584 = 0, $and2924 = 0, $arrayidx2925 = 0, $shr2926 = 0, $arrayidx2928 = 0, $shr2930 = 0, $and2931 = 0, $arrayidx2932 = 0, $incdec_ptr2933 = 0, $585 = 0, $and2934 = 0, $arrayidx2935 = 0, $shr2936 = 0, $arrayidx2938 = 0, $shr2939 = 0, $and2940 = 0, $arrayidx2941 = 0, $incdec_ptr2942 = 0, $586 = 0, $and2943 = 0, $arrayidx2944 = 0, $shr2947 = 0, $shr2951 = 0, $and2952 = 0, $shr2955 = 0, $and2956 = 0, $arrayidx2957 = 0, $587 = 0, $588 = 0, $cmp2959 = 0, $cmp2962 = 0, $arrayidx2967 = 0, $589 = 0, $tt2971 = 0, $value2973 = 0, $i2974 = 0, $arrayidx2980 = 0, $590 = 0, $incdec_ptr2983 = 0, $591 = 0, $and2984 = 0, $arrayidx2985 = 0, $shr2986 = 0, $and2987 = 0, $arrayidx2988 = 0, $shr2989 = 0, $and2990 = 0, $shr2991 = 0, $arrayidx2993 = 0, $incdec_ptr2994 = 0, $592 = 0, $and2995 = 0, $arrayidx2996 = 0, $shr2999 = 0, $arrayidx3003 = 0, $593 = 0, $v3002_sroa_2_8__idx55 = 0, $v3002_sroa_2_8_copyload = 0, $shr3005 = 0, $and3006 = 0, $shr3008 = 0, $and3009 = 0, $cmp3011 = 0, $tobool30191570 = 0, $a2998_01572_in = 0, $post_01571 = 0, $a2998_01572 = 0, $dec3018 = 0, $tt3023 = 0, $value3025 = 0, $i3026 = 0, $tobool3019 = 0, $v3002_sroa_0_0__cast = 0, $v3002_sroa_0_0_copyload = 0, $len3037 = 0, $594 = 0, $595 = 0, $add3040 = 0, $cmp3041 = 0, $inc3044 = 0, $sum = 0, $sub3047 = 0, $ptr3048 = 0, $596 = 0, $597 = 0, $add_ptr3049 = 0, $tobool30531583 = 0, $sub3057 = 0, $dec30521585_in = 0, $a2998_11584 = 0, $dec30521585 = 0, $inc3055 = 0, $arrayidx3056 = 0, $dec3052_neg = 0, $sub3058 = 0, $598 = 0, $arrayidx3060 = 0, $599 = 0, $600 = 0, $tobool3053 = 0, $cmp30681574 = 0, $ptr3074 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $add30671576 = 0, $i3039_01575 = 0, $add3071 = 0, $arrayidx3072 = 0, $605 = 0, $arrayidx3075 = 0, $606 = 0, $607 = 0, $inc3077 = 0, $add3067 = 0, $exitcond = 0, $i3039_0_lcssa = 0, $cmp30801579 = 0, $608 = 0, $609 = 0, $i3039_11580 = 0, $add3084 = 0, $tt3086 = 0, $value3089 = 0, $i3090 = 0, $inc3092 = 0, $exitcond1656 = 0, $incdec_ptr3096 = 0, $610 = 0, $and3097 = 0, $arrayidx3098 = 0, $shr3099 = 0, $arrayidx3101 = 0, $shr3102 = 0, $and3103 = 0, $arrayidx3104 = 0, $611 = 0, $incdec_ptr3106 = 0, $612 = 0, $and3107 = 0, $arrayidx3108 = 0, $shr3109 = 0, $arrayidx3111 = 0, $shr3112 = 0, $and3113 = 0, $arrayidx3114 = 0, $incdec_ptr3115 = 0, $613 = 0, $and3116 = 0, $arrayidx3117 = 0, $shr3119 = 0, $and3120 = 0, $shr3123 = 0, $and3124 = 0, $mul3126 = 0, $add3127 = 0, $cmp31301567 = 0, $b_01568 = 0, $arrayidx3133 = 0, $add3134 = 0, $arrayidx3135 = 0, $add3136 = 0, $cmp3130 = 0, $shr3138 = 0, $arrayidx3140 = 0, $614 = 0, $incdec_ptr3141 = 0, $615 = 0, $and3142 = 0, $arrayidx3143 = 0, $shr3148 = 0, $and3150 = 0, $tobool3151 = 0, $idx3153 = 0, $616 = 0, $shr3154 = 0, $and3155 = 0, $add3156 = 0, $617 = 0, $arrayidx3158 = 0, $618 = 0, $call3159 = 0, $call3167 = 0, $p3145_0 = 0, $and3169 = 0, $tobool3170 = 0, $619 = 0, $620 = 0, $621 = 0, $shr3175 = 0, $arrayidx3177 = 0, $622 = 0, $623 = 0, $incdec_ptr3179 = 0, $624 = 0, $and3180 = 0, $arrayidx3181 = 0, $shr3182 = 0, $arrayidx3184 = 0, $625 = 0, $626 = 0, $627 = 0, $incdec_ptr3186 = 0, $628 = 0, $and3187 = 0, $arrayidx3188 = 0, $shr3193 = 0, $shr3199 = 0, $and3200 = 0, $arrayidx3201 = 0, $629 = 0, $arrayidx3202 = 0, $630 = 0, $add3203 = 0, $arrayidx3204 = 0, $631 = 0, $632 = 0, $cmp3206 = 0, $633 = 0, $tobool3211 = 0, $634 = 0, $ci3214 = 0, $635 = 0, $target_class3215 = 0, $636 = 0, $637 = 0, $call3218 = 0, $638 = 0, $incdec_ptr3221 = 0, $639 = 0, $and3222 = 0, $arrayidx3223 = 0, $shr3228 = 0, $shr3234 = 0, $and3235 = 0, $arrayidx3236 = 0, $640 = 0, $arrayidx3237 = 0, $641 = 0, $642 = 0, $cmp3239 = 0, $643 = 0, $tobool3244 = 0, $644 = 0, $ci3247 = 0, $645 = 0, $target_class3248 = 0, $646 = 0, $647 = 0, $call3251 = 0, $648 = 0, $incdec_ptr3254 = 0, $649 = 0, $and3255 = 0, $arrayidx3256 = 0, $shr3259 = 0, $arrayidx3265 = 0, $650 = 0, $call3268 = 0, $add_ptr3269 = 0, $pc3270 = 0, $acc3271 = 0, $mid3272 = 0, $651 = 0, $stack3274 = 0, $652 = 0, $stbase3276 = 0, $653 = 0, $sub_ptr_lhs_cast3277 = 0, $sub_ptr_rhs_cast3278 = 0, $sub_ptr_sub3279 = 0, $sub_ptr_div3280 = 0, $stackidx3281 = 0, $argc3282 = 0, $654 = 0, $655 = 0, $target_class3285 = 0, $656 = 0, $stack3287 = 0, $657 = 0, $add_ptr3288 = 0, $idx3289 = 0, $658 = 0, $shr3290 = 0, $and3291 = 0, $add3292 = 0, $659 = 0, $arrayidx3294 = 0, $660 = 0, $call3295 = 0, $661 = 0, $target_class3297 = 0, $proc3298 = 0, $662 = 0, $663 = 0, $and3300 = 0, $cmp3301 = 0, $664 = 0, $stack3305 = 0, $665 = 0, $body3307 = 0, $func3308 = 0, $666 = 0, $667 = 0, $668 = 0, $tobool3311 = 0, $669 = 0, $stbase3315 = 0, $670 = 0, $ci3317 = 0, $671 = 0, $stackidx3318 = 0, $672 = 0, $add_ptr3319 = 0, $stack3321 = 0, $673 = 0, $and3323 = 0, $arrayidx3324 = 0, $irep3327 = 0, $674 = 0, $pool3328 = 0, $675 = 0, $syms3329 = 0, $676 = 0, $nregs3330 = 0, $677 = 0, $conv3331 = 0, $678 = 0, $conv3333 = 0, $nregs3334 = 0, $679 = 0, $stack3336 = 0, $680 = 0, $iseq3337 = 0, $681 = 0, $682 = 0, $and3338 = 0, $arrayidx3339 = 0, $shr3342 = 0, $value3347 = 0, $p3348 = 0, $683 = 0, $684 = 0, $shr3349 = 0, $and3350 = 0, $arrayidx3351 = 0, $685 = 0, $add3352 = 0, $arrayidx3353 = 0, $incdec_ptr3354 = 0, $686 = 0, $and3355 = 0, $arrayidx3356 = 0, $shr3357 = 0, $arrayidx3359 = 0, $shr3360 = 0, $and3361 = 0, $arrayidx3362 = 0, $687 = 0, $incdec_ptr3364 = 0, $688 = 0, $and3365 = 0, $arrayidx3366 = 0, $689 = 0, $ci3368 = 0, $690 = 0, $target_class3369 = 0, $691 = 0, $tobool3370 = 0, $call3374 = 0, $p3376 = 0, $692 = 0, $693 = 0, $exc3377 = 0, $shr3379 = 0, $arrayidx3381 = 0, $694 = 0, $695 = 0, $incdec_ptr3386 = 0, $696 = 0, $and3387 = 0, $arrayidx3388 = 0, $shr3391 = 0, $and3392 = 0, $shr3393 = 0, $arrayidx3395 = 0, $arrayidx3396 = 0, $add3397 = 0, $arrayidx3398 = 0, $shr3399 = 0, $and3400 = 0, $697 = 0, $incdec_ptr3402 = 0, $698 = 0, $and3403 = 0, $arrayidx3404 = 0, $shr3405 = 0, $shr3407 = 0, $and3408 = 0, $shr3409 = 0, $and3410 = 0, $call3411 = 0, $incdec_ptr3412 = 0, $699 = 0, $and3413 = 0, $arrayidx3414 = 0, $regs_2 = 0, $irep_5 = 0, $c3417 = 0, $700 = 0, $ci3418 = 0, $701 = 0, $eidx3419 = 0, $702 = 0, $tobool34221553 = 0, $dec34211554_in = 0, $dec34211554 = 0, $tobool3422 = 0, $exc3426 = 0, $703 = 0, $tobool3427 = 0, $704 = 0, $nlocals = 0, $705 = 0, $idxprom = 0, $arrayidx3431 = 0, $706 = 0, $707 = 0, $shr3433 = 0, $and3434 = 0, $arrayidx3435 = 0, $708 = 0, $709 = 0, $cmp3440 = 0, $call3443 = 0, $call3446 = 0, $exc3437_sroa_0_0_in_in = 0, $exc3437_sroa_0_0_in = 0, $exc3437_sroa_0_0 = 0, $710 = 0, $exc3451 = 0, $i_2 = 0, $regs_3 = 0, $syms_2 = 0, $pool_2 = 0, $pc_3 = 0, $irep_6 = 0, $proc_addr_4 = 0, $indirect_goto_dest_in = 0, $indirect_goto_dest = 0, label = 0, tempParam = 0, __stackBase__ = 0, setjmpLabel = 0, setjmpTable = 0, ibr = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 772 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  setjmpLabel = 0;
  setjmpTable = STACKTOP;
  STACKTOP = STACKTOP + 168 | 0;
  HEAP32[setjmpTable >> 2] = 0;
  while (1) switch (label | 0) {
   case 2:
    $c_jmp = __stackBase__ | 0;
    $tmp = __stackBase__ + 40 | 0;
    $tmp126 = __stackBase__ + 52 | 0;
    $tmp145 = __stackBase__ + 64 | 0;
    $tmp164 = __stackBase__ + 76 | 0;
    $tmp183 = __stackBase__ + 88 | 0;
    $tmp204 = __stackBase__ + 100 | 0;
    $tmp231 = __stackBase__ + 112 | 0;
    $c461 = __stackBase__ + 124 | 0;
    $recv = __stackBase__ + 128 | 0;
    $result = __stackBase__ + 140 | 0;
    $sym506 = __stackBase__ + 152 | 0;
    $tmp514 = __stackBase__ + 164 | 0;
    $recv639 = __stackBase__ + 176 | 0;
    $tmp679 = __stackBase__ + 188 | 0;
    $tmp712 = __stackBase__ + 200 | 0;
    $recv751 = __stackBase__ + 212 | 0;
    $c759 = __stackBase__ + 224 | 0;
    $agg_tmp = __stackBase__ + 228 | 0;
    $tmp786 = __stackBase__ + 240 | 0;
    $tmp844 = __stackBase__ + 252 | 0;
    $tmp929 = __stackBase__ + 264 | 0;
    $tmp942 = __stackBase__ + 276 | 0;
    $tmp961 = __stackBase__ + 288 | 0;
    $tmp1127 = __stackBase__ + 300 | 0;
    $tmp1158 = __stackBase__ + 312 | 0;
    $agg_tmp1205 = __stackBase__ + 324 | 0;
    $agg_tmp1208 = __stackBase__ + 336 | 0;
    $v = __stackBase__ + 348 | 0;
    $exc1368 = __stackBase__ + 360 | 0;
    $agg_tmp1370 = __stackBase__ + 372 | 0;
    $c1442 = __stackBase__ + 384 | 0;
    $recv1446 = __stackBase__ + 388 | 0;
    $sym1458 = __stackBase__ + 400 | 0;
    $tmp1466 = __stackBase__ + 412 | 0;
    $tmp1504 = __stackBase__ + 424 | 0;
    $tmp1697 = __stackBase__ + 436 | 0;
    $tmp2922 = __stackBase__ + 448 | 0;
    $agg_tmp2929 = __stackBase__ + 460 | 0;
    $v2954 = __stackBase__ + 472 | 0;
    $tmp2981 = __stackBase__ + 484 | 0;
    $tmp3016 = __stackBase__ + 496 | 0;
    $tmp3050 = __stackBase__ + 508 | 0;
    $tmp3065 = __stackBase__ + 520 | 0;
    $tmp3105 = __stackBase__ + 532 | 0;
    $hash = __stackBase__ + 544 | 0;
    $tmp3178 = __stackBase__ + 556 | 0;
    $tmp3185 = __stackBase__ + 568 | 0;
    $base = __stackBase__ + 580 | 0;
    $super3197 = __stackBase__ + 592 | 0;
    $tmp3216 = __stackBase__ + 604 | 0;
    $tmp3220 = __stackBase__ + 616 | 0;
    $base3231 = __stackBase__ + 628 | 0;
    $tmp3249 = __stackBase__ + 640 | 0;
    $tmp3253 = __stackBase__ + 652 | 0;
    $recv3264 = __stackBase__ + 664 | 0;
    $tmp3309 = __stackBase__ + 676 | 0;
    $tmp3363 = __stackBase__ + 688 | 0;
    $exc3373 = __stackBase__ + 700 | 0;
    $tmp3385 = __stackBase__ + 712 | 0;
    $tmp3401 = __stackBase__ + 724 | 0;
    $msg = __stackBase__ + 736 | 0;
    $tmp3444 = __stackBase__ + 748 | 0;
    $tmp3447 = __stackBase__ + 760 | 0;
    $irep1 = $proc + 12 | 0;
    $0 = HEAP32[$irep1 >> 2] | 0;
    $iseq = $0 + 12 | 0;
    $1 = HEAP32[$iseq >> 2] | 0;
    $pool2 = $0 + 16 | 0;
    $2 = HEAP32[$pool2 >> 2] | 0;
    $syms3 = $0 + 20 | 0;
    $3 = HEAP32[$syms3 >> 2] | 0;
    $call = invoke_ii(38, $mrb | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $jmp = $mrb | 0;
    $4 = HEAP32[$jmp >> 2] | 0;
    $arraydecay = $c_jmp | 0;
    $call4 = _saveSetjmp($arraydecay | 0, label, setjmpTable) | 0;
    label = 392;
    break;
   case 392:
    $cmp = ($call4 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $proc_addr_2 = $proc;
      $irep_3 = $0;
      $pc_1 = $1;
      $regs_0 = 0;
      label = 155;
      break;
    }
   case 3:
    $5 = $c_jmp;
    HEAP32[$jmp >> 2] = $5;
    $c = $mrb + 8 | 0;
    $6 = HEAP32[$c >> 2] | 0;
    $stack = $6 + 4 | 0;
    $7 = HEAP32[$stack >> 2] | 0;
    $tobool = ($7 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    invoke_vi(810, $mrb | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 5;
    break;
   case 5:
    $nregs = $0 + 6 | 0;
    $8 = HEAP16[$nregs >> 1] | 0;
    $conv = $8 & 65535;
    invoke_viii(642, $mrb | 0, $conv | 0, $conv | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $9 = HEAP32[$c >> 2] | 0;
    $ci = $9 + 16 | 0;
    $10 = HEAP32[$ci >> 2] | 0;
    $proc11 = $10 + 4 | 0;
    HEAP32[$proc11 >> 2] = $proc;
    $11 = HEAP16[$nregs >> 1] | 0;
    $conv13 = $11 & 65535;
    $add = $conv13 + 1 | 0;
    $12 = HEAP32[$c >> 2] | 0;
    $ci15 = $12 + 16 | 0;
    $13 = HEAP32[$ci15 >> 2] | 0;
    $nregs16 = $13 + 12 | 0;
    HEAP32[$nregs16 >> 2] = $add;
    $14 = HEAP32[$c >> 2] | 0;
    $stack18 = $14 + 4 | 0;
    $15 = HEAP32[$stack18 >> 2] | 0;
    $16 = $15;
    $17 = $self;
    HEAP32[$16 >> 2] = HEAP32[$17 >> 2] | 0;
    HEAP32[$16 + 4 >> 2] = HEAP32[$17 + 4 >> 2] | 0;
    HEAP32[$16 + 8 >> 2] = HEAP32[$17 + 8 >> 2] | 0;
    $proc_addr_4_ph = $proc;
    $irep_6_ph = $0;
    $pc_3_ph = $1;
    $pool_2_ph = $2;
    $syms_2_ph = $3;
    $regs_3_ph = $15;
    $i_2_ph_in = $1;
    label = 193;
    break;
   case 6:
    $incdec_ptr = $pc_3 + 4 | 0;
    $18 = HEAP32[$incdec_ptr >> 2] | 0;
    $and20 = $18 & 127;
    $arrayidx21 = 78492 + ($and20 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx21;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $18;
    label = 391;
    break;
   case 7:
    $shr = $i_2 >>> 23;
    $arrayidx23 = $regs_3 + ($shr * 12 & -1) | 0;
    $shr24 = $i_2 >>> 14;
    $and25 = $shr24 & 511;
    $arrayidx26 = $regs_3 + ($and25 * 12 & -1) | 0;
    $19 = $arrayidx23;
    $20 = $arrayidx26;
    HEAP32[$19 >> 2] = HEAP32[$20 >> 2] | 0;
    HEAP32[$19 + 4 >> 2] = HEAP32[$20 + 4 >> 2] | 0;
    HEAP32[$19 + 8 >> 2] = HEAP32[$20 + 8 >> 2] | 0;
    $incdec_ptr27 = $pc_3 + 4 | 0;
    $21 = HEAP32[$incdec_ptr27 >> 2] | 0;
    $and28 = $21 & 127;
    $arrayidx29 = 78492 + ($and28 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx29;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr27;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $21;
    label = 391;
    break;
   case 8:
    $shr30 = $i_2 >>> 23;
    $arrayidx32 = $regs_3 + ($shr30 * 12 & -1) | 0;
    $shr33 = $i_2 >>> 7;
    $and34 = $shr33 & 65535;
    $arrayidx35 = $pool_2 + ($and34 * 12 & -1) | 0;
    $22 = $arrayidx32;
    $23 = $arrayidx35;
    HEAP32[$22 >> 2] = HEAP32[$23 >> 2] | 0;
    HEAP32[$22 + 4 >> 2] = HEAP32[$23 + 4 >> 2] | 0;
    HEAP32[$22 + 8 >> 2] = HEAP32[$23 + 8 >> 2] | 0;
    $incdec_ptr36 = $pc_3 + 4 | 0;
    $24 = HEAP32[$incdec_ptr36 >> 2] | 0;
    $and37 = $24 & 127;
    $arrayidx38 = 78492 + ($and37 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx38;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr36;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $24;
    label = 391;
    break;
   case 9:
    $shr39 = $i_2 >>> 23;
    $tt = $regs_3 + ($shr39 * 12 & -1) + 8 | 0;
    HEAP32[$tt >> 2] = 3;
    $shr42 = $i_2 >>> 7;
    $and43 = $shr42 & 65535;
    $sub = $and43 - 32767 | 0;
    $value = $regs_3 + ($shr39 * 12 & -1) | 0;
    $i47 = $value;
    HEAP32[$i47 >> 2] = $sub;
    $incdec_ptr48 = $pc_3 + 4 | 0;
    $25 = HEAP32[$incdec_ptr48 >> 2] | 0;
    $and49 = $25 & 127;
    $arrayidx50 = 78492 + ($and49 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx50;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr48;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $25;
    label = 391;
    break;
   case 10:
    $shr52 = $i_2 >>> 23;
    $tt55 = $regs_3 + ($shr52 * 12 & -1) + 8 | 0;
    HEAP32[$tt55 >> 2] = 4;
    $shr56 = $i_2 >>> 7;
    $and57 = $shr56 & 65535;
    $arrayidx58 = $syms_2 + ($and57 << 1) | 0;
    $26 = HEAP16[$arrayidx58 >> 1] | 0;
    $value62 = $regs_3 + ($shr52 * 12 & -1) | 0;
    $sym = $value62;
    HEAP16[$sym >> 1] = $26;
    $incdec_ptr64 = $pc_3 + 4 | 0;
    $27 = HEAP32[$incdec_ptr64 >> 2] | 0;
    $and65 = $27 & 127;
    $arrayidx66 = 78492 + ($and65 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx66;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr64;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $27;
    label = 391;
    break;
   case 11:
    $shr67 = $i_2 >>> 23;
    $arrayidx69 = $regs_3 + ($shr67 * 12 & -1) | 0;
    $28 = $arrayidx69;
    $29 = $regs_3;
    HEAP32[$28 >> 2] = HEAP32[$29 >> 2] | 0;
    HEAP32[$28 + 4 >> 2] = HEAP32[$29 + 4 >> 2] | 0;
    HEAP32[$28 + 8 >> 2] = HEAP32[$29 + 8 >> 2] | 0;
    $incdec_ptr71 = $pc_3 + 4 | 0;
    $30 = HEAP32[$incdec_ptr71 >> 2] | 0;
    $and72 = $30 & 127;
    $arrayidx73 = 78492 + ($and72 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx73;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr71;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $30;
    label = 391;
    break;
   case 12:
    $shr75 = $i_2 >>> 23;
    $tt78 = $regs_3 + ($shr75 * 12 & -1) + 8 | 0;
    HEAP32[$tt78 >> 2] = 2;
    $value82 = $regs_3 + ($shr75 * 12 & -1) | 0;
    $i83 = $value82;
    HEAP32[$i83 >> 2] = 1;
    $incdec_ptr85 = $pc_3 + 4 | 0;
    $31 = HEAP32[$incdec_ptr85 >> 2] | 0;
    $and86 = $31 & 127;
    $arrayidx87 = 78492 + ($and86 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx87;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr85;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $31;
    label = 391;
    break;
   case 13:
    $shr89 = $i_2 >>> 23;
    $tt92 = $regs_3 + ($shr89 * 12 & -1) + 8 | 0;
    HEAP32[$tt92 >> 2] = 0;
    $value96 = $regs_3 + ($shr89 * 12 & -1) | 0;
    $i97 = $value96;
    HEAP32[$i97 >> 2] = 1;
    $incdec_ptr99 = $pc_3 + 4 | 0;
    $32 = HEAP32[$incdec_ptr99 >> 2] | 0;
    $and100 = $32 & 127;
    $arrayidx101 = 78492 + ($and100 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx101;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr99;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $32;
    label = 391;
    break;
   case 14:
    $shr102 = $i_2 >>> 23;
    $arrayidx104 = $regs_3 + ($shr102 * 12 & -1) | 0;
    $shr105 = $i_2 >>> 7;
    $and106 = $shr105 & 65535;
    $arrayidx107 = $syms_2 + ($and106 << 1) | 0;
    $33 = HEAP16[$arrayidx107 >> 1] | 0;
    invoke_viii(708, $tmp | 0, $mrb | 0, $33 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $34 = $arrayidx104;
    HEAP32[$34 >> 2] = HEAP32[$404 >> 2] | 0;
    HEAP32[$34 + 4 >> 2] = HEAP32[$404 + 4 >> 2] | 0;
    HEAP32[$34 + 8 >> 2] = HEAP32[$404 + 8 >> 2] | 0;
    $incdec_ptr108 = $pc_3 + 4 | 0;
    $35 = HEAP32[$incdec_ptr108 >> 2] | 0;
    $and109 = $35 & 127;
    $arrayidx110 = 78492 + ($and109 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx110;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr108;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $35;
    label = 391;
    break;
   case 15:
    $shr111 = $i_2 >>> 7;
    $and112 = $shr111 & 65535;
    $arrayidx113 = $syms_2 + ($and112 << 1) | 0;
    $36 = HEAP16[$arrayidx113 >> 1] | 0;
    $shr114 = $i_2 >>> 23;
    $arrayidx116 = $regs_3 + ($shr114 * 12 & -1) | 0;
    invoke_viii(422, $mrb | 0, $36 | 0, $arrayidx116 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr117 = $pc_3 + 4 | 0;
    $37 = HEAP32[$incdec_ptr117 >> 2] | 0;
    $and118 = $37 & 127;
    $arrayidx119 = 78492 + ($and118 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx119;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr117;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $37;
    label = 391;
    break;
   case 16:
    $shr120 = $i_2 >>> 23;
    $arrayidx122 = $regs_3 + ($shr120 * 12 & -1) | 0;
    invoke_viii(236, $tmp126 | 0, 0, 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $38 = $arrayidx122;
    HEAP32[$38 >> 2] = HEAP32[$405 >> 2] | 0;
    HEAP32[$38 + 4 >> 2] = HEAP32[$405 + 4 >> 2] | 0;
    HEAP32[$38 + 8 >> 2] = HEAP32[$405 + 8 >> 2] | 0;
    $incdec_ptr127 = $pc_3 + 4 | 0;
    $39 = HEAP32[$incdec_ptr127 >> 2] | 0;
    $and128 = $39 & 127;
    $arrayidx129 = 78492 + ($and128 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx129;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr127;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $39;
    label = 391;
    break;
   case 17:
    $incdec_ptr136 = $pc_3 + 4 | 0;
    $40 = HEAP32[$incdec_ptr136 >> 2] | 0;
    $and137 = $40 & 127;
    $arrayidx138 = 78492 + ($and137 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx138;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr136;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $40;
    label = 391;
    break;
   case 18:
    $shr139 = $i_2 >>> 23;
    $arrayidx141 = $regs_3 + ($shr139 * 12 & -1) | 0;
    $shr142 = $i_2 >>> 7;
    $and143 = $shr142 & 65535;
    $arrayidx144 = $syms_2 + ($and143 << 1) | 0;
    $41 = HEAP16[$arrayidx144 >> 1] | 0;
    invoke_viii(330, $tmp145 | 0, $mrb | 0, $41 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $42 = $arrayidx141;
    HEAP32[$42 >> 2] = HEAP32[$406 >> 2] | 0;
    HEAP32[$42 + 4 >> 2] = HEAP32[$406 + 4 >> 2] | 0;
    HEAP32[$42 + 8 >> 2] = HEAP32[$406 + 8 >> 2] | 0;
    $incdec_ptr146 = $pc_3 + 4 | 0;
    $43 = HEAP32[$incdec_ptr146 >> 2] | 0;
    $and147 = $43 & 127;
    $arrayidx148 = 78492 + ($and147 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx148;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr146;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $43;
    label = 391;
    break;
   case 19:
    $shr149 = $i_2 >>> 7;
    $and150 = $shr149 & 65535;
    $arrayidx151 = $syms_2 + ($and150 << 1) | 0;
    $44 = HEAP16[$arrayidx151 >> 1] | 0;
    $shr152 = $i_2 >>> 23;
    $arrayidx154 = $regs_3 + ($shr152 * 12 & -1) | 0;
    invoke_viii(788, $mrb | 0, $44 | 0, $arrayidx154 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr155 = $pc_3 + 4 | 0;
    $45 = HEAP32[$incdec_ptr155 >> 2] | 0;
    $and156 = $45 & 127;
    $arrayidx157 = 78492 + ($and156 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx157;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr155;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $45;
    label = 391;
    break;
   case 20:
    $shr158 = $i_2 >>> 23;
    $arrayidx160 = $regs_3 + ($shr158 * 12 & -1) | 0;
    $shr161 = $i_2 >>> 7;
    $and162 = $shr161 & 65535;
    $arrayidx163 = $syms_2 + ($and162 << 1) | 0;
    $46 = HEAP16[$arrayidx163 >> 1] | 0;
    invoke_viii(484, $tmp164 | 0, $mrb | 0, $46 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $47 = $arrayidx160;
    HEAP32[$47 >> 2] = HEAP32[$407 >> 2] | 0;
    HEAP32[$47 + 4 >> 2] = HEAP32[$407 + 4 >> 2] | 0;
    HEAP32[$47 + 8 >> 2] = HEAP32[$407 + 8 >> 2] | 0;
    $incdec_ptr165 = $pc_3 + 4 | 0;
    $48 = HEAP32[$incdec_ptr165 >> 2] | 0;
    $and166 = $48 & 127;
    $arrayidx167 = 78492 + ($and166 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx167;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr165;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $48;
    label = 391;
    break;
   case 21:
    $shr168 = $i_2 >>> 7;
    $and169 = $shr168 & 65535;
    $arrayidx170 = $syms_2 + ($and169 << 1) | 0;
    $49 = HEAP16[$arrayidx170 >> 1] | 0;
    $shr171 = $i_2 >>> 23;
    $arrayidx173 = $regs_3 + ($shr171 * 12 & -1) | 0;
    invoke_viii(518, $mrb | 0, $49 | 0, $arrayidx173 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr174 = $pc_3 + 4 | 0;
    $50 = HEAP32[$incdec_ptr174 >> 2] | 0;
    $and175 = $50 & 127;
    $arrayidx176 = 78492 + ($and175 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx176;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr174;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $50;
    label = 391;
    break;
   case 22:
    $shr177 = $i_2 >>> 23;
    $arrayidx179 = $regs_3 + ($shr177 * 12 & -1) | 0;
    $shr180 = $i_2 >>> 7;
    $and181 = $shr180 & 65535;
    $arrayidx182 = $syms_2 + ($and181 << 1) | 0;
    $51 = HEAP16[$arrayidx182 >> 1] | 0;
    invoke_viii(574, $tmp183 | 0, $mrb | 0, $51 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $52 = $arrayidx179;
    HEAP32[$52 >> 2] = HEAP32[$408 >> 2] | 0;
    HEAP32[$52 + 4 >> 2] = HEAP32[$408 + 4 >> 2] | 0;
    HEAP32[$52 + 8 >> 2] = HEAP32[$408 + 8 >> 2] | 0;
    $incdec_ptr184 = $pc_3 + 4 | 0;
    $53 = HEAP32[$incdec_ptr184 >> 2] | 0;
    $and185 = $53 & 127;
    $arrayidx186 = 78492 + ($and185 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx186;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr184;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $53;
    label = 391;
    break;
   case 23:
    $shr187 = $i_2 >>> 7;
    $and188 = $shr187 & 65535;
    $arrayidx189 = $syms_2 + ($and188 << 1) | 0;
    $54 = HEAP16[$arrayidx189 >> 1] | 0;
    $shr190 = $i_2 >>> 23;
    $arrayidx192 = $regs_3 + ($shr190 * 12 & -1) | 0;
    invoke_viii(512, $mrb | 0, $54 | 0, $arrayidx192 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr193 = $pc_3 + 4 | 0;
    $55 = HEAP32[$incdec_ptr193 >> 2] | 0;
    $and194 = $55 & 127;
    $arrayidx195 = 78492 + ($and194 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx195;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr193;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $55;
    label = 391;
    break;
   case 24:
    $shr197 = $i_2 >>> 23;
    $arrayidx199 = $regs_3 + ($shr197 * 12 & -1) | 0;
    $shr201 = $i_2 >>> 7;
    $and202 = $shr201 & 65535;
    $arrayidx203 = $syms_2 + ($and202 << 1) | 0;
    $56 = HEAP16[$arrayidx203 >> 1] | 0;
    invoke_viiii(828, $tmp204 | 0, $mrb | 0, $arrayidx199 | 0, $56 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $57 = $arrayidx199;
    HEAP32[$57 >> 2] = HEAP32[$409 >> 2] | 0;
    HEAP32[$57 + 4 >> 2] = HEAP32[$409 + 4 >> 2] | 0;
    HEAP32[$57 + 8 >> 2] = HEAP32[$409 + 8 >> 2] | 0;
    $incdec_ptr205 = $pc_3 + 4 | 0;
    $58 = HEAP32[$incdec_ptr205 >> 2] | 0;
    $and206 = $58 & 127;
    $arrayidx207 = 78492 + ($and206 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx207;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr205;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $58;
    label = 391;
    break;
   case 25:
    $shr210 = $i_2 >>> 23;
    $add212 = $shr210 + 1 | 0;
    $arrayidx213 = $regs_3 + ($add212 * 12 & -1) | 0;
    $shr214 = $i_2 >>> 7;
    $and215 = $shr214 & 65535;
    $arrayidx216 = $syms_2 + ($and215 << 1) | 0;
    $59 = HEAP16[$arrayidx216 >> 1] | 0;
    $arrayidx217 = $regs_3 + ($shr210 * 12 & -1) | 0;
    invoke_viiii(174, $mrb | 0, $arrayidx213 | 0, $59 | 0, $arrayidx217 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr218 = $pc_3 + 4 | 0;
    $60 = HEAP32[$incdec_ptr218 >> 2] | 0;
    $and219 = $60 & 127;
    $arrayidx220 = 78492 + ($and219 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx220;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr218;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $60;
    label = 391;
    break;
   case 26:
    $shr222 = $i_2 >>> 23;
    $add_ptr = $regs_3 + ($shr222 * 12 & -1) | 0;
    $shr225 = $i_2 >>> 7;
    $and226 = $shr225 & 127;
    $call228 = invoke_iii(326, $mrb | 0, $and226 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $tobool229 = ($call228 | 0) == 0;
    if ($tobool229) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    invoke_vi(182, $tmp231 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $61 = $add_ptr;
    HEAP32[$61 >> 2] = HEAP32[$410 >> 2] | 0;
    HEAP32[$61 + 4 >> 2] = HEAP32[$410 + 4 >> 2] | 0;
    HEAP32[$61 + 8 >> 2] = HEAP32[$410 + 8 >> 2] | 0;
    label = 29;
    break;
   case 28:
    $shr234 = $i_2 >>> 14;
    $and235 = $shr234 & 511;
    $stack236 = $call228 + 12 | 0;
    $62 = HEAP32[$stack236 >> 2] | 0;
    $arrayidx237 = $62 + ($and235 * 12 & -1) | 0;
    $63 = $add_ptr;
    $64 = $arrayidx237;
    HEAP32[$63 >> 2] = HEAP32[$64 >> 2] | 0;
    HEAP32[$63 + 4 >> 2] = HEAP32[$64 + 4 >> 2] | 0;
    HEAP32[$63 + 8 >> 2] = HEAP32[$64 + 8 >> 2] | 0;
    label = 29;
    break;
   case 29:
    $incdec_ptr239 = $pc_3 + 4 | 0;
    $65 = HEAP32[$incdec_ptr239 >> 2] | 0;
    $and240 = $65 & 127;
    $arrayidx241 = 78492 + ($and240 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx241;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr239;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $65;
    label = 391;
    break;
   case 30:
    $shr244 = $i_2 >>> 7;
    $and245 = $shr244 & 127;
    $call248 = invoke_iii(326, $mrb | 0, $and245 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $tobool249 = ($call248 | 0) == 0;
    if ($tobool249) {
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    $shr253 = $i_2 >>> 23;
    $add_ptr255 = $regs_3 + ($shr253 * 12 & -1) | 0;
    $shr258 = $i_2 >>> 14;
    $and259 = $shr258 & 511;
    $stack260 = $call248 + 12 | 0;
    $66 = HEAP32[$stack260 >> 2] | 0;
    $arrayidx261 = $66 + ($and259 * 12 & -1) | 0;
    $67 = $arrayidx261;
    $68 = $add_ptr255;
    HEAP32[$67 >> 2] = HEAP32[$68 >> 2] | 0;
    HEAP32[$67 + 4 >> 2] = HEAP32[$68 + 4 >> 2] | 0;
    HEAP32[$67 + 8 >> 2] = HEAP32[$68 + 8 >> 2] | 0;
    $69 = $call248;
    invoke_vii(208, $mrb | 0, $69 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 32;
    break;
   case 32:
    $incdec_ptr263 = $pc_3 + 4 | 0;
    $70 = HEAP32[$incdec_ptr263 >> 2] | 0;
    $and264 = $70 & 127;
    $arrayidx265 = 78492 + ($and264 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx265;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr263;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $70;
    label = 391;
    break;
   case 33:
    $shr266 = $i_2 >>> 7;
    $and267 = $shr266 & 65535;
    $sub268 = $and267 - 32767 | 0;
    $add_ptr269 = $pc_3 + ($sub268 << 2) | 0;
    $71 = HEAP32[$add_ptr269 >> 2] | 0;
    $and270 = $71 & 127;
    $arrayidx271 = 78492 + ($and270 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx271;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $add_ptr269;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $71;
    label = 391;
    break;
   case 34:
    $shr272 = $i_2 >>> 23;
    $tt275 = $regs_3 + ($shr272 * 12 & -1) + 8 | 0;
    $72 = HEAP32[$tt275 >> 2] | 0;
    $cmp276 = ($72 | 0) == 0;
    if ($cmp276) {
      label = 36;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $shr279 = $i_2 >>> 7;
    $and280 = $shr279 & 65535;
    $sub281 = $and280 - 32767 | 0;
    $add_ptr282 = $pc_3 + ($sub281 << 2) | 0;
    $73 = HEAP32[$add_ptr282 >> 2] | 0;
    $and283 = $73 & 127;
    $arrayidx284 = 78492 + ($and283 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx284;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $add_ptr282;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $73;
    label = 391;
    break;
   case 36:
    $incdec_ptr286 = $pc_3 + 4 | 0;
    $74 = HEAP32[$incdec_ptr286 >> 2] | 0;
    $and287 = $74 & 127;
    $arrayidx288 = 78492 + ($and287 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx288;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr286;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $74;
    label = 391;
    break;
   case 37:
    $shr289 = $i_2 >>> 23;
    $tt292 = $regs_3 + ($shr289 * 12 & -1) + 8 | 0;
    $75 = HEAP32[$tt292 >> 2] | 0;
    $cmp293 = ($75 | 0) == 0;
    if ($cmp293) {
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    $shr296 = $i_2 >>> 7;
    $and297 = $shr296 & 65535;
    $sub298 = $and297 - 32767 | 0;
    $add_ptr299 = $pc_3 + ($sub298 << 2) | 0;
    $76 = HEAP32[$add_ptr299 >> 2] | 0;
    $and300 = $76 & 127;
    $arrayidx301 = 78492 + ($and300 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx301;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $add_ptr299;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $76;
    label = 391;
    break;
   case 39:
    $incdec_ptr303 = $pc_3 + 4 | 0;
    $77 = HEAP32[$incdec_ptr303 >> 2] | 0;
    $and304 = $77 & 127;
    $arrayidx305 = 78492 + ($and304 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx305;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr303;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $77;
    label = 391;
    break;
   case 40:
    $78 = HEAP32[$c306 >> 2] | 0;
    $rsize = $78 + 32 | 0;
    $79 = HEAP32[$rsize >> 2] | 0;
    $ci308 = $78 + 16 | 0;
    $80 = HEAP32[$ci308 >> 2] | 0;
    $ridx = $80 + 32 | 0;
    $81 = HEAP32[$ridx >> 2] | 0;
    $cmp309 = ($79 | 0) > ($81 | 0);
    if ($cmp309) {
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    $cmp314 = ($79 | 0) == 0;
    $mul = $79 << 1;
    $storemerge1544 = $cmp314 ? 16 : $mul;
    HEAP32[$rsize >> 2] = $storemerge1544;
    $82 = HEAP32[$c306 >> 2] | 0;
    $rescue = $82 + 28 | 0;
    $83 = HEAP32[$rescue >> 2] | 0;
    $84 = $83;
    $rsize325 = $82 + 32 | 0;
    $85 = HEAP32[$rsize325 >> 2] | 0;
    $mul326 = $85 << 2;
    $call327 = invoke_iiii(760, $mrb | 0, $84 | 0, $mul326 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $86 = $call327;
    $87 = HEAP32[$c306 >> 2] | 0;
    $rescue329 = $87 + 28 | 0;
    HEAP32[$rescue329 >> 2] = $86;
    label = 42;
    break;
   case 42:
    $shr331 = $i_2 >>> 7;
    $and332 = $shr331 & 65535;
    $sub333 = $and332 - 32767 | 0;
    $add_ptr334 = $pc_3 + ($sub333 << 2) | 0;
    $88 = HEAP32[$c306 >> 2] | 0;
    $ci336 = $88 + 16 | 0;
    $89 = HEAP32[$ci336 >> 2] | 0;
    $ridx337 = $89 + 32 | 0;
    $90 = HEAP32[$ridx337 >> 2] | 0;
    $inc = $90 + 1 | 0;
    HEAP32[$ridx337 >> 2] = $inc;
    $91 = HEAP32[$c306 >> 2] | 0;
    $rescue339 = $91 + 28 | 0;
    $92 = HEAP32[$rescue339 >> 2] | 0;
    $arrayidx340 = $92 + ($90 << 2) | 0;
    HEAP32[$arrayidx340 >> 2] = $add_ptr334;
    $incdec_ptr341 = $pc_3 + 4 | 0;
    $93 = HEAP32[$incdec_ptr341 >> 2] | 0;
    $and342 = $93 & 127;
    $arrayidx343 = 78492 + ($and342 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx343;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr341;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $93;
    label = 391;
    break;
   case 43:
    $94 = HEAP32[$exc >> 2] | 0;
    $95 = $94;
    $96 = HEAP32[$95 >> 2] | 0;
    $bf_clear = $96 & 255;
    $shr345 = $i_2 >>> 23;
    $tt348 = $regs_3 + ($shr345 * 12 & -1) + 8 | 0;
    HEAP32[$tt348 >> 2] = $bf_clear;
    $97 = HEAP32[$exc >> 2] | 0;
    $98 = $97 | 0;
    $value353 = $regs_3 + ($shr345 * 12 & -1) | 0;
    $p = $value353;
    HEAP32[$p >> 2] = $98;
    HEAP32[$exc >> 2] = 0;
    $incdec_ptr356 = $pc_3 + 4 | 0;
    $99 = HEAP32[$incdec_ptr356 >> 2] | 0;
    $and357 = $99 & 127;
    $arrayidx358 = 78492 + ($and357 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx358;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr356;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $99;
    label = 391;
    break;
   case 44:
    $shr361 = $i_2 >>> 23;
    $tobool3631588 = ($shr361 | 0) == 0;
    if ($tobool3631588) {
      label = 46;
      break;
    } else {
      $a360_01589 = $shr361;
      label = 45;
      break;
    }
   case 45:
    $dec = $a360_01589 - 1 | 0;
    $100 = HEAP32[$c364 >> 2] | 0;
    $ci365 = $100 + 16 | 0;
    $101 = HEAP32[$ci365 >> 2] | 0;
    $ridx366 = $101 + 32 | 0;
    $102 = HEAP32[$ridx366 >> 2] | 0;
    $dec367 = $102 - 1 | 0;
    HEAP32[$ridx366 >> 2] = $dec367;
    $tobool363 = ($dec | 0) == 0;
    if ($tobool363) {
      label = 46;
      break;
    } else {
      $a360_01589 = $dec;
      label = 45;
      break;
    }
   case 46:
    $incdec_ptr368 = $pc_3 + 4 | 0;
    $103 = HEAP32[$incdec_ptr368 >> 2] | 0;
    $and369 = $103 & 127;
    $arrayidx370 = 78492 + ($and369 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx370;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr368;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $103;
    label = 391;
    break;
   case 47:
    $shr371 = $i_2 >>> 23;
    $value374 = $regs_3 + ($shr371 * 12 & -1) | 0;
    $p375 = $value374;
    $104 = HEAP32[$p375 >> 2] | 0;
    $105 = $104;
    $exc376 = $mrb + 16 | 0;
    HEAP32[$exc376 >> 2] = $105;
    $proc_addr_2 = $proc_addr_4;
    $irep_3 = $irep_6;
    $pc_1 = $pc_3;
    $regs_0 = $regs_3;
    label = 155;
    break;
   case 48:
    $idx379 = $irep_6 | 0;
    $106 = HEAP32[$idx379 >> 2] | 0;
    $shr380 = $i_2 >>> 7;
    $and381 = $shr380 & 65535;
    $add382 = $106 + $and381 | 0;
    $107 = HEAP32[$irep383 >> 2] | 0;
    $arrayidx384 = $107 + ($add382 << 2) | 0;
    $108 = HEAP32[$arrayidx384 >> 2] | 0;
    $call385 = invoke_iii(418, $mrb | 0, $108 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $109 = HEAP32[$c386 >> 2] | 0;
    $esize = $109 + 40 | 0;
    $110 = HEAP32[$esize >> 2] | 0;
    $ci388 = $109 + 16 | 0;
    $111 = HEAP32[$ci388 >> 2] | 0;
    $eidx = $111 + 36 | 0;
    $112 = HEAP32[$eidx >> 2] | 0;
    $cmp389 = ($110 | 0) > ($112 | 0);
    if ($cmp389) {
      label = 50;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    $cmp394 = ($110 | 0) == 0;
    $mul402 = $110 << 1;
    $storemerge = $cmp394 ? 16 : $mul402;
    HEAP32[$esize >> 2] = $storemerge;
    $113 = HEAP32[$c386 >> 2] | 0;
    $ensure = $113 + 36 | 0;
    $114 = HEAP32[$ensure >> 2] | 0;
    $115 = $114;
    $esize406 = $113 + 40 | 0;
    $116 = HEAP32[$esize406 >> 2] | 0;
    $mul407 = $116 << 2;
    $call408 = invoke_iiii(760, $mrb | 0, $115 | 0, $mul407 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $117 = $call408;
    $118 = HEAP32[$c386 >> 2] | 0;
    $ensure410 = $118 + 36 | 0;
    HEAP32[$ensure410 >> 2] = $117;
    label = 50;
    break;
   case 50:
    $119 = HEAP32[$c386 >> 2] | 0;
    $ci413 = $119 + 16 | 0;
    $120 = HEAP32[$ci413 >> 2] | 0;
    $eidx414 = $120 + 36 | 0;
    $121 = HEAP32[$eidx414 >> 2] | 0;
    $inc415 = $121 + 1 | 0;
    HEAP32[$eidx414 >> 2] = $inc415;
    $122 = HEAP32[$c386 >> 2] | 0;
    $ensure417 = $122 + 36 | 0;
    $123 = HEAP32[$ensure417 >> 2] | 0;
    $arrayidx418 = $123 + ($121 << 2) | 0;
    HEAP32[$arrayidx418 >> 2] = $call385;
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr419 = $pc_3 + 4 | 0;
    $124 = HEAP32[$incdec_ptr419 >> 2] | 0;
    $and420 = $124 & 127;
    $arrayidx421 = 78492 + ($and420 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx421;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr419;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $124;
    label = 391;
    break;
   case 51:
    $shr425 = $i_2 >>> 23;
    $cmp4271586 = ($shr425 | 0) == 0;
    if ($cmp4271586) {
      label = 53;
      break;
    } else {
      $n_01587 = 0;
      label = 52;
      break;
    }
   case 52:
    $125 = HEAP32[$c429 >> 2] | 0;
    $ci430 = $125 + 16 | 0;
    $126 = HEAP32[$ci430 >> 2] | 0;
    $eidx431 = $126 + 36 | 0;
    $127 = HEAP32[$eidx431 >> 2] | 0;
    $dec432 = $127 - 1 | 0;
    HEAP32[$eidx431 >> 2] = $dec432;
    invoke_vii(500, $mrb | 0, $dec432 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $inc433 = $n_01587 + 1 | 0;
    $cmp427 = ($inc433 | 0) < ($shr425 | 0);
    if ($cmp427) {
      $n_01587 = $inc433;
      label = 52;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr434 = $pc_3 + 4 | 0;
    $128 = HEAP32[$incdec_ptr434 >> 2] | 0;
    $and435 = $128 & 127;
    $arrayidx436 = 78492 + ($and435 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx436;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr434;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $128;
    label = 391;
    break;
   case 54:
    $shr439 = $i_2 >>> 23;
    $tt443 = $regs_3 + ($shr439 * 12 & -1) + 8 | 0;
    HEAP32[$tt443 >> 2] = 0;
    $value445 = $regs_3 + ($shr439 * 12 & -1) | 0;
    $i446 = $value445;
    HEAP32[$i446 >> 2] = 0;
    $incdec_ptr448 = $pc_3 + 4 | 0;
    $129 = HEAP32[$incdec_ptr448 >> 2] | 0;
    $and449 = $129 & 127;
    $arrayidx450 = 78492 + ($and449 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx450;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr448;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $129;
    label = 391;
    break;
   case 55:
    $shr453 = $i_0 >>> 23;
    $shr457 = $i_0 >>> 7;
    $and458 = $shr457 & 127;
    $shr467 = $i_0 >>> 14;
    $and468 = $shr467 & 511;
    $arrayidx469 = $syms_2 + ($and468 << 1) | 0;
    $130 = HEAP16[$arrayidx469 >> 1] | 0;
    $arrayidx470 = $regs_3 + ($shr453 * 12 & -1) | 0;
    $131 = $arrayidx470;
    HEAP32[$411 >> 2] = HEAP32[$131 >> 2] | 0;
    HEAP32[$411 + 4 >> 2] = HEAP32[$131 + 4 >> 2] | 0;
    HEAP32[$411 + 8 >> 2] = HEAP32[$131 + 8 >> 2] | 0;
    $and471 = $i_0 & 127;
    $cmp472 = ($and471 | 0) == 33;
    if ($cmp472) {
      label = 59;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    $cmp475 = ($and458 | 0) == 127;
    if ($cmp475) {
      label = 57;
      break;
    } else {
      label = 58;
      break;
    }
   case 57:
    $add479 = $shr453 + 2 | 0;
    $tt481 = $regs_3 + ($add479 * 12 & -1) + 8 | 0;
    HEAP32[$tt481 >> 2] = 0;
    $value484 = $regs_3 + ($add479 * 12 & -1) | 0;
    $i485 = $value484;
    HEAP32[$i485 >> 2] = 0;
    label = 59;
    break;
   case 58:
    $add489 = $shr453 + 1 | 0;
    $add490 = $add489 + $and458 | 0;
    $tt492 = $regs_3 + ($add490 * 12 & -1) + 8 | 0;
    HEAP32[$tt492 >> 2] = 0;
    $value496 = $regs_3 + ($add490 * 12 & -1) | 0;
    $i497 = $value496;
    HEAP32[$i497 >> 2] = 0;
    label = 59;
    break;
   case 59:
    $call501 = invoke_iii(454, $mrb | 0, $recv | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    HEAP32[$c461 >> 2] = $call501;
    $call502 = invoke_iiii(180, 0, $c461 | 0, $130 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $tobool503 = ($call502 | 0) == 0;
    if ($tobool503) {
      label = 60;
      break;
    } else {
      $n456_0 = $and458;
      $m_0 = $call502;
      $mid_0 = $130;
      label = 63;
      break;
    }
   case 60:
    invoke_vii(338, $sym506 | 0, $130 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $call507 = invoke_iiii(100, $mrb | 0, 102816, 14) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $call508 = invoke_iiii(180, 0, $c461 | 0, $call507 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $cmp509 = ($and458 | 0) == 127;
    if ($cmp509) {
      label = 61;
      break;
    } else {
      label = 62;
      break;
    }
   case 61:
    $add512 = $shr453 + 1 | 0;
    $arrayidx513 = $regs_3 + ($add512 * 12 & -1) | 0;
    invoke_viiii(128, $tmp514 | 0, $mrb | 0, $arrayidx513 | 0, $sym506 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $n456_0 = 127;
    $m_0 = $call508;
    $mid_0 = $call507;
    label = 63;
    break;
   case 62:
    $arrayidx470_sum = $shr453 + 2 | 0;
    $add_ptr517 = $regs_3 + ($arrayidx470_sum * 12 & -1) | 0;
    $arrayidx470_sum1526 = $shr453 + 1 | 0;
    $add_ptr519 = $regs_3 + ($arrayidx470_sum1526 * 12 & -1) | 0;
    $inc520 = $and458 + 1 | 0;
    invoke_viii(504, $add_ptr517 | 0, $add_ptr519 | 0, $inc520 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $add521 = $shr453 + 1 | 0;
    $arrayidx522 = $regs_3 + ($add521 * 12 & -1) | 0;
    $132 = $arrayidx522;
    HEAP32[$132 >> 2] = HEAP32[$412 >> 2] | 0;
    HEAP32[$132 + 4 >> 2] = HEAP32[$412 + 4 >> 2] | 0;
    HEAP32[$132 + 8 >> 2] = HEAP32[$412 + 8 >> 2] | 0;
    $n456_0 = $inc520;
    $m_0 = $call508;
    $mid_0 = $call507;
    label = 63;
    break;
   case 63:
    $call525 = invoke_ii(808, $mrb | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $mid526 = $call525 | 0;
    HEAP16[$mid526 >> 1] = $mid_0;
    $proc527 = $call525 + 4 | 0;
    HEAP32[$proc527 >> 2] = $m_0;
    $133 = HEAP32[$c528 >> 2] | 0;
    $stack529 = $133 + 4 | 0;
    $134 = HEAP32[$stack529 >> 2] | 0;
    $stbase = $133 + 8 | 0;
    $135 = HEAP32[$stbase >> 2] | 0;
    $sub_ptr_lhs_cast = $134;
    $sub_ptr_rhs_cast = $135;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $sub_ptr_div = ($sub_ptr_sub | 0) / 12 & -1;
    $stackidx = $call525 + 8 | 0;
    HEAP32[$stackidx >> 2] = $sub_ptr_div;
    $cmp531 = ($n456_0 | 0) == 127;
    $argc = $call525 + 16 | 0;
    $_n456_0 = $cmp531 ? -1 : $n456_0;
    HEAP32[$argc >> 2] = $_n456_0;
    $136 = HEAP32[$c461 >> 2] | 0;
    $137 = $136;
    $138 = HEAP32[$137 >> 2] | 0;
    $bf_clear537 = $138 & 255;
    $cmp538 = ($bf_clear537 | 0) == 11;
    if ($cmp538) {
      label = 64;
      break;
    } else {
      label = 65;
      break;
    }
   case 64:
    $c541 = $136 + 4 | 0;
    $139 = HEAP32[$c541 >> 2] | 0;
    $target_class = $call525 + 28 | 0;
    HEAP32[$target_class >> 2] = $139;
    label = 66;
    break;
   case 65:
    $target_class543 = $call525 + 28 | 0;
    HEAP32[$target_class543 >> 2] = $136;
    label = 66;
    break;
   case 66:
    $add_ptr545 = $pc_3 + 4 | 0;
    $pc546 = $call525 + 20 | 0;
    HEAP32[$pc546 >> 2] = $add_ptr545;
    $acc = $call525 + 24 | 0;
    HEAP32[$acc >> 2] = $shr453;
    $140 = HEAP32[$c528 >> 2] | 0;
    $stack548 = $140 + 4 | 0;
    $141 = HEAP32[$stack548 >> 2] | 0;
    $add_ptr549 = $141 + ($shr453 * 12 & -1) | 0;
    HEAP32[$stack548 >> 2] = $add_ptr549;
    $142 = $m_0;
    $143 = HEAP32[$142 >> 2] | 0;
    $and551 = $143 & 262144;
    $cmp552 = ($and551 | 0) == 0;
    if ($cmp552) {
      label = 75;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    if ($cmp531) {
      label = 68;
      break;
    } else {
      label = 69;
      break;
    }
   case 68:
    $nregs558 = $call525 + 12 | 0;
    HEAP32[$nregs558 >> 2] = 3;
    label = 70;
    break;
   case 69:
    $add560 = $n456_0 + 2 | 0;
    $nregs561 = $call525 + 12 | 0;
    HEAP32[$nregs561 >> 2] = $add560;
    label = 70;
    break;
   case 70:
    $body563 = $m_0 + 12 | 0;
    $func = $body563;
    $144 = HEAP32[$func >> 2] | 0;
    invoke_viii($144 | 0, $result | 0, $mrb | 0, $recv | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $145 = HEAP32[$c528 >> 2] | 0;
    $stack566 = $145 + 4 | 0;
    $146 = HEAP32[$stack566 >> 2] | 0;
    $147 = $146;
    HEAP32[$147 >> 2] = HEAP32[$413 >> 2] | 0;
    HEAP32[$147 + 4 >> 2] = HEAP32[$413 + 4 >> 2] | 0;
    HEAP32[$147 + 8 >> 2] = HEAP32[$413 + 8 >> 2] | 0;
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $148 = HEAP32[$exc568 >> 2] | 0;
    $tobool569 = ($148 | 0) == 0;
    if ($tobool569) {
      label = 71;
      break;
    } else {
      $proc_addr_2 = $proc_addr_4;
      $irep_3 = $irep_6;
      $pc_1 = $pc_3;
      $regs_0 = $regs_3;
      label = 155;
      break;
    }
   case 71:
    $149 = HEAP32[$c528 >> 2] | 0;
    $ci573 = $149 + 16 | 0;
    $150 = HEAP32[$ci573 >> 2] | 0;
    $target_class574 = $150 + 28 | 0;
    $151 = HEAP32[$target_class574 >> 2] | 0;
    $tobool575 = ($151 | 0) == 0;
    if ($tobool575) {
      label = 72;
      break;
    } else {
      $irep_0 = $irep_6;
      $pool_0 = $pool_2;
      $syms_0 = $syms_2;
      label = 74;
      break;
    }
   case 72:
    $proc578 = $150 - 44 + 4 | 0;
    $152 = HEAP32[$proc578 >> 2] | 0;
    $153 = $152;
    $154 = HEAP32[$153 >> 2] | 0;
    $and580 = $154 & 262144;
    $cmp581 = ($and580 | 0) == 0;
    if ($cmp581) {
      label = 73;
      break;
    } else {
      $irep_0 = $irep_6;
      $pool_0 = $pool_2;
      $syms_0 = $syms_2;
      label = 74;
      break;
    }
   case 73:
    $irep587 = $152 + 12 | 0;
    $155 = HEAP32[$irep587 >> 2] | 0;
    $pool588 = $155 + 16 | 0;
    $156 = HEAP32[$pool588 >> 2] | 0;
    $syms589 = $155 + 20 | 0;
    $157 = HEAP32[$syms589 >> 2] | 0;
    $irep_0 = $155;
    $pool_0 = $156;
    $syms_0 = $157;
    label = 74;
    break;
   case 74:
    $158 = HEAP32[$c528 >> 2] | 0;
    $stbase593 = $158 + 8 | 0;
    $159 = HEAP32[$stbase593 >> 2] | 0;
    $stackidx594 = $150 + 8 | 0;
    $160 = HEAP32[$stackidx594 >> 2] | 0;
    $add_ptr595 = $159 + ($160 * 12 & -1) | 0;
    $stack597 = $158 + 4 | 0;
    HEAP32[$stack597 >> 2] = $add_ptr595;
    $pc598 = $150 + 20 | 0;
    $161 = HEAP32[$pc598 >> 2] | 0;
    invoke_vi(300, $mrb | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $162 = HEAP32[$161 >> 2] | 0;
    $and599 = $162 & 127;
    $arrayidx600 = 78492 + ($and599 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx600;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_0;
    $pc_3 = $161;
    $pool_2 = $pool_0;
    $syms_2 = $syms_0;
    $regs_3 = $add_ptr595;
    $i_2 = $162;
    label = 391;
    break;
   case 75:
    $163 = HEAP32[$c528 >> 2] | 0;
    $ci603 = $163 + 16 | 0;
    $164 = HEAP32[$ci603 >> 2] | 0;
    $proc604 = $164 + 4 | 0;
    HEAP32[$proc604 >> 2] = $m_0;
    $irep606 = $m_0 + 12 | 0;
    $165 = HEAP32[$irep606 >> 2] | 0;
    $pool607 = $165 + 16 | 0;
    $166 = HEAP32[$pool607 >> 2] | 0;
    $syms608 = $165 + 20 | 0;
    $167 = HEAP32[$syms608 >> 2] | 0;
    $nregs609 = $165 + 6 | 0;
    $168 = HEAP16[$nregs609 >> 1] | 0;
    $conv610 = $168 & 65535;
    $nregs611 = $call525 + 12 | 0;
    HEAP32[$nregs611 >> 2] = $conv610;
    $169 = HEAP32[$argc >> 2] | 0;
    $cmp613 = ($169 | 0) < 0;
    $170 = HEAP16[$nregs609 >> 1] | 0;
    $conv617 = $170 & 65535;
    if ($cmp613) {
      label = 76;
      break;
    } else {
      label = 77;
      break;
    }
   case 76:
    $cmp618 = ($170 & 65535) < 3;
    $_conv617 = $cmp618 ? 3 : $conv617;
    invoke_viii(642, $mrb | 0, $_conv617 | 0, 3);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 78;
    break;
   case 77:
    $add626 = $169 + 2 | 0;
    invoke_viii(642, $mrb | 0, $conv617 | 0, $add626 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 78;
    break;
   case 78:
    $171 = HEAP32[$c528 >> 2] | 0;
    $stack629 = $171 + 4 | 0;
    $172 = HEAP32[$stack629 >> 2] | 0;
    $iseq630 = $165 + 12 | 0;
    $173 = HEAP32[$iseq630 >> 2] | 0;
    $174 = HEAP32[$173 >> 2] | 0;
    $and631 = $174 & 127;
    $arrayidx632 = 78492 + ($and631 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx632;
    $proc_addr_4 = $m_0;
    $irep_6 = $165;
    $pc_3 = $173;
    $pool_2 = $166;
    $syms_2 = $167;
    $regs_3 = $172;
    $i_2 = $174;
    label = 391;
    break;
   case 79:
    $incdec_ptr633 = $pc_3 + 4 | 0;
    $175 = HEAP32[$incdec_ptr633 >> 2] | 0;
    $and634 = $175 & 127;
    $arrayidx635 = 78492 + ($and634 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx635;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr633;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $175;
    label = 391;
    break;
   case 80:
    $176 = HEAP32[$c640 >> 2] | 0;
    $stack641 = $176 + 4 | 0;
    $177 = HEAP32[$stack641 >> 2] | 0;
    $178 = $177;
    HEAP32[$414 >> 2] = HEAP32[$178 >> 2] | 0;
    HEAP32[$414 + 4 >> 2] = HEAP32[$178 + 4 >> 2] | 0;
    HEAP32[$414 + 8 >> 2] = HEAP32[$178 + 8 >> 2] | 0;
    $179 = HEAP32[$p646 >> 2] | 0;
    $180 = $179;
    $181 = HEAP32[$c640 >> 2] | 0;
    $ci648 = $181 + 16 | 0;
    $182 = HEAP32[$ci648 >> 2] | 0;
    $target_class649 = $179 + 16 | 0;
    $183 = $target_class649;
    $184 = HEAP32[$183 >> 2] | 0;
    $target_class650 = $182 + 28 | 0;
    HEAP32[$target_class650 >> 2] = $184;
    $proc651 = $182 + 4 | 0;
    HEAP32[$proc651 >> 2] = $180;
    $env = $179 + 20 | 0;
    $185 = $env;
    $186 = HEAP32[$185 >> 2] | 0;
    $tobool652 = ($186 | 0) == 0;
    if ($tobool652) {
      label = 85;
      break;
    } else {
      label = 81;
      break;
    }
   case 81:
    $mid655 = $186 + 16 | 0;
    $187 = HEAP16[$mid655 >> 1] | 0;
    $tobool656 = $187 << 16 >> 16 == 0;
    if ($tobool656) {
      label = 83;
      break;
    } else {
      label = 82;
      break;
    }
   case 82:
    $mid660 = $182 | 0;
    HEAP16[$mid660 >> 1] = $187;
    label = 83;
    break;
   case 83:
    $188 = HEAP32[$185 >> 2] | 0;
    $stack663 = $188 + 12 | 0;
    $189 = HEAP32[$stack663 >> 2] | 0;
    $tobool664 = ($189 | 0) == 0;
    if ($tobool664) {
      label = 84;
      break;
    } else {
      label = 85;
      break;
    }
   case 84:
    $190 = HEAP32[$c640 >> 2] | 0;
    $stack667 = $190 + 4 | 0;
    $191 = HEAP32[$stack667 >> 2] | 0;
    HEAP32[$stack663 >> 2] = $191;
    label = 85;
    break;
   case 85:
    $192 = $179;
    $193 = HEAP32[$192 >> 2] | 0;
    $and673 = $193 & 262144;
    $cmp674 = ($and673 | 0) == 0;
    $body705 = $179 + 12 | 0;
    if ($cmp674) {
      label = 88;
      break;
    } else {
      label = 86;
      break;
    }
   case 86:
    $func678 = $body705;
    $194 = HEAP32[$func678 >> 2] | 0;
    invoke_viii($194 | 0, $tmp679 | 0, $mrb | 0, $recv639 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    HEAP32[$414 >> 2] = HEAP32[$415 >> 2] | 0;
    HEAP32[$414 + 4 >> 2] = HEAP32[$415 + 4 >> 2] | 0;
    HEAP32[$414 + 8 >> 2] = HEAP32[$415 + 8 >> 2] | 0;
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $195 = HEAP32[$exc680 >> 2] | 0;
    $tobool681 = ($195 | 0) == 0;
    if ($tobool681) {
      label = 87;
      break;
    } else {
      $proc_addr_2 = $proc_addr_4;
      $irep_3 = $irep_6;
      $pc_1 = $pc_3;
      $regs_0 = $regs_3;
      label = 155;
      break;
    }
   case 87:
    $196 = HEAP32[$c640 >> 2] | 0;
    $ci685 = $196 + 16 | 0;
    $197 = HEAP32[$ci685 >> 2] | 0;
    $stbase687 = $196 + 8 | 0;
    $198 = HEAP32[$stbase687 >> 2] | 0;
    $stackidx688 = $197 + 8 | 0;
    $199 = HEAP32[$stackidx688 >> 2] | 0;
    $add_ptr689 = $198 + ($199 * 12 & -1) | 0;
    $stack691 = $196 + 4 | 0;
    HEAP32[$stack691 >> 2] = $add_ptr689;
    $acc692 = $197 + 24 | 0;
    $200 = HEAP32[$acc692 >> 2] | 0;
    $add_ptr689_sum = $200 + $199 | 0;
    $arrayidx693 = $198 + ($add_ptr689_sum * 12 & -1) | 0;
    $201 = $arrayidx693;
    HEAP32[$201 >> 2] = HEAP32[$414 >> 2] | 0;
    HEAP32[$201 + 4 >> 2] = HEAP32[$414 + 4 >> 2] | 0;
    HEAP32[$201 + 8 >> 2] = HEAP32[$414 + 8 >> 2] | 0;
    $pc694 = $197 + 20 | 0;
    $202 = HEAP32[$pc694 >> 2] | 0;
    invoke_vi(300, $mrb | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $203 = HEAP32[$c640 >> 2] | 0;
    $ci696 = $203 + 16 | 0;
    $204 = HEAP32[$ci696 >> 2] | 0;
    $proc697 = $204 + 4 | 0;
    $205 = HEAP32[$proc697 >> 2] | 0;
    $irep699 = $205 + 12 | 0;
    $206 = HEAP32[$irep699 >> 2] | 0;
    $pool700 = $206 + 16 | 0;
    $207 = HEAP32[$pool700 >> 2] | 0;
    $syms701 = $206 + 20 | 0;
    $208 = HEAP32[$syms701 >> 2] | 0;
    $209 = HEAP32[$202 >> 2] | 0;
    $and702 = $209 & 127;
    $arrayidx703 = 78492 + ($and702 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx703;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $206;
    $pc_3 = $202;
    $pool_2 = $207;
    $syms_2 = $208;
    $regs_3 = $add_ptr689;
    $i_2 = $209;
    label = 391;
    break;
   case 88:
    $irep706 = $body705;
    $210 = HEAP32[$irep706 >> 2] | 0;
    $tobool707 = ($210 | 0) == 0;
    if ($tobool707) {
      label = 89;
      break;
    } else {
      label = 90;
      break;
    }
   case 89:
    $211 = HEAP32[$c640 >> 2] | 0;
    $stack710 = $211 + 4 | 0;
    $212 = HEAP32[$stack710 >> 2] | 0;
    invoke_vi(182, $tmp712 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $213 = $212;
    $214 = $tmp712;
    HEAP32[$213 >> 2] = HEAP32[$214 >> 2] | 0;
    HEAP32[$213 + 4 >> 2] = HEAP32[$214 + 4 >> 2] | 0;
    HEAP32[$213 + 8 >> 2] = HEAP32[$214 + 8 >> 2] | 0;
    $proc_addr_0 = $180;
    $irep_1 = 0;
    label = 153;
    break;
   case 90:
    $pool714 = $210 + 16 | 0;
    $215 = HEAP32[$pool714 >> 2] | 0;
    $syms715 = $210 + 20 | 0;
    $216 = HEAP32[$syms715 >> 2] | 0;
    $nregs716 = $210 + 6 | 0;
    $217 = HEAP16[$nregs716 >> 1] | 0;
    $conv717 = $217 & 65535;
    $nregs718 = $182 + 12 | 0;
    HEAP32[$nregs718 >> 2] = $conv717;
    $argc719 = $182 + 16 | 0;
    $218 = HEAP32[$argc719 >> 2] | 0;
    $cmp720 = ($218 | 0) < 0;
    $219 = HEAP16[$nregs716 >> 1] | 0;
    $conv724 = $219 & 65535;
    if ($cmp720) {
      label = 91;
      break;
    } else {
      label = 92;
      break;
    }
   case 91:
    $cmp725 = ($219 & 65535) < 3;
    $_conv724 = $cmp725 ? 3 : $conv724;
    invoke_viii(642, $mrb | 0, $_conv724 | 0, 3);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 93;
    break;
   case 92:
    $add737 = $218 + 2 | 0;
    invoke_viii(642, $mrb | 0, $conv724 | 0, $add737 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 93;
    break;
   case 93:
    $220 = HEAP32[$c640 >> 2] | 0;
    $stack740 = $220 + 4 | 0;
    $221 = HEAP32[$stack740 >> 2] | 0;
    $222 = HEAP32[$185 >> 2] | 0;
    $stack743 = $222 + 12 | 0;
    $223 = HEAP32[$stack743 >> 2] | 0;
    $224 = $221;
    $225 = $223;
    HEAP32[$224 >> 2] = HEAP32[$225 >> 2] | 0;
    HEAP32[$224 + 4 >> 2] = HEAP32[$225 + 4 >> 2] | 0;
    HEAP32[$224 + 8 >> 2] = HEAP32[$225 + 8 >> 2] | 0;
    $226 = HEAP32[$irep706 >> 2] | 0;
    $iseq747 = $226 + 12 | 0;
    $227 = HEAP32[$iseq747 >> 2] | 0;
    $228 = HEAP32[$227 >> 2] | 0;
    $and748 = $228 & 127;
    $arrayidx749 = 78492 + ($and748 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx749;
    $proc_addr_4 = $180;
    $irep_6 = $210;
    $pc_3 = $227;
    $pool_2 = $215;
    $syms_2 = $216;
    $regs_3 = $221;
    $i_2 = $228;
    label = 391;
    break;
   case 94:
    $229 = HEAP32[$c754 >> 2] | 0;
    $ci755 = $229 + 16 | 0;
    $230 = HEAP32[$ci755 >> 2] | 0;
    $mid762 = $230 | 0;
    $231 = HEAP16[$mid762 >> 1] | 0;
    $shr765 = $i_2 >>> 23;
    $shr769 = $i_2 >>> 7;
    $and770 = $shr769 & 127;
    $232 = $regs_3;
    HEAP32[$416 >> 2] = HEAP32[$232 >> 2] | 0;
    HEAP32[$416 + 4 >> 2] = HEAP32[$232 + 4 >> 2] | 0;
    HEAP32[$416 + 8 >> 2] = HEAP32[$232 + 8 >> 2] | 0;
    $233 = HEAP32[$c754 >> 2] | 0;
    $ci773 = $233 + 16 | 0;
    $234 = HEAP32[$ci773 >> 2] | 0;
    $target_class774 = $234 + 28 | 0;
    $235 = HEAP32[$target_class774 >> 2] | 0;
    $super = $235 + 20 | 0;
    $236 = HEAP32[$super >> 2] | 0;
    HEAP32[$c759 >> 2] = $236;
    $call775 = invoke_iiii(180, 0, $c759 | 0, $231 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $tobool776 = ($call775 | 0) == 0;
    if ($tobool776) {
      label = 95;
      break;
    } else {
      $m757_0 = $call775;
      $mid761_0 = $231;
      $n768_0 = $and770;
      label = 98;
      break;
    }
   case 95:
    $call778 = invoke_iiii(100, $mrb | 0, 102816, 14) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $call779 = invoke_iiii(180, 0, $c759 | 0, $call778 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $cmp780 = ($and770 | 0) == 127;
    if ($cmp780) {
      label = 96;
      break;
    } else {
      label = 97;
      break;
    }
   case 96:
    $add783 = $shr765 + 1 | 0;
    $arrayidx784 = $regs_3 + ($add783 * 12 & -1) | 0;
    $237 = HEAP16[$mid762 >> 1] | 0;
    invoke_vii(338, $agg_tmp | 0, $237 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    invoke_viiii(128, $tmp786 | 0, $mrb | 0, $arrayidx784 | 0, $agg_tmp | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $m757_0 = $call779;
    $mid761_0 = $call778;
    $n768_0 = 127;
    label = 98;
    break;
   case 97:
    $add_ptr788_sum = $shr765 + 2 | 0;
    $add_ptr789 = $regs_3 + ($add_ptr788_sum * 12 & -1) | 0;
    $add_ptr788_sum1543 = $shr765 + 1 | 0;
    $add_ptr791 = $regs_3 + ($add_ptr788_sum1543 * 12 & -1) | 0;
    $inc792 = $and770 + 1 | 0;
    invoke_viii(504, $add_ptr789 | 0, $add_ptr791 | 0, $inc792 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $add794 = $shr765 + 1 | 0;
    $tt796 = $regs_3 + ($add794 * 12 & -1) + 8 | 0;
    HEAP32[$tt796 >> 2] = 4;
    $238 = HEAP16[$mid762 >> 1] | 0;
    $value800 = $regs_3 + ($add794 * 12 & -1) | 0;
    $sym801 = $value800;
    HEAP16[$sym801 >> 1] = $238;
    $m757_0 = $call779;
    $mid761_0 = $call778;
    $n768_0 = $inc792;
    label = 98;
    break;
   case 98:
    $call805 = invoke_ii(808, $mrb | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $mid806 = $call805 | 0;
    HEAP16[$mid806 >> 1] = $mid761_0;
    $proc807 = $call805 + 4 | 0;
    HEAP32[$proc807 >> 2] = $m757_0;
    $239 = HEAP32[$c754 >> 2] | 0;
    $stack809 = $239 + 4 | 0;
    $240 = HEAP32[$stack809 >> 2] | 0;
    $stbase811 = $239 + 8 | 0;
    $241 = HEAP32[$stbase811 >> 2] | 0;
    $sub_ptr_lhs_cast812 = $240;
    $sub_ptr_rhs_cast813 = $241;
    $sub_ptr_sub814 = $sub_ptr_lhs_cast812 - $sub_ptr_rhs_cast813 | 0;
    $sub_ptr_div815 = ($sub_ptr_sub814 | 0) / 12 & -1;
    $stackidx816 = $call805 + 8 | 0;
    HEAP32[$stackidx816 >> 2] = $sub_ptr_div815;
    $cmp817 = ($n768_0 | 0) == 127;
    $argc820 = $call805 + 16 | 0;
    $_n768_0 = $cmp817 ? -1 : $n768_0;
    HEAP32[$argc820 >> 2] = $_n768_0;
    $target_class824 = $m757_0 + 16 | 0;
    $242 = HEAP32[$target_class824 >> 2] | 0;
    $target_class825 = $call805 + 28 | 0;
    HEAP32[$target_class825 >> 2] = $242;
    $add_ptr826 = $pc_3 + 4 | 0;
    $pc827 = $call805 + 20 | 0;
    HEAP32[$pc827 >> 2] = $add_ptr826;
    $243 = HEAP32[$c754 >> 2] | 0;
    $stack829 = $243 + 4 | 0;
    $244 = HEAP32[$stack829 >> 2] | 0;
    $add_ptr830 = $244 + ($shr765 * 12 & -1) | 0;
    HEAP32[$stack829 >> 2] = $add_ptr830;
    $245 = HEAP32[$c754 >> 2] | 0;
    $stack832 = $245 + 4 | 0;
    $246 = HEAP32[$stack832 >> 2] | 0;
    $247 = $246;
    HEAP32[$247 >> 2] = HEAP32[$416 >> 2] | 0;
    HEAP32[$247 + 4 >> 2] = HEAP32[$416 + 4 >> 2] | 0;
    HEAP32[$247 + 8 >> 2] = HEAP32[$416 + 8 >> 2] | 0;
    $248 = $m757_0;
    $249 = HEAP32[$248 >> 2] | 0;
    $and835 = $249 & 262144;
    $cmp836 = ($and835 | 0) == 0;
    if ($cmp836) {
      label = 101;
      break;
    } else {
      label = 99;
      break;
    }
   case 99:
    $250 = HEAP32[$c754 >> 2] | 0;
    $stack840 = $250 + 4 | 0;
    $251 = HEAP32[$stack840 >> 2] | 0;
    $body842 = $m757_0 + 12 | 0;
    $func843 = $body842;
    $252 = HEAP32[$func843 >> 2] | 0;
    invoke_viii($252 | 0, $tmp844 | 0, $mrb | 0, $recv751 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $253 = $251;
    HEAP32[$253 >> 2] = HEAP32[$417 >> 2] | 0;
    HEAP32[$253 + 4 >> 2] = HEAP32[$417 + 4 >> 2] | 0;
    HEAP32[$253 + 8 >> 2] = HEAP32[$417 + 8 >> 2] | 0;
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $254 = HEAP32[$exc845 >> 2] | 0;
    $tobool846 = ($254 | 0) == 0;
    if ($tobool846) {
      label = 100;
      break;
    } else {
      $proc_addr_2 = $proc_addr_4;
      $irep_3 = $irep_6;
      $pc_1 = $pc_3;
      $regs_0 = $regs_3;
      label = 155;
      break;
    }
   case 100:
    $255 = HEAP32[$c754 >> 2] | 0;
    $stbase850 = $255 + 8 | 0;
    $256 = HEAP32[$stbase850 >> 2] | 0;
    $ci852 = $255 + 16 | 0;
    $257 = HEAP32[$ci852 >> 2] | 0;
    $stackidx853 = $257 + 8 | 0;
    $258 = HEAP32[$stackidx853 >> 2] | 0;
    $add_ptr854 = $256 + ($258 * 12 & -1) | 0;
    $stack856 = $255 + 4 | 0;
    HEAP32[$stack856 >> 2] = $add_ptr854;
    invoke_vi(300, $mrb | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $259 = HEAP32[$add_ptr826 >> 2] | 0;
    $and858 = $259 & 127;
    $arrayidx859 = 78492 + ($and858 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx859;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $add_ptr826;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $add_ptr854;
    $i_2 = $259;
    label = 391;
    break;
   case 101:
    $acc861 = $call805 + 24 | 0;
    HEAP32[$acc861 >> 2] = $shr765;
    HEAP32[$proc807 >> 2] = $m757_0;
    $irep864 = $m757_0 + 12 | 0;
    $260 = HEAP32[$irep864 >> 2] | 0;
    $pool865 = $260 + 16 | 0;
    $261 = HEAP32[$pool865 >> 2] | 0;
    $syms866 = $260 + 20 | 0;
    $262 = HEAP32[$syms866 >> 2] | 0;
    $nregs867 = $260 + 6 | 0;
    $263 = HEAP16[$nregs867 >> 1] | 0;
    $conv868 = $263 & 65535;
    $nregs869 = $call805 + 12 | 0;
    HEAP32[$nregs869 >> 2] = $conv868;
    $264 = HEAP16[$nregs867 >> 1] | 0;
    $conv874 = $264 & 65535;
    if ($cmp817) {
      label = 102;
      break;
    } else {
      label = 103;
      break;
    }
   case 102:
    $cmp875 = ($264 & 65535) < 3;
    $_conv874 = $cmp875 ? 3 : $conv874;
    invoke_viii(642, $mrb | 0, $_conv874 | 0, 3);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 104;
    break;
   case 103:
    $265 = HEAP32[$argc820 >> 2] | 0;
    $add887 = $265 + 2 | 0;
    invoke_viii(642, $mrb | 0, $conv874 | 0, $add887 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 104;
    break;
   case 104:
    $266 = HEAP32[$c754 >> 2] | 0;
    $stack890 = $266 + 4 | 0;
    $267 = HEAP32[$stack890 >> 2] | 0;
    $iseq891 = $260 + 12 | 0;
    $268 = HEAP32[$iseq891 >> 2] | 0;
    $269 = HEAP32[$268 >> 2] | 0;
    $and892 = $269 & 127;
    $arrayidx893 = 78492 + ($and892 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx893;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $260;
    $pc_3 = $268;
    $pool_2 = $261;
    $syms_2 = $262;
    $regs_3 = $267;
    $i_2 = $269;
    label = 391;
    break;
   case 105:
    $shr896 = $i_2 >>> 23;
    $shr899 = $i_2 >>> 7;
    $shr9021538 = $i_2 >>> 17;
    $and903 = $shr9021538 & 63;
    $shr9051539 = $i_2 >>> 16;
    $and906 = $shr9051539 & 1;
    $shr9081540 = $i_2 >>> 11;
    $and909 = $shr9081540 & 31;
    $and912 = $shr899 & 15;
    $cmp915 = ($and912 | 0) == 0;
    if ($cmp915) {
      $regs_3_pn1541 = $regs_3;
      label = 109;
      break;
    } else {
      label = 106;
      break;
    }
   case 106:
    $sub922 = $and912 - 1 | 0;
    $call923 = invoke_iii(326, $mrb | 0, $sub922 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $tobool924 = ($call923 | 0) == 0;
    if ($tobool924) {
      label = 107;
      break;
    } else {
      label = 108;
      break;
    }
   case 107:
    $call928 = invoke_iii(198, $mrb | 0, 97508) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    invoke_viiiii(98, $tmp929 | 0, $mrb | 0, $call928 | 0, 78824, 30);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $exc927_sroa_0_0__cast = $tmp929;
    $exc927_sroa_0_0_copyload = HEAP32[$exc927_sroa_0_0__cast >> 2] | 0;
    $270 = $exc927_sroa_0_0_copyload;
    $exc932 = $mrb + 16 | 0;
    HEAP32[$exc932 >> 2] = $270;
    $proc_addr_2 = $proc_addr_4;
    $irep_3 = $irep_6;
    $pc_1 = $pc_3;
    $regs_0 = $regs_3;
    label = 155;
    break;
   case 108:
    $stack934 = $call923 + 12 | 0;
    $271 = HEAP32[$stack934 >> 2] | 0;
    $regs_3_pn1541 = $271;
    label = 109;
    break;
   case 109:
    $stack914_0 = $regs_3_pn1541 + 12 | 0;
    $cmp937 = ($and906 | 0) == 0;
    if ($cmp937) {
      label = 110;
      break;
    } else {
      label = 111;
      break;
    }
   case 110:
    $arrayidx940 = $regs_3 + ($shr896 * 12 & -1) | 0;
    $add941 = $and903 + $and909 | 0;
    invoke_viiii(506, $tmp942 | 0, $mrb | 0, $add941 | 0, $stack914_0 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $272 = $arrayidx940;
    HEAP32[$272 >> 2] = HEAP32[$418 >> 2] | 0;
    HEAP32[$272 + 4 >> 2] = HEAP32[$418 + 4 >> 2] | 0;
    HEAP32[$272 + 8 >> 2] = HEAP32[$418 + 8 >> 2] | 0;
    label = 118;
    break;
   case 111:
    $stack914_0_sum = $and903 + 1 | 0;
    $tt948 = $regs_3_pn1541 + ($stack914_0_sum * 12 & -1) + 8 | 0;
    $273 = HEAP32[$tt948 >> 2] | 0;
    $cmp949 = ($273 | 0) == 14;
    if ($cmp949) {
      label = 112;
      break;
    } else {
      $pp_0 = 0;
      $len_0 = 0;
      label = 113;
      break;
    }
   case 112:
    $value954 = $regs_3_pn1541 + ($stack914_0_sum * 12 & -1) | 0;
    $p955 = $value954;
    $274 = HEAP32[$p955 >> 2] | 0;
    $ptr = $274 + 20 | 0;
    $275 = $ptr;
    $276 = HEAP32[$275 >> 2] | 0;
    $len956 = $274 + 12 | 0;
    $277 = $len956;
    $278 = HEAP32[$277 >> 2] | 0;
    $pp_0 = $276;
    $len_0 = $278;
    label = 113;
    break;
   case 113:
    $arrayidx958 = $regs_3 + ($shr896 * 12 & -1) | 0;
    $add959 = $and909 + $and903 | 0;
    $add960 = $add959 + $len_0 | 0;
    invoke_viii(590, $tmp961 | 0, $mrb | 0, $add960 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $279 = $arrayidx958;
    HEAP32[$279 >> 2] = HEAP32[$419 >> 2] | 0;
    HEAP32[$279 + 4 >> 2] = HEAP32[$419 + 4 >> 2] | 0;
    HEAP32[$279 + 8 >> 2] = HEAP32[$419 + 8 >> 2] | 0;
    $p964 = $arrayidx958;
    $280 = HEAP32[$p964 >> 2] | 0;
    $ptr965 = $280 + 20 | 0;
    $281 = $ptr965;
    $282 = HEAP32[$281 >> 2] | 0;
    invoke_viii(216, $282 | 0, $stack914_0 | 0, $and903 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $cmp966 = ($len_0 | 0) > 0;
    if ($cmp966) {
      label = 114;
      break;
    } else {
      label = 115;
      break;
    }
   case 114:
    $283 = HEAP32[$281 >> 2] | 0;
    $add_ptr970 = $283 + ($and903 * 12 & -1) | 0;
    invoke_viii(216, $add_ptr970 | 0, $pp_0 | 0, $len_0 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 115;
    break;
   case 115:
    $cmp972 = ($and909 | 0) == 0;
    if ($cmp972) {
      label = 117;
      break;
    } else {
      label = 116;
      break;
    }
   case 116:
    $284 = HEAP32[$281 >> 2] | 0;
    $add_ptr976_sum = $len_0 + $and903 | 0;
    $add_ptr977 = $284 + ($add_ptr976_sum * 12 & -1) | 0;
    $arrayidx947_sum = $and903 + 2 | 0;
    $add_ptr979 = $regs_3_pn1541 + ($arrayidx947_sum * 12 & -1) | 0;
    invoke_viii(216, $add_ptr977 | 0, $add_ptr979 | 0, $and909 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 117;
    break;
   case 117:
    $len983 = $280 + 12 | 0;
    $285 = $len983;
    HEAP32[$285 >> 2] = $add960;
    label = 118;
    break;
   case 118:
    $add985 = $shr896 + 1 | 0;
    $arrayidx986 = $regs_3 + ($add985 * 12 & -1) | 0;
    $add987 = $and906 + 1 | 0;
    $add988 = $add987 + $and903 | 0;
    $stack914_0_sum1542 = $add988 + $and909 | 0;
    $arrayidx989 = $regs_3_pn1541 + ($stack914_0_sum1542 * 12 & -1) | 0;
    $286 = $arrayidx986;
    $287 = $arrayidx989;
    HEAP32[$286 >> 2] = HEAP32[$287 >> 2] | 0;
    HEAP32[$286 + 4 >> 2] = HEAP32[$287 + 4 >> 2] | 0;
    HEAP32[$286 + 8 >> 2] = HEAP32[$287 + 8 >> 2] | 0;
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr990 = $pc_3 + 4 | 0;
    $288 = HEAP32[$incdec_ptr990 >> 2] | 0;
    $and991 = $288 & 127;
    $arrayidx992 = 78492 + ($and991 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx992;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr990;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $288;
    label = 391;
    break;
   case 119:
    $shr994 = $i_2 >>> 14;
    $shr998 = $i_2 >>> 25;
    $and999 = $shr998 & 31;
    $shr1001 = $i_2 >>> 20;
    $and1002 = $shr1001 & 31;
    $shr1005 = $i_2 >>> 19;
    $and1006 = $shr1005 & 1;
    $and1010 = $shr994 & 31;
    $289 = HEAP32[$c1013 >> 2] | 0;
    $ci1014 = $289 + 16 | 0;
    $290 = HEAP32[$ci1014 >> 2] | 0;
    $argc1015 = $290 + 16 | 0;
    $291 = HEAP32[$argc1015 >> 2] | 0;
    $add_ptr1017 = $regs_3 + 12 | 0;
    $add1021 = $and999 + $and1002 | 0;
    $add1022 = $add1021 + $and1006 | 0;
    $add1023 = $add1022 + $and1010 | 0;
    $cmp1025 = ($291 | 0) < 0;
    $_op = $291 + 1 | 0;
    $add_ptr1017_sum = $cmp1025 ? 2 : $_op;
    $arrayidx1031 = $regs_3 + ($add_ptr1017_sum * 12 & -1) | 0;
    if ($cmp1025) {
      label = 120;
      break;
    } else {
      $argc1012_0 = $291;
      $argv_0 = $add_ptr1017;
      label = 121;
      break;
    }
   case 120:
    $p1039 = $add_ptr1017;
    $292 = HEAP32[$p1039 >> 2] | 0;
    $ptr1040 = $292 + 20 | 0;
    $293 = $ptr1040;
    $294 = HEAP32[$293 >> 2] | 0;
    $len1041 = $292 + 12 | 0;
    $295 = $len1041;
    $296 = HEAP32[$295 >> 2] | 0;
    invoke_vii(370, $mrb | 0, $add_ptr1017 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $argc1012_0 = $296;
    $argv_0 = $294;
    label = 121;
    break;
   case 121:
    $297 = HEAP32[$c1013 >> 2] | 0;
    $ci1045 = $297 + 16 | 0;
    $298 = HEAP32[$ci1045 >> 2] | 0;
    $proc1046 = $298 + 4 | 0;
    $299 = HEAP32[$proc1046 >> 2] | 0;
    $tobool1047 = ($299 | 0) == 0;
    if ($tobool1047) {
      label = 127;
      break;
    } else {
      label = 122;
      break;
    }
   case 122:
    $300 = $299;
    $301 = HEAP32[$300 >> 2] | 0;
    $and1052 = $301 & 524288;
    $cmp1053 = ($and1052 | 0) == 0;
    if ($cmp1053) {
      label = 127;
      break;
    } else {
      label = 123;
      break;
    }
   case 123:
    $cmp1056 = ($argc1012_0 | 0) > -1;
    if ($cmp1056) {
      label = 124;
      break;
    } else {
      $argc1012_1 = $argc1012_0;
      $argv_1 = $argv_0;
      label = 130;
      break;
    }
   case 124:
    $add1059 = $and999 + $and1010 | 0;
    $cmp1060 = ($argc1012_0 | 0) < ($add1059 | 0);
    if ($cmp1060) {
      label = 126;
      break;
    } else {
      label = 125;
      break;
    }
   case 125:
    $cmp1062 = ($and1006 | 0) == 0;
    $cmp1065 = ($argc1012_0 | 0) > ($add1023 | 0);
    $or_cond = $cmp1062 & $cmp1065;
    if ($or_cond) {
      label = 126;
      break;
    } else {
      $argc1012_1 = $argc1012_0;
      $argv_1 = $argv_0;
      label = 130;
      break;
    }
   case 126:
    invoke_vii(530, $mrb | 0, $add1059 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $proc_addr_2 = $proc_addr_4;
    $irep_3 = $irep_6;
    $pc_1 = $pc_3;
    $regs_0 = $regs_3;
    label = 155;
    break;
   case 127:
    $cmp1072 = ($add1023 | 0) > 1;
    $cmp1075 = ($argc1012_0 | 0) == 1;
    $or_cond1545 = $cmp1072 & $cmp1075;
    if ($or_cond1545) {
      label = 128;
      break;
    } else {
      $argc1012_1 = $argc1012_0;
      $argv_1 = $argv_0;
      label = 130;
      break;
    }
   case 128:
    $tt1079 = $argv_0 + 8 | 0;
    $302 = HEAP32[$tt1079 >> 2] | 0;
    $cmp1080 = ($302 | 0) == 14;
    if ($cmp1080) {
      label = 129;
      break;
    } else {
      $argc1012_1 = $argc1012_0;
      $argv_1 = $argv_0;
      label = 130;
      break;
    }
   case 129:
    $p1085 = $argv_0;
    $303 = HEAP32[$p1085 >> 2] | 0;
    $len1086 = $303 + 12 | 0;
    $304 = $len1086;
    $305 = HEAP32[$304 >> 2] | 0;
    $ptr1090 = $303 + 20 | 0;
    $306 = $ptr1090;
    $307 = HEAP32[$306 >> 2] | 0;
    $argc1012_1 = $305;
    $argv_1 = $307;
    label = 130;
    break;
   case 130:
    $308 = HEAP32[$c1013 >> 2] | 0;
    $ci1094 = $308 + 16 | 0;
    $309 = HEAP32[$ci1094 >> 2] | 0;
    $argc1095 = $309 + 16 | 0;
    HEAP32[$argc1095 >> 2] = $add1023;
    $cmp1096 = ($argc1012_1 | 0) < ($add1023 | 0);
    if ($cmp1096) {
      label = 131;
      break;
    } else {
      label = 140;
      break;
    }
   case 131:
    $add1099 = $add1023 + 1 | 0;
    $arrayidx1100 = $regs_3 + ($add1099 * 12 & -1) | 0;
    $310 = $arrayidx1100;
    $311 = $arrayidx1031;
    HEAP32[$310 >> 2] = HEAP32[$311 >> 2] | 0;
    HEAP32[$310 + 4 >> 2] = HEAP32[$311 + 4 >> 2] | 0;
    HEAP32[$310 + 8 >> 2] = HEAP32[$311 + 8 >> 2] | 0;
    $cmp1101 = ($add_ptr1017 | 0) == ($argv_1 | 0);
    if ($cmp1101) {
      label = 133;
      break;
    } else {
      label = 132;
      break;
    }
   case 132:
    $sub1105 = $argc1012_1 - $and1010 | 0;
    invoke_viii(504, $add_ptr1017 | 0, $argv_1 | 0, $sub1105 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 133;
    break;
   case 133:
    $tobool1107 = ($and1010 | 0) == 0;
    if ($tobool1107) {
      label = 135;
      break;
    } else {
      label = 134;
      break;
    }
   case 134:
    $sub1110 = $argc1012_1 - $and1010 | 0;
    $cmp1111 = ($sub1110 | 0) > ($and999 | 0);
    $sub1114 = $argc1012_1 - $and999 | 0;
    $and1010_sub1114 = $cmp1111 ? $and1010 : $sub1114;
    $add1117 = $add1022 + 1 | 0;
    $arrayidx1118 = $regs_3 + ($add1117 * 12 & -1) | 0;
    $sub1119 = $argc1012_1 - $and1010_sub1114 | 0;
    $arrayidx1120 = $argv_1 + ($sub1119 * 12 & -1) | 0;
    invoke_viii(504, $arrayidx1118 | 0, $arrayidx1120 | 0, $and1010_sub1114 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 135;
    break;
   case 135:
    $tobool1122 = ($and1006 | 0) == 0;
    if ($tobool1122) {
      label = 137;
      break;
    } else {
      label = 136;
      break;
    }
   case 136:
    $add1125 = $add1021 + 1 | 0;
    $arrayidx1126 = $regs_3 + ($add1125 * 12 & -1) | 0;
    invoke_viii(590, $tmp1127 | 0, $mrb | 0, 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $312 = $arrayidx1126;
    HEAP32[$312 >> 2] = HEAP32[$420 >> 2] | 0;
    HEAP32[$312 + 4 >> 2] = HEAP32[$420 + 4 >> 2] | 0;
    HEAP32[$312 + 8 >> 2] = HEAP32[$420 + 8 >> 2] | 0;
    label = 137;
    break;
   case 137:
    $cmp1129 = ($and1002 | 0) == 0;
    if ($cmp1129) {
      label = 138;
      break;
    } else {
      label = 139;
      break;
    }
   case 138:
    $incdec_ptr1132 = $pc_3 + 4 | 0;
    $pc_0 = $incdec_ptr1132;
    label = 150;
    break;
   case 139:
    $sub1134 = 1 - $and999 | 0;
    $sub1135 = $sub1134 - $and1010 | 0;
    $add1136 = $sub1135 + $argc1012_1 | 0;
    $add_ptr1137 = $pc_3 + ($add1136 << 2) | 0;
    $pc_0 = $add_ptr1137;
    label = 150;
    break;
   case 140:
    $cmp1140 = ($add_ptr1017 | 0) == ($argv_1 | 0);
    if ($cmp1140) {
      label = 142;
      break;
    } else {
      label = 141;
      break;
    }
   case 141:
    $add1143 = $add1023 + 1 | 0;
    $arrayidx1144 = $regs_3 + ($add1143 * 12 & -1) | 0;
    $313 = $arrayidx1144;
    $314 = $arrayidx1031;
    HEAP32[$313 >> 2] = HEAP32[$314 >> 2] | 0;
    HEAP32[$313 + 4 >> 2] = HEAP32[$314 + 4 >> 2] | 0;
    HEAP32[$313 + 8 >> 2] = HEAP32[$314 + 8 >> 2] | 0;
    invoke_viii(504, $add_ptr1017 | 0, $argv_1 | 0, $add1021 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 142;
    break;
   case 142:
    $tobool1148 = ($and1006 | 0) == 0;
    if ($tobool1148) {
      label = 144;
      break;
    } else {
      label = 143;
      break;
    }
   case 143:
    $add1151 = $add1021 + 1 | 0;
    $arrayidx1152 = $regs_3 + ($add1151 * 12 & -1) | 0;
    $sum1651 = $and1002 + $and999 | 0;
    $sum1652 = $sum1651 + $and1010 | 0;
    $sub1155 = $argc1012_1 - $sum1652 | 0;
    $add_ptr1156_sum = $and999 + $and1002 | 0;
    $add_ptr1157 = $argv_1 + ($add_ptr1156_sum * 12 & -1) | 0;
    invoke_viiii(506, $tmp1158 | 0, $mrb | 0, $sub1155 | 0, $add_ptr1157 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $315 = $arrayidx1152;
    HEAP32[$315 >> 2] = HEAP32[$421 >> 2] | 0;
    HEAP32[$315 + 4 >> 2] = HEAP32[$421 + 4 >> 2] | 0;
    HEAP32[$315 + 8 >> 2] = HEAP32[$421 + 8 >> 2] | 0;
    label = 144;
    break;
   case 144:
    $tobool1160 = ($and1010 | 0) == 0;
    if ($tobool1160) {
      label = 147;
      break;
    } else {
      label = 145;
      break;
    }
   case 145:
    $sub1162 = $argc1012_1 - $and1010 | 0;
    $cmp1163 = ($sub1162 | 0) > ($and999 | 0);
    if ($cmp1163) {
      label = 146;
      break;
    } else {
      label = 147;
      break;
    }
   case 146:
    $add1168 = $add1022 + 1 | 0;
    $arrayidx1169 = $regs_3 + ($add1168 * 12 & -1) | 0;
    $arrayidx1171 = $argv_1 + ($sub1162 * 12 & -1) | 0;
    invoke_viii(504, $arrayidx1169 | 0, $arrayidx1171 | 0, $and1010 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 147;
    break;
   case 147:
    if ($cmp1140) {
      label = 148;
      break;
    } else {
      label = 149;
      break;
    }
   case 148:
    $add1177 = $add1023 + 1 | 0;
    $arrayidx1178 = $regs_3 + ($add1177 * 12 & -1) | 0;
    $316 = $arrayidx1178;
    $317 = $arrayidx1031;
    HEAP32[$316 >> 2] = HEAP32[$317 >> 2] | 0;
    HEAP32[$316 + 4 >> 2] = HEAP32[$317 + 4 >> 2] | 0;
    HEAP32[$316 + 8 >> 2] = HEAP32[$317 + 8 >> 2] | 0;
    label = 149;
    break;
   case 149:
    $add1180 = $and1002 + 1 | 0;
    $add_ptr1181 = $pc_3 + ($add1180 << 2) | 0;
    $pc_0 = $add_ptr1181;
    label = 150;
    break;
   case 150:
    $318 = HEAP32[$pc_0 >> 2] | 0;
    $and1183 = $318 & 127;
    $arrayidx1184 = 78492 + ($and1183 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx1184;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $pc_0;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $318;
    label = 391;
    break;
   case 151:
    $incdec_ptr1185 = $pc_3 + 4 | 0;
    $319 = HEAP32[$incdec_ptr1185 >> 2] | 0;
    $and1186 = $319 & 127;
    $arrayidx1187 = 78492 + ($and1186 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx1187;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr1185;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $319;
    label = 391;
    break;
   case 152:
    $incdec_ptr1188 = $pc_3 + 4 | 0;
    $320 = HEAP32[$incdec_ptr1188 >> 2] | 0;
    $and1189 = $320 & 127;
    $arrayidx1190 = 78492 + ($and1189 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx1190;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr1188;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $320;
    label = 391;
    break;
   case 153:
    $shr1191 = $i_2 & -8388608;
    $or = $shr1191 | 41;
    $proc_addr_1 = $proc_addr_0;
    $irep_2 = $irep_1;
    $i_1 = $or;
    label = 154;
    break;
   case 154:
    $exc1194 = $mrb + 16 | 0;
    $321 = HEAP32[$exc1194 >> 2] | 0;
    $tobool1195 = ($321 | 0) == 0;
    if ($tobool1195) {
      label = 169;
      break;
    } else {
      $proc_addr_2 = $proc_addr_1;
      $irep_3 = $irep_2;
      $pc_1 = $pc_3;
      $regs_0 = $regs_3;
      label = 155;
      break;
    }
   case 155:
    $c1201 = $mrb + 8 | 0;
    $322 = HEAP32[$c1201 >> 2] | 0;
    $ci1202 = $322 + 16 | 0;
    $323 = HEAP32[$ci1202 >> 2] | 0;
    $exc1203 = $mrb + 16 | 0;
    $324 = HEAP32[$exc1203 >> 2] | 0;
    $call1204 = invoke_iiii(100, $mrb | 0, 95444, 6) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $325 = $pc_1;
    invoke_vii(798, $agg_tmp1205 | 0, $325 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    invoke_viiii(82, $mrb | 0, $324 | 0, $call1204 | 0, $agg_tmp1205 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $326 = HEAP32[$exc1203 >> 2] | 0;
    $call1207 = invoke_iiii(100, $mrb | 0, 94388, 5) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $327 = HEAP32[$c1201 >> 2] | 0;
    $cibase = $327 + 20 | 0;
    $328 = HEAP32[$cibase >> 2] | 0;
    $sub_ptr_lhs_cast1210 = $323;
    $sub_ptr_rhs_cast1211 = $328;
    $sub_ptr_sub1212 = $sub_ptr_lhs_cast1210 - $sub_ptr_rhs_cast1211 | 0;
    $sub_ptr_div1213 = ($sub_ptr_sub1212 | 0) / 44 & -1;
    invoke_vii(438, $agg_tmp1208 | 0, $sub_ptr_div1213 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    invoke_viiii(82, $mrb | 0, $326 | 0, $call1207 | 0, $agg_tmp1208 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $eidx1214 = $323 + 36 | 0;
    $329 = HEAP32[$eidx1214 >> 2] | 0;
    $330 = HEAP32[$c1201 >> 2] | 0;
    $cibase1216 = $330 + 20 | 0;
    $331 = HEAP32[$cibase1216 >> 2] | 0;
    $cmp1217 = ($323 | 0) == ($331 | 0);
    if ($cmp1217) {
      label = 157;
      break;
    } else {
      label = 156;
      break;
    }
   case 156:
    $eidx1228 = $323 - 44 + 36 | 0;
    $332 = HEAP32[$eidx1228 >> 2] | 0;
    $cmp12291560 = ($329 | 0) > ($332 | 0);
    if ($cmp12291560) {
      $eidx1200_01561 = $329;
      label = 159;
      break;
    } else {
      $eidx1200_0_lcssa = $329;
      label = 158;
      break;
    }
   case 157:
    $ridx1220 = $323 + 32 | 0;
    $333 = HEAP32[$ridx1220 >> 2] | 0;
    $cmp1221 = ($333 | 0) == 0;
    if ($cmp1221) {
      $irep_5 = $irep_3;
      $regs_2 = $regs_0;
      label = 381;
      break;
    } else {
      $ci1198_1 = $323;
      label = 168;
      break;
    }
   case 158:
    $tobool1256 = ($4 | 0) == 0;
    $ci1198_0 = $323;
    $eidx1200_1 = $eidx1200_0_lcssa;
    label = 160;
    break;
   case 159:
    $dec1232 = $eidx1200_01561 - 1 | 0;
    invoke_vii(500, $mrb | 0, $dec1232 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $334 = HEAP32[$eidx1228 >> 2] | 0;
    $cmp1229 = ($dec1232 | 0) > ($334 | 0);
    if ($cmp1229) {
      $eidx1200_01561 = $dec1232;
      label = 159;
      break;
    } else {
      $eidx1200_0_lcssa = $dec1232;
      label = 158;
      break;
    }
   case 160:
    $ridx1236 = $ci1198_0 + 32 | 0;
    $335 = HEAP32[$ridx1236 >> 2] | 0;
    $ridx1238 = $ci1198_0 - 44 + 32 | 0;
    $336 = HEAP32[$ridx1238 >> 2] | 0;
    $cmp1239 = ($335 | 0) == ($336 | 0);
    if ($cmp1239) {
      label = 161;
      break;
    } else {
      $ci1198_1 = $ci1198_0;
      label = 168;
      break;
    }
   case 161:
    invoke_vi(300, $mrb | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $337 = HEAP32[$c1201 >> 2] | 0;
    $ci1243 = $337 + 16 | 0;
    $338 = HEAP32[$ci1243 >> 2] | 0;
    $stbase1245 = $337 + 8 | 0;
    $339 = HEAP32[$stbase1245 >> 2] | 0;
    $stackidx1247 = $338 + 52 | 0;
    $340 = HEAP32[$stackidx1247 >> 2] | 0;
    $add_ptr1248 = $339 + ($340 * 12 & -1) | 0;
    $stack1250 = $337 + 4 | 0;
    HEAP32[$stack1250 >> 2] = $add_ptr1248;
    $acc1252 = $338 + 68 | 0;
    $341 = HEAP32[$acc1252 >> 2] | 0;
    $cmp1253 = ($341 | 0) > -1;
    $or_cond1546 = $cmp1253 | $tobool1256;
    if ($or_cond1546) {
      label = 162;
      break;
    } else {
      label = 163;
      break;
    }
   case 162:
    $eidx1263 = $338 + 36 | 0;
    $342 = HEAP32[$eidx1263 >> 2] | 0;
    $cmp12641555 = ($eidx1200_1 | 0) > ($342 | 0);
    if ($cmp12641555) {
      $eidx1200_21556 = $eidx1200_1;
      label = 164;
      break;
    } else {
      $eidx1200_2_lcssa = $eidx1200_1;
      label = 165;
      break;
    }
   case 163:
    HEAP32[$jmp >> 2] = $4;
    $arraydecay1260 = $4;
    invoke_vii(668, $arraydecay1260 | 0, 1);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
   case 164:
    $dec1267 = $eidx1200_21556 - 1 | 0;
    invoke_vii(500, $mrb | 0, $dec1267 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $343 = HEAP32[$eidx1263 >> 2] | 0;
    $cmp1264 = ($dec1267 | 0) > ($343 | 0);
    if ($cmp1264) {
      $eidx1200_21556 = $dec1267;
      label = 164;
      break;
    } else {
      $eidx1200_2_lcssa = $dec1267;
      label = 165;
      break;
    }
   case 165:
    $344 = HEAP32[$c1201 >> 2] | 0;
    $cibase1270 = $344 + 20 | 0;
    $345 = HEAP32[$cibase1270 >> 2] | 0;
    $cmp1271 = ($338 | 0) == ($345 | 0);
    if ($cmp1271) {
      label = 166;
      break;
    } else {
      $ci1198_0 = $338;
      $eidx1200_1 = $eidx1200_2_lcssa;
      label = 160;
      break;
    }
   case 166:
    $ridx1274 = $338 + 32 | 0;
    $346 = HEAP32[$ridx1274 >> 2] | 0;
    $cmp1275 = ($346 | 0) == 0;
    if ($cmp1275) {
      label = 167;
      break;
    } else {
      $ci1198_1 = $338;
      label = 168;
      break;
    }
   case 167:
    $stbase1279 = $344 + 8 | 0;
    $347 = HEAP32[$stbase1279 >> 2] | 0;
    $stack1281 = $344 + 4 | 0;
    HEAP32[$stack1281 >> 2] = $347;
    $irep_5 = $irep_3;
    $regs_2 = $347;
    label = 381;
    break;
   case 168:
    $proc1285 = $ci1198_1 + 4 | 0;
    $348 = HEAP32[$proc1285 >> 2] | 0;
    $irep1287 = $348 + 12 | 0;
    $349 = HEAP32[$irep1287 >> 2] | 0;
    $pool1288 = $349 + 16 | 0;
    $350 = HEAP32[$pool1288 >> 2] | 0;
    $syms1289 = $349 + 20 | 0;
    $351 = HEAP32[$syms1289 >> 2] | 0;
    $352 = HEAP32[$c1201 >> 2] | 0;
    $stbase1291 = $352 + 8 | 0;
    $353 = HEAP32[$stbase1291 >> 2] | 0;
    $stackidx1293 = $ci1198_1 + 52 | 0;
    $354 = HEAP32[$stackidx1293 >> 2] | 0;
    $add_ptr1294 = $353 + ($354 * 12 & -1) | 0;
    $stack1296 = $352 + 4 | 0;
    HEAP32[$stack1296 >> 2] = $add_ptr1294;
    $ridx1297 = $ci1198_1 + 32 | 0;
    $355 = HEAP32[$ridx1297 >> 2] | 0;
    $dec1298 = $355 - 1 | 0;
    HEAP32[$ridx1297 >> 2] = $dec1298;
    $356 = HEAP32[$c1201 >> 2] | 0;
    $rescue1300 = $356 + 28 | 0;
    $357 = HEAP32[$rescue1300 >> 2] | 0;
    $arrayidx1301 = $357 + ($dec1298 << 2) | 0;
    $358 = HEAP32[$arrayidx1301 >> 2] | 0;
    $proc_addr_3 = $proc_addr_2;
    $irep_4 = $349;
    $pc_2 = $358;
    $pool_1 = $350;
    $syms_1 = $351;
    $regs_1 = $add_ptr1294;
    label = 192;
    break;
   case 169:
    $c1305 = $mrb + 8 | 0;
    $359 = HEAP32[$c1305 >> 2] | 0;
    $ci1306 = $359 + 16 | 0;
    $360 = HEAP32[$ci1306 >> 2] | 0;
    $eidx1313 = $360 + 36 | 0;
    $361 = HEAP32[$eidx1313 >> 2] | 0;
    $shr1315 = $i_1 >>> 23;
    $arrayidx1317 = $regs_3 + ($shr1315 * 12 & -1) | 0;
    $362 = $v;
    $363 = $arrayidx1317;
    HEAP32[$362 >> 2] = HEAP32[$363 >> 2] | 0;
    HEAP32[$362 + 4 >> 2] = HEAP32[$363 + 4 >> 2] | 0;
    HEAP32[$362 + 8 >> 2] = HEAP32[$363 + 8 >> 2] | 0;
    $shr1318 = $i_1 >>> 14;
    $and1319 = $shr1318 & 511;
    if (($and1319 | 0) == 2) {
      label = 170;
      break;
    } else if (($and1319 | 0) == 0) {
      label = 177;
      break;
    } else if (($and1319 | 0) == 1) {
      label = 184;
      break;
    } else {
      $ci1304_0_ph = $360;
      label = 187;
      break;
    }
   case 170:
    $env1320 = $proc_addr_1 + 20 | 0;
    $364 = HEAP32[$env1320 >> 2] | 0;
    $tobool1321 = ($364 | 0) == 0;
    if ($tobool1321) {
      label = 177;
      break;
    } else {
      label = 171;
      break;
    }
   case 171:
    $365 = $proc_addr_1;
    $366 = HEAP32[$365 >> 2] | 0;
    $and1324 = $366 & 524288;
    $cmp1325 = ($and1324 | 0) == 0;
    if ($cmp1325) {
      label = 172;
      break;
    } else {
      label = 177;
      break;
    }
   case 172:
    $call1330 = invoke_iii(588, $mrb | 0, $proc_addr_1 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $cioff = $call1330 + 20 | 0;
    $367 = HEAP32[$cioff >> 2] | 0;
    $cmp1331 = ($367 | 0) < 0;
    if ($cmp1331) {
      label = 173;
      break;
    } else {
      label = 174;
      break;
    }
   case 173:
    invoke_vii(238, $mrb | 0, 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $proc_addr_2 = $proc_addr_1;
    $irep_3 = $irep_2;
    $pc_1 = $pc_3;
    $regs_0 = $regs_3;
    label = 155;
    break;
   case 174:
    $368 = HEAP32[$c1305 >> 2] | 0;
    $cibase1336 = $368 + 20 | 0;
    $369 = HEAP32[$cibase1336 >> 2] | 0;
    $add_ptr1338 = $369 + ($367 * 44 & -1) | 0;
    $cmp1341 = ($367 | 0) == 0;
    if ($cmp1341) {
      label = 175;
      break;
    } else {
      label = 176;
      break;
    }
   case 175:
    invoke_vii(238, $mrb | 0, 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $proc_addr_2 = $proc_addr_1;
    $irep_3 = $irep_2;
    $pc_1 = $pc_3;
    $regs_0 = $regs_3;
    label = 155;
    break;
   case 176:
    $ci1346 = $368 + 16 | 0;
    HEAP32[$ci1346 >> 2] = $add_ptr1338;
    $ci1304_0_ph = $add_ptr1338;
    label = 187;
    break;
   case 177:
    $370 = HEAP32[$c1305 >> 2] | 0;
    $cibase1350 = $370 + 20 | 0;
    $371 = HEAP32[$cibase1350 >> 2] | 0;
    $cmp1351 = ($360 | 0) == ($371 | 0);
    if ($cmp1351) {
      label = 178;
      break;
    } else {
      label = 183;
      break;
    }
   case 178:
    $prev = $370 | 0;
    $372 = HEAP32[$prev >> 2] | 0;
    $tobool1355 = ($372 | 0) == 0;
    if ($tobool1355) {
      label = 179;
      break;
    } else {
      label = 180;
      break;
    }
   case 179:
    invoke_vii(238, $mrb | 0, 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $proc_addr_2 = $proc_addr_1;
    $irep_3 = $irep_2;
    $pc_1 = $pc_3;
    $regs_0 = $regs_3;
    label = 155;
    break;
   case 180:
    $ci1360 = $372 + 16 | 0;
    $373 = HEAP32[$ci1360 >> 2] | 0;
    $cibase1363 = $372 + 20 | 0;
    $374 = HEAP32[$cibase1363 >> 2] | 0;
    $cmp1364 = ($373 | 0) == ($374 | 0);
    if ($cmp1364) {
      label = 181;
      break;
    } else {
      label = 182;
      break;
    }
   case 181:
    $call1369 = invoke_iii(198, $mrb | 0, 93488) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    invoke_viiii(388, $agg_tmp1370 | 0, $mrb | 0, 92792, 13);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    invoke_viiii(494, $exc1368 | 0, $mrb | 0, $call1369 | 0, $agg_tmp1370 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $p1372 = $exc1368;
    $375 = HEAP32[$p1372 >> 2] | 0;
    $376 = $375;
    HEAP32[$exc1194 >> 2] = $376;
    $proc_addr_2 = $proc_addr_1;
    $irep_3 = $irep_2;
    $pc_1 = $pc_3;
    $regs_0 = $regs_3;
    label = 155;
    break;
   case 182:
    $status = $370 + 44 | 0;
    HEAP8[$status] = 3;
    $377 = HEAP32[$c1305 >> 2] | 0;
    $prev1377 = $377 | 0;
    $378 = HEAP32[$prev1377 >> 2] | 0;
    HEAP32[$c1305 >> 2] = $378;
    label = 183;
    break;
   case 183:
    $379 = HEAP32[$c1305 >> 2] | 0;
    $ci1381 = $379 + 16 | 0;
    $380 = HEAP32[$ci1381 >> 2] | 0;
    $ci1304_0_ph = $380;
    label = 187;
    break;
   case 184:
    $env1383 = $proc_addr_1 + 20 | 0;
    $381 = HEAP32[$env1383 >> 2] | 0;
    $cioff1384 = $381 + 20 | 0;
    $382 = HEAP32[$cioff1384 >> 2] | 0;
    $cmp1385 = ($382 | 0) < 0;
    if ($cmp1385) {
      label = 185;
      break;
    } else {
      label = 186;
      break;
    }
   case 185:
    invoke_vii(238, $mrb | 0, 1);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $proc_addr_2 = $proc_addr_1;
    $irep_3 = $irep_2;
    $pc_1 = $pc_3;
    $regs_0 = $regs_3;
    label = 155;
    break;
   case 186:
    $383 = HEAP32[$c1305 >> 2] | 0;
    $cibase1390 = $383 + 20 | 0;
    $384 = HEAP32[$cibase1390 >> 2] | 0;
    $add_ptr1393_sum = $382 + 1 | 0;
    $add_ptr1394 = $384 + ($add_ptr1393_sum * 44 & -1) | 0;
    $ci1396 = $383 + 16 | 0;
    HEAP32[$ci1396 >> 2] = $add_ptr1394;
    $ci1304_0_ph = $add_ptr1394;
    label = 187;
    break;
   case 187:
    $385 = HEAP32[$c1305 >> 2] | 0;
    $ci13991563 = $385 + 16 | 0;
    $386 = HEAP32[$ci13991563 >> 2] | 0;
    $eidx14011564 = $386 - 44 + 36 | 0;
    $387 = HEAP32[$eidx14011564 >> 2] | 0;
    $cmp14021565 = ($361 | 0) > ($387 | 0);
    if ($cmp14021565) {
      $eidx1310_01566 = $361;
      label = 188;
      break;
    } else {
      label = 189;
      break;
    }
   case 188:
    $dec1405 = $eidx1310_01566 - 1 | 0;
    invoke_vii(500, $mrb | 0, $dec1405 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $388 = HEAP32[$c1305 >> 2] | 0;
    $ci1399 = $388 + 16 | 0;
    $389 = HEAP32[$ci1399 >> 2] | 0;
    $eidx1401 = $389 - 44 + 36 | 0;
    $390 = HEAP32[$eidx1401 >> 2] | 0;
    $cmp1402 = ($dec1405 | 0) > ($390 | 0);
    if ($cmp1402) {
      $eidx1310_01566 = $dec1405;
      label = 188;
      break;
    } else {
      label = 189;
      break;
    }
   case 189:
    invoke_vi(300, $mrb | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $acc1407 = $ci1304_0_ph + 24 | 0;
    $391 = HEAP32[$acc1407 >> 2] | 0;
    $pc1408 = $ci1304_0_ph + 20 | 0;
    $392 = HEAP32[$pc1408 >> 2] | 0;
    $393 = HEAP32[$c1305 >> 2] | 0;
    $stbase1410 = $393 + 8 | 0;
    $394 = HEAP32[$stbase1410 >> 2] | 0;
    $stackidx1411 = $ci1304_0_ph + 8 | 0;
    $395 = HEAP32[$stackidx1411 >> 2] | 0;
    $add_ptr1412 = $394 + ($395 * 12 & -1) | 0;
    $stack1414 = $393 + 4 | 0;
    HEAP32[$stack1414 >> 2] = $add_ptr1412;
    $cmp1415 = ($391 | 0) < 0;
    if ($cmp1415) {
      label = 190;
      break;
    } else {
      label = 191;
      break;
    }
   case 190:
    HEAP32[$jmp >> 2] = $4;
    $396 = $agg_result;
    HEAP32[$396 >> 2] = HEAP32[$362 >> 2] | 0;
    HEAP32[$396 + 4 >> 2] = HEAP32[$362 + 4 >> 2] | 0;
    HEAP32[$396 + 8 >> 2] = HEAP32[$362 + 8 >> 2] | 0;
    label = 390;
    break;
   case 191:
    $397 = HEAP32[$c1305 >> 2] | 0;
    $ci1421 = $397 + 16 | 0;
    $398 = HEAP32[$ci1421 >> 2] | 0;
    $proc1422 = $398 + 4 | 0;
    $399 = HEAP32[$proc1422 >> 2] | 0;
    $irep1424 = $399 + 12 | 0;
    $400 = HEAP32[$irep1424 >> 2] | 0;
    $pool1425 = $400 + 16 | 0;
    $401 = HEAP32[$pool1425 >> 2] | 0;
    $syms1426 = $400 + 20 | 0;
    $402 = HEAP32[$syms1426 >> 2] | 0;
    $add_ptr1412_sum = $395 + $391 | 0;
    $arrayidx1427 = $394 + ($add_ptr1412_sum * 12 & -1) | 0;
    $403 = $arrayidx1427;
    HEAP32[$403 >> 2] = HEAP32[$362 >> 2] | 0;
    HEAP32[$403 + 4 >> 2] = HEAP32[$362 + 4 >> 2] | 0;
    HEAP32[$403 + 8 >> 2] = HEAP32[$362 + 8 >> 2] | 0;
    $proc_addr_3 = $399;
    $irep_4 = $400;
    $pc_2 = $392;
    $pool_1 = $401;
    $syms_1 = $402;
    $regs_1 = $add_ptr1412;
    label = 192;
    break;
   case 192:
    $proc_addr_4_ph = $proc_addr_3;
    $irep_6_ph = $irep_4;
    $pc_3_ph = $pc_2;
    $pool_2_ph = $pool_1;
    $syms_2_ph = $syms_1;
    $regs_3_ph = $regs_1;
    $i_2_ph_in = $pc_2;
    label = 193;
    break;
   case 193:
    $i_2_ph = HEAP32[$i_2_ph_in >> 2] | 0;
    $and1429_pn = $i_2_ph & 127;
    $indirect_goto_dest_in_ph = 78492 + ($and1429_pn << 2) | 0;
    $404 = $tmp;
    $405 = $tmp126;
    $406 = $tmp145;
    $407 = $tmp164;
    $408 = $tmp183;
    $409 = $tmp204;
    $410 = $tmp231;
    $c306 = $mrb + 8 | 0;
    $exc = $mrb + 16 | 0;
    $c364 = $mrb + 8 | 0;
    $irep383 = $mrb + 24 | 0;
    $c386 = $mrb + 8 | 0;
    $c429 = $mrb + 8 | 0;
    $411 = $recv;
    $412 = $sym506;
    $c528 = $mrb + 8 | 0;
    $413 = $result;
    $exc568 = $mrb + 16 | 0;
    $c640 = $mrb + 8 | 0;
    $414 = $recv639;
    $p646 = $recv639;
    $415 = $tmp679;
    $exc680 = $mrb + 16 | 0;
    $c754 = $mrb + 8 | 0;
    $416 = $recv751;
    $417 = $tmp844;
    $exc845 = $mrb + 16 | 0;
    $418 = $tmp942;
    $419 = $tmp961;
    $c1013 = $mrb + 8 | 0;
    $420 = $tmp1127;
    $421 = $tmp1158;
    $422 = $recv1446;
    $423 = $sym1458;
    $c1477 = $mrb + 8 | 0;
    $424 = $tmp1697;
    $425 = $tmp2922;
    $426 = $v2954;
    $tt2958 = $v2954 + 8 | 0;
    $427 = $tmp2981;
    $428 = $tmp3050;
    $429 = $tmp3065;
    $430 = $tmp3016;
    $431 = $tmp3105;
    $432 = $hash;
    $irep3157 = $mrb + 24 | 0;
    $433 = $tmp3178;
    $434 = $tmp3401;
    $object_class = $mrb + 44 | 0;
    $435 = $tmp3185;
    $436 = $base;
    $437 = $super3197;
    $tt3205 = $base + 8 | 0;
    $i3210 = $base;
    $c3213 = $mrb + 8 | 0;
    $438 = $tmp3216;
    $439 = $tmp3220;
    $440 = $base3231;
    $tt3238 = $base3231 + 8 | 0;
    $i3243 = $base3231;
    $c3246 = $mrb + 8 | 0;
    $441 = $tmp3249;
    $442 = $tmp3253;
    $443 = $recv3264;
    $c3273 = $mrb + 8 | 0;
    $p3284 = $recv3264;
    $irep3293 = $mrb + 24 | 0;
    $444 = $tmp3309;
    $exc3310 = $mrb + 16 | 0;
    $445 = $tmp3363;
    $c3367 = $mrb + 8 | 0;
    $446 = $tmp3385;
    $indirect_goto_dest_in = $indirect_goto_dest_in_ph;
    $proc_addr_4 = $proc_addr_4_ph;
    $irep_6 = $irep_6_ph;
    $pc_3 = $pc_3_ph;
    $pool_2 = $pool_2_ph;
    $syms_2 = $syms_2_ph;
    $regs_3 = $regs_3_ph;
    $i_2 = $i_2_ph;
    label = 391;
    break;
   case 194:
    $shr1433 = $i_2 >>> 23;
    $shr1437 = $i_2 >>> 7;
    $and1438 = $shr1437 & 127;
    $shr1449 = $i_2 >>> 14;
    $and1450 = $shr1449 & 511;
    $arrayidx1451 = $syms_2 + ($and1450 << 1) | 0;
    $447 = HEAP16[$arrayidx1451 >> 1] | 0;
    $arrayidx1452 = $regs_3 + ($shr1433 * 12 & -1) | 0;
    $448 = $arrayidx1452;
    HEAP32[$422 >> 2] = HEAP32[$448 >> 2] | 0;
    HEAP32[$422 + 4 >> 2] = HEAP32[$448 + 4 >> 2] | 0;
    HEAP32[$422 + 8 >> 2] = HEAP32[$448 + 8 >> 2] | 0;
    $call1453 = invoke_iii(454, $mrb | 0, $arrayidx1452 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    HEAP32[$c1442 >> 2] = $call1453;
    $call1454 = invoke_iiii(180, 0, $c1442 | 0, $447 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $tobool1455 = ($call1454 | 0) == 0;
    if ($tobool1455) {
      label = 195;
      break;
    } else {
      $n1436_0 = $and1438;
      $m1440_0 = $call1454;
      $mid1448_0 = $447;
      label = 198;
      break;
    }
   case 195:
    invoke_vii(338, $sym1458 | 0, $447 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $call1459 = invoke_iiii(100, $mrb | 0, 102816, 14) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $call1460 = invoke_iiii(180, 0, $c1442 | 0, $call1459 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $cmp1461 = ($and1438 | 0) == 127;
    if ($cmp1461) {
      label = 196;
      break;
    } else {
      label = 197;
      break;
    }
   case 196:
    $add1464 = $shr1433 + 1 | 0;
    $arrayidx1465 = $regs_3 + ($add1464 * 12 & -1) | 0;
    invoke_viiii(128, $tmp1466 | 0, $mrb | 0, $arrayidx1465 | 0, $sym1458 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $n1436_0 = 127;
    $m1440_0 = $call1460;
    $mid1448_0 = $call1459;
    label = 198;
    break;
   case 197:
    $arrayidx1452_sum = $shr1433 + 2 | 0;
    $add_ptr1469 = $regs_3 + ($arrayidx1452_sum * 12 & -1) | 0;
    $arrayidx1452_sum1537 = $shr1433 + 1 | 0;
    $add_ptr1471 = $regs_3 + ($arrayidx1452_sum1537 * 12 & -1) | 0;
    $inc1472 = $and1438 + 1 | 0;
    invoke_viii(504, $add_ptr1469 | 0, $add_ptr1471 | 0, $inc1472 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $add1473 = $shr1433 + 1 | 0;
    $arrayidx1474 = $regs_3 + ($add1473 * 12 & -1) | 0;
    $449 = $arrayidx1474;
    HEAP32[$449 >> 2] = HEAP32[$423 >> 2] | 0;
    HEAP32[$449 + 4 >> 2] = HEAP32[$423 + 4 >> 2] | 0;
    HEAP32[$449 + 8 >> 2] = HEAP32[$423 + 8 >> 2] | 0;
    $n1436_0 = $inc1472;
    $m1440_0 = $call1460;
    $mid1448_0 = $call1459;
    label = 198;
    break;
   case 198:
    $450 = HEAP32[$c1477 >> 2] | 0;
    $ci1478 = $450 + 16 | 0;
    $451 = HEAP32[$ci1478 >> 2] | 0;
    $mid1479 = $451 | 0;
    HEAP16[$mid1479 >> 1] = $mid1448_0;
    $target_class1480 = $m1440_0 + 16 | 0;
    $452 = HEAP32[$target_class1480 >> 2] | 0;
    $target_class1481 = $451 + 28 | 0;
    HEAP32[$target_class1481 >> 2] = $452;
    $cmp1482 = ($n1436_0 | 0) == 127;
    $argc1485 = $451 + 16 | 0;
    $_n1436_0 = $cmp1482 ? -1 : $n1436_0;
    HEAP32[$argc1485 >> 2] = $_n1436_0;
    $453 = HEAP32[$c1477 >> 2] | 0;
    $stack1490 = $453 + 4 | 0;
    $454 = HEAP32[$stack1490 >> 2] | 0;
    $add1493 = $_n1436_0 + 1 | 0;
    invoke_viii(504, $454 | 0, $arrayidx1452 | 0, $add1493 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $455 = $m1440_0;
    $456 = HEAP32[$455 >> 2] | 0;
    $and1495 = $456 & 262144;
    $cmp1496 = ($and1495 | 0) == 0;
    if ($cmp1496) {
      label = 200;
      break;
    } else {
      label = 199;
      break;
    }
   case 199:
    $457 = HEAP32[$c1477 >> 2] | 0;
    $stack1500 = $457 + 4 | 0;
    $458 = HEAP32[$stack1500 >> 2] | 0;
    $body1502 = $m1440_0 + 12 | 0;
    $func1503 = $body1502;
    $459 = HEAP32[$func1503 >> 2] | 0;
    invoke_viii($459 | 0, $tmp1504 | 0, $mrb | 0, $recv1446 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $460 = $458;
    $461 = $tmp1504;
    HEAP32[$460 >> 2] = HEAP32[$461 >> 2] | 0;
    HEAP32[$460 + 4 >> 2] = HEAP32[$461 + 4 >> 2] | 0;
    HEAP32[$460 + 8 >> 2] = HEAP32[$461 + 8 >> 2] | 0;
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $proc_addr_0 = $proc_addr_4;
    $irep_1 = $irep_6;
    label = 153;
    break;
   case 200:
    $irep1507 = $m1440_0 + 12 | 0;
    $462 = HEAP32[$irep1507 >> 2] | 0;
    $pool1508 = $462 + 16 | 0;
    $463 = HEAP32[$pool1508 >> 2] | 0;
    $syms1509 = $462 + 20 | 0;
    $464 = HEAP32[$syms1509 >> 2] | 0;
    $465 = HEAP32[$argc1485 >> 2] | 0;
    $cmp1511 = ($465 | 0) < 0;
    $nregs1514 = $462 + 6 | 0;
    $466 = HEAP16[$nregs1514 >> 1] | 0;
    $conv1515 = $466 & 65535;
    if ($cmp1511) {
      label = 201;
      break;
    } else {
      label = 202;
      break;
    }
   case 201:
    $cmp1516 = ($466 & 65535) < 3;
    $_conv1515 = $cmp1516 ? 3 : $conv1515;
    invoke_viii(642, $mrb | 0, $_conv1515 | 0, 3);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 203;
    break;
   case 202:
    $add1528 = $465 + 2 | 0;
    invoke_viii(642, $mrb | 0, $conv1515 | 0, $add1528 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 203;
    break;
   case 203:
    $467 = HEAP32[$c1477 >> 2] | 0;
    $stack1531 = $467 + 4 | 0;
    $468 = HEAP32[$stack1531 >> 2] | 0;
    $iseq1532 = $462 + 12 | 0;
    $469 = HEAP32[$iseq1532 >> 2] | 0;
    $470 = HEAP32[$469 >> 2] | 0;
    $and1534 = $470 & 127;
    $arrayidx1535 = 78492 + ($and1534 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx1535;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $462;
    $pc_3 = $469;
    $pool_2 = $463;
    $syms_2 = $464;
    $regs_3 = $468;
    $i_2 = $470;
    label = 391;
    break;
   case 204:
    $shr1538 = $i_2 >>> 23;
    $shr1542 = $i_2 >>> 7;
    $shr15461534 = $i_2 >>> 17;
    $and1547 = $shr15461534 & 63;
    $shr15501535 = $i_2 >>> 16;
    $and1551 = $shr15501535 & 1;
    $shr15541536 = $i_2 >>> 11;
    $and1555 = $shr15541536 & 31;
    $and1559 = $shr1542 & 15;
    $cmp1562 = ($and1559 | 0) == 0;
    if ($cmp1562) {
      $regs_3_pn = $regs_3;
      label = 208;
      break;
    } else {
      label = 205;
      break;
    }
   case 205:
    $sub1569 = $and1559 - 1 | 0;
    $call1570 = invoke_iii(326, $mrb | 0, $sub1569 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $tobool1571 = ($call1570 | 0) == 0;
    if ($tobool1571) {
      label = 206;
      break;
    } else {
      label = 207;
      break;
    }
   case 206:
    invoke_vii(238, $mrb | 0, 2);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $proc_addr_2 = $proc_addr_4;
    $irep_3 = $irep_6;
    $pc_1 = $pc_3;
    $regs_0 = $regs_3;
    label = 155;
    break;
   case 207:
    $stack1574 = $call1570 + 12 | 0;
    $471 = HEAP32[$stack1574 >> 2] | 0;
    $regs_3_pn = $471;
    label = 208;
    break;
   case 208:
    $arrayidx1577 = $regs_3 + ($shr1538 * 12 & -1) | 0;
    $add1578 = $and1551 + 1 | 0;
    $add1579 = $add1578 + $and1547 | 0;
    $stack1561_0_sum = $add1579 + $and1555 | 0;
    $arrayidx1580 = $regs_3_pn + ($stack1561_0_sum * 12 & -1) | 0;
    $472 = $arrayidx1577;
    $473 = $arrayidx1580;
    HEAP32[$472 >> 2] = HEAP32[$473 >> 2] | 0;
    HEAP32[$472 + 4 >> 2] = HEAP32[$473 + 4 >> 2] | 0;
    HEAP32[$472 + 8 >> 2] = HEAP32[$473 + 8 >> 2] | 0;
    $incdec_ptr1581 = $pc_3 + 4 | 0;
    $474 = HEAP32[$incdec_ptr1581 >> 2] | 0;
    $and1582 = $474 & 127;
    $arrayidx1583 = 78492 + ($and1582 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx1583;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr1581;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $474;
    label = 391;
    break;
   case 209:
    $shr1586 = $i_2 >>> 23;
    $arrayidx1588 = $regs_3 + ($shr1586 * 12 & -1) | 0;
    $tt1589 = $regs_3 + ($shr1586 * 12 & -1) + 8 | 0;
    $475 = HEAP32[$tt1589 >> 2] | 0;
    $conv1591 = $475 << 8;
    $shl1592 = $conv1591 & 16776960;
    $add1593 = $shr1586 + 1 | 0;
    $arrayidx1594 = $regs_3 + ($add1593 * 12 & -1) | 0;
    $tt1595 = $regs_3 + ($add1593 * 12 & -1) + 8 | 0;
    $476 = HEAP32[$tt1595 >> 2] | 0;
    $and1598 = $476 & 255;
    $or1599 = $shl1592 | $and1598;
    if (($or1599 | 0) == 771) {
      label = 210;
      break;
    } else if (($or1599 | 0) == 774) {
      label = 213;
      break;
    } else if (($or1599 | 0) == 1539) {
      label = 214;
      break;
    } else if (($or1599 | 0) == 1542) {
      label = 215;
      break;
    } else if (($or1599 | 0) == 4112) {
      label = 216;
      break;
    } else {
      $i_0 = $i_2;
      label = 55;
      break;
    }
   case 210:
    $i1609 = $arrayidx1588;
    $477 = HEAP32[$i1609 >> 2] | 0;
    $arrayidx1588_sum = $shr1586 + 1 | 0;
    $value1611 = $regs_3 + ($arrayidx1588_sum * 12 & -1) | 0;
    $i1612 = $value1611;
    $478 = HEAP32[$i1612 >> 2] | 0;
    $add1613 = $478 + $477 | 0;
    $_lobit1531 = $477 >>> 31;
    $add1613_lobit = $add1613 >>> 31;
    $cmp1618 = ($_lobit1531 | 0) != ($add1613_lobit | 0);
    $_lobit15311533 = $478 ^ $477;
    $cmp1625 = ($_lobit15311533 | 0) > -1;
    $or_cond1547 = $cmp1618 & $cmp1625;
    if ($or_cond1547) {
      label = 211;
      break;
    } else {
      label = 212;
      break;
    }
   case 211:
    HEAP32[$tt1589 >> 2] = 6;
    $conv1631 = +($477 | 0);
    $conv1632 = +($478 | 0);
    $add1633 = $conv1631 + $conv1632;
    $f = $arrayidx1588 | 0;
    HEAPF64[tempDoublePtr >> 3] = $add1633, HEAP32[$f >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 217;
    break;
   case 212:
    HEAP32[$i1609 >> 2] = $add1613;
    label = 217;
    break;
   case 213:
    $i1647 = $arrayidx1588;
    $479 = HEAP32[$i1647 >> 2] | 0;
    $f1653 = $arrayidx1594 | 0;
    $480 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1653 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1653 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    HEAP32[$tt1589 >> 2] = 6;
    $conv1657 = +($479 | 0);
    $add1658 = $conv1657 + $480;
    $f1661 = $arrayidx1588 | 0;
    HEAPF64[tempDoublePtr >> 3] = $add1658, HEAP32[$f1661 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f1661 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 217;
    break;
   case 214:
    $f1667 = $arrayidx1588 | 0;
    $481 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1667 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1667 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $i1671 = $arrayidx1594;
    $482 = HEAP32[$i1671 >> 2] | 0;
    $conv1672 = +($482 | 0);
    $add1673 = $481 + $conv1672;
    HEAPF64[tempDoublePtr >> 3] = $add1673, HEAP32[$f1667 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f1667 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 217;
    break;
   case 215:
    $f1682 = $arrayidx1588 | 0;
    $483 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1682 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1682 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $f1686 = $arrayidx1594 | 0;
    $484 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1686 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1686 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $add1687 = $483 + $484;
    HEAPF64[tempDoublePtr >> 3] = $add1687, HEAP32[$f1682 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f1682 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 217;
    break;
   case 216:
    invoke_viiii(694, $tmp1697 | 0, $mrb | 0, $arrayidx1588 | 0, $arrayidx1594 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $485 = $arrayidx1588;
    HEAP32[$485 >> 2] = HEAP32[$424 >> 2] | 0;
    HEAP32[$485 + 4 >> 2] = HEAP32[$424 + 4 >> 2] | 0;
    HEAP32[$485 + 8 >> 2] = HEAP32[$424 + 8 >> 2] | 0;
    label = 217;
    break;
   case 217:
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr1700 = $pc_3 + 4 | 0;
    $486 = HEAP32[$incdec_ptr1700 >> 2] | 0;
    $and1701 = $486 & 127;
    $arrayidx1702 = 78492 + ($and1701 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx1702;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr1700;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $486;
    label = 391;
    break;
   case 218:
    $shr1705 = $i_2 >>> 23;
    $arrayidx1707 = $regs_3 + ($shr1705 * 12 & -1) | 0;
    $tt1708 = $regs_3 + ($shr1705 * 12 & -1) + 8 | 0;
    $487 = HEAP32[$tt1708 >> 2] | 0;
    $conv1710 = $487 << 8;
    $shl1711 = $conv1710 & 16776960;
    $add1712 = $shr1705 + 1 | 0;
    $arrayidx1713 = $regs_3 + ($add1712 * 12 & -1) | 0;
    $tt1714 = $regs_3 + ($add1712 * 12 & -1) + 8 | 0;
    $488 = HEAP32[$tt1714 >> 2] | 0;
    $and1717 = $488 & 255;
    $or1718 = $shl1711 | $and1717;
    if (($or1718 | 0) == 771) {
      label = 219;
      break;
    } else if (($or1718 | 0) == 774) {
      label = 223;
      break;
    } else if (($or1718 | 0) == 1539) {
      label = 224;
      break;
    } else if (($or1718 | 0) == 1542) {
      label = 225;
      break;
    } else {
      $i_0 = $i_2;
      label = 55;
      break;
    }
   case 219:
    $i1728 = $arrayidx1707;
    $489 = HEAP32[$i1728 >> 2] | 0;
    $i1732 = $arrayidx1713;
    $490 = HEAP32[$i1732 >> 2] | 0;
    $sub1733 = $489 - $490 | 0;
    $_lobit15271529 = $490 ^ $489;
    $cmp1739 = ($_lobit15271529 | 0) < 0;
    if ($cmp1739) {
      label = 220;
      break;
    } else {
      label = 222;
      break;
    }
   case 220:
    $_lobit1527 = $489 >>> 31;
    $sub1733_lobit = $sub1733 >>> 31;
    $cmp1746 = ($_lobit1527 | 0) == ($sub1733_lobit | 0);
    if ($cmp1746) {
      label = 222;
      break;
    } else {
      label = 221;
      break;
    }
   case 221:
    HEAP32[$tt1708 >> 2] = 6;
    $conv1752 = +($489 | 0);
    $conv1753 = +($490 | 0);
    $sub1754 = $conv1752 - $conv1753;
    $f1757 = $arrayidx1707 | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub1754, HEAP32[$f1757 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f1757 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 226;
    break;
   case 222:
    HEAP32[$tt1708 >> 2] = 3;
    HEAP32[$i1728 >> 2] = $sub1733;
    label = 226;
    break;
   case 223:
    $i1772 = $arrayidx1707;
    $491 = HEAP32[$i1772 >> 2] | 0;
    $f1778 = $arrayidx1713 | 0;
    $492 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1778 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1778 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    HEAP32[$tt1708 >> 2] = 6;
    $conv1782 = +($491 | 0);
    $sub1783 = $conv1782 - $492;
    $f1786 = $arrayidx1707 | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub1783, HEAP32[$f1786 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f1786 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 226;
    break;
   case 224:
    $f1792 = $arrayidx1707 | 0;
    $493 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1792 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1792 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $i1796 = $arrayidx1713;
    $494 = HEAP32[$i1796 >> 2] | 0;
    $conv1797 = +($494 | 0);
    $sub1798 = $493 - $conv1797;
    HEAPF64[tempDoublePtr >> 3] = $sub1798, HEAP32[$f1792 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f1792 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 226;
    break;
   case 225:
    $f1807 = $arrayidx1707 | 0;
    $495 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1807 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1807 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $f1811 = $arrayidx1713 | 0;
    $496 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1811 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1811 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $sub1812 = $495 - $496;
    HEAPF64[tempDoublePtr >> 3] = $sub1812, HEAP32[$f1807 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f1807 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 226;
    break;
   case 226:
    $incdec_ptr1819 = $pc_3 + 4 | 0;
    $497 = HEAP32[$incdec_ptr1819 >> 2] | 0;
    $and1820 = $497 & 127;
    $arrayidx1821 = 78492 + ($and1820 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx1821;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr1819;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $497;
    label = 391;
    break;
   case 227:
    $shr1824 = $i_2 >>> 23;
    $arrayidx1826 = $regs_3 + ($shr1824 * 12 & -1) | 0;
    $tt1827 = $regs_3 + ($shr1824 * 12 & -1) + 8 | 0;
    $498 = HEAP32[$tt1827 >> 2] | 0;
    $conv1829 = $498 << 8;
    $shl1830 = $conv1829 & 16776960;
    $add1831 = $shr1824 + 1 | 0;
    $arrayidx1832 = $regs_3 + ($add1831 * 12 & -1) | 0;
    $tt1833 = $regs_3 + ($add1831 * 12 & -1) + 8 | 0;
    $499 = HEAP32[$tt1833 >> 2] | 0;
    $and1836 = $499 & 255;
    $or1837 = $shl1830 | $and1836;
    if (($or1837 | 0) == 771) {
      label = 228;
      break;
    } else if (($or1837 | 0) == 774) {
      label = 229;
      break;
    } else if (($or1837 | 0) == 1539) {
      label = 230;
      break;
    } else if (($or1837 | 0) == 1542) {
      label = 231;
      break;
    } else {
      $i_0 = $i_2;
      label = 55;
      break;
    }
   case 228:
    $i1847 = $arrayidx1826;
    $500 = HEAP32[$i1847 >> 2] | 0;
    $i1851 = $arrayidx1832;
    $501 = HEAP32[$i1851 >> 2] | 0;
    $mul1852 = Math_imul($501, $500);
    HEAP32[$tt1827 >> 2] = 3;
    HEAP32[$i1847 >> 2] = $mul1852;
    label = 232;
    break;
   case 229:
    $i1883 = $arrayidx1826;
    $502 = HEAP32[$i1883 >> 2] | 0;
    $f1889 = $arrayidx1832 | 0;
    $503 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1889 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1889 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    HEAP32[$tt1827 >> 2] = 6;
    $conv1893 = +($502 | 0);
    $mul1894 = $conv1893 * $503;
    $f1897 = $arrayidx1826 | 0;
    HEAPF64[tempDoublePtr >> 3] = $mul1894, HEAP32[$f1897 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f1897 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 232;
    break;
   case 230:
    $f1903 = $arrayidx1826 | 0;
    $504 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1903 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1903 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $i1907 = $arrayidx1832;
    $505 = HEAP32[$i1907 >> 2] | 0;
    $conv1908 = +($505 | 0);
    $mul1909 = $504 * $conv1908;
    HEAPF64[tempDoublePtr >> 3] = $mul1909, HEAP32[$f1903 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f1903 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 232;
    break;
   case 231:
    $f1918 = $arrayidx1826 | 0;
    $506 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1918 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1918 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $f1922 = $arrayidx1832 | 0;
    $507 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1922 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1922 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $mul1923 = $506 * $507;
    HEAPF64[tempDoublePtr >> 3] = $mul1923, HEAP32[$f1918 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f1918 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 232;
    break;
   case 232:
    $incdec_ptr1930 = $pc_3 + 4 | 0;
    $508 = HEAP32[$incdec_ptr1930 >> 2] | 0;
    $and1931 = $508 & 127;
    $arrayidx1932 = 78492 + ($and1931 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx1932;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr1930;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $508;
    label = 391;
    break;
   case 233:
    $shr1935 = $i_2 >>> 23;
    $arrayidx1937 = $regs_3 + ($shr1935 * 12 & -1) | 0;
    $tt1938 = $regs_3 + ($shr1935 * 12 & -1) + 8 | 0;
    $509 = HEAP32[$tt1938 >> 2] | 0;
    $conv1940 = $509 << 8;
    $shl1941 = $conv1940 & 16776960;
    $add1942 = $shr1935 + 1 | 0;
    $arrayidx1943 = $regs_3 + ($add1942 * 12 & -1) | 0;
    $tt1944 = $regs_3 + ($add1942 * 12 & -1) + 8 | 0;
    $510 = HEAP32[$tt1944 >> 2] | 0;
    $and1947 = $510 & 255;
    $or1948 = $shl1941 | $and1947;
    if (($or1948 | 0) == 771) {
      label = 234;
      break;
    } else if (($or1948 | 0) == 774) {
      label = 235;
      break;
    } else if (($or1948 | 0) == 1539) {
      label = 236;
      break;
    } else if (($or1948 | 0) == 1542) {
      label = 237;
      break;
    } else {
      $i_0 = $i_2;
      label = 55;
      break;
    }
   case 234:
    $i1954 = $arrayidx1937;
    $511 = HEAP32[$i1954 >> 2] | 0;
    $i1960 = $arrayidx1943;
    $512 = HEAP32[$i1960 >> 2] | 0;
    HEAP32[$tt1938 >> 2] = 6;
    $conv1964 = +($511 | 0);
    $conv1965 = +($512 | 0);
    $div1966 = $conv1964 / $conv1965;
    $f1969 = $arrayidx1937 | 0;
    HEAPF64[tempDoublePtr >> 3] = $div1966, HEAP32[$f1969 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f1969 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 238;
    break;
   case 235:
    $i1976 = $arrayidx1937;
    $513 = HEAP32[$i1976 >> 2] | 0;
    $f1982 = $arrayidx1943 | 0;
    $514 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1982 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1982 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    HEAP32[$tt1938 >> 2] = 6;
    $conv1986 = +($513 | 0);
    $div1987 = $conv1986 / $514;
    $f1990 = $arrayidx1937 | 0;
    HEAPF64[tempDoublePtr >> 3] = $div1987, HEAP32[$f1990 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f1990 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 238;
    break;
   case 236:
    $f1996 = $arrayidx1937 | 0;
    $515 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1996 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1996 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $i2000 = $arrayidx1943;
    $516 = HEAP32[$i2000 >> 2] | 0;
    $conv2001 = +($516 | 0);
    $div2002 = $515 / $conv2001;
    HEAPF64[tempDoublePtr >> 3] = $div2002, HEAP32[$f1996 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f1996 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 238;
    break;
   case 237:
    $f2011 = $arrayidx1937 | 0;
    $517 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2011 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2011 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $f2015 = $arrayidx1943 | 0;
    $518 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2015 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2015 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $div2016 = $517 / $518;
    HEAPF64[tempDoublePtr >> 3] = $div2016, HEAP32[$f2011 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f2011 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 238;
    break;
   case 238:
    $incdec_ptr2023 = $pc_3 + 4 | 0;
    $519 = HEAP32[$incdec_ptr2023 >> 2] | 0;
    $and2024 = $519 & 127;
    $arrayidx2025 = 78492 + ($and2024 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx2025;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr2023;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $519;
    label = 391;
    break;
   case 239:
    $shr2028 = $i_2 >>> 23;
    $arrayidx2030 = $regs_3 + ($shr2028 * 12 & -1) | 0;
    $tt2031 = $regs_3 + ($shr2028 * 12 & -1) + 8 | 0;
    $520 = HEAP32[$tt2031 >> 2] | 0;
    if (($520 | 0) == 3) {
      label = 240;
      break;
    } else if (($520 | 0) == 6) {
      label = 244;
      break;
    } else {
      label = 245;
      break;
    }
   case 240:
    $i2037 = $arrayidx2030;
    $521 = HEAP32[$i2037 >> 2] | 0;
    $shr2040 = $i_2 >>> 7;
    $and2041 = $shr2040 & 127;
    $add2044 = $521 + $and2041 | 0;
    $_lobit1530 = $521 >>> 31;
    $cmp2050 = ($_lobit1530 | 0) == 0;
    if ($cmp2050) {
      label = 241;
      break;
    } else {
      label = 243;
      break;
    }
   case 241:
    $add2044_lobit = $add2044 >>> 31;
    $cmp2057 = ($_lobit1530 | 0) == ($add2044_lobit | 0);
    if ($cmp2057) {
      label = 243;
      break;
    } else {
      label = 242;
      break;
    }
   case 242:
    HEAP32[$tt2031 >> 2] = 6;
    $conv2063 = +($521 | 0);
    $conv2064 = +($and2041 | 0);
    $add2065 = $conv2064 + $conv2063;
    $f2068 = $arrayidx2030 | 0;
    HEAPF64[tempDoublePtr >> 3] = $add2065, HEAP32[$f2068 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f2068 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 246;
    break;
   case 243:
    HEAP32[$i2037 >> 2] = $add2044;
    label = 246;
    break;
   case 244:
    $shr2075 = $i_2 >>> 7;
    $and2076 = $shr2075 & 127;
    $conv2077 = +($and2076 | 0);
    $f2080 = $arrayidx2030 | 0;
    $522 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2080 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2080 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $add2081 = $conv2077 + $522;
    HEAPF64[tempDoublePtr >> 3] = $add2081, HEAP32[$f2080 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f2080 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 246;
    break;
   case 245:
    $add2084 = $shr2028 + 1 | 0;
    $tt2086 = $regs_3 + ($add2084 * 12 & -1) + 8 | 0;
    HEAP32[$tt2086 >> 2] = 3;
    $shr2087 = $i_2 >>> 7;
    $and2088 = $shr2087 & 127;
    $value2091 = $regs_3 + ($add2084 * 12 & -1) | 0;
    $i2092 = $value2091;
    HEAP32[$i2092 >> 2] = $and2088;
    $shl2095 = $shr2028 << 23;
    $and2098 = $i_2 & 8372224;
    $or2096 = $and2098 | $shl2095;
    $or2102 = $or2096 | 160;
    $i_0 = $or2102;
    label = 55;
    break;
   case 246:
    $incdec_ptr2104 = $pc_3 + 4 | 0;
    $523 = HEAP32[$incdec_ptr2104 >> 2] | 0;
    $and2105 = $523 & 127;
    $arrayidx2106 = 78492 + ($and2105 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx2106;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr2104;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $523;
    label = 391;
    break;
   case 247:
    $shr2109 = $i_2 >>> 23;
    $add_ptr2113 = $regs_3 + ($shr2109 * 12 & -1) | 0;
    $tt2115 = $regs_3 + ($shr2109 * 12 & -1) + 8 | 0;
    $524 = HEAP32[$tt2115 >> 2] | 0;
    if (($524 | 0) == 3) {
      label = 248;
      break;
    } else if (($524 | 0) == 6) {
      label = 251;
      break;
    } else {
      label = 252;
      break;
    }
   case 248:
    $i2121 = $add_ptr2113;
    $525 = HEAP32[$i2121 >> 2] | 0;
    $shr2124 = $i_2 >>> 7;
    $and2125 = $shr2124 & 127;
    $sub2128 = $525 - $and2125 | 0;
    $_lobit = $525 >>> 31;
    $sub2128_lobit = $sub2128 >>> 31;
    $cmp2133 = ($_lobit | 0) != ($sub2128_lobit | 0);
    $cmp2129 = ($525 | 0) < 0;
    $or_cond1548 = $cmp2133 & $cmp2129;
    if ($or_cond1548) {
      label = 249;
      break;
    } else {
      label = 250;
      break;
    }
   case 249:
    HEAP32[$tt2115 >> 2] = 6;
    $conv2147 = +($525 | 0);
    $conv2148 = +($and2125 | 0);
    $sub2149 = $conv2147 - $conv2148;
    $f2152 = $add_ptr2113 | 0;
    HEAPF64[tempDoublePtr >> 3] = $sub2149, HEAP32[$f2152 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f2152 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 253;
    break;
   case 250:
    HEAP32[$i2121 >> 2] = $sub2128;
    label = 253;
    break;
   case 251:
    $shr2160 = $i_2 >>> 7;
    $and2161 = $shr2160 & 127;
    $conv2162 = +($and2161 | 0);
    $f2165 = $add_ptr2113 | 0;
    $526 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2165 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2165 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $sub2166 = $526 - $conv2162;
    HEAPF64[tempDoublePtr >> 3] = $sub2166, HEAP32[$f2165 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f2165 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 253;
    break;
   case 252:
    $add_ptr2113_sum = $shr2109 + 1 | 0;
    $tt2170 = $regs_3 + ($add_ptr2113_sum * 12 & -1) + 8 | 0;
    HEAP32[$tt2170 >> 2] = 3;
    $shr2171 = $i_2 >>> 7;
    $and2172 = $shr2171 & 127;
    $value2174 = $regs_3 + ($add_ptr2113_sum * 12 & -1) | 0;
    $i2175 = $value2174;
    HEAP32[$i2175 >> 2] = $and2172;
    $shl2178 = $shr2109 << 23;
    $and2181 = $i_2 & 8372224;
    $or2179 = $and2181 | $shl2178;
    $or2185 = $or2179 | 160;
    $i_0 = $or2185;
    label = 55;
    break;
   case 253:
    $incdec_ptr2187 = $pc_3 + 4 | 0;
    $527 = HEAP32[$incdec_ptr2187 >> 2] | 0;
    $and2188 = $527 & 127;
    $arrayidx2189 = 78492 + ($and2188 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx2189;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr2187;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $527;
    label = 391;
    break;
   case 254:
    $shr2192 = $i_2 >>> 23;
    $arrayidx2194 = $regs_3 + ($shr2192 * 12 & -1) | 0;
    $add2195 = $shr2192 + 1 | 0;
    $arrayidx2196 = $regs_3 + ($add2195 * 12 & -1) | 0;
    $call2197 = invoke_iiii(852, 0, $arrayidx2194 | 0, $arrayidx2196 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $tobool2198 = ($call2197 | 0) == 0;
    $tt2214 = $regs_3 + ($shr2192 * 12 & -1) + 8 | 0;
    if ($tobool2198) {
      label = 256;
      break;
    } else {
      label = 255;
      break;
    }
   case 255:
    HEAP32[$tt2214 >> 2] = 2;
    $i2205 = $arrayidx2194;
    HEAP32[$i2205 >> 2] = 1;
    label = 269;
    break;
   case 256:
    $528 = HEAP32[$tt2214 >> 2] | 0;
    $conv2216 = $528 << 8;
    $shl2217 = $conv2216 & 16776960;
    $tt2220 = $regs_3 + ($add2195 * 12 & -1) + 8 | 0;
    $529 = HEAP32[$tt2220 >> 2] | 0;
    $and2223 = $529 & 255;
    $or2224 = $shl2217 | $and2223;
    if (($or2224 | 0) == 771) {
      label = 257;
      break;
    } else if (($or2224 | 0) == 774) {
      label = 260;
      break;
    } else if (($or2224 | 0) == 1539) {
      label = 263;
      break;
    } else if (($or2224 | 0) == 1542) {
      label = 266;
      break;
    } else {
      $i_0 = $i_2;
      label = 55;
      break;
    }
   case 257:
    $i2229 = $arrayidx2194;
    $530 = HEAP32[$i2229 >> 2] | 0;
    $i2233 = $arrayidx2196;
    $531 = HEAP32[$i2233 >> 2] | 0;
    $cmp2234 = ($530 | 0) == ($531 | 0);
    if ($cmp2234) {
      label = 258;
      break;
    } else {
      label = 259;
      break;
    }
   case 258:
    HEAP32[$tt2214 >> 2] = 2;
    HEAP32[$i2229 >> 2] = 1;
    label = 269;
    break;
   case 259:
    HEAP32[$tt2214 >> 2] = 0;
    HEAP32[$i2229 >> 2] = 1;
    label = 269;
    break;
   case 260:
    $i2258 = $arrayidx2194;
    $532 = HEAP32[$i2258 >> 2] | 0;
    $conv2259 = +($532 | 0);
    $f2263 = $arrayidx2196 | 0;
    $533 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2263 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2263 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $cmp2264 = $conv2259 == $533;
    if ($cmp2264) {
      label = 261;
      break;
    } else {
      label = 262;
      break;
    }
   case 261:
    HEAP32[$tt2214 >> 2] = 2;
    HEAP32[$i2258 >> 2] = 1;
    label = 269;
    break;
   case 262:
    HEAP32[$tt2214 >> 2] = 0;
    HEAP32[$i2258 >> 2] = 1;
    label = 269;
    break;
   case 263:
    $f2288 = $arrayidx2194 | 0;
    $534 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2288 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2288 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $i2292 = $arrayidx2196;
    $535 = HEAP32[$i2292 >> 2] | 0;
    $conv2293 = +($535 | 0);
    $cmp2294 = $534 == $conv2293;
    if ($cmp2294) {
      label = 264;
      break;
    } else {
      label = 265;
      break;
    }
   case 264:
    HEAP32[$tt2214 >> 2] = 2;
    $i2302 = $arrayidx2194;
    HEAP32[$i2302 >> 2] = 1;
    label = 269;
    break;
   case 265:
    HEAP32[$tt2214 >> 2] = 0;
    $i2310 = $arrayidx2194;
    HEAP32[$i2310 >> 2] = 1;
    label = 269;
    break;
   case 266:
    $f2318 = $arrayidx2194 | 0;
    $536 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2318 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2318 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $f2322 = $arrayidx2196 | 0;
    $537 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2322 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2322 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $cmp2323 = $536 == $537;
    if ($cmp2323) {
      label = 267;
      break;
    } else {
      label = 268;
      break;
    }
   case 267:
    HEAP32[$tt2214 >> 2] = 2;
    $i2331 = $arrayidx2194;
    HEAP32[$i2331 >> 2] = 1;
    label = 269;
    break;
   case 268:
    HEAP32[$tt2214 >> 2] = 0;
    $i2339 = $arrayidx2194;
    HEAP32[$i2339 >> 2] = 1;
    label = 269;
    break;
   case 269:
    $incdec_ptr2347 = $pc_3 + 4 | 0;
    $538 = HEAP32[$incdec_ptr2347 >> 2] | 0;
    $and2348 = $538 & 127;
    $arrayidx2349 = 78492 + ($and2348 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx2349;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr2347;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $538;
    label = 391;
    break;
   case 270:
    $shr2353 = $i_2 >>> 23;
    $arrayidx2355 = $regs_3 + ($shr2353 * 12 & -1) | 0;
    $tt2356 = $regs_3 + ($shr2353 * 12 & -1) + 8 | 0;
    $539 = HEAP32[$tt2356 >> 2] | 0;
    $conv2358 = $539 << 8;
    $shl2359 = $conv2358 & 16776960;
    $add2360 = $shr2353 + 1 | 0;
    $arrayidx2361 = $regs_3 + ($add2360 * 12 & -1) | 0;
    $tt2362 = $regs_3 + ($add2360 * 12 & -1) + 8 | 0;
    $540 = HEAP32[$tt2362 >> 2] | 0;
    $and2365 = $540 & 255;
    $or2366 = $shl2359 | $and2365;
    if (($or2366 | 0) == 771) {
      label = 271;
      break;
    } else if (($or2366 | 0) == 774) {
      label = 274;
      break;
    } else if (($or2366 | 0) == 1539) {
      label = 277;
      break;
    } else if (($or2366 | 0) == 1542) {
      label = 280;
      break;
    } else {
      $i_0 = $i_2;
      label = 55;
      break;
    }
   case 271:
    $i2371 = $arrayidx2355;
    $541 = HEAP32[$i2371 >> 2] | 0;
    $i2375 = $arrayidx2361;
    $542 = HEAP32[$i2375 >> 2] | 0;
    $cmp2376 = ($541 | 0) < ($542 | 0);
    if ($cmp2376) {
      label = 272;
      break;
    } else {
      label = 273;
      break;
    }
   case 272:
    HEAP32[$tt2356 >> 2] = 2;
    HEAP32[$i2371 >> 2] = 1;
    label = 283;
    break;
   case 273:
    HEAP32[$tt2356 >> 2] = 0;
    HEAP32[$i2371 >> 2] = 1;
    label = 283;
    break;
   case 274:
    $i2400 = $arrayidx2355;
    $543 = HEAP32[$i2400 >> 2] | 0;
    $conv2401 = +($543 | 0);
    $f2405 = $arrayidx2361 | 0;
    $544 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2405 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2405 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $cmp2406 = $conv2401 < $544;
    if ($cmp2406) {
      label = 275;
      break;
    } else {
      label = 276;
      break;
    }
   case 275:
    HEAP32[$tt2356 >> 2] = 2;
    HEAP32[$i2400 >> 2] = 1;
    label = 283;
    break;
   case 276:
    HEAP32[$tt2356 >> 2] = 0;
    HEAP32[$i2400 >> 2] = 1;
    label = 283;
    break;
   case 277:
    $f2430 = $arrayidx2355 | 0;
    $545 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2430 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2430 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $i2434 = $arrayidx2361;
    $546 = HEAP32[$i2434 >> 2] | 0;
    $conv2435 = +($546 | 0);
    $cmp2436 = $545 < $conv2435;
    if ($cmp2436) {
      label = 278;
      break;
    } else {
      label = 279;
      break;
    }
   case 278:
    HEAP32[$tt2356 >> 2] = 2;
    $i2444 = $arrayidx2355;
    HEAP32[$i2444 >> 2] = 1;
    label = 283;
    break;
   case 279:
    HEAP32[$tt2356 >> 2] = 0;
    $i2452 = $arrayidx2355;
    HEAP32[$i2452 >> 2] = 1;
    label = 283;
    break;
   case 280:
    $f2460 = $arrayidx2355 | 0;
    $547 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2460 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2460 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $f2464 = $arrayidx2361 | 0;
    $548 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2464 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2464 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $cmp2465 = $547 < $548;
    if ($cmp2465) {
      label = 281;
      break;
    } else {
      label = 282;
      break;
    }
   case 281:
    HEAP32[$tt2356 >> 2] = 2;
    $i2473 = $arrayidx2355;
    HEAP32[$i2473 >> 2] = 1;
    label = 283;
    break;
   case 282:
    HEAP32[$tt2356 >> 2] = 0;
    $i2481 = $arrayidx2355;
    HEAP32[$i2481 >> 2] = 1;
    label = 283;
    break;
   case 283:
    $incdec_ptr2488 = $pc_3 + 4 | 0;
    $549 = HEAP32[$incdec_ptr2488 >> 2] | 0;
    $and2489 = $549 & 127;
    $arrayidx2490 = 78492 + ($and2489 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx2490;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr2488;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $549;
    label = 391;
    break;
   case 284:
    $shr2494 = $i_2 >>> 23;
    $arrayidx2496 = $regs_3 + ($shr2494 * 12 & -1) | 0;
    $tt2497 = $regs_3 + ($shr2494 * 12 & -1) + 8 | 0;
    $550 = HEAP32[$tt2497 >> 2] | 0;
    $conv2499 = $550 << 8;
    $shl2500 = $conv2499 & 16776960;
    $add2501 = $shr2494 + 1 | 0;
    $arrayidx2502 = $regs_3 + ($add2501 * 12 & -1) | 0;
    $tt2503 = $regs_3 + ($add2501 * 12 & -1) + 8 | 0;
    $551 = HEAP32[$tt2503 >> 2] | 0;
    $and2506 = $551 & 255;
    $or2507 = $shl2500 | $and2506;
    if (($or2507 | 0) == 771) {
      label = 285;
      break;
    } else if (($or2507 | 0) == 774) {
      label = 288;
      break;
    } else if (($or2507 | 0) == 1539) {
      label = 291;
      break;
    } else if (($or2507 | 0) == 1542) {
      label = 294;
      break;
    } else {
      $i_0 = $i_2;
      label = 55;
      break;
    }
   case 285:
    $i2512 = $arrayidx2496;
    $552 = HEAP32[$i2512 >> 2] | 0;
    $i2516 = $arrayidx2502;
    $553 = HEAP32[$i2516 >> 2] | 0;
    $cmp2517 = ($552 | 0) > ($553 | 0);
    if ($cmp2517) {
      label = 287;
      break;
    } else {
      label = 286;
      break;
    }
   case 286:
    HEAP32[$tt2497 >> 2] = 2;
    HEAP32[$i2512 >> 2] = 1;
    label = 297;
    break;
   case 287:
    HEAP32[$tt2497 >> 2] = 0;
    HEAP32[$i2512 >> 2] = 1;
    label = 297;
    break;
   case 288:
    $i2541 = $arrayidx2496;
    $554 = HEAP32[$i2541 >> 2] | 0;
    $conv2542 = +($554 | 0);
    $f2546 = $arrayidx2502 | 0;
    $555 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2546 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2546 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $cmp2547 = $conv2542 > $555;
    if ($cmp2547) {
      label = 290;
      break;
    } else {
      label = 289;
      break;
    }
   case 289:
    HEAP32[$tt2497 >> 2] = 2;
    HEAP32[$i2541 >> 2] = 1;
    label = 297;
    break;
   case 290:
    HEAP32[$tt2497 >> 2] = 0;
    HEAP32[$i2541 >> 2] = 1;
    label = 297;
    break;
   case 291:
    $f2571 = $arrayidx2496 | 0;
    $556 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2571 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2571 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $i2575 = $arrayidx2502;
    $557 = HEAP32[$i2575 >> 2] | 0;
    $conv2576 = +($557 | 0);
    $cmp2577 = $556 > $conv2576;
    if ($cmp2577) {
      label = 293;
      break;
    } else {
      label = 292;
      break;
    }
   case 292:
    HEAP32[$tt2497 >> 2] = 2;
    $i2585 = $arrayidx2496;
    HEAP32[$i2585 >> 2] = 1;
    label = 297;
    break;
   case 293:
    HEAP32[$tt2497 >> 2] = 0;
    $i2593 = $arrayidx2496;
    HEAP32[$i2593 >> 2] = 1;
    label = 297;
    break;
   case 294:
    $f2601 = $arrayidx2496 | 0;
    $558 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2601 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2601 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $f2605 = $arrayidx2502 | 0;
    $559 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2605 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2605 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $cmp2606 = $558 > $559;
    if ($cmp2606) {
      label = 296;
      break;
    } else {
      label = 295;
      break;
    }
   case 295:
    HEAP32[$tt2497 >> 2] = 2;
    $i2614 = $arrayidx2496;
    HEAP32[$i2614 >> 2] = 1;
    label = 297;
    break;
   case 296:
    HEAP32[$tt2497 >> 2] = 0;
    $i2622 = $arrayidx2496;
    HEAP32[$i2622 >> 2] = 1;
    label = 297;
    break;
   case 297:
    $incdec_ptr2629 = $pc_3 + 4 | 0;
    $560 = HEAP32[$incdec_ptr2629 >> 2] | 0;
    $and2630 = $560 & 127;
    $arrayidx2631 = 78492 + ($and2630 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx2631;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr2629;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $560;
    label = 391;
    break;
   case 298:
    $shr2635 = $i_2 >>> 23;
    $arrayidx2637 = $regs_3 + ($shr2635 * 12 & -1) | 0;
    $tt2638 = $regs_3 + ($shr2635 * 12 & -1) + 8 | 0;
    $561 = HEAP32[$tt2638 >> 2] | 0;
    $conv2640 = $561 << 8;
    $shl2641 = $conv2640 & 16776960;
    $add2642 = $shr2635 + 1 | 0;
    $arrayidx2643 = $regs_3 + ($add2642 * 12 & -1) | 0;
    $tt2644 = $regs_3 + ($add2642 * 12 & -1) + 8 | 0;
    $562 = HEAP32[$tt2644 >> 2] | 0;
    $and2647 = $562 & 255;
    $or2648 = $shl2641 | $and2647;
    if (($or2648 | 0) == 771) {
      label = 299;
      break;
    } else if (($or2648 | 0) == 774) {
      label = 302;
      break;
    } else if (($or2648 | 0) == 1539) {
      label = 305;
      break;
    } else if (($or2648 | 0) == 1542) {
      label = 308;
      break;
    } else {
      $i_0 = $i_2;
      label = 55;
      break;
    }
   case 299:
    $i2653 = $arrayidx2637;
    $563 = HEAP32[$i2653 >> 2] | 0;
    $i2657 = $arrayidx2643;
    $564 = HEAP32[$i2657 >> 2] | 0;
    $cmp2658 = ($563 | 0) > ($564 | 0);
    if ($cmp2658) {
      label = 300;
      break;
    } else {
      label = 301;
      break;
    }
   case 300:
    HEAP32[$tt2638 >> 2] = 2;
    HEAP32[$i2653 >> 2] = 1;
    label = 311;
    break;
   case 301:
    HEAP32[$tt2638 >> 2] = 0;
    HEAP32[$i2653 >> 2] = 1;
    label = 311;
    break;
   case 302:
    $i2682 = $arrayidx2637;
    $565 = HEAP32[$i2682 >> 2] | 0;
    $conv2683 = +($565 | 0);
    $f2687 = $arrayidx2643 | 0;
    $566 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2687 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2687 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $cmp2688 = $conv2683 > $566;
    if ($cmp2688) {
      label = 303;
      break;
    } else {
      label = 304;
      break;
    }
   case 303:
    HEAP32[$tt2638 >> 2] = 2;
    HEAP32[$i2682 >> 2] = 1;
    label = 311;
    break;
   case 304:
    HEAP32[$tt2638 >> 2] = 0;
    HEAP32[$i2682 >> 2] = 1;
    label = 311;
    break;
   case 305:
    $f2712 = $arrayidx2637 | 0;
    $567 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2712 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2712 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $i2716 = $arrayidx2643;
    $568 = HEAP32[$i2716 >> 2] | 0;
    $conv2717 = +($568 | 0);
    $cmp2718 = $567 > $conv2717;
    if ($cmp2718) {
      label = 306;
      break;
    } else {
      label = 307;
      break;
    }
   case 306:
    HEAP32[$tt2638 >> 2] = 2;
    $i2726 = $arrayidx2637;
    HEAP32[$i2726 >> 2] = 1;
    label = 311;
    break;
   case 307:
    HEAP32[$tt2638 >> 2] = 0;
    $i2734 = $arrayidx2637;
    HEAP32[$i2734 >> 2] = 1;
    label = 311;
    break;
   case 308:
    $f2742 = $arrayidx2637 | 0;
    $569 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2742 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2742 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $f2746 = $arrayidx2643 | 0;
    $570 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2746 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2746 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $cmp2747 = $569 > $570;
    if ($cmp2747) {
      label = 309;
      break;
    } else {
      label = 310;
      break;
    }
   case 309:
    HEAP32[$tt2638 >> 2] = 2;
    $i2755 = $arrayidx2637;
    HEAP32[$i2755 >> 2] = 1;
    label = 311;
    break;
   case 310:
    HEAP32[$tt2638 >> 2] = 0;
    $i2763 = $arrayidx2637;
    HEAP32[$i2763 >> 2] = 1;
    label = 311;
    break;
   case 311:
    $incdec_ptr2770 = $pc_3 + 4 | 0;
    $571 = HEAP32[$incdec_ptr2770 >> 2] | 0;
    $and2771 = $571 & 127;
    $arrayidx2772 = 78492 + ($and2771 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx2772;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr2770;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $571;
    label = 391;
    break;
   case 312:
    $shr2776 = $i_2 >>> 23;
    $arrayidx2778 = $regs_3 + ($shr2776 * 12 & -1) | 0;
    $tt2779 = $regs_3 + ($shr2776 * 12 & -1) + 8 | 0;
    $572 = HEAP32[$tt2779 >> 2] | 0;
    $conv2781 = $572 << 8;
    $shl2782 = $conv2781 & 16776960;
    $add2783 = $shr2776 + 1 | 0;
    $arrayidx2784 = $regs_3 + ($add2783 * 12 & -1) | 0;
    $tt2785 = $regs_3 + ($add2783 * 12 & -1) + 8 | 0;
    $573 = HEAP32[$tt2785 >> 2] | 0;
    $and2788 = $573 & 255;
    $or2789 = $shl2782 | $and2788;
    if (($or2789 | 0) == 771) {
      label = 313;
      break;
    } else if (($or2789 | 0) == 774) {
      label = 316;
      break;
    } else if (($or2789 | 0) == 1539) {
      label = 319;
      break;
    } else if (($or2789 | 0) == 1542) {
      label = 322;
      break;
    } else {
      $i_0 = $i_2;
      label = 55;
      break;
    }
   case 313:
    $i2794 = $arrayidx2778;
    $574 = HEAP32[$i2794 >> 2] | 0;
    $i2798 = $arrayidx2784;
    $575 = HEAP32[$i2798 >> 2] | 0;
    $cmp2799 = ($574 | 0) < ($575 | 0);
    if ($cmp2799) {
      label = 315;
      break;
    } else {
      label = 314;
      break;
    }
   case 314:
    HEAP32[$tt2779 >> 2] = 2;
    HEAP32[$i2794 >> 2] = 1;
    label = 325;
    break;
   case 315:
    HEAP32[$tt2779 >> 2] = 0;
    HEAP32[$i2794 >> 2] = 1;
    label = 325;
    break;
   case 316:
    $i2823 = $arrayidx2778;
    $576 = HEAP32[$i2823 >> 2] | 0;
    $conv2824 = +($576 | 0);
    $f2828 = $arrayidx2784 | 0;
    $577 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2828 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2828 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $cmp2829 = $conv2824 < $577;
    if ($cmp2829) {
      label = 318;
      break;
    } else {
      label = 317;
      break;
    }
   case 317:
    HEAP32[$tt2779 >> 2] = 2;
    HEAP32[$i2823 >> 2] = 1;
    label = 325;
    break;
   case 318:
    HEAP32[$tt2779 >> 2] = 0;
    HEAP32[$i2823 >> 2] = 1;
    label = 325;
    break;
   case 319:
    $f2853 = $arrayidx2778 | 0;
    $578 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2853 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2853 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $i2857 = $arrayidx2784;
    $579 = HEAP32[$i2857 >> 2] | 0;
    $conv2858 = +($579 | 0);
    $cmp2859 = $578 < $conv2858;
    if ($cmp2859) {
      label = 321;
      break;
    } else {
      label = 320;
      break;
    }
   case 320:
    HEAP32[$tt2779 >> 2] = 2;
    $i2867 = $arrayidx2778;
    HEAP32[$i2867 >> 2] = 1;
    label = 325;
    break;
   case 321:
    HEAP32[$tt2779 >> 2] = 0;
    $i2875 = $arrayidx2778;
    HEAP32[$i2875 >> 2] = 1;
    label = 325;
    break;
   case 322:
    $f2883 = $arrayidx2778 | 0;
    $580 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2883 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2883 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $f2887 = $arrayidx2784 | 0;
    $581 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2887 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2887 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $cmp2888 = $580 < $581;
    if ($cmp2888) {
      label = 324;
      break;
    } else {
      label = 323;
      break;
    }
   case 323:
    HEAP32[$tt2779 >> 2] = 2;
    $i2896 = $arrayidx2778;
    HEAP32[$i2896 >> 2] = 1;
    label = 325;
    break;
   case 324:
    HEAP32[$tt2779 >> 2] = 0;
    $i2904 = $arrayidx2778;
    HEAP32[$i2904 >> 2] = 1;
    label = 325;
    break;
   case 325:
    $incdec_ptr2911 = $pc_3 + 4 | 0;
    $582 = HEAP32[$incdec_ptr2911 >> 2] | 0;
    $and2912 = $582 & 127;
    $arrayidx2913 = 78492 + ($and2912 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx2913;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr2911;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $582;
    label = 391;
    break;
   case 326:
    $shr2914 = $i_2 >>> 23;
    $arrayidx2916 = $regs_3 + ($shr2914 * 12 & -1) | 0;
    $shr2917 = $i_2 >>> 7;
    $and2918 = $shr2917 & 127;
    $shr2919 = $i_2 >>> 14;
    $and2920 = $shr2919 & 511;
    $arrayidx2921 = $regs_3 + ($and2920 * 12 & -1) | 0;
    invoke_viiii(506, $tmp2922 | 0, $mrb | 0, $and2918 | 0, $arrayidx2921 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $583 = $arrayidx2916;
    HEAP32[$583 >> 2] = HEAP32[$425 >> 2] | 0;
    HEAP32[$583 + 4 >> 2] = HEAP32[$425 + 4 >> 2] | 0;
    HEAP32[$583 + 8 >> 2] = HEAP32[$425 + 8 >> 2] | 0;
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr2923 = $pc_3 + 4 | 0;
    $584 = HEAP32[$incdec_ptr2923 >> 2] | 0;
    $and2924 = $584 & 127;
    $arrayidx2925 = 78492 + ($and2924 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx2925;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr2923;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $584;
    label = 391;
    break;
   case 327:
    $shr2926 = $i_2 >>> 23;
    $arrayidx2928 = $regs_3 + ($shr2926 * 12 & -1) | 0;
    $shr2930 = $i_2 >>> 14;
    $and2931 = $shr2930 & 511;
    $arrayidx2932 = $regs_3 + ($and2931 * 12 & -1) | 0;
    invoke_viii(600, $agg_tmp2929 | 0, $mrb | 0, $arrayidx2932 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    invoke_viii(94, $mrb | 0, $arrayidx2928 | 0, $agg_tmp2929 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr2933 = $pc_3 + 4 | 0;
    $585 = HEAP32[$incdec_ptr2933 >> 2] | 0;
    $and2934 = $585 & 127;
    $arrayidx2935 = 78492 + ($and2934 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx2935;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr2933;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $585;
    label = 391;
    break;
   case 328:
    $shr2936 = $i_2 >>> 23;
    $arrayidx2938 = $regs_3 + ($shr2936 * 12 & -1) | 0;
    $shr2939 = $i_2 >>> 14;
    $and2940 = $shr2939 & 511;
    $arrayidx2941 = $regs_3 + ($and2940 * 12 & -1) | 0;
    invoke_viii(378, $mrb | 0, $arrayidx2938 | 0, $arrayidx2941 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr2942 = $pc_3 + 4 | 0;
    $586 = HEAP32[$incdec_ptr2942 >> 2] | 0;
    $and2943 = $586 & 127;
    $arrayidx2944 = 78492 + ($and2943 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx2944;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr2942;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $586;
    label = 391;
    break;
   case 329:
    $shr2947 = $i_2 >>> 23;
    $shr2951 = $i_2 >>> 7;
    $and2952 = $shr2951 & 127;
    $shr2955 = $i_2 >>> 14;
    $and2956 = $shr2955 & 511;
    $arrayidx2957 = $regs_3 + ($and2956 * 12 & -1) | 0;
    $587 = $arrayidx2957;
    HEAP32[$426 >> 2] = HEAP32[$587 >> 2] | 0;
    HEAP32[$426 + 4 >> 2] = HEAP32[$587 + 4 >> 2] | 0;
    HEAP32[$426 + 8 >> 2] = HEAP32[$587 + 8 >> 2] | 0;
    $588 = HEAP32[$tt2958 >> 2] | 0;
    $cmp2959 = ($588 | 0) == 14;
    if ($cmp2959) {
      label = 333;
      break;
    } else {
      label = 330;
      break;
    }
   case 330:
    $cmp2962 = ($and2952 | 0) == 0;
    if ($cmp2962) {
      label = 331;
      break;
    } else {
      label = 332;
      break;
    }
   case 331:
    $arrayidx2967 = $regs_3 + ($shr2947 * 12 & -1) | 0;
    $589 = $arrayidx2967;
    HEAP32[$589 >> 2] = HEAP32[$426 >> 2] | 0;
    HEAP32[$589 + 4 >> 2] = HEAP32[$426 + 4 >> 2] | 0;
    HEAP32[$589 + 8 >> 2] = HEAP32[$426 + 8 >> 2] | 0;
    label = 334;
    break;
   case 332:
    $tt2971 = $regs_3 + ($shr2947 * 12 & -1) + 8 | 0;
    HEAP32[$tt2971 >> 2] = 0;
    $value2973 = $regs_3 + ($shr2947 * 12 & -1) | 0;
    $i2974 = $value2973;
    HEAP32[$i2974 >> 2] = 0;
    label = 334;
    break;
   case 333:
    $arrayidx2980 = $regs_3 + ($shr2947 * 12 & -1) | 0;
    invoke_viiii(764, $tmp2981 | 0, 0, $v2954 | 0, $and2952 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $590 = $arrayidx2980;
    HEAP32[$590 >> 2] = HEAP32[$427 >> 2] | 0;
    HEAP32[$590 + 4 >> 2] = HEAP32[$427 + 4 >> 2] | 0;
    HEAP32[$590 + 8 >> 2] = HEAP32[$427 + 8 >> 2] | 0;
    label = 334;
    break;
   case 334:
    $incdec_ptr2983 = $pc_3 + 4 | 0;
    $591 = HEAP32[$incdec_ptr2983 >> 2] | 0;
    $and2984 = $591 & 127;
    $arrayidx2985 = 78492 + ($and2984 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx2985;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr2983;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $591;
    label = 391;
    break;
   case 335:
    $shr2986 = $i_2 >>> 14;
    $and2987 = $shr2986 & 511;
    $arrayidx2988 = $regs_3 + ($and2987 * 12 & -1) | 0;
    $shr2989 = $i_2 >>> 7;
    $and2990 = $shr2989 & 127;
    $shr2991 = $i_2 >>> 23;
    $arrayidx2993 = $regs_3 + ($shr2991 * 12 & -1) | 0;
    invoke_viiii(684, $mrb | 0, $arrayidx2988 | 0, $and2990 | 0, $arrayidx2993 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr2994 = $pc_3 + 4 | 0;
    $592 = HEAP32[$incdec_ptr2994 >> 2] | 0;
    $and2995 = $592 & 127;
    $arrayidx2996 = 78492 + ($and2995 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx2996;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr2994;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $592;
    label = 391;
    break;
   case 336:
    $shr2999 = $i_2 >>> 23;
    $arrayidx3003 = $regs_3 + ($shr2999 * 12 & -1) | 0;
    $593 = $arrayidx3003;
    $v3002_sroa_2_8__idx55 = $regs_3 + ($shr2999 * 12 & -1) + 8 | 0;
    $v3002_sroa_2_8_copyload = HEAP32[$v3002_sroa_2_8__idx55 >> 2] | 0;
    $shr3005 = $i_2 >>> 14;
    $and3006 = $shr3005 & 511;
    $shr3008 = $i_2 >>> 7;
    $and3009 = $shr3008 & 127;
    $cmp3011 = ($v3002_sroa_2_8_copyload | 0) == 14;
    if ($cmp3011) {
      label = 339;
      break;
    } else {
      label = 337;
      break;
    }
   case 337:
    invoke_viii(590, $tmp3016 | 0, $mrb | 0, 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    HEAP32[$593 >> 2] = HEAP32[$430 >> 2] | 0;
    HEAP32[$593 + 4 >> 2] = HEAP32[$430 + 4 >> 2] | 0;
    HEAP32[$593 + 8 >> 2] = HEAP32[$430 + 8 >> 2] | 0;
    $tobool30191570 = ($and3009 | 0) == 0;
    if ($tobool30191570) {
      label = 349;
      break;
    } else {
      $post_01571 = $and3009;
      $a2998_01572_in = $shr2999;
      label = 338;
      break;
    }
   case 338:
    $a2998_01572 = $a2998_01572_in + 1 | 0;
    $dec3018 = $post_01571 - 1 | 0;
    $tt3023 = $regs_3 + ($a2998_01572 * 12 & -1) + 8 | 0;
    HEAP32[$tt3023 >> 2] = 0;
    $value3025 = $regs_3 + ($a2998_01572 * 12 & -1) | 0;
    $i3026 = $value3025;
    HEAP32[$i3026 >> 2] = 0;
    $tobool3019 = ($dec3018 | 0) == 0;
    if ($tobool3019) {
      label = 349;
      break;
    } else {
      $post_01571 = $dec3018;
      $a2998_01572_in = $a2998_01572;
      label = 338;
      break;
    }
   case 339:
    $v3002_sroa_0_0__cast = $arrayidx3003;
    $v3002_sroa_0_0_copyload = HEAP32[$v3002_sroa_0_0__cast >> 2] | 0;
    $len3037 = $v3002_sroa_0_0_copyload + 12 | 0;
    $594 = $len3037;
    $595 = HEAP32[$594 >> 2] | 0;
    $add3040 = $and3006 + $and3009 | 0;
    $cmp3041 = ($595 | 0) > ($add3040 | 0);
    $inc3044 = $shr2999 + 1 | 0;
    if ($cmp3041) {
      label = 340;
      break;
    } else {
      label = 343;
      break;
    }
   case 340:
    $sum = $and3009 + $and3006 | 0;
    $sub3047 = $595 - $sum | 0;
    $ptr3048 = $v3002_sroa_0_0_copyload + 20 | 0;
    $596 = $ptr3048;
    $597 = HEAP32[$596 >> 2] | 0;
    $add_ptr3049 = $597 + ($and3006 * 12 & -1) | 0;
    invoke_viiii(506, $tmp3050 | 0, $mrb | 0, $sub3047 | 0, $add_ptr3049 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    HEAP32[$593 >> 2] = HEAP32[$428 >> 2] | 0;
    HEAP32[$593 + 4 >> 2] = HEAP32[$428 + 4 >> 2] | 0;
    HEAP32[$593 + 8 >> 2] = HEAP32[$428 + 8 >> 2] | 0;
    $tobool30531583 = ($and3009 | 0) == 0;
    if ($tobool30531583) {
      label = 349;
      break;
    } else {
      label = 341;
      break;
    }
   case 341:
    $sub3057 = $595 - 1 | 0;
    $a2998_11584 = $inc3044;
    $dec30521585_in = $and3009;
    label = 342;
    break;
   case 342:
    $dec30521585 = $dec30521585_in - 1 | 0;
    $inc3055 = $a2998_11584 + 1 | 0;
    $arrayidx3056 = $regs_3 + ($a2998_11584 * 12 & -1) | 0;
    $dec3052_neg = 1 - $dec30521585_in | 0;
    $sub3058 = $sub3057 + $dec3052_neg | 0;
    $598 = HEAP32[$596 >> 2] | 0;
    $arrayidx3060 = $598 + ($sub3058 * 12 & -1) | 0;
    $599 = $arrayidx3056;
    $600 = $arrayidx3060;
    HEAP32[$599 >> 2] = HEAP32[$600 >> 2] | 0;
    HEAP32[$599 + 4 >> 2] = HEAP32[$600 + 4 >> 2] | 0;
    HEAP32[$599 + 8 >> 2] = HEAP32[$600 + 8 >> 2] | 0;
    $tobool3053 = ($dec30521585 | 0) == 0;
    if ($tobool3053) {
      label = 349;
      break;
    } else {
      $a2998_11584 = $inc3055;
      $dec30521585_in = $dec30521585;
      label = 342;
      break;
    }
   case 343:
    invoke_viii(590, $tmp3065 | 0, $mrb | 0, 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    HEAP32[$593 >> 2] = HEAP32[$429 >> 2] | 0;
    HEAP32[$593 + 4 >> 2] = HEAP32[$429 + 4 >> 2] | 0;
    HEAP32[$593 + 8 >> 2] = HEAP32[$429 + 8 >> 2] | 0;
    $cmp30681574 = ($and3006 | 0) < ($595 | 0);
    if ($cmp30681574) {
      label = 344;
      break;
    } else {
      $i3039_0_lcssa = 0;
      label = 346;
      break;
    }
   case 344:
    $ptr3074 = $v3002_sroa_0_0_copyload + 20 | 0;
    $601 = $ptr3074;
    $602 = $i_2 >>> 14;
    $603 = $602 & 511;
    $604 = $595 - $603 | 0;
    $i3039_01575 = 0;
    $add30671576 = $and3006;
    label = 345;
    break;
   case 345:
    $add3071 = $i3039_01575 + $inc3044 | 0;
    $arrayidx3072 = $regs_3 + ($add3071 * 12 & -1) | 0;
    $605 = HEAP32[$601 >> 2] | 0;
    $arrayidx3075 = $605 + ($add30671576 * 12 & -1) | 0;
    $606 = $arrayidx3072;
    $607 = $arrayidx3075;
    HEAP32[$606 >> 2] = HEAP32[$607 >> 2] | 0;
    HEAP32[$606 + 4 >> 2] = HEAP32[$607 + 4 >> 2] | 0;
    HEAP32[$606 + 8 >> 2] = HEAP32[$607 + 8 >> 2] | 0;
    $inc3077 = $i3039_01575 + 1 | 0;
    $add3067 = $inc3077 + $and3006 | 0;
    $exitcond = ($inc3077 | 0) == ($604 | 0);
    if ($exitcond) {
      $i3039_0_lcssa = $604;
      label = 346;
      break;
    } else {
      $i3039_01575 = $inc3077;
      $add30671576 = $add3067;
      label = 345;
      break;
    }
   case 346:
    $cmp30801579 = ($i3039_0_lcssa | 0) < ($and3009 | 0);
    if ($cmp30801579) {
      label = 347;
      break;
    } else {
      label = 349;
      break;
    }
   case 347:
    $608 = $i_2 >>> 7;
    $609 = $608 & 127;
    $i3039_11580 = $i3039_0_lcssa;
    label = 348;
    break;
   case 348:
    $add3084 = $i3039_11580 + $inc3044 | 0;
    $tt3086 = $regs_3 + ($add3084 * 12 & -1) + 8 | 0;
    HEAP32[$tt3086 >> 2] = 0;
    $value3089 = $regs_3 + ($add3084 * 12 & -1) | 0;
    $i3090 = $value3089;
    HEAP32[$i3090 >> 2] = 0;
    $inc3092 = $i3039_11580 + 1 | 0;
    $exitcond1656 = ($inc3092 | 0) == ($609 | 0);
    if ($exitcond1656) {
      label = 349;
      break;
    } else {
      $i3039_11580 = $inc3092;
      label = 348;
      break;
    }
   case 349:
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr3096 = $pc_3 + 4 | 0;
    $610 = HEAP32[$incdec_ptr3096 >> 2] | 0;
    $and3097 = $610 & 127;
    $arrayidx3098 = 78492 + ($and3097 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx3098;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr3096;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $610;
    label = 391;
    break;
   case 350:
    $shr3099 = $i_2 >>> 23;
    $arrayidx3101 = $regs_3 + ($shr3099 * 12 & -1) | 0;
    $shr3102 = $i_2 >>> 7;
    $and3103 = $shr3102 & 65535;
    $arrayidx3104 = $pool_2 + ($and3103 * 12 & -1) | 0;
    invoke_viii(674, $tmp3105 | 0, $mrb | 0, $arrayidx3104 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $611 = $arrayidx3101;
    HEAP32[$611 >> 2] = HEAP32[$431 >> 2] | 0;
    HEAP32[$611 + 4 >> 2] = HEAP32[$431 + 4 >> 2] | 0;
    HEAP32[$611 + 8 >> 2] = HEAP32[$431 + 8 >> 2] | 0;
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr3106 = $pc_3 + 4 | 0;
    $612 = HEAP32[$incdec_ptr3106 >> 2] | 0;
    $and3107 = $612 & 127;
    $arrayidx3108 = 78492 + ($and3107 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx3108;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr3106;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $612;
    label = 391;
    break;
   case 351:
    $shr3109 = $i_2 >>> 23;
    $arrayidx3111 = $regs_3 + ($shr3109 * 12 & -1) | 0;
    $shr3112 = $i_2 >>> 14;
    $and3113 = $shr3112 & 511;
    $arrayidx3114 = $regs_3 + ($and3113 * 12 & -1) | 0;
    invoke_viii(476, $mrb | 0, $arrayidx3111 | 0, $arrayidx3114 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr3115 = $pc_3 + 4 | 0;
    $613 = HEAP32[$incdec_ptr3115 >> 2] | 0;
    $and3116 = $613 & 127;
    $arrayidx3117 = 78492 + ($and3116 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx3117;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr3115;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $613;
    label = 391;
    break;
   case 352:
    $shr3119 = $i_2 >>> 14;
    $and3120 = $shr3119 & 511;
    $shr3123 = $i_2 >>> 7;
    $and3124 = $shr3123 & 127;
    $mul3126 = $and3124 << 1;
    $add3127 = $mul3126 + $and3120 | 0;
    invoke_viii(204, $hash | 0, $mrb | 0, $and3124 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $cmp31301567 = ($and3124 | 0) == 0;
    if ($cmp31301567) {
      label = 354;
      break;
    } else {
      $b_01568 = $and3120;
      label = 353;
      break;
    }
   case 353:
    $arrayidx3133 = $regs_3 + ($b_01568 * 12 & -1) | 0;
    $add3134 = $b_01568 + 1 | 0;
    $arrayidx3135 = $regs_3 + ($add3134 * 12 & -1) | 0;
    invoke_viiii(556, $mrb | 0, $hash | 0, $arrayidx3133 | 0, $arrayidx3135 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $add3136 = $b_01568 + 2 | 0;
    $cmp3130 = ($add3136 | 0) < ($add3127 | 0);
    if ($cmp3130) {
      $b_01568 = $add3136;
      label = 353;
      break;
    } else {
      label = 354;
      break;
    }
   case 354:
    $shr3138 = $i_2 >>> 23;
    $arrayidx3140 = $regs_3 + ($shr3138 * 12 & -1) | 0;
    $614 = $arrayidx3140;
    HEAP32[$614 >> 2] = HEAP32[$432 >> 2] | 0;
    HEAP32[$614 + 4 >> 2] = HEAP32[$432 + 4 >> 2] | 0;
    HEAP32[$614 + 8 >> 2] = HEAP32[$432 + 8 >> 2] | 0;
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr3141 = $pc_3 + 4 | 0;
    $615 = HEAP32[$incdec_ptr3141 >> 2] | 0;
    $and3142 = $615 & 127;
    $arrayidx3143 = 78492 + ($and3142 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx3143;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr3141;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $615;
    label = 391;
    break;
   case 355:
    $shr3148 = $i_2 >>> 7;
    $and3150 = $shr3148 & 2;
    $tobool3151 = ($and3150 | 0) == 0;
    $idx3153 = $irep_6 | 0;
    $616 = HEAP32[$idx3153 >> 2] | 0;
    $shr3154 = $i_2 >>> 9;
    $and3155 = $shr3154 & 16383;
    $add3156 = $616 + $and3155 | 0;
    $617 = HEAP32[$irep3157 >> 2] | 0;
    $arrayidx3158 = $617 + ($add3156 << 2) | 0;
    $618 = HEAP32[$arrayidx3158 >> 2] | 0;
    if ($tobool3151) {
      label = 357;
      break;
    } else {
      label = 356;
      break;
    }
   case 356:
    $call3159 = invoke_iii(418, $mrb | 0, $618 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $p3145_0 = $call3159;
    label = 358;
    break;
   case 357:
    $call3167 = invoke_iii(218, $mrb | 0, $618 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $p3145_0 = $call3167;
    label = 358;
    break;
   case 358:
    $and3169 = $shr3148 & 1;
    $tobool3170 = ($and3169 | 0) == 0;
    if ($tobool3170) {
      label = 360;
      break;
    } else {
      label = 359;
      break;
    }
   case 359:
    $619 = $p3145_0;
    $620 = HEAP32[$619 >> 2] | 0;
    $621 = $620 | 524288;
    HEAP32[$619 >> 2] = $621;
    label = 360;
    break;
   case 360:
    $shr3175 = $i_2 >>> 23;
    $arrayidx3177 = $regs_3 + ($shr3175 * 12 & -1) | 0;
    $622 = $p3145_0 | 0;
    invoke_vii(538, $tmp3178 | 0, $622 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $623 = $arrayidx3177;
    HEAP32[$623 >> 2] = HEAP32[$433 >> 2] | 0;
    HEAP32[$623 + 4 >> 2] = HEAP32[$433 + 4 >> 2] | 0;
    HEAP32[$623 + 8 >> 2] = HEAP32[$433 + 8 >> 2] | 0;
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr3179 = $pc_3 + 4 | 0;
    $624 = HEAP32[$incdec_ptr3179 >> 2] | 0;
    $and3180 = $624 & 127;
    $arrayidx3181 = 78492 + ($and3180 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx3181;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr3179;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $624;
    label = 391;
    break;
   case 361:
    $shr3182 = $i_2 >>> 23;
    $arrayidx3184 = $regs_3 + ($shr3182 * 12 & -1) | 0;
    $625 = HEAP32[$object_class >> 2] | 0;
    $626 = $625 | 0;
    invoke_vii(538, $tmp3185 | 0, $626 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $627 = $arrayidx3184;
    HEAP32[$627 >> 2] = HEAP32[$435 >> 2] | 0;
    HEAP32[$627 + 4 >> 2] = HEAP32[$435 + 4 >> 2] | 0;
    HEAP32[$627 + 8 >> 2] = HEAP32[$435 + 8 >> 2] | 0;
    $incdec_ptr3186 = $pc_3 + 4 | 0;
    $628 = HEAP32[$incdec_ptr3186 >> 2] | 0;
    $and3187 = $628 & 127;
    $arrayidx3188 = 78492 + ($and3187 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx3188;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr3186;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $628;
    label = 391;
    break;
   case 362:
    $shr3193 = $i_2 >>> 23;
    $shr3199 = $i_2 >>> 14;
    $and3200 = $shr3199 & 511;
    $arrayidx3201 = $syms_2 + ($and3200 << 1) | 0;
    $629 = HEAP16[$arrayidx3201 >> 1] | 0;
    $arrayidx3202 = $regs_3 + ($shr3193 * 12 & -1) | 0;
    $630 = $arrayidx3202;
    HEAP32[$436 >> 2] = HEAP32[$630 >> 2] | 0;
    HEAP32[$436 + 4 >> 2] = HEAP32[$630 + 4 >> 2] | 0;
    HEAP32[$436 + 8 >> 2] = HEAP32[$630 + 8 >> 2] | 0;
    $add3203 = $shr3193 + 1 | 0;
    $arrayidx3204 = $regs_3 + ($add3203 * 12 & -1) | 0;
    $631 = $arrayidx3204;
    HEAP32[$437 >> 2] = HEAP32[$631 >> 2] | 0;
    HEAP32[$437 + 4 >> 2] = HEAP32[$631 + 4 >> 2] | 0;
    HEAP32[$437 + 8 >> 2] = HEAP32[$631 + 8 >> 2] | 0;
    $632 = HEAP32[$tt3205 >> 2] | 0;
    $cmp3206 = ($632 | 0) == 0;
    if ($cmp3206) {
      label = 363;
      break;
    } else {
      label = 365;
      break;
    }
   case 363:
    $633 = HEAP32[$i3210 >> 2] | 0;
    $tobool3211 = ($633 | 0) == 0;
    if ($tobool3211) {
      label = 364;
      break;
    } else {
      label = 365;
      break;
    }
   case 364:
    $634 = HEAP32[$c3213 >> 2] | 0;
    $ci3214 = $634 + 16 | 0;
    $635 = HEAP32[$ci3214 >> 2] | 0;
    $target_class3215 = $635 + 28 | 0;
    $636 = HEAP32[$target_class3215 >> 2] | 0;
    $637 = $636 | 0;
    invoke_vii(538, $tmp3216 | 0, $637 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    HEAP32[$436 >> 2] = HEAP32[$438 >> 2] | 0;
    HEAP32[$436 + 4 >> 2] = HEAP32[$438 + 4 >> 2] | 0;
    HEAP32[$436 + 8 >> 2] = HEAP32[$438 + 8 >> 2] | 0;
    label = 365;
    break;
   case 365:
    $call3218 = invoke_iiiii(86, $mrb | 0, $base | 0, $super3197 | 0, $629 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $638 = $call3218 | 0;
    invoke_vii(538, $tmp3220 | 0, $638 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    HEAP32[$630 >> 2] = HEAP32[$439 >> 2] | 0;
    HEAP32[$630 + 4 >> 2] = HEAP32[$439 + 4 >> 2] | 0;
    HEAP32[$630 + 8 >> 2] = HEAP32[$439 + 8 >> 2] | 0;
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr3221 = $pc_3 + 4 | 0;
    $639 = HEAP32[$incdec_ptr3221 >> 2] | 0;
    $and3222 = $639 & 127;
    $arrayidx3223 = 78492 + ($and3222 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx3223;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr3221;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $639;
    label = 391;
    break;
   case 366:
    $shr3228 = $i_2 >>> 23;
    $shr3234 = $i_2 >>> 14;
    $and3235 = $shr3234 & 511;
    $arrayidx3236 = $syms_2 + ($and3235 << 1) | 0;
    $640 = HEAP16[$arrayidx3236 >> 1] | 0;
    $arrayidx3237 = $regs_3 + ($shr3228 * 12 & -1) | 0;
    $641 = $arrayidx3237;
    HEAP32[$440 >> 2] = HEAP32[$641 >> 2] | 0;
    HEAP32[$440 + 4 >> 2] = HEAP32[$641 + 4 >> 2] | 0;
    HEAP32[$440 + 8 >> 2] = HEAP32[$641 + 8 >> 2] | 0;
    $642 = HEAP32[$tt3238 >> 2] | 0;
    $cmp3239 = ($642 | 0) == 0;
    if ($cmp3239) {
      label = 367;
      break;
    } else {
      label = 369;
      break;
    }
   case 367:
    $643 = HEAP32[$i3243 >> 2] | 0;
    $tobool3244 = ($643 | 0) == 0;
    if ($tobool3244) {
      label = 368;
      break;
    } else {
      label = 369;
      break;
    }
   case 368:
    $644 = HEAP32[$c3246 >> 2] | 0;
    $ci3247 = $644 + 16 | 0;
    $645 = HEAP32[$ci3247 >> 2] | 0;
    $target_class3248 = $645 + 28 | 0;
    $646 = HEAP32[$target_class3248 >> 2] | 0;
    $647 = $646 | 0;
    invoke_vii(538, $tmp3249 | 0, $647 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    HEAP32[$440 >> 2] = HEAP32[$441 >> 2] | 0;
    HEAP32[$440 + 4 >> 2] = HEAP32[$441 + 4 >> 2] | 0;
    HEAP32[$440 + 8 >> 2] = HEAP32[$441 + 8 >> 2] | 0;
    label = 369;
    break;
   case 369:
    $call3251 = invoke_iiii(516, $mrb | 0, $base3231 | 0, $640 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $648 = $call3251 | 0;
    invoke_vii(538, $tmp3253 | 0, $648 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    HEAP32[$641 >> 2] = HEAP32[$442 >> 2] | 0;
    HEAP32[$641 + 4 >> 2] = HEAP32[$442 + 4 >> 2] | 0;
    HEAP32[$641 + 8 >> 2] = HEAP32[$442 + 8 >> 2] | 0;
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr3254 = $pc_3 + 4 | 0;
    $649 = HEAP32[$incdec_ptr3254 >> 2] | 0;
    $and3255 = $649 & 127;
    $arrayidx3256 = 78492 + ($and3255 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx3256;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr3254;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $649;
    label = 391;
    break;
   case 370:
    $shr3259 = $i_2 >>> 23;
    $arrayidx3265 = $regs_3 + ($shr3259 * 12 & -1) | 0;
    $650 = $arrayidx3265;
    HEAP32[$443 >> 2] = HEAP32[$650 >> 2] | 0;
    HEAP32[$443 + 4 >> 2] = HEAP32[$650 + 4 >> 2] | 0;
    HEAP32[$443 + 8 >> 2] = HEAP32[$650 + 8 >> 2] | 0;
    $call3268 = invoke_ii(808, $mrb | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $add_ptr3269 = $pc_3 + 4 | 0;
    $pc3270 = $call3268 + 20 | 0;
    HEAP32[$pc3270 >> 2] = $add_ptr3269;
    $acc3271 = $call3268 + 24 | 0;
    HEAP32[$acc3271 >> 2] = $shr3259;
    $mid3272 = $call3268 | 0;
    HEAP16[$mid3272 >> 1] = 0;
    $651 = HEAP32[$c3273 >> 2] | 0;
    $stack3274 = $651 + 4 | 0;
    $652 = HEAP32[$stack3274 >> 2] | 0;
    $stbase3276 = $651 + 8 | 0;
    $653 = HEAP32[$stbase3276 >> 2] | 0;
    $sub_ptr_lhs_cast3277 = $652;
    $sub_ptr_rhs_cast3278 = $653;
    $sub_ptr_sub3279 = $sub_ptr_lhs_cast3277 - $sub_ptr_rhs_cast3278 | 0;
    $sub_ptr_div3280 = ($sub_ptr_sub3279 | 0) / 12 & -1;
    $stackidx3281 = $call3268 + 8 | 0;
    HEAP32[$stackidx3281 >> 2] = $sub_ptr_div3280;
    $argc3282 = $call3268 + 16 | 0;
    HEAP32[$argc3282 >> 2] = 0;
    $654 = HEAP32[$p3284 >> 2] | 0;
    $655 = $654;
    $target_class3285 = $call3268 + 28 | 0;
    HEAP32[$target_class3285 >> 2] = $655;
    $656 = HEAP32[$c3273 >> 2] | 0;
    $stack3287 = $656 + 4 | 0;
    $657 = HEAP32[$stack3287 >> 2] | 0;
    $add_ptr3288 = $657 + ($shr3259 * 12 & -1) | 0;
    HEAP32[$stack3287 >> 2] = $add_ptr3288;
    $idx3289 = $irep_6 | 0;
    $658 = HEAP32[$idx3289 >> 2] | 0;
    $shr3290 = $i_2 >>> 7;
    $and3291 = $shr3290 & 65535;
    $add3292 = $658 + $and3291 | 0;
    $659 = HEAP32[$irep3293 >> 2] | 0;
    $arrayidx3294 = $659 + ($add3292 << 2) | 0;
    $660 = HEAP32[$arrayidx3294 >> 2] | 0;
    $call3295 = invoke_iii(218, $mrb | 0, $660 | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $661 = HEAP32[$target_class3285 >> 2] | 0;
    $target_class3297 = $call3295 + 16 | 0;
    HEAP32[$target_class3297 >> 2] = $661;
    $proc3298 = $call3268 + 4 | 0;
    HEAP32[$proc3298 >> 2] = $call3295;
    $662 = $call3295;
    $663 = HEAP32[$662 >> 2] | 0;
    $and3300 = $663 & 262144;
    $cmp3301 = ($and3300 | 0) == 0;
    if ($cmp3301) {
      label = 373;
      break;
    } else {
      label = 371;
      break;
    }
   case 371:
    $664 = HEAP32[$c3273 >> 2] | 0;
    $stack3305 = $664 + 4 | 0;
    $665 = HEAP32[$stack3305 >> 2] | 0;
    $body3307 = $call3295 + 12 | 0;
    $func3308 = $body3307;
    $666 = HEAP32[$func3308 >> 2] | 0;
    invoke_viii($666 | 0, $tmp3309 | 0, $mrb | 0, $recv3264 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $667 = $665;
    HEAP32[$667 >> 2] = HEAP32[$444 >> 2] | 0;
    HEAP32[$667 + 4 >> 2] = HEAP32[$444 + 4 >> 2] | 0;
    HEAP32[$667 + 8 >> 2] = HEAP32[$444 + 8 >> 2] | 0;
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $668 = HEAP32[$exc3310 >> 2] | 0;
    $tobool3311 = ($668 | 0) == 0;
    if ($tobool3311) {
      label = 372;
      break;
    } else {
      $proc_addr_2 = $proc_addr_4;
      $irep_3 = $irep_6;
      $pc_1 = $pc_3;
      $regs_0 = $regs_3;
      label = 155;
      break;
    }
   case 372:
    $669 = HEAP32[$c3273 >> 2] | 0;
    $stbase3315 = $669 + 8 | 0;
    $670 = HEAP32[$stbase3315 >> 2] | 0;
    $ci3317 = $669 + 16 | 0;
    $671 = HEAP32[$ci3317 >> 2] | 0;
    $stackidx3318 = $671 + 8 | 0;
    $672 = HEAP32[$stackidx3318 >> 2] | 0;
    $add_ptr3319 = $670 + ($672 * 12 & -1) | 0;
    $stack3321 = $669 + 4 | 0;
    HEAP32[$stack3321 >> 2] = $add_ptr3319;
    invoke_vi(300, $mrb | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $673 = HEAP32[$add_ptr3269 >> 2] | 0;
    $and3323 = $673 & 127;
    $arrayidx3324 = 78492 + ($and3323 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx3324;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $add_ptr3269;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $add_ptr3319;
    $i_2 = $673;
    label = 391;
    break;
   case 373:
    $irep3327 = $call3295 + 12 | 0;
    $674 = HEAP32[$irep3327 >> 2] | 0;
    $pool3328 = $674 + 16 | 0;
    $675 = HEAP32[$pool3328 >> 2] | 0;
    $syms3329 = $674 + 20 | 0;
    $676 = HEAP32[$syms3329 >> 2] | 0;
    $nregs3330 = $674 + 6 | 0;
    $677 = HEAP16[$nregs3330 >> 1] | 0;
    $conv3331 = $677 & 65535;
    invoke_viii(642, $mrb | 0, $conv3331 | 0, 1);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $678 = HEAP16[$nregs3330 >> 1] | 0;
    $conv3333 = $678 & 65535;
    $nregs3334 = $call3268 + 12 | 0;
    HEAP32[$nregs3334 >> 2] = $conv3333;
    $679 = HEAP32[$c3273 >> 2] | 0;
    $stack3336 = $679 + 4 | 0;
    $680 = HEAP32[$stack3336 >> 2] | 0;
    $iseq3337 = $674 + 12 | 0;
    $681 = HEAP32[$iseq3337 >> 2] | 0;
    $682 = HEAP32[$681 >> 2] | 0;
    $and3338 = $682 & 127;
    $arrayidx3339 = 78492 + ($and3338 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx3339;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $674;
    $pc_3 = $681;
    $pool_2 = $675;
    $syms_2 = $676;
    $regs_3 = $680;
    $i_2 = $682;
    label = 391;
    break;
   case 374:
    $shr3342 = $i_2 >>> 23;
    $value3347 = $regs_3 + ($shr3342 * 12 & -1) | 0;
    $p3348 = $value3347;
    $683 = HEAP32[$p3348 >> 2] | 0;
    $684 = $683;
    $shr3349 = $i_2 >>> 14;
    $and3350 = $shr3349 & 511;
    $arrayidx3351 = $syms_2 + ($and3350 << 1) | 0;
    $685 = HEAP16[$arrayidx3351 >> 1] | 0;
    $add3352 = $shr3342 + 1 | 0;
    $arrayidx3353 = $regs_3 + ($add3352 * 12 & -1) | 0;
    invoke_viiii(282, $mrb | 0, $684 | 0, $685 | 0, $arrayidx3353 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr3354 = $pc_3 + 4 | 0;
    $686 = HEAP32[$incdec_ptr3354 >> 2] | 0;
    $and3355 = $686 & 127;
    $arrayidx3356 = 78492 + ($and3355 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx3356;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr3354;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $686;
    label = 391;
    break;
   case 375:
    $shr3357 = $i_2 >>> 23;
    $arrayidx3359 = $regs_3 + ($shr3357 * 12 & -1) | 0;
    $shr3360 = $i_2 >>> 14;
    $and3361 = $shr3360 & 511;
    $arrayidx3362 = $regs_3 + ($and3361 * 12 & -1) | 0;
    invoke_viii(698, $tmp3363 | 0, $mrb | 0, $arrayidx3362 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $687 = $arrayidx3359;
    HEAP32[$687 >> 2] = HEAP32[$445 >> 2] | 0;
    HEAP32[$687 + 4 >> 2] = HEAP32[$445 + 4 >> 2] | 0;
    HEAP32[$687 + 8 >> 2] = HEAP32[$445 + 8 >> 2] | 0;
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr3364 = $pc_3 + 4 | 0;
    $688 = HEAP32[$incdec_ptr3364 >> 2] | 0;
    $and3365 = $688 & 127;
    $arrayidx3366 = 78492 + ($and3365 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx3366;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr3364;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $688;
    label = 391;
    break;
   case 376:
    $689 = HEAP32[$c3367 >> 2] | 0;
    $ci3368 = $689 + 16 | 0;
    $690 = HEAP32[$ci3368 >> 2] | 0;
    $target_class3369 = $690 + 28 | 0;
    $691 = HEAP32[$target_class3369 >> 2] | 0;
    $tobool3370 = ($691 | 0) == 0;
    if ($tobool3370) {
      label = 377;
      break;
    } else {
      label = 378;
      break;
    }
   case 377:
    $call3374 = invoke_iii(198, $mrb | 0, 111460) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    invoke_viiiii(98, $exc3373 | 0, $mrb | 0, $call3374 | 0, 78796, 25);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $p3376 = $exc3373;
    $692 = HEAP32[$p3376 >> 2] | 0;
    $693 = $692;
    $exc3377 = $mrb + 16 | 0;
    HEAP32[$exc3377 >> 2] = $693;
    $proc_addr_2 = $proc_addr_4;
    $irep_3 = $irep_6;
    $pc_1 = $pc_3;
    $regs_0 = $regs_3;
    label = 155;
    break;
   case 378:
    $shr3379 = $i_2 >>> 23;
    $arrayidx3381 = $regs_3 + ($shr3379 * 12 & -1) | 0;
    $694 = $691 | 0;
    invoke_vii(538, $tmp3385 | 0, $694 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $695 = $arrayidx3381;
    HEAP32[$695 >> 2] = HEAP32[$446 >> 2] | 0;
    HEAP32[$695 + 4 >> 2] = HEAP32[$446 + 4 >> 2] | 0;
    HEAP32[$695 + 8 >> 2] = HEAP32[$446 + 8 >> 2] | 0;
    $incdec_ptr3386 = $pc_3 + 4 | 0;
    $696 = HEAP32[$incdec_ptr3386 >> 2] | 0;
    $and3387 = $696 & 127;
    $arrayidx3388 = 78492 + ($and3387 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx3388;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr3386;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $696;
    label = 391;
    break;
   case 379:
    $shr3391 = $i_2 >>> 14;
    $and3392 = $shr3391 & 511;
    $shr3393 = $i_2 >>> 23;
    $arrayidx3395 = $regs_3 + ($shr3393 * 12 & -1) | 0;
    $arrayidx3396 = $regs_3 + ($and3392 * 12 & -1) | 0;
    $add3397 = $and3392 + 1 | 0;
    $arrayidx3398 = $regs_3 + ($add3397 * 12 & -1) | 0;
    $shr3399 = $i_2 >>> 7;
    $and3400 = $shr3399 & 127;
    invoke_viiiii(654, $tmp3401 | 0, $mrb | 0, $arrayidx3396 | 0, $arrayidx3398 | 0, $and3400 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $697 = $arrayidx3395;
    HEAP32[$697 >> 2] = HEAP32[$434 >> 2] | 0;
    HEAP32[$697 + 4 >> 2] = HEAP32[$434 + 4 >> 2] | 0;
    HEAP32[$697 + 8 >> 2] = HEAP32[$434 + 8 >> 2] | 0;
    invoke_vii(802, $mrb | 0, $call | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr3402 = $pc_3 + 4 | 0;
    $698 = HEAP32[$incdec_ptr3402 >> 2] | 0;
    $and3403 = $698 & 127;
    $arrayidx3404 = 78492 + ($and3403 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx3404;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr3402;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $698;
    label = 391;
    break;
   case 380:
    $shr3405 = $i_2 >>> 23;
    $shr3407 = $i_2 >>> 14;
    $and3408 = $shr3407 & 511;
    $shr3409 = $i_2 >>> 7;
    $and3410 = $shr3409 & 127;
    $call3411 = invoke_iii(754, 110948, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr3405, HEAP32[tempInt + 4 >> 2] = $and3408, HEAP32[tempInt + 8 >> 2] = $and3410, tempInt) | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $incdec_ptr3412 = $pc_3 + 4 | 0;
    $699 = HEAP32[$incdec_ptr3412 >> 2] | 0;
    $and3413 = $699 & 127;
    $arrayidx3414 = 78492 + ($and3413 << 2) | 0;
    $indirect_goto_dest_in = $arrayidx3414;
    $proc_addr_4 = $proc_addr_4;
    $irep_6 = $irep_6;
    $pc_3 = $incdec_ptr3412;
    $pool_2 = $pool_2;
    $syms_2 = $syms_2;
    $regs_3 = $regs_3;
    $i_2 = $699;
    label = 391;
    break;
   case 381:
    $c3417 = $mrb + 8 | 0;
    $700 = HEAP32[$c3417 >> 2] | 0;
    $ci3418 = $700 + 16 | 0;
    $701 = HEAP32[$ci3418 >> 2] | 0;
    $eidx3419 = $701 + 36 | 0;
    $702 = HEAP32[$eidx3419 >> 2] | 0;
    $tobool34221553 = ($702 | 0) == 0;
    if ($tobool34221553) {
      label = 383;
      break;
    } else {
      $dec34211554_in = $702;
      label = 382;
      break;
    }
   case 382:
    $dec34211554 = $dec34211554_in - 1 | 0;
    invoke_vii(500, $mrb | 0, $dec34211554 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $tobool3422 = ($dec34211554 | 0) == 0;
    if ($tobool3422) {
      label = 383;
      break;
    } else {
      $dec34211554_in = $dec34211554;
      label = 382;
      break;
    }
   case 383:
    HEAP32[$jmp >> 2] = $4;
    $exc3426 = $mrb + 16 | 0;
    $703 = HEAP32[$exc3426 >> 2] | 0;
    $tobool3427 = ($703 | 0) == 0;
    if ($tobool3427) {
      label = 385;
      break;
    } else {
      label = 384;
      break;
    }
   case 384:
    $704 = $703 | 0;
    invoke_vii(538, $agg_result | 0, $704 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 390;
    break;
   case 385:
    $nlocals = $irep_5 + 4 | 0;
    $705 = HEAP16[$nlocals >> 1] | 0;
    $idxprom = $705 & 65535;
    $arrayidx3431 = $regs_2 + ($idxprom * 12 & -1) | 0;
    $706 = $agg_result;
    $707 = $arrayidx3431;
    HEAP32[$706 >> 2] = HEAP32[$707 >> 2] | 0;
    HEAP32[$706 + 4 >> 2] = HEAP32[$707 + 4 >> 2] | 0;
    HEAP32[$706 + 8 >> 2] = HEAP32[$707 + 8 >> 2] | 0;
    label = 390;
    break;
   case 386:
    $shr3433 = $i_2 >>> 7;
    $and3434 = $shr3433 & 65535;
    $arrayidx3435 = $pool_2 + ($and3434 * 12 & -1) | 0;
    $708 = $msg;
    $709 = $arrayidx3435;
    HEAP32[$708 >> 2] = HEAP32[$709 >> 2] | 0;
    HEAP32[$708 + 4 >> 2] = HEAP32[$709 + 4 >> 2] | 0;
    HEAP32[$708 + 8 >> 2] = HEAP32[$709 + 8 >> 2] | 0;
    $cmp3440 = $i_2 >>> 0 < 8388608;
    if ($cmp3440) {
      label = 387;
      break;
    } else {
      label = 388;
      break;
    }
   case 387:
    $call3443 = invoke_iii(198, $mrb | 0, 93488) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    invoke_viiii(494, $tmp3444 | 0, $mrb | 0, $call3443 | 0, $msg | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $exc3437_sroa_0_0_in_in = $tmp3444;
    label = 389;
    break;
   case 388:
    $call3446 = invoke_iii(198, $mrb | 0, 110188) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    invoke_viiii(494, $tmp3447 | 0, $mrb | 0, $call3446 | 0, $msg | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $exc3437_sroa_0_0_in_in = $tmp3447;
    label = 389;
    break;
   case 389:
    $exc3437_sroa_0_0_in = $exc3437_sroa_0_0_in_in;
    $exc3437_sroa_0_0 = HEAP32[$exc3437_sroa_0_0_in >> 2] | 0;
    $710 = $exc3437_sroa_0_0;
    $exc3451 = $mrb + 16 | 0;
    HEAP32[$exc3451 >> 2] = $710;
    $proc_addr_2 = $proc_addr_4;
    $irep_3 = $irep_6;
    $pc_1 = $pc_3;
    $regs_0 = $regs_3;
    label = 155;
    break;
   case 390:
    STACKTOP = __stackBase__;
    return;
   case 391:
    $indirect_goto_dest = HEAP32[$indirect_goto_dest_in >> 2] | 0;
    ibr = $indirect_goto_dest;
    if ((ibr | 0) == 55) {
      $i_0 = $i_2;
    }
    if ((ibr | 0) == 154) {
      $proc_addr_1 = $proc_addr_4;
      $irep_2 = $irep_6;
      $i_1 = $i_2;
    }
    if ((ibr | 0) == 381) {
      $irep_5 = $irep_6;
      $regs_2 = $regs_3;
    }
    label = ibr;
    break;
   case -1111:
    if ((setjmpLabel | 0) == 2) {
      $call4 = threwValue;
      label = 392;
    }
    __THREW__ = threwValue = 0;
    break;
  }
}
function _mrb_nil_value148($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _uvenv($mrb, $up) {
  $mrb = $mrb | 0;
  $up = $up | 0;
  var $c = 0, $0 = 0, $ci = 0, $1 = 0, $proc = 0, $2 = 0, $env = 0, $3 = 0, $tobool3 = 0, $dec5_in = 0, $e_04 = 0, $dec5 = 0, $tobool1 = 0, $c2 = 0, $4 = 0, $5 = 0, $tobool = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $c = $mrb + 8 | 0;
    $0 = HEAP32[$c >> 2] | 0;
    $ci = $0 + 16 | 0;
    $1 = HEAP32[$ci >> 2] | 0;
    $proc = $1 + 4 | 0;
    $2 = HEAP32[$proc >> 2] | 0;
    $env = $2 + 20 | 0;
    $3 = HEAP32[$env >> 2] | 0;
    $tobool3 = ($up | 0) == 0;
    if ($tobool3) {
      $retval_0 = $3;
      label = 5;
      break;
    } else {
      $e_04 = $3;
      $dec5_in = $up;
      label = 3;
      break;
    }
   case 3:
    $dec5 = $dec5_in - 1 | 0;
    $tobool1 = ($e_04 | 0) == 0;
    if ($tobool1) {
      $retval_0 = 0;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $c2 = $e_04 + 4 | 0;
    $4 = HEAP32[$c2 >> 2] | 0;
    $5 = $4;
    $tobool = ($dec5 | 0) == 0;
    if ($tobool) {
      $retval_0 = $5;
      label = 5;
      break;
    } else {
      $e_04 = $5;
      $dec5_in = $dec5;
      label = 3;
      break;
    }
   case 5:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_voidp_value($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = 7;
  return;
}
function _is_strict($mrb, $e) {
  $mrb = $mrb | 0;
  $e = $e | 0;
  var $cioff1 = 0, $0 = 0, $cmp = 0, $c = 0, $1 = 0, $cibase = 0, $2 = 0, $proc = 0, $3 = 0, $tobool = 0, $4 = 0, $5 = 0, $and = 0, $cmp7 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cioff1 = $e + 20 | 0;
    $0 = HEAP32[$cioff1 >> 2] | 0;
    $cmp = ($0 | 0) > -1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $c = $mrb + 8 | 0;
    $1 = HEAP32[$c >> 2] | 0;
    $cibase = $1 + 20 | 0;
    $2 = HEAP32[$cibase >> 2] | 0;
    $proc = $2 + ($0 * 44 & -1) + 4 | 0;
    $3 = HEAP32[$proc >> 2] | 0;
    $tobool = ($3 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $and = $5 & 524288;
    $cmp7 = ($and | 0) == 0;
    if ($cmp7) {
      label = 5;
      break;
    } else {
      $retval_0 = 1;
      label = 6;
      break;
    }
   case 5:
    $retval_0 = 0;
    label = 6;
    break;
   case 6:
    return $retval_0 | 0;
  }
  return 0;
}
function _envadjust($mrb, $oldbase, $newbase) {
  $mrb = $mrb | 0;
  $oldbase = $oldbase | 0;
  $newbase = $newbase | 0;
  var $c = 0, $0 = 0, $cibase = 0, $1 = 0, $ci27 = 0, $2 = 0, $cmp8 = 0, $sub_ptr_rhs_cast = 0, $ci_09 = 0, $env = 0, $3 = 0, $tobool = 0, $cioff = 0, $4 = 0, $cmp3 = 0, $stack = 0, $5 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_sub = 0, $sub_ptr_div = 0, $add_ptr = 0, $incdec_ptr = 0, $6 = 0, $ci2 = 0, $7 = 0, $cmp = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $c = $mrb + 8 | 0;
    $0 = HEAP32[$c >> 2] | 0;
    $cibase = $0 + 20 | 0;
    $1 = HEAP32[$cibase >> 2] | 0;
    $ci27 = $0 + 16 | 0;
    $2 = HEAP32[$ci27 >> 2] | 0;
    $cmp8 = $1 >>> 0 > $2 >>> 0;
    if ($cmp8) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $sub_ptr_rhs_cast = $oldbase;
    $ci_09 = $1;
    label = 4;
    break;
   case 4:
    $env = $ci_09 + 40 | 0;
    $3 = HEAP32[$env >> 2] | 0;
    $tobool = ($3 | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $cioff = $3 + 20 | 0;
    $4 = HEAP32[$cioff >> 2] | 0;
    $cmp3 = ($4 | 0) > -1;
    if ($cmp3) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $stack = $3 + 12 | 0;
    $5 = HEAP32[$stack >> 2] | 0;
    $sub_ptr_lhs_cast = $5;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $sub_ptr_div = ($sub_ptr_sub | 0) / 12 & -1;
    $add_ptr = $newbase + ($sub_ptr_div * 12 & -1) | 0;
    HEAP32[$stack >> 2] = $add_ptr;
    label = 7;
    break;
   case 7:
    $incdec_ptr = $ci_09 + 44 | 0;
    $6 = HEAP32[$c >> 2] | 0;
    $ci2 = $6 + 16 | 0;
    $7 = HEAP32[$ci2 >> 2] | 0;
    $cmp = $incdec_ptr >>> 0 > $7 >>> 0;
    if ($cmp) {
      label = 8;
      break;
    } else {
      $ci_09 = $incdec_ptr;
      label = 4;
      break;
    }
   case 8:
    return;
  }
}
function _parsing_heredoc_inf($p) {
  $p = $p | 0;
  var $parsing_heredoc = 0, $0 = 0, $cmp = 0, $car = 0, $1 = 0, $cdr = 0, $2 = 0, $3 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $parsing_heredoc = $p + 1116 | 0;
    $0 = HEAP32[$parsing_heredoc >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      $retval_0 = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $car = $0 | 0;
    $1 = HEAP32[$car >> 2] | 0;
    $cdr = $1 + 4 | 0;
    $2 = HEAP32[$cdr >> 2] | 0;
    $3 = $2;
    $retval_0 = $3;
    label = 4;
    break;
   case 4:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_yield_internal($agg_result, $mrb, $b, $argc, $argv, $self, $c) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $b = $b | 0;
  $argc = $argc | 0;
  $argv = $argv | 0;
  $self = $self | 0;
  $c = $c | 0;
  var $val = 0, $tmp = 0, $tmp54 = 0, $c1 = 0, $0 = 0, $ci = 0, $1 = 0, $mid2 = 0, $2 = 0, $nregs = 0, $3 = 0, $tt = 0, $4 = 0, $cmp = 0, $i = 0, $5 = 0, $tobool = 0, $call = 0, $p7 = 0, $6 = 0, $7 = 0, $call8 = 0, $mid9 = 0, $proc = 0, $8 = 0, $stack = 0, $9 = 0, $stbase = 0, $10 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $sub_ptr_div = 0, $stackidx = 0, $argc12 = 0, $target_class = 0, $11 = 0, $12 = 0, $and = 0, $cmp13 = 0, $add = 0, $nregs15 = 0, $body = 0, $irep = 0, $13 = 0, $nregs16 = 0, $14 = 0, $conv = 0, $add17 = 0, $nregs18 = 0, $acc = 0, $15 = 0, $stack21 = 0, $16 = 0, $add_ptr = 0, $nregs24 = 0, $17 = 0, $18 = 0, $stack26 = 0, $19 = 0, $20 = 0, $21 = 0, $cmp27 = 0, $22 = 0, $stack31 = 0, $23 = 0, $add_ptr32 = 0, $add34 = 0, $24 = 0, $stack36 = 0, $25 = 0, $arrayidx37 = 0, $26 = 0, $27 = 0, $28 = 0, $and39 = 0, $cmp40 = 0, $body43 = 0, $func = 0, $29 = 0, $30 = 0, $stbase46 = 0, $31 = 0, $ci48 = 0, $32 = 0, $stackidx49 = 0, $33 = 0, $add_ptr50 = 0, $stack52 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  tempParam = $b;
  $b = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$b >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$b + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$b + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $val = __stackBase__ | 0;
    $tmp = __stackBase__ + 12 | 0;
    $tmp54 = __stackBase__ + 24 | 0;
    $c1 = $mrb + 8 | 0;
    $0 = HEAP32[$c1 >> 2] | 0;
    $ci = $0 + 16 | 0;
    $1 = HEAP32[$ci >> 2] | 0;
    $mid2 = $1 | 0;
    $2 = HEAP16[$mid2 >> 1] | 0;
    $nregs = $1 + 12 | 0;
    $3 = HEAP32[$nregs >> 2] | 0;
    $tt = $b + 8 | 0;
    $4 = HEAP32[$tt >> 2] | 0;
    $cmp = ($4 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $i = $b;
    $5 = HEAP32[$i >> 2] | 0;
    $tobool = ($5 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $call = _mrb_class_get($mrb, 109948) | 0;
    _mrb_raise($mrb, $call, 100092);
    label = 5;
    break;
   case 5:
    $p7 = $b;
    $6 = HEAP32[$p7 >> 2] | 0;
    $7 = $6;
    $call8 = _cipush($mrb) | 0;
    $mid9 = $call8 | 0;
    HEAP16[$mid9 >> 1] = $2;
    $proc = $call8 + 4 | 0;
    HEAP32[$proc >> 2] = $7;
    $8 = HEAP32[$c1 >> 2] | 0;
    $stack = $8 + 4 | 0;
    $9 = HEAP32[$stack >> 2] | 0;
    $stbase = $8 + 8 | 0;
    $10 = HEAP32[$stbase >> 2] | 0;
    $sub_ptr_lhs_cast = $9;
    $sub_ptr_rhs_cast = $10;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $sub_ptr_div = ($sub_ptr_sub | 0) / 12 & -1;
    $stackidx = $call8 + 8 | 0;
    HEAP32[$stackidx >> 2] = $sub_ptr_div;
    $argc12 = $call8 + 16 | 0;
    HEAP32[$argc12 >> 2] = $argc;
    $target_class = $call8 + 28 | 0;
    HEAP32[$target_class >> 2] = $c;
    $11 = $6;
    $12 = HEAP32[$11 >> 2] | 0;
    $and = $12 & 262144;
    $cmp13 = ($and | 0) == 0;
    if ($cmp13) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $add = $argc + 2 | 0;
    $nregs15 = $call8 + 12 | 0;
    HEAP32[$nregs15 >> 2] = $add;
    label = 8;
    break;
   case 7:
    $body = $6 + 12 | 0;
    $irep = $body;
    $13 = HEAP32[$irep >> 2] | 0;
    $nregs16 = $13 + 6 | 0;
    $14 = HEAP16[$nregs16 >> 1] | 0;
    $conv = $14 & 65535;
    $add17 = $conv + 1 | 0;
    $nregs18 = $call8 + 12 | 0;
    HEAP32[$nregs18 >> 2] = $add17;
    label = 8;
    break;
   case 8:
    $acc = $call8 + 24 | 0;
    HEAP32[$acc >> 2] = -1;
    $15 = HEAP32[$c1 >> 2] | 0;
    $stack21 = $15 + 4 | 0;
    $16 = HEAP32[$stack21 >> 2] | 0;
    $add_ptr = $16 + ($3 * 12 & -1) | 0;
    HEAP32[$stack21 >> 2] = $add_ptr;
    $nregs24 = $call8 + 12 | 0;
    $17 = HEAP32[$nregs24 >> 2] | 0;
    _stack_extend($mrb, $17, 0);
    $18 = HEAP32[$c1 >> 2] | 0;
    $stack26 = $18 + 4 | 0;
    $19 = HEAP32[$stack26 >> 2] | 0;
    $20 = $19;
    $21 = $self;
    HEAP32[$20 >> 2] = HEAP32[$21 >> 2] | 0;
    HEAP32[$20 + 4 >> 2] = HEAP32[$21 + 4 >> 2] | 0;
    HEAP32[$20 + 8 >> 2] = HEAP32[$21 + 8 >> 2] | 0;
    $cmp27 = ($argc | 0) > 0;
    if ($cmp27) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $22 = HEAP32[$c1 >> 2] | 0;
    $stack31 = $22 + 4 | 0;
    $23 = HEAP32[$stack31 >> 2] | 0;
    $add_ptr32 = $23 + 12 | 0;
    _stack_copy($add_ptr32, $argv, $argc);
    label = 10;
    break;
   case 10:
    $add34 = $argc + 1 | 0;
    $24 = HEAP32[$c1 >> 2] | 0;
    $stack36 = $24 + 4 | 0;
    $25 = HEAP32[$stack36 >> 2] | 0;
    $arrayidx37 = $25 + ($add34 * 12 & -1) | 0;
    _mrb_nil_value148($tmp);
    $26 = $arrayidx37;
    $27 = $tmp;
    HEAP32[$26 >> 2] = HEAP32[$27 >> 2] | 0;
    HEAP32[$26 + 4 >> 2] = HEAP32[$27 + 4 >> 2] | 0;
    HEAP32[$26 + 8 >> 2] = HEAP32[$27 + 8 >> 2] | 0;
    $28 = HEAP32[$11 >> 2] | 0;
    $and39 = $28 & 262144;
    $cmp40 = ($and39 | 0) == 0;
    if ($cmp40) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $body43 = $6 + 12 | 0;
    $func = $body43;
    $29 = HEAP32[$func >> 2] | 0;
    FUNCTION_TABLE_viii[$29 & 1023]($val, $mrb, $self);
    $30 = HEAP32[$c1 >> 2] | 0;
    $stbase46 = $30 + 8 | 0;
    $31 = HEAP32[$stbase46 >> 2] | 0;
    $ci48 = $30 + 16 | 0;
    $32 = HEAP32[$ci48 >> 2] | 0;
    $stackidx49 = $32 + 8 | 0;
    $33 = HEAP32[$stackidx49 >> 2] | 0;
    $add_ptr50 = $31 + ($33 * 12 & -1) | 0;
    $stack52 = $30 + 4 | 0;
    HEAP32[$stack52 >> 2] = $add_ptr50;
    _cipop($mrb);
    label = 13;
    break;
   case 12:
    _mrb_run($tmp54, $mrb, $7, $self);
    $34 = $val;
    $35 = $tmp54;
    HEAP32[$34 >> 2] = HEAP32[$35 >> 2] | 0;
    HEAP32[$34 + 4 >> 2] = HEAP32[$35 + 4 >> 2] | 0;
    HEAP32[$34 + 8 >> 2] = HEAP32[$35 + 8 >> 2] | 0;
    label = 13;
    break;
   case 13:
    $36 = $agg_result;
    $37 = $val;
    HEAP32[$36 >> 2] = HEAP32[$37 >> 2] | 0;
    HEAP32[$36 + 4 >> 2] = HEAP32[$37 + 4 >> 2] | 0;
    HEAP32[$36 + 8 >> 2] = HEAP32[$37 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_yield_argv($agg_result, $mrb, $b, $argc, $argv) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $b = $b | 0;
  $argc = $argc | 0;
  $argv = $argv | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $b;
  $b = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$b >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$b + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$b + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_yield_internal($agg_result, $mrb, $b, $argc, $argv, HEAP32[(HEAP32[$mrb + 8 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$b >> 2] | 0) + 16 >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _ecall($mrb, $i) {
  $mrb = $mrb | 0;
  $i = $i | 0;
  var $tmp = 0, $c = 0, $0 = 0, $ensure = 0, $1 = 0, $arrayidx = 0, $2 = 0, $tobool = 0, $stack = 0, $3 = 0, $call = 0, $4 = 0, $stack3 = 0, $5 = 0, $stbase = 0, $6 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $sub_ptr_div = 0, $stackidx = 0, $mid = 0, $7 = 0, $mid6 = 0, $acc = 0, $argc = 0, $proc = 0, $irep = 0, $8 = 0, $nregs = 0, $9 = 0, $conv = 0, $nregs7 = 0, $target_class = 0, $10 = 0, $target_class8 = 0, $11 = 0, $stack10 = 0, $12 = 0, $nregs12 = 0, $13 = 0, $add_ptr = 0, $exc15 = 0, $14 = 0, $15 = 0, $ensure18 = 0, $16 = 0, $arrayidx19 = 0, $17 = 0, $tobool21 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $c = $mrb + 8 | 0;
    $0 = HEAP32[$c >> 2] | 0;
    $ensure = $0 + 36 | 0;
    $1 = HEAP32[$ensure >> 2] | 0;
    $arrayidx = $1 + ($i << 2) | 0;
    $2 = HEAP32[$arrayidx >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $stack = $0 + 4 | 0;
    $3 = HEAP32[$stack >> 2] | 0;
    $call = _cipush($mrb) | 0;
    $4 = HEAP32[$c >> 2] | 0;
    $stack3 = $4 + 4 | 0;
    $5 = HEAP32[$stack3 >> 2] | 0;
    $stbase = $4 + 8 | 0;
    $6 = HEAP32[$stbase >> 2] | 0;
    $sub_ptr_lhs_cast = $5;
    $sub_ptr_rhs_cast = $6;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $sub_ptr_div = ($sub_ptr_sub | 0) / 12 & -1;
    $stackidx = $call + 8 | 0;
    HEAP32[$stackidx >> 2] = $sub_ptr_div;
    $mid = $call - 44 | 0;
    $7 = HEAP16[$mid >> 1] | 0;
    $mid6 = $call | 0;
    HEAP16[$mid6 >> 1] = $7;
    $acc = $call + 24 | 0;
    HEAP32[$acc >> 2] = -1;
    $argc = $call + 16 | 0;
    HEAP32[$argc >> 2] = 0;
    $proc = $call + 4 | 0;
    HEAP32[$proc >> 2] = $2;
    $irep = $2 + 12 | 0;
    $8 = HEAP32[$irep >> 2] | 0;
    $nregs = $8 + 6 | 0;
    $9 = HEAP16[$nregs >> 1] | 0;
    $conv = $9 & 65535;
    $nregs7 = $call + 12 | 0;
    HEAP32[$nregs7 >> 2] = $conv;
    $target_class = $2 + 16 | 0;
    $10 = HEAP32[$target_class >> 2] | 0;
    $target_class8 = $call + 28 | 0;
    HEAP32[$target_class8 >> 2] = $10;
    $11 = HEAP32[$c >> 2] | 0;
    $stack10 = $11 + 4 | 0;
    $12 = HEAP32[$stack10 >> 2] | 0;
    $nregs12 = $call - 44 + 12 | 0;
    $13 = HEAP32[$nregs12 >> 2] | 0;
    $add_ptr = $12 + ($13 * 12 & -1) | 0;
    HEAP32[$stack10 >> 2] = $add_ptr;
    $exc15 = $mrb + 16 | 0;
    $14 = HEAP32[$exc15 >> 2] | 0;
    HEAP32[$exc15 >> 2] = 0;
    _mrb_run($tmp, $mrb, $2, $3);
    $15 = HEAP32[$c >> 2] | 0;
    $ensure18 = $15 + 36 | 0;
    $16 = HEAP32[$ensure18 >> 2] | 0;
    $arrayidx19 = $16 + ($i << 2) | 0;
    HEAP32[$arrayidx19 >> 2] = 0;
    $17 = HEAP32[$exc15 >> 2] | 0;
    $tobool21 = ($17 | 0) == 0;
    if ($tobool21) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    HEAP32[$exc15 >> 2] = $14;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _value_move($s1, $s2, $n) {
  $s1 = $s1 | 0;
  $s2 = $s2 | 0;
  $n = $n | 0;
  var $cmp = 0, $add_ptr = 0, $cmp1 = 0, $cmp415 = 0, $add_ptr2 = 0, $n_addr_018 = 0, $s2_addr_017 = 0, $s1_addr_016 = 0, $dec = 0, $incdec_ptr = 0, $incdec_ptr5 = 0, $0 = 0, $1 = 0, $cmp4 = 0, $cmp6 = 0, $cmp1020 = 0, $or_cond = 0, $n_addr_123 = 0, $s2_addr_122 = 0, $s1_addr_121 = 0, $dec9 = 0, $incdec_ptr12 = 0, $incdec_ptr13 = 0, $2 = 0, $3 = 0, $cmp10 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = $s1 >>> 0 > $s2 >>> 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    $add_ptr = $s2 + ($n * 12 & -1) | 0;
    $cmp1 = $add_ptr >>> 0 > $s1 >>> 0;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 7;
      break;
    }
   case 4:
    $cmp415 = ($n | 0) == 0;
    if ($cmp415) {
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $add_ptr2 = $s1 + ($n * 12 & -1) | 0;
    $s1_addr_016 = $add_ptr2;
    $s2_addr_017 = $add_ptr;
    $n_addr_018 = $n;
    label = 6;
    break;
   case 6:
    $dec = $n_addr_018 - 1 | 0;
    $incdec_ptr = $s1_addr_016 - 12 | 0;
    $incdec_ptr5 = $s2_addr_017 - 12 | 0;
    $0 = $incdec_ptr;
    $1 = $incdec_ptr5;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    $cmp4 = ($dec | 0) == 0;
    if ($cmp4) {
      label = 9;
      break;
    } else {
      $s1_addr_016 = $incdec_ptr;
      $s2_addr_017 = $incdec_ptr5;
      $n_addr_018 = $dec;
      label = 6;
      break;
    }
   case 7:
    $cmp6 = ($s1 | 0) == ($s2 | 0);
    $cmp1020 = ($n | 0) == 0;
    $or_cond = $cmp6 | $cmp1020;
    if ($or_cond) {
      label = 9;
      break;
    } else {
      $s1_addr_121 = $s1;
      $s2_addr_122 = $s2;
      $n_addr_123 = $n;
      label = 8;
      break;
    }
   case 8:
    $dec9 = $n_addr_123 - 1 | 0;
    $incdec_ptr12 = $s1_addr_121 + 12 | 0;
    $incdec_ptr13 = $s2_addr_122 + 12 | 0;
    $2 = $s1_addr_121;
    $3 = $s2_addr_122;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    $cmp10 = ($dec9 | 0) == 0;
    if ($cmp10) {
      label = 9;
      break;
    } else {
      $s1_addr_121 = $incdec_ptr12;
      $s2_addr_122 = $incdec_ptr13;
      $n_addr_123 = $dec9;
      label = 8;
      break;
    }
   case 9:
    return;
  }
}
function _argnum_error($mrb, $num) {
  $mrb = $mrb | 0;
  $num = $num | 0;
  var $str = 0, $agg_tmp = 0, $agg_tmp4 = 0, $agg_tmp7 = 0, $tmp = 0, $agg_tmp8 = 0, $agg_tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $c = 0, $0 = 0, $ci = 0, $1 = 0, $mid = 0, $2 = 0, $tobool = 0, $3 = 0, $ci6 = 0, $4 = 0, $argc = 0, $5 = 0, $6 = 0, $7 = 0, $argc11 = 0, $8 = 0, $9 = 0, $10 = 0, $call = 0, $exc_sroa_0_0__cast = 0, $exc_sroa_0_0_copyload = 0, $11 = 0, $exc15 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 108 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $str = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $agg_tmp4 = __stackBase__ + 24 | 0;
    $agg_tmp7 = __stackBase__ + 36 | 0;
    $tmp = __stackBase__ + 48 | 0;
    $agg_tmp8 = __stackBase__ + 60 | 0;
    $agg_tmp12 = __stackBase__ + 72 | 0;
    $tmp13 = __stackBase__ + 84 | 0;
    $tmp14 = __stackBase__ + 96 | 0;
    $c = $mrb + 8 | 0;
    $0 = HEAP32[$c >> 2] | 0;
    $ci = $0 + 16 | 0;
    $1 = HEAP32[$ci >> 2] | 0;
    $mid = $1 | 0;
    $2 = HEAP16[$mid >> 1] | 0;
    $tobool = $2 << 16 >> 16 == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_sym2str($agg_tmp, $mrb, $2);
    $3 = HEAP32[$c >> 2] | 0;
    $ci6 = $3 + 16 | 0;
    $4 = HEAP32[$ci6 >> 2] | 0;
    $argc = $4 + 16 | 0;
    $5 = HEAP32[$argc >> 2] | 0;
    _mrb_fixnum_value144($agg_tmp4, $5);
    _mrb_fixnum_value144($agg_tmp7, $num);
    _mrb_format($tmp, $mrb, 109700, (tempInt = STACKTOP, STACKTOP = STACKTOP + 36 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp4 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp4 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp4 + 8 >> 2] | 0, HEAP32[tempInt + 24 >> 2] = HEAP32[$agg_tmp7 >> 2] | 0, HEAP32[tempInt + 28 >> 2] = HEAP32[$agg_tmp7 + 4 >> 2] | 0, HEAP32[tempInt + 32 >> 2] = HEAP32[$agg_tmp7 + 8 >> 2] | 0, tempInt) | 0);
    $6 = $str;
    $7 = $tmp;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    label = 5;
    break;
   case 4:
    $argc11 = $1 + 16 | 0;
    $8 = HEAP32[$argc11 >> 2] | 0;
    _mrb_fixnum_value144($agg_tmp8, $8);
    _mrb_fixnum_value144($agg_tmp12, $num);
    _mrb_format($tmp13, $mrb, 109208, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp8 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp8 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp8 + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp12 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp12 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp12 + 8 >> 2] | 0, tempInt) | 0);
    $9 = $str;
    $10 = $tmp13;
    HEAP32[$9 >> 2] = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 + 4 >> 2] = HEAP32[$10 + 4 >> 2] | 0;
    HEAP32[$9 + 8 >> 2] = HEAP32[$10 + 8 >> 2] | 0;
    label = 5;
    break;
   case 5:
    $call = _mrb_class_get($mrb, 109948) | 0;
    _mrb_exc_new3($tmp14, $mrb, $call, $str);
    $exc_sroa_0_0__cast = $tmp14;
    $exc_sroa_0_0_copyload = HEAP32[$exc_sroa_0_0__cast >> 2] | 0;
    $11 = $exc_sroa_0_0_copyload;
    $exc15 = $mrb + 16 | 0;
    HEAP32[$exc15 >> 2] = $11;
    STACKTOP = __stackBase__;
    return;
  }
}
function _top_env($mrb, $proc) {
  $mrb = $mrb | 0;
  $proc = $proc | 0;
  var $env = 0, $0 = 0, $call = 0, $tobool = 0, $e_0 = 0, $c = 0, $1 = 0, $tobool1 = 0, $2 = 0, $call3 = 0, $tobool4 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $env = $proc + 20 | 0;
    $0 = HEAP32[$env >> 2] | 0;
    $call = _is_strict($mrb, $0) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      $e_0 = $0;
      label = 3;
      break;
    } else {
      $retval_0 = $0;
      label = 5;
      break;
    }
   case 3:
    $c = $e_0 + 4 | 0;
    $1 = HEAP32[$c >> 2] | 0;
    $tobool1 = ($1 | 0) == 0;
    if ($tobool1) {
      $retval_0 = $e_0;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $2 = $1;
    $call3 = _is_strict($mrb, $2) | 0;
    $tobool4 = ($call3 | 0) == 0;
    if ($tobool4) {
      $e_0 = $2;
      label = 3;
      break;
    } else {
      $retval_0 = $2;
      label = 5;
      break;
    }
   case 5:
    return $retval_0 | 0;
  }
  return 0;
}
function _localjump_error($mrb, $kind) {
  $mrb = $mrb | 0;
  $kind = $kind | 0;
  var $kind_str = 0, $msg = 0, $tmp4 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 72 | 0;
  $kind_str = __stackBase__ | 0;
  $msg = __stackBase__ + 24 | 0;
  $tmp4 = __stackBase__ + 60 | 0;
  _memcpy($kind_str | 0, 79020, 21);
  _mrb_str_buf_new($msg, $mrb, 19);
  _mrb_str_buf_cat(__stackBase__ + 36 | 0, $mrb, $msg, 79004, 11);
  _mrb_str_buf_cat(__stackBase__ + 48 | 0, $mrb, $msg, $kind_str + ($kind * 7 & -1) | 0, HEAP8[$kind + 79016 | 0] | 0);
  _mrb_exc_new3($tmp4, $mrb, _mrb_class_get($mrb, 110188) | 0, $msg);
  HEAP32[$mrb + 16 >> 2] = HEAP32[$tmp4 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _stack_clear($from, $count) {
  $from = $from | 0;
  $count = $count | 0;
  var $cmp1 = 0, $count_addr_03 = 0, $from_addr_02 = 0, $dec = 0, $incdec_ptr = 0, $0 = 0, $cmp = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp1 = ($count | 0) == 0;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      $from_addr_02 = $from;
      $count_addr_03 = $count;
      label = 3;
      break;
    }
   case 3:
    $dec = $count_addr_03 - 1 | 0;
    $incdec_ptr = $from_addr_02 + 12 | 0;
    $0 = $from_addr_02;
    _memset($0 | 0, 0, 12);
    $cmp = ($dec | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      $from_addr_02 = $incdec_ptr;
      $count_addr_03 = $dec;
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _yyparse($p) {
  $p = $p | 0;
  var $yylval = 0, $yymsgbuf = 0, $yyssa = 0, $yyvsa = 0, $yyval = 0, $buf = 0, $arraydecay = 0, $arraydecay1 = 0, $arraydecay2 = 0, $0 = 0, $tobool = 0, $1 = 0, $2 = 0, $mrb2818 = 0, $mrb2816 = 0, $3 = 0, $4 = 0, $lstate = 0, $locals = 0, $tree = 0, $lstate279 = 0, $in_def = 0, $in_single = 0, $in_def735 = 0, $in_single738 = 0, $in_def783 = 0, $in_single786 = 0, $in_def797 = 0, $in_single800 = 0, $lstate834 = 0, $id837 = 0, $lstate839 = 0, $id842 = 0, $lstate849 = 0, $id861 = 0, $id864 = 0, $id867 = 0, $id870 = 0, $id873 = 0, $id876 = 0, $id879 = 0, $id882 = 0, $id885 = 0, $id888 = 0, $id891 = 0, $id894 = 0, $id897 = 0, $id900 = 0, $id903 = 0, $id906 = 0, $id909 = 0, $id912 = 0, $id915 = 0, $id918 = 0, $id921 = 0, $id924 = 0, $id927 = 0, $id930 = 0, $id933 = 0, $id936 = 0, $id939 = 0, $id942 = 0, $id945 = 0, $cmdarg_stack = 0, $cmdarg_stack1375 = 0, $cmdarg_stack1447 = 0, $cmdarg_stack1454 = 0, $lstate1459 = 0, $lstate1465 = 0, $lpar_beg = 0, $paren_nest = 0, $lpar_beg1539 = 0, $cond_stack = 0, $cond_stack1571 = 0, $cond_stack1582 = 0, $cond_stack1587 = 0, $cond_stack1611 = 0, $cond_stack1616 = 0, $in_def1629 = 0, $in_single1632 = 0, $in_def1650 = 0, $in_single1655 = 0, $in_def1670 = 0, $in_single1673 = 0, $in_def1675 = 0, $in_single1678 = 0, $in_def1694 = 0, $in_def1709 = 0, $lstate1712 = 0, $in_single1714 = 0, $lstate1716 = 0, $in_single1732 = 0, $cmd_start = 0, $lex_strterm = 0, $lex_strterm2250 = 0, $lstate2315 = 0, $lstate2325 = 0, $id2328 = 0, $id2333 = 0, $id2338 = 0, $filename = 0, $arraydecay2420 = 0, $lineno = 0, $lstate2428 = 0, $cmd_start2429 = 0, $lstate2440 = 0, $cmd_start2441 = 0, $id2586 = 0, $id2592 = 0, $id2667 = 0, $id2669 = 0, $id2675 = 0, $id2679 = 0, $id2681 = 0, $lstate2693 = 0, $lineno2743 = 0, $column = 0, $5 = 0, $6 = 0, $mrb = 0, $yyerrstatus_0 = 0, $yytoken_0 = 0, $yymsg_0 = 0, $yymsg_alloc_0 = 0, $yyssp_0 = 0, $yyvsp_0 = 0, $yystate_0 = 0, $yychar_0 = 0, $incdec_ptr = 0, $yyerrstatus_1 = 0, $yytoken_1 = 0, $yymsg_1 = 0, $yymsg_alloc_1 = 0, $yyss_0 = 0, $yyssp_1 = 0, $yyvs_0 = 0, $yyvsp_1 = 0, $yystacksize_0 = 0, $yystate_1 = 0, $yychar_1 = 0, $conv = 0, $add_ptr_sum = 0, $add_ptr3 = 0, $cmp = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $sub_ptr_div = 0, $add = 0, $cmp6 = 0, $mul = 0, $cmp10 = 0, $_mul = 0, $7 = 0, $mul14 = 0, $add151315 = 0, $call16 = 0, $tobool17 = 0, $8 = 0, $yyss21 = 0, $9 = 0, $mul22 = 0, $10 = 0, $div = 0, $yyvs30 = 0, $11 = 0, $12 = 0, $mul31 = 0, $cmp39 = 0, $13 = 0, $add_ptr45 = 0, $add_ptr47 = 0, $14 = 0, $tobool49 = 0, $15 = 0, $call51 = 0, $add_ptr54_sum = 0, $cmp56 = 0, $yyss_1 = 0, $yyssp_2 = 0, $yyvs_1 = 0, $yyvsp_2 = 0, $yystacksize_2 = 0, $16 = 0, $tobool62 = 0, $17 = 0, $call64 = 0, $arrayidx = 0, $18 = 0, $conv67 = 0, $cmp68 = 0, $cmp72 = 0, $19 = 0, $tobool76 = 0, $20 = 0, $21 = 0, $call81 = 0, $yychar_2 = 0, $cmp83 = 0, $22 = 0, $tobool87 = 0, $23 = 0, $24 = 0, $cmp92 = 0, $arrayidx94 = 0, $25 = 0, $conv95 = 0, $cond = 0, $26 = 0, $tobool97 = 0, $27 = 0, $call99 = 0, $28 = 0, $29 = 0, $fputc = 0, $yytoken_2 = 0, $yychar_3 = 0, $add104 = 0, $30 = 0, $arrayidx110 = 0, $31 = 0, $conv111 = 0, $cmp112 = 0, $arrayidx116 = 0, $32 = 0, $conv117 = 0, $cmp118 = 0, $sub = 0, $cmp129 = 0, $tobool133 = 0, $dec = 0, $yyerrstatus_1_dec = 0, $33 = 0, $tobool137 = 0, $34 = 0, $call139 = 0, $35 = 0, $36 = 0, $fputc1319 = 0, $cmp143 = 0, $yychar_3_ = 0, $incdec_ptr147 = 0, $37 = 0, $38 = 0, $yytoken_3 = 0, $yychar_5 = 0, $arrayidx148 = 0, $39 = 0, $conv149 = 0, $cmp150 = 0, $yytoken_4 = 0, $yyn_0 = 0, $yychar_6 = 0, $arrayidx154 = 0, $40 = 0, $conv155 = 0, $sub156 = 0, $41 = 0, $42 = 0, $43 = 0, $tobool159 = 0, $44 = 0, $tobool163 = 0, $call165 = 0, $nd = 0, $45 = 0, $call170 = 0, $nd173 = 0, $46 = 0, $call176 = 0, $nd180 = 0, $47 = 0, $call181 = 0, $nd185 = 0, $48 = 0, $nd187 = 0, $49 = 0, $call188 = 0, $call189 = 0, $call192 = 0, $call195 = 0, $nd199 = 0, $50 = 0, $nd203 = 0, $51 = 0, $tobool204 = 0, $nd207 = 0, $52 = 0, $nd211 = 0, $53 = 0, $call212 = 0, $nd216 = 0, $54 = 0, $tobool217 = 0, $nd220 = 0, $55 = 0, $56 = 0, $call223 = 0, $call224 = 0, $nd228 = 0, $57 = 0, $nd233 = 0, $58 = 0, $tobool234 = 0, $59 = 0, $tobool237 = 0, $call242 = 0, $call247 = 0, $call248 = 0, $call249 = 0, $nd255 = 0, $60 = 0, $call258 = 0, $nd262 = 0, $61 = 0, $call263 = 0, $nd267 = 0, $62 = 0, $nd269 = 0, $63 = 0, $call270 = 0, $call271 = 0, $nd275 = 0, $64 = 0, $call276 = 0, $arrayidx281 = 0, $id = 0, $65 = 0, $id283 = 0, $66 = 0, $call284 = 0, $nd288 = 0, $67 = 0, $nd292 = 0, $68 = 0, $call293 = 0, $nd295 = 0, $69 = 0, $call296 = 0, $nd300 = 0, $70 = 0, $call301 = 0, $nd303 = 0, $71 = 0, $call304 = 0, $nd308 = 0, $72 = 0, $call309 = 0, $nd311 = 0, $73 = 0, $call312 = 0, $nd316 = 0, $74 = 0, $call317 = 0, $nd319 = 0, $75 = 0, $call320 = 0, $nd324 = 0, $76 = 0, $nd326 = 0, $77 = 0, $call327 = 0, $call328 = 0, $call329 = 0, $nd333 = 0, $78 = 0, $call334 = 0, $nd338 = 0, $79 = 0, $nd340 = 0, $80 = 0, $call341 = 0, $nd345 = 0, $81 = 0, $arrayidx346 = 0, $id347 = 0, $82 = 0, $nd349 = 0, $83 = 0, $call350 = 0, $nd354 = 0, $84 = 0, $call355 = 0, $nd357 = 0, $85 = 0, $call358 = 0, $arrayidx359 = 0, $id360 = 0, $86 = 0, $nd362 = 0, $87 = 0, $call363 = 0, $nd367 = 0, $88 = 0, $arrayidx368 = 0, $id369 = 0, $89 = 0, $call370 = 0, $arrayidx371 = 0, $id372 = 0, $90 = 0, $nd374 = 0, $91 = 0, $call375 = 0, $nd379 = 0, $92 = 0, $arrayidx380 = 0, $id381 = 0, $93 = 0, $call382 = 0, $arrayidx383 = 0, $id384 = 0, $94 = 0, $nd386 = 0, $95 = 0, $call387 = 0, $nd393 = 0, $96 = 0, $arrayidx394 = 0, $id395 = 0, $97 = 0, $call396 = 0, $arrayidx397 = 0, $id398 = 0, $98 = 0, $nd400 = 0, $99 = 0, $call401 = 0, $nd405 = 0, $100 = 0, $call406 = 0, $nd410 = 0, $101 = 0, $nd412 = 0, $102 = 0, $call413 = 0, $call414 = 0, $nd418 = 0, $103 = 0, $nd420 = 0, $104 = 0, $call421 = 0, $nd425 = 0, $105 = 0, $nd427 = 0, $106 = 0, $call428 = 0, $call429 = 0, $nd433 = 0, $107 = 0, $nd435 = 0, $108 = 0, $call436 = 0, $nd440 = 0, $109 = 0, $nd442 = 0, $110 = 0, $call443 = 0, $nd447 = 0, $111 = 0, $nd449 = 0, $112 = 0, $call450 = 0, $nd454 = 0, $113 = 0, $nd456 = 0, $114 = 0, $call457 = 0, $nd461 = 0, $115 = 0, $call462 = 0, $call463 = 0, $nd467 = 0, $116 = 0, $call468 = 0, $call469 = 0, $nd473 = 0, $117 = 0, $tobool474 = 0, $call476 = 0, $nd486 = 0, $118 = 0, $nd488 = 0, $119 = 0, $call489 = 0, $arrayidx492 = 0, $id493 = 0, $120 = 0, $nd495 = 0, $121 = 0, $call496 = 0, $nd500 = 0, $122 = 0, $nd502 = 0, $123 = 0, $arrayidx503 = 0, $id504 = 0, $124 = 0, $125 = 0, $call507 = 0, $nd511 = 0, $126 = 0, $arrayidx512 = 0, $id513 = 0, $127 = 0, $nd515 = 0, $128 = 0, $call516 = 0, $nd520 = 0, $129 = 0, $nd522 = 0, $130 = 0, $nd524 = 0, $131 = 0, $arrayidx525 = 0, $id526 = 0, $132 = 0, $133 = 0, $call529 = 0, $nd533 = 0, $134 = 0, $arrayidx534 = 0, $id535 = 0, $135 = 0, $nd537 = 0, $136 = 0, $call538 = 0, $nd542 = 0, $137 = 0, $nd544 = 0, $138 = 0, $nd546 = 0, $139 = 0, $arrayidx547 = 0, $id548 = 0, $140 = 0, $141 = 0, $call551 = 0, $nd555 = 0, $142 = 0, $call556 = 0, $nd560 = 0, $143 = 0, $call561 = 0, $nd565 = 0, $144 = 0, $call566 = 0, $call567 = 0, $nd571 = 0, $145 = 0, $call572 = 0, $call573 = 0, $nd577 = 0, $146 = 0, $call578 = 0, $call579 = 0, $nd583 = 0, $147 = 0, $nd587 = 0, $148 = 0, $nd591 = 0, $149 = 0, $call592 = 0, $nd596 = 0, $150 = 0, $call597 = 0, $nd601 = 0, $151 = 0, $nd603 = 0, $152 = 0, $call604 = 0, $call605 = 0, $call606 = 0, $nd610 = 0, $153 = 0, $nd612 = 0, $154 = 0, $call613 = 0, $nd617 = 0, $155 = 0, $nd619 = 0, $156 = 0, $nd621 = 0, $157 = 0, $call622 = 0, $nd626 = 0, $158 = 0, $call627 = 0, $call628 = 0, $nd632 = 0, $159 = 0, $call633 = 0, $nd635 = 0, $160 = 0, $call636 = 0, $nd640 = 0, $161 = 0, $call641 = 0, $nd645 = 0, $162 = 0, $nd647 = 0, $163 = 0, $call648 = 0, $call651 = 0, $call652 = 0, $call655 = 0, $nd657 = 0, $164 = 0, $call658 = 0, $nd662 = 0, $165 = 0, $nd666 = 0, $166 = 0, $call667 = 0, $nd671 = 0, $167 = 0, $nd673 = 0, $168 = 0, $call674 = 0, $call675 = 0, $nd679 = 0, $169 = 0, $call680 = 0, $nd684 = 0, $170 = 0, $nd686 = 0, $171 = 0, $call687 = 0, $call688 = 0, $nd692 = 0, $172 = 0, $nd695 = 0, $173 = 0, $call696 = 0, $nd698 = 0, $174 = 0, $call699 = 0, $nd703 = 0, $175 = 0, $id705 = 0, $176 = 0, $call706 = 0, $nd710 = 0, $177 = 0, $id712 = 0, $178 = 0, $call713 = 0, $nd717 = 0, $179 = 0, $id719 = 0, $180 = 0, $call720 = 0, $181 = 0, $tobool723 = 0, $182 = 0, $tobool725 = 0, $nd729 = 0, $183 = 0, $id731 = 0, $184 = 0, $call732 = 0, $185 = 0, $tobool736 = 0, $186 = 0, $tobool739 = 0, $id743 = 0, $187 = 0, $call744 = 0, $nd748 = 0, $188 = 0, $nd752 = 0, $189 = 0, $nd755 = 0, $190 = 0, $call756 = 0, $nd758 = 0, $191 = 0, $call759 = 0, $nd763 = 0, $192 = 0, $id765 = 0, $193 = 0, $call766 = 0, $nd770 = 0, $194 = 0, $id772 = 0, $195 = 0, $call773 = 0, $nd777 = 0, $196 = 0, $id779 = 0, $197 = 0, $call780 = 0, $198 = 0, $tobool784 = 0, $199 = 0, $tobool787 = 0, $nd791 = 0, $200 = 0, $id793 = 0, $201 = 0, $call794 = 0, $202 = 0, $tobool798 = 0, $203 = 0, $tobool801 = 0, $id805 = 0, $204 = 0, $call806 = 0, $nd810 = 0, $205 = 0, $id815 = 0, $206 = 0, $conv816 = 0, $207 = 0, $call817 = 0, $id821 = 0, $208 = 0, $conv822 = 0, $209 = 0, $call823 = 0, $nd827 = 0, $210 = 0, $id829 = 0, $211 = 0, $conv830 = 0, $212 = 0, $call831 = 0, $id836 = 0, $213 = 0, $id841 = 0, $214 = 0, $id845 = 0, $215 = 0, $call846 = 0, $nd852 = 0, $216 = 0, $id854 = 0, $217 = 0, $conv855 = 0, $218 = 0, $call856 = 0, $call857 = 0, $call860 = 0, $call863 = 0, $call866 = 0, $call869 = 0, $call872 = 0, $call875 = 0, $call878 = 0, $call881 = 0, $call884 = 0, $call887 = 0, $call890 = 0, $call893 = 0, $call896 = 0, $call899 = 0, $call902 = 0, $call905 = 0, $call908 = 0, $call911 = 0, $call914 = 0, $call917 = 0, $call920 = 0, $call923 = 0, $call926 = 0, $call929 = 0, $call932 = 0, $call935 = 0, $call938 = 0, $call941 = 0, $call944 = 0, $nd948 = 0, $219 = 0, $nd950 = 0, $220 = 0, $call951 = 0, $nd955 = 0, $221 = 0, $nd957 = 0, $222 = 0, $nd959 = 0, $223 = 0, $call960 = 0, $call961 = 0, $call962 = 0, $call963 = 0, $nd967 = 0, $224 = 0, $arrayidx968 = 0, $id969 = 0, $225 = 0, $nd971 = 0, $226 = 0, $call972 = 0, $nd976 = 0, $227 = 0, $arrayidx977 = 0, $id978 = 0, $228 = 0, $nd980 = 0, $229 = 0, $nd982 = 0, $230 = 0, $call983 = 0, $call984 = 0, $call985 = 0, $call986 = 0, $nd990 = 0, $231 = 0, $call991 = 0, $nd993 = 0, $232 = 0, $call994 = 0, $arrayidx995 = 0, $id996 = 0, $233 = 0, $nd998 = 0, $234 = 0, $call999 = 0, $nd1003 = 0, $235 = 0, $arrayidx1004 = 0, $id1005 = 0, $236 = 0, $call1006 = 0, $arrayidx1007 = 0, $id1008 = 0, $237 = 0, $nd1010 = 0, $238 = 0, $call1011 = 0, $nd1015 = 0, $239 = 0, $arrayidx1016 = 0, $id1017 = 0, $240 = 0, $call1018 = 0, $arrayidx1019 = 0, $id1020 = 0, $241 = 0, $nd1022 = 0, $242 = 0, $call1023 = 0, $nd1027 = 0, $243 = 0, $arrayidx1028 = 0, $id1029 = 0, $244 = 0, $call1030 = 0, $arrayidx1031 = 0, $id1032 = 0, $245 = 0, $nd1034 = 0, $246 = 0, $call1035 = 0, $call1038 = 0, $call1041 = 0, $nd1045 = 0, $247 = 0, $call1046 = 0, $nd1050 = 0, $248 = 0, $nd1052 = 0, $249 = 0, $call1053 = 0, $nd1057 = 0, $250 = 0, $nd1059 = 0, $251 = 0, $call1060 = 0, $nd1064 = 0, $252 = 0, $nd1066 = 0, $253 = 0, $call1067 = 0, $nd1071 = 0, $254 = 0, $nd1073 = 0, $255 = 0, $call1074 = 0, $nd1078 = 0, $256 = 0, $nd1080 = 0, $257 = 0, $call1081 = 0, $nd1085 = 0, $258 = 0, $nd1087 = 0, $259 = 0, $call1088 = 0, $nd1092 = 0, $260 = 0, $nd1094 = 0, $261 = 0, $call1095 = 0, $nd1099 = 0, $262 = 0, $nd1101 = 0, $263 = 0, $call1102 = 0, $nd1106 = 0, $264 = 0, $nd1108 = 0, $265 = 0, $call1109 = 0, $call1110 = 0, $nd1114 = 0, $266 = 0, $nd1116 = 0, $267 = 0, $call1117 = 0, $call1118 = 0, $nd1122 = 0, $268 = 0, $call1123 = 0, $nd1127 = 0, $269 = 0, $call1128 = 0, $nd1132 = 0, $270 = 0, $nd1134 = 0, $271 = 0, $call1135 = 0, $nd1139 = 0, $272 = 0, $nd1141 = 0, $273 = 0, $call1142 = 0, $nd1146 = 0, $274 = 0, $nd1148 = 0, $275 = 0, $call1149 = 0, $nd1153 = 0, $276 = 0, $nd1155 = 0, $277 = 0, $call1156 = 0, $nd1160 = 0, $278 = 0, $nd1162 = 0, $279 = 0, $call1163 = 0, $nd1167 = 0, $280 = 0, $nd1169 = 0, $281 = 0, $call1170 = 0, $nd1174 = 0, $282 = 0, $nd1176 = 0, $283 = 0, $call1177 = 0, $nd1181 = 0, $284 = 0, $nd1183 = 0, $285 = 0, $call1184 = 0, $nd1188 = 0, $286 = 0, $nd1190 = 0, $287 = 0, $call1191 = 0, $nd1195 = 0, $288 = 0, $nd1197 = 0, $289 = 0, $call1198 = 0, $nd1202 = 0, $290 = 0, $nd1204 = 0, $291 = 0, $call1205 = 0, $nd1209 = 0, $292 = 0, $nd1211 = 0, $293 = 0, $call1212 = 0, $nd1216 = 0, $294 = 0, $nd1218 = 0, $295 = 0, $call1219 = 0, $nd1223 = 0, $296 = 0, $call1224 = 0, $call1225 = 0, $nd1229 = 0, $297 = 0, $call1230 = 0, $call1231 = 0, $nd1235 = 0, $298 = 0, $nd1237 = 0, $299 = 0, $call1238 = 0, $nd1242 = 0, $300 = 0, $nd1244 = 0, $301 = 0, $call1245 = 0, $nd1249 = 0, $302 = 0, $nd1251 = 0, $303 = 0, $call1252 = 0, $nd1256 = 0, $304 = 0, $nd1258 = 0, $305 = 0, $call1259 = 0, $nd1263 = 0, $306 = 0, $call1264 = 0, $nd1266 = 0, $307 = 0, $nd1268 = 0, $308 = 0, $call1269 = 0, $nd1273 = 0, $309 = 0, $nd1277 = 0, $310 = 0, $tobool1280 = 0, $call1282 = 0, $nd1287 = 0, $311 = 0, $nd1291 = 0, $312 = 0, $nd1293 = 0, $313 = 0, $call1294 = 0, $call1295 = 0, $call1296 = 0, $nd1300 = 0, $314 = 0, $call1301 = 0, $call1302 = 0, $nd1306 = 0, $315 = 0, $nd1310 = 0, $316 = 0, $call1311 = 0, $nd1315 = 0, $317 = 0, $nd1317 = 0, $318 = 0, $call1318 = 0, $call1319 = 0, $call1320 = 0, $call1321 = 0, $nd1325 = 0, $319 = 0, $call1326 = 0, $call1327 = 0, $call1328 = 0, $nd1332 = 0, $320 = 0, $call1333 = 0, $call1334 = 0, $nd1338 = 0, $321 = 0, $nd1340 = 0, $322 = 0, $call1341 = 0, $nd1345 = 0, $323 = 0, $call1346 = 0, $call1347 = 0, $nd1349 = 0, $324 = 0, $call1350 = 0, $nd1354 = 0, $325 = 0, $nd1356 = 0, $326 = 0, $call1357 = 0, $call1358 = 0, $call1359 = 0, $nd1361 = 0, $327 = 0, $call1362 = 0, $nd1366 = 0, $328 = 0, $call1367 = 0, $329 = 0, $_c1314 = 0, $330 = 0, $shl = 0, $or = 0, $arrayidx1373 = 0, $stack1374 = 0, $331 = 0, $nd1377 = 0, $332 = 0, $nd1381 = 0, $333 = 0, $call1382 = 0, $nd1386 = 0, $334 = 0, $nd1392 = 0, $335 = 0, $call1393 = 0, $nd1397 = 0, $336 = 0, $call1398 = 0, $call1399 = 0, $nd1403 = 0, $337 = 0, $nd1405 = 0, $338 = 0, $call1406 = 0, $call1407 = 0, $nd1411 = 0, $339 = 0, $nd1413 = 0, $340 = 0, $call1414 = 0, $call1415 = 0, $call1416 = 0, $nd1420 = 0, $341 = 0, $nd1422 = 0, $342 = 0, $call1423 = 0, $call1424 = 0, $nd1428 = 0, $343 = 0, $nd1430 = 0, $344 = 0, $call1431 = 0, $call1432 = 0, $call1433 = 0, $nd1437 = 0, $345 = 0, $call1438 = 0, $call1439 = 0, $id1443 = 0, $346 = 0, $call1444 = 0, $347 = 0, $348 = 0, $_c1313 = 0, $arrayidx1452 = 0, $stack1453 = 0, $349 = 0, $nd1456 = 0, $350 = 0, $nd1462 = 0, $351 = 0, $nd1470 = 0, $352 = 0, $nd1474 = 0, $353 = 0, $id1476 = 0, $354 = 0, $call1477 = 0, $id1481 = 0, $355 = 0, $call1482 = 0, $nd1486 = 0, $356 = 0, $call1487 = 0, $nd1491 = 0, $357 = 0, $call1492 = 0, $call1495 = 0, $nd1499 = 0, $358 = 0, $call1500 = 0, $call1503 = 0, $call1506 = 0, $nd1510 = 0, $359 = 0, $call1511 = 0, $call1512 = 0, $call1515 = 0, $call1516 = 0, $arrayidx1519 = 0, $id1520 = 0, $360 = 0, $nd1522 = 0, $361 = 0, $call1523 = 0, $call1524 = 0, $nd1528 = 0, $362 = 0, $nd1530 = 0, $363 = 0, $364 = 0, $365 = 0, $_c1312 = 0, $366 = 0, $inc = 0, $arrayidx1537 = 0, $num1538 = 0, $367 = 0, $nd1541 = 0, $368 = 0, $nd1543 = 0, $369 = 0, $call1544 = 0, $nd1548 = 0, $370 = 0, $call1549 = 0, $nd1551 = 0, $371 = 0, $nd1553 = 0, $372 = 0, $call1554 = 0, $nd1558 = 0, $373 = 0, $call1559 = 0, $nd1561 = 0, $374 = 0, $nd1563 = 0, $375 = 0, $call1564 = 0, $376 = 0, $shl1567 = 0, $or1568 = 0, $377 = 0, $shr = 0, $nd1575 = 0, $378 = 0, $call1576 = 0, $nd1578 = 0, $379 = 0, $call1579 = 0, $380 = 0, $shl1583 = 0, $or1584 = 0, $381 = 0, $shr1588 = 0, $nd1592 = 0, $382 = 0, $call1593 = 0, $nd1595 = 0, $383 = 0, $call1596 = 0, $nd1600 = 0, $384 = 0, $nd1602 = 0, $385 = 0, $call1603 = 0, $nd1607 = 0, $386 = 0, $call1608 = 0, $387 = 0, $shl1612 = 0, $or1613 = 0, $388 = 0, $shr1617 = 0, $nd1621 = 0, $389 = 0, $nd1623 = 0, $390 = 0, $nd1625 = 0, $391 = 0, $call1626 = 0, $392 = 0, $tobool1630 = 0, $393 = 0, $tobool1633 = 0, $call1636 = 0, $nd1640 = 0, $394 = 0, $nd1642 = 0, $395 = 0, $nd1644 = 0, $396 = 0, $call1645 = 0, $nd1648 = 0, $397 = 0, $398 = 0, $_c = 0, $call1654 = 0, $399 = 0, $400 = 0, $call1656 = 0, $nd1661 = 0, $401 = 0, $nd1663 = 0, $402 = 0, $call1664 = 0, $nd1667 = 0, $403 = 0, $car = 0, $404 = 0, $arrayidx1668 = 0, $num1669 = 0, $405 = 0, $406 = 0, $cdr = 0, $407 = 0, $408 = 0, $409 = 0, $tobool1676 = 0, $410 = 0, $tobool1679 = 0, $call1682 = 0, $nd1686 = 0, $411 = 0, $nd1688 = 0, $412 = 0, $call1689 = 0, $nd1692 = 0, $413 = 0, $414 = 0, $inc1695 = 0, $call1696 = 0, $arrayidx1699 = 0, $id1700 = 0, $415 = 0, $nd1702 = 0, $416 = 0, $nd1704 = 0, $417 = 0, $call1705 = 0, $nd1708 = 0, $418 = 0, $419 = 0, $dec1710 = 0, $420 = 0, $inc1715 = 0, $call1717 = 0, $nd1721 = 0, $421 = 0, $arrayidx1722 = 0, $id1723 = 0, $422 = 0, $nd1725 = 0, $423 = 0, $nd1727 = 0, $424 = 0, $call1728 = 0, $nd1731 = 0, $425 = 0, $426 = 0, $dec1733 = 0, $call1735 = 0, $call1738 = 0, $call1741 = 0, $call1744 = 0, $nd1748 = 0, $427 = 0, $tobool1751 = 0, $call1753 = 0, $nd1758 = 0, $428 = 0, $call1759 = 0, $nd1761 = 0, $429 = 0, $nd1763 = 0, $430 = 0, $call1764 = 0, $nd1768 = 0, $431 = 0, $nd1772 = 0, $432 = 0, $call1773 = 0, $call1774 = 0, $id1778 = 0, $433 = 0, $call1779 = 0, $nd1783 = 0, $434 = 0, $call1784 = 0, $nd1788 = 0, $435 = 0, $call1789 = 0, $nd1793 = 0, $436 = 0, $nd1795 = 0, $437 = 0, $call1796 = 0, $call1797 = 0, $nd1801 = 0, $438 = 0, $call1802 = 0, $nd1806 = 0, $439 = 0, $id1808 = 0, $440 = 0, $call1809 = 0, $call1810 = 0, $nd1814 = 0, $441 = 0, $arrayidx1815 = 0, $id1816 = 0, $442 = 0, $call1817 = 0, $nd1819 = 0, $443 = 0, $call1820 = 0, $nd1824 = 0, $444 = 0, $call1825 = 0, $nd1829 = 0, $445 = 0, $nd1831 = 0, $446 = 0, $call1832 = 0, $id1836 = 0, $447 = 0, $call1837 = 0, $call1838 = 0, $arrayidx1841 = 0, $id1842 = 0, $448 = 0, $call1843 = 0, $nd1845 = 0, $449 = 0, $call1846 = 0, $call1849 = 0, $nd1853 = 0, $450 = 0, $call1854 = 0, $nd1858 = 0, $451 = 0, $nd1860 = 0, $452 = 0, $arrayidx1861 = 0, $id1862 = 0, $453 = 0, $id1864 = 0, $454 = 0, $call1865 = 0, $nd1869 = 0, $455 = 0, $nd1871 = 0, $456 = 0, $arrayidx1872 = 0, $id1873 = 0, $457 = 0, $nd1875 = 0, $458 = 0, $id1877 = 0, $459 = 0, $call1878 = 0, $nd1882 = 0, $460 = 0, $nd1884 = 0, $461 = 0, $id1886 = 0, $462 = 0, $call1887 = 0, $nd1891 = 0, $463 = 0, $nd1893 = 0, $464 = 0, $nd1895 = 0, $465 = 0, $id1897 = 0, $466 = 0, $call1898 = 0, $nd1902 = 0, $467 = 0, $arrayidx1903 = 0, $id1904 = 0, $468 = 0, $id1906 = 0, $469 = 0, $call1907 = 0, $nd1911 = 0, $470 = 0, $call1912 = 0, $nd1916 = 0, $471 = 0, $arrayidx1917 = 0, $id1918 = 0, $472 = 0, $nd1920 = 0, $473 = 0, $id1922 = 0, $474 = 0, $call1923 = 0, $nd1927 = 0, $475 = 0, $id1929 = 0, $476 = 0, $call1930 = 0, $nd1934 = 0, $477 = 0, $arrayidx1935 = 0, $id1936 = 0, $478 = 0, $id1938 = 0, $479 = 0, $call1939 = 0, $nd1943 = 0, $480 = 0, $arrayidx1944 = 0, $id1945 = 0, $481 = 0, $nd1947 = 0, $482 = 0, $id1949 = 0, $483 = 0, $call1950 = 0, $nd1954 = 0, $484 = 0, $id1956 = 0, $485 = 0, $call1957 = 0, $nd1961 = 0, $486 = 0, $nd1963 = 0, $487 = 0, $id1965 = 0, $488 = 0, $call1966 = 0, $arrayidx1969 = 0, $id1970 = 0, $489 = 0, $id1972 = 0, $490 = 0, $call1973 = 0, $arrayidx1976 = 0, $id1977 = 0, $491 = 0, $nd1979 = 0, $492 = 0, $id1981 = 0, $493 = 0, $call1982 = 0, $id1986 = 0, $494 = 0, $call1987 = 0, $nd1991 = 0, $495 = 0, $nd1999 = 0, $496 = 0, $id2007 = 0, $497 = 0, $nd2012 = 0, $498 = 0, $nd2016 = 0, $499 = 0, $nd2020 = 0, $500 = 0, $nd2024 = 0, $501 = 0, $nd2029 = 0, $502 = 0, $nd2031 = 0, $503 = 0, $call2032 = 0, $nd2036 = 0, $504 = 0, $car2037 = 0, $505 = 0, $cmp2038 = 0, $nd2045 = 0, $506 = 0, $507 = 0, $nd2052 = 0, $508 = 0, $arrayidx2053 = 0, $id2054 = 0, $509 = 0, $nd2056 = 0, $510 = 0, $call2057 = 0, $nd2061 = 0, $511 = 0, $arrayidx2062 = 0, $id2063 = 0, $512 = 0, $nd2065 = 0, $513 = 0, $call2066 = 0, $nd2070 = 0, $514 = 0, $nd2073 = 0, $515 = 0, $arrayidx2074 = 0, $id2075 = 0, $516 = 0, $nd2077 = 0, $517 = 0, $call2078 = 0, $nd2082 = 0, $518 = 0, $arrayidx2084 = 0, $id2085 = 0, $519 = 0, $nd2087 = 0, $520 = 0, $call2088 = 0, $nd2092 = 0, $521 = 0, $arrayidx2093 = 0, $id2094 = 0, $522 = 0, $nd2096 = 0, $523 = 0, $call2097 = 0, $nd2101 = 0, $524 = 0, $arrayidx2102 = 0, $id2103 = 0, $525 = 0, $nd2105 = 0, $526 = 0, $call2106 = 0, $nd2110 = 0, $527 = 0, $id2112 = 0, $528 = 0, $call2113 = 0, $nd2117 = 0, $529 = 0, $call2118 = 0, $nd2120 = 0, $530 = 0, $call2121 = 0, $nd2125 = 0, $531 = 0, $call2126 = 0, $nd2128 = 0, $532 = 0, $call2129 = 0, $nd2133 = 0, $533 = 0, $call2134 = 0, $call2137 = 0, $nd2141 = 0, $534 = 0, $call2142 = 0, $nd2144 = 0, $535 = 0, $call2145 = 0, $nd2150 = 0, $536 = 0, $nd2152 = 0, $537 = 0, $call2153 = 0, $nd2158 = 0, $538 = 0, $nd2160 = 0, $539 = 0, $call2161 = 0, $nd2165 = 0, $540 = 0, $nd2167 = 0, $541 = 0, $call2168 = 0, $nd2170 = 0, $542 = 0, $call2171 = 0, $nd2175 = 0, $543 = 0, $tobool2176 = 0, $call2180 = 0, $call2181 = 0, $nd2188 = 0, $544 = 0, $nd2190 = 0, $545 = 0, $nd2192 = 0, $546 = 0, $call2193 = 0, $call2194 = 0, $nd2197 = 0, $547 = 0, $tobool2198 = 0, $call2203 = 0, $nd2208 = 0, $548 = 0, $call2209 = 0, $nd2213 = 0, $549 = 0, $nd2217 = 0, $550 = 0, $nd2221 = 0, $551 = 0, $nd2225 = 0, $552 = 0, $nd2227 = 0, $553 = 0, $call2228 = 0, $call2229 = 0, $call2230 = 0, $nd2234 = 0, $554 = 0, $nd2236 = 0, $555 = 0, $call2237 = 0, $nd2241 = 0, $556 = 0, $call2242 = 0, $557 = 0, $nd2249 = 0, $558 = 0, $nd2252 = 0, $559 = 0, $nd2254 = 0, $560 = 0, $call2255 = 0, $call2258 = 0, $call2259 = 0, $nd2263 = 0, $561 = 0, $nd2267 = 0, $562 = 0, $nd2269 = 0, $563 = 0, $call2270 = 0, $call2271 = 0, $call2272 = 0, $nd2276 = 0, $564 = 0, $nd2280 = 0, $565 = 0, $nd2282 = 0, $566 = 0, $call2283 = 0, $call2286 = 0, $call2287 = 0, $call2288 = 0, $doc = 0, $nd2291 = 0, $567 = 0, $call2292 = 0, $doc2293 = 0, $nd2296 = 0, $568 = 0, $call2297 = 0, $call2298 = 0, $nd2302 = 0, $569 = 0, $nd2304 = 0, $570 = 0, $call2305 = 0, $call2306 = 0, $call2307 = 0, $id2311 = 0, $571 = 0, $call2312 = 0, $nd2317 = 0, $572 = 0, $nd2319 = 0, $573 = 0, $call2320 = 0, $call2321 = 0, $call2322 = 0, $id2327 = 0, $574 = 0, $nd2331 = 0, $575 = 0, $call2332 = 0, $nd2336 = 0, $576 = 0, $call2337 = 0, $nd2341 = 0, $577 = 0, $call2342 = 0, $call2343 = 0, $nd2347 = 0, $578 = 0, $nd2349 = 0, $579 = 0, $call2350 = 0, $call2351 = 0, $call2352 = 0, $nd2356 = 0, $580 = 0, $call2357 = 0, $nd2361 = 0, $581 = 0, $call2362 = 0, $id2366 = 0, $582 = 0, $call2367 = 0, $id2371 = 0, $583 = 0, $call2372 = 0, $id2376 = 0, $584 = 0, $call2377 = 0, $id2381 = 0, $585 = 0, $call2382 = 0, $id2386 = 0, $586 = 0, $call2387 = 0, $nd2391 = 0, $587 = 0, $nd2394 = 0, $588 = 0, $call2395 = 0, $call2398 = 0, $call2401 = 0, $call2404 = 0, $call2407 = 0, $589 = 0, $tobool2410 = 0, $590 = 0, $call2416 = 0, $call2417 = 0, $591 = 0, $call2421 = 0, $call2423 = 0, $nd2432 = 0, $592 = 0, $nd2438 = 0, $593 = 0, $nd2444 = 0, $594 = 0, $nd2448 = 0, $595 = 0, $nd2450 = 0, $596 = 0, $arrayidx2451 = 0, $id2452 = 0, $597 = 0, $id2454 = 0, $598 = 0, $call2455 = 0, $nd2459 = 0, $599 = 0, $nd2461 = 0, $600 = 0, $arrayidx2462 = 0, $id2463 = 0, $601 = 0, $nd2465 = 0, $602 = 0, $id2467 = 0, $603 = 0, $call2468 = 0, $nd2472 = 0, $604 = 0, $nd2474 = 0, $605 = 0, $id2476 = 0, $606 = 0, $call2477 = 0, $nd2481 = 0, $607 = 0, $nd2483 = 0, $608 = 0, $nd2485 = 0, $609 = 0, $id2487 = 0, $610 = 0, $call2488 = 0, $nd2492 = 0, $611 = 0, $arrayidx2493 = 0, $id2494 = 0, $612 = 0, $id2496 = 0, $613 = 0, $call2497 = 0, $nd2501 = 0, $614 = 0, $arrayidx2502 = 0, $id2503 = 0, $615 = 0, $nd2505 = 0, $616 = 0, $id2507 = 0, $617 = 0, $call2508 = 0, $nd2512 = 0, $618 = 0, $id2514 = 0, $619 = 0, $call2515 = 0, $nd2519 = 0, $620 = 0, $arrayidx2520 = 0, $id2521 = 0, $621 = 0, $id2523 = 0, $622 = 0, $call2524 = 0, $nd2528 = 0, $623 = 0, $arrayidx2529 = 0, $id2530 = 0, $624 = 0, $nd2532 = 0, $625 = 0, $id2534 = 0, $626 = 0, $call2535 = 0, $nd2539 = 0, $627 = 0, $id2541 = 0, $628 = 0, $call2542 = 0, $nd2546 = 0, $629 = 0, $nd2548 = 0, $630 = 0, $id2550 = 0, $631 = 0, $call2551 = 0, $arrayidx2554 = 0, $id2555 = 0, $632 = 0, $id2557 = 0, $633 = 0, $call2558 = 0, $arrayidx2561 = 0, $id2562 = 0, $634 = 0, $nd2564 = 0, $635 = 0, $id2566 = 0, $636 = 0, $call2567 = 0, $id2571 = 0, $637 = 0, $call2572 = 0, $call2575 = 0, $id2589 = 0, $638 = 0, $639 = 0, $id2595 = 0, $640 = 0, $call2596 = 0, $nd2600 = 0, $641 = 0, $call2601 = 0, $nd2605 = 0, $642 = 0, $call2606 = 0, $nd2610 = 0, $643 = 0, $nd2612 = 0, $644 = 0, $call2613 = 0, $call2614 = 0, $arrayidx2617 = 0, $id2618 = 0, $645 = 0, $646 = 0, $conv2621 = 0, $647 = 0, $nd2623 = 0, $648 = 0, $call2624 = 0, $arrayidx2627 = 0, $id2628 = 0, $649 = 0, $650 = 0, $conv2631 = 0, $651 = 0, $nd2633 = 0, $652 = 0, $call2634 = 0, $nd2638 = 0, $653 = 0, $call2639 = 0, $nd2643 = 0, $654 = 0, $nd2645 = 0, $655 = 0, $call2646 = 0, $call2647 = 0, $nd2651 = 0, $656 = 0, $call2652 = 0, $nd2656 = 0, $657 = 0, $nd2658 = 0, $658 = 0, $call2659 = 0, $call2660 = 0, $id2664 = 0, $659 = 0, $660 = 0, $id2672 = 0, $661 = 0, $662 = 0, $id2678 = 0, $663 = 0, $nd2684 = 0, $664 = 0, $tobool2687 = 0, $call2689 = 0, $nd2696 = 0, $665 = 0, $cmp2697 = 0, $car2703 = 0, $666 = 0, $667 = 0, $668 = 0, $nd2711 = 0, $669 = 0, $nd2715 = 0, $670 = 0, $call2716 = 0, $nd2720 = 0, $671 = 0, $nd2722 = 0, $672 = 0, $call2723 = 0, $call2724 = 0, $nd2728 = 0, $673 = 0, $nd2730 = 0, $674 = 0, $call2731 = 0, $arrayidx2734 = 0, $id2735 = 0, $675 = 0, $call2736 = 0, $nd2738 = 0, $676 = 0, $call2739 = 0, $677 = 0, $inc2744 = 0, $yyerrstatus_3 = 0, $678 = 0, $tobool2751 = 0, $idx_neg1326 = 0, $add_ptr27611327 = 0, $679 = 0, $call2753 = 0, $680 = 0, $arrayidx2754 = 0, $681 = 0, $conv2755 = 0, $682 = 0, $fputc1322 = 0, $_pr = 0, $idx_neg = 0, $add_ptr2761 = 0, $tobool2763 = 0, $add_ptr27611329 = 0, $add_ptr2759_sum = 0, $incdec_ptr2767 = 0, $683 = 0, $684 = 0, $arrayidx2768 = 0, $685 = 0, $conv2769 = 0, $sub2770 = 0, $arrayidx2771 = 0, $686 = 0, $conv2772 = 0, $687 = 0, $conv2773 = 0, $add2774 = 0, $688 = 0, $arrayidx2780 = 0, $689 = 0, $cmp2783 = 0, $arrayidx2786 = 0, $690 = 0, $conv2787 = 0, $arrayidx2790 = 0, $691 = 0, $conv2791 = 0, $yytoken_5 = 0, $yychar_7 = 0, $tobool2793 = 0, $call2797 = 0, $cmp2798 = 0, $cmp2801 = 0, $or_cond3 = 0, $mul2804 = 0, $cmp2805 = 0, $_mul2804 = 0, $cmp2813 = 0, $692 = 0, $693 = 0, $call2819 = 0, $tobool2820 = 0, $arraydecay_call2819 = 0, $__mul2804 = 0, $yymsg_2 = 0, $yymsg_alloc_2 = 0, $cmp2826 = 0, $cmp2829 = 0, $or_cond = 0, $call2832 = 0, $yymsg_3 = 0, $yymsg_alloc_3 = 0, $cmp2840 = 0, $cmp2843 = 0, $cmp2846 = 0, $yychar_8 = 0, $yyssp_3 = 0, $yyvsp_3 = 0, $yystate_2 = 0, $arrayidx2863 = 0, $694 = 0, $cmp2865 = 0, $conv2864 = 0, $add2868 = 0, $695 = 0, $arrayidx2875 = 0, $696 = 0, $cmp2877 = 0, $arrayidx2880 = 0, $697 = 0, $conv2881 = 0, $cmp2882 = 0, $cmp2888 = 0, $arrayidx2892 = 0, $698 = 0, $conv2893 = 0, $add_ptr2894 = 0, $add_ptr2895 = 0, $699 = 0, $conv2896 = 0, $700 = 0, $tobool2898 = 0, $cmp2902 = 0, $incdec_ptr2906 = 0, $701 = 0, $702 = 0, $703 = 0, $tobool2908 = 0, $704 = 0, $call2910 = 0, $705 = 0, $arrayidx2911 = 0, $706 = 0, $conv2912 = 0, $707 = 0, $fputc1325 = 0, $yytoken_8 = 0, $yymsg_6 = 0, $yyss_3 = 0, $yyssp_6 = 0, $yyvsp_6 = 0, $yychar_11 = 0, $yytoken_9 = 0, $yymsg_7 = 0, $yyss_4 = 0, $yyssp_7 = 0, $yyvsp_7 = 0, $yyresult_0 = 0, $yychar_12 = 0, $yyresult_01334 = 0, $yyvsp_71333 = 0, $yyssp_71332 = 0, $yyss_41331 = 0, $yymsg_71330 = 0, $708 = 0, $tobool2928 = 0, $cmp29321335 = 0, $yyvsp_81337 = 0, $yyssp_81336 = 0, $709 = 0, $idxprom = 0, $arrayidx2934 = 0, $710 = 0, $conv2935 = 0, $add_ptr2936 = 0, $add_ptr2937 = 0, $cmp2932 = 0, $cmp2939 = 0, $mrb2942 = 0, $711 = 0, $712 = 0, $cmp2945 = 0, $mrb2948 = 0, $713 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1352 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $yylval = __stackBase__ | 0;
    $yymsgbuf = __stackBase__ + 4 | 0;
    $yyssa = __stackBase__ + 132 | 0;
    $yyvsa = __stackBase__ + 532 | 0;
    $yyval = __stackBase__ + 1332 | 0;
    $buf = __stackBase__ + 1336 | 0;
    $arraydecay = $yymsgbuf | 0;
    $arraydecay1 = $yyssa | 0;
    $arraydecay2 = $yyvsa | 0;
    $0 = HEAP32[9259] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $1 = HEAP32[_stderr >> 2] | 0;
    $2 = _fwrite(108936, 15, 1, $1 | 0) | 0;
    label = 4;
    break;
   case 4:
    $mrb2818 = $p | 0;
    $mrb2816 = $p | 0;
    $3 = $yylval | 0;
    $4 = $yyval | 0;
    $lstate = $p + 40 | 0;
    $locals = $p + 76 | 0;
    $tree = $p + 1136 | 0;
    $lstate279 = $p + 40 | 0;
    $in_def = $p + 64 | 0;
    $in_single = $p + 68 | 0;
    $in_def735 = $p + 64 | 0;
    $in_single738 = $p + 68 | 0;
    $in_def783 = $p + 64 | 0;
    $in_single786 = $p + 68 | 0;
    $in_def797 = $p + 64 | 0;
    $in_single800 = $p + 68 | 0;
    $lstate834 = $p + 40 | 0;
    $id837 = $yyval;
    $lstate839 = $p + 40 | 0;
    $id842 = $yyval;
    $lstate849 = $p + 40 | 0;
    $id861 = $yyval;
    $id864 = $yyval;
    $id867 = $yyval;
    $id870 = $yyval;
    $id873 = $yyval;
    $id876 = $yyval;
    $id879 = $yyval;
    $id882 = $yyval;
    $id885 = $yyval;
    $id888 = $yyval;
    $id891 = $yyval;
    $id894 = $yyval;
    $id897 = $yyval;
    $id900 = $yyval;
    $id903 = $yyval;
    $id906 = $yyval;
    $id909 = $yyval;
    $id912 = $yyval;
    $id915 = $yyval;
    $id918 = $yyval;
    $id921 = $yyval;
    $id924 = $yyval;
    $id927 = $yyval;
    $id930 = $yyval;
    $id933 = $yyval;
    $id936 = $yyval;
    $id939 = $yyval;
    $id942 = $yyval;
    $id945 = $yyval;
    $cmdarg_stack = $p + 52 | 0;
    $cmdarg_stack1375 = $p + 52 | 0;
    $cmdarg_stack1447 = $p + 52 | 0;
    $cmdarg_stack1454 = $p + 52 | 0;
    $lstate1459 = $p + 40 | 0;
    $lstate1465 = $p + 40 | 0;
    $lpar_beg = $p + 60 | 0;
    $paren_nest = $p + 56 | 0;
    $lpar_beg1539 = $p + 60 | 0;
    $cond_stack = $p + 48 | 0;
    $cond_stack1571 = $p + 48 | 0;
    $cond_stack1582 = $p + 48 | 0;
    $cond_stack1587 = $p + 48 | 0;
    $cond_stack1611 = $p + 48 | 0;
    $cond_stack1616 = $p + 48 | 0;
    $in_def1629 = $p + 64 | 0;
    $in_single1632 = $p + 68 | 0;
    $in_def1650 = $p + 64 | 0;
    $in_single1655 = $p + 68 | 0;
    $in_def1670 = $p + 64 | 0;
    $in_single1673 = $p + 68 | 0;
    $in_def1675 = $p + 64 | 0;
    $in_single1678 = $p + 68 | 0;
    $in_def1694 = $p + 64 | 0;
    $in_def1709 = $p + 64 | 0;
    $lstate1712 = $p + 40 | 0;
    $in_single1714 = $p + 68 | 0;
    $lstate1716 = $p + 40 | 0;
    $in_single1732 = $p + 68 | 0;
    $cmd_start = $p + 72 | 0;
    $lex_strterm = $p + 44 | 0;
    $lex_strterm2250 = $p + 44 | 0;
    $lstate2315 = $p + 40 | 0;
    $lstate2325 = $p + 40 | 0;
    $id2328 = $yyval;
    $id2333 = $yyval;
    $id2338 = $yyval;
    $filename = $p + 28 | 0;
    $arraydecay2420 = $buf | 0;
    $lineno = $p + 32 | 0;
    $lstate2428 = $p + 40 | 0;
    $cmd_start2429 = $p + 72 | 0;
    $lstate2440 = $p + 40 | 0;
    $cmd_start2441 = $p + 72 | 0;
    $id2586 = $yyval;
    $id2592 = $yyval;
    $id2667 = $yyval;
    $id2669 = $yyval;
    $id2675 = $yyval;
    $id2679 = $yyval;
    $id2681 = $yyval;
    $lstate2693 = $p + 40 | 0;
    $lineno2743 = $p + 32 | 0;
    $column = $p + 36 | 0;
    $5 = $yylval;
    $6 = $yylval | 0;
    $mrb = $p | 0;
    $yychar_1 = -2;
    $yystate_1 = 0;
    $yystacksize_0 = 200;
    $yyvsp_1 = $arraydecay2;
    $yyvs_0 = $arraydecay2;
    $yyssp_1 = $arraydecay1;
    $yyss_0 = $arraydecay1;
    $yymsg_alloc_1 = 128;
    $yymsg_1 = $arraydecay;
    $yytoken_1 = 0;
    $yyerrstatus_1 = 0;
    label = 6;
    break;
   case 5:
    $incdec_ptr = $yyssp_0 + 2 | 0;
    $yychar_1 = $yychar_0;
    $yystate_1 = $yystate_0;
    $yystacksize_0 = $yystacksize_2;
    $yyvsp_1 = $yyvsp_0;
    $yyvs_0 = $yyvs_1;
    $yyssp_1 = $incdec_ptr;
    $yyss_0 = $yyss_1;
    $yymsg_alloc_1 = $yymsg_alloc_0;
    $yymsg_1 = $yymsg_0;
    $yytoken_1 = $yytoken_0;
    $yyerrstatus_1 = $yyerrstatus_0;
    label = 6;
    break;
   case 6:
    $conv = $yystate_1 & 65535;
    HEAP16[$yyssp_1 >> 1] = $conv;
    $add_ptr_sum = $yystacksize_0 - 1 | 0;
    $add_ptr3 = $yyss_0 + ($add_ptr_sum << 1) | 0;
    $cmp = $add_ptr3 >>> 0 > $yyssp_1 >>> 0;
    if ($cmp) {
      $yystacksize_2 = $yystacksize_0;
      $yyvsp_2 = $yyvsp_1;
      $yyvs_1 = $yyvs_0;
      $yyssp_2 = $yyssp_1;
      $yyss_1 = $yyss_0;
      label = 14;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $sub_ptr_lhs_cast = $yyssp_1;
    $sub_ptr_rhs_cast = $yyss_0;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $sub_ptr_div = $sub_ptr_sub >> 1;
    $add = $sub_ptr_div + 1 | 0;
    $cmp6 = $yystacksize_0 >>> 0 > 9999;
    if ($cmp6) {
      $yychar_11 = $yychar_1;
      $yyvsp_6 = $yyvsp_1;
      $yyssp_6 = $yyssp_1;
      $yyss_3 = $yyss_0;
      $yymsg_6 = $yymsg_1;
      $yytoken_8 = $yytoken_1;
      label = 522;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $mul = $yystacksize_0 << 1;
    $cmp10 = $mul >>> 0 > 1e4;
    $_mul = $cmp10 ? 1e4 : $mul;
    $7 = HEAP32[$mrb >> 2] | 0;
    $mul14 = $_mul * 6 & -1;
    $add151315 = $mul14 | 3;
    $call16 = _mrb_malloc($7, $add151315) | 0;
    $tobool17 = ($call16 | 0) == 0;
    if ($tobool17) {
      $yychar_11 = $yychar_1;
      $yyvsp_6 = $yyvsp_1;
      $yyssp_6 = $yyssp_1;
      $yyss_3 = $yyss_0;
      $yymsg_6 = $yymsg_1;
      $yytoken_8 = $yytoken_1;
      label = 522;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $8 = $call16;
    $yyss21 = $call16;
    $9 = $yyss_0;
    $mul22 = $add << 1;
    _memcpy($call16 | 0, $9 | 0, $mul22);
    $10 = $_mul >>> 1;
    $div = $10 & 1073741823;
    $yyvs30 = $8 + ($div << 2) | 0;
    $11 = $yyvs30;
    $12 = $yyvs_0;
    $mul31 = $add << 2;
    _memcpy($11 | 0, $12 | 0, $mul31);
    $cmp39 = ($yyss_0 | 0) == ($arraydecay1 | 0);
    if ($cmp39) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $13 = HEAP32[$mrb >> 2] | 0;
    _mrb_free($13, $9);
    label = 11;
    break;
   case 11:
    $add_ptr45 = $yyss21 + ($sub_ptr_div << 1) | 0;
    $add_ptr47 = $yyvs30 + ($sub_ptr_div << 2) | 0;
    $14 = HEAP32[9259] | 0;
    $tobool49 = ($14 | 0) == 0;
    if ($tobool49) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $15 = HEAP32[_stderr >> 2] | 0;
    $call51 = _fprintf($15 | 0, 110596, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $_mul, tempInt) | 0) | 0;
    label = 13;
    break;
   case 13:
    $add_ptr54_sum = $_mul - 1 | 0;
    $cmp56 = ($add_ptr54_sum | 0) > ($sub_ptr_div | 0);
    if ($cmp56) {
      $yystacksize_2 = $_mul;
      $yyvsp_2 = $add_ptr47;
      $yyvs_1 = $yyvs30;
      $yyssp_2 = $add_ptr45;
      $yyss_1 = $yyss21;
      label = 14;
      break;
    } else {
      $yychar_12 = $yychar_1;
      $yyresult_0 = 1;
      $yyvsp_7 = $add_ptr47;
      $yyssp_7 = $add_ptr45;
      $yyss_4 = $yyss21;
      $yymsg_7 = $yymsg_1;
      $yytoken_9 = $yytoken_1;
      label = 523;
      break;
    }
   case 14:
    $16 = HEAP32[9259] | 0;
    $tobool62 = ($16 | 0) == 0;
    if ($tobool62) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $17 = HEAP32[_stderr >> 2] | 0;
    $call64 = _fprintf($17 | 0, 106112, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $yystate_1, tempInt) | 0) | 0;
    label = 16;
    break;
   case 16:
    $arrayidx = 32904 + ($yystate_1 << 1) | 0;
    $18 = HEAP16[$arrayidx >> 1] | 0;
    $conv67 = $18 << 16 >> 16;
    $cmp68 = $18 << 16 >> 16 == -745;
    if ($cmp68) {
      $yychar_5 = $yychar_1;
      $yytoken_3 = $yytoken_1;
      label = 37;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $cmp72 = ($yychar_1 | 0) == -2;
    if ($cmp72) {
      label = 18;
      break;
    } else {
      $yychar_2 = $yychar_1;
      label = 21;
      break;
    }
   case 18:
    $19 = HEAP32[9259] | 0;
    $tobool76 = ($19 | 0) == 0;
    if ($tobool76) {
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $20 = HEAP32[_stderr >> 2] | 0;
    $21 = _fwrite(102692, 17, 1, $20 | 0) | 0;
    label = 20;
    break;
   case 20:
    $call81 = _yylex($5, $p) | 0;
    $yychar_2 = $call81;
    label = 21;
    break;
   case 21:
    $cmp83 = ($yychar_2 | 0) < 1;
    if ($cmp83) {
      label = 22;
      break;
    } else {
      label = 24;
      break;
    }
   case 22:
    $22 = HEAP32[9259] | 0;
    $tobool87 = ($22 | 0) == 0;
    if ($tobool87) {
      $yychar_3 = 0;
      $yytoken_2 = 0;
      label = 28;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $23 = HEAP32[_stderr >> 2] | 0;
    $24 = _fwrite(99960, 21, 1, $23 | 0) | 0;
    $yychar_3 = 0;
    $yytoken_2 = 0;
    label = 28;
    break;
   case 24:
    $cmp92 = $yychar_2 >>> 0 < 380;
    if ($cmp92) {
      label = 25;
      break;
    } else {
      $cond = 2;
      label = 26;
      break;
    }
   case 25:
    $arrayidx94 = $yychar_2 + 4 | 0;
    $25 = HEAP8[$arrayidx94] | 0;
    $conv95 = $25 & 255;
    $cond = $conv95;
    label = 26;
    break;
   case 26:
    $26 = HEAP32[9259] | 0;
    $tobool97 = ($26 | 0) == 0;
    if ($tobool97) {
      $yychar_3 = $yychar_2;
      $yytoken_2 = $cond;
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $27 = HEAP32[_stderr >> 2] | 0;
    $call99 = _fprintf($27 | 0, 97372, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 95352, tempInt) | 0) | 0;
    $28 = HEAP32[_stderr >> 2] | 0;
    _yy_symbol_print($28, $cond, $yylval);
    $29 = HEAP32[_stderr >> 2] | 0;
    $fputc = _fputc(10, $29 | 0) | 0;
    $yychar_3 = $yychar_2;
    $yytoken_2 = $cond;
    label = 28;
    break;
   case 28:
    $add104 = $yytoken_2 + $conv67 | 0;
    $30 = $add104 >>> 0 > 10895;
    if ($30) {
      $yychar_5 = $yychar_3;
      $yytoken_3 = $yytoken_2;
      label = 37;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $arrayidx110 = 37040 + ($add104 << 1) | 0;
    $31 = HEAP16[$arrayidx110 >> 1] | 0;
    $conv111 = $31 << 16 >> 16;
    $cmp112 = ($conv111 | 0) == ($yytoken_2 | 0);
    if ($cmp112) {
      label = 30;
      break;
    } else {
      $yychar_5 = $yychar_3;
      $yytoken_3 = $yytoken_2;
      label = 37;
      break;
    }
   case 30:
    $arrayidx116 = 1608 + ($add104 << 1) | 0;
    $32 = HEAP16[$arrayidx116 >> 1] | 0;
    $conv117 = $32 << 16 >> 16;
    $cmp118 = $32 << 16 >> 16 < 1;
    if ($cmp118) {
      label = 31;
      break;
    } else {
      label = 33;
      break;
    }
   case 31:
    if (($32 << 16 >> 16 | 0) == (-545 | 0) | ($32 << 16 >> 16 | 0) == 0) {
      $yychar_7 = $yychar_3;
      $yytoken_5 = $yytoken_2;
      label = 499;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $sub = -$conv117 | 0;
    $yychar_6 = $yychar_3;
    $yyn_0 = $sub;
    $yytoken_4 = $yytoken_2;
    label = 38;
    break;
   case 33:
    $cmp129 = $32 << 16 >> 16 == 3;
    if ($cmp129) {
      $yychar_12 = $yychar_3;
      $yyresult_0 = 0;
      $yyvsp_7 = $yyvsp_2;
      $yyssp_7 = $yyssp_2;
      $yyss_4 = $yyss_1;
      $yymsg_7 = $yymsg_1;
      $yytoken_9 = $yytoken_2;
      label = 523;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    $tobool133 = ($yyerrstatus_1 | 0) == 0;
    $dec = $yyerrstatus_1 - 1 | 0;
    $yyerrstatus_1_dec = $tobool133 ? 0 : $dec;
    $33 = HEAP32[9259] | 0;
    $tobool137 = ($33 | 0) == 0;
    if ($tobool137) {
      label = 36;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $34 = HEAP32[_stderr >> 2] | 0;
    $call139 = _fprintf($34 | 0, 97372, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 93400, tempInt) | 0) | 0;
    $35 = HEAP32[_stderr >> 2] | 0;
    _yy_symbol_print($35, $yytoken_2, $yylval);
    $36 = HEAP32[_stderr >> 2] | 0;
    $fputc1319 = _fputc(10, $36 | 0) | 0;
    label = 36;
    break;
   case 36:
    $cmp143 = ($yychar_3 | 0) == 0;
    $yychar_3_ = $cmp143 ? 0 : -2;
    $incdec_ptr147 = $yyvsp_2 + 4 | 0;
    $37 = HEAP32[$6 >> 2] | 0;
    $38 = $incdec_ptr147 | 0;
    HEAP32[$38 >> 2] = $37;
    $yychar_0 = $yychar_3_;
    $yystate_0 = $conv117;
    $yyvsp_0 = $incdec_ptr147;
    $yyssp_0 = $yyssp_2;
    $yymsg_alloc_0 = $yymsg_alloc_1;
    $yymsg_0 = $yymsg_1;
    $yytoken_0 = $yytoken_2;
    $yyerrstatus_0 = $yyerrstatus_1_dec;
    label = 5;
    break;
   case 37:
    $arrayidx148 = 35124 + ($yystate_1 << 1) | 0;
    $39 = HEAP16[$arrayidx148 >> 1] | 0;
    $conv149 = $39 & 65535;
    $cmp150 = $39 << 16 >> 16 == 0;
    if ($cmp150) {
      $yychar_7 = $yychar_5;
      $yytoken_5 = $yytoken_3;
      label = 499;
      break;
    } else {
      $yychar_6 = $yychar_5;
      $yyn_0 = $conv149;
      $yytoken_4 = $yytoken_3;
      label = 38;
      break;
    }
   case 38:
    $arrayidx154 = $yyn_0 + 29864 | 0;
    $40 = HEAP8[$arrayidx154] | 0;
    $conv155 = $40 & 255;
    $sub156 = 1 - $conv155 | 0;
    $41 = $yyvsp_2 + ($sub156 << 2) | 0;
    $42 = HEAP32[$41 >> 2] | 0;
    HEAP32[$4 >> 2] = $42;
    $43 = HEAP32[9259] | 0;
    $tobool159 = ($43 | 0) == 0;
    if ($tobool159) {
      label = 40;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    _yy_reduce_print($yyvsp_2, $yyn_0);
    label = 40;
    break;
   case 40:
    if (($yyn_0 | 0) == 2) {
      label = 41;
      break;
    } else if (($yyn_0 | 0) == 3) {
      label = 43;
      break;
    } else if (($yyn_0 | 0) == 4) {
      label = 44;
      break;
    } else if (($yyn_0 | 0) == 5) {
      label = 45;
      break;
    } else if (($yyn_0 | 0) == 6) {
      label = 46;
      break;
    } else if (($yyn_0 | 0) == 7) {
      label = 47;
      break;
    } else if (($yyn_0 | 0) == 8) {
      label = 48;
      break;
    } else if (($yyn_0 | 0) == 10) {
      label = 49;
      break;
    } else if (($yyn_0 | 0) == 11) {
      label = 50;
      break;
    } else if (($yyn_0 | 0) == 12) {
      label = 51;
      break;
    } else if (($yyn_0 | 0) == 13) {
      label = 60;
      break;
    } else if (($yyn_0 | 0) == 14) {
      label = 61;
      break;
    } else if (($yyn_0 | 0) == 15) {
      label = 62;
      break;
    } else if (($yyn_0 | 0) == 16) {
      label = 63;
      break;
    } else if (($yyn_0 | 0) == 17) {
      label = 64;
      break;
    } else if (($yyn_0 | 0) == 18) {
      label = 65;
      break;
    } else if (($yyn_0 | 0) == 19) {
      label = 66;
      break;
    } else if (($yyn_0 | 0) == 20) {
      label = 67;
      break;
    } else if (($yyn_0 | 0) == 21) {
      label = 68;
      break;
    } else if (($yyn_0 | 0) == 22) {
      label = 69;
      break;
    } else if (($yyn_0 | 0) == 23) {
      label = 70;
      break;
    } else if (($yyn_0 | 0) == 24) {
      label = 71;
      break;
    } else if (($yyn_0 | 0) == 25) {
      label = 72;
      break;
    } else if (($yyn_0 | 0) == 26) {
      label = 73;
      break;
    } else if (($yyn_0 | 0) == 28) {
      label = 74;
      break;
    } else if (($yyn_0 | 0) == 29) {
      label = 75;
      break;
    } else if (($yyn_0 | 0) == 30) {
      label = 76;
      break;
    } else if (($yyn_0 | 0) == 31) {
      label = 77;
      break;
    } else if (($yyn_0 | 0) == 32) {
      label = 78;
      break;
    } else if (($yyn_0 | 0) == 33) {
      label = 79;
      break;
    } else if (($yyn_0 | 0) == 34) {
      label = 80;
      break;
    } else if (($yyn_0 | 0) == 35) {
      label = 81;
      break;
    } else if (($yyn_0 | 0) == 36) {
      label = 82;
      break;
    } else if (($yyn_0 | 0) == 37) {
      label = 83;
      break;
    } else if (($yyn_0 | 0) == 38) {
      label = 84;
      break;
    } else if (($yyn_0 | 0) == 40) {
      label = 85;
      break;
    } else if (($yyn_0 | 0) == 41) {
      label = 86;
      break;
    } else if (($yyn_0 | 0) == 43) {
      label = 87;
      break;
    } else if (($yyn_0 | 0) == 44) {
      label = 88;
      break;
    } else if (($yyn_0 | 0) == 45) {
      label = 89;
      break;
    } else if (($yyn_0 | 0) == 46) {
      label = 90;
      break;
    } else if (($yyn_0 | 0) == 48) {
      label = 91;
      break;
    } else if (($yyn_0 | 0) == 53) {
      label = 94;
      break;
    } else if (($yyn_0 | 0) == 54) {
      label = 95;
      break;
    } else if (($yyn_0 | 0) == 55) {
      label = 96;
      break;
    } else if (($yyn_0 | 0) == 56) {
      label = 97;
      break;
    } else if (($yyn_0 | 0) == 57) {
      label = 98;
      break;
    } else if (($yyn_0 | 0) == 58) {
      label = 99;
      break;
    } else if (($yyn_0 | 0) == 59) {
      label = 100;
      break;
    } else if (($yyn_0 | 0) == 60) {
      label = 101;
      break;
    } else if (($yyn_0 | 0) == 61) {
      label = 102;
      break;
    } else if (($yyn_0 | 0) == 62) {
      label = 103;
      break;
    } else if (($yyn_0 | 0) == 63) {
      label = 104;
      break;
    } else if (($yyn_0 | 0) == 64) {
      label = 105;
      break;
    } else if (($yyn_0 | 0) == 65) {
      label = 106;
      break;
    } else if (($yyn_0 | 0) == 66) {
      label = 107;
      break;
    } else if (($yyn_0 | 0) == 67) {
      label = 108;
      break;
    } else if (($yyn_0 | 0) == 69) {
      label = 109;
      break;
    } else if (($yyn_0 | 0) == 70) {
      label = 110;
      break;
    } else if (($yyn_0 | 0) == 71) {
      label = 111;
      break;
    } else if (($yyn_0 | 0) == 72) {
      label = 112;
      break;
    } else if (($yyn_0 | 0) == 73) {
      label = 113;
      break;
    } else if (($yyn_0 | 0) == 74) {
      label = 114;
      break;
    } else if (($yyn_0 | 0) == 75) {
      label = 115;
      break;
    } else if (($yyn_0 | 0) == 76) {
      label = 116;
      break;
    } else if (($yyn_0 | 0) == 77) {
      label = 117;
      break;
    } else if (($yyn_0 | 0) == 78) {
      label = 118;
      break;
    } else if (($yyn_0 | 0) == 79) {
      label = 119;
      break;
    } else if (($yyn_0 | 0) == 81) {
      label = 120;
      break;
    } else if (($yyn_0 | 0) == 82) {
      label = 121;
      break;
    } else if (($yyn_0 | 0) == 83) {
      label = 122;
      break;
    } else if (($yyn_0 | 0) == 84) {
      label = 123;
      break;
    } else if (($yyn_0 | 0) == 85) {
      label = 124;
      break;
    } else if (($yyn_0 | 0) == 86) {
      label = 125;
      break;
    } else if (($yyn_0 | 0) == 87) {
      label = 126;
      break;
    } else if (($yyn_0 | 0) == 88) {
      label = 127;
      break;
    } else if (($yyn_0 | 0) == 89) {
      label = 128;
      break;
    } else if (($yyn_0 | 0) == 90) {
      label = 129;
      break;
    } else if (($yyn_0 | 0) == 91) {
      label = 130;
      break;
    } else if (($yyn_0 | 0) == 92) {
      label = 134;
      break;
    } else if (($yyn_0 | 0) == 93) {
      label = 138;
      break;
    } else if (($yyn_0 | 0) == 94) {
      label = 139;
      break;
    } else if (($yyn_0 | 0) == 95) {
      label = 140;
      break;
    } else if (($yyn_0 | 0) == 96) {
      label = 141;
      break;
    } else if (($yyn_0 | 0) == 97) {
      label = 142;
      break;
    } else if (($yyn_0 | 0) == 98) {
      label = 143;
      break;
    } else if (($yyn_0 | 0) == 99) {
      label = 144;
      break;
    } else if (($yyn_0 | 0) == 100) {
      label = 148;
      break;
    } else if (($yyn_0 | 0) == 101) {
      label = 152;
      break;
    } else if (($yyn_0 | 0) == 102) {
      label = 153;
      break;
    } else if (($yyn_0 | 0) == 104) {
      label = 154;
      break;
    } else if (($yyn_0 | 0) == 105) {
      label = 155;
      break;
    } else if (($yyn_0 | 0) == 106) {
      label = 156;
      break;
    } else if (($yyn_0 | 0) == 110) {
      label = 157;
      break;
    } else if (($yyn_0 | 0) == 111) {
      label = 158;
      break;
    } else if (($yyn_0 | 0) == 114) {
      label = 159;
      break;
    } else if (($yyn_0 | 0) == 115) {
      label = 160;
      break;
    } else if (($yyn_0 | 0) == 116) {
      label = 161;
      break;
    } else if (($yyn_0 | 0) == 117) {
      label = 162;
      break;
    } else if (($yyn_0 | 0) == 118) {
      label = 163;
      break;
    } else if (($yyn_0 | 0) == 119) {
      label = 164;
      break;
    } else if (($yyn_0 | 0) == 120) {
      label = 165;
      break;
    } else if (($yyn_0 | 0) == 121) {
      label = 166;
      break;
    } else if (($yyn_0 | 0) == 122) {
      label = 167;
      break;
    } else if (($yyn_0 | 0) == 123) {
      label = 168;
      break;
    } else if (($yyn_0 | 0) == 124) {
      label = 169;
      break;
    } else if (($yyn_0 | 0) == 125) {
      label = 170;
      break;
    } else if (($yyn_0 | 0) == 126) {
      label = 171;
      break;
    } else if (($yyn_0 | 0) == 127) {
      label = 172;
      break;
    } else if (($yyn_0 | 0) == 128) {
      label = 173;
      break;
    } else if (($yyn_0 | 0) == 129) {
      label = 174;
      break;
    } else if (($yyn_0 | 0) == 130) {
      label = 175;
      break;
    } else if (($yyn_0 | 0) == 131) {
      label = 176;
      break;
    } else if (($yyn_0 | 0) == 132) {
      label = 177;
      break;
    } else if (($yyn_0 | 0) == 133) {
      label = 178;
      break;
    } else if (($yyn_0 | 0) == 134) {
      label = 179;
      break;
    } else if (($yyn_0 | 0) == 135) {
      label = 180;
      break;
    } else if (($yyn_0 | 0) == 136) {
      label = 181;
      break;
    } else if (($yyn_0 | 0) == 137) {
      label = 182;
      break;
    } else if (($yyn_0 | 0) == 138) {
      label = 183;
      break;
    } else if (($yyn_0 | 0) == 139) {
      label = 184;
      break;
    } else if (($yyn_0 | 0) == 140) {
      label = 185;
      break;
    } else if (($yyn_0 | 0) == 141) {
      label = 186;
      break;
    } else if (($yyn_0 | 0) == 142) {
      label = 187;
      break;
    } else if (($yyn_0 | 0) == 143) {
      label = 188;
      break;
    } else if (($yyn_0 | 0) == 144) {
      label = 189;
      break;
    } else if (($yyn_0 | 0) == 145) {
      label = 190;
      break;
    } else if (($yyn_0 | 0) == 186) {
      label = 191;
      break;
    } else if (($yyn_0 | 0) == 187) {
      label = 192;
      break;
    } else if (($yyn_0 | 0) == 188) {
      label = 193;
      break;
    } else if (($yyn_0 | 0) == 189) {
      label = 194;
      break;
    } else if (($yyn_0 | 0) == 190) {
      label = 195;
      break;
    } else if (($yyn_0 | 0) == 191) {
      label = 196;
      break;
    } else if (($yyn_0 | 0) == 192) {
      label = 197;
      break;
    } else if (($yyn_0 | 0) == 193) {
      label = 198;
      break;
    } else if (($yyn_0 | 0) == 194) {
      label = 199;
      break;
    } else if (($yyn_0 | 0) == 195) {
      label = 200;
      break;
    } else if (($yyn_0 | 0) == 196) {
      label = 201;
      break;
    } else if (($yyn_0 | 0) == 197) {
      label = 202;
      break;
    } else if (($yyn_0 | 0) == 198) {
      label = 203;
      break;
    } else if (($yyn_0 | 0) == 199) {
      label = 204;
      break;
    } else if (($yyn_0 | 0) == 200) {
      label = 205;
      break;
    } else if (($yyn_0 | 0) == 201) {
      label = 206;
      break;
    } else if (($yyn_0 | 0) == 202) {
      label = 207;
      break;
    } else if (($yyn_0 | 0) == 203) {
      label = 208;
      break;
    } else if (($yyn_0 | 0) == 204) {
      label = 209;
      break;
    } else if (($yyn_0 | 0) == 205) {
      label = 210;
      break;
    } else if (($yyn_0 | 0) == 206) {
      label = 211;
      break;
    } else if (($yyn_0 | 0) == 207) {
      label = 212;
      break;
    } else if (($yyn_0 | 0) == 208) {
      label = 213;
      break;
    } else if (($yyn_0 | 0) == 209) {
      label = 214;
      break;
    } else if (($yyn_0 | 0) == 210) {
      label = 215;
      break;
    } else if (($yyn_0 | 0) == 211) {
      label = 216;
      break;
    } else if (($yyn_0 | 0) == 212) {
      label = 217;
      break;
    } else if (($yyn_0 | 0) == 213) {
      label = 218;
      break;
    } else if (($yyn_0 | 0) == 214) {
      label = 219;
      break;
    } else if (($yyn_0 | 0) == 215) {
      label = 220;
      break;
    } else if (($yyn_0 | 0) == 216) {
      label = 221;
      break;
    } else if (($yyn_0 | 0) == 217) {
      label = 222;
      break;
    } else if (($yyn_0 | 0) == 218) {
      label = 223;
      break;
    } else if (($yyn_0 | 0) == 219) {
      label = 224;
      break;
    } else if (($yyn_0 | 0) == 220) {
      label = 225;
      break;
    } else if (($yyn_0 | 0) == 221) {
      label = 226;
      break;
    } else if (($yyn_0 | 0) == 222) {
      label = 227;
      break;
    } else if (($yyn_0 | 0) == 223) {
      label = 228;
      break;
    } else if (($yyn_0 | 0) == 224) {
      label = 229;
      break;
    } else if (($yyn_0 | 0) == 225) {
      label = 230;
      break;
    } else if (($yyn_0 | 0) == 226) {
      label = 231;
      break;
    } else if (($yyn_0 | 0) == 227) {
      label = 232;
      break;
    } else if (($yyn_0 | 0) == 228) {
      label = 233;
      break;
    } else if (($yyn_0 | 0) == 229) {
      label = 234;
      break;
    } else if (($yyn_0 | 0) == 230) {
      label = 235;
      break;
    } else if (($yyn_0 | 0) == 232) {
      label = 237;
      break;
    } else if (($yyn_0 | 0) == 233) {
      label = 238;
      break;
    } else if (($yyn_0 | 0) == 234) {
      label = 239;
      break;
    } else if (($yyn_0 | 0) == 235) {
      label = 240;
      break;
    } else if (($yyn_0 | 0) == 240) {
      label = 241;
      break;
    } else if (($yyn_0 | 0) == 241) {
      label = 242;
      break;
    } else if (($yyn_0 | 0) == 242) {
      label = 243;
      break;
    } else if (($yyn_0 | 0) == 243) {
      label = 244;
      break;
    } else if (($yyn_0 | 0) == 244) {
      label = 245;
      break;
    } else if (($yyn_0 | 0) == 245) {
      label = 246;
      break;
    } else if (($yyn_0 | 0) == 246) {
      label = 247;
      break;
    } else if (($yyn_0 | 0) == 247) {
      label = 248;
      break;
    } else if (($yyn_0 | 0) == 248) {
      label = 249;
      break;
    } else if (($yyn_0 | 0) == 249) {
      label = 250;
      break;
    } else if (($yyn_0 | 0) == 250) {
      label = 251;
      break;
    } else if (($yyn_0 | 0) == 251) {
      label = 252;
      break;
    } else if (($yyn_0 | 0) == 252) {
      label = 253;
      break;
    } else if (($yyn_0 | 0) == 253) {
      label = 254;
      break;
    } else if (($yyn_0 | 0) == 254) {
      label = 255;
      break;
    } else if (($yyn_0 | 0) == 255) {
      label = 256;
      break;
    } else if (($yyn_0 | 0) == 256) {
      label = 257;
      break;
    } else if (($yyn_0 | 0) == 257) {
      label = 258;
      break;
    } else if (($yyn_0 | 0) == 258) {
      label = 259;
      break;
    } else if (($yyn_0 | 0) == 259) {
      label = 260;
      break;
    } else if (($yyn_0 | 0) == 267) {
      label = 261;
      break;
    } else if (($yyn_0 | 0) == 268) {
      label = 262;
      break;
    } else if (($yyn_0 | 0) == 269) {
      label = 263;
      break;
    } else if (($yyn_0 | 0) == 270) {
      label = 264;
      break;
    } else if (($yyn_0 | 0) == 271) {
      label = 265;
      break;
    } else if (($yyn_0 | 0) == 272) {
      label = 266;
      break;
    } else if (($yyn_0 | 0) == 273) {
      label = 267;
      break;
    } else if (($yyn_0 | 0) == 274) {
      label = 268;
      break;
    } else if (($yyn_0 | 0) == 275) {
      label = 269;
      break;
    } else if (($yyn_0 | 0) == 276) {
      label = 270;
      break;
    } else if (($yyn_0 | 0) == 277) {
      label = 271;
      break;
    } else if (($yyn_0 | 0) == 278) {
      label = 272;
      break;
    } else if (($yyn_0 | 0) == 279) {
      label = 273;
      break;
    } else if (($yyn_0 | 0) == 280) {
      label = 274;
      break;
    } else if (($yyn_0 | 0) == 281) {
      label = 275;
      break;
    } else if (($yyn_0 | 0) == 282) {
      label = 276;
      break;
    } else if (($yyn_0 | 0) == 283) {
      label = 277;
      break;
    } else if (($yyn_0 | 0) == 284) {
      label = 278;
      break;
    } else if (($yyn_0 | 0) == 285) {
      label = 279;
      break;
    } else if (($yyn_0 | 0) == 287) {
      label = 280;
      break;
    } else if (($yyn_0 | 0) == 288) {
      label = 281;
      break;
    } else if (($yyn_0 | 0) == 289) {
      label = 282;
      break;
    } else if (($yyn_0 | 0) == 290) {
      label = 283;
      break;
    } else if (($yyn_0 | 0) == 291) {
      label = 284;
      break;
    } else if (($yyn_0 | 0) == 292) {
      label = 285;
      break;
    } else if (($yyn_0 | 0) == 293) {
      label = 286;
      break;
    } else if (($yyn_0 | 0) == 294) {
      label = 287;
      break;
    } else if (($yyn_0 | 0) == 295) {
      label = 288;
      break;
    } else if (($yyn_0 | 0) == 296) {
      label = 289;
      break;
    } else if (($yyn_0 | 0) == 297) {
      label = 290;
      break;
    } else if (($yyn_0 | 0) == 298) {
      label = 291;
      break;
    } else if (($yyn_0 | 0) == 299) {
      label = 292;
      break;
    } else if (($yyn_0 | 0) == 300) {
      label = 293;
      break;
    } else if (($yyn_0 | 0) == 301) {
      label = 294;
      break;
    } else if (($yyn_0 | 0) == 302) {
      label = 295;
      break;
    } else if (($yyn_0 | 0) == 303) {
      label = 296;
      break;
    } else if (($yyn_0 | 0) == 304) {
      label = 300;
      break;
    } else if (($yyn_0 | 0) == 305) {
      label = 301;
      break;
    } else if (($yyn_0 | 0) == 306) {
      label = 302;
      break;
    } else if (($yyn_0 | 0) == 307) {
      label = 303;
      break;
    } else if (($yyn_0 | 0) == 308) {
      label = 304;
      break;
    } else if (($yyn_0 | 0) == 309) {
      label = 308;
      break;
    } else if (($yyn_0 | 0) == 310) {
      label = 309;
      break;
    } else if (($yyn_0 | 0) == 311) {
      label = 310;
      break;
    } else if (($yyn_0 | 0) == 312) {
      label = 311;
      break;
    } else if (($yyn_0 | 0) == 313) {
      label = 312;
      break;
    } else if (($yyn_0 | 0) == 314) {
      label = 313;
      break;
    } else if (($yyn_0 | 0) == 315) {
      label = 314;
      break;
    } else if (($yyn_0 | 0) == 316) {
      label = 315;
      break;
    } else if (($yyn_0 | 0) == 317) {
      label = 316;
      break;
    } else if (($yyn_0 | 0) == 318) {
      label = 317;
      break;
    } else if (($yyn_0 | 0) == 319) {
      label = 318;
      break;
    } else if (($yyn_0 | 0) == 326) {
      label = 320;
      break;
    } else if (($yyn_0 | 0) == 328) {
      label = 321;
      break;
    } else if (($yyn_0 | 0) == 329) {
      label = 322;
      break;
    } else if (($yyn_0 | 0) == 331) {
      label = 323;
      break;
    } else if (($yyn_0 | 0) == 332) {
      label = 324;
      break;
    } else if (($yyn_0 | 0) == 333) {
      label = 325;
      break;
    } else if (($yyn_0 | 0) == 334) {
      label = 326;
      break;
    } else if (($yyn_0 | 0) == 335) {
      label = 327;
      break;
    } else if (($yyn_0 | 0) == 336) {
      label = 328;
      break;
    } else if (($yyn_0 | 0) == 337) {
      label = 329;
      break;
    } else if (($yyn_0 | 0) == 338) {
      label = 330;
      break;
    } else if (($yyn_0 | 0) == 339) {
      label = 331;
      break;
    } else if (($yyn_0 | 0) == 340) {
      label = 332;
      break;
    } else if (($yyn_0 | 0) == 341) {
      label = 333;
      break;
    } else if (($yyn_0 | 0) == 342) {
      label = 334;
      break;
    } else if (($yyn_0 | 0) == 343) {
      label = 335;
      break;
    } else if (($yyn_0 | 0) == 344) {
      label = 336;
      break;
    } else if (($yyn_0 | 0) == 345) {
      label = 337;
      break;
    } else if (($yyn_0 | 0) == 346) {
      label = 338;
      break;
    } else if (($yyn_0 | 0) == 347) {
      label = 339;
      break;
    } else if (($yyn_0 | 0) == 348) {
      label = 340;
      break;
    } else if (($yyn_0 | 0) == 349) {
      label = 341;
      break;
    } else if (($yyn_0 | 0) == 350) {
      label = 342;
      break;
    } else if (($yyn_0 | 0) == 351) {
      label = 343;
      break;
    } else if (($yyn_0 | 0) == 352) {
      label = 344;
      break;
    } else if (($yyn_0 | 0) == 353) {
      label = 345;
      break;
    } else if (($yyn_0 | 0) == 354) {
      label = 346;
      break;
    } else if (($yyn_0 | 0) == 355) {
      label = 347;
      break;
    } else if (($yyn_0 | 0) == 356) {
      label = 348;
      break;
    } else if (($yyn_0 | 0) == 357) {
      label = 349;
      break;
    } else if (($yyn_0 | 0) == 358) {
      label = 350;
      break;
    } else if (($yyn_0 | 0) == 360) {
      label = 351;
      break;
    } else if (($yyn_0 | 0) == 361) {
      label = 352;
      break;
    } else if (($yyn_0 | 0) == 362) {
      label = 353;
      break;
    } else if (($yyn_0 | 0) == 363) {
      label = 354;
      break;
    } else if (($yyn_0 | 0) == 364) {
      label = 355;
      break;
    } else if (($yyn_0 | 0) == 365) {
      label = 356;
      break;
    } else if (($yyn_0 | 0) == 368) {
      label = 357;
      break;
    } else if (($yyn_0 | 0) == 370) {
      label = 358;
      break;
    } else if (($yyn_0 | 0) == 371) {
      label = 359;
      break;
    } else if (($yyn_0 | 0) == 372) {
      label = 360;
      break;
    } else if (($yyn_0 | 0) == 373) {
      label = 361;
      break;
    } else if (($yyn_0 | 0) == 374) {
      label = 362;
      break;
    } else if (($yyn_0 | 0) == 375) {
      label = 363;
      break;
    } else if (($yyn_0 | 0) == 376) {
      label = 364;
      break;
    } else if (($yyn_0 | 0) == 377) {
      label = 368;
      break;
    } else if (($yyn_0 | 0) == 378) {
      label = 369;
      break;
    } else if (($yyn_0 | 0) == 379) {
      label = 370;
      break;
    } else if (($yyn_0 | 0) == 380) {
      label = 371;
      break;
    } else if (($yyn_0 | 0) == 381) {
      label = 372;
      break;
    } else if (($yyn_0 | 0) == 382) {
      label = 373;
      break;
    } else if (($yyn_0 | 0) == 383) {
      label = 374;
      break;
    } else if (($yyn_0 | 0) == 384) {
      label = 375;
      break;
    } else if (($yyn_0 | 0) == 385) {
      label = 376;
      break;
    } else if (($yyn_0 | 0) == 386) {
      label = 377;
      break;
    } else if (($yyn_0 | 0) == 387) {
      label = 378;
      break;
    } else if (($yyn_0 | 0) == 388) {
      label = 379;
      break;
    } else if (($yyn_0 | 0) == 389) {
      label = 380;
      break;
    } else if (($yyn_0 | 0) == 390) {
      label = 381;
      break;
    } else if (($yyn_0 | 0) == 391) {
      label = 382;
      break;
    } else if (($yyn_0 | 0) == 392) {
      label = 383;
      break;
    } else if (($yyn_0 | 0) == 393) {
      label = 384;
      break;
    } else if (($yyn_0 | 0) == 394) {
      label = 385;
      break;
    } else if (($yyn_0 | 0) == 396) {
      label = 388;
      break;
    } else if (($yyn_0 | 0) == 398) {
      label = 390;
      break;
    } else if (($yyn_0 | 0) == 401) {
      label = 391;
      break;
    } else if (($yyn_0 | 0) == 403) {
      label = 392;
      break;
    } else if (($yyn_0 | 0) == 411) {
      label = 393;
      break;
    } else if (($yyn_0 | 0) == 412) {
      label = 394;
      break;
    } else if (($yyn_0 | 0) == 414) {
      label = 395;
      break;
    } else if (($yyn_0 | 0) == 415) {
      label = 396;
      break;
    } else if (($yyn_0 | 0) == 416) {
      label = 397;
      break;
    } else if (($yyn_0 | 0) == 417) {
      label = 398;
      break;
    } else if (($yyn_0 | 0) == 418) {
      label = 399;
      break;
    } else if (($yyn_0 | 0) == 419) {
      label = 400;
      break;
    } else if (($yyn_0 | 0) == 420) {
      label = 401;
      break;
    } else if (($yyn_0 | 0) == 421) {
      label = 402;
      break;
    } else if (($yyn_0 | 0) == 422) {
      label = 403;
      break;
    } else if (($yyn_0 | 0) == 428) {
      label = 404;
      break;
    } else if (($yyn_0 | 0) == 429) {
      label = 405;
      break;
    } else if (($yyn_0 | 0) == 430) {
      label = 406;
      break;
    } else if (($yyn_0 | 0) == 431) {
      label = 407;
      break;
    } else if (($yyn_0 | 0) == 432) {
      label = 408;
      break;
    } else if (($yyn_0 | 0) == 433) {
      label = 409;
      break;
    } else if (($yyn_0 | 0) == 434) {
      label = 410;
      break;
    } else if (($yyn_0 | 0) == 439) {
      label = 411;
      break;
    } else if (($yyn_0 | 0) == 440) {
      label = 412;
      break;
    } else if (($yyn_0 | 0) == 441) {
      label = 413;
      break;
    } else if (($yyn_0 | 0) == 442) {
      label = 414;
      break;
    } else if (($yyn_0 | 0) == 445) {
      label = 415;
      break;
    } else if (($yyn_0 | 0) == 446) {
      label = 416;
      break;
    } else if (($yyn_0 | 0) == 447) {
      label = 417;
      break;
    } else if (($yyn_0 | 0) == 448) {
      label = 418;
      break;
    } else if (($yyn_0 | 0) == 449) {
      label = 419;
      break;
    } else if (($yyn_0 | 0) == 450) {
      label = 420;
      break;
    } else if (($yyn_0 | 0) == 451) {
      label = 421;
      break;
    } else if (($yyn_0 | 0) == 452) {
      label = 422;
      break;
    } else if (($yyn_0 | 0) == 453) {
      label = 423;
      break;
    } else if (($yyn_0 | 0) == 454) {
      label = 424;
      break;
    } else if (($yyn_0 | 0) == 455) {
      label = 425;
      break;
    } else if (($yyn_0 | 0) == 456) {
      label = 426;
      break;
    } else if (($yyn_0 | 0) == 457) {
      label = 427;
      break;
    } else if (($yyn_0 | 0) == 458) {
      label = 428;
      break;
    } else if (($yyn_0 | 0) == 459) {
      label = 431;
      break;
    } else if (($yyn_0 | 0) == 462) {
      label = 432;
      break;
    } else if (($yyn_0 | 0) == 463) {
      label = 433;
      break;
    } else if (($yyn_0 | 0) == 464) {
      label = 434;
      break;
    } else if (($yyn_0 | 0) == 465) {
      label = 435;
      break;
    } else if (($yyn_0 | 0) == 466) {
      label = 436;
      break;
    } else if (($yyn_0 | 0) == 467) {
      label = 437;
      break;
    } else if (($yyn_0 | 0) == 468) {
      label = 438;
      break;
    } else if (($yyn_0 | 0) == 469) {
      label = 439;
      break;
    } else if (($yyn_0 | 0) == 470) {
      label = 440;
      break;
    } else if (($yyn_0 | 0) == 471) {
      label = 441;
      break;
    } else if (($yyn_0 | 0) == 472) {
      label = 442;
      break;
    } else if (($yyn_0 | 0) == 473) {
      label = 443;
      break;
    } else if (($yyn_0 | 0) == 474) {
      label = 444;
      break;
    } else if (($yyn_0 | 0) == 475) {
      label = 445;
      break;
    } else if (($yyn_0 | 0) == 476) {
      label = 446;
      break;
    } else if (($yyn_0 | 0) == 477) {
      label = 447;
      break;
    } else if (($yyn_0 | 0) == 478) {
      label = 448;
      break;
    } else if (($yyn_0 | 0) == 479) {
      label = 449;
      break;
    } else if (($yyn_0 | 0) == 480) {
      label = 450;
      break;
    } else if (($yyn_0 | 0) == 481) {
      label = 451;
      break;
    } else if (($yyn_0 | 0) == 482) {
      label = 452;
      break;
    } else if (($yyn_0 | 0) == 483) {
      label = 453;
      break;
    } else if (($yyn_0 | 0) == 484) {
      label = 454;
      break;
    } else if (($yyn_0 | 0) == 485) {
      label = 455;
      break;
    } else if (($yyn_0 | 0) == 486) {
      label = 456;
      break;
    } else if (($yyn_0 | 0) == 487) {
      label = 457;
      break;
    } else if (($yyn_0 | 0) == 488) {
      label = 458;
      break;
    } else if (($yyn_0 | 0) == 489) {
      label = 459;
      break;
    } else if (($yyn_0 | 0) == 490) {
      label = 460;
      break;
    } else if (($yyn_0 | 0) == 491) {
      label = 461;
      break;
    } else if (($yyn_0 | 0) == 492) {
      label = 462;
      break;
    } else if (($yyn_0 | 0) == 493) {
      label = 463;
      break;
    } else if (($yyn_0 | 0) == 494) {
      label = 464;
      break;
    } else if (($yyn_0 | 0) == 495) {
      label = 465;
      break;
    } else if (($yyn_0 | 0) == 496) {
      label = 466;
      break;
    } else if (($yyn_0 | 0) == 497) {
      label = 467;
      break;
    } else if (($yyn_0 | 0) == 498) {
      label = 468;
      break;
    } else if (($yyn_0 | 0) == 501) {
      label = 469;
      break;
    } else if (($yyn_0 | 0) == 502) {
      label = 470;
      break;
    } else if (($yyn_0 | 0) == 505) {
      label = 471;
      break;
    } else if (($yyn_0 | 0) == 506) {
      label = 472;
      break;
    } else if (($yyn_0 | 0) == 507) {
      label = 473;
      break;
    } else if (($yyn_0 | 0) == 508) {
      label = 474;
      break;
    } else if (($yyn_0 | 0) == 509) {
      label = 476;
      break;
    } else if (($yyn_0 | 0) == 510) {
      label = 477;
      break;
    } else if (($yyn_0 | 0) == 512) {
      label = 482;
      break;
    } else if (($yyn_0 | 0) == 513) {
      label = 483;
      break;
    } else if (($yyn_0 | 0) == 514) {
      label = 484;
      break;
    } else if (($yyn_0 | 0) == 515) {
      label = 485;
      break;
    } else if (($yyn_0 | 0) == 516) {
      label = 486;
      break;
    } else if (($yyn_0 | 0) == 538) {
      label = 487;
      break;
    } else if (($yyn_0 | 0) == 540) {
      label = 488;
      break;
    } else if (($yyn_0 | 0) == 543) {
      label = 489;
      break;
    } else if (($yyn_0 | 0) == 544) {
      label = 490;
      break;
    } else {
      $yyerrstatus_3 = $yyerrstatus_1;
      label = 491;
      break;
    }
   case 41:
    HEAP32[$lstate >> 2] = 0;
    $44 = HEAP32[$locals >> 2] | 0;
    $tobool163 = ($44 | 0) == 0;
    if ($tobool163) {
      label = 42;
      break;
    } else {
      $yyerrstatus_3 = $yyerrstatus_1;
      label = 491;
      break;
    }
   case 42:
    $call165 = _cons_gen($p, 0, 0) | 0;
    HEAP32[$locals >> 2] = $call165;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 43:
    $nd = $yyvsp_2 | 0;
    $45 = HEAP32[$nd >> 2] | 0;
    $call170 = _new_scope($p, $45) | 0;
    HEAP32[$tree >> 2] = $call170;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 44:
    $nd173 = $yyvsp_2 - 4 | 0;
    $46 = HEAP32[$nd173 >> 2] | 0;
    HEAP32[$4 >> 2] = $46;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 45:
    $call176 = _new_begin($p, 0) | 0;
    HEAP32[$4 >> 2] = $call176;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 46:
    $nd180 = $yyvsp_2 | 0;
    $47 = HEAP32[$nd180 >> 2] | 0;
    $call181 = _new_begin($p, $47) | 0;
    HEAP32[$4 >> 2] = $call181;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 47:
    $nd185 = $yyvsp_2 - 8 | 0;
    $48 = HEAP32[$nd185 >> 2] | 0;
    $nd187 = $yyvsp_2 | 0;
    $49 = HEAP32[$nd187 >> 2] | 0;
    $call188 = _list1_gen($p, $49) | 0;
    $call189 = _append_gen($48, $call188) | 0;
    HEAP32[$4 >> 2] = $call189;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 48:
    $call192 = _new_begin($p, 0) | 0;
    HEAP32[$4 >> 2] = $call192;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 49:
    $call195 = _local_switch($p) | 0;
    HEAP32[$4 >> 2] = $call195;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 50:
    _yyerror($p, 92712);
    $nd199 = $yyvsp_2 - 12 | 0;
    $50 = HEAP32[$nd199 >> 2] | 0;
    _local_resume($p, $50);
    HEAP32[$4 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 51:
    $nd203 = $yyvsp_2 - 8 | 0;
    $51 = HEAP32[$nd203 >> 2] | 0;
    $tobool204 = ($51 | 0) == 0;
    if ($tobool204) {
      label = 53;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    $nd207 = $yyvsp_2 - 12 | 0;
    $52 = HEAP32[$nd207 >> 2] | 0;
    $nd211 = $yyvsp_2 - 4 | 0;
    $53 = HEAP32[$nd211 >> 2] | 0;
    $call212 = _new_rescue($p, $52, $51, $53) | 0;
    HEAP32[$4 >> 2] = $call212;
    label = 56;
    break;
   case 53:
    $nd216 = $yyvsp_2 - 4 | 0;
    $54 = HEAP32[$nd216 >> 2] | 0;
    $tobool217 = ($54 | 0) == 0;
    if ($tobool217) {
      label = 55;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    _yywarn($p, 111348);
    $nd220 = $yyvsp_2 - 12 | 0;
    $55 = HEAP32[$nd220 >> 2] | 0;
    $56 = HEAP32[$nd216 >> 2] | 0;
    $call223 = _list1_gen($p, $56) | 0;
    $call224 = _append_gen($55, $call223) | 0;
    HEAP32[$4 >> 2] = $call224;
    label = 56;
    break;
   case 55:
    $nd228 = $yyvsp_2 - 12 | 0;
    $57 = HEAP32[$nd228 >> 2] | 0;
    HEAP32[$4 >> 2] = $57;
    label = 56;
    break;
   case 56:
    $nd233 = $yyvsp_2 | 0;
    $58 = HEAP32[$nd233 >> 2] | 0;
    $tobool234 = ($58 | 0) == 0;
    if ($tobool234) {
      $yyerrstatus_3 = $yyerrstatus_1;
      label = 491;
      break;
    } else {
      label = 57;
      break;
    }
   case 57:
    $59 = HEAP32[$4 >> 2] | 0;
    $tobool237 = ($59 | 0) == 0;
    if ($tobool237) {
      label = 59;
      break;
    } else {
      label = 58;
      break;
    }
   case 58:
    $call242 = _new_ensure($p, $59, $58) | 0;
    HEAP32[$4 >> 2] = $call242;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 59:
    $call247 = _new_nil($p) | 0;
    $call248 = _list1_gen($p, $call247) | 0;
    $call249 = _append_gen($58, $call248) | 0;
    HEAP32[$4 >> 2] = $call249;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 60:
    $nd255 = $yyvsp_2 - 4 | 0;
    $60 = HEAP32[$nd255 >> 2] | 0;
    HEAP32[$4 >> 2] = $60;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 61:
    $call258 = _new_begin($p, 0) | 0;
    HEAP32[$4 >> 2] = $call258;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 62:
    $nd262 = $yyvsp_2 | 0;
    $61 = HEAP32[$nd262 >> 2] | 0;
    $call263 = _new_begin($p, $61) | 0;
    HEAP32[$4 >> 2] = $call263;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 63:
    $nd267 = $yyvsp_2 - 8 | 0;
    $62 = HEAP32[$nd267 >> 2] | 0;
    $nd269 = $yyvsp_2 | 0;
    $63 = HEAP32[$nd269 >> 2] | 0;
    $call270 = _list1_gen($p, $63) | 0;
    $call271 = _append_gen($62, $call270) | 0;
    HEAP32[$4 >> 2] = $call271;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 64:
    $nd275 = $yyvsp_2 | 0;
    $64 = HEAP32[$nd275 >> 2] | 0;
    $call276 = _new_begin($p, $64) | 0;
    HEAP32[$4 >> 2] = $call276;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 65:
    HEAP32[$lstate279 >> 2] = 7;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 66:
    $arrayidx281 = $yyvsp_2 - 8 | 0;
    $id = $arrayidx281;
    $65 = HEAP16[$id >> 1] | 0;
    $id283 = $yyvsp_2;
    $66 = HEAP16[$id283 >> 1] | 0;
    $call284 = _new_alias($p, $65, $66) | 0;
    HEAP32[$4 >> 2] = $call284;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 67:
    $nd288 = $yyvsp_2 | 0;
    $67 = HEAP32[$nd288 >> 2] | 0;
    HEAP32[$4 >> 2] = $67;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 68:
    $nd292 = $yyvsp_2 | 0;
    $68 = HEAP32[$nd292 >> 2] | 0;
    $call293 = _cond($68) | 0;
    $nd295 = $yyvsp_2 - 8 | 0;
    $69 = HEAP32[$nd295 >> 2] | 0;
    $call296 = _new_if($p, $call293, $69, 0) | 0;
    HEAP32[$4 >> 2] = $call296;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 69:
    $nd300 = $yyvsp_2 | 0;
    $70 = HEAP32[$nd300 >> 2] | 0;
    $call301 = _cond($70) | 0;
    $nd303 = $yyvsp_2 - 8 | 0;
    $71 = HEAP32[$nd303 >> 2] | 0;
    $call304 = _new_unless($p, $call301, $71, 0) | 0;
    HEAP32[$4 >> 2] = $call304;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 70:
    $nd308 = $yyvsp_2 | 0;
    $72 = HEAP32[$nd308 >> 2] | 0;
    $call309 = _cond($72) | 0;
    $nd311 = $yyvsp_2 - 8 | 0;
    $73 = HEAP32[$nd311 >> 2] | 0;
    $call312 = _new_while($p, $call309, $73) | 0;
    HEAP32[$4 >> 2] = $call312;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 71:
    $nd316 = $yyvsp_2 | 0;
    $74 = HEAP32[$nd316 >> 2] | 0;
    $call317 = _cond($74) | 0;
    $nd319 = $yyvsp_2 - 8 | 0;
    $75 = HEAP32[$nd319 >> 2] | 0;
    $call320 = _new_until($p, $call317, $75) | 0;
    HEAP32[$4 >> 2] = $call320;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 72:
    $nd324 = $yyvsp_2 - 8 | 0;
    $76 = HEAP32[$nd324 >> 2] | 0;
    $nd326 = $yyvsp_2 | 0;
    $77 = HEAP32[$nd326 >> 2] | 0;
    $call327 = _list3_gen($p, 0, 0, $77) | 0;
    $call328 = _list1_gen($p, $call327) | 0;
    $call329 = _new_rescue($p, $76, $call328, 0) | 0;
    HEAP32[$4 >> 2] = $call329;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 73:
    _yyerror($p, 110864);
    $nd333 = $yyvsp_2 - 4 | 0;
    $78 = HEAP32[$nd333 >> 2] | 0;
    $call334 = _new_postexe($p, $78) | 0;
    HEAP32[$4 >> 2] = $call334;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 74:
    $nd338 = $yyvsp_2 - 8 | 0;
    $79 = HEAP32[$nd338 >> 2] | 0;
    $nd340 = $yyvsp_2 | 0;
    $80 = HEAP32[$nd340 >> 2] | 0;
    $call341 = _new_masgn($p, $79, $80) | 0;
    HEAP32[$4 >> 2] = $call341;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 75:
    $nd345 = $yyvsp_2 - 8 | 0;
    $81 = HEAP32[$nd345 >> 2] | 0;
    $arrayidx346 = $yyvsp_2 - 4 | 0;
    $id347 = $arrayidx346;
    $82 = HEAP16[$id347 >> 1] | 0;
    $nd349 = $yyvsp_2 | 0;
    $83 = HEAP32[$nd349 >> 2] | 0;
    $call350 = _new_op_asgn($p, $81, $82, $83) | 0;
    HEAP32[$4 >> 2] = $call350;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 76:
    $nd354 = $yyvsp_2 - 20 | 0;
    $84 = HEAP32[$nd354 >> 2] | 0;
    $call355 = _intern_gen2($p, 110068, 2) | 0;
    $nd357 = $yyvsp_2 - 12 | 0;
    $85 = HEAP32[$nd357 >> 2] | 0;
    $call358 = _new_call($p, $84, $call355, $85) | 0;
    $arrayidx359 = $yyvsp_2 - 4 | 0;
    $id360 = $arrayidx359;
    $86 = HEAP16[$id360 >> 1] | 0;
    $nd362 = $yyvsp_2 | 0;
    $87 = HEAP32[$nd362 >> 2] | 0;
    $call363 = _new_op_asgn($p, $call358, $86, $87) | 0;
    HEAP32[$4 >> 2] = $call363;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 77:
    $nd367 = $yyvsp_2 - 16 | 0;
    $88 = HEAP32[$nd367 >> 2] | 0;
    $arrayidx368 = $yyvsp_2 - 8 | 0;
    $id369 = $arrayidx368;
    $89 = HEAP16[$id369 >> 1] | 0;
    $call370 = _new_call($p, $88, $89, 0) | 0;
    $arrayidx371 = $yyvsp_2 - 4 | 0;
    $id372 = $arrayidx371;
    $90 = HEAP16[$id372 >> 1] | 0;
    $nd374 = $yyvsp_2 | 0;
    $91 = HEAP32[$nd374 >> 2] | 0;
    $call375 = _new_op_asgn($p, $call370, $90, $91) | 0;
    HEAP32[$4 >> 2] = $call375;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 78:
    $nd379 = $yyvsp_2 - 16 | 0;
    $92 = HEAP32[$nd379 >> 2] | 0;
    $arrayidx380 = $yyvsp_2 - 8 | 0;
    $id381 = $arrayidx380;
    $93 = HEAP16[$id381 >> 1] | 0;
    $call382 = _new_call($p, $92, $93, 0) | 0;
    $arrayidx383 = $yyvsp_2 - 4 | 0;
    $id384 = $arrayidx383;
    $94 = HEAP16[$id384 >> 1] | 0;
    $nd386 = $yyvsp_2 | 0;
    $95 = HEAP32[$nd386 >> 2] | 0;
    $call387 = _new_op_asgn($p, $call382, $94, $95) | 0;
    HEAP32[$4 >> 2] = $call387;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 79:
    _yyerror($p, 109596);
    HEAP32[$4 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 80:
    $nd393 = $yyvsp_2 - 16 | 0;
    $96 = HEAP32[$nd393 >> 2] | 0;
    $arrayidx394 = $yyvsp_2 - 8 | 0;
    $id395 = $arrayidx394;
    $97 = HEAP16[$id395 >> 1] | 0;
    $call396 = _new_call($p, $96, $97, 0) | 0;
    $arrayidx397 = $yyvsp_2 - 4 | 0;
    $id398 = $arrayidx397;
    $98 = HEAP16[$id398 >> 1] | 0;
    $nd400 = $yyvsp_2 | 0;
    $99 = HEAP32[$nd400 >> 2] | 0;
    $call401 = _new_op_asgn($p, $call396, $98, $99) | 0;
    HEAP32[$4 >> 2] = $call401;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 81:
    $nd405 = $yyvsp_2 - 8 | 0;
    $100 = HEAP32[$nd405 >> 2] | 0;
    _backref_error($p, $100);
    $call406 = _new_begin($p, 0) | 0;
    HEAP32[$4 >> 2] = $call406;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 82:
    $nd410 = $yyvsp_2 - 8 | 0;
    $101 = HEAP32[$nd410 >> 2] | 0;
    $nd412 = $yyvsp_2 | 0;
    $102 = HEAP32[$nd412 >> 2] | 0;
    $call413 = _new_array($p, $102) | 0;
    $call414 = _new_asgn($p, $101, $call413) | 0;
    HEAP32[$4 >> 2] = $call414;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 83:
    $nd418 = $yyvsp_2 - 8 | 0;
    $103 = HEAP32[$nd418 >> 2] | 0;
    $nd420 = $yyvsp_2 | 0;
    $104 = HEAP32[$nd420 >> 2] | 0;
    $call421 = _new_masgn($p, $103, $104) | 0;
    HEAP32[$4 >> 2] = $call421;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 84:
    $nd425 = $yyvsp_2 - 8 | 0;
    $105 = HEAP32[$nd425 >> 2] | 0;
    $nd427 = $yyvsp_2 | 0;
    $106 = HEAP32[$nd427 >> 2] | 0;
    $call428 = _new_array($p, $106) | 0;
    $call429 = _new_masgn($p, $105, $call428) | 0;
    HEAP32[$4 >> 2] = $call429;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 85:
    $nd433 = $yyvsp_2 - 8 | 0;
    $107 = HEAP32[$nd433 >> 2] | 0;
    $nd435 = $yyvsp_2 | 0;
    $108 = HEAP32[$nd435 >> 2] | 0;
    $call436 = _new_asgn($p, $107, $108) | 0;
    HEAP32[$4 >> 2] = $call436;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 86:
    $nd440 = $yyvsp_2 - 8 | 0;
    $109 = HEAP32[$nd440 >> 2] | 0;
    $nd442 = $yyvsp_2 | 0;
    $110 = HEAP32[$nd442 >> 2] | 0;
    $call443 = _new_asgn($p, $109, $110) | 0;
    HEAP32[$4 >> 2] = $call443;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 87:
    $nd447 = $yyvsp_2 - 8 | 0;
    $111 = HEAP32[$nd447 >> 2] | 0;
    $nd449 = $yyvsp_2 | 0;
    $112 = HEAP32[$nd449 >> 2] | 0;
    $call450 = _new_and($p, $111, $112) | 0;
    HEAP32[$4 >> 2] = $call450;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 88:
    $nd454 = $yyvsp_2 - 8 | 0;
    $113 = HEAP32[$nd454 >> 2] | 0;
    $nd456 = $yyvsp_2 | 0;
    $114 = HEAP32[$nd456 >> 2] | 0;
    $call457 = _new_or($p, $113, $114) | 0;
    HEAP32[$4 >> 2] = $call457;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 89:
    $nd461 = $yyvsp_2 | 0;
    $115 = HEAP32[$nd461 >> 2] | 0;
    $call462 = _cond($115) | 0;
    $call463 = _call_uni_op($p, $call462, 109144) | 0;
    HEAP32[$4 >> 2] = $call463;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 90:
    $nd467 = $yyvsp_2 | 0;
    $116 = HEAP32[$nd467 >> 2] | 0;
    $call468 = _cond($116) | 0;
    $call469 = _call_uni_op($p, $call468, 109144) | 0;
    HEAP32[$4 >> 2] = $call469;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 91:
    $nd473 = $yyvsp_2 | 0;
    $117 = HEAP32[$nd473 >> 2] | 0;
    $tobool474 = ($117 | 0) == 0;
    if ($tobool474) {
      label = 92;
      break;
    } else {
      label = 93;
      break;
    }
   case 92:
    $call476 = _new_nil($p) | 0;
    HEAP32[$4 >> 2] = $call476;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 93:
    HEAP32[$4 >> 2] = $117;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 94:
    _local_nest($p);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 95:
    $nd486 = $yyvsp_2 - 8 | 0;
    $118 = HEAP32[$nd486 >> 2] | 0;
    $nd488 = $yyvsp_2 - 4 | 0;
    $119 = HEAP32[$nd488 >> 2] | 0;
    $call489 = _new_block($p, $118, $119) | 0;
    HEAP32[$4 >> 2] = $call489;
    _local_unnest($p);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 96:
    $arrayidx492 = $yyvsp_2 - 4 | 0;
    $id493 = $arrayidx492;
    $120 = HEAP16[$id493 >> 1] | 0;
    $nd495 = $yyvsp_2 | 0;
    $121 = HEAP32[$nd495 >> 2] | 0;
    $call496 = _new_fcall($p, $120, $121) | 0;
    HEAP32[$4 >> 2] = $call496;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 97:
    $nd500 = $yyvsp_2 - 4 | 0;
    $122 = HEAP32[$nd500 >> 2] | 0;
    $nd502 = $yyvsp_2 | 0;
    $123 = HEAP32[$nd502 >> 2] | 0;
    _args_with_block($p, $122, $123);
    $arrayidx503 = $yyvsp_2 - 8 | 0;
    $id504 = $arrayidx503;
    $124 = HEAP16[$id504 >> 1] | 0;
    $125 = HEAP32[$nd500 >> 2] | 0;
    $call507 = _new_fcall($p, $124, $125) | 0;
    HEAP32[$4 >> 2] = $call507;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 98:
    $nd511 = $yyvsp_2 - 12 | 0;
    $126 = HEAP32[$nd511 >> 2] | 0;
    $arrayidx512 = $yyvsp_2 - 4 | 0;
    $id513 = $arrayidx512;
    $127 = HEAP16[$id513 >> 1] | 0;
    $nd515 = $yyvsp_2 | 0;
    $128 = HEAP32[$nd515 >> 2] | 0;
    $call516 = _new_call($p, $126, $127, $128) | 0;
    HEAP32[$4 >> 2] = $call516;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 99:
    $nd520 = $yyvsp_2 - 4 | 0;
    $129 = HEAP32[$nd520 >> 2] | 0;
    $nd522 = $yyvsp_2 | 0;
    $130 = HEAP32[$nd522 >> 2] | 0;
    _args_with_block($p, $129, $130);
    $nd524 = $yyvsp_2 - 16 | 0;
    $131 = HEAP32[$nd524 >> 2] | 0;
    $arrayidx525 = $yyvsp_2 - 8 | 0;
    $id526 = $arrayidx525;
    $132 = HEAP16[$id526 >> 1] | 0;
    $133 = HEAP32[$nd520 >> 2] | 0;
    $call529 = _new_call($p, $131, $132, $133) | 0;
    HEAP32[$4 >> 2] = $call529;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 100:
    $nd533 = $yyvsp_2 - 12 | 0;
    $134 = HEAP32[$nd533 >> 2] | 0;
    $arrayidx534 = $yyvsp_2 - 4 | 0;
    $id535 = $arrayidx534;
    $135 = HEAP16[$id535 >> 1] | 0;
    $nd537 = $yyvsp_2 | 0;
    $136 = HEAP32[$nd537 >> 2] | 0;
    $call538 = _new_call($p, $134, $135, $136) | 0;
    HEAP32[$4 >> 2] = $call538;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 101:
    $nd542 = $yyvsp_2 - 4 | 0;
    $137 = HEAP32[$nd542 >> 2] | 0;
    $nd544 = $yyvsp_2 | 0;
    $138 = HEAP32[$nd544 >> 2] | 0;
    _args_with_block($p, $137, $138);
    $nd546 = $yyvsp_2 - 16 | 0;
    $139 = HEAP32[$nd546 >> 2] | 0;
    $arrayidx547 = $yyvsp_2 - 8 | 0;
    $id548 = $arrayidx547;
    $140 = HEAP16[$id548 >> 1] | 0;
    $141 = HEAP32[$nd542 >> 2] | 0;
    $call551 = _new_call($p, $139, $140, $141) | 0;
    HEAP32[$4 >> 2] = $call551;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 102:
    $nd555 = $yyvsp_2 | 0;
    $142 = HEAP32[$nd555 >> 2] | 0;
    $call556 = _new_super($p, $142) | 0;
    HEAP32[$4 >> 2] = $call556;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 103:
    $nd560 = $yyvsp_2 | 0;
    $143 = HEAP32[$nd560 >> 2] | 0;
    $call561 = _new_yield($p, $143) | 0;
    HEAP32[$4 >> 2] = $call561;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 104:
    $nd565 = $yyvsp_2 | 0;
    $144 = HEAP32[$nd565 >> 2] | 0;
    $call566 = _ret_args($p, $144) | 0;
    $call567 = _new_return($p, $call566) | 0;
    HEAP32[$4 >> 2] = $call567;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 105:
    $nd571 = $yyvsp_2 | 0;
    $145 = HEAP32[$nd571 >> 2] | 0;
    $call572 = _ret_args($p, $145) | 0;
    $call573 = _new_break($p, $call572) | 0;
    HEAP32[$4 >> 2] = $call573;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 106:
    $nd577 = $yyvsp_2 | 0;
    $146 = HEAP32[$nd577 >> 2] | 0;
    $call578 = _ret_args($p, $146) | 0;
    $call579 = _new_next($p, $call578) | 0;
    HEAP32[$4 >> 2] = $call579;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 107:
    $nd583 = $yyvsp_2 | 0;
    $147 = HEAP32[$nd583 >> 2] | 0;
    HEAP32[$4 >> 2] = $147;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 108:
    $nd587 = $yyvsp_2 - 4 | 0;
    $148 = HEAP32[$nd587 >> 2] | 0;
    HEAP32[$4 >> 2] = $148;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 109:
    $nd591 = $yyvsp_2 - 4 | 0;
    $149 = HEAP32[$nd591 >> 2] | 0;
    $call592 = _list1_gen($p, $149) | 0;
    HEAP32[$4 >> 2] = $call592;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 110:
    $nd596 = $yyvsp_2 | 0;
    $150 = HEAP32[$nd596 >> 2] | 0;
    $call597 = _list1_gen($p, $150) | 0;
    HEAP32[$4 >> 2] = $call597;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 111:
    $nd601 = $yyvsp_2 - 4 | 0;
    $151 = HEAP32[$nd601 >> 2] | 0;
    $nd603 = $yyvsp_2 | 0;
    $152 = HEAP32[$nd603 >> 2] | 0;
    $call604 = _list1_gen($p, $152) | 0;
    $call605 = _append_gen($151, $call604) | 0;
    $call606 = _list1_gen($p, $call605) | 0;
    HEAP32[$4 >> 2] = $call606;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 112:
    $nd610 = $yyvsp_2 - 8 | 0;
    $153 = HEAP32[$nd610 >> 2] | 0;
    $nd612 = $yyvsp_2 | 0;
    $154 = HEAP32[$nd612 >> 2] | 0;
    $call613 = _list2_gen($p, $153, $154) | 0;
    HEAP32[$4 >> 2] = $call613;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 113:
    $nd617 = $yyvsp_2 - 16 | 0;
    $155 = HEAP32[$nd617 >> 2] | 0;
    $nd619 = $yyvsp_2 - 8 | 0;
    $156 = HEAP32[$nd619 >> 2] | 0;
    $nd621 = $yyvsp_2 | 0;
    $157 = HEAP32[$nd621 >> 2] | 0;
    $call622 = _list3_gen($p, $155, $156, $157) | 0;
    HEAP32[$4 >> 2] = $call622;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 114:
    $nd626 = $yyvsp_2 - 4 | 0;
    $158 = HEAP32[$nd626 >> 2] | 0;
    $call627 = _new_nil($p) | 0;
    $call628 = _list2_gen($p, $158, $call627) | 0;
    HEAP32[$4 >> 2] = $call628;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 115:
    $nd632 = $yyvsp_2 - 12 | 0;
    $159 = HEAP32[$nd632 >> 2] | 0;
    $call633 = _new_nil($p) | 0;
    $nd635 = $yyvsp_2 | 0;
    $160 = HEAP32[$nd635 >> 2] | 0;
    $call636 = _list3_gen($p, $159, $call633, $160) | 0;
    HEAP32[$4 >> 2] = $call636;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 116:
    $nd640 = $yyvsp_2 | 0;
    $161 = HEAP32[$nd640 >> 2] | 0;
    $call641 = _list2_gen($p, 0, $161) | 0;
    HEAP32[$4 >> 2] = $call641;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 117:
    $nd645 = $yyvsp_2 - 8 | 0;
    $162 = HEAP32[$nd645 >> 2] | 0;
    $nd647 = $yyvsp_2 | 0;
    $163 = HEAP32[$nd647 >> 2] | 0;
    $call648 = _list3_gen($p, 0, $162, $163) | 0;
    HEAP32[$4 >> 2] = $call648;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 118:
    $call651 = _new_nil($p) | 0;
    $call652 = _list2_gen($p, 0, $call651) | 0;
    HEAP32[$4 >> 2] = $call652;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 119:
    $call655 = _new_nil($p) | 0;
    $nd657 = $yyvsp_2 | 0;
    $164 = HEAP32[$nd657 >> 2] | 0;
    $call658 = _list3_gen($p, 0, $call655, $164) | 0;
    HEAP32[$4 >> 2] = $call658;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 120:
    $nd662 = $yyvsp_2 - 4 | 0;
    $165 = HEAP32[$nd662 >> 2] | 0;
    HEAP32[$4 >> 2] = $165;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 121:
    $nd666 = $yyvsp_2 - 4 | 0;
    $166 = HEAP32[$nd666 >> 2] | 0;
    $call667 = _list1_gen($p, $166) | 0;
    HEAP32[$4 >> 2] = $call667;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 122:
    $nd671 = $yyvsp_2 - 8 | 0;
    $167 = HEAP32[$nd671 >> 2] | 0;
    $nd673 = $yyvsp_2 - 4 | 0;
    $168 = HEAP32[$nd673 >> 2] | 0;
    $call674 = _list1_gen($p, $168) | 0;
    $call675 = _append_gen($167, $call674) | 0;
    HEAP32[$4 >> 2] = $call675;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 123:
    $nd679 = $yyvsp_2 | 0;
    $169 = HEAP32[$nd679 >> 2] | 0;
    $call680 = _list1_gen($p, $169) | 0;
    HEAP32[$4 >> 2] = $call680;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 124:
    $nd684 = $yyvsp_2 - 4 | 0;
    $170 = HEAP32[$nd684 >> 2] | 0;
    $nd686 = $yyvsp_2 | 0;
    $171 = HEAP32[$nd686 >> 2] | 0;
    $call687 = _list1_gen($p, $171) | 0;
    $call688 = _append_gen($170, $call687) | 0;
    HEAP32[$4 >> 2] = $call688;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 125:
    $nd692 = $yyvsp_2 | 0;
    $172 = HEAP32[$nd692 >> 2] | 0;
    _assignable($p, $172);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 126:
    $nd695 = $yyvsp_2 - 12 | 0;
    $173 = HEAP32[$nd695 >> 2] | 0;
    $call696 = _intern_gen2($p, 110068, 2) | 0;
    $nd698 = $yyvsp_2 - 4 | 0;
    $174 = HEAP32[$nd698 >> 2] | 0;
    $call699 = _new_call($p, $173, $call696, $174) | 0;
    HEAP32[$4 >> 2] = $call699;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 127:
    $nd703 = $yyvsp_2 - 8 | 0;
    $175 = HEAP32[$nd703 >> 2] | 0;
    $id705 = $yyvsp_2;
    $176 = HEAP16[$id705 >> 1] | 0;
    $call706 = _new_call($p, $175, $176, 0) | 0;
    HEAP32[$4 >> 2] = $call706;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 128:
    $nd710 = $yyvsp_2 - 8 | 0;
    $177 = HEAP32[$nd710 >> 2] | 0;
    $id712 = $yyvsp_2;
    $178 = HEAP16[$id712 >> 1] | 0;
    $call713 = _new_call($p, $177, $178, 0) | 0;
    HEAP32[$4 >> 2] = $call713;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 129:
    $nd717 = $yyvsp_2 - 8 | 0;
    $179 = HEAP32[$nd717 >> 2] | 0;
    $id719 = $yyvsp_2;
    $180 = HEAP16[$id719 >> 1] | 0;
    $call720 = _new_call($p, $179, $180, 0) | 0;
    HEAP32[$4 >> 2] = $call720;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 130:
    $181 = HEAP32[$in_def >> 2] | 0;
    $tobool723 = ($181 | 0) == 0;
    if ($tobool723) {
      label = 131;
      break;
    } else {
      label = 132;
      break;
    }
   case 131:
    $182 = HEAP32[$in_single >> 2] | 0;
    $tobool725 = ($182 | 0) == 0;
    if ($tobool725) {
      label = 133;
      break;
    } else {
      label = 132;
      break;
    }
   case 132:
    _yyerror($p, 108680);
    label = 133;
    break;
   case 133:
    $nd729 = $yyvsp_2 - 8 | 0;
    $183 = HEAP32[$nd729 >> 2] | 0;
    $id731 = $yyvsp_2;
    $184 = HEAP16[$id731 >> 1] | 0;
    $call732 = _new_colon2($p, $183, $184) | 0;
    HEAP32[$4 >> 2] = $call732;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 134:
    $185 = HEAP32[$in_def735 >> 2] | 0;
    $tobool736 = ($185 | 0) == 0;
    if ($tobool736) {
      label = 135;
      break;
    } else {
      label = 136;
      break;
    }
   case 135:
    $186 = HEAP32[$in_single738 >> 2] | 0;
    $tobool739 = ($186 | 0) == 0;
    if ($tobool739) {
      label = 137;
      break;
    } else {
      label = 136;
      break;
    }
   case 136:
    _yyerror($p, 108680);
    label = 137;
    break;
   case 137:
    $id743 = $yyvsp_2;
    $187 = HEAP16[$id743 >> 1] | 0;
    $call744 = _new_colon3($p, $187) | 0;
    HEAP32[$4 >> 2] = $call744;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 138:
    $nd748 = $yyvsp_2 | 0;
    $188 = HEAP32[$nd748 >> 2] | 0;
    _backref_error($p, $188);
    HEAP32[$4 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 139:
    $nd752 = $yyvsp_2 | 0;
    $189 = HEAP32[$nd752 >> 2] | 0;
    _assignable($p, $189);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 140:
    $nd755 = $yyvsp_2 - 12 | 0;
    $190 = HEAP32[$nd755 >> 2] | 0;
    $call756 = _intern_gen2($p, 110068, 2) | 0;
    $nd758 = $yyvsp_2 - 4 | 0;
    $191 = HEAP32[$nd758 >> 2] | 0;
    $call759 = _new_call($p, $190, $call756, $191) | 0;
    HEAP32[$4 >> 2] = $call759;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 141:
    $nd763 = $yyvsp_2 - 8 | 0;
    $192 = HEAP32[$nd763 >> 2] | 0;
    $id765 = $yyvsp_2;
    $193 = HEAP16[$id765 >> 1] | 0;
    $call766 = _new_call($p, $192, $193, 0) | 0;
    HEAP32[$4 >> 2] = $call766;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 142:
    $nd770 = $yyvsp_2 - 8 | 0;
    $194 = HEAP32[$nd770 >> 2] | 0;
    $id772 = $yyvsp_2;
    $195 = HEAP16[$id772 >> 1] | 0;
    $call773 = _new_call($p, $194, $195, 0) | 0;
    HEAP32[$4 >> 2] = $call773;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 143:
    $nd777 = $yyvsp_2 - 8 | 0;
    $196 = HEAP32[$nd777 >> 2] | 0;
    $id779 = $yyvsp_2;
    $197 = HEAP16[$id779 >> 1] | 0;
    $call780 = _new_call($p, $196, $197, 0) | 0;
    HEAP32[$4 >> 2] = $call780;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 144:
    $198 = HEAP32[$in_def783 >> 2] | 0;
    $tobool784 = ($198 | 0) == 0;
    if ($tobool784) {
      label = 145;
      break;
    } else {
      label = 146;
      break;
    }
   case 145:
    $199 = HEAP32[$in_single786 >> 2] | 0;
    $tobool787 = ($199 | 0) == 0;
    if ($tobool787) {
      label = 147;
      break;
    } else {
      label = 146;
      break;
    }
   case 146:
    _yyerror($p, 108680);
    label = 147;
    break;
   case 147:
    $nd791 = $yyvsp_2 - 8 | 0;
    $200 = HEAP32[$nd791 >> 2] | 0;
    $id793 = $yyvsp_2;
    $201 = HEAP16[$id793 >> 1] | 0;
    $call794 = _new_colon2($p, $200, $201) | 0;
    HEAP32[$4 >> 2] = $call794;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 148:
    $202 = HEAP32[$in_def797 >> 2] | 0;
    $tobool798 = ($202 | 0) == 0;
    if ($tobool798) {
      label = 149;
      break;
    } else {
      label = 150;
      break;
    }
   case 149:
    $203 = HEAP32[$in_single800 >> 2] | 0;
    $tobool801 = ($203 | 0) == 0;
    if ($tobool801) {
      label = 151;
      break;
    } else {
      label = 150;
      break;
    }
   case 150:
    _yyerror($p, 108680);
    label = 151;
    break;
   case 151:
    $id805 = $yyvsp_2;
    $204 = HEAP16[$id805 >> 1] | 0;
    $call806 = _new_colon3($p, $204) | 0;
    HEAP32[$4 >> 2] = $call806;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 152:
    $nd810 = $yyvsp_2 | 0;
    $205 = HEAP32[$nd810 >> 2] | 0;
    _backref_error($p, $205);
    HEAP32[$4 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 153:
    _yyerror($p, 108316);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 154:
    $id815 = $yyvsp_2;
    $206 = HEAP16[$id815 >> 1] | 0;
    $conv816 = $206 << 16 >> 16;
    $207 = $conv816;
    $call817 = _cons_gen($p, 1, $207) | 0;
    HEAP32[$4 >> 2] = $call817;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 155:
    $id821 = $yyvsp_2;
    $208 = HEAP16[$id821 >> 1] | 0;
    $conv822 = $208 << 16 >> 16;
    $209 = $conv822;
    $call823 = _cons_gen($p, 0, $209) | 0;
    HEAP32[$4 >> 2] = $call823;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 156:
    $nd827 = $yyvsp_2 - 8 | 0;
    $210 = HEAP32[$nd827 >> 2] | 0;
    $id829 = $yyvsp_2;
    $211 = HEAP16[$id829 >> 1] | 0;
    $conv830 = $211 << 16 >> 16;
    $212 = $conv830;
    $call831 = _cons_gen($p, $210, $212) | 0;
    HEAP32[$4 >> 2] = $call831;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 157:
    HEAP32[$lstate834 >> 2] = 3;
    $id836 = $yyvsp_2;
    $213 = HEAP16[$id836 >> 1] | 0;
    HEAP16[$id837 >> 1] = $213;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 158:
    HEAP32[$lstate839 >> 2] = 3;
    $id841 = $yyvsp_2;
    $214 = HEAP16[$id841 >> 1] | 0;
    HEAP16[$id842 >> 1] = $214;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 159:
    $id845 = $yyvsp_2;
    $215 = HEAP16[$id845 >> 1] | 0;
    $call846 = _new_undef($p, $215) | 0;
    HEAP32[$4 >> 2] = $call846;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 160:
    HEAP32[$lstate849 >> 2] = 7;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 161:
    $nd852 = $yyvsp_2 - 12 | 0;
    $216 = HEAP32[$nd852 >> 2] | 0;
    $id854 = $yyvsp_2;
    $217 = HEAP16[$id854 >> 1] | 0;
    $conv855 = $217 << 16 >> 16;
    $218 = $conv855;
    $call856 = _list1_gen($p, $218) | 0;
    $call857 = _append_gen($216, $call856) | 0;
    HEAP32[$4 >> 2] = $call857;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 162:
    $call860 = _intern_gen_c($p, 124) | 0;
    HEAP16[$id861 >> 1] = $call860;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 163:
    $call863 = _intern_gen_c($p, 94) | 0;
    HEAP16[$id864 >> 1] = $call863;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 164:
    $call866 = _intern_gen_c($p, 38) | 0;
    HEAP16[$id867 >> 1] = $call866;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 165:
    $call869 = _intern_gen2($p, 108072, 3) | 0;
    HEAP16[$id870 >> 1] = $call869;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 166:
    $call872 = _intern_gen2($p, 107632, 2) | 0;
    HEAP16[$id873 >> 1] = $call872;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 167:
    $call875 = _intern_gen2($p, 107172, 3) | 0;
    HEAP16[$id876 >> 1] = $call875;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 168:
    $call878 = _intern_gen2($p, 106616, 2) | 0;
    HEAP16[$id879 >> 1] = $call878;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 169:
    $call881 = _intern_gen2($p, 106268, 2) | 0;
    HEAP16[$id882 >> 1] = $call881;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 170:
    $call884 = _intern_gen_c($p, 62) | 0;
    HEAP16[$id885 >> 1] = $call884;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 171:
    $call887 = _intern_gen2($p, 105760, 2) | 0;
    HEAP16[$id888 >> 1] = $call887;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 172:
    $call890 = _intern_gen_c($p, 60) | 0;
    HEAP16[$id891 >> 1] = $call890;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 173:
    $call893 = _intern_gen2($p, 105504, 2) | 0;
    HEAP16[$id894 >> 1] = $call893;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 174:
    $call896 = _intern_gen2($p, 105088, 2) | 0;
    HEAP16[$id897 >> 1] = $call896;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 175:
    $call899 = _intern_gen2($p, 104680, 2) | 0;
    HEAP16[$id900 >> 1] = $call899;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 176:
    $call902 = _intern_gen2($p, 104288, 2) | 0;
    HEAP16[$id903 >> 1] = $call902;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 177:
    $call905 = _intern_gen_c($p, 43) | 0;
    HEAP16[$id906 >> 1] = $call905;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 178:
    $call908 = _intern_gen_c($p, 45) | 0;
    HEAP16[$id909 >> 1] = $call908;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 179:
    $call911 = _intern_gen_c($p, 42) | 0;
    HEAP16[$id912 >> 1] = $call911;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 180:
    $call914 = _intern_gen_c($p, 42) | 0;
    HEAP16[$id915 >> 1] = $call914;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 181:
    $call917 = _intern_gen_c($p, 47) | 0;
    HEAP16[$id918 >> 1] = $call917;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 182:
    $call920 = _intern_gen_c($p, 37) | 0;
    HEAP16[$id921 >> 1] = $call920;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 183:
    $call923 = _intern_gen2($p, 104e3, 2) | 0;
    HEAP16[$id924 >> 1] = $call923;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 184:
    $call926 = _intern_gen_c($p, 33) | 0;
    HEAP16[$id927 >> 1] = $call926;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 185:
    $call929 = _intern_gen_c($p, 126) | 0;
    HEAP16[$id930 >> 1] = $call929;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 186:
    $call932 = _intern_gen2($p, 103696, 2) | 0;
    HEAP16[$id933 >> 1] = $call932;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 187:
    $call935 = _intern_gen2($p, 103420, 2) | 0;
    HEAP16[$id936 >> 1] = $call935;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 188:
    $call938 = _intern_gen2($p, 110068, 2) | 0;
    HEAP16[$id939 >> 1] = $call938;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 189:
    $call941 = _intern_gen2($p, 103148, 3) | 0;
    HEAP16[$id942 >> 1] = $call941;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 190:
    $call944 = _intern_gen_c($p, 96) | 0;
    HEAP16[$id945 >> 1] = $call944;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 191:
    $nd948 = $yyvsp_2 - 8 | 0;
    $219 = HEAP32[$nd948 >> 2] | 0;
    $nd950 = $yyvsp_2 | 0;
    $220 = HEAP32[$nd950 >> 2] | 0;
    $call951 = _new_asgn($p, $219, $220) | 0;
    HEAP32[$4 >> 2] = $call951;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 192:
    $nd955 = $yyvsp_2 - 16 | 0;
    $221 = HEAP32[$nd955 >> 2] | 0;
    $nd957 = $yyvsp_2 - 8 | 0;
    $222 = HEAP32[$nd957 >> 2] | 0;
    $nd959 = $yyvsp_2 | 0;
    $223 = HEAP32[$nd959 >> 2] | 0;
    $call960 = _list3_gen($p, 0, 0, $223) | 0;
    $call961 = _list1_gen($p, $call960) | 0;
    $call962 = _new_rescue($p, $222, $call961, 0) | 0;
    $call963 = _new_asgn($p, $221, $call962) | 0;
    HEAP32[$4 >> 2] = $call963;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 193:
    $nd967 = $yyvsp_2 - 8 | 0;
    $224 = HEAP32[$nd967 >> 2] | 0;
    $arrayidx968 = $yyvsp_2 - 4 | 0;
    $id969 = $arrayidx968;
    $225 = HEAP16[$id969 >> 1] | 0;
    $nd971 = $yyvsp_2 | 0;
    $226 = HEAP32[$nd971 >> 2] | 0;
    $call972 = _new_op_asgn($p, $224, $225, $226) | 0;
    HEAP32[$4 >> 2] = $call972;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 194:
    $nd976 = $yyvsp_2 - 16 | 0;
    $227 = HEAP32[$nd976 >> 2] | 0;
    $arrayidx977 = $yyvsp_2 - 12 | 0;
    $id978 = $arrayidx977;
    $228 = HEAP16[$id978 >> 1] | 0;
    $nd980 = $yyvsp_2 - 8 | 0;
    $229 = HEAP32[$nd980 >> 2] | 0;
    $nd982 = $yyvsp_2 | 0;
    $230 = HEAP32[$nd982 >> 2] | 0;
    $call983 = _list3_gen($p, 0, 0, $230) | 0;
    $call984 = _list1_gen($p, $call983) | 0;
    $call985 = _new_rescue($p, $229, $call984, 0) | 0;
    $call986 = _new_op_asgn($p, $227, $228, $call985) | 0;
    HEAP32[$4 >> 2] = $call986;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 195:
    $nd990 = $yyvsp_2 - 20 | 0;
    $231 = HEAP32[$nd990 >> 2] | 0;
    $call991 = _intern_gen2($p, 110068, 2) | 0;
    $nd993 = $yyvsp_2 - 12 | 0;
    $232 = HEAP32[$nd993 >> 2] | 0;
    $call994 = _new_call($p, $231, $call991, $232) | 0;
    $arrayidx995 = $yyvsp_2 - 4 | 0;
    $id996 = $arrayidx995;
    $233 = HEAP16[$id996 >> 1] | 0;
    $nd998 = $yyvsp_2 | 0;
    $234 = HEAP32[$nd998 >> 2] | 0;
    $call999 = _new_op_asgn($p, $call994, $233, $234) | 0;
    HEAP32[$4 >> 2] = $call999;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 196:
    $nd1003 = $yyvsp_2 - 16 | 0;
    $235 = HEAP32[$nd1003 >> 2] | 0;
    $arrayidx1004 = $yyvsp_2 - 8 | 0;
    $id1005 = $arrayidx1004;
    $236 = HEAP16[$id1005 >> 1] | 0;
    $call1006 = _new_call($p, $235, $236, 0) | 0;
    $arrayidx1007 = $yyvsp_2 - 4 | 0;
    $id1008 = $arrayidx1007;
    $237 = HEAP16[$id1008 >> 1] | 0;
    $nd1010 = $yyvsp_2 | 0;
    $238 = HEAP32[$nd1010 >> 2] | 0;
    $call1011 = _new_op_asgn($p, $call1006, $237, $238) | 0;
    HEAP32[$4 >> 2] = $call1011;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 197:
    $nd1015 = $yyvsp_2 - 16 | 0;
    $239 = HEAP32[$nd1015 >> 2] | 0;
    $arrayidx1016 = $yyvsp_2 - 8 | 0;
    $id1017 = $arrayidx1016;
    $240 = HEAP16[$id1017 >> 1] | 0;
    $call1018 = _new_call($p, $239, $240, 0) | 0;
    $arrayidx1019 = $yyvsp_2 - 4 | 0;
    $id1020 = $arrayidx1019;
    $241 = HEAP16[$id1020 >> 1] | 0;
    $nd1022 = $yyvsp_2 | 0;
    $242 = HEAP32[$nd1022 >> 2] | 0;
    $call1023 = _new_op_asgn($p, $call1018, $241, $242) | 0;
    HEAP32[$4 >> 2] = $call1023;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 198:
    $nd1027 = $yyvsp_2 - 16 | 0;
    $243 = HEAP32[$nd1027 >> 2] | 0;
    $arrayidx1028 = $yyvsp_2 - 8 | 0;
    $id1029 = $arrayidx1028;
    $244 = HEAP16[$id1029 >> 1] | 0;
    $call1030 = _new_call($p, $243, $244, 0) | 0;
    $arrayidx1031 = $yyvsp_2 - 4 | 0;
    $id1032 = $arrayidx1031;
    $245 = HEAP16[$id1032 >> 1] | 0;
    $nd1034 = $yyvsp_2 | 0;
    $246 = HEAP32[$nd1034 >> 2] | 0;
    $call1035 = _new_op_asgn($p, $call1030, $245, $246) | 0;
    HEAP32[$4 >> 2] = $call1035;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 199:
    _yyerror($p, 109596);
    $call1038 = _new_begin($p, 0) | 0;
    HEAP32[$4 >> 2] = $call1038;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 200:
    _yyerror($p, 109596);
    $call1041 = _new_begin($p, 0) | 0;
    HEAP32[$4 >> 2] = $call1041;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 201:
    $nd1045 = $yyvsp_2 - 8 | 0;
    $247 = HEAP32[$nd1045 >> 2] | 0;
    _backref_error($p, $247);
    $call1046 = _new_begin($p, 0) | 0;
    HEAP32[$4 >> 2] = $call1046;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 202:
    $nd1050 = $yyvsp_2 - 8 | 0;
    $248 = HEAP32[$nd1050 >> 2] | 0;
    $nd1052 = $yyvsp_2 | 0;
    $249 = HEAP32[$nd1052 >> 2] | 0;
    $call1053 = _new_dot2($p, $248, $249) | 0;
    HEAP32[$4 >> 2] = $call1053;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 203:
    $nd1057 = $yyvsp_2 - 8 | 0;
    $250 = HEAP32[$nd1057 >> 2] | 0;
    $nd1059 = $yyvsp_2 | 0;
    $251 = HEAP32[$nd1059 >> 2] | 0;
    $call1060 = _new_dot3($p, $250, $251) | 0;
    HEAP32[$4 >> 2] = $call1060;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 204:
    $nd1064 = $yyvsp_2 - 8 | 0;
    $252 = HEAP32[$nd1064 >> 2] | 0;
    $nd1066 = $yyvsp_2 | 0;
    $253 = HEAP32[$nd1066 >> 2] | 0;
    $call1067 = _call_bin_op($p, $252, 102860, $253) | 0;
    HEAP32[$4 >> 2] = $call1067;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 205:
    $nd1071 = $yyvsp_2 - 8 | 0;
    $254 = HEAP32[$nd1071 >> 2] | 0;
    $nd1073 = $yyvsp_2 | 0;
    $255 = HEAP32[$nd1073 >> 2] | 0;
    $call1074 = _call_bin_op($p, $254, 102304, $255) | 0;
    HEAP32[$4 >> 2] = $call1074;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 206:
    $nd1078 = $yyvsp_2 - 8 | 0;
    $256 = HEAP32[$nd1078 >> 2] | 0;
    $nd1080 = $yyvsp_2 | 0;
    $257 = HEAP32[$nd1080 >> 2] | 0;
    $call1081 = _call_bin_op($p, $256, 102112, $257) | 0;
    HEAP32[$4 >> 2] = $call1081;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 207:
    $nd1085 = $yyvsp_2 - 8 | 0;
    $258 = HEAP32[$nd1085 >> 2] | 0;
    $nd1087 = $yyvsp_2 | 0;
    $259 = HEAP32[$nd1087 >> 2] | 0;
    $call1088 = _call_bin_op($p, $258, 101892, $259) | 0;
    HEAP32[$4 >> 2] = $call1088;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 208:
    $nd1092 = $yyvsp_2 - 8 | 0;
    $260 = HEAP32[$nd1092 >> 2] | 0;
    $nd1094 = $yyvsp_2 | 0;
    $261 = HEAP32[$nd1094 >> 2] | 0;
    $call1095 = _call_bin_op($p, $260, 101680, $261) | 0;
    HEAP32[$4 >> 2] = $call1095;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 209:
    $nd1099 = $yyvsp_2 - 8 | 0;
    $262 = HEAP32[$nd1099 >> 2] | 0;
    $nd1101 = $yyvsp_2 | 0;
    $263 = HEAP32[$nd1101 >> 2] | 0;
    $call1102 = _call_bin_op($p, $262, 104e3, $263) | 0;
    HEAP32[$4 >> 2] = $call1102;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 210:
    $nd1106 = $yyvsp_2 - 8 | 0;
    $264 = HEAP32[$nd1106 >> 2] | 0;
    $nd1108 = $yyvsp_2 | 0;
    $265 = HEAP32[$nd1108 >> 2] | 0;
    $call1109 = _call_bin_op($p, $264, 104e3, $265) | 0;
    $call1110 = _call_uni_op($p, $call1109, 103420) | 0;
    HEAP32[$4 >> 2] = $call1110;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 211:
    $nd1114 = $yyvsp_2 - 8 | 0;
    $266 = HEAP32[$nd1114 >> 2] | 0;
    $nd1116 = $yyvsp_2 | 0;
    $267 = HEAP32[$nd1116 >> 2] | 0;
    $call1117 = _call_bin_op($p, $266, 104e3, $267) | 0;
    $call1118 = _call_uni_op($p, $call1117, 103420) | 0;
    HEAP32[$4 >> 2] = $call1118;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 212:
    $nd1122 = $yyvsp_2 | 0;
    $268 = HEAP32[$nd1122 >> 2] | 0;
    $call1123 = _call_uni_op($p, $268, 103696) | 0;
    HEAP32[$4 >> 2] = $call1123;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 213:
    $nd1127 = $yyvsp_2 | 0;
    $269 = HEAP32[$nd1127 >> 2] | 0;
    $call1128 = _call_uni_op($p, $269, 103420) | 0;
    HEAP32[$4 >> 2] = $call1128;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 214:
    $nd1132 = $yyvsp_2 - 8 | 0;
    $270 = HEAP32[$nd1132 >> 2] | 0;
    $nd1134 = $yyvsp_2 | 0;
    $271 = HEAP32[$nd1134 >> 2] | 0;
    $call1135 = _call_bin_op($p, $270, 101444, $271) | 0;
    HEAP32[$4 >> 2] = $call1135;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 215:
    $nd1139 = $yyvsp_2 - 8 | 0;
    $272 = HEAP32[$nd1139 >> 2] | 0;
    $nd1141 = $yyvsp_2 | 0;
    $273 = HEAP32[$nd1141 >> 2] | 0;
    $call1142 = _call_bin_op($p, $272, 101172, $273) | 0;
    HEAP32[$4 >> 2] = $call1142;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 216:
    $nd1146 = $yyvsp_2 - 8 | 0;
    $274 = HEAP32[$nd1146 >> 2] | 0;
    $nd1148 = $yyvsp_2 | 0;
    $275 = HEAP32[$nd1148 >> 2] | 0;
    $call1149 = _call_bin_op($p, $274, 100968, $275) | 0;
    HEAP32[$4 >> 2] = $call1149;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 217:
    $nd1153 = $yyvsp_2 - 8 | 0;
    $276 = HEAP32[$nd1153 >> 2] | 0;
    $nd1155 = $yyvsp_2 | 0;
    $277 = HEAP32[$nd1155 >> 2] | 0;
    $call1156 = _call_bin_op($p, $276, 108072, $277) | 0;
    HEAP32[$4 >> 2] = $call1156;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 218:
    $nd1160 = $yyvsp_2 - 8 | 0;
    $278 = HEAP32[$nd1160 >> 2] | 0;
    $nd1162 = $yyvsp_2 | 0;
    $279 = HEAP32[$nd1162 >> 2] | 0;
    $call1163 = _call_bin_op($p, $278, 100656, $279) | 0;
    HEAP32[$4 >> 2] = $call1163;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 219:
    $nd1167 = $yyvsp_2 - 8 | 0;
    $280 = HEAP32[$nd1167 >> 2] | 0;
    $nd1169 = $yyvsp_2 | 0;
    $281 = HEAP32[$nd1169 >> 2] | 0;
    $call1170 = _call_bin_op($p, $280, 105760, $281) | 0;
    HEAP32[$4 >> 2] = $call1170;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 220:
    $nd1174 = $yyvsp_2 - 8 | 0;
    $282 = HEAP32[$nd1174 >> 2] | 0;
    $nd1176 = $yyvsp_2 | 0;
    $283 = HEAP32[$nd1176 >> 2] | 0;
    $call1177 = _call_bin_op($p, $282, 100348, $283) | 0;
    HEAP32[$4 >> 2] = $call1177;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 221:
    $nd1181 = $yyvsp_2 - 8 | 0;
    $284 = HEAP32[$nd1181 >> 2] | 0;
    $nd1183 = $yyvsp_2 | 0;
    $285 = HEAP32[$nd1183 >> 2] | 0;
    $call1184 = _call_bin_op($p, $284, 105504, $285) | 0;
    HEAP32[$4 >> 2] = $call1184;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 222:
    $nd1188 = $yyvsp_2 - 8 | 0;
    $286 = HEAP32[$nd1188 >> 2] | 0;
    $nd1190 = $yyvsp_2 | 0;
    $287 = HEAP32[$nd1190 >> 2] | 0;
    $call1191 = _call_bin_op($p, $286, 107632, $287) | 0;
    HEAP32[$4 >> 2] = $call1191;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 223:
    $nd1195 = $yyvsp_2 - 8 | 0;
    $288 = HEAP32[$nd1195 >> 2] | 0;
    $nd1197 = $yyvsp_2 | 0;
    $289 = HEAP32[$nd1197 >> 2] | 0;
    $call1198 = _call_bin_op($p, $288, 107172, $289) | 0;
    HEAP32[$4 >> 2] = $call1198;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 224:
    $nd1202 = $yyvsp_2 - 8 | 0;
    $290 = HEAP32[$nd1202 >> 2] | 0;
    $nd1204 = $yyvsp_2 | 0;
    $291 = HEAP32[$nd1204 >> 2] | 0;
    $call1205 = _call_bin_op($p, $290, 105088, $291) | 0;
    HEAP32[$4 >> 2] = $call1205;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 225:
    $nd1209 = $yyvsp_2 - 8 | 0;
    $292 = HEAP32[$nd1209 >> 2] | 0;
    $nd1211 = $yyvsp_2 | 0;
    $293 = HEAP32[$nd1211 >> 2] | 0;
    $call1212 = _call_bin_op($p, $292, 106616, $293) | 0;
    HEAP32[$4 >> 2] = $call1212;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 226:
    $nd1216 = $yyvsp_2 - 8 | 0;
    $294 = HEAP32[$nd1216 >> 2] | 0;
    $nd1218 = $yyvsp_2 | 0;
    $295 = HEAP32[$nd1218 >> 2] | 0;
    $call1219 = _call_bin_op($p, $294, 106268, $295) | 0;
    HEAP32[$4 >> 2] = $call1219;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 227:
    $nd1223 = $yyvsp_2 | 0;
    $296 = HEAP32[$nd1223 >> 2] | 0;
    $call1224 = _cond($296) | 0;
    $call1225 = _call_uni_op($p, $call1224, 109144) | 0;
    HEAP32[$4 >> 2] = $call1225;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 228:
    $nd1229 = $yyvsp_2 | 0;
    $297 = HEAP32[$nd1229 >> 2] | 0;
    $call1230 = _cond($297) | 0;
    $call1231 = _call_uni_op($p, $call1230, 100124) | 0;
    HEAP32[$4 >> 2] = $call1231;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 229:
    $nd1235 = $yyvsp_2 - 8 | 0;
    $298 = HEAP32[$nd1235 >> 2] | 0;
    $nd1237 = $yyvsp_2 | 0;
    $299 = HEAP32[$nd1237 >> 2] | 0;
    $call1238 = _call_bin_op($p, $298, 104680, $299) | 0;
    HEAP32[$4 >> 2] = $call1238;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 230:
    $nd1242 = $yyvsp_2 - 8 | 0;
    $300 = HEAP32[$nd1242 >> 2] | 0;
    $nd1244 = $yyvsp_2 | 0;
    $301 = HEAP32[$nd1244 >> 2] | 0;
    $call1245 = _call_bin_op($p, $300, 104288, $301) | 0;
    HEAP32[$4 >> 2] = $call1245;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 231:
    $nd1249 = $yyvsp_2 - 8 | 0;
    $302 = HEAP32[$nd1249 >> 2] | 0;
    $nd1251 = $yyvsp_2 | 0;
    $303 = HEAP32[$nd1251 >> 2] | 0;
    $call1252 = _new_and($p, $302, $303) | 0;
    HEAP32[$4 >> 2] = $call1252;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 232:
    $nd1256 = $yyvsp_2 - 8 | 0;
    $304 = HEAP32[$nd1256 >> 2] | 0;
    $nd1258 = $yyvsp_2 | 0;
    $305 = HEAP32[$nd1258 >> 2] | 0;
    $call1259 = _new_or($p, $304, $305) | 0;
    HEAP32[$4 >> 2] = $call1259;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 233:
    $nd1263 = $yyvsp_2 - 20 | 0;
    $306 = HEAP32[$nd1263 >> 2] | 0;
    $call1264 = _cond($306) | 0;
    $nd1266 = $yyvsp_2 - 12 | 0;
    $307 = HEAP32[$nd1266 >> 2] | 0;
    $nd1268 = $yyvsp_2 | 0;
    $308 = HEAP32[$nd1268 >> 2] | 0;
    $call1269 = _new_if($p, $call1264, $307, $308) | 0;
    HEAP32[$4 >> 2] = $call1269;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 234:
    $nd1273 = $yyvsp_2 | 0;
    $309 = HEAP32[$nd1273 >> 2] | 0;
    HEAP32[$4 >> 2] = $309;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 235:
    $nd1277 = $yyvsp_2 | 0;
    $310 = HEAP32[$nd1277 >> 2] | 0;
    HEAP32[$4 >> 2] = $310;
    $tobool1280 = ($310 | 0) == 0;
    if ($tobool1280) {
      label = 236;
      break;
    } else {
      $yyerrstatus_3 = $yyerrstatus_1;
      label = 491;
      break;
    }
   case 236:
    $call1282 = _new_nil($p) | 0;
    HEAP32[$4 >> 2] = $call1282;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 237:
    $nd1287 = $yyvsp_2 - 4 | 0;
    $311 = HEAP32[$nd1287 >> 2] | 0;
    HEAP32[$4 >> 2] = $311;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 238:
    $nd1291 = $yyvsp_2 - 12 | 0;
    $312 = HEAP32[$nd1291 >> 2] | 0;
    $nd1293 = $yyvsp_2 - 4 | 0;
    $313 = HEAP32[$nd1293 >> 2] | 0;
    $call1294 = _new_hash($p, $313) | 0;
    $call1295 = _list1_gen($p, $call1294) | 0;
    $call1296 = _append_gen($312, $call1295) | 0;
    HEAP32[$4 >> 2] = $call1296;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 239:
    $nd1300 = $yyvsp_2 - 4 | 0;
    $314 = HEAP32[$nd1300 >> 2] | 0;
    $call1301 = _new_hash($p, $314) | 0;
    $call1302 = _cons_gen($p, $call1301, 0) | 0;
    HEAP32[$4 >> 2] = $call1302;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 240:
    $nd1306 = $yyvsp_2 - 4 | 0;
    $315 = HEAP32[$nd1306 >> 2] | 0;
    HEAP32[$4 >> 2] = $315;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 241:
    $nd1310 = $yyvsp_2 - 4 | 0;
    $316 = HEAP32[$nd1310 >> 2] | 0;
    $call1311 = _cons_gen($p, $316, 0) | 0;
    HEAP32[$4 >> 2] = $call1311;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 242:
    $nd1315 = $yyvsp_2 - 12 | 0;
    $317 = HEAP32[$nd1315 >> 2] | 0;
    $nd1317 = $yyvsp_2 - 4 | 0;
    $318 = HEAP32[$nd1317 >> 2] | 0;
    $call1318 = _new_hash($p, $318) | 0;
    $call1319 = _list1_gen($p, $call1318) | 0;
    $call1320 = _append_gen($317, $call1319) | 0;
    $call1321 = _cons_gen($p, $call1320, 0) | 0;
    HEAP32[$4 >> 2] = $call1321;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 243:
    $nd1325 = $yyvsp_2 - 4 | 0;
    $319 = HEAP32[$nd1325 >> 2] | 0;
    $call1326 = _new_hash($p, $319) | 0;
    $call1327 = _list1_gen($p, $call1326) | 0;
    $call1328 = _cons_gen($p, $call1327, 0) | 0;
    HEAP32[$4 >> 2] = $call1328;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 244:
    $nd1332 = $yyvsp_2 | 0;
    $320 = HEAP32[$nd1332 >> 2] | 0;
    $call1333 = _list1_gen($p, $320) | 0;
    $call1334 = _cons_gen($p, $call1333, 0) | 0;
    HEAP32[$4 >> 2] = $call1334;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 245:
    $nd1338 = $yyvsp_2 - 4 | 0;
    $321 = HEAP32[$nd1338 >> 2] | 0;
    $nd1340 = $yyvsp_2 | 0;
    $322 = HEAP32[$nd1340 >> 2] | 0;
    $call1341 = _cons_gen($p, $321, $322) | 0;
    HEAP32[$4 >> 2] = $call1341;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 246:
    $nd1345 = $yyvsp_2 - 4 | 0;
    $323 = HEAP32[$nd1345 >> 2] | 0;
    $call1346 = _new_hash($p, $323) | 0;
    $call1347 = _list1_gen($p, $call1346) | 0;
    $nd1349 = $yyvsp_2 | 0;
    $324 = HEAP32[$nd1349 >> 2] | 0;
    $call1350 = _cons_gen($p, $call1347, $324) | 0;
    HEAP32[$4 >> 2] = $call1350;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 247:
    $nd1354 = $yyvsp_2 - 12 | 0;
    $325 = HEAP32[$nd1354 >> 2] | 0;
    $nd1356 = $yyvsp_2 - 4 | 0;
    $326 = HEAP32[$nd1356 >> 2] | 0;
    $call1357 = _new_hash($p, $326) | 0;
    $call1358 = _list1_gen($p, $call1357) | 0;
    $call1359 = _append_gen($325, $call1358) | 0;
    $nd1361 = $yyvsp_2 | 0;
    $327 = HEAP32[$nd1361 >> 2] | 0;
    $call1362 = _cons_gen($p, $call1359, $327) | 0;
    HEAP32[$4 >> 2] = $call1362;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 248:
    $nd1366 = $yyvsp_2 | 0;
    $328 = HEAP32[$nd1366 >> 2] | 0;
    $call1367 = _cons_gen($p, 0, $328) | 0;
    HEAP32[$4 >> 2] = $call1367;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 249:
    $329 = HEAP32[$cmdarg_stack >> 2] | 0;
    $_c1314 = $329;
    HEAP32[$4 >> 2] = $_c1314;
    $330 = HEAP32[$cmdarg_stack >> 2] | 0;
    $shl = $330 << 1;
    $or = $shl | 1;
    HEAP32[$cmdarg_stack >> 2] = $or;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 250:
    $arrayidx1373 = $yyvsp_2 - 4 | 0;
    $stack1374 = $arrayidx1373;
    $331 = HEAP32[$stack1374 >> 2] | 0;
    HEAP32[$cmdarg_stack1375 >> 2] = $331;
    $nd1377 = $yyvsp_2 | 0;
    $332 = HEAP32[$nd1377 >> 2] | 0;
    HEAP32[$4 >> 2] = $332;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 251:
    $nd1381 = $yyvsp_2 | 0;
    $333 = HEAP32[$nd1381 >> 2] | 0;
    $call1382 = _new_block_arg($p, $333) | 0;
    HEAP32[$4 >> 2] = $call1382;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 252:
    $nd1386 = $yyvsp_2 | 0;
    $334 = HEAP32[$nd1386 >> 2] | 0;
    HEAP32[$4 >> 2] = $334;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 253:
    HEAP32[$4 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 254:
    $nd1392 = $yyvsp_2 | 0;
    $335 = HEAP32[$nd1392 >> 2] | 0;
    $call1393 = _cons_gen($p, $335, 0) | 0;
    HEAP32[$4 >> 2] = $call1393;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 255:
    $nd1397 = $yyvsp_2 | 0;
    $336 = HEAP32[$nd1397 >> 2] | 0;
    $call1398 = _new_splat($p, $336) | 0;
    $call1399 = _cons_gen($p, $call1398, 0) | 0;
    HEAP32[$4 >> 2] = $call1399;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 256:
    $nd1403 = $yyvsp_2 - 8 | 0;
    $337 = HEAP32[$nd1403 >> 2] | 0;
    $nd1405 = $yyvsp_2 | 0;
    $338 = HEAP32[$nd1405 >> 2] | 0;
    $call1406 = _list1_gen($p, $338) | 0;
    $call1407 = _append_gen($337, $call1406) | 0;
    HEAP32[$4 >> 2] = $call1407;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 257:
    $nd1411 = $yyvsp_2 - 12 | 0;
    $339 = HEAP32[$nd1411 >> 2] | 0;
    $nd1413 = $yyvsp_2 | 0;
    $340 = HEAP32[$nd1413 >> 2] | 0;
    $call1414 = _new_splat($p, $340) | 0;
    $call1415 = _list1_gen($p, $call1414) | 0;
    $call1416 = _append_gen($339, $call1415) | 0;
    HEAP32[$4 >> 2] = $call1416;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 258:
    $nd1420 = $yyvsp_2 - 8 | 0;
    $341 = HEAP32[$nd1420 >> 2] | 0;
    $nd1422 = $yyvsp_2 | 0;
    $342 = HEAP32[$nd1422 >> 2] | 0;
    $call1423 = _list1_gen($p, $342) | 0;
    $call1424 = _append_gen($341, $call1423) | 0;
    HEAP32[$4 >> 2] = $call1424;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 259:
    $nd1428 = $yyvsp_2 - 12 | 0;
    $343 = HEAP32[$nd1428 >> 2] | 0;
    $nd1430 = $yyvsp_2 | 0;
    $344 = HEAP32[$nd1430 >> 2] | 0;
    $call1431 = _new_splat($p, $344) | 0;
    $call1432 = _list1_gen($p, $call1431) | 0;
    $call1433 = _append_gen($343, $call1432) | 0;
    HEAP32[$4 >> 2] = $call1433;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 260:
    $nd1437 = $yyvsp_2 | 0;
    $345 = HEAP32[$nd1437 >> 2] | 0;
    $call1438 = _new_splat($p, $345) | 0;
    $call1439 = _list1_gen($p, $call1438) | 0;
    HEAP32[$4 >> 2] = $call1439;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 261:
    $id1443 = $yyvsp_2;
    $346 = HEAP16[$id1443 >> 1] | 0;
    $call1444 = _new_fcall($p, $346, 0) | 0;
    HEAP32[$4 >> 2] = $call1444;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 262:
    $347 = HEAP32[$cmdarg_stack1447 >> 2] | 0;
    $348 = $yyvsp_2 | 0;
    $_c1313 = $347;
    HEAP32[$348 >> 2] = $_c1313;
    HEAP32[$cmdarg_stack1447 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 263:
    $arrayidx1452 = $yyvsp_2 - 12 | 0;
    $stack1453 = $arrayidx1452;
    $349 = HEAP32[$stack1453 >> 2] | 0;
    HEAP32[$cmdarg_stack1454 >> 2] = $349;
    $nd1456 = $yyvsp_2 - 4 | 0;
    $350 = HEAP32[$nd1456 >> 2] | 0;
    HEAP32[$4 >> 2] = $350;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 264:
    HEAP32[$lstate1459 >> 2] = 2;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 265:
    $nd1462 = $yyvsp_2 - 8 | 0;
    $351 = HEAP32[$nd1462 >> 2] | 0;
    HEAP32[$4 >> 2] = $351;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 266:
    HEAP32[$lstate1465 >> 2] = 2;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 267:
    HEAP32[$4 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 268:
    $nd1470 = $yyvsp_2 - 4 | 0;
    $352 = HEAP32[$nd1470 >> 2] | 0;
    HEAP32[$4 >> 2] = $352;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 269:
    $nd1474 = $yyvsp_2 - 8 | 0;
    $353 = HEAP32[$nd1474 >> 2] | 0;
    $id1476 = $yyvsp_2;
    $354 = HEAP16[$id1476 >> 1] | 0;
    $call1477 = _new_colon2($p, $353, $354) | 0;
    HEAP32[$4 >> 2] = $call1477;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 270:
    $id1481 = $yyvsp_2;
    $355 = HEAP16[$id1481 >> 1] | 0;
    $call1482 = _new_colon3($p, $355) | 0;
    HEAP32[$4 >> 2] = $call1482;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 271:
    $nd1486 = $yyvsp_2 - 4 | 0;
    $356 = HEAP32[$nd1486 >> 2] | 0;
    $call1487 = _new_array($p, $356) | 0;
    HEAP32[$4 >> 2] = $call1487;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 272:
    $nd1491 = $yyvsp_2 - 4 | 0;
    $357 = HEAP32[$nd1491 >> 2] | 0;
    $call1492 = _new_hash($p, $357) | 0;
    HEAP32[$4 >> 2] = $call1492;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 273:
    $call1495 = _new_return($p, 0) | 0;
    HEAP32[$4 >> 2] = $call1495;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 274:
    $nd1499 = $yyvsp_2 - 4 | 0;
    $358 = HEAP32[$nd1499 >> 2] | 0;
    $call1500 = _new_yield($p, $358) | 0;
    HEAP32[$4 >> 2] = $call1500;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 275:
    $call1503 = _new_yield($p, 0) | 0;
    HEAP32[$4 >> 2] = $call1503;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 276:
    $call1506 = _new_yield($p, 0) | 0;
    HEAP32[$4 >> 2] = $call1506;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 277:
    $nd1510 = $yyvsp_2 - 4 | 0;
    $359 = HEAP32[$nd1510 >> 2] | 0;
    $call1511 = _cond($359) | 0;
    $call1512 = _call_uni_op($p, $call1511, 109144) | 0;
    HEAP32[$4 >> 2] = $call1512;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 278:
    $call1515 = _new_nil($p) | 0;
    $call1516 = _call_uni_op($p, $call1515, 109144) | 0;
    HEAP32[$4 >> 2] = $call1516;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 279:
    $arrayidx1519 = $yyvsp_2 - 4 | 0;
    $id1520 = $arrayidx1519;
    $360 = HEAP16[$id1520 >> 1] | 0;
    $nd1522 = $yyvsp_2 | 0;
    $361 = HEAP32[$nd1522 >> 2] | 0;
    $call1523 = _cons_gen($p, 0, $361) | 0;
    $call1524 = _new_fcall($p, $360, $call1523) | 0;
    HEAP32[$4 >> 2] = $call1524;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 280:
    $nd1528 = $yyvsp_2 - 4 | 0;
    $362 = HEAP32[$nd1528 >> 2] | 0;
    $nd1530 = $yyvsp_2 | 0;
    $363 = HEAP32[$nd1530 >> 2] | 0;
    _call_with_block($p, $362, $363);
    $364 = HEAP32[$nd1528 >> 2] | 0;
    HEAP32[$4 >> 2] = $364;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 281:
    _local_nest($p);
    $365 = HEAP32[$lpar_beg >> 2] | 0;
    $_c1312 = $365;
    HEAP32[$4 >> 2] = $_c1312;
    $366 = HEAP32[$paren_nest >> 2] | 0;
    $inc = $366 + 1 | 0;
    HEAP32[$paren_nest >> 2] = $inc;
    HEAP32[$lpar_beg >> 2] = $inc;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 282:
    $arrayidx1537 = $yyvsp_2 - 8 | 0;
    $num1538 = $arrayidx1537;
    $367 = HEAP32[$num1538 >> 2] | 0;
    HEAP32[$lpar_beg1539 >> 2] = $367;
    $nd1541 = $yyvsp_2 - 4 | 0;
    $368 = HEAP32[$nd1541 >> 2] | 0;
    $nd1543 = $yyvsp_2 | 0;
    $369 = HEAP32[$nd1543 >> 2] | 0;
    $call1544 = _new_lambda($p, $368, $369) | 0;
    HEAP32[$4 >> 2] = $call1544;
    _local_unnest($p);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 283:
    $nd1548 = $yyvsp_2 - 16 | 0;
    $370 = HEAP32[$nd1548 >> 2] | 0;
    $call1549 = _cond($370) | 0;
    $nd1551 = $yyvsp_2 - 8 | 0;
    $371 = HEAP32[$nd1551 >> 2] | 0;
    $nd1553 = $yyvsp_2 - 4 | 0;
    $372 = HEAP32[$nd1553 >> 2] | 0;
    $call1554 = _new_if($p, $call1549, $371, $372) | 0;
    HEAP32[$4 >> 2] = $call1554;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 284:
    $nd1558 = $yyvsp_2 - 16 | 0;
    $373 = HEAP32[$nd1558 >> 2] | 0;
    $call1559 = _cond($373) | 0;
    $nd1561 = $yyvsp_2 - 8 | 0;
    $374 = HEAP32[$nd1561 >> 2] | 0;
    $nd1563 = $yyvsp_2 - 4 | 0;
    $375 = HEAP32[$nd1563 >> 2] | 0;
    $call1564 = _new_unless($p, $call1559, $374, $375) | 0;
    HEAP32[$4 >> 2] = $call1564;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 285:
    $376 = HEAP32[$cond_stack >> 2] | 0;
    $shl1567 = $376 << 1;
    $or1568 = $shl1567 | 1;
    HEAP32[$cond_stack >> 2] = $or1568;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 286:
    $377 = HEAP32[$cond_stack1571 >> 2] | 0;
    $shr = $377 >>> 1;
    HEAP32[$cond_stack1571 >> 2] = $shr;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 287:
    $nd1575 = $yyvsp_2 - 16 | 0;
    $378 = HEAP32[$nd1575 >> 2] | 0;
    $call1576 = _cond($378) | 0;
    $nd1578 = $yyvsp_2 - 4 | 0;
    $379 = HEAP32[$nd1578 >> 2] | 0;
    $call1579 = _new_while($p, $call1576, $379) | 0;
    HEAP32[$4 >> 2] = $call1579;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 288:
    $380 = HEAP32[$cond_stack1582 >> 2] | 0;
    $shl1583 = $380 << 1;
    $or1584 = $shl1583 | 1;
    HEAP32[$cond_stack1582 >> 2] = $or1584;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 289:
    $381 = HEAP32[$cond_stack1587 >> 2] | 0;
    $shr1588 = $381 >>> 1;
    HEAP32[$cond_stack1587 >> 2] = $shr1588;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 290:
    $nd1592 = $yyvsp_2 - 16 | 0;
    $382 = HEAP32[$nd1592 >> 2] | 0;
    $call1593 = _cond($382) | 0;
    $nd1595 = $yyvsp_2 - 4 | 0;
    $383 = HEAP32[$nd1595 >> 2] | 0;
    $call1596 = _new_until($p, $call1593, $383) | 0;
    HEAP32[$4 >> 2] = $call1596;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 291:
    $nd1600 = $yyvsp_2 - 12 | 0;
    $384 = HEAP32[$nd1600 >> 2] | 0;
    $nd1602 = $yyvsp_2 - 4 | 0;
    $385 = HEAP32[$nd1602 >> 2] | 0;
    $call1603 = _new_case($p, $384, $385) | 0;
    HEAP32[$4 >> 2] = $call1603;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 292:
    $nd1607 = $yyvsp_2 - 4 | 0;
    $386 = HEAP32[$nd1607 >> 2] | 0;
    $call1608 = _new_case($p, 0, $386) | 0;
    HEAP32[$4 >> 2] = $call1608;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 293:
    $387 = HEAP32[$cond_stack1611 >> 2] | 0;
    $shl1612 = $387 << 1;
    $or1613 = $shl1612 | 1;
    HEAP32[$cond_stack1611 >> 2] = $or1613;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 294:
    $388 = HEAP32[$cond_stack1616 >> 2] | 0;
    $shr1617 = $388 >>> 1;
    HEAP32[$cond_stack1616 >> 2] = $shr1617;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 295:
    $nd1621 = $yyvsp_2 - 28 | 0;
    $389 = HEAP32[$nd1621 >> 2] | 0;
    $nd1623 = $yyvsp_2 - 16 | 0;
    $390 = HEAP32[$nd1623 >> 2] | 0;
    $nd1625 = $yyvsp_2 - 4 | 0;
    $391 = HEAP32[$nd1625 >> 2] | 0;
    $call1626 = _new_for($p, $389, $390, $391) | 0;
    HEAP32[$4 >> 2] = $call1626;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 296:
    $392 = HEAP32[$in_def1629 >> 2] | 0;
    $tobool1630 = ($392 | 0) == 0;
    if ($tobool1630) {
      label = 297;
      break;
    } else {
      label = 298;
      break;
    }
   case 297:
    $393 = HEAP32[$in_single1632 >> 2] | 0;
    $tobool1633 = ($393 | 0) == 0;
    if ($tobool1633) {
      label = 299;
      break;
    } else {
      label = 298;
      break;
    }
   case 298:
    _yyerror($p, 99604);
    label = 299;
    break;
   case 299:
    $call1636 = _local_switch($p) | 0;
    HEAP32[$4 >> 2] = $call1636;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 300:
    $nd1640 = $yyvsp_2 - 16 | 0;
    $394 = HEAP32[$nd1640 >> 2] | 0;
    $nd1642 = $yyvsp_2 - 12 | 0;
    $395 = HEAP32[$nd1642 >> 2] | 0;
    $nd1644 = $yyvsp_2 - 4 | 0;
    $396 = HEAP32[$nd1644 >> 2] | 0;
    $call1645 = _new_class($p, $394, $395, $396) | 0;
    HEAP32[$4 >> 2] = $call1645;
    $nd1648 = $yyvsp_2 - 8 | 0;
    $397 = HEAP32[$nd1648 >> 2] | 0;
    _local_resume($p, $397);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 301:
    $398 = HEAP32[$in_def1650 >> 2] | 0;
    $_c = $398;
    HEAP32[$4 >> 2] = $_c;
    HEAP32[$in_def1650 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 302:
    $call1654 = _local_switch($p) | 0;
    $399 = HEAP32[$in_single1655 >> 2] | 0;
    $400 = $399;
    $call1656 = _cons_gen($p, $call1654, $400) | 0;
    HEAP32[$4 >> 2] = $call1656;
    HEAP32[$in_single1655 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 303:
    $nd1661 = $yyvsp_2 - 20 | 0;
    $401 = HEAP32[$nd1661 >> 2] | 0;
    $nd1663 = $yyvsp_2 - 4 | 0;
    $402 = HEAP32[$nd1663 >> 2] | 0;
    $call1664 = _new_sclass($p, $401, $402) | 0;
    HEAP32[$4 >> 2] = $call1664;
    $nd1667 = $yyvsp_2 - 8 | 0;
    $403 = HEAP32[$nd1667 >> 2] | 0;
    $car = $403 | 0;
    $404 = HEAP32[$car >> 2] | 0;
    _local_resume($p, $404);
    $arrayidx1668 = $yyvsp_2 - 16 | 0;
    $num1669 = $arrayidx1668;
    $405 = HEAP32[$num1669 >> 2] | 0;
    HEAP32[$in_def1670 >> 2] = $405;
    $406 = HEAP32[$nd1667 >> 2] | 0;
    $cdr = $406 + 4 | 0;
    $407 = HEAP32[$cdr >> 2] | 0;
    $408 = $407;
    HEAP32[$in_single1673 >> 2] = $408;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 304:
    $409 = HEAP32[$in_def1675 >> 2] | 0;
    $tobool1676 = ($409 | 0) == 0;
    if ($tobool1676) {
      label = 305;
      break;
    } else {
      label = 306;
      break;
    }
   case 305:
    $410 = HEAP32[$in_single1678 >> 2] | 0;
    $tobool1679 = ($410 | 0) == 0;
    if ($tobool1679) {
      label = 307;
      break;
    } else {
      label = 306;
      break;
    }
   case 306:
    _yyerror($p, 99324);
    label = 307;
    break;
   case 307:
    $call1682 = _local_switch($p) | 0;
    HEAP32[$4 >> 2] = $call1682;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 308:
    $nd1686 = $yyvsp_2 - 12 | 0;
    $411 = HEAP32[$nd1686 >> 2] | 0;
    $nd1688 = $yyvsp_2 - 4 | 0;
    $412 = HEAP32[$nd1688 >> 2] | 0;
    $call1689 = _new_module($p, $411, $412) | 0;
    HEAP32[$4 >> 2] = $call1689;
    $nd1692 = $yyvsp_2 - 8 | 0;
    $413 = HEAP32[$nd1692 >> 2] | 0;
    _local_resume($p, $413);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 309:
    $414 = HEAP32[$in_def1694 >> 2] | 0;
    $inc1695 = $414 + 1 | 0;
    HEAP32[$in_def1694 >> 2] = $inc1695;
    $call1696 = _local_switch($p) | 0;
    HEAP32[$4 >> 2] = $call1696;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 310:
    $arrayidx1699 = $yyvsp_2 - 16 | 0;
    $id1700 = $arrayidx1699;
    $415 = HEAP16[$id1700 >> 1] | 0;
    $nd1702 = $yyvsp_2 - 8 | 0;
    $416 = HEAP32[$nd1702 >> 2] | 0;
    $nd1704 = $yyvsp_2 - 4 | 0;
    $417 = HEAP32[$nd1704 >> 2] | 0;
    $call1705 = _new_def($p, $415, $416, $417) | 0;
    HEAP32[$4 >> 2] = $call1705;
    $nd1708 = $yyvsp_2 - 12 | 0;
    $418 = HEAP32[$nd1708 >> 2] | 0;
    _local_resume($p, $418);
    $419 = HEAP32[$in_def1709 >> 2] | 0;
    $dec1710 = $419 - 1 | 0;
    HEAP32[$in_def1709 >> 2] = $dec1710;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 311:
    HEAP32[$lstate1712 >> 2] = 7;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 312:
    $420 = HEAP32[$in_single1714 >> 2] | 0;
    $inc1715 = $420 + 1 | 0;
    HEAP32[$in_single1714 >> 2] = $inc1715;
    HEAP32[$lstate1716 >> 2] = 3;
    $call1717 = _local_switch($p) | 0;
    HEAP32[$4 >> 2] = $call1717;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 313:
    $nd1721 = $yyvsp_2 - 28 | 0;
    $421 = HEAP32[$nd1721 >> 2] | 0;
    $arrayidx1722 = $yyvsp_2 - 16 | 0;
    $id1723 = $arrayidx1722;
    $422 = HEAP16[$id1723 >> 1] | 0;
    $nd1725 = $yyvsp_2 - 8 | 0;
    $423 = HEAP32[$nd1725 >> 2] | 0;
    $nd1727 = $yyvsp_2 - 4 | 0;
    $424 = HEAP32[$nd1727 >> 2] | 0;
    $call1728 = _new_sdef($p, $421, $422, $423, $424) | 0;
    HEAP32[$4 >> 2] = $call1728;
    $nd1731 = $yyvsp_2 - 12 | 0;
    $425 = HEAP32[$nd1731 >> 2] | 0;
    _local_resume($p, $425);
    $426 = HEAP32[$in_single1732 >> 2] | 0;
    $dec1733 = $426 - 1 | 0;
    HEAP32[$in_single1732 >> 2] = $dec1733;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 314:
    $call1735 = _new_break($p, 0) | 0;
    HEAP32[$4 >> 2] = $call1735;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 315:
    $call1738 = _new_next($p, 0) | 0;
    HEAP32[$4 >> 2] = $call1738;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 316:
    $call1741 = _new_redo($p) | 0;
    HEAP32[$4 >> 2] = $call1741;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 317:
    $call1744 = _new_retry($p) | 0;
    HEAP32[$4 >> 2] = $call1744;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 318:
    $nd1748 = $yyvsp_2 | 0;
    $427 = HEAP32[$nd1748 >> 2] | 0;
    HEAP32[$4 >> 2] = $427;
    $tobool1751 = ($427 | 0) == 0;
    if ($tobool1751) {
      label = 319;
      break;
    } else {
      $yyerrstatus_3 = $yyerrstatus_1;
      label = 491;
      break;
    }
   case 319:
    $call1753 = _new_nil($p) | 0;
    HEAP32[$4 >> 2] = $call1753;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 320:
    $nd1758 = $yyvsp_2 - 12 | 0;
    $428 = HEAP32[$nd1758 >> 2] | 0;
    $call1759 = _cond($428) | 0;
    $nd1761 = $yyvsp_2 - 4 | 0;
    $429 = HEAP32[$nd1761 >> 2] | 0;
    $nd1763 = $yyvsp_2 | 0;
    $430 = HEAP32[$nd1763 >> 2] | 0;
    $call1764 = _new_if($p, $call1759, $429, $430) | 0;
    HEAP32[$4 >> 2] = $call1764;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 321:
    $nd1768 = $yyvsp_2 | 0;
    $431 = HEAP32[$nd1768 >> 2] | 0;
    HEAP32[$4 >> 2] = $431;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 322:
    $nd1772 = $yyvsp_2 | 0;
    $432 = HEAP32[$nd1772 >> 2] | 0;
    $call1773 = _list1_gen($p, $432) | 0;
    $call1774 = _list1_gen($p, $call1773) | 0;
    HEAP32[$4 >> 2] = $call1774;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 323:
    $id1778 = $yyvsp_2;
    $433 = HEAP16[$id1778 >> 1] | 0;
    $call1779 = _new_arg($p, $433) | 0;
    HEAP32[$4 >> 2] = $call1779;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 324:
    $nd1783 = $yyvsp_2 - 4 | 0;
    $434 = HEAP32[$nd1783 >> 2] | 0;
    $call1784 = _new_masgn($p, $434, 0) | 0;
    HEAP32[$4 >> 2] = $call1784;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 325:
    $nd1788 = $yyvsp_2 | 0;
    $435 = HEAP32[$nd1788 >> 2] | 0;
    $call1789 = _list1_gen($p, $435) | 0;
    HEAP32[$4 >> 2] = $call1789;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 326:
    $nd1793 = $yyvsp_2 - 8 | 0;
    $436 = HEAP32[$nd1793 >> 2] | 0;
    $nd1795 = $yyvsp_2 | 0;
    $437 = HEAP32[$nd1795 >> 2] | 0;
    $call1796 = _list1_gen($p, $437) | 0;
    $call1797 = _append_gen($436, $call1796) | 0;
    HEAP32[$4 >> 2] = $call1797;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 327:
    $nd1801 = $yyvsp_2 | 0;
    $438 = HEAP32[$nd1801 >> 2] | 0;
    $call1802 = _list3_gen($p, $438, 0, 0) | 0;
    HEAP32[$4 >> 2] = $call1802;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 328:
    $nd1806 = $yyvsp_2 - 12 | 0;
    $439 = HEAP32[$nd1806 >> 2] | 0;
    $id1808 = $yyvsp_2;
    $440 = HEAP16[$id1808 >> 1] | 0;
    $call1809 = _new_arg($p, $440) | 0;
    $call1810 = _list3_gen($p, $439, $call1809, 0) | 0;
    HEAP32[$4 >> 2] = $call1810;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 329:
    $nd1814 = $yyvsp_2 - 20 | 0;
    $441 = HEAP32[$nd1814 >> 2] | 0;
    $arrayidx1815 = $yyvsp_2 - 8 | 0;
    $id1816 = $arrayidx1815;
    $442 = HEAP16[$id1816 >> 1] | 0;
    $call1817 = _new_arg($p, $442) | 0;
    $nd1819 = $yyvsp_2 | 0;
    $443 = HEAP32[$nd1819 >> 2] | 0;
    $call1820 = _list3_gen($p, $441, $call1817, $443) | 0;
    HEAP32[$4 >> 2] = $call1820;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 330:
    $nd1824 = $yyvsp_2 - 8 | 0;
    $444 = HEAP32[$nd1824 >> 2] | 0;
    $call1825 = _list3_gen($p, $444, -1, 0) | 0;
    HEAP32[$4 >> 2] = $call1825;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 331:
    $nd1829 = $yyvsp_2 - 16 | 0;
    $445 = HEAP32[$nd1829 >> 2] | 0;
    $nd1831 = $yyvsp_2 | 0;
    $446 = HEAP32[$nd1831 >> 2] | 0;
    $call1832 = _list3_gen($p, $445, -1, $446) | 0;
    HEAP32[$4 >> 2] = $call1832;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 332:
    $id1836 = $yyvsp_2;
    $447 = HEAP16[$id1836 >> 1] | 0;
    $call1837 = _new_arg($p, $447) | 0;
    $call1838 = _list3_gen($p, 0, $call1837, 0) | 0;
    HEAP32[$4 >> 2] = $call1838;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 333:
    $arrayidx1841 = $yyvsp_2 - 8 | 0;
    $id1842 = $arrayidx1841;
    $448 = HEAP16[$id1842 >> 1] | 0;
    $call1843 = _new_arg($p, $448) | 0;
    $nd1845 = $yyvsp_2 | 0;
    $449 = HEAP32[$nd1845 >> 2] | 0;
    $call1846 = _list3_gen($p, 0, $call1843, $449) | 0;
    HEAP32[$4 >> 2] = $call1846;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 334:
    $call1849 = _list3_gen($p, 0, -1, 0) | 0;
    HEAP32[$4 >> 2] = $call1849;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 335:
    $nd1853 = $yyvsp_2 | 0;
    $450 = HEAP32[$nd1853 >> 2] | 0;
    $call1854 = _list3_gen($p, 0, -1, $450) | 0;
    HEAP32[$4 >> 2] = $call1854;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 336:
    $nd1858 = $yyvsp_2 - 20 | 0;
    $451 = HEAP32[$nd1858 >> 2] | 0;
    $nd1860 = $yyvsp_2 - 12 | 0;
    $452 = HEAP32[$nd1860 >> 2] | 0;
    $arrayidx1861 = $yyvsp_2 - 4 | 0;
    $id1862 = $arrayidx1861;
    $453 = HEAP16[$id1862 >> 1] | 0;
    $id1864 = $yyvsp_2;
    $454 = HEAP16[$id1864 >> 1] | 0;
    $call1865 = _new_args($p, $451, $452, $453, 0, $454) | 0;
    HEAP32[$4 >> 2] = $call1865;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 337:
    $nd1869 = $yyvsp_2 - 28 | 0;
    $455 = HEAP32[$nd1869 >> 2] | 0;
    $nd1871 = $yyvsp_2 - 20 | 0;
    $456 = HEAP32[$nd1871 >> 2] | 0;
    $arrayidx1872 = $yyvsp_2 - 12 | 0;
    $id1873 = $arrayidx1872;
    $457 = HEAP16[$id1873 >> 1] | 0;
    $nd1875 = $yyvsp_2 - 4 | 0;
    $458 = HEAP32[$nd1875 >> 2] | 0;
    $id1877 = $yyvsp_2;
    $459 = HEAP16[$id1877 >> 1] | 0;
    $call1878 = _new_args($p, $455, $456, $457, $458, $459) | 0;
    HEAP32[$4 >> 2] = $call1878;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 338:
    $nd1882 = $yyvsp_2 - 12 | 0;
    $460 = HEAP32[$nd1882 >> 2] | 0;
    $nd1884 = $yyvsp_2 - 4 | 0;
    $461 = HEAP32[$nd1884 >> 2] | 0;
    $id1886 = $yyvsp_2;
    $462 = HEAP16[$id1886 >> 1] | 0;
    $call1887 = _new_args($p, $460, $461, 0, 0, $462) | 0;
    HEAP32[$4 >> 2] = $call1887;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 339:
    $nd1891 = $yyvsp_2 - 20 | 0;
    $463 = HEAP32[$nd1891 >> 2] | 0;
    $nd1893 = $yyvsp_2 - 12 | 0;
    $464 = HEAP32[$nd1893 >> 2] | 0;
    $nd1895 = $yyvsp_2 - 4 | 0;
    $465 = HEAP32[$nd1895 >> 2] | 0;
    $id1897 = $yyvsp_2;
    $466 = HEAP16[$id1897 >> 1] | 0;
    $call1898 = _new_args($p, $463, $464, 0, $465, $466) | 0;
    HEAP32[$4 >> 2] = $call1898;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 340:
    $nd1902 = $yyvsp_2 - 12 | 0;
    $467 = HEAP32[$nd1902 >> 2] | 0;
    $arrayidx1903 = $yyvsp_2 - 4 | 0;
    $id1904 = $arrayidx1903;
    $468 = HEAP16[$id1904 >> 1] | 0;
    $id1906 = $yyvsp_2;
    $469 = HEAP16[$id1906 >> 1] | 0;
    $call1907 = _new_args($p, $467, 0, $468, 0, $469) | 0;
    HEAP32[$4 >> 2] = $call1907;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 341:
    $nd1911 = $yyvsp_2 - 4 | 0;
    $470 = HEAP32[$nd1911 >> 2] | 0;
    $call1912 = _new_args($p, $470, 0, 1, 0, 0) | 0;
    HEAP32[$4 >> 2] = $call1912;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 342:
    $nd1916 = $yyvsp_2 - 20 | 0;
    $471 = HEAP32[$nd1916 >> 2] | 0;
    $arrayidx1917 = $yyvsp_2 - 12 | 0;
    $id1918 = $arrayidx1917;
    $472 = HEAP16[$id1918 >> 1] | 0;
    $nd1920 = $yyvsp_2 - 4 | 0;
    $473 = HEAP32[$nd1920 >> 2] | 0;
    $id1922 = $yyvsp_2;
    $474 = HEAP16[$id1922 >> 1] | 0;
    $call1923 = _new_args($p, $471, 0, $472, $473, $474) | 0;
    HEAP32[$4 >> 2] = $call1923;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 343:
    $nd1927 = $yyvsp_2 - 4 | 0;
    $475 = HEAP32[$nd1927 >> 2] | 0;
    $id1929 = $yyvsp_2;
    $476 = HEAP16[$id1929 >> 1] | 0;
    $call1930 = _new_args($p, $475, 0, 0, 0, $476) | 0;
    HEAP32[$4 >> 2] = $call1930;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 344:
    $nd1934 = $yyvsp_2 - 12 | 0;
    $477 = HEAP32[$nd1934 >> 2] | 0;
    $arrayidx1935 = $yyvsp_2 - 4 | 0;
    $id1936 = $arrayidx1935;
    $478 = HEAP16[$id1936 >> 1] | 0;
    $id1938 = $yyvsp_2;
    $479 = HEAP16[$id1938 >> 1] | 0;
    $call1939 = _new_args($p, 0, $477, $478, 0, $479) | 0;
    HEAP32[$4 >> 2] = $call1939;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 345:
    $nd1943 = $yyvsp_2 - 20 | 0;
    $480 = HEAP32[$nd1943 >> 2] | 0;
    $arrayidx1944 = $yyvsp_2 - 12 | 0;
    $id1945 = $arrayidx1944;
    $481 = HEAP16[$id1945 >> 1] | 0;
    $nd1947 = $yyvsp_2 - 4 | 0;
    $482 = HEAP32[$nd1947 >> 2] | 0;
    $id1949 = $yyvsp_2;
    $483 = HEAP16[$id1949 >> 1] | 0;
    $call1950 = _new_args($p, 0, $480, $481, $482, $483) | 0;
    HEAP32[$4 >> 2] = $call1950;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 346:
    $nd1954 = $yyvsp_2 - 4 | 0;
    $484 = HEAP32[$nd1954 >> 2] | 0;
    $id1956 = $yyvsp_2;
    $485 = HEAP16[$id1956 >> 1] | 0;
    $call1957 = _new_args($p, 0, $484, 0, 0, $485) | 0;
    HEAP32[$4 >> 2] = $call1957;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 347:
    $nd1961 = $yyvsp_2 - 12 | 0;
    $486 = HEAP32[$nd1961 >> 2] | 0;
    $nd1963 = $yyvsp_2 - 4 | 0;
    $487 = HEAP32[$nd1963 >> 2] | 0;
    $id1965 = $yyvsp_2;
    $488 = HEAP16[$id1965 >> 1] | 0;
    $call1966 = _new_args($p, 0, $486, 0, $487, $488) | 0;
    HEAP32[$4 >> 2] = $call1966;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 348:
    $arrayidx1969 = $yyvsp_2 - 4 | 0;
    $id1970 = $arrayidx1969;
    $489 = HEAP16[$id1970 >> 1] | 0;
    $id1972 = $yyvsp_2;
    $490 = HEAP16[$id1972 >> 1] | 0;
    $call1973 = _new_args($p, 0, 0, $489, 0, $490) | 0;
    HEAP32[$4 >> 2] = $call1973;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 349:
    $arrayidx1976 = $yyvsp_2 - 12 | 0;
    $id1977 = $arrayidx1976;
    $491 = HEAP16[$id1977 >> 1] | 0;
    $nd1979 = $yyvsp_2 - 4 | 0;
    $492 = HEAP32[$nd1979 >> 2] | 0;
    $id1981 = $yyvsp_2;
    $493 = HEAP16[$id1981 >> 1] | 0;
    $call1982 = _new_args($p, 0, 0, $491, $492, $493) | 0;
    HEAP32[$4 >> 2] = $call1982;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 350:
    $id1986 = $yyvsp_2;
    $494 = HEAP16[$id1986 >> 1] | 0;
    $call1987 = _new_args($p, 0, 0, 0, 0, $494) | 0;
    HEAP32[$4 >> 2] = $call1987;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 351:
    HEAP32[$cmd_start >> 2] = 1;
    $nd1991 = $yyvsp_2 | 0;
    $495 = HEAP32[$nd1991 >> 2] | 0;
    HEAP32[$4 >> 2] = $495;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 352:
    _local_add_f($p, 0);
    HEAP32[$4 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 353:
    _local_add_f($p, 0);
    HEAP32[$4 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 354:
    $nd1999 = $yyvsp_2 - 8 | 0;
    $496 = HEAP32[$nd1999 >> 2] | 0;
    HEAP32[$4 >> 2] = $496;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 355:
    HEAP32[$4 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 356:
    HEAP32[$4 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 357:
    $id2007 = $yyvsp_2;
    $497 = HEAP16[$id2007 >> 1] | 0;
    _local_add_f($p, $497);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 358:
    $nd2012 = $yyvsp_2 - 8 | 0;
    $498 = HEAP32[$nd2012 >> 2] | 0;
    HEAP32[$4 >> 2] = $498;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 359:
    $nd2016 = $yyvsp_2 | 0;
    $499 = HEAP32[$nd2016 >> 2] | 0;
    HEAP32[$4 >> 2] = $499;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 360:
    $nd2020 = $yyvsp_2 - 4 | 0;
    $500 = HEAP32[$nd2020 >> 2] | 0;
    HEAP32[$4 >> 2] = $500;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 361:
    $nd2024 = $yyvsp_2 - 4 | 0;
    $501 = HEAP32[$nd2024 >> 2] | 0;
    HEAP32[$4 >> 2] = $501;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 362:
    _local_nest($p);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 363:
    $nd2029 = $yyvsp_2 - 8 | 0;
    $502 = HEAP32[$nd2029 >> 2] | 0;
    $nd2031 = $yyvsp_2 - 4 | 0;
    $503 = HEAP32[$nd2031 >> 2] | 0;
    $call2032 = _new_block($p, $502, $503) | 0;
    HEAP32[$4 >> 2] = $call2032;
    _local_unnest($p);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 364:
    $nd2036 = $yyvsp_2 - 4 | 0;
    $504 = HEAP32[$nd2036 >> 2] | 0;
    $car2037 = $504 | 0;
    $505 = HEAP32[$car2037 >> 2] | 0;
    $cmp2038 = ($505 | 0) == 38;
    if ($cmp2038) {
      label = 365;
      break;
    } else {
      label = 366;
      break;
    }
   case 365:
    _yyerror($p, 99080);
    label = 367;
    break;
   case 366:
    $nd2045 = $yyvsp_2 | 0;
    $506 = HEAP32[$nd2045 >> 2] | 0;
    _call_with_block($p, $504, $506);
    label = 367;
    break;
   case 367:
    $507 = HEAP32[$nd2036 >> 2] | 0;
    HEAP32[$4 >> 2] = $507;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 368:
    $nd2052 = $yyvsp_2 - 12 | 0;
    $508 = HEAP32[$nd2052 >> 2] | 0;
    $arrayidx2053 = $yyvsp_2 - 4 | 0;
    $id2054 = $arrayidx2053;
    $509 = HEAP16[$id2054 >> 1] | 0;
    $nd2056 = $yyvsp_2 | 0;
    $510 = HEAP32[$nd2056 >> 2] | 0;
    $call2057 = _new_call($p, $508, $509, $510) | 0;
    HEAP32[$4 >> 2] = $call2057;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 369:
    $nd2061 = $yyvsp_2 - 16 | 0;
    $511 = HEAP32[$nd2061 >> 2] | 0;
    $arrayidx2062 = $yyvsp_2 - 8 | 0;
    $id2063 = $arrayidx2062;
    $512 = HEAP16[$id2063 >> 1] | 0;
    $nd2065 = $yyvsp_2 - 4 | 0;
    $513 = HEAP32[$nd2065 >> 2] | 0;
    $call2066 = _new_call($p, $511, $512, $513) | 0;
    HEAP32[$4 >> 2] = $call2066;
    $nd2070 = $yyvsp_2 | 0;
    $514 = HEAP32[$nd2070 >> 2] | 0;
    _call_with_block($p, $call2066, $514);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 370:
    $nd2073 = $yyvsp_2 - 16 | 0;
    $515 = HEAP32[$nd2073 >> 2] | 0;
    $arrayidx2074 = $yyvsp_2 - 8 | 0;
    $id2075 = $arrayidx2074;
    $516 = HEAP16[$id2075 >> 1] | 0;
    $nd2077 = $yyvsp_2 - 4 | 0;
    $517 = HEAP32[$nd2077 >> 2] | 0;
    $call2078 = _new_call($p, $515, $516, $517) | 0;
    HEAP32[$4 >> 2] = $call2078;
    $nd2082 = $yyvsp_2 | 0;
    $518 = HEAP32[$nd2082 >> 2] | 0;
    _call_with_block($p, $call2078, $518);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 371:
    $arrayidx2084 = $yyvsp_2 - 4 | 0;
    $id2085 = $arrayidx2084;
    $519 = HEAP16[$id2085 >> 1] | 0;
    $nd2087 = $yyvsp_2 | 0;
    $520 = HEAP32[$nd2087 >> 2] | 0;
    $call2088 = _new_fcall($p, $519, $520) | 0;
    HEAP32[$4 >> 2] = $call2088;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 372:
    $nd2092 = $yyvsp_2 - 12 | 0;
    $521 = HEAP32[$nd2092 >> 2] | 0;
    $arrayidx2093 = $yyvsp_2 - 4 | 0;
    $id2094 = $arrayidx2093;
    $522 = HEAP16[$id2094 >> 1] | 0;
    $nd2096 = $yyvsp_2 | 0;
    $523 = HEAP32[$nd2096 >> 2] | 0;
    $call2097 = _new_call($p, $521, $522, $523) | 0;
    HEAP32[$4 >> 2] = $call2097;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 373:
    $nd2101 = $yyvsp_2 - 12 | 0;
    $524 = HEAP32[$nd2101 >> 2] | 0;
    $arrayidx2102 = $yyvsp_2 - 4 | 0;
    $id2103 = $arrayidx2102;
    $525 = HEAP16[$id2103 >> 1] | 0;
    $nd2105 = $yyvsp_2 | 0;
    $526 = HEAP32[$nd2105 >> 2] | 0;
    $call2106 = _new_call($p, $524, $525, $526) | 0;
    HEAP32[$4 >> 2] = $call2106;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 374:
    $nd2110 = $yyvsp_2 - 8 | 0;
    $527 = HEAP32[$nd2110 >> 2] | 0;
    $id2112 = $yyvsp_2;
    $528 = HEAP16[$id2112 >> 1] | 0;
    $call2113 = _new_call($p, $527, $528, 0) | 0;
    HEAP32[$4 >> 2] = $call2113;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 375:
    $nd2117 = $yyvsp_2 - 8 | 0;
    $529 = HEAP32[$nd2117 >> 2] | 0;
    $call2118 = _intern_gen2($p, 98832, 4) | 0;
    $nd2120 = $yyvsp_2 | 0;
    $530 = HEAP32[$nd2120 >> 2] | 0;
    $call2121 = _new_call($p, $529, $call2118, $530) | 0;
    HEAP32[$4 >> 2] = $call2121;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 376:
    $nd2125 = $yyvsp_2 - 8 | 0;
    $531 = HEAP32[$nd2125 >> 2] | 0;
    $call2126 = _intern_gen2($p, 98832, 4) | 0;
    $nd2128 = $yyvsp_2 | 0;
    $532 = HEAP32[$nd2128 >> 2] | 0;
    $call2129 = _new_call($p, $531, $call2126, $532) | 0;
    HEAP32[$4 >> 2] = $call2129;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 377:
    $nd2133 = $yyvsp_2 | 0;
    $533 = HEAP32[$nd2133 >> 2] | 0;
    $call2134 = _new_super($p, $533) | 0;
    HEAP32[$4 >> 2] = $call2134;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 378:
    $call2137 = _new_zsuper($p) | 0;
    HEAP32[$4 >> 2] = $call2137;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 379:
    $nd2141 = $yyvsp_2 - 12 | 0;
    $534 = HEAP32[$nd2141 >> 2] | 0;
    $call2142 = _intern_gen2($p, 110068, 2) | 0;
    $nd2144 = $yyvsp_2 - 4 | 0;
    $535 = HEAP32[$nd2144 >> 2] | 0;
    $call2145 = _new_call($p, $534, $call2142, $535) | 0;
    HEAP32[$4 >> 2] = $call2145;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 380:
    _local_nest($p);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 381:
    $nd2150 = $yyvsp_2 - 8 | 0;
    $536 = HEAP32[$nd2150 >> 2] | 0;
    $nd2152 = $yyvsp_2 - 4 | 0;
    $537 = HEAP32[$nd2152 >> 2] | 0;
    $call2153 = _new_block($p, $536, $537) | 0;
    HEAP32[$4 >> 2] = $call2153;
    _local_unnest($p);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 382:
    _local_nest($p);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 383:
    $nd2158 = $yyvsp_2 - 8 | 0;
    $538 = HEAP32[$nd2158 >> 2] | 0;
    $nd2160 = $yyvsp_2 - 4 | 0;
    $539 = HEAP32[$nd2160 >> 2] | 0;
    $call2161 = _new_block($p, $538, $539) | 0;
    HEAP32[$4 >> 2] = $call2161;
    _local_unnest($p);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 384:
    $nd2165 = $yyvsp_2 - 12 | 0;
    $540 = HEAP32[$nd2165 >> 2] | 0;
    $nd2167 = $yyvsp_2 - 4 | 0;
    $541 = HEAP32[$nd2167 >> 2] | 0;
    $call2168 = _cons_gen($p, $540, $541) | 0;
    $nd2170 = $yyvsp_2 | 0;
    $542 = HEAP32[$nd2170 >> 2] | 0;
    $call2171 = _cons_gen($p, $call2168, $542) | 0;
    HEAP32[$4 >> 2] = $call2171;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 385:
    $nd2175 = $yyvsp_2 | 0;
    $543 = HEAP32[$nd2175 >> 2] | 0;
    $tobool2176 = ($543 | 0) == 0;
    if ($tobool2176) {
      label = 387;
      break;
    } else {
      label = 386;
      break;
    }
   case 386:
    $call2180 = _cons_gen($p, 0, $543) | 0;
    $call2181 = _cons_gen($p, $call2180, 0) | 0;
    HEAP32[$4 >> 2] = $call2181;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 387:
    HEAP32[$4 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 388:
    $nd2188 = $yyvsp_2 - 16 | 0;
    $544 = HEAP32[$nd2188 >> 2] | 0;
    $nd2190 = $yyvsp_2 - 12 | 0;
    $545 = HEAP32[$nd2190 >> 2] | 0;
    $nd2192 = $yyvsp_2 - 4 | 0;
    $546 = HEAP32[$nd2192 >> 2] | 0;
    $call2193 = _list3_gen($p, $544, $545, $546) | 0;
    $call2194 = _list1_gen($p, $call2193) | 0;
    HEAP32[$4 >> 2] = $call2194;
    $nd2197 = $yyvsp_2 | 0;
    $547 = HEAP32[$nd2197 >> 2] | 0;
    $tobool2198 = ($547 | 0) == 0;
    if ($tobool2198) {
      $yyerrstatus_3 = $yyerrstatus_1;
      label = 491;
      break;
    } else {
      label = 389;
      break;
    }
   case 389:
    $call2203 = _append_gen($call2194, $547) | 0;
    HEAP32[$4 >> 2] = $call2203;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 390:
    $nd2208 = $yyvsp_2 | 0;
    $548 = HEAP32[$nd2208 >> 2] | 0;
    $call2209 = _list1_gen($p, $548) | 0;
    HEAP32[$4 >> 2] = $call2209;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 391:
    $nd2213 = $yyvsp_2 | 0;
    $549 = HEAP32[$nd2213 >> 2] | 0;
    HEAP32[$4 >> 2] = $549;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 392:
    $nd2217 = $yyvsp_2 | 0;
    $550 = HEAP32[$nd2217 >> 2] | 0;
    HEAP32[$4 >> 2] = $550;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 393:
    $nd2221 = $yyvsp_2 | 0;
    $551 = HEAP32[$nd2221 >> 2] | 0;
    HEAP32[$4 >> 2] = $551;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 394:
    $nd2225 = $yyvsp_2 - 4 | 0;
    $552 = HEAP32[$nd2225 >> 2] | 0;
    $nd2227 = $yyvsp_2 | 0;
    $553 = HEAP32[$nd2227 >> 2] | 0;
    $call2228 = _list1_gen($p, $553) | 0;
    $call2229 = _append_gen($552, $call2228) | 0;
    $call2230 = _new_dstr($p, $call2229) | 0;
    HEAP32[$4 >> 2] = $call2230;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 395:
    $nd2234 = $yyvsp_2 - 4 | 0;
    $554 = HEAP32[$nd2234 >> 2] | 0;
    $nd2236 = $yyvsp_2 | 0;
    $555 = HEAP32[$nd2236 >> 2] | 0;
    $call2237 = _append_gen($554, $555) | 0;
    HEAP32[$4 >> 2] = $call2237;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 396:
    $nd2241 = $yyvsp_2 | 0;
    $556 = HEAP32[$nd2241 >> 2] | 0;
    $call2242 = _list1_gen($p, $556) | 0;
    HEAP32[$4 >> 2] = $call2242;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 397:
    $557 = HEAP32[$lex_strterm >> 2] | 0;
    HEAP32[$4 >> 2] = $557;
    HEAP32[$lex_strterm >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 398:
    $nd2249 = $yyvsp_2 - 8 | 0;
    $558 = HEAP32[$nd2249 >> 2] | 0;
    HEAP32[$lex_strterm2250 >> 2] = $558;
    $nd2252 = $yyvsp_2 - 12 | 0;
    $559 = HEAP32[$nd2252 >> 2] | 0;
    $nd2254 = $yyvsp_2 - 4 | 0;
    $560 = HEAP32[$nd2254 >> 2] | 0;
    $call2255 = _list2_gen($p, $559, $560) | 0;
    HEAP32[$4 >> 2] = $call2255;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 399:
    $call2258 = _new_literal_delim($p) | 0;
    $call2259 = _list1_gen($p, $call2258) | 0;
    HEAP32[$4 >> 2] = $call2259;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 400:
    $nd2263 = $yyvsp_2 | 0;
    $561 = HEAP32[$nd2263 >> 2] | 0;
    HEAP32[$4 >> 2] = $561;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 401:
    $nd2267 = $yyvsp_2 - 4 | 0;
    $562 = HEAP32[$nd2267 >> 2] | 0;
    $nd2269 = $yyvsp_2 | 0;
    $563 = HEAP32[$nd2269 >> 2] | 0;
    $call2270 = _list1_gen($p, $563) | 0;
    $call2271 = _append_gen($562, $call2270) | 0;
    $call2272 = _new_dxstr($p, $call2271) | 0;
    HEAP32[$4 >> 2] = $call2272;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 402:
    $nd2276 = $yyvsp_2 | 0;
    $564 = HEAP32[$nd2276 >> 2] | 0;
    HEAP32[$4 >> 2] = $564;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 403:
    $nd2280 = $yyvsp_2 - 4 | 0;
    $565 = HEAP32[$nd2280 >> 2] | 0;
    $nd2282 = $yyvsp_2 | 0;
    $566 = HEAP32[$nd2282 >> 2] | 0;
    $call2283 = _new_dregx($p, $565, $566) | 0;
    HEAP32[$4 >> 2] = $call2283;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 404:
    $call2286 = _new_str($p, 98656, 0) | 0;
    $call2287 = _list1_gen($p, $call2286) | 0;
    $call2288 = _parsing_heredoc_inf($p) | 0;
    $doc = $call2288 + 16 | 0;
    HEAP32[$doc >> 2] = $call2287;
    _heredoc_end($p);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 405:
    $nd2291 = $yyvsp_2 - 4 | 0;
    $567 = HEAP32[$nd2291 >> 2] | 0;
    $call2292 = _parsing_heredoc_inf($p) | 0;
    $doc2293 = $call2292 + 16 | 0;
    HEAP32[$doc2293 >> 2] = $567;
    _heredoc_end($p);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 406:
    $nd2296 = $yyvsp_2 | 0;
    $568 = HEAP32[$nd2296 >> 2] | 0;
    $call2297 = _list1_gen($p, $568) | 0;
    $call2298 = _new_words($p, $call2297) | 0;
    HEAP32[$4 >> 2] = $call2298;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 407:
    $nd2302 = $yyvsp_2 - 4 | 0;
    $569 = HEAP32[$nd2302 >> 2] | 0;
    $nd2304 = $yyvsp_2 | 0;
    $570 = HEAP32[$nd2304 >> 2] | 0;
    $call2305 = _list1_gen($p, $570) | 0;
    $call2306 = _append_gen($569, $call2305) | 0;
    $call2307 = _new_words($p, $call2306) | 0;
    HEAP32[$4 >> 2] = $call2307;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 408:
    $id2311 = $yyvsp_2;
    $571 = HEAP16[$id2311 >> 1] | 0;
    $call2312 = _new_sym($p, $571) | 0;
    HEAP32[$4 >> 2] = $call2312;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 409:
    HEAP32[$lstate2315 >> 2] = 1;
    $nd2317 = $yyvsp_2 - 4 | 0;
    $572 = HEAP32[$nd2317 >> 2] | 0;
    $nd2319 = $yyvsp_2 | 0;
    $573 = HEAP32[$nd2319 >> 2] | 0;
    $call2320 = _list1_gen($p, $573) | 0;
    $call2321 = _append_gen($572, $call2320) | 0;
    $call2322 = _new_dsym($p, $call2321) | 0;
    HEAP32[$4 >> 2] = $call2322;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 410:
    HEAP32[$lstate2325 >> 2] = 1;
    $id2327 = $yyvsp_2;
    $574 = HEAP16[$id2327 >> 1] | 0;
    HEAP16[$id2328 >> 1] = $574;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 411:
    $nd2331 = $yyvsp_2 | 0;
    $575 = HEAP32[$nd2331 >> 2] | 0;
    $call2332 = _new_strsym($p, $575) | 0;
    HEAP16[$id2333 >> 1] = $call2332;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 412:
    $nd2336 = $yyvsp_2 | 0;
    $576 = HEAP32[$nd2336 >> 2] | 0;
    $call2337 = _new_strsym($p, $576) | 0;
    HEAP16[$id2338 >> 1] = $call2337;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 413:
    $nd2341 = $yyvsp_2 | 0;
    $577 = HEAP32[$nd2341 >> 2] | 0;
    $call2342 = _list1_gen($p, $577) | 0;
    $call2343 = _new_symbols($p, $call2342) | 0;
    HEAP32[$4 >> 2] = $call2343;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 414:
    $nd2347 = $yyvsp_2 - 4 | 0;
    $578 = HEAP32[$nd2347 >> 2] | 0;
    $nd2349 = $yyvsp_2 | 0;
    $579 = HEAP32[$nd2349 >> 2] | 0;
    $call2350 = _list1_gen($p, $579) | 0;
    $call2351 = _append_gen($578, $call2350) | 0;
    $call2352 = _new_symbols($p, $call2351) | 0;
    HEAP32[$4 >> 2] = $call2352;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 415:
    $nd2356 = $yyvsp_2 | 0;
    $580 = HEAP32[$nd2356 >> 2] | 0;
    $call2357 = _negate_lit($p, $580) | 0;
    HEAP32[$4 >> 2] = $call2357;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 416:
    $nd2361 = $yyvsp_2 | 0;
    $581 = HEAP32[$nd2361 >> 2] | 0;
    $call2362 = _negate_lit($p, $581) | 0;
    HEAP32[$4 >> 2] = $call2362;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 417:
    $id2366 = $yyvsp_2;
    $582 = HEAP16[$id2366 >> 1] | 0;
    $call2367 = _new_lvar($p, $582) | 0;
    HEAP32[$4 >> 2] = $call2367;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 418:
    $id2371 = $yyvsp_2;
    $583 = HEAP16[$id2371 >> 1] | 0;
    $call2372 = _new_ivar($p, $583) | 0;
    HEAP32[$4 >> 2] = $call2372;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 419:
    $id2376 = $yyvsp_2;
    $584 = HEAP16[$id2376 >> 1] | 0;
    $call2377 = _new_gvar($p, $584) | 0;
    HEAP32[$4 >> 2] = $call2377;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 420:
    $id2381 = $yyvsp_2;
    $585 = HEAP16[$id2381 >> 1] | 0;
    $call2382 = _new_cvar($p, $585) | 0;
    HEAP32[$4 >> 2] = $call2382;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 421:
    $id2386 = $yyvsp_2;
    $586 = HEAP16[$id2386 >> 1] | 0;
    $call2387 = _new_const($p, $586) | 0;
    HEAP32[$4 >> 2] = $call2387;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 422:
    $nd2391 = $yyvsp_2 | 0;
    $587 = HEAP32[$nd2391 >> 2] | 0;
    _assignable($p, $587);
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 423:
    $nd2394 = $yyvsp_2 | 0;
    $588 = HEAP32[$nd2394 >> 2] | 0;
    $call2395 = _var_reference($p, $588) | 0;
    HEAP32[$4 >> 2] = $call2395;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 424:
    $call2398 = _new_nil($p) | 0;
    HEAP32[$4 >> 2] = $call2398;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 425:
    $call2401 = _new_self($p) | 0;
    HEAP32[$4 >> 2] = $call2401;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 426:
    $call2404 = _new_true($p) | 0;
    HEAP32[$4 >> 2] = $call2404;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 427:
    $call2407 = _new_false($p) | 0;
    HEAP32[$4 >> 2] = $call2407;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 428:
    $589 = HEAP32[$filename >> 2] | 0;
    $tobool2410 = ($589 | 0) == 0;
    if ($tobool2410) {
      label = 429;
      break;
    } else {
      label = 430;
      break;
    }
   case 429:
    HEAP32[$filename >> 2] = 98484;
    label = 430;
    break;
   case 430:
    $590 = HEAP32[$filename >> 2] | 0;
    $call2416 = _strlen($590 | 0) | 0;
    $call2417 = _new_str($p, $590, $call2416) | 0;
    HEAP32[$4 >> 2] = $call2417;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 431:
    $591 = HEAP32[$lineno >> 2] | 0;
    $call2421 = _snprintf($arraydecay2420 | 0, 16, 98296, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $591, tempInt) | 0) | 0;
    $call2423 = _new_int($p, $arraydecay2420, 10) | 0;
    HEAP32[$4 >> 2] = $call2423;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 432:
    HEAP32[$4 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 433:
    HEAP32[$lstate2428 >> 2] = 0;
    HEAP32[$cmd_start2429 >> 2] = 1;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 434:
    $nd2432 = $yyvsp_2 - 4 | 0;
    $592 = HEAP32[$nd2432 >> 2] | 0;
    HEAP32[$4 >> 2] = $592;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 435:
    HEAP32[$4 >> 2] = 0;
    $yyerrstatus_3 = 0;
    label = 491;
    break;
   case 436:
    $nd2438 = $yyvsp_2 - 4 | 0;
    $593 = HEAP32[$nd2438 >> 2] | 0;
    HEAP32[$4 >> 2] = $593;
    HEAP32[$lstate2440 >> 2] = 0;
    HEAP32[$cmd_start2441 >> 2] = 1;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 437:
    $nd2444 = $yyvsp_2 - 4 | 0;
    $594 = HEAP32[$nd2444 >> 2] | 0;
    HEAP32[$4 >> 2] = $594;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 438:
    $nd2448 = $yyvsp_2 - 20 | 0;
    $595 = HEAP32[$nd2448 >> 2] | 0;
    $nd2450 = $yyvsp_2 - 12 | 0;
    $596 = HEAP32[$nd2450 >> 2] | 0;
    $arrayidx2451 = $yyvsp_2 - 4 | 0;
    $id2452 = $arrayidx2451;
    $597 = HEAP16[$id2452 >> 1] | 0;
    $id2454 = $yyvsp_2;
    $598 = HEAP16[$id2454 >> 1] | 0;
    $call2455 = _new_args($p, $595, $596, $597, 0, $598) | 0;
    HEAP32[$4 >> 2] = $call2455;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 439:
    $nd2459 = $yyvsp_2 - 28 | 0;
    $599 = HEAP32[$nd2459 >> 2] | 0;
    $nd2461 = $yyvsp_2 - 20 | 0;
    $600 = HEAP32[$nd2461 >> 2] | 0;
    $arrayidx2462 = $yyvsp_2 - 12 | 0;
    $id2463 = $arrayidx2462;
    $601 = HEAP16[$id2463 >> 1] | 0;
    $nd2465 = $yyvsp_2 - 4 | 0;
    $602 = HEAP32[$nd2465 >> 2] | 0;
    $id2467 = $yyvsp_2;
    $603 = HEAP16[$id2467 >> 1] | 0;
    $call2468 = _new_args($p, $599, $600, $601, $602, $603) | 0;
    HEAP32[$4 >> 2] = $call2468;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 440:
    $nd2472 = $yyvsp_2 - 12 | 0;
    $604 = HEAP32[$nd2472 >> 2] | 0;
    $nd2474 = $yyvsp_2 - 4 | 0;
    $605 = HEAP32[$nd2474 >> 2] | 0;
    $id2476 = $yyvsp_2;
    $606 = HEAP16[$id2476 >> 1] | 0;
    $call2477 = _new_args($p, $604, $605, 0, 0, $606) | 0;
    HEAP32[$4 >> 2] = $call2477;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 441:
    $nd2481 = $yyvsp_2 - 20 | 0;
    $607 = HEAP32[$nd2481 >> 2] | 0;
    $nd2483 = $yyvsp_2 - 12 | 0;
    $608 = HEAP32[$nd2483 >> 2] | 0;
    $nd2485 = $yyvsp_2 - 4 | 0;
    $609 = HEAP32[$nd2485 >> 2] | 0;
    $id2487 = $yyvsp_2;
    $610 = HEAP16[$id2487 >> 1] | 0;
    $call2488 = _new_args($p, $607, $608, 0, $609, $610) | 0;
    HEAP32[$4 >> 2] = $call2488;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 442:
    $nd2492 = $yyvsp_2 - 12 | 0;
    $611 = HEAP32[$nd2492 >> 2] | 0;
    $arrayidx2493 = $yyvsp_2 - 4 | 0;
    $id2494 = $arrayidx2493;
    $612 = HEAP16[$id2494 >> 1] | 0;
    $id2496 = $yyvsp_2;
    $613 = HEAP16[$id2496 >> 1] | 0;
    $call2497 = _new_args($p, $611, 0, $612, 0, $613) | 0;
    HEAP32[$4 >> 2] = $call2497;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 443:
    $nd2501 = $yyvsp_2 - 20 | 0;
    $614 = HEAP32[$nd2501 >> 2] | 0;
    $arrayidx2502 = $yyvsp_2 - 12 | 0;
    $id2503 = $arrayidx2502;
    $615 = HEAP16[$id2503 >> 1] | 0;
    $nd2505 = $yyvsp_2 - 4 | 0;
    $616 = HEAP32[$nd2505 >> 2] | 0;
    $id2507 = $yyvsp_2;
    $617 = HEAP16[$id2507 >> 1] | 0;
    $call2508 = _new_args($p, $614, 0, $615, $616, $617) | 0;
    HEAP32[$4 >> 2] = $call2508;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 444:
    $nd2512 = $yyvsp_2 - 4 | 0;
    $618 = HEAP32[$nd2512 >> 2] | 0;
    $id2514 = $yyvsp_2;
    $619 = HEAP16[$id2514 >> 1] | 0;
    $call2515 = _new_args($p, $618, 0, 0, 0, $619) | 0;
    HEAP32[$4 >> 2] = $call2515;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 445:
    $nd2519 = $yyvsp_2 - 12 | 0;
    $620 = HEAP32[$nd2519 >> 2] | 0;
    $arrayidx2520 = $yyvsp_2 - 4 | 0;
    $id2521 = $arrayidx2520;
    $621 = HEAP16[$id2521 >> 1] | 0;
    $id2523 = $yyvsp_2;
    $622 = HEAP16[$id2523 >> 1] | 0;
    $call2524 = _new_args($p, 0, $620, $621, 0, $622) | 0;
    HEAP32[$4 >> 2] = $call2524;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 446:
    $nd2528 = $yyvsp_2 - 20 | 0;
    $623 = HEAP32[$nd2528 >> 2] | 0;
    $arrayidx2529 = $yyvsp_2 - 12 | 0;
    $id2530 = $arrayidx2529;
    $624 = HEAP16[$id2530 >> 1] | 0;
    $nd2532 = $yyvsp_2 - 4 | 0;
    $625 = HEAP32[$nd2532 >> 2] | 0;
    $id2534 = $yyvsp_2;
    $626 = HEAP16[$id2534 >> 1] | 0;
    $call2535 = _new_args($p, 0, $623, $624, $625, $626) | 0;
    HEAP32[$4 >> 2] = $call2535;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 447:
    $nd2539 = $yyvsp_2 - 4 | 0;
    $627 = HEAP32[$nd2539 >> 2] | 0;
    $id2541 = $yyvsp_2;
    $628 = HEAP16[$id2541 >> 1] | 0;
    $call2542 = _new_args($p, 0, $627, 0, 0, $628) | 0;
    HEAP32[$4 >> 2] = $call2542;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 448:
    $nd2546 = $yyvsp_2 - 12 | 0;
    $629 = HEAP32[$nd2546 >> 2] | 0;
    $nd2548 = $yyvsp_2 - 4 | 0;
    $630 = HEAP32[$nd2548 >> 2] | 0;
    $id2550 = $yyvsp_2;
    $631 = HEAP16[$id2550 >> 1] | 0;
    $call2551 = _new_args($p, 0, $629, 0, $630, $631) | 0;
    HEAP32[$4 >> 2] = $call2551;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 449:
    $arrayidx2554 = $yyvsp_2 - 4 | 0;
    $id2555 = $arrayidx2554;
    $632 = HEAP16[$id2555 >> 1] | 0;
    $id2557 = $yyvsp_2;
    $633 = HEAP16[$id2557 >> 1] | 0;
    $call2558 = _new_args($p, 0, 0, $632, 0, $633) | 0;
    HEAP32[$4 >> 2] = $call2558;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 450:
    $arrayidx2561 = $yyvsp_2 - 12 | 0;
    $id2562 = $arrayidx2561;
    $634 = HEAP16[$id2562 >> 1] | 0;
    $nd2564 = $yyvsp_2 - 4 | 0;
    $635 = HEAP32[$nd2564 >> 2] | 0;
    $id2566 = $yyvsp_2;
    $636 = HEAP16[$id2566 >> 1] | 0;
    $call2567 = _new_args($p, 0, 0, $634, $635, $636) | 0;
    HEAP32[$4 >> 2] = $call2567;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 451:
    $id2571 = $yyvsp_2;
    $637 = HEAP16[$id2571 >> 1] | 0;
    $call2572 = _new_args($p, 0, 0, 0, 0, $637) | 0;
    HEAP32[$4 >> 2] = $call2572;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 452:
    _local_add_f($p, 0);
    $call2575 = _new_args($p, 0, 0, 0, 0, 0) | 0;
    HEAP32[$4 >> 2] = $call2575;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 453:
    _yyerror($p, 98056);
    HEAP32[$4 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 454:
    _yyerror($p, 97816);
    HEAP32[$4 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 455:
    _yyerror($p, 97528);
    HEAP32[$4 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 456:
    _yyerror($p, 97052);
    HEAP32[$4 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 457:
    HEAP16[$id2586 >> 1] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 458:
    $id2589 = $yyvsp_2;
    $638 = HEAP16[$id2589 >> 1] | 0;
    _local_add_f($p, $638);
    $639 = HEAP16[$id2589 >> 1] | 0;
    HEAP16[$id2592 >> 1] = $639;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 459:
    $id2595 = $yyvsp_2;
    $640 = HEAP16[$id2595 >> 1] | 0;
    $call2596 = _new_arg($p, $640) | 0;
    HEAP32[$4 >> 2] = $call2596;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 460:
    $nd2600 = $yyvsp_2 - 4 | 0;
    $641 = HEAP32[$nd2600 >> 2] | 0;
    $call2601 = _new_masgn($p, $641, 0) | 0;
    HEAP32[$4 >> 2] = $call2601;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 461:
    $nd2605 = $yyvsp_2 | 0;
    $642 = HEAP32[$nd2605 >> 2] | 0;
    $call2606 = _list1_gen($p, $642) | 0;
    HEAP32[$4 >> 2] = $call2606;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 462:
    $nd2610 = $yyvsp_2 - 8 | 0;
    $643 = HEAP32[$nd2610 >> 2] | 0;
    $nd2612 = $yyvsp_2 | 0;
    $644 = HEAP32[$nd2612 >> 2] | 0;
    $call2613 = _list1_gen($p, $644) | 0;
    $call2614 = _append_gen($643, $call2613) | 0;
    HEAP32[$4 >> 2] = $call2614;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 463:
    $arrayidx2617 = $yyvsp_2 - 8 | 0;
    $id2618 = $arrayidx2617;
    $645 = HEAP16[$id2618 >> 1] | 0;
    _local_add_f($p, $645);
    $646 = HEAP16[$id2618 >> 1] | 0;
    $conv2621 = $646 << 16 >> 16;
    $647 = $conv2621;
    $nd2623 = $yyvsp_2 | 0;
    $648 = HEAP32[$nd2623 >> 2] | 0;
    $call2624 = _cons_gen($p, $647, $648) | 0;
    HEAP32[$4 >> 2] = $call2624;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 464:
    $arrayidx2627 = $yyvsp_2 - 8 | 0;
    $id2628 = $arrayidx2627;
    $649 = HEAP16[$id2628 >> 1] | 0;
    _local_add_f($p, $649);
    $650 = HEAP16[$id2628 >> 1] | 0;
    $conv2631 = $650 << 16 >> 16;
    $651 = $conv2631;
    $nd2633 = $yyvsp_2 | 0;
    $652 = HEAP32[$nd2633 >> 2] | 0;
    $call2634 = _cons_gen($p, $651, $652) | 0;
    HEAP32[$4 >> 2] = $call2634;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 465:
    $nd2638 = $yyvsp_2 | 0;
    $653 = HEAP32[$nd2638 >> 2] | 0;
    $call2639 = _list1_gen($p, $653) | 0;
    HEAP32[$4 >> 2] = $call2639;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 466:
    $nd2643 = $yyvsp_2 - 8 | 0;
    $654 = HEAP32[$nd2643 >> 2] | 0;
    $nd2645 = $yyvsp_2 | 0;
    $655 = HEAP32[$nd2645 >> 2] | 0;
    $call2646 = _list1_gen($p, $655) | 0;
    $call2647 = _append_gen($654, $call2646) | 0;
    HEAP32[$4 >> 2] = $call2647;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 467:
    $nd2651 = $yyvsp_2 | 0;
    $656 = HEAP32[$nd2651 >> 2] | 0;
    $call2652 = _list1_gen($p, $656) | 0;
    HEAP32[$4 >> 2] = $call2652;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 468:
    $nd2656 = $yyvsp_2 - 8 | 0;
    $657 = HEAP32[$nd2656 >> 2] | 0;
    $nd2658 = $yyvsp_2 | 0;
    $658 = HEAP32[$nd2658 >> 2] | 0;
    $call2659 = _list1_gen($p, $658) | 0;
    $call2660 = _append_gen($657, $call2659) | 0;
    HEAP32[$4 >> 2] = $call2660;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 469:
    $id2664 = $yyvsp_2;
    $659 = HEAP16[$id2664 >> 1] | 0;
    _local_add_f($p, $659);
    $660 = HEAP16[$id2664 >> 1] | 0;
    HEAP16[$id2667 >> 1] = $660;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 470:
    _local_add_f($p, 0);
    HEAP16[$id2669 >> 1] = -1;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 471:
    $id2672 = $yyvsp_2;
    $661 = HEAP16[$id2672 >> 1] | 0;
    _local_add_f($p, $661);
    $662 = HEAP16[$id2672 >> 1] | 0;
    HEAP16[$id2675 >> 1] = $662;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 472:
    $id2678 = $yyvsp_2;
    $663 = HEAP16[$id2678 >> 1] | 0;
    HEAP16[$id2679 >> 1] = $663;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 473:
    _local_add_f($p, 0);
    HEAP16[$id2681 >> 1] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 474:
    $nd2684 = $yyvsp_2 | 0;
    $664 = HEAP32[$nd2684 >> 2] | 0;
    HEAP32[$4 >> 2] = $664;
    $tobool2687 = ($664 | 0) == 0;
    if ($tobool2687) {
      label = 475;
      break;
    } else {
      $yyerrstatus_3 = $yyerrstatus_1;
      label = 491;
      break;
    }
   case 475:
    $call2689 = _new_nil($p) | 0;
    HEAP32[$4 >> 2] = $call2689;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 476:
    HEAP32[$lstate2693 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 477:
    $nd2696 = $yyvsp_2 - 4 | 0;
    $665 = HEAP32[$nd2696 >> 2] | 0;
    $cmp2697 = ($665 | 0) == 0;
    if ($cmp2697) {
      label = 478;
      break;
    } else {
      label = 479;
      break;
    }
   case 478:
    _yyerror($p, 96812);
    label = 481;
    break;
   case 479:
    $car2703 = $665 | 0;
    $666 = HEAP32[$car2703 >> 2] | 0;
    $667 = $666;
    if (($667 | 0) == 55 | ($667 | 0) == 56 | ($667 | 0) == 57 | ($667 | 0) == 58 | ($667 | 0) == 60 | ($667 | 0) == 47 | ($667 | 0) == 51 | ($667 | 0) == 34 | ($667 | 0) == 99) {
      label = 480;
      break;
    } else {
      label = 481;
      break;
    }
   case 480:
    _yyerror($p, 96544);
    label = 481;
    break;
   case 481:
    $668 = HEAP32[$nd2696 >> 2] | 0;
    HEAP32[$4 >> 2] = $668;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 482:
    $nd2711 = $yyvsp_2 - 4 | 0;
    $669 = HEAP32[$nd2711 >> 2] | 0;
    HEAP32[$4 >> 2] = $669;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 483:
    $nd2715 = $yyvsp_2 | 0;
    $670 = HEAP32[$nd2715 >> 2] | 0;
    $call2716 = _list1_gen($p, $670) | 0;
    HEAP32[$4 >> 2] = $call2716;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 484:
    $nd2720 = $yyvsp_2 - 8 | 0;
    $671 = HEAP32[$nd2720 >> 2] | 0;
    $nd2722 = $yyvsp_2 | 0;
    $672 = HEAP32[$nd2722 >> 2] | 0;
    $call2723 = _list1_gen($p, $672) | 0;
    $call2724 = _append_gen($671, $call2723) | 0;
    HEAP32[$4 >> 2] = $call2724;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 485:
    $nd2728 = $yyvsp_2 - 8 | 0;
    $673 = HEAP32[$nd2728 >> 2] | 0;
    $nd2730 = $yyvsp_2 | 0;
    $674 = HEAP32[$nd2730 >> 2] | 0;
    $call2731 = _cons_gen($p, $673, $674) | 0;
    HEAP32[$4 >> 2] = $call2731;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 486:
    $arrayidx2734 = $yyvsp_2 - 4 | 0;
    $id2735 = $arrayidx2734;
    $675 = HEAP16[$id2735 >> 1] | 0;
    $call2736 = _new_sym($p, $675) | 0;
    $nd2738 = $yyvsp_2 | 0;
    $676 = HEAP32[$nd2738 >> 2] | 0;
    $call2739 = _cons_gen($p, $call2736, $676) | 0;
    HEAP32[$4 >> 2] = $call2739;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 487:
    $yyerrstatus_3 = 0;
    label = 491;
    break;
   case 488:
    $677 = HEAP32[$lineno2743 >> 2] | 0;
    $inc2744 = $677 + 1 | 0;
    HEAP32[$lineno2743 >> 2] = $inc2744;
    HEAP32[$column >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 489:
    $yyerrstatus_3 = 0;
    label = 491;
    break;
   case 490:
    HEAP32[$4 >> 2] = 0;
    $yyerrstatus_3 = $yyerrstatus_1;
    label = 491;
    break;
   case 491:
    $678 = HEAP32[9259] | 0;
    $tobool2751 = ($678 | 0) == 0;
    if ($tobool2751) {
      label = 492;
      break;
    } else {
      label = 493;
      break;
    }
   case 492:
    $idx_neg1326 = -$conv155 | 0;
    $add_ptr27611327 = $yyssp_2 + ($idx_neg1326 << 1) | 0;
    $add_ptr27611329 = $add_ptr27611327;
    label = 495;
    break;
   case 493:
    $679 = HEAP32[_stderr >> 2] | 0;
    $call2753 = _fprintf($679 | 0, 97372, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 96332, tempInt) | 0) | 0;
    $680 = HEAP32[_stderr >> 2] | 0;
    $arrayidx2754 = 30412 + ($yyn_0 << 1) | 0;
    $681 = HEAP16[$arrayidx2754 >> 1] | 0;
    $conv2755 = $681 & 65535;
    _yy_symbol_print($680, $conv2755, $yyval);
    $682 = HEAP32[_stderr >> 2] | 0;
    $fputc1322 = _fputc(10, $682 | 0) | 0;
    $_pr = HEAP32[9259] | 0;
    $idx_neg = -$conv155 | 0;
    $add_ptr2761 = $yyssp_2 + ($idx_neg << 1) | 0;
    $tobool2763 = ($_pr | 0) == 0;
    if ($tobool2763) {
      $add_ptr27611329 = $add_ptr2761;
      label = 495;
      break;
    } else {
      label = 494;
      break;
    }
   case 494:
    _yy_stack_print($yyss_1, $add_ptr2761);
    $add_ptr27611329 = $add_ptr2761;
    label = 495;
    break;
   case 495:
    $add_ptr2759_sum = 1 - $conv155 | 0;
    $incdec_ptr2767 = $yyvsp_2 + ($add_ptr2759_sum << 2) | 0;
    $683 = HEAP32[$4 >> 2] | 0;
    $684 = $incdec_ptr2767 | 0;
    HEAP32[$684 >> 2] = $683;
    $arrayidx2768 = 30412 + ($yyn_0 << 1) | 0;
    $685 = HEAP16[$arrayidx2768 >> 1] | 0;
    $conv2769 = $685 & 65535;
    $sub2770 = $conv2769 - 151 | 0;
    $arrayidx2771 = 32596 + ($sub2770 << 1) | 0;
    $686 = HEAP16[$arrayidx2771 >> 1] | 0;
    $conv2772 = $686 << 16 >> 16;
    $687 = HEAP16[$add_ptr27611329 >> 1] | 0;
    $conv2773 = $687 << 16 >> 16;
    $add2774 = $conv2773 + $conv2772 | 0;
    $688 = $add2774 >>> 0 < 10896;
    if ($688) {
      label = 496;
      break;
    } else {
      label = 498;
      break;
    }
   case 496:
    $arrayidx2780 = 37040 + ($add2774 << 1) | 0;
    $689 = HEAP16[$arrayidx2780 >> 1] | 0;
    $cmp2783 = $689 << 16 >> 16 == $687 << 16 >> 16;
    if ($cmp2783) {
      label = 497;
      break;
    } else {
      label = 498;
      break;
    }
   case 497:
    $arrayidx2786 = 1608 + ($add2774 << 1) | 0;
    $690 = HEAP16[$arrayidx2786 >> 1] | 0;
    $conv2787 = $690 << 16 >> 16;
    $yychar_0 = $yychar_6;
    $yystate_0 = $conv2787;
    $yyvsp_0 = $incdec_ptr2767;
    $yyssp_0 = $add_ptr27611329;
    $yymsg_alloc_0 = $yymsg_alloc_1;
    $yymsg_0 = $yymsg_1;
    $yytoken_0 = $yytoken_4;
    $yyerrstatus_0 = $yyerrstatus_3;
    label = 5;
    break;
   case 498:
    $arrayidx2790 = 34816 + ($sub2770 << 1) | 0;
    $691 = HEAP16[$arrayidx2790 >> 1] | 0;
    $conv2791 = $691 << 16 >> 16;
    $yychar_0 = $yychar_6;
    $yystate_0 = $conv2791;
    $yyvsp_0 = $incdec_ptr2767;
    $yyssp_0 = $add_ptr27611329;
    $yymsg_alloc_0 = $yymsg_alloc_1;
    $yymsg_0 = $yymsg_1;
    $yytoken_0 = $yytoken_4;
    $yyerrstatus_0 = $yyerrstatus_3;
    label = 5;
    break;
   case 499:
    $tobool2793 = ($yyerrstatus_1 | 0) == 0;
    if ($tobool2793) {
      label = 500;
      break;
    } else {
      $yymsg_alloc_3 = $yymsg_alloc_1;
      $yymsg_3 = $yymsg_1;
      label = 507;
      break;
    }
   case 500:
    $call2797 = _yysyntax_error(0, $yystate_1, $yychar_7) | 0;
    $cmp2798 = $yymsg_alloc_1 >>> 0 < $call2797 >>> 0;
    $cmp2801 = ($yymsg_alloc_1 | 0) != -1;
    $or_cond3 = $cmp2798 & $cmp2801;
    if ($or_cond3) {
      label = 501;
      break;
    } else {
      $yymsg_alloc_2 = $yymsg_alloc_1;
      $yymsg_2 = $yymsg_1;
      label = 504;
      break;
    }
   case 501:
    $mul2804 = $call2797 << 1;
    $cmp2805 = $call2797 >>> 0 > $mul2804 >>> 0;
    $_mul2804 = $cmp2805 ? -1 : $mul2804;
    $cmp2813 = ($yymsg_1 | 0) == ($arraydecay | 0);
    if ($cmp2813) {
      label = 503;
      break;
    } else {
      label = 502;
      break;
    }
   case 502:
    $692 = HEAP32[$mrb2816 >> 2] | 0;
    _mrb_free($692, $yymsg_1);
    label = 503;
    break;
   case 503:
    $693 = HEAP32[$mrb2818 >> 2] | 0;
    $call2819 = _mrb_malloc($693, $_mul2804) | 0;
    $tobool2820 = ($call2819 | 0) == 0;
    $arraydecay_call2819 = $tobool2820 ? $arraydecay : $call2819;
    $__mul2804 = $tobool2820 ? 128 : $_mul2804;
    $yymsg_alloc_2 = $__mul2804;
    $yymsg_2 = $arraydecay_call2819;
    label = 504;
    break;
   case 504:
    $cmp2826 = ($call2797 | 0) == 0;
    $cmp2829 = $call2797 >>> 0 > $yymsg_alloc_2 >>> 0;
    $or_cond = $cmp2826 | $cmp2829;
    if ($or_cond) {
      label = 506;
      break;
    } else {
      label = 505;
      break;
    }
   case 505:
    $call2832 = _yysyntax_error($yymsg_2, $yystate_1, $yychar_7) | 0;
    _yyerror($p, $yymsg_2);
    $yymsg_alloc_3 = $yymsg_alloc_2;
    $yymsg_3 = $yymsg_2;
    label = 507;
    break;
   case 506:
    _yyerror($p, 96112);
    if ($cmp2826) {
      $yymsg_alloc_3 = $yymsg_alloc_2;
      $yymsg_3 = $yymsg_2;
      label = 507;
      break;
    } else {
      $yychar_11 = $yychar_7;
      $yyvsp_6 = $yyvsp_2;
      $yyssp_6 = $yyssp_2;
      $yyss_3 = $yyss_1;
      $yymsg_6 = $yymsg_2;
      $yytoken_8 = $yytoken_5;
      label = 522;
      break;
    }
   case 507:
    $cmp2840 = ($yyerrstatus_1 | 0) == 3;
    if ($cmp2840) {
      label = 508;
      break;
    } else {
      $yychar_8 = $yychar_7;
      label = 511;
      break;
    }
   case 508:
    $cmp2843 = ($yychar_7 | 0) < 1;
    if ($cmp2843) {
      label = 509;
      break;
    } else {
      label = 510;
      break;
    }
   case 509:
    $cmp2846 = ($yychar_7 | 0) == 0;
    if ($cmp2846) {
      $yymsg_71330 = $yymsg_3;
      $yyss_41331 = $yyss_1;
      $yyssp_71332 = $yyssp_2;
      $yyvsp_71333 = $yyvsp_2;
      $yyresult_01334 = 1;
      label = 525;
      break;
    } else {
      $yychar_8 = $yychar_7;
      label = 511;
      break;
    }
   case 510:
    _yydestruct(95896, $yytoken_5, $yylval);
    $yychar_8 = -2;
    label = 511;
    break;
   case 511:
    $yystate_2 = $yystate_1;
    $yyvsp_3 = $yyvsp_2;
    $yyssp_3 = $yyssp_2;
    label = 512;
    break;
   case 512:
    $arrayidx2863 = 32904 + ($yystate_2 << 1) | 0;
    $694 = HEAP16[$arrayidx2863 >> 1] | 0;
    $cmp2865 = $694 << 16 >> 16 == -745;
    if ($cmp2865) {
      label = 516;
      break;
    } else {
      label = 513;
      break;
    }
   case 513:
    $conv2864 = $694 << 16 >> 16;
    $add2868 = $conv2864 + 1 | 0;
    $695 = $add2868 >>> 0 < 10896;
    if ($695) {
      label = 514;
      break;
    } else {
      label = 516;
      break;
    }
   case 514:
    $arrayidx2875 = 37040 + ($add2868 << 1) | 0;
    $696 = HEAP16[$arrayidx2875 >> 1] | 0;
    $cmp2877 = $696 << 16 >> 16 == 1;
    if ($cmp2877) {
      label = 515;
      break;
    } else {
      label = 516;
      break;
    }
   case 515:
    $arrayidx2880 = 1608 + ($add2868 << 1) | 0;
    $697 = HEAP16[$arrayidx2880 >> 1] | 0;
    $conv2881 = $697 << 16 >> 16;
    $cmp2882 = $697 << 16 >> 16 > 0;
    if ($cmp2882) {
      label = 519;
      break;
    } else {
      label = 516;
      break;
    }
   case 516:
    $cmp2888 = ($yyssp_3 | 0) == ($yyss_1 | 0);
    if ($cmp2888) {
      $yychar_12 = $yychar_8;
      $yyresult_0 = 1;
      $yyvsp_7 = $yyvsp_3;
      $yyssp_7 = $yyssp_3;
      $yyss_4 = $yyss_1;
      $yymsg_7 = $yymsg_3;
      $yytoken_9 = $yytoken_5;
      label = 523;
      break;
    } else {
      label = 517;
      break;
    }
   case 517:
    $arrayidx2892 = 23452 + ($yystate_2 << 1) | 0;
    $698 = HEAP16[$arrayidx2892 >> 1] | 0;
    $conv2893 = $698 & 65535;
    _yydestruct(95760, $conv2893, $yyvsp_3);
    $add_ptr2894 = $yyvsp_3 - 4 | 0;
    $add_ptr2895 = $yyssp_3 - 2 | 0;
    $699 = HEAP16[$add_ptr2895 >> 1] | 0;
    $conv2896 = $699 << 16 >> 16;
    $700 = HEAP32[9259] | 0;
    $tobool2898 = ($700 | 0) == 0;
    if ($tobool2898) {
      $yystate_2 = $conv2896;
      $yyvsp_3 = $add_ptr2894;
      $yyssp_3 = $add_ptr2895;
      label = 512;
      break;
    } else {
      label = 518;
      break;
    }
   case 518:
    _yy_stack_print($yyss_1, $add_ptr2895);
    $yystate_2 = $conv2896;
    $yyvsp_3 = $add_ptr2894;
    $yyssp_3 = $add_ptr2895;
    label = 512;
    break;
   case 519:
    $cmp2902 = $697 << 16 >> 16 == 3;
    if ($cmp2902) {
      $yychar_12 = $yychar_8;
      $yyresult_0 = 0;
      $yyvsp_7 = $yyvsp_3;
      $yyssp_7 = $yyssp_3;
      $yyss_4 = $yyss_1;
      $yymsg_7 = $yymsg_3;
      $yytoken_9 = $yytoken_5;
      label = 523;
      break;
    } else {
      label = 520;
      break;
    }
   case 520:
    $incdec_ptr2906 = $yyvsp_3 + 4 | 0;
    $701 = HEAP32[$3 >> 2] | 0;
    $702 = $incdec_ptr2906 | 0;
    HEAP32[$702 >> 2] = $701;
    $703 = HEAP32[9259] | 0;
    $tobool2908 = ($703 | 0) == 0;
    if ($tobool2908) {
      $yychar_0 = $yychar_8;
      $yystate_0 = $conv2881;
      $yyvsp_0 = $incdec_ptr2906;
      $yyssp_0 = $yyssp_3;
      $yymsg_alloc_0 = $yymsg_alloc_3;
      $yymsg_0 = $yymsg_3;
      $yytoken_0 = $yytoken_5;
      $yyerrstatus_0 = 3;
      label = 5;
      break;
    } else {
      label = 521;
      break;
    }
   case 521:
    $704 = HEAP32[_stderr >> 2] | 0;
    $call2910 = _fprintf($704 | 0, 97372, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 93400, tempInt) | 0) | 0;
    $705 = HEAP32[_stderr >> 2] | 0;
    $arrayidx2911 = 23452 + ($conv2881 << 1) | 0;
    $706 = HEAP16[$arrayidx2911 >> 1] | 0;
    $conv2912 = $706 & 65535;
    _yy_symbol_print($705, $conv2912, $incdec_ptr2906);
    $707 = HEAP32[_stderr >> 2] | 0;
    $fputc1325 = _fputc(10, $707 | 0) | 0;
    $yychar_0 = $yychar_8;
    $yystate_0 = $conv2881;
    $yyvsp_0 = $incdec_ptr2906;
    $yyssp_0 = $yyssp_3;
    $yymsg_alloc_0 = $yymsg_alloc_3;
    $yymsg_0 = $yymsg_3;
    $yytoken_0 = $yytoken_5;
    $yyerrstatus_0 = 3;
    label = 5;
    break;
   case 522:
    _yyerror($p, 95692);
    $yychar_12 = $yychar_11;
    $yyresult_0 = 2;
    $yyvsp_7 = $yyvsp_6;
    $yyssp_7 = $yyssp_6;
    $yyss_4 = $yyss_3;
    $yymsg_7 = $yymsg_6;
    $yytoken_9 = $yytoken_8;
    label = 523;
    break;
   case 523:
    if (($yychar_12 | 0) == (-2 | 0) | ($yychar_12 | 0) == 0) {
      $yymsg_71330 = $yymsg_7;
      $yyss_41331 = $yyss_4;
      $yyssp_71332 = $yyssp_7;
      $yyvsp_71333 = $yyvsp_7;
      $yyresult_01334 = $yyresult_0;
      label = 525;
      break;
    } else {
      label = 524;
      break;
    }
   case 524:
    _yydestruct(95572, $yytoken_9, $yylval);
    $yymsg_71330 = $yymsg_7;
    $yyss_41331 = $yyss_4;
    $yyssp_71332 = $yyssp_7;
    $yyvsp_71333 = $yyvsp_7;
    $yyresult_01334 = $yyresult_0;
    label = 525;
    break;
   case 525:
    $708 = HEAP32[9259] | 0;
    $tobool2928 = ($708 | 0) == 0;
    if ($tobool2928) {
      label = 527;
      break;
    } else {
      label = 526;
      break;
    }
   case 526:
    _yy_stack_print($yyss_41331, $yyssp_71332);
    label = 527;
    break;
   case 527:
    $cmp29321335 = ($yyssp_71332 | 0) == ($yyss_41331 | 0);
    if ($cmp29321335) {
      label = 529;
      break;
    } else {
      $yyssp_81336 = $yyssp_71332;
      $yyvsp_81337 = $yyvsp_71333;
      label = 528;
      break;
    }
   case 528:
    $709 = HEAP16[$yyssp_81336 >> 1] | 0;
    $idxprom = $709 << 16 >> 16;
    $arrayidx2934 = 23452 + ($idxprom << 1) | 0;
    $710 = HEAP16[$arrayidx2934 >> 1] | 0;
    $conv2935 = $710 & 65535;
    _yydestruct(95460, $conv2935, $yyvsp_81337);
    $add_ptr2936 = $yyvsp_81337 - 4 | 0;
    $add_ptr2937 = $yyssp_81336 - 2 | 0;
    $cmp2932 = ($add_ptr2937 | 0) == ($yyss_41331 | 0);
    if ($cmp2932) {
      label = 529;
      break;
    } else {
      $yyssp_81336 = $add_ptr2937;
      $yyvsp_81337 = $add_ptr2936;
      label = 528;
      break;
    }
   case 529:
    $cmp2939 = ($yyss_41331 | 0) == ($arraydecay1 | 0);
    if ($cmp2939) {
      label = 531;
      break;
    } else {
      label = 530;
      break;
    }
   case 530:
    $mrb2942 = $p | 0;
    $711 = HEAP32[$mrb2942 >> 2] | 0;
    $712 = $yyss_41331;
    _mrb_free($711, $712);
    label = 531;
    break;
   case 531:
    $cmp2945 = ($yymsg_71330 | 0) == ($arraydecay | 0);
    if ($cmp2945) {
      label = 533;
      break;
    } else {
      label = 532;
      break;
    }
   case 532:
    $mrb2948 = $p | 0;
    $713 = HEAP32[$mrb2948 >> 2] | 0;
    _mrb_free($713, $yymsg_71330);
    label = 533;
    break;
   case 533:
    STACKTOP = __stackBase__;
    return $yyresult_01334 | 0;
  }
  return 0;
}
function _cond($n) {
  $n = $n | 0;
  return $n | 0;
}
function _append_gen($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $tobool = 0, $c_0 = 0, $cdr = 0, $0 = 0, $tobool1 = 0, $tobool3 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($a | 0) == 0;
    if ($tobool) {
      $retval_0 = $b;
      label = 6;
      break;
    } else {
      $c_0 = $a;
      label = 3;
      break;
    }
   case 3:
    $cdr = $c_0 + 4 | 0;
    $0 = HEAP32[$cdr >> 2] | 0;
    $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 4;
      break;
    } else {
      $c_0 = $0;
      label = 3;
      break;
    }
   case 4:
    $tobool3 = ($b | 0) == 0;
    if ($tobool3) {
      $retval_0 = $a;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    HEAP32[$cdr >> 2] = $b;
    $retval_0 = $a;
    label = 6;
    break;
   case 6:
    return $retval_0 | 0;
  }
  return 0;
}
function _local_resume($p, $prev) {
  $p = $p | 0;
  $prev = $prev | 0;
  HEAP32[$p + 76 >> 2] = $prev;
  return;
}
function _local_unnest($p) {
  $p = $p | 0;
  var $locals = 0;
  $locals = $p + 76 | 0;
  HEAP32[$locals >> 2] = HEAP32[(HEAP32[$locals >> 2] | 0) + 4 >> 2] | 0;
  return;
}
function _yylex($lval, $p) {
  $lval = $lval | 0;
  $p = $p | 0;
  HEAP32[$p + 1124 >> 2] = $lval;
  return _parser_yylex($p) | 0;
}
function _yy_symbol_print($yyoutput, $yytype, $yyvaluep) {
  $yyoutput = $yyoutput | 0;
  $yytype = $yytype | 0;
  $yyvaluep = $yyvaluep | 0;
  var $cmp = 0, $arrayidx = 0, $0 = 0, $call = 0, $call2 = 0, $fputc = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = ($yytype | 0) < 151;
    $arrayidx = 384 + ($yytype << 2) | 0;
    $0 = HEAP32[$arrayidx >> 2] | 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _fprintf($yyoutput | 0, 96048, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $0, tempInt) | 0) | 0;
    label = 5;
    break;
   case 4:
    $call2 = _fprintf($yyoutput | 0, 96024, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $0, tempInt) | 0) | 0;
    label = 5;
    break;
   case 5:
    $fputc = _fputc(41, $yyoutput | 0) | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _yy_reduce_print($yyvsp, $yyrule) {
  $yyvsp = $yyvsp | 0;
  $yyrule = $yyrule | 0;
  var $arrayidx = 0, $0 = 0, $conv = 0, $arrayidx1 = 0, $1 = 0, $conv2 = 0, $2 = 0, $sub = 0, $call = 0, $cmp1 = 0, $arrayidx5 = 0, $3 = 0, $conv6 = 0, $yyi_02 = 0, $4 = 0, $add = 0, $call4 = 0, $5 = 0, $add7 = 0, $arrayidx8 = 0, $6 = 0, $conv9 = 0, $sub11 = 0, $arrayidx12 = 0, $7 = 0, $fputc = 0, $cmp = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $arrayidx = $yyrule + 29864 | 0;
    $0 = HEAP8[$arrayidx] | 0;
    $conv = $0 & 255;
    $arrayidx1 = 25364 + ($yyrule << 1) | 0;
    $1 = HEAP16[$arrayidx1 >> 1] | 0;
    $conv2 = $1 & 65535;
    $2 = HEAP32[_stderr >> 2] | 0;
    $sub = $yyrule - 1 | 0;
    $call = _fprintf($2 | 0, 96072, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $sub, HEAP32[tempInt + 4 >> 2] = $conv2, tempInt) | 0) | 0;
    $cmp1 = $0 << 24 >> 24 == 0;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $arrayidx5 = 31504 + ($yyrule << 1) | 0;
    $3 = HEAP16[$arrayidx5 >> 1] | 0;
    $conv6 = $3 & 65535;
    $yyi_02 = 0;
    label = 4;
    break;
   case 4:
    $4 = HEAP32[_stderr >> 2] | 0;
    $add = $yyi_02 + 1 | 0;
    $call4 = _fprintf($4 | 0, 96060, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $add, tempInt) | 0) | 0;
    $5 = HEAP32[_stderr >> 2] | 0;
    $add7 = $conv6 + $yyi_02 | 0;
    $arrayidx8 = 26456 + ($add7 << 1) | 0;
    $6 = HEAP16[$arrayidx8 >> 1] | 0;
    $conv9 = $6 << 16 >> 16;
    $sub11 = $add - $conv | 0;
    $arrayidx12 = $yyvsp + ($sub11 << 2) | 0;
    _yy_symbol_print($5, $conv9, $arrayidx12);
    $7 = HEAP32[_stderr >> 2] | 0;
    $fputc = _fputc(10, $7 | 0) | 0;
    $cmp = ($add | 0) < ($conv | 0);
    if ($cmp) {
      $yyi_02 = $add;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _cons_gen($p, $car, $cdr) {
  $p = $p | 0;
  $car = $car | 0;
  $cdr = $cdr | 0;
  var $cells = 0, $0 = 0, $tobool = 0, $cdr3 = 0, $1 = 0, $call = 0, $2 = 0, $c_0 = 0, $car5 = 0, $cdr6 = 0, $lineno = 0, $3 = 0, $conv = 0, $lineno7 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cells = $p + 8 | 0;
    $0 = HEAP32[$cells >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $cdr3 = $0 + 4 | 0;
    $1 = HEAP32[$cdr3 >> 2] | 0;
    HEAP32[$cells >> 2] = $1;
    $c_0 = $0;
    label = 5;
    break;
   case 4:
    $call = _parser_palloc($p, 12) | 0;
    $2 = $call;
    $c_0 = $2;
    label = 5;
    break;
   case 5:
    $car5 = $c_0 | 0;
    HEAP32[$car5 >> 2] = $car;
    $cdr6 = $c_0 + 4 | 0;
    HEAP32[$cdr6 >> 2] = $cdr;
    $lineno = $p + 32 | 0;
    $3 = HEAP32[$lineno >> 2] | 0;
    $conv = $3 & 65535;
    $lineno7 = $c_0 + 8 | 0;
    HEAP16[$lineno7 >> 1] = $conv;
    return $c_0 | 0;
  }
  return 0;
}
function _new_scope($p, $body) {
  $p = $p | 0;
  $body = $body | 0;
  return _cons_gen($p, 3, _cons_gen($p, HEAP32[HEAP32[$p + 76 >> 2] >> 2] | 0, $body) | 0) | 0;
}
function _new_begin($p, $body) {
  $p = $p | 0;
  $body = $body | 0;
  var $tobool = 0, $call = 0, $call1 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($body | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _list2_gen($p, 17, $body) | 0;
    $retval_0 = $call;
    label = 5;
    break;
   case 4:
    $call1 = _cons_gen($p, 17, 0) | 0;
    $retval_0 = $call1;
    label = 5;
    break;
   case 5:
    return $retval_0 | 0;
  }
  return 0;
}
function _list1_gen($p, $a) {
  $p = $p | 0;
  $a = $a | 0;
  return _cons_gen($p, $a, 0) | 0;
}
function _local_switch($p) {
  $p = $p | 0;
  var $locals = 0, $0 = 0;
  $locals = $p + 76 | 0;
  $0 = HEAP32[$locals >> 2] | 0;
  HEAP32[$locals >> 2] = _cons_gen($p, 0, 0) | 0;
  return $0 | 0;
}
function _yyerror($p, $s) {
  $p = $p | 0;
  $s = $s | 0;
  var $capture_errors = 0, $0 = 0, $tobool = 0, $filename = 0, $1 = 0, $tobool1 = 0, $2 = 0, $lineno4 = 0, $3 = 0, $column5 = 0, $4 = 0, $call = 0, $call6 = 0, $nerr = 0, $5 = 0, $cmp = 0, $call9 = 0, $add = 0, $call10 = 0, $6 = 0, $message = 0, $lineno13 = 0, $7 = 0, $8 = 0, $lineno17 = 0, $column18 = 0, $9 = 0, $10 = 0, $column22 = 0, $nerr25 = 0, $11 = 0, $inc = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $capture_errors = $p + 1140 | 0;
    $0 = HEAP32[$capture_errors >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $filename = $p + 28 | 0;
    $1 = HEAP32[$filename >> 2] | 0;
    $tobool1 = ($1 | 0) == 0;
    $2 = HEAP32[_stderr >> 2] | 0;
    $lineno4 = $p + 32 | 0;
    $3 = HEAP32[$lineno4 >> 2] | 0;
    $column5 = $p + 36 | 0;
    $4 = HEAP32[$column5 >> 2] | 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call = _fprintf($2 | 0, 104584, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $1, HEAP32[tempInt + 4 >> 2] = $3, HEAP32[tempInt + 8 >> 2] = $4, HEAP32[tempInt + 12 >> 2] = $s, tempInt) | 0) | 0;
    label = 8;
    break;
   case 5:
    $call6 = _fprintf($2 | 0, 104568, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $3, HEAP32[tempInt + 4 >> 2] = $4, HEAP32[tempInt + 8 >> 2] = $s, tempInt) | 0) | 0;
    label = 8;
    break;
   case 6:
    $nerr = $p + 1128 | 0;
    $5 = HEAP32[$nerr >> 2] | 0;
    $cmp = $5 >>> 0 < 10;
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $call9 = _strlen($s | 0) | 0;
    $add = $call9 + 1 | 0;
    $call10 = _parser_palloc($p, $add) | 0;
    _memcpy($call10 | 0, $s | 0, $add);
    $6 = HEAP32[$nerr >> 2] | 0;
    $message = $p + 1144 + ($6 * 12 & -1) + 8 | 0;
    HEAP32[$message >> 2] = $call10;
    $lineno13 = $p + 32 | 0;
    $7 = HEAP32[$lineno13 >> 2] | 0;
    $8 = HEAP32[$nerr >> 2] | 0;
    $lineno17 = $p + 1144 + ($8 * 12 & -1) | 0;
    HEAP32[$lineno17 >> 2] = $7;
    $column18 = $p + 36 | 0;
    $9 = HEAP32[$column18 >> 2] | 0;
    $10 = HEAP32[$nerr >> 2] | 0;
    $column22 = $p + 1144 + ($10 * 12 & -1) + 4 | 0;
    HEAP32[$column22 >> 2] = $9;
    label = 8;
    break;
   case 8:
    $nerr25 = $p + 1128 | 0;
    $11 = HEAP32[$nerr25 >> 2] | 0;
    $inc = $11 + 1 | 0;
    HEAP32[$nerr25 >> 2] = $inc;
    STACKTOP = __stackBase__;
    return;
  }
}
function _new_rescue($p, $body, $resq, $els) {
  $p = $p | 0;
  $body = $body | 0;
  $resq = $resq | 0;
  $els = $els | 0;
  return _list4_gen($p, 18, $body, $resq, $els) | 0;
}
function _yywarn($p, $s) {
  $p = $p | 0;
  $s = $s | 0;
  var $capture_errors = 0, $0 = 0, $tobool = 0, $filename = 0, $1 = 0, $tobool1 = 0, $2 = 0, $lineno4 = 0, $3 = 0, $column5 = 0, $4 = 0, $call = 0, $call6 = 0, $nwarn = 0, $5 = 0, $cmp = 0, $call9 = 0, $add = 0, $call10 = 0, $6 = 0, $message = 0, $lineno13 = 0, $7 = 0, $8 = 0, $lineno17 = 0, $column18 = 0, $9 = 0, $10 = 0, $column22 = 0, $nwarn25 = 0, $11 = 0, $inc = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $capture_errors = $p + 1140 | 0;
    $0 = HEAP32[$capture_errors >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $filename = $p + 28 | 0;
    $1 = HEAP32[$filename >> 2] | 0;
    $tobool1 = ($1 | 0) == 0;
    $2 = HEAP32[_stderr >> 2] | 0;
    $lineno4 = $p + 32 | 0;
    $3 = HEAP32[$lineno4 >> 2] | 0;
    $column5 = $p + 36 | 0;
    $4 = HEAP32[$column5 >> 2] | 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call = _fprintf($2 | 0, 104584, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $1, HEAP32[tempInt + 4 >> 2] = $3, HEAP32[tempInt + 8 >> 2] = $4, HEAP32[tempInt + 12 >> 2] = $s, tempInt) | 0) | 0;
    label = 8;
    break;
   case 5:
    $call6 = _fprintf($2 | 0, 104568, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $3, HEAP32[tempInt + 4 >> 2] = $4, HEAP32[tempInt + 8 >> 2] = $s, tempInt) | 0) | 0;
    label = 8;
    break;
   case 6:
    $nwarn = $p + 1132 | 0;
    $5 = HEAP32[$nwarn >> 2] | 0;
    $cmp = $5 >>> 0 < 10;
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $call9 = _strlen($s | 0) | 0;
    $add = $call9 + 1 | 0;
    $call10 = _parser_palloc($p, $add) | 0;
    _memcpy($call10 | 0, $s | 0, $add);
    $6 = HEAP32[$nwarn >> 2] | 0;
    $message = $p + 1264 + ($6 * 12 & -1) + 8 | 0;
    HEAP32[$message >> 2] = $call10;
    $lineno13 = $p + 32 | 0;
    $7 = HEAP32[$lineno13 >> 2] | 0;
    $8 = HEAP32[$nwarn >> 2] | 0;
    $lineno17 = $p + 1264 + ($8 * 12 & -1) | 0;
    HEAP32[$lineno17 >> 2] = $7;
    $column18 = $p + 36 | 0;
    $9 = HEAP32[$column18 >> 2] | 0;
    $10 = HEAP32[$nwarn >> 2] | 0;
    $column22 = $p + 1264 + ($10 * 12 & -1) + 4 | 0;
    HEAP32[$column22 >> 2] = $9;
    label = 8;
    break;
   case 8:
    $nwarn25 = $p + 1132 | 0;
    $11 = HEAP32[$nwarn25 >> 2] | 0;
    $inc = $11 + 1 | 0;
    HEAP32[$nwarn25 >> 2] = $inc;
    STACKTOP = __stackBase__;
    return;
  }
}
function _new_ensure($p, $a, $b) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  return _cons_gen($p, 19, _cons_gen($p, $a, _cons_gen($p, 0, $b) | 0) | 0) | 0;
}
function _new_nil($p) {
  $p = $p | 0;
  return _list1_gen($p, 86) | 0;
}
function _new_alias($p, $a, $b) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  return _cons_gen($p, 72, _cons_gen($p, $a << 16 >> 16, $b << 16 >> 16) | 0) | 0;
}
function _new_if($p, $a, $b, $c) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  $c = $c | 0;
  return _list4_gen($p, 5, $a, $b, $c) | 0;
}
function _new_unless($p, $a, $b, $c) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  $c = $c | 0;
  return _list4_gen($p, 5, $a, $c, $b) | 0;
}
function _new_while($p, $a, $b) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  return _cons_gen($p, 9, _cons_gen($p, $a, $b) | 0) | 0;
}
function _new_until($p, $a, $b) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  return _cons_gen($p, 10, _cons_gen($p, $a, $b) | 0) | 0;
}
function _list3_gen($p, $a, $b, $c) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  $c = $c | 0;
  return _cons_gen($p, $a, _cons_gen($p, $b, _cons_gen($p, $c, 0) | 0) | 0) | 0;
}
function _new_postexe($p, $a) {
  $p = $p | 0;
  $a = $a | 0;
  return _cons_gen($p, 91, $a) | 0;
}
function _new_masgn($p, $a, $b) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  return _cons_gen($p, 23, _cons_gen($p, $a, $b) | 0) | 0;
}
function _new_op_asgn($p, $a, $op, $b) {
  $p = $p | 0;
  $a = $a | 0;
  $op = $op | 0;
  $b = $b | 0;
  return _list4_gen($p, 28, $a, $op << 16 >> 16, $b) | 0;
}
function _new_call($p, $a, $b, $c) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  $c = $c | 0;
  return _list4_gen($p, 29, $a, $b << 16 >> 16, $c) | 0;
}
function _intern_gen2($p, $s, $len) {
  $p = $p | 0;
  $s = $s | 0;
  $len = $len | 0;
  return _mrb_intern2(HEAP32[$p >> 2] | 0, $s, $len) | 0;
}
function _new_asgn($p, $a, $b) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  return _cons_gen($p, 24, _cons_gen($p, $a, $b) | 0) | 0;
}
function _new_array($p, $a) {
  $p = $p | 0;
  $a = $a | 0;
  return _cons_gen($p, 34, $a) | 0;
}
function _new_and($p, $a, $b) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  return _cons_gen($p, 20, _cons_gen($p, $a, $b) | 0) | 0;
}
function _new_or($p, $a, $b) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  return _cons_gen($p, 21, _cons_gen($p, $a, $b) | 0) | 0;
}
function _call_uni_op($p, $recv, $m) {
  $p = $p | 0;
  $recv = $recv | 0;
  $m = $m | 0;
  return _new_call($p, $recv, _intern_gen($p, $m) | 0, 0) | 0;
}
function _local_nest($p) {
  $p = $p | 0;
  var $locals = 0;
  $locals = $p + 76 | 0;
  HEAP32[$locals >> 2] = _cons_gen($p, 0, HEAP32[$locals >> 2] | 0) | 0;
  return;
}
function _new_block($p, $a, $b) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  return _list4_gen($p, 4, HEAP32[HEAP32[$p + 76 >> 2] >> 2] | 0, $a, $b) | 0;
}
function _new_fcall($p, $b, $c) {
  $p = $p | 0;
  $b = $b | 0;
  $c = $c | 0;
  return _list4_gen($p, 30, _new_self($p) | 0, $b << 16 >> 16, $c) | 0;
}
function _args_with_block($p, $a, $b) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $tobool = 0, $cdr = 0, $0 = 0, $tobool1 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($b | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $cdr = $a + 4 | 0;
    $0 = HEAP32[$cdr >> 2] | 0;
    $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _yyerror($p, 96128);
    label = 5;
    break;
   case 5:
    HEAP32[$cdr >> 2] = $b;
    label = 6;
    break;
   case 6:
    return;
  }
}
function _new_super($p, $c) {
  $p = $p | 0;
  $c = $c | 0;
  return _cons_gen($p, 32, $c) | 0;
}
function _new_yield($p, $c) {
  $p = $p | 0;
  $c = $c | 0;
  var $tobool = 0, $cdr = 0, $0 = 0, $tobool1 = 0, $car = 0, $1 = 0, $call = 0, $call4 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($c | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $cdr = $c + 4 | 0;
    $0 = HEAP32[$cdr >> 2] | 0;
    $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _yyerror($p, 96128);
    label = 5;
    break;
   case 5:
    $car = $c | 0;
    $1 = HEAP32[$car >> 2] | 0;
    $call = _cons_gen($p, 38, $1) | 0;
    $retval_0 = $call;
    label = 7;
    break;
   case 6:
    $call4 = _cons_gen($p, 38, 0) | 0;
    $retval_0 = $call4;
    label = 7;
    break;
   case 7:
    return $retval_0 | 0;
  }
  return 0;
}
function _new_return($p, $c) {
  $p = $p | 0;
  $c = $c | 0;
  return _cons_gen($p, 37, $c) | 0;
}
function _ret_args($p, $n) {
  $p = $p | 0;
  $n = $n | 0;
  var $cdr = 0, $0 = 0, $tobool = 0, $car = 0, $1 = 0, $cdr1 = 0, $2 = 0, $tobool2 = 0, $car5 = 0, $3 = 0, $call = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cdr = $n + 4 | 0;
    $0 = HEAP32[$cdr >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _yyerror($p, 96188);
    label = 4;
    break;
   case 4:
    $car = $n | 0;
    $1 = HEAP32[$car >> 2] | 0;
    $cdr1 = $1 + 4 | 0;
    $2 = HEAP32[$cdr1 >> 2] | 0;
    $tobool2 = ($2 | 0) == 0;
    if ($tobool2) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $car5 = $1 | 0;
    $3 = HEAP32[$car5 >> 2] | 0;
    $retval_0 = $3;
    label = 7;
    break;
   case 6:
    $call = _new_array($p, $1) | 0;
    $retval_0 = $call;
    label = 7;
    break;
   case 7:
    return $retval_0 | 0;
  }
  return 0;
}
function _new_break($p, $c) {
  $p = $p | 0;
  $c = $c | 0;
  return _cons_gen($p, 13, $c) | 0;
}
function _new_next($p, $c) {
  $p = $p | 0;
  $c = $c | 0;
  return _cons_gen($p, 14, $c) | 0;
}
function _list2_gen($p, $a, $b) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  return _cons_gen($p, $a, _cons_gen($p, $b, 0) | 0) | 0;
}
function _assignable($p, $lhs) {
  $p = $p | 0;
  $lhs = $lhs | 0;
  var $car = 0, $0 = 0, $cmp = 0, $cdr = 0, $1 = 0, $2 = 0, $conv = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $car = $lhs | 0;
    $0 = HEAP32[$car >> 2] | 0;
    $cmp = ($0 | 0) == 39;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $cdr = $lhs + 4 | 0;
    $1 = HEAP32[$cdr >> 2] | 0;
    $2 = $1;
    $conv = $2 & 65535;
    _local_add($p, $conv);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _new_colon2($p, $b, $c) {
  $p = $p | 0;
  $b = $b | 0;
  $c = $c | 0;
  return _cons_gen($p, 77, _cons_gen($p, $b, $c << 16 >> 16) | 0) | 0;
}
function _new_colon3($p, $c) {
  $p = $p | 0;
  $c = $c | 0;
  return _cons_gen($p, 78, $c << 16 >> 16) | 0;
}
function _new_undef($p, $sym) {
  $p = $p | 0;
  $sym = $sym | 0;
  return _list2_gen($p, 73, $sym << 16 >> 16) | 0;
}
function _intern_gen_c($p, $c) {
  $p = $p | 0;
  $c = $c | 0;
  var $c_addr = 0, $call = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  $c_addr = __stackBase__ | 0;
  HEAP8[$c_addr] = $c;
  $call = _mrb_intern2(HEAP32[$p >> 2] | 0, $c_addr, 1) | 0;
  STACKTOP = __stackBase__;
  return $call | 0;
}
function _new_dot2($p, $a, $b) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  return _cons_gen($p, 80, _cons_gen($p, $a, $b) | 0) | 0;
}
function _new_dot3($p, $a, $b) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  return _cons_gen($p, 81, _cons_gen($p, $a, $b) | 0) | 0;
}
function _call_bin_op($p, $recv, $m, $arg1) {
  $p = $p | 0;
  $recv = $recv | 0;
  $m = $m | 0;
  $arg1 = $arg1 | 0;
  var $call = 0;
  $call = _intern_gen($p, $m) | 0;
  return _new_call($p, $recv, $call, _list1_gen($p, _list1_gen($p, $arg1) | 0) | 0) | 0;
}
function _new_hash($p, $a) {
  $p = $p | 0;
  $a = $a | 0;
  return _cons_gen($p, 36, $a) | 0;
}
function _new_block_arg($p, $a) {
  $p = $p | 0;
  $a = $a | 0;
  return _cons_gen($p, 69, $a) | 0;
}
function _new_splat($p, $a) {
  $p = $p | 0;
  $a = $a | 0;
  return _cons_gen($p, 66, $a) | 0;
}
function _call_with_block($p, $a, $b) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $car = 0, $0 = 0, $magicptr = 0, $magicptr_off = 0, $switch = 0, $cdr = 0, $1 = 0, $tobool = 0, $call = 0, $cdr8 = 0, $2 = 0, $cdr9 = 0, $3 = 0, $car10 = 0, $4 = 0, $tobool11 = 0, $call13 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $car = $a | 0;
    $0 = HEAP32[$car >> 2] | 0;
    $magicptr = $0;
    $magicptr_off = $magicptr - 32 | 0;
    $switch = $magicptr_off >>> 0 < 2;
    $cdr = $a + 4 | 0;
    $1 = HEAP32[$cdr >> 2] | 0;
    if ($switch) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $call = _cons_gen($p, 0, $b) | 0;
    HEAP32[$cdr >> 2] = $call;
    label = 9;
    break;
   case 5:
    _args_with_block($p, $1, $b);
    label = 9;
    break;
   case 6:
    $cdr8 = $1 + 4 | 0;
    $2 = HEAP32[$cdr8 >> 2] | 0;
    $cdr9 = $2 + 4 | 0;
    $3 = HEAP32[$cdr9 >> 2] | 0;
    $car10 = $3 | 0;
    $4 = HEAP32[$car10 >> 2] | 0;
    $tobool11 = ($4 | 0) == 0;
    if ($tobool11) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $call13 = _cons_gen($p, 0, $b) | 0;
    HEAP32[$car10 >> 2] = $call13;
    label = 9;
    break;
   case 8:
    _args_with_block($p, $4, $b);
    label = 9;
    break;
   case 9:
    return;
  }
}
function _new_lambda($p, $a, $b) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  return _list4_gen($p, 53, HEAP32[HEAP32[$p + 76 >> 2] >> 2] | 0, $a, $b) | 0;
}
function _new_case($p, $a, $b) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $call = 0, $n2_0 = 0, $cdr = 0, $0 = 0, $tobool = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _list2_gen($p, 6, $a) | 0;
    $n2_0 = $call;
    label = 3;
    break;
   case 3:
    $cdr = $n2_0 + 4 | 0;
    $0 = HEAP32[$cdr >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      $n2_0 = $0;
      label = 3;
      break;
    }
   case 4:
    HEAP32[$cdr >> 2] = $b;
    return $call | 0;
  }
  return 0;
}
function _new_for($p, $v, $o, $b) {
  $p = $p | 0;
  $v = $v | 0;
  $o = $o | 0;
  $b = $b | 0;
  return _list4_gen($p, 12, $v, $o, $b) | 0;
}
function _new_class($p, $c, $s, $b) {
  $p = $p | 0;
  $c = $c | 0;
  $s = $s | 0;
  $b = $b | 0;
  return _list4_gen($p, 74, $c, $s, _cons_gen($p, HEAP32[HEAP32[$p + 76 >> 2] >> 2] | 0, $b) | 0) | 0;
}
function _new_sclass($p, $o, $b) {
  $p = $p | 0;
  $o = $o | 0;
  $b = $b | 0;
  return _list3_gen($p, 76, $o, _cons_gen($p, HEAP32[HEAP32[$p + 76 >> 2] >> 2] | 0, $b) | 0) | 0;
}
function _new_module($p, $m, $b) {
  $p = $p | 0;
  $m = $m | 0;
  $b = $b | 0;
  return _list3_gen($p, 75, $m, _cons_gen($p, HEAP32[HEAP32[$p + 76 >> 2] >> 2] | 0, $b) | 0) | 0;
}
function _new_def($p, $m, $a, $b) {
  $p = $p | 0;
  $m = $m | 0;
  $a = $a | 0;
  $b = $b | 0;
  return _list5_gen($p, $m << 16 >> 16, HEAP32[HEAP32[$p + 76 >> 2] >> 2] | 0, $a, $b) | 0;
}
function _new_sdef($p, $o, $m, $a, $b) {
  $p = $p | 0;
  $o = $o | 0;
  $m = $m | 0;
  $a = $a | 0;
  $b = $b | 0;
  return _list6_gen($p, $o, $m << 16 >> 16, HEAP32[HEAP32[$p + 76 >> 2] >> 2] | 0, $a, $b) | 0;
}
function _new_redo($p) {
  $p = $p | 0;
  return _list1_gen($p, 15) | 0;
}
function _new_retry($p) {
  $p = $p | 0;
  return _list1_gen($p, 16) | 0;
}
function _new_arg($p, $sym) {
  $p = $p | 0;
  $sym = $sym | 0;
  return _cons_gen($p, 63, $sym << 16 >> 16) | 0;
}
function _new_args($p, $m, $opt, $rest, $m2, $blk) {
  $p = $p | 0;
  $m = $m | 0;
  $opt = $opt | 0;
  $rest = $rest | 0;
  $m2 = $m2 | 0;
  $blk = $blk | 0;
  return _cons_gen($p, $m, _cons_gen($p, $opt, _cons_gen($p, $rest << 16 >> 16, _cons_gen($p, $m2, $blk << 16 >> 16) | 0) | 0) | 0) | 0;
}
function _local_add_f($p, $sym) {
  $p = $p | 0;
  $sym = $sym | 0;
  var $locals = 0, $1 = 0, $call1 = 0;
  $locals = $p + 76 | 0;
  $1 = HEAP32[HEAP32[$locals >> 2] >> 2] | 0;
  $call1 = _append_gen($1, _list1_gen($p, $sym << 16 >> 16) | 0) | 0;
  HEAP32[HEAP32[$locals >> 2] >> 2] = $call1;
  return;
}
function _new_zsuper($p) {
  $p = $p | 0;
  return _list1_gen($p, 33) | 0;
}
function _new_dstr($p, $a) {
  $p = $p | 0;
  $a = $a | 0;
  return _cons_gen($p, 56, $a) | 0;
}
function _new_literal_delim($p) {
  $p = $p | 0;
  return _cons_gen($p, 100, 0) | 0;
}
function _new_dxstr($p, $a) {
  $p = $p | 0;
  $a = $a | 0;
  return _cons_gen($p, 58, $a) | 0;
}
function _new_dregx($p, $a, $b) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  return _cons_gen($p, 60, _cons_gen($p, $a, $b) | 0) | 0;
}
function _new_str($p, $s, $len) {
  $p = $p | 0;
  $s = $s | 0;
  $len = $len | 0;
  return _cons_gen($p, 55, _cons_gen($p, _parser_strndup($p, $s, $len) | 0, $len) | 0) | 0;
}
function _heredoc_end($p) {
  $p = $p | 0;
  var $parsing_heredoc = 0, $0 = 0, $cdr = 0, $1 = 0, $cmp = 0, $lstate = 0, $cmd_start = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $type = 0, $5 = 0, $6 = 0, $lex_strterm = 0, $7 = 0, $car = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $parsing_heredoc = $p + 1116 | 0;
    $0 = HEAP32[$parsing_heredoc >> 2] | 0;
    $cdr = $0 + 4 | 0;
    $1 = HEAP32[$cdr >> 2] | 0;
    HEAP32[$parsing_heredoc >> 2] = $1;
    $cmp = ($1 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $lstate = $p + 40 | 0;
    HEAP32[$lstate >> 2] = 0;
    $cmd_start = $p + 72 | 0;
    HEAP32[$cmd_start >> 2] = 1;
    _end_strterm($p);
    $2 = $p + 1120 | 0;
    $3 = HEAP8[$2] | 0;
    $4 = $3 | 2;
    HEAP8[$2] = $4;
    label = 5;
    break;
   case 4:
    $call = _parsing_heredoc_inf($p) | 0;
    $type = $call + 4 | 0;
    $5 = HEAP32[$type >> 2] | 0;
    $6 = $5;
    $lex_strterm = $p + 44 | 0;
    $7 = HEAP32[$lex_strterm >> 2] | 0;
    $car = $7 | 0;
    HEAP32[$car >> 2] = $6;
    label = 5;
    break;
   case 5:
    return;
  }
}
function _new_words($p, $a) {
  $p = $p | 0;
  $a = $a | 0;
  return _cons_gen($p, 101, $a) | 0;
}
function _new_sym($p, $sym) {
  $p = $p | 0;
  $sym = $sym | 0;
  return _cons_gen($p, 54, $sym << 16 >> 16) | 0;
}
function _new_dsym($p, $a) {
  $p = $p | 0;
  $a = $a | 0;
  return _cons_gen($p, 97, _new_dstr($p, $a) | 0) | 0;
}
function _new_strsym($p, $str) {
  $p = $p | 0;
  $str = $str | 0;
  var $0 = 0;
  $0 = HEAP32[$str + 4 >> 2] | 0;
  return _mrb_intern2(HEAP32[$p >> 2] | 0, HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0) | 0;
}
function _new_symbols($p, $a) {
  $p = $p | 0;
  $a = $a | 0;
  return _cons_gen($p, 102, $a) | 0;
}
function _negate_lit($p, $n) {
  $p = $p | 0;
  $n = $n | 0;
  return _cons_gen($p, 52, $n) | 0;
}
function _new_lvar($p, $sym) {
  $p = $p | 0;
  $sym = $sym | 0;
  return _cons_gen($p, 39, $sym << 16 >> 16) | 0;
}
function _new_ivar($p, $sym) {
  $p = $p | 0;
  $sym = $sym | 0;
  return _cons_gen($p, 42, $sym << 16 >> 16) | 0;
}
function _new_gvar($p, $sym) {
  $p = $p | 0;
  $sym = $sym | 0;
  return _cons_gen($p, 41, $sym << 16 >> 16) | 0;
}
function _new_cvar($p, $sym) {
  $p = $p | 0;
  $sym = $sym | 0;
  return _cons_gen($p, 44, $sym << 16 >> 16) | 0;
}
function _new_const($p, $sym) {
  $p = $p | 0;
  $sym = $sym | 0;
  return _cons_gen($p, 43, $sym << 16 >> 16) | 0;
}
function _backref_error($p, $n) {
  $p = $p | 0;
  $n = $n | 0;
  var $car = 0, $0 = 0, $1 = 0, $cdr = 0, $2 = 0, $3 = 0, $cdr3 = 0, $4 = 0, $5 = 0, $mrb = 0, $6 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $car = $n | 0;
    $0 = HEAP32[$car >> 2] | 0;
    $1 = $0;
    if (($1 | 0) == 45) {
      label = 3;
      break;
    } else if (($1 | 0) == 46) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $cdr = $n + 4 | 0;
    $2 = HEAP32[$cdr >> 2] | 0;
    $3 = $2;
    _yyerror_i($p, 104784, $3);
    label = 6;
    break;
   case 4:
    $cdr3 = $n + 4 | 0;
    $4 = HEAP32[$cdr3 >> 2] | 0;
    $5 = $4;
    _yyerror_i($p, 104760, $5);
    label = 6;
    break;
   case 5:
    $mrb = $p | 0;
    $6 = HEAP32[$mrb >> 2] | 0;
    _mrb_bug($6, 104600, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $1, tempInt) | 0);
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _var_reference($p, $lhs) {
  $p = $p | 0;
  $lhs = $lhs | 0;
  var $car = 0, $0 = 0, $cmp = 0, $cdr = 0, $1 = 0, $2 = 0, $conv = 0, $call = 0, $tobool = 0, $call4 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $car = $lhs | 0;
    $0 = HEAP32[$car >> 2] | 0;
    $cmp = ($0 | 0) == 39;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $retval_0 = $lhs;
      label = 5;
      break;
    }
   case 3:
    $cdr = $lhs + 4 | 0;
    $1 = HEAP32[$cdr >> 2] | 0;
    $2 = $1;
    $conv = $2 & 65535;
    $call = _local_var_p($p, $conv) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      $retval_0 = $lhs;
      label = 5;
      break;
    }
   case 4:
    $call4 = _new_fcall($p, $conv, 0) | 0;
    _cons_free_gen($p, $lhs);
    $retval_0 = $call4;
    label = 5;
    break;
   case 5:
    return $retval_0 | 0;
  }
  return 0;
}
function _new_self($p) {
  $p = $p | 0;
  return _list1_gen($p, 85) | 0;
}
function _new_true($p) {
  $p = $p | 0;
  return _list1_gen($p, 87) | 0;
}
function _new_false($p) {
  $p = $p | 0;
  return _list1_gen($p, 88) | 0;
}
function _new_int($p, $s, $base) {
  $p = $p | 0;
  $s = $s | 0;
  $base = $base | 0;
  return _list3_gen($p, 50, _parser_strdup($p, $s) | 0, $base) | 0;
}
function _yy_stack_print($bottom, $top) {
  $bottom = $bottom | 0;
  $top = $top | 0;
  var $0 = 0, $1 = 0, $cmp3 = 0, $2 = 0, $3 = 0, $bottom_addr_04 = 0, $4 = 0, $conv = 0, $call1 = 0, $incdec_ptr = 0, $cmp = 0, $5 = 0, $_lcssa = 0, $fputc = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = HEAP32[_stderr >> 2] | 0;
    $1 = _fwrite(96236, 9, 1, $0 | 0) | 0;
    $cmp3 = $bottom >>> 0 > $top >>> 0;
    $2 = HEAP32[_stderr >> 2] | 0;
    if ($cmp3) {
      $_lcssa = $2;
      label = 4;
      break;
    } else {
      $bottom_addr_04 = $bottom;
      $3 = $2;
      label = 3;
      break;
    }
   case 3:
    $4 = HEAP16[$bottom_addr_04 >> 1] | 0;
    $conv = $4 << 16 >> 16;
    $call1 = _fprintf($3 | 0, 96224, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $conv, tempInt) | 0) | 0;
    $incdec_ptr = $bottom_addr_04 + 2 | 0;
    $cmp = $incdec_ptr >>> 0 > $top >>> 0;
    $5 = HEAP32[_stderr >> 2] | 0;
    if ($cmp) {
      $_lcssa = $5;
      label = 4;
      break;
    } else {
      $bottom_addr_04 = $incdec_ptr;
      $3 = $5;
      label = 3;
      break;
    }
   case 4:
    $fputc = _fputc(10, $_lcssa | 0) | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _yysyntax_error($yyresult, $yystate, $yychar) {
  $yyresult = $yyresult | 0;
  $yystate = $yystate | 0;
  $yychar = $yychar | 0;
  var $yyarg = 0, $yyformat = 0, $arrayidx = 0, $0 = 0, $conv = 0, $cmp = 0, $cmp4 = 0, $arrayidx6 = 0, $1 = 0, $conv7 = 0, $cond = 0, $arrayidx8 = 0, $2 = 0, $call = 0, $cmp9 = 0, $sub = 0, $sub_ = 0, $sub15 = 0, $add = 0, $cmp16 = 0, $cond21 = 0, $3 = 0, $arrayidx23 = 0, $arraydecay = 0, $call24 = 0, $cmp2545 = 0, $yycount_051 = 0, $yysize_050 = 0, $yyprefix_049 = 0, $yyfmt_048 = 0, $yyx_047 = 0, $yysize_overflow_046 = 0, $add27 = 0, $arrayidx28 = 0, $4 = 0, $conv29 = 0, $cmp30 = 0, $cmp33 = 0, $or_cond1 = 0, $cmp36 = 0, $arrayidx39 = 0, $arrayidx40 = 0, $5 = 0, $inc = 0, $arrayidx41 = 0, $6 = 0, $call43 = 0, $uadd38$0 = 0, $uadd38$1 = 0, $7 = 0, $cmp45 = 0, $conv46 = 0, $or = 0, $call47 = 0, $yysize_overflow_1 = 0, $yyfmt_1 = 0, $yyprefix_1 = 0, $yysize_1 = 0, $yycount_1 = 0, $inc49 = 0, $cmp25 = 0, $yysize_overflow_042 = 0, $yysize_2 = 0, $yycount_2 = 0, $call51 = 0, $uadd$0 = 0, $uadd$1 = 0, $8 = 0, $cmp53 = 0, $conv54 = 0, $or55 = 0, $tobool = 0, $tobool58 = 0, $yyf_0_ph = 0, $yyp_0_ph = 0, $yyi_0_ph = 0, $cmp72 = 0, $yyf_0 = 0, $yyp_0 = 0, $9 = 0, $arrayidx67 = 0, $10 = 0, $cmp69 = 0, $or_cond = 0, $inc75 = 0, $arrayidx76 = 0, $11 = 0, $call77 = 0, $add_ptr = 0, $add_ptr78 = 0, $incdec_ptr = 0, $incdec_ptr80 = 0, $retval_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 80 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $yyarg = __stackBase__ | 0;
    $yyformat = __stackBase__ + 20 | 0;
    $arrayidx = 32904 + ($yystate << 1) | 0;
    $0 = HEAP16[$arrayidx >> 1] | 0;
    $conv = $0 << 16 >> 16;
    $cmp = $0 << 16 >> 16 > -745;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $retval_0 = 0;
      label = 18;
      break;
    }
   case 3:
    $cmp4 = $yychar >>> 0 < 380;
    if ($cmp4) {
      label = 4;
      break;
    } else {
      $cond = 2;
      label = 5;
      break;
    }
   case 4:
    $arrayidx6 = $yychar + 4 | 0;
    $1 = HEAP8[$arrayidx6] | 0;
    $conv7 = $1 & 255;
    $cond = $conv7;
    label = 5;
    break;
   case 5:
    $arrayidx8 = 384 + ($cond << 2) | 0;
    $2 = HEAP32[$arrayidx8 >> 2] | 0;
    $call = _yytnamerr(0, $2) | 0;
    $cmp9 = $0 << 16 >> 16 < 0;
    $sub = -$conv | 0;
    $sub_ = $cmp9 ? $sub : 0;
    $sub15 = 10895 - $conv | 0;
    $add = $sub15 + 1 | 0;
    $cmp16 = ($add | 0) < 151;
    $cond21 = $cmp16 ? $add : 151;
    $3 = HEAP32[$arrayidx8 >> 2] | 0;
    $arrayidx23 = $yyarg | 0;
    HEAP32[$arrayidx23 >> 2] = $3;
    $arraydecay = $yyformat | 0;
    $call24 = _yystpcpy($arraydecay, 23400) | 0;
    $cmp2545 = ($sub_ | 0) < ($cond21 | 0);
    if ($cmp2545) {
      $yysize_overflow_046 = 0;
      $yyx_047 = $sub_;
      $yyfmt_048 = $call24;
      $yyprefix_049 = 23436;
      $yysize_050 = $call;
      $yycount_051 = 1;
      label = 6;
      break;
    } else {
      $yycount_2 = 1;
      $yysize_2 = $call;
      $yysize_overflow_042 = 0;
      label = 11;
      break;
    }
   case 6:
    $add27 = $yyx_047 + $conv | 0;
    $arrayidx28 = 37040 + ($add27 << 1) | 0;
    $4 = HEAP16[$arrayidx28 >> 1] | 0;
    $conv29 = $4 << 16 >> 16;
    $cmp30 = ($conv29 | 0) == ($yyx_047 | 0);
    $cmp33 = ($yyx_047 | 0) != 1;
    $or_cond1 = $cmp30 & $cmp33;
    if ($or_cond1) {
      label = 7;
      break;
    } else {
      $yycount_1 = $yycount_051;
      $yysize_1 = $yysize_050;
      $yyprefix_1 = $yyprefix_049;
      $yyfmt_1 = $yyfmt_048;
      $yysize_overflow_1 = $yysize_overflow_046;
      label = 10;
      break;
    }
   case 7:
    $cmp36 = ($yycount_051 | 0) == 5;
    if ($cmp36) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $arrayidx39 = $yyformat + 27 | 0;
    HEAP8[$arrayidx39] = 0;
    $yycount_2 = 1;
    $yysize_2 = $call;
    $yysize_overflow_042 = $yysize_overflow_046;
    label = 11;
    break;
   case 9:
    $arrayidx40 = 384 + ($yyx_047 << 2) | 0;
    $5 = HEAP32[$arrayidx40 >> 2] | 0;
    $inc = $yycount_051 + 1 | 0;
    $arrayidx41 = $yyarg + ($yycount_051 << 2) | 0;
    HEAP32[$arrayidx41 >> 2] = $5;
    $6 = HEAP32[$arrayidx40 >> 2] | 0;
    $call43 = _yytnamerr(0, $6) | 0;
    $uadd38$0 = _llvm_uadd_with_overflow_i32($yysize_050 | 0, $call43 | 0) | 0;
    $uadd38$1 = tempRet0;
    $7 = $uadd38$0;
    $cmp45 = $uadd38$1;
    $conv46 = $cmp45 & 1;
    $or = $conv46 | $yysize_overflow_046;
    $call47 = _yystpcpy($yyfmt_048, $yyprefix_049) | 0;
    $yycount_1 = $inc;
    $yysize_1 = $7;
    $yyprefix_1 = 23428;
    $yyfmt_1 = $call47;
    $yysize_overflow_1 = $or;
    label = 10;
    break;
   case 10:
    $inc49 = $yyx_047 + 1 | 0;
    $cmp25 = ($inc49 | 0) < ($cond21 | 0);
    if ($cmp25) {
      $yysize_overflow_046 = $yysize_overflow_1;
      $yyx_047 = $inc49;
      $yyfmt_048 = $yyfmt_1;
      $yyprefix_049 = $yyprefix_1;
      $yysize_050 = $yysize_1;
      $yycount_051 = $yycount_1;
      label = 6;
      break;
    } else {
      $yycount_2 = $yycount_1;
      $yysize_2 = $yysize_1;
      $yysize_overflow_042 = $yysize_overflow_1;
      label = 11;
      break;
    }
   case 11:
    $call51 = _yystrlen($arraydecay) | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($yysize_2 | 0, $call51 | 0) | 0;
    $uadd$1 = tempRet0;
    $8 = $uadd$0;
    $cmp53 = $uadd$1;
    $conv54 = $cmp53 & 1;
    $or55 = $conv54 | $yysize_overflow_042;
    $tobool = ($or55 | 0) == 0;
    if ($tobool) {
      label = 12;
      break;
    } else {
      $retval_0 = -1;
      label = 18;
      break;
    }
   case 12:
    $tobool58 = ($yyresult | 0) == 0;
    if ($tobool58) {
      $retval_0 = $8;
      label = 18;
      break;
    } else {
      $yyi_0_ph = 0;
      $yyp_0_ph = $yyresult;
      $yyf_0_ph = $arraydecay;
      label = 13;
      break;
    }
   case 13:
    $cmp72 = ($yyi_0_ph | 0) < ($yycount_2 | 0);
    $yyp_0 = $yyp_0_ph;
    $yyf_0 = $yyf_0_ph;
    label = 14;
    break;
   case 14:
    $9 = HEAP8[$yyf_0] | 0;
    HEAP8[$yyp_0] = $9;
    if (($9 << 24 >> 24 | 0) == 37) {
      label = 15;
      break;
    } else if (($9 << 24 >> 24 | 0) == 0) {
      $retval_0 = $8;
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 15:
    $arrayidx67 = $yyf_0 + 1 | 0;
    $10 = HEAP8[$arrayidx67] | 0;
    $cmp69 = $10 << 24 >> 24 == 115;
    $or_cond = $cmp69 & $cmp72;
    if ($or_cond) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    $inc75 = $yyi_0_ph + 1 | 0;
    $arrayidx76 = $yyarg + ($yyi_0_ph << 2) | 0;
    $11 = HEAP32[$arrayidx76 >> 2] | 0;
    $call77 = _yytnamerr($yyp_0, $11) | 0;
    $add_ptr = $yyp_0 + $call77 | 0;
    $add_ptr78 = $yyf_0 + 2 | 0;
    $yyi_0_ph = $inc75;
    $yyp_0_ph = $add_ptr;
    $yyf_0_ph = $add_ptr78;
    label = 13;
    break;
   case 17:
    $incdec_ptr = $yyp_0 + 1 | 0;
    $incdec_ptr80 = $yyf_0 + 1 | 0;
    $yyp_0 = $incdec_ptr;
    $yyf_0 = $incdec_ptr80;
    label = 14;
    break;
   case 18:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _yydestruct($yymsg, $yytype, $yyvaluep) {
  $yymsg = $yymsg | 0;
  $yytype = $yytype | 0;
  $yyvaluep = $yyvaluep | 0;
  var $0 = 0, $tobool1 = 0, $tobool = 0, $_yymsg = 0, $1 = 0, $call = 0, $2 = 0, $3 = 0, $fputc = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = HEAP32[9259] | 0;
    $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $tobool = ($yymsg | 0) == 0;
    $_yymsg = $tobool ? 104556 : $yymsg;
    $1 = HEAP32[_stderr >> 2] | 0;
    $call = _fprintf($1 | 0, 97372, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $_yymsg, tempInt) | 0) | 0;
    $2 = HEAP32[_stderr >> 2] | 0;
    _yy_symbol_print($2, $yytype, $yyvaluep);
    $3 = HEAP32[_stderr >> 2] | 0;
    $fputc = _fputc(10, $3 | 0) | 0;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_parser_parse($p, $c) {
  $p = $p | 0;
  $c = $c | 0;
  var $arraydecay = 0, $call = 0, $cmp = 0, $nerr = 0, $0 = 0, $inc = 0, $tree = 0, $cmd_start = 0, $in_single = 0, $in_def = 0, $nwarn = 0, $nerr1 = 0, $lex_strterm = 0, $call2 = 0, $tree3 = 0, $1 = 0, $tobool = 0, $call5 = 0, $tobool8 = 0, $2 = 0, $3 = 0, $bf_clear = 0, $tobool9 = 0, $mrb = 0, $4 = 0, $5 = 0, label = 0, setjmpLabel = 0, setjmpTable = 0;
  label = 2;
  setjmpLabel = 0;
  setjmpTable = STACKTOP;
  STACKTOP = STACKTOP + 168 | 0;
  HEAP32[setjmpTable >> 2] = 0;
  while (1) switch (label | 0) {
   case 2:
    $arraydecay = $p + 1384 | 0;
    $call = _saveSetjmp($arraydecay | 0, label, setjmpTable) | 0;
    label = 10;
    break;
   case 10:
    $cmp = ($call | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    invoke_vii(722, $p | 0, 95152);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $nerr = $p + 1128 | 0;
    $0 = HEAP32[$nerr >> 2] | 0;
    $inc = $0 + 1 | 0;
    HEAP32[$nerr >> 2] = $inc;
    $tree = $p + 1136 | 0;
    HEAP32[$tree >> 2] = 0;
    label = 9;
    break;
   case 4:
    $cmd_start = $p + 72 | 0;
    HEAP32[$cmd_start >> 2] = 1;
    $in_single = $p + 68 | 0;
    HEAP32[$in_single >> 2] = 0;
    $in_def = $p + 64 | 0;
    HEAP32[$in_def >> 2] = 0;
    $nwarn = $p + 1132 | 0;
    HEAP32[$nwarn >> 2] = 0;
    $nerr1 = $p + 1128 | 0;
    HEAP32[$nerr1 >> 2] = 0;
    $lex_strterm = $p + 44 | 0;
    HEAP32[$lex_strterm >> 2] = 0;
    invoke_vii(534, $p | 0, $c | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $call2 = invoke_ii(774, $p | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $tree3 = $p + 1136 | 0;
    $1 = HEAP32[$tree3 >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $call5 = invoke_ii(756, $p | 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    HEAP32[$tree3 >> 2] = $call5;
    label = 6;
    break;
   case 6:
    invoke_vii(224, $p | 0, $c | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    $tobool8 = ($c | 0) == 0;
    if ($tobool8) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $2 = $c + 24 | 0;
    $3 = HEAP8[$2] | 0;
    $bf_clear = $3 & 2;
    $tobool9 = $bf_clear << 24 >> 24 == 0;
    if ($tobool9) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $mrb = $p | 0;
    $4 = HEAP32[$mrb >> 2] | 0;
    $5 = HEAP32[$tree3 >> 2] | 0;
    invoke_viii(854, $4 | 0, $5 | 0, 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return;
    }
    __THREW__ = threwValue = 0;
    label = 9;
    break;
   case 9:
    return;
   case -1111:
    if ((setjmpLabel | 0) == 2) {
      $call = threwValue;
      label = 10;
    }
    __THREW__ = threwValue = 0;
    break;
  }
}
function _parser_init_cxt($p, $cxt) {
  $p = $p | 0;
  $cxt = $cxt | 0;
  var $tobool = 0, $lineno = 0, $0 = 0, $tobool1 = 0, $conv = 0, $lineno4 = 0, $filename = 0, $1 = 0, $tobool6 = 0, $filename9 = 0, $syms = 0, $2 = 0, $tobool11 = 0, $call = 0, $locals = 0, $slen = 0, $3 = 0, $cmp19 = 0, $i_020 = 0, $4 = 0, $arrayidx = 0, $5 = 0, $inc = 0, $6 = 0, $cmp = 0, $7 = 0, $8 = 0, $bf_clear = 0, $conv16 = 0, $capture_errors = 0, $partial_hook = 0, $9 = 0, $tobool17 = 0, $cxt19 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($cxt | 0) == 0;
    if ($tobool) {
      label = 12;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $lineno = $cxt + 12 | 0;
    $0 = HEAP16[$lineno >> 1] | 0;
    $tobool1 = $0 << 16 >> 16 == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $conv = $0 << 16 >> 16;
    $lineno4 = $p + 32 | 0;
    HEAP32[$lineno4 >> 2] = $conv;
    label = 5;
    break;
   case 5:
    $filename = $cxt + 8 | 0;
    $1 = HEAP32[$filename >> 2] | 0;
    $tobool6 = ($1 | 0) == 0;
    if ($tobool6) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $filename9 = $p + 28 | 0;
    HEAP32[$filename9 >> 2] = $1;
    label = 7;
    break;
   case 7:
    $syms = $cxt | 0;
    $2 = HEAP32[$syms >> 2] | 0;
    $tobool11 = ($2 | 0) == 0;
    if ($tobool11) {
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $call = _cons_gen($p, 0, 0) | 0;
    $locals = $p + 76 | 0;
    HEAP32[$locals >> 2] = $call;
    $slen = $cxt + 4 | 0;
    $3 = HEAP32[$slen >> 2] | 0;
    $cmp19 = ($3 | 0) > 0;
    if ($cmp19) {
      $i_020 = 0;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $4 = HEAP32[$syms >> 2] | 0;
    $arrayidx = $4 + ($i_020 << 1) | 0;
    $5 = HEAP16[$arrayidx >> 1] | 0;
    _local_add_f($p, $5);
    $inc = $i_020 + 1 | 0;
    $6 = HEAP32[$slen >> 2] | 0;
    $cmp = ($inc | 0) < ($6 | 0);
    if ($cmp) {
      $i_020 = $inc;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $7 = $cxt + 24 | 0;
    $8 = HEAP8[$7] | 0;
    $bf_clear = $8 & 1;
    $conv16 = $bf_clear & 255;
    $capture_errors = $p + 1140 | 0;
    HEAP32[$capture_errors >> 2] = $conv16;
    $partial_hook = $cxt + 16 | 0;
    $9 = HEAP32[$partial_hook >> 2] | 0;
    $tobool17 = ($9 | 0) == 0;
    if ($tobool17) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $cxt19 = $p + 24 | 0;
    HEAP32[$cxt19 >> 2] = $cxt;
    label = 12;
    break;
   case 12:
    return;
  }
}
function _parser_update_cxt($p, $cxt) {
  $p = $p | 0;
  $cxt = $cxt | 0;
  var $tobool = 0, $tree = 0, $0 = 0, $car = 0, $1 = 0, $cmp = 0, $cdr = 0, $2 = 0, $car4 = 0, $3 = 0, $tobool518 = 0, $i_020 = 0, $n_019 = 0, $inc = 0, $cdr6 = 0, $4 = 0, $tobool5 = 0, $i_0_lcssa = 0, $mrb = 0, $5 = 0, $syms = 0, $6 = 0, $7 = 0, $mul = 0, $call = 0, $8 = 0, $slen = 0, $tobool815 = 0, $i_117 = 0, $n_116 = 0, $car9 = 0, $9 = 0, $10 = 0, $conv = 0, $11 = 0, $arrayidx = 0, $inc11 = 0, $cdr12 = 0, $12 = 0, $tobool8 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($cxt | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $tree = $p + 1136 | 0;
    $0 = HEAP32[$tree >> 2] | 0;
    $car = $0 | 0;
    $1 = HEAP32[$car >> 2] | 0;
    $cmp = ($1 | 0) == 3;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 8;
      break;
    }
   case 4:
    $cdr = $0 + 4 | 0;
    $2 = HEAP32[$cdr >> 2] | 0;
    $car4 = $2 | 0;
    $3 = HEAP32[$car4 >> 2] | 0;
    $tobool518 = ($3 | 0) == 0;
    if ($tobool518) {
      $i_0_lcssa = 0;
      label = 6;
      break;
    } else {
      $n_019 = $3;
      $i_020 = 0;
      label = 5;
      break;
    }
   case 5:
    $inc = $i_020 + 1 | 0;
    $cdr6 = $n_019 + 4 | 0;
    $4 = HEAP32[$cdr6 >> 2] | 0;
    $tobool5 = ($4 | 0) == 0;
    if ($tobool5) {
      $i_0_lcssa = $inc;
      label = 6;
      break;
    } else {
      $n_019 = $4;
      $i_020 = $inc;
      label = 5;
      break;
    }
   case 6:
    $mrb = $p | 0;
    $5 = HEAP32[$mrb >> 2] | 0;
    $syms = $cxt | 0;
    $6 = HEAP32[$syms >> 2] | 0;
    $7 = $6;
    $mul = $i_0_lcssa << 1;
    $call = _mrb_realloc($5, $7, $mul) | 0;
    $8 = $call;
    HEAP32[$syms >> 2] = $8;
    $slen = $cxt + 4 | 0;
    HEAP32[$slen >> 2] = $i_0_lcssa;
    $tobool815 = ($3 | 0) == 0;
    if ($tobool815) {
      label = 8;
      break;
    } else {
      $n_116 = $3;
      $i_117 = 0;
      label = 7;
      break;
    }
   case 7:
    $car9 = $n_116 | 0;
    $9 = HEAP32[$car9 >> 2] | 0;
    $10 = $9;
    $conv = $10 & 65535;
    $11 = HEAP32[$syms >> 2] | 0;
    $arrayidx = $11 + ($i_117 << 1) | 0;
    HEAP16[$arrayidx >> 1] = $conv;
    $inc11 = $i_117 + 1 | 0;
    $cdr12 = $n_116 + 4 | 0;
    $12 = HEAP32[$cdr12 >> 2] | 0;
    $tobool8 = ($12 | 0) == 0;
    if ($tobool8) {
      label = 8;
      break;
    } else {
      $n_116 = $12;
      $i_117 = $inc11;
      label = 7;
      break;
    }
   case 8:
    return;
  }
}
function _parser_dump($mrb, $tree, $offset) {
  $mrb = $mrb | 0;
  $tree = $tree | 0;
  $offset = $offset | 0;
  var $tobool844 = 0, $offset_addr_0 = 0, $tree_addr_0 = 0, $car = 0, $0 = 0, $1 = 0, $cdr = 0, $2 = 0, $puts = 0, $add = 0, $puts518 = 0, $car3 = 0, $3 = 0, $tobool4 = 0, $add6 = 0, $puts519 = 0, $4 = 0, $add9 = 0, $cdr11 = 0, $5 = 0, $car12 = 0, $6 = 0, $tobool13 = 0, $add16 = 0, $puts520 = 0, $add43 = 0, $add48 = 0, $add32 = 0, $add36 = 0, $add23 = 0, $add26 = 0, $n2_0842 = 0, $car19 = 0, $7 = 0, $car20 = 0, $8 = 0, $tobool21 = 0, $puts521 = 0, $9 = 0, $cdr28 = 0, $10 = 0, $car29 = 0, $11 = 0, $tobool30 = 0, $puts522 = 0, $12 = 0, $car35 = 0, $13 = 0, $14 = 0, $cdr39 = 0, $15 = 0, $car40 = 0, $16 = 0, $tobool41 = 0, $puts523 = 0, $17 = 0, $cdr46 = 0, $18 = 0, $car47 = 0, $19 = 0, $cdr50 = 0, $20 = 0, $tobool18 = 0, $cdr52 = 0, $21 = 0, $car53 = 0, $22 = 0, $tobool54 = 0, $add56 = 0, $puts524 = 0, $23 = 0, $add59 = 0, $puts525 = 0, $add63 = 0, $puts526 = 0, $car65 = 0, $24 = 0, $add66 = 0, $puts527 = 0, $cdr69 = 0, $25 = 0, $cdr70 = 0, $26 = 0, $tree_tr_be = 0, $offset_tr_be = 0, $tobool = 0, $puts528 = 0, $puts529 = 0, $cdr76 = 0, $27 = 0, $car77 = 0, $28 = 0, $tobool78 = 0, $car82 = 0, $29 = 0, $tobool83 = 0, $add85 = 0, $puts530 = 0, $30 = 0, $add88 = 0, $cdr90 = 0, $31 = 0, $car91 = 0, $32 = 0, $tobool92 = 0, $add94 = 0, $puts531 = 0, $n296_0838 = 0, $tobool99839 = 0, $add101 = 0, $n296_0840 = 0, $car102 = 0, $33 = 0, $car103 = 0, $34 = 0, $35 = 0, $conv = 0, $call104 = 0, $call105 = 0, $36 = 0, $cdr107 = 0, $37 = 0, $cdr108 = 0, $n296_0 = 0, $tobool99 = 0, $cdr111 = 0, $38 = 0, $car112 = 0, $39 = 0, $tobool113 = 0, $add115 = 0, $40 = 0, $41 = 0, $conv117 = 0, $call118 = 0, $call119 = 0, $cdr121 = 0, $42 = 0, $car122 = 0, $43 = 0, $tobool123 = 0, $add125 = 0, $puts532 = 0, $44 = 0, $add128 = 0, $cdr130 = 0, $45 = 0, $tobool131 = 0, $add133 = 0, $46 = 0, $conv134 = 0, $call135 = 0, $call136 = 0, $add139 = 0, $puts533 = 0, $cdr141 = 0, $47 = 0, $car142 = 0, $48 = 0, $add143 = 0, $puts534 = 0, $add146 = 0, $puts535 = 0, $car148 = 0, $49 = 0, $add149 = 0, $puts536 = 0, $cdr152 = 0, $50 = 0, $car153 = 0, $51 = 0, $52 = 0, $cdr156 = 0, $53 = 0, $car157 = 0, $54 = 0, $tobool158 = 0, $puts537 = 0, $55 = 0, $cdr163 = 0, $56 = 0, $car164 = 0, $57 = 0, $puts538 = 0, $car169 = 0, $58 = 0, $add170 = 0, $cdr171 = 0, $59 = 0, $puts539 = 0, $car175 = 0, $60 = 0, $add176 = 0, $cdr177 = 0, $61 = 0, $puts540 = 0, $car181 = 0, $62 = 0, $tobool182 = 0, $add185 = 0, $tree_addr_1_in625 = 0, $tree_addr_1626 = 0, $tobool189627 = 0, $add191 = 0, $add195 = 0, $tree_addr_1628 = 0, $puts541 = 0, $car193 = 0, $63 = 0, $car194 = 0, $64 = 0, $puts542 = 0, $65 = 0, $cdr199 = 0, $66 = 0, $tree_addr_1_in = 0, $tree_addr_1 = 0, $tobool189 = 0, $puts543 = 0, $add205 = 0, $puts544 = 0, $car207 = 0, $67 = 0, $add208 = 0, $puts545 = 0, $cdr211 = 0, $68 = 0, $puts546 = 0, $add215 = 0, $puts547 = 0, $car217 = 0, $69 = 0, $add218 = 0, $puts548 = 0, $cdr221 = 0, $70 = 0, $puts549 = 0, $add225 = 0, $puts550 = 0, $car228 = 0, $71 = 0, $car229 = 0, $72 = 0, $tobool230 = 0, $add232 = 0, $puts551 = 0, $73 = 0, $add235 = 0, $cdr237 = 0, $74 = 0, $tobool238 = 0, $car240 = 0, $75 = 0, $tobool241 = 0, $add243 = 0, $puts552 = 0, $76 = 0, $add246 = 0, $cdr248 = 0, $77 = 0, $tobool249 = 0, $car251 = 0, $78 = 0, $tobool252 = 0, $add254 = 0, $puts553 = 0, $79 = 0, $add257 = 0, $cdr261 = 0, $80 = 0, $puts554 = 0, $car264 = 0, $81 = 0, $add265 = 0, $cdr266 = 0, $82 = 0, $puts555 = 0, $car269 = 0, $83 = 0, $puts556 = 0, $car274 = 0, $84 = 0, $tobool275 = 0, $car276 = 0, $85 = 0, $tobool277 = 0, $cdr278 = 0, $86 = 0, $tobool279 = 0, $add281 = 0, $puts557 = 0, $add283 = 0, $tobool285634 = 0, $n2273_0635 = 0, $car287 = 0, $87 = 0, $tobool288 = 0, $88 = 0, $cmp = 0, $call293 = 0, $89 = 0, $90 = 0, $conv296 = 0, $call297 = 0, $call298 = 0, $cdr300 = 0, $91 = 0, $tobool285 = 0, $putchar = 0, $cdr304 = 0, $92 = 0, $inc = 0, $puts558 = 0, $car307 = 0, $93 = 0, $add308 = 0, $cdr310 = 0, $94 = 0, $car311 = 0, $95 = 0, $96 = 0, $conv312 = 0, $call313 = 0, $97 = 0, $car315 = 0, $98 = 0, $99 = 0, $call316 = 0, $100 = 0, $cdr318 = 0, $101 = 0, $car319 = 0, $102 = 0, $tobool320 = 0, $puts559 = 0, $car324 = 0, $103 = 0, $add325 = 0, $cdr326 = 0, $104 = 0, $tobool327 = 0, $puts560 = 0, $105 = 0, $puts561 = 0, $car337 = 0, $106 = 0, $add338 = 0, $cdr339 = 0, $107 = 0, $puts562 = 0, $car343 = 0, $108 = 0, $add344 = 0, $cdr345 = 0, $109 = 0, $puts563 = 0, $car349 = 0, $110 = 0, $add350 = 0, $cdr352 = 0, $111 = 0, $112 = 0, $conv353 = 0, $call354 = 0, $call355 = 0, $puts564 = 0, $add358 = 0, $113 = 0, $conv359 = 0, $call360 = 0, $call361 = 0, $puts565 = 0, $add364 = 0, $puts566 = 0, $tobool368630 = 0, $add370 = 0, $add374 = 0, $tree_addr_2631 = 0, $puts567 = 0, $car372 = 0, $114 = 0, $car373 = 0, $115 = 0, $puts568 = 0, $116 = 0, $cdr378 = 0, $117 = 0, $cdr380 = 0, $118 = 0, $tobool368 = 0, $puts569 = 0, $add384 = 0, $puts570 = 0, $add387 = 0, $puts571 = 0, $car389 = 0, $119 = 0, $add390 = 0, $puts572 = 0, $cdr393 = 0, $120 = 0, $puts573 = 0, $add397 = 0, $puts574 = 0, $car400 = 0, $121 = 0, $car401 = 0, $122 = 0, $tobool402 = 0, $add404 = 0, $puts575 = 0, $123 = 0, $add407 = 0, $cdr409 = 0, $124 = 0, $tobool410 = 0, $car412 = 0, $125 = 0, $tobool413 = 0, $add415 = 0, $puts576 = 0, $126 = 0, $cmp418 = 0, $puts577 = 0, $add424 = 0, $cdr427 = 0, $127 = 0, $tobool428 = 0, $car430 = 0, $128 = 0, $tobool431 = 0, $add433 = 0, $puts578 = 0, $129 = 0, $add436 = 0, $puts579 = 0, $cdr442 = 0, $130 = 0, $add443 = 0, $puts580 = 0, $add446 = 0, $puts581 = 0, $car448 = 0, $131 = 0, $add449 = 0, $cdr450 = 0, $132 = 0, $car452 = 0, $133 = 0, $134 = 0, $conv453 = 0, $call454 = 0, $135 = 0, $136 = 0, $call456 = 0, $cdr457 = 0, $137 = 0, $car458 = 0, $138 = 0, $puts582 = 0, $tobool462 = 0, $add464 = 0, $puts583 = 0, $car466 = 0, $139 = 0, $add467 = 0, $cdr468 = 0, $140 = 0, $tobool469 = 0, $puts584 = 0, $141 = 0, $puts585 = 0, $puts586 = 0, $add481 = 0, $puts587 = 0, $add484 = 0, $puts588 = 0, $add487 = 0, $puts589 = 0, $add490 = 0, $puts590 = 0, $puts591 = 0, $142 = 0, $conv496 = 0, $call497 = 0, $call498 = 0, $143 = 0, $conv500 = 0, $call501 = 0, $call502 = 0, $144 = 0, $conv504 = 0, $call505 = 0, $call506 = 0, $145 = 0, $conv508 = 0, $call509 = 0, $call510 = 0, $146 = 0, $conv512 = 0, $call513 = 0, $call514 = 0, $puts592 = 0, $add517 = 0, $puts593 = 0, $car519 = 0, $147 = 0, $add520 = 0, $puts594 = 0, $cdr523 = 0, $148 = 0, $149 = 0, $call526 = 0, $150 = 0, $call528 = 0, $151 = 0, $conv530 = 0, $call531 = 0, $call532 = 0, $puts595 = 0, $add535 = 0, $car537 = 0, $152 = 0, $cdr538 = 0, $153 = 0, $car539 = 0, $154 = 0, $155 = 0, $call540 = 0, $call542 = 0, $puts596 = 0, $add545 = 0, $car547 = 0, $156 = 0, $cdr548 = 0, $157 = 0, $158 = 0, $call549 = 0, $puts597 = 0, $add552 = 0, $car554 = 0, $159 = 0, $cdr555 = 0, $160 = 0, $161 = 0, $call556 = 0, $puts598 = 0, $add559 = 0, $car561 = 0, $162 = 0, $cdr562 = 0, $163 = 0, $call563 = 0, $puts599 = 0, $car566 = 0, $164 = 0, $add567 = 0, $cdr568 = 0, $165 = 0, $cdr569 = 0, $166 = 0, $car570 = 0, $167 = 0, $call571 = 0, $168 = 0, $cdr573 = 0, $169 = 0, $cdr574 = 0, $170 = 0, $call575 = 0, $171 = 0, $conv577 = 0, $call578 = 0, $call579 = 0, $puts600 = 0, $puts601 = 0, $puts602 = 0, $puts603 = 0, $car589 = 0, $172 = 0, $173 = 0, $conv590 = 0, $call591 = 0, $cdr592 = 0, $174 = 0, $175 = 0, $conv593 = 0, $call594 = 0, $call595 = 0, $call597 = 0, $tobool599632 = 0, $t_0633 = 0, $car601 = 0, $176 = 0, $177 = 0, $conv602 = 0, $call603 = 0, $call604 = 0, $cdr605 = 0, $178 = 0, $tobool599 = 0, $puts604 = 0, $puts605 = 0, $car610 = 0, $179 = 0, $car611 = 0, $180 = 0, $magicptr = 0, $add615 = 0, $181 = 0, $cdr617 = 0, $182 = 0, $183 = 0, $conv618 = 0, $call619 = 0, $call620 = 0, $add627 = 0, $184 = 0, $cdr629 = 0, $185 = 0, $186 = 0, $conv630 = 0, $call631 = 0, $call632 = 0, $add636 = 0, $187 = 0, $cdr639 = 0, $188 = 0, $189 = 0, $conv640 = 0, $call641 = 0, $call642 = 0, $cdr645 = 0, $190 = 0, $car646 = 0, $191 = 0, $tobool647 = 0, $add649 = 0, $puts606 = 0, $192 = 0, $car652 = 0, $193 = 0, $add653 = 0, $add655 = 0, $puts607 = 0, $194 = 0, $cdr658 = 0, $195 = 0, $car659 = 0, $196 = 0, $cdr660 = 0, $197 = 0, $add661 = 0, $puts608 = 0, $car664 = 0, $198 = 0, $car665 = 0, $199 = 0, $magicptr517 = 0, $add669 = 0, $200 = 0, $cdr671 = 0, $201 = 0, $202 = 0, $conv672 = 0, $call673 = 0, $call674 = 0, $add681 = 0, $203 = 0, $cdr683 = 0, $204 = 0, $205 = 0, $conv684 = 0, $call685 = 0, $call686 = 0, $add690 = 0, $206 = 0, $cdr693 = 0, $207 = 0, $208 = 0, $conv694 = 0, $call695 = 0, $call696 = 0, $add699 = 0, $puts609 = 0, $cdr701 = 0, $209 = 0, $car702 = 0, $210 = 0, $cdr703 = 0, $211 = 0, $add704 = 0, $puts610 = 0, $car707 = 0, $212 = 0, $add708 = 0, $puts611 = 0, $cdr711 = 0, $213 = 0, $car712 = 0, $214 = 0, $cdr713 = 0, $215 = 0, $add714 = 0, $puts612 = 0, $add717 = 0, $car718 = 0, $216 = 0, $217 = 0, $conv719 = 0, $call720 = 0, $puts613 = 0, $cdr722 = 0, $218 = 0, $car724 = 0, $219 = 0, $tobool725 = 0, $car727 = 0, $220 = 0, $tobool728 = 0, $cdr730 = 0, $221 = 0, $tobool731 = 0, $puts614 = 0, $add735 = 0, $tobool737833 = 0, $n2723_0834 = 0, $car739 = 0, $222 = 0, $tobool740 = 0, $223 = 0, $cmp743 = 0, $call746 = 0, $224 = 0, $225 = 0, $conv749 = 0, $call750 = 0, $call751 = 0, $cdr753 = 0, $226 = 0, $tobool737 = 0, $putchar615 = 0, $cdr757 = 0, $227 = 0, $car758 = 0, $228 = 0, $tobool759 = 0, $car763 = 0, $229 = 0, $tobool764 = 0, $puts616 = 0, $230 = 0, $add769 = 0, $cdr771 = 0, $231 = 0, $car772 = 0, $232 = 0, $tobool773 = 0, $puts617 = 0, $n2777_0835 = 0, $tobool780836 = 0, $add782 = 0, $n2777_0837 = 0, $car783 = 0, $233 = 0, $car784 = 0, $234 = 0, $235 = 0, $conv785 = 0, $call786 = 0, $call787 = 0, $236 = 0, $cdr789 = 0, $237 = 0, $cdr790 = 0, $n2777_0 = 0, $tobool780 = 0, $cdr793 = 0, $238 = 0, $car794 = 0, $239 = 0, $tobool795 = 0, $240 = 0, $241 = 0, $conv799 = 0, $call800 = 0, $call801 = 0, $cdr803 = 0, $242 = 0, $car804 = 0, $243 = 0, $tobool805 = 0, $puts618 = 0, $244 = 0, $add810 = 0, $cdr812 = 0, $245 = 0, $tobool813 = 0, $246 = 0, $conv816 = 0, $call817 = 0, $call818 = 0, $cdr821 = 0, $247 = 0, $car822 = 0, $248 = 0, $puts619 = 0, $car826 = 0, $249 = 0, $add827 = 0, $cdr828 = 0, $250 = 0, $car830 = 0, $251 = 0, $252 = 0, $conv831 = 0, $call832 = 0, $call833 = 0, $cdr834 = 0, $253 = 0, $cdr835 = 0, $254 = 0, $car836 = 0, $255 = 0, $tobool837 = 0, $car841 = 0, $256 = 0, $tobool842 = 0, $puts620 = 0, $257 = 0, $add847 = 0, $cdr849 = 0, $258 = 0, $car850 = 0, $259 = 0, $tobool851 = 0, $puts621 = 0, $n2855_0830 = 0, $tobool858831 = 0, $add860 = 0, $n2855_0832 = 0, $car861 = 0, $260 = 0, $car862 = 0, $261 = 0, $262 = 0, $conv863 = 0, $call864 = 0, $call865 = 0, $263 = 0, $cdr867 = 0, $264 = 0, $cdr868 = 0, $n2855_0 = 0, $tobool858 = 0, $cdr871 = 0, $265 = 0, $car872 = 0, $266 = 0, $tobool873 = 0, $267 = 0, $268 = 0, $conv877 = 0, $call878 = 0, $call879 = 0, $cdr881 = 0, $269 = 0, $car882 = 0, $270 = 0, $tobool883 = 0, $puts622 = 0, $271 = 0, $add888 = 0, $cdr890 = 0, $272 = 0, $tobool891 = 0, $273 = 0, $conv894 = 0, $call895 = 0, $call896 = 0, $cdr899 = 0, $274 = 0, $car900 = 0, $275 = 0, $puts623 = 0, $add904 = 0, $puts624 = 0, $276 = 0, $277 = 0, $add907 = 0, $call908 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool844 = ($tree | 0) == 0;
    if ($tobool844) {
      label = 183;
      break;
    } else {
      $tree_addr_0 = $tree;
      $offset_addr_0 = $offset;
      label = 3;
      break;
    }
   case 3:
    _dump_prefix($offset_addr_0);
    $car = $tree_addr_0 | 0;
    $0 = HEAP32[$car >> 2] | 0;
    $1 = $0;
    $cdr = $tree_addr_0 + 4 | 0;
    $2 = HEAP32[$cdr >> 2] | 0;
    if (($1 | 0) == 17) {
      label = 4;
      break;
    } else if (($1 | 0) == 18) {
      label = 5;
      break;
    } else if (($1 | 0) == 19) {
      label = 18;
      break;
    } else if (($1 | 0) == 53) {
      label = 20;
      break;
    } else if (($1 | 0) == 4) {
      label = 21;
      break;
    } else if (($1 | 0) == 5) {
      label = 35;
      break;
    } else if (($1 | 0) == 20) {
      label = 37;
      break;
    } else if (($1 | 0) == 21) {
      label = 38;
      break;
    } else if (($1 | 0) == 6) {
      label = 39;
      break;
    } else if (($1 | 0) == 9) {
      label = 44;
      break;
    } else if (($1 | 0) == 10) {
      label = 45;
      break;
    } else if (($1 | 0) == 12) {
      label = 46;
      break;
    } else if (($1 | 0) == 3) {
      label = 55;
      break;
    } else if (($1 | 0) == 30 | ($1 | 0) == 29) {
      label = 66;
      break;
    } else if (($1 | 0) == 80) {
      label = 69;
      break;
    } else if (($1 | 0) == 81) {
      label = 70;
      break;
    } else if (($1 | 0) == 77) {
      label = 71;
      break;
    } else if (($1 | 0) == 78) {
      label = 72;
      break;
    } else if (($1 | 0) == 34) {
      label = 73;
      break;
    } else if (($1 | 0) == 36) {
      label = 74;
      break;
    } else if (($1 | 0) == 66) {
      label = 77;
      break;
    } else if (($1 | 0) == 24) {
      label = 78;
      break;
    } else if (($1 | 0) == 23) {
      label = 79;
      break;
    } else if (($1 | 0) == 28) {
      label = 90;
      break;
    } else if (($1 | 0) == 32) {
      label = 91;
      break;
    } else if (($1 | 0) == 33) {
      label = 94;
      break;
    } else if (($1 | 0) == 37) {
      label = 95;
      break;
    } else if (($1 | 0) == 38) {
      label = 96;
      break;
    } else if (($1 | 0) == 13) {
      label = 97;
      break;
    } else if (($1 | 0) == 14) {
      label = 98;
      break;
    } else if (($1 | 0) == 15) {
      label = 99;
      break;
    } else if (($1 | 0) == 16) {
      label = 100;
      break;
    } else if (($1 | 0) == 39) {
      label = 101;
      break;
    } else if (($1 | 0) == 41) {
      label = 102;
      break;
    } else if (($1 | 0) == 42) {
      label = 103;
      break;
    } else if (($1 | 0) == 44) {
      label = 104;
      break;
    } else if (($1 | 0) == 43) {
      label = 105;
      break;
    } else if (($1 | 0) == 47) {
      label = 106;
      break;
    } else if (($1 | 0) == 46) {
      label = 107;
      break;
    } else if (($1 | 0) == 45) {
      label = 108;
      break;
    } else if (($1 | 0) == 63) {
      label = 109;
      break;
    } else if (($1 | 0) == 69) {
      label = 110;
      break;
    } else if (($1 | 0) == 50) {
      label = 111;
      break;
    } else if (($1 | 0) == 51) {
      label = 112;
      break;
    } else if (($1 | 0) == 52) {
      label = 113;
      break;
    } else if (($1 | 0) == 55) {
      label = 114;
      break;
    } else if (($1 | 0) == 56) {
      label = 115;
      break;
    } else if (($1 | 0) == 57) {
      label = 116;
      break;
    } else if (($1 | 0) == 58) {
      label = 117;
      break;
    } else if (($1 | 0) == 59) {
      label = 118;
      break;
    } else if (($1 | 0) == 60) {
      label = 119;
      break;
    } else if (($1 | 0) == 54) {
      label = 120;
      break;
    } else if (($1 | 0) == 85) {
      label = 121;
      break;
    } else if (($1 | 0) == 86) {
      label = 122;
      break;
    } else if (($1 | 0) == 87) {
      label = 123;
      break;
    } else if (($1 | 0) == 88) {
      label = 124;
      break;
    } else if (($1 | 0) == 72) {
      label = 125;
      break;
    } else if (($1 | 0) == 73) {
      label = 126;
      break;
    } else if (($1 | 0) == 74) {
      label = 129;
      break;
    } else if (($1 | 0) == 75) {
      label = 136;
      break;
    } else if (($1 | 0) == 76) {
      label = 141;
      break;
    } else if (($1 | 0) == 70) {
      label = 142;
      break;
    } else if (($1 | 0) == 71) {
      label = 166;
      break;
    } else if (($1 | 0) == 91) {
      label = 180;
      break;
    } else if (($1 | 0) == 99) {
      label = 181;
      break;
    } else {
      label = 182;
      break;
    }
   case 4:
    $puts = _puts(60128) | 0;
    $add = $offset_addr_0 + 1 | 0;
    _dump_recur($mrb, $2, $add);
    label = 183;
    break;
   case 5:
    $puts518 = _puts(60112) | 0;
    $car3 = $2 | 0;
    $3 = HEAP32[$car3 >> 2] | 0;
    $tobool4 = ($3 | 0) == 0;
    if ($tobool4) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $add6 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add6);
    $puts519 = _puts(59832) | 0;
    $4 = HEAP32[$car3 >> 2] | 0;
    $add9 = $offset_addr_0 + 2 | 0;
    _parser_dump($mrb, $4, $add9);
    label = 7;
    break;
   case 7:
    $cdr11 = $2 + 4 | 0;
    $5 = HEAP32[$cdr11 >> 2] | 0;
    $car12 = $5 | 0;
    $6 = HEAP32[$car12 >> 2] | 0;
    $tobool13 = ($6 | 0) == 0;
    if ($tobool13) {
      label = 16;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $add16 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add16);
    $puts520 = _puts(59724) | 0;
    $add43 = $offset_addr_0 + 2 | 0;
    $add48 = $offset_addr_0 + 3 | 0;
    $add32 = $offset_addr_0 + 2 | 0;
    $add36 = $offset_addr_0 + 3 | 0;
    $add23 = $offset_addr_0 + 2 | 0;
    $add26 = $offset_addr_0 + 3 | 0;
    $n2_0842 = $6;
    label = 9;
    break;
   case 9:
    $car19 = $n2_0842 | 0;
    $7 = HEAP32[$car19 >> 2] | 0;
    $car20 = $7 | 0;
    $8 = HEAP32[$car20 >> 2] | 0;
    $tobool21 = ($8 | 0) == 0;
    if ($tobool21) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _dump_prefix($add23);
    $puts521 = _puts(59628) | 0;
    $9 = HEAP32[$car20 >> 2] | 0;
    _dump_recur($mrb, $9, $add26);
    label = 11;
    break;
   case 11:
    $cdr28 = $7 + 4 | 0;
    $10 = HEAP32[$cdr28 >> 2] | 0;
    $car29 = $10 | 0;
    $11 = HEAP32[$car29 >> 2] | 0;
    $tobool30 = ($11 | 0) == 0;
    if ($tobool30) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    _dump_prefix($add32);
    $puts522 = _puts(59488) | 0;
    $12 = HEAP32[$cdr28 >> 2] | 0;
    $car35 = $12 | 0;
    $13 = HEAP32[$car35 >> 2] | 0;
    _parser_dump($mrb, $13, $add36);
    label = 13;
    break;
   case 13:
    $14 = HEAP32[$cdr28 >> 2] | 0;
    $cdr39 = $14 + 4 | 0;
    $15 = HEAP32[$cdr39 >> 2] | 0;
    $car40 = $15 | 0;
    $16 = HEAP32[$car40 >> 2] | 0;
    $tobool41 = ($16 | 0) == 0;
    if ($tobool41) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    _dump_prefix($add43);
    $puts523 = _puts(59380) | 0;
    $17 = HEAP32[$cdr28 >> 2] | 0;
    $cdr46 = $17 + 4 | 0;
    $18 = HEAP32[$cdr46 >> 2] | 0;
    $car47 = $18 | 0;
    $19 = HEAP32[$car47 >> 2] | 0;
    _parser_dump($mrb, $19, $add48);
    label = 15;
    break;
   case 15:
    $cdr50 = $n2_0842 + 4 | 0;
    $20 = HEAP32[$cdr50 >> 2] | 0;
    $tobool18 = ($20 | 0) == 0;
    if ($tobool18) {
      label = 16;
      break;
    } else {
      $n2_0842 = $20;
      label = 9;
      break;
    }
   case 16:
    $cdr52 = $5 + 4 | 0;
    $21 = HEAP32[$cdr52 >> 2] | 0;
    $car53 = $21 | 0;
    $22 = HEAP32[$car53 >> 2] | 0;
    $tobool54 = ($22 | 0) == 0;
    if ($tobool54) {
      label = 183;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $add56 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add56);
    $puts524 = _puts(59268) | 0;
    $23 = HEAP32[$car53 >> 2] | 0;
    $add59 = $offset_addr_0 + 2 | 0;
    $offset_tr_be = $add59;
    $tree_tr_be = $23;
    label = 19;
    break;
   case 18:
    $puts525 = _puts(59136) | 0;
    $add63 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add63);
    $puts526 = _puts(59020) | 0;
    $car65 = $2 | 0;
    $24 = HEAP32[$car65 >> 2] | 0;
    $add66 = $offset_addr_0 + 2 | 0;
    _parser_dump($mrb, $24, $add66);
    _dump_prefix($add63);
    $puts527 = _puts(60104) | 0;
    $cdr69 = $2 + 4 | 0;
    $25 = HEAP32[$cdr69 >> 2] | 0;
    $cdr70 = $25 + 4 | 0;
    $26 = HEAP32[$cdr70 >> 2] | 0;
    $offset_tr_be = $add66;
    $tree_tr_be = $26;
    label = 19;
    break;
   case 19:
    $tobool = ($tree_tr_be | 0) == 0;
    if ($tobool) {
      label = 183;
      break;
    } else {
      $tree_addr_0 = $tree_tr_be;
      $offset_addr_0 = $offset_tr_be;
      label = 3;
      break;
    }
   case 20:
    $puts528 = _puts(59960) | 0;
    label = 21;
    break;
   case 21:
    $puts529 = _puts(59932) | 0;
    $cdr76 = $2 + 4 | 0;
    $27 = HEAP32[$cdr76 >> 2] | 0;
    $car77 = $27 | 0;
    $28 = HEAP32[$car77 >> 2] | 0;
    $tobool78 = ($28 | 0) == 0;
    if ($tobool78) {
      label = 34;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $car82 = $28 | 0;
    $29 = HEAP32[$car82 >> 2] | 0;
    $tobool83 = ($29 | 0) == 0;
    if ($tobool83) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $add85 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add85);
    $puts530 = _puts(59916) | 0;
    $30 = HEAP32[$car82 >> 2] | 0;
    $add88 = $offset_addr_0 + 2 | 0;
    _dump_recur($mrb, $30, $add88);
    label = 24;
    break;
   case 24:
    $cdr90 = $28 + 4 | 0;
    $31 = HEAP32[$cdr90 >> 2] | 0;
    $car91 = $31 | 0;
    $32 = HEAP32[$car91 >> 2] | 0;
    $tobool92 = ($32 | 0) == 0;
    if ($tobool92) {
      label = 28;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $add94 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add94);
    $puts531 = _puts(59900) | 0;
    $n296_0838 = HEAP32[$car91 >> 2] | 0;
    $tobool99839 = ($n296_0838 | 0) == 0;
    if ($tobool99839) {
      label = 28;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    $add101 = $offset_addr_0 + 2 | 0;
    $n296_0840 = $n296_0838;
    label = 27;
    break;
   case 27:
    _dump_prefix($add101);
    $car102 = $n296_0840 | 0;
    $33 = HEAP32[$car102 >> 2] | 0;
    $car103 = $33 | 0;
    $34 = HEAP32[$car103 >> 2] | 0;
    $35 = $34;
    $conv = $35 & 65535;
    $call104 = _mrb_sym2name($mrb, $conv) | 0;
    $call105 = _printf(93892, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call104, tempInt) | 0) | 0;
    $36 = HEAP32[$car102 >> 2] | 0;
    $cdr107 = $36 + 4 | 0;
    $37 = HEAP32[$cdr107 >> 2] | 0;
    _parser_dump($mrb, $37, 0);
    $cdr108 = $n296_0840 + 4 | 0;
    $n296_0 = HEAP32[$cdr108 >> 2] | 0;
    $tobool99 = ($n296_0 | 0) == 0;
    if ($tobool99) {
      label = 28;
      break;
    } else {
      $n296_0840 = $n296_0;
      label = 27;
      break;
    }
   case 28:
    $cdr111 = $31 + 4 | 0;
    $38 = HEAP32[$cdr111 >> 2] | 0;
    $car112 = $38 | 0;
    $39 = HEAP32[$car112 >> 2] | 0;
    $tobool113 = ($39 | 0) == 0;
    if ($tobool113) {
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $add115 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add115);
    $40 = HEAP32[$car112 >> 2] | 0;
    $41 = $40;
    $conv117 = $41 & 65535;
    $call118 = _mrb_sym2name($mrb, $conv117) | 0;
    $call119 = _printf(93800, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call118, tempInt) | 0) | 0;
    label = 30;
    break;
   case 30:
    $cdr121 = $38 + 4 | 0;
    $42 = HEAP32[$cdr121 >> 2] | 0;
    $car122 = $42 | 0;
    $43 = HEAP32[$car122 >> 2] | 0;
    $tobool123 = ($43 | 0) == 0;
    if ($tobool123) {
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    $add125 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add125);
    $puts532 = _puts(59876) | 0;
    $44 = HEAP32[$car122 >> 2] | 0;
    $add128 = $offset_addr_0 + 2 | 0;
    _dump_recur($mrb, $44, $add128);
    label = 32;
    break;
   case 32:
    $cdr130 = $42 + 4 | 0;
    $45 = HEAP32[$cdr130 >> 2] | 0;
    $tobool131 = ($45 | 0) == 0;
    if ($tobool131) {
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    $add133 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add133);
    $46 = $45;
    $conv134 = $46 & 65535;
    $call135 = _mrb_sym2name($mrb, $conv134) | 0;
    $call136 = _printf(93712, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call135, tempInt) | 0) | 0;
    label = 34;
    break;
   case 34:
    $add139 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add139);
    $puts533 = _puts(59868) | 0;
    $cdr141 = $27 + 4 | 0;
    $47 = HEAP32[$cdr141 >> 2] | 0;
    $car142 = $47 | 0;
    $48 = HEAP32[$car142 >> 2] | 0;
    $add143 = $offset_addr_0 + 2 | 0;
    $offset_tr_be = $add143;
    $tree_tr_be = $48;
    label = 19;
    break;
   case 35:
    $puts534 = _puts(59856) | 0;
    $add146 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add146);
    $puts535 = _puts(59848) | 0;
    $car148 = $2 | 0;
    $49 = HEAP32[$car148 >> 2] | 0;
    $add149 = $offset_addr_0 + 2 | 0;
    _parser_dump($mrb, $49, $add149);
    _dump_prefix($add146);
    $puts536 = _puts(59840) | 0;
    $cdr152 = $2 + 4 | 0;
    $50 = HEAP32[$cdr152 >> 2] | 0;
    $car153 = $50 | 0;
    $51 = HEAP32[$car153 >> 2] | 0;
    _parser_dump($mrb, $51, $add149);
    $52 = HEAP32[$cdr152 >> 2] | 0;
    $cdr156 = $52 + 4 | 0;
    $53 = HEAP32[$cdr156 >> 2] | 0;
    $car157 = $53 | 0;
    $54 = HEAP32[$car157 >> 2] | 0;
    $tobool158 = ($54 | 0) == 0;
    if ($tobool158) {
      label = 183;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    _dump_prefix($add146);
    $puts537 = _puts(59824) | 0;
    $55 = HEAP32[$cdr152 >> 2] | 0;
    $cdr163 = $55 + 4 | 0;
    $56 = HEAP32[$cdr163 >> 2] | 0;
    $car164 = $56 | 0;
    $57 = HEAP32[$car164 >> 2] | 0;
    $offset_tr_be = $add149;
    $tree_tr_be = $57;
    label = 19;
    break;
   case 37:
    $puts538 = _puts(59812) | 0;
    $car169 = $2 | 0;
    $58 = HEAP32[$car169 >> 2] | 0;
    $add170 = $offset_addr_0 + 1 | 0;
    _parser_dump($mrb, $58, $add170);
    $cdr171 = $2 + 4 | 0;
    $59 = HEAP32[$cdr171 >> 2] | 0;
    $offset_tr_be = $add170;
    $tree_tr_be = $59;
    label = 19;
    break;
   case 38:
    $puts539 = _puts(59800) | 0;
    $car175 = $2 | 0;
    $60 = HEAP32[$car175 >> 2] | 0;
    $add176 = $offset_addr_0 + 1 | 0;
    _parser_dump($mrb, $60, $add176);
    $cdr177 = $2 + 4 | 0;
    $61 = HEAP32[$cdr177 >> 2] | 0;
    $offset_tr_be = $add176;
    $tree_tr_be = $61;
    label = 19;
    break;
   case 39:
    $puts540 = _puts(59788) | 0;
    $car181 = $2 | 0;
    $62 = HEAP32[$car181 >> 2] | 0;
    $tobool182 = ($62 | 0) == 0;
    if ($tobool182) {
      label = 41;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    $add185 = $offset_addr_0 + 1 | 0;
    _parser_dump($mrb, $62, $add185);
    label = 41;
    break;
   case 41:
    $tree_addr_1_in625 = $2 + 4 | 0;
    $tree_addr_1626 = HEAP32[$tree_addr_1_in625 >> 2] | 0;
    $tobool189627 = ($tree_addr_1626 | 0) == 0;
    if ($tobool189627) {
      label = 183;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    $add191 = $offset_addr_0 + 1 | 0;
    $add195 = $offset_addr_0 + 2 | 0;
    $tree_addr_1628 = $tree_addr_1626;
    label = 43;
    break;
   case 43:
    _dump_prefix($add191);
    $puts541 = _puts(59780) | 0;
    $car193 = $tree_addr_1628 | 0;
    $63 = HEAP32[$car193 >> 2] | 0;
    $car194 = $63 | 0;
    $64 = HEAP32[$car194 >> 2] | 0;
    _dump_recur($mrb, $64, $add195);
    _dump_prefix($add191);
    $puts542 = _puts(59772) | 0;
    $65 = HEAP32[$car193 >> 2] | 0;
    $cdr199 = $65 + 4 | 0;
    $66 = HEAP32[$cdr199 >> 2] | 0;
    _parser_dump($mrb, $66, $add195);
    $tree_addr_1_in = $tree_addr_1628 + 4 | 0;
    $tree_addr_1 = HEAP32[$tree_addr_1_in >> 2] | 0;
    $tobool189 = ($tree_addr_1 | 0) == 0;
    if ($tobool189) {
      label = 183;
      break;
    } else {
      $tree_addr_1628 = $tree_addr_1;
      label = 43;
      break;
    }
   case 44:
    $puts543 = _puts(59760) | 0;
    $add205 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add205);
    $puts544 = _puts(59752) | 0;
    $car207 = $2 | 0;
    $67 = HEAP32[$car207 >> 2] | 0;
    $add208 = $offset_addr_0 + 2 | 0;
    _parser_dump($mrb, $67, $add208);
    _dump_prefix($add205);
    $puts545 = _puts(59744) | 0;
    $cdr211 = $2 + 4 | 0;
    $68 = HEAP32[$cdr211 >> 2] | 0;
    $offset_tr_be = $add208;
    $tree_tr_be = $68;
    label = 19;
    break;
   case 45:
    $puts546 = _puts(59732) | 0;
    $add215 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add215);
    $puts547 = _puts(59716) | 0;
    $car217 = $2 | 0;
    $69 = HEAP32[$car217 >> 2] | 0;
    $add218 = $offset_addr_0 + 2 | 0;
    _parser_dump($mrb, $69, $add218);
    _dump_prefix($add215);
    $puts548 = _puts(59708) | 0;
    $cdr221 = $2 + 4 | 0;
    $70 = HEAP32[$cdr221 >> 2] | 0;
    $offset_tr_be = $add218;
    $tree_tr_be = $70;
    label = 19;
    break;
   case 46:
    $puts549 = _puts(59696) | 0;
    $add225 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add225);
    $puts550 = _puts(59688) | 0;
    $car228 = $2 | 0;
    $71 = HEAP32[$car228 >> 2] | 0;
    $car229 = $71 | 0;
    $72 = HEAP32[$car229 >> 2] | 0;
    $tobool230 = ($72 | 0) == 0;
    if ($tobool230) {
      label = 48;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    $add232 = $offset_addr_0 + 2 | 0;
    _dump_prefix($add232);
    $puts551 = _puts(59680) | 0;
    $73 = HEAP32[$car229 >> 2] | 0;
    $add235 = $offset_addr_0 + 3 | 0;
    _dump_recur($mrb, $73, $add235);
    label = 48;
    break;
   case 48:
    $cdr237 = $71 + 4 | 0;
    $74 = HEAP32[$cdr237 >> 2] | 0;
    $tobool238 = ($74 | 0) == 0;
    if ($tobool238) {
      label = 54;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    $car240 = $74 | 0;
    $75 = HEAP32[$car240 >> 2] | 0;
    $tobool241 = ($75 | 0) == 0;
    if ($tobool241) {
      label = 51;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    $add243 = $offset_addr_0 + 2 | 0;
    _dump_prefix($add243);
    $puts552 = _puts(59672) | 0;
    $76 = HEAP32[$car240 >> 2] | 0;
    $add246 = $offset_addr_0 + 3 | 0;
    _parser_dump($mrb, $76, $add246);
    label = 51;
    break;
   case 51:
    $cdr248 = $74 + 4 | 0;
    $77 = HEAP32[$cdr248 >> 2] | 0;
    $tobool249 = ($77 | 0) == 0;
    if ($tobool249) {
      label = 54;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    $car251 = $77 | 0;
    $78 = HEAP32[$car251 >> 2] | 0;
    $tobool252 = ($78 | 0) == 0;
    if ($tobool252) {
      label = 54;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    $add254 = $offset_addr_0 + 2 | 0;
    _dump_prefix($add254);
    $puts553 = _puts(59664) | 0;
    $79 = HEAP32[$car251 >> 2] | 0;
    $add257 = $offset_addr_0 + 3 | 0;
    _dump_recur($mrb, $79, $add257);
    label = 54;
    break;
   case 54:
    $cdr261 = $2 + 4 | 0;
    $80 = HEAP32[$cdr261 >> 2] | 0;
    _dump_prefix($add225);
    $puts554 = _puts(59660) | 0;
    $car264 = $80 | 0;
    $81 = HEAP32[$car264 >> 2] | 0;
    $add265 = $offset_addr_0 + 2 | 0;
    _parser_dump($mrb, $81, $add265);
    $cdr266 = $80 + 4 | 0;
    $82 = HEAP32[$cdr266 >> 2] | 0;
    _dump_prefix($add225);
    $puts555 = _puts(59656) | 0;
    $car269 = $82 | 0;
    $83 = HEAP32[$car269 >> 2] | 0;
    $offset_tr_be = $add265;
    $tree_tr_be = $83;
    label = 19;
    break;
   case 55:
    $puts556 = _puts(59644) | 0;
    $car274 = $2 | 0;
    $84 = HEAP32[$car274 >> 2] | 0;
    $tobool275 = ($84 | 0) == 0;
    if ($tobool275) {
      label = 65;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    $car276 = $84 | 0;
    $85 = HEAP32[$car276 >> 2] | 0;
    $tobool277 = ($85 | 0) == 0;
    if ($tobool277) {
      label = 57;
      break;
    } else {
      label = 58;
      break;
    }
   case 57:
    $cdr278 = $84 + 4 | 0;
    $86 = HEAP32[$cdr278 >> 2] | 0;
    $tobool279 = ($86 | 0) == 0;
    if ($tobool279) {
      label = 65;
      break;
    } else {
      label = 58;
      break;
    }
   case 58:
    $add281 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add281);
    $puts557 = _puts(59608) | 0;
    $add283 = $offset_addr_0 + 2 | 0;
    _dump_prefix($add283);
    $tobool285634 = ($84 | 0) == 0;
    if ($tobool285634) {
      label = 64;
      break;
    } else {
      $n2273_0635 = $84;
      label = 59;
      break;
    }
   case 59:
    $car287 = $n2273_0635 | 0;
    $87 = HEAP32[$car287 >> 2] | 0;
    $tobool288 = ($87 | 0) == 0;
    if ($tobool288) {
      label = 63;
      break;
    } else {
      label = 60;
      break;
    }
   case 60:
    $88 = HEAP32[$car274 >> 2] | 0;
    $cmp = ($n2273_0635 | 0) == ($88 | 0);
    if ($cmp) {
      label = 62;
      break;
    } else {
      label = 61;
      break;
    }
   case 61:
    $call293 = _printf(92224, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
    label = 62;
    break;
   case 62:
    $89 = HEAP32[$car287 >> 2] | 0;
    $90 = $89;
    $conv296 = $90 & 65535;
    $call297 = _mrb_sym2name($mrb, $conv296) | 0;
    $call298 = _printf(92200, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call297, tempInt) | 0) | 0;
    label = 63;
    break;
   case 63:
    $cdr300 = $n2273_0635 + 4 | 0;
    $91 = HEAP32[$cdr300 >> 2] | 0;
    $tobool285 = ($91 | 0) == 0;
    if ($tobool285) {
      label = 64;
      break;
    } else {
      $n2273_0635 = $91;
      label = 59;
      break;
    }
   case 64:
    $putchar = _putchar(10) | 0;
    label = 65;
    break;
   case 65:
    $cdr304 = $2 + 4 | 0;
    $92 = HEAP32[$cdr304 >> 2] | 0;
    $inc = $offset_addr_0 + 1 | 0;
    $tree_addr_0 = $92;
    $offset_addr_0 = $inc;
    label = 3;
    break;
   case 66:
    $puts558 = _puts(59596) | 0;
    $car307 = $2 | 0;
    $93 = HEAP32[$car307 >> 2] | 0;
    $add308 = $offset_addr_0 + 1 | 0;
    _parser_dump($mrb, $93, $add308);
    _dump_prefix($add308);
    $cdr310 = $2 + 4 | 0;
    $94 = HEAP32[$cdr310 >> 2] | 0;
    $car311 = $94 | 0;
    $95 = HEAP32[$car311 >> 2] | 0;
    $96 = $95;
    $conv312 = $96 & 65535;
    $call313 = _mrb_sym2name($mrb, $conv312) | 0;
    $97 = HEAP32[$cdr310 >> 2] | 0;
    $car315 = $97 | 0;
    $98 = HEAP32[$car315 >> 2] | 0;
    $99 = $98;
    $call316 = _printf(111584, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $call313, HEAP32[tempInt + 4 >> 2] = $99, tempInt) | 0) | 0;
    $100 = HEAP32[$cdr310 >> 2] | 0;
    $cdr318 = $100 + 4 | 0;
    $101 = HEAP32[$cdr318 >> 2] | 0;
    $car319 = $101 | 0;
    $102 = HEAP32[$car319 >> 2] | 0;
    $tobool320 = ($102 | 0) == 0;
    if ($tobool320) {
      label = 183;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    _dump_prefix($add308);
    $puts559 = _puts(59588) | 0;
    $car324 = $102 | 0;
    $103 = HEAP32[$car324 >> 2] | 0;
    $add325 = $offset_addr_0 + 2 | 0;
    _dump_recur($mrb, $103, $add325);
    $cdr326 = $102 + 4 | 0;
    $104 = HEAP32[$cdr326 >> 2] | 0;
    $tobool327 = ($104 | 0) == 0;
    if ($tobool327) {
      label = 183;
      break;
    } else {
      label = 68;
      break;
    }
   case 68:
    _dump_prefix($add308);
    $puts560 = _puts(59580) | 0;
    $105 = HEAP32[$cdr326 >> 2] | 0;
    $offset_tr_be = $add325;
    $tree_tr_be = $105;
    label = 19;
    break;
   case 69:
    $puts561 = _puts(59568) | 0;
    $car337 = $2 | 0;
    $106 = HEAP32[$car337 >> 2] | 0;
    $add338 = $offset_addr_0 + 1 | 0;
    _parser_dump($mrb, $106, $add338);
    $cdr339 = $2 + 4 | 0;
    $107 = HEAP32[$cdr339 >> 2] | 0;
    $offset_tr_be = $add338;
    $tree_tr_be = $107;
    label = 19;
    break;
   case 70:
    $puts562 = _puts(59556) | 0;
    $car343 = $2 | 0;
    $108 = HEAP32[$car343 >> 2] | 0;
    $add344 = $offset_addr_0 + 1 | 0;
    _parser_dump($mrb, $108, $add344);
    $cdr345 = $2 + 4 | 0;
    $109 = HEAP32[$cdr345 >> 2] | 0;
    $offset_tr_be = $add344;
    $tree_tr_be = $109;
    label = 19;
    break;
   case 71:
    $puts563 = _puts(59540) | 0;
    $car349 = $2 | 0;
    $110 = HEAP32[$car349 >> 2] | 0;
    $add350 = $offset_addr_0 + 1 | 0;
    _parser_dump($mrb, $110, $add350);
    _dump_prefix($add350);
    $cdr352 = $2 + 4 | 0;
    $111 = HEAP32[$cdr352 >> 2] | 0;
    $112 = $111;
    $conv353 = $112 & 65535;
    $call354 = _mrb_sym2name($mrb, $conv353) | 0;
    $call355 = _printf(111136, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call354, tempInt) | 0) | 0;
    STACKTOP = __stackBase__;
    return;
   case 72:
    $puts564 = _puts(59524) | 0;
    $add358 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add358);
    $113 = $2;
    $conv359 = $113 & 65535;
    $call360 = _mrb_sym2name($mrb, $conv359) | 0;
    $call361 = _printf(111136, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call360, tempInt) | 0) | 0;
    label = 183;
    break;
   case 73:
    $puts565 = _puts(59512) | 0;
    $add364 = $offset_addr_0 + 1 | 0;
    _dump_recur($mrb, $2, $add364);
    label = 183;
    break;
   case 74:
    $puts566 = _puts(59500) | 0;
    $tobool368630 = ($2 | 0) == 0;
    if ($tobool368630) {
      label = 183;
      break;
    } else {
      label = 75;
      break;
    }
   case 75:
    $add370 = $offset_addr_0 + 1 | 0;
    $add374 = $offset_addr_0 + 2 | 0;
    $tree_addr_2631 = $2;
    label = 76;
    break;
   case 76:
    _dump_prefix($add370);
    $puts567 = _puts(59480) | 0;
    $car372 = $tree_addr_2631 | 0;
    $114 = HEAP32[$car372 >> 2] | 0;
    $car373 = $114 | 0;
    $115 = HEAP32[$car373 >> 2] | 0;
    _parser_dump($mrb, $115, $add374);
    _dump_prefix($add370);
    $puts568 = _puts(59472) | 0;
    $116 = HEAP32[$car372 >> 2] | 0;
    $cdr378 = $116 + 4 | 0;
    $117 = HEAP32[$cdr378 >> 2] | 0;
    _parser_dump($mrb, $117, $add374);
    $cdr380 = $tree_addr_2631 + 4 | 0;
    $118 = HEAP32[$cdr380 >> 2] | 0;
    $tobool368 = ($118 | 0) == 0;
    if ($tobool368) {
      label = 183;
      break;
    } else {
      $tree_addr_2631 = $118;
      label = 76;
      break;
    }
   case 77:
    $puts569 = _puts(59460) | 0;
    $add384 = $offset_addr_0 + 1 | 0;
    $offset_tr_be = $add384;
    $tree_tr_be = $2;
    label = 19;
    break;
   case 78:
    $puts570 = _puts(59448) | 0;
    $add387 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add387);
    $puts571 = _puts(59440) | 0;
    $car389 = $2 | 0;
    $119 = HEAP32[$car389 >> 2] | 0;
    $add390 = $offset_addr_0 + 2 | 0;
    _parser_dump($mrb, $119, $add390);
    _dump_prefix($add387);
    $puts572 = _puts(59432) | 0;
    $cdr393 = $2 + 4 | 0;
    $120 = HEAP32[$cdr393 >> 2] | 0;
    $offset_tr_be = $add390;
    $tree_tr_be = $120;
    label = 19;
    break;
   case 79:
    $puts573 = _puts(59420) | 0;
    $add397 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add397);
    $puts574 = _puts(59412) | 0;
    $car400 = $2 | 0;
    $121 = HEAP32[$car400 >> 2] | 0;
    $car401 = $121 | 0;
    $122 = HEAP32[$car401 >> 2] | 0;
    $tobool402 = ($122 | 0) == 0;
    if ($tobool402) {
      label = 81;
      break;
    } else {
      label = 80;
      break;
    }
   case 80:
    $add404 = $offset_addr_0 + 2 | 0;
    _dump_prefix($add404);
    $puts575 = _puts(59404) | 0;
    $123 = HEAP32[$car401 >> 2] | 0;
    $add407 = $offset_addr_0 + 3 | 0;
    _dump_recur($mrb, $123, $add407);
    label = 81;
    break;
   case 81:
    $cdr409 = $121 + 4 | 0;
    $124 = HEAP32[$cdr409 >> 2] | 0;
    $tobool410 = ($124 | 0) == 0;
    if ($tobool410) {
      label = 89;
      break;
    } else {
      label = 82;
      break;
    }
   case 82:
    $car412 = $124 | 0;
    $125 = HEAP32[$car412 >> 2] | 0;
    $tobool413 = ($125 | 0) == 0;
    if ($tobool413) {
      label = 86;
      break;
    } else {
      label = 83;
      break;
    }
   case 83:
    $add415 = $offset_addr_0 + 2 | 0;
    _dump_prefix($add415);
    $puts576 = _puts(59396) | 0;
    $126 = HEAP32[$car412 >> 2] | 0;
    $cmp418 = ($126 | 0) == -1;
    if ($cmp418) {
      label = 84;
      break;
    } else {
      label = 85;
      break;
    }
   case 84:
    _dump_prefix($add415);
    $puts577 = _puts(59372) | 0;
    label = 86;
    break;
   case 85:
    $add424 = $offset_addr_0 + 3 | 0;
    _parser_dump($mrb, $126, $add424);
    label = 86;
    break;
   case 86:
    $cdr427 = $124 + 4 | 0;
    $127 = HEAP32[$cdr427 >> 2] | 0;
    $tobool428 = ($127 | 0) == 0;
    if ($tobool428) {
      label = 89;
      break;
    } else {
      label = 87;
      break;
    }
   case 87:
    $car430 = $127 | 0;
    $128 = HEAP32[$car430 >> 2] | 0;
    $tobool431 = ($128 | 0) == 0;
    if ($tobool431) {
      label = 89;
      break;
    } else {
      label = 88;
      break;
    }
   case 88:
    $add433 = $offset_addr_0 + 2 | 0;
    _dump_prefix($add433);
    $puts578 = _puts(59364) | 0;
    $129 = HEAP32[$car430 >> 2] | 0;
    $add436 = $offset_addr_0 + 3 | 0;
    _dump_recur($mrb, $129, $add436);
    label = 89;
    break;
   case 89:
    _dump_prefix($add397);
    $puts579 = _puts(59356) | 0;
    $cdr442 = $2 + 4 | 0;
    $130 = HEAP32[$cdr442 >> 2] | 0;
    $add443 = $offset_addr_0 + 2 | 0;
    $offset_tr_be = $add443;
    $tree_tr_be = $130;
    label = 19;
    break;
   case 90:
    $puts580 = _puts(59340) | 0;
    $add446 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add446);
    $puts581 = _puts(59332) | 0;
    $car448 = $2 | 0;
    $131 = HEAP32[$car448 >> 2] | 0;
    $add449 = $offset_addr_0 + 2 | 0;
    _parser_dump($mrb, $131, $add449);
    $cdr450 = $2 + 4 | 0;
    $132 = HEAP32[$cdr450 >> 2] | 0;
    _dump_prefix($add446);
    $car452 = $132 | 0;
    $133 = HEAP32[$car452 >> 2] | 0;
    $134 = $133;
    $conv453 = $134 & 65535;
    $call454 = _mrb_sym2name($mrb, $conv453) | 0;
    $135 = HEAP32[$car452 >> 2] | 0;
    $136 = $135;
    $call456 = _printf(110232, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $call454, HEAP32[tempInt + 4 >> 2] = $136, tempInt) | 0) | 0;
    $cdr457 = $132 + 4 | 0;
    $137 = HEAP32[$cdr457 >> 2] | 0;
    $car458 = $137 | 0;
    $138 = HEAP32[$car458 >> 2] | 0;
    $offset_tr_be = $add446;
    $tree_tr_be = $138;
    label = 19;
    break;
   case 91:
    $puts582 = _puts(59320) | 0;
    $tobool462 = ($2 | 0) == 0;
    if ($tobool462) {
      label = 183;
      break;
    } else {
      label = 92;
      break;
    }
   case 92:
    $add464 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add464);
    $puts583 = _puts(59312) | 0;
    $car466 = $2 | 0;
    $139 = HEAP32[$car466 >> 2] | 0;
    $add467 = $offset_addr_0 + 2 | 0;
    _dump_recur($mrb, $139, $add467);
    $cdr468 = $2 + 4 | 0;
    $140 = HEAP32[$cdr468 >> 2] | 0;
    $tobool469 = ($140 | 0) == 0;
    if ($tobool469) {
      label = 183;
      break;
    } else {
      label = 93;
      break;
    }
   case 93:
    _dump_prefix($add464);
    $puts584 = _puts(59304) | 0;
    $141 = HEAP32[$cdr468 >> 2] | 0;
    $offset_tr_be = $add467;
    $tree_tr_be = $141;
    label = 19;
    break;
   case 94:
    $puts585 = _puts(59292) | 0;
    label = 183;
    break;
   case 95:
    $puts586 = _puts(59276) | 0;
    $add481 = $offset_addr_0 + 1 | 0;
    $offset_tr_be = $add481;
    $tree_tr_be = $2;
    label = 19;
    break;
   case 96:
    $puts587 = _puts(59256) | 0;
    $add484 = $offset_addr_0 + 1 | 0;
    _dump_recur($mrb, $2, $add484);
    label = 183;
    break;
   case 97:
    $puts588 = _puts(59244) | 0;
    $add487 = $offset_addr_0 + 1 | 0;
    $offset_tr_be = $add487;
    $tree_tr_be = $2;
    label = 19;
    break;
   case 98:
    $puts589 = _puts(59232) | 0;
    $add490 = $offset_addr_0 + 1 | 0;
    $offset_tr_be = $add490;
    $tree_tr_be = $2;
    label = 19;
    break;
   case 99:
    $puts590 = _puts(59220) | 0;
    label = 183;
    break;
   case 100:
    $puts591 = _puts(59208) | 0;
    label = 183;
    break;
   case 101:
    $142 = $2;
    $conv496 = $142 & 65535;
    $call497 = _mrb_sym2name($mrb, $conv496) | 0;
    $call498 = _printf(109856, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call497, tempInt) | 0) | 0;
    label = 183;
    break;
   case 102:
    $143 = $2;
    $conv500 = $143 & 65535;
    $call501 = _mrb_sym2name($mrb, $conv500) | 0;
    $call502 = _printf(109788, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call501, tempInt) | 0) | 0;
    label = 183;
    break;
   case 103:
    $144 = $2;
    $conv504 = $144 & 65535;
    $call505 = _mrb_sym2name($mrb, $conv504) | 0;
    $call506 = _printf(109488, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call505, tempInt) | 0) | 0;
    label = 183;
    break;
   case 104:
    $145 = $2;
    $conv508 = $145 & 65535;
    $call509 = _mrb_sym2name($mrb, $conv508) | 0;
    $call510 = _printf(109472, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call509, tempInt) | 0) | 0;
    label = 183;
    break;
   case 105:
    $146 = $2;
    $conv512 = $146 & 65535;
    $call513 = _mrb_sym2name($mrb, $conv512) | 0;
    $call514 = _printf(109456, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call513, tempInt) | 0) | 0;
    label = 183;
    break;
   case 106:
    $puts592 = _puts(59196) | 0;
    $add517 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add517);
    $puts593 = _puts(59188) | 0;
    $car519 = $2 | 0;
    $147 = HEAP32[$car519 >> 2] | 0;
    $add520 = $offset_addr_0 + 2 | 0;
    _parser_dump($mrb, $147, $add520);
    _dump_prefix($add517);
    $puts594 = _puts(59180) | 0;
    $cdr523 = $2 + 4 | 0;
    $148 = HEAP32[$cdr523 >> 2] | 0;
    $offset_tr_be = $add520;
    $tree_tr_be = $148;
    label = 19;
    break;
   case 107:
    $149 = $2;
    $call526 = _printf(109408, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $149, tempInt) | 0) | 0;
    label = 183;
    break;
   case 108:
    $150 = $2;
    $call528 = _printf(109380, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $150, tempInt) | 0) | 0;
    label = 183;
    break;
   case 109:
    $151 = $2;
    $conv530 = $151 & 65535;
    $call531 = _mrb_sym2name($mrb, $conv530) | 0;
    $call532 = _printf(109364, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call531, tempInt) | 0) | 0;
    label = 183;
    break;
   case 110:
    $puts595 = _puts(59164) | 0;
    $add535 = $offset_addr_0 + 1 | 0;
    $offset_tr_be = $add535;
    $tree_tr_be = $2;
    label = 19;
    break;
   case 111:
    $car537 = $2 | 0;
    $152 = HEAP32[$car537 >> 2] | 0;
    $cdr538 = $2 + 4 | 0;
    $153 = HEAP32[$cdr538 >> 2] | 0;
    $car539 = $153 | 0;
    $154 = HEAP32[$car539 >> 2] | 0;
    $155 = $154;
    $call540 = _printf(109308, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $152, HEAP32[tempInt + 4 >> 2] = $155, tempInt) | 0) | 0;
    label = 183;
    break;
   case 112:
    $call542 = _printf(109292, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $2, tempInt) | 0) | 0;
    label = 183;
    break;
   case 113:
    $puts596 = _puts(59152) | 0;
    $add545 = $offset_addr_0 + 1 | 0;
    $offset_tr_be = $add545;
    $tree_tr_be = $2;
    label = 19;
    break;
   case 114:
    $car547 = $2 | 0;
    $156 = HEAP32[$car547 >> 2] | 0;
    $cdr548 = $2 + 4 | 0;
    $157 = HEAP32[$cdr548 >> 2] | 0;
    $158 = $157;
    $call549 = _printf(109060, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $156, HEAP32[tempInt + 4 >> 2] = $158, tempInt) | 0) | 0;
    label = 183;
    break;
   case 115:
    $puts597 = _puts(59124) | 0;
    $add552 = $offset_addr_0 + 1 | 0;
    _dump_recur($mrb, $2, $add552);
    label = 183;
    break;
   case 116:
    $car554 = $2 | 0;
    $159 = HEAP32[$car554 >> 2] | 0;
    $cdr555 = $2 + 4 | 0;
    $160 = HEAP32[$cdr555 >> 2] | 0;
    $161 = $160;
    $call556 = _printf(109036, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $159, HEAP32[tempInt + 4 >> 2] = $161, tempInt) | 0) | 0;
    label = 183;
    break;
   case 117:
    $puts598 = _puts(59112) | 0;
    $add559 = $offset_addr_0 + 1 | 0;
    _dump_recur($mrb, $2, $add559);
    label = 183;
    break;
   case 118:
    $car561 = $2 | 0;
    $162 = HEAP32[$car561 >> 2] | 0;
    $cdr562 = $2 + 4 | 0;
    $163 = HEAP32[$cdr562 >> 2] | 0;
    $call563 = _printf(108976, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $162, HEAP32[tempInt + 4 >> 2] = $163, tempInt) | 0) | 0;
    label = 183;
    break;
   case 119:
    $puts599 = _puts(59100) | 0;
    $car566 = $2 | 0;
    $164 = HEAP32[$car566 >> 2] | 0;
    $add567 = $offset_addr_0 + 1 | 0;
    _dump_recur($mrb, $164, $add567);
    _dump_prefix($offset_addr_0);
    $cdr568 = $2 + 4 | 0;
    $165 = HEAP32[$cdr568 >> 2] | 0;
    $cdr569 = $165 + 4 | 0;
    $166 = HEAP32[$cdr569 >> 2] | 0;
    $car570 = $166 | 0;
    $167 = HEAP32[$car570 >> 2] | 0;
    $call571 = _printf(108912, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $167, tempInt) | 0) | 0;
    _dump_prefix($offset_addr_0);
    $168 = HEAP32[$cdr568 >> 2] | 0;
    $cdr573 = $168 + 4 | 0;
    $169 = HEAP32[$cdr573 >> 2] | 0;
    $cdr574 = $169 + 4 | 0;
    $170 = HEAP32[$cdr574 >> 2] | 0;
    $call575 = _printf(108864, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $170, tempInt) | 0) | 0;
    label = 183;
    break;
   case 120:
    $171 = $2;
    $conv577 = $171 & 65535;
    $call578 = _mrb_sym2name($mrb, $conv577) | 0;
    $call579 = _printf(108848, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call578, tempInt) | 0) | 0;
    label = 183;
    break;
   case 121:
    $puts600 = _puts(59088) | 0;
    label = 183;
    break;
   case 122:
    $puts601 = _puts(59076) | 0;
    label = 183;
    break;
   case 123:
    $puts602 = _puts(59064) | 0;
    label = 183;
    break;
   case 124:
    $puts603 = _puts(59052) | 0;
    label = 183;
    break;
   case 125:
    $car589 = $2 | 0;
    $172 = HEAP32[$car589 >> 2] | 0;
    $173 = $172;
    $conv590 = $173 & 65535;
    $call591 = _mrb_sym2name($mrb, $conv590) | 0;
    $cdr592 = $2 + 4 | 0;
    $174 = HEAP32[$cdr592 >> 2] | 0;
    $175 = $174;
    $conv593 = $175 & 65535;
    $call594 = _mrb_sym2name($mrb, $conv593) | 0;
    $call595 = _printf(108568, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $call591, HEAP32[tempInt + 4 >> 2] = $call594, tempInt) | 0) | 0;
    label = 183;
    break;
   case 126:
    $call597 = _printf(108528, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
    $tobool599632 = ($2 | 0) == 0;
    if ($tobool599632) {
      label = 128;
      break;
    } else {
      $t_0633 = $2;
      label = 127;
      break;
    }
   case 127:
    $car601 = $t_0633 | 0;
    $176 = HEAP32[$car601 >> 2] | 0;
    $177 = $176;
    $conv602 = $177 & 65535;
    $call603 = _mrb_sym2name($mrb, $conv602) | 0;
    $call604 = _printf(108520, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call603, tempInt) | 0) | 0;
    $cdr605 = $t_0633 + 4 | 0;
    $178 = HEAP32[$cdr605 >> 2] | 0;
    $tobool599 = ($178 | 0) == 0;
    if ($tobool599) {
      label = 128;
      break;
    } else {
      $t_0633 = $178;
      label = 127;
      break;
    }
   case 128:
    $puts604 = _puts(59048) | 0;
    label = 183;
    break;
   case 129:
    $puts605 = _puts(59036) | 0;
    $car610 = $2 | 0;
    $179 = HEAP32[$car610 >> 2] | 0;
    $car611 = $179 | 0;
    $180 = HEAP32[$car611 >> 2] | 0;
    $magicptr = $180;
    if (($magicptr | 0) == 0) {
      label = 130;
      break;
    } else if (($magicptr | 0) == 1) {
      label = 131;
      break;
    } else {
      label = 132;
      break;
    }
   case 130:
    $add615 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add615);
    $181 = HEAP32[$car610 >> 2] | 0;
    $cdr617 = $181 + 4 | 0;
    $182 = HEAP32[$cdr617 >> 2] | 0;
    $183 = $182;
    $conv618 = $183 & 65535;
    $call619 = _mrb_sym2name($mrb, $conv618) | 0;
    $call620 = _printf(108472, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call619, tempInt) | 0) | 0;
    label = 133;
    break;
   case 131:
    $add627 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add627);
    $184 = HEAP32[$car610 >> 2] | 0;
    $cdr629 = $184 + 4 | 0;
    $185 = HEAP32[$cdr629 >> 2] | 0;
    $186 = $185;
    $conv630 = $186 & 65535;
    $call631 = _mrb_sym2name($mrb, $conv630) | 0;
    $call632 = _printf(111136, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call631, tempInt) | 0) | 0;
    label = 133;
    break;
   case 132:
    $add636 = $offset_addr_0 + 1 | 0;
    _parser_dump($mrb, $180, $add636);
    _dump_prefix($add636);
    $187 = HEAP32[$car610 >> 2] | 0;
    $cdr639 = $187 + 4 | 0;
    $188 = HEAP32[$cdr639 >> 2] | 0;
    $189 = $188;
    $conv640 = $189 & 65535;
    $call641 = _mrb_sym2name($mrb, $conv640) | 0;
    $call642 = _printf(111136, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call641, tempInt) | 0) | 0;
    label = 133;
    break;
   case 133:
    $cdr645 = $2 + 4 | 0;
    $190 = HEAP32[$cdr645 >> 2] | 0;
    $car646 = $190 | 0;
    $191 = HEAP32[$car646 >> 2] | 0;
    $tobool647 = ($191 | 0) == 0;
    if ($tobool647) {
      label = 135;
      break;
    } else {
      label = 134;
      break;
    }
   case 134:
    $add649 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add649);
    $puts606 = _puts(59028) | 0;
    $192 = HEAP32[$cdr645 >> 2] | 0;
    $car652 = $192 | 0;
    $193 = HEAP32[$car652 >> 2] | 0;
    $add653 = $offset_addr_0 + 2 | 0;
    _parser_dump($mrb, $193, $add653);
    label = 135;
    break;
   case 135:
    $add655 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add655);
    $puts607 = _puts(59012) | 0;
    $194 = HEAP32[$cdr645 >> 2] | 0;
    $cdr658 = $194 + 4 | 0;
    $195 = HEAP32[$cdr658 >> 2] | 0;
    $car659 = $195 | 0;
    $196 = HEAP32[$car659 >> 2] | 0;
    $cdr660 = $196 + 4 | 0;
    $197 = HEAP32[$cdr660 >> 2] | 0;
    $add661 = $offset_addr_0 + 2 | 0;
    $offset_tr_be = $add661;
    $tree_tr_be = $197;
    label = 19;
    break;
   case 136:
    $puts608 = _puts(58996) | 0;
    $car664 = $2 | 0;
    $198 = HEAP32[$car664 >> 2] | 0;
    $car665 = $198 | 0;
    $199 = HEAP32[$car665 >> 2] | 0;
    $magicptr517 = $199;
    if (($magicptr517 | 0) == 0) {
      label = 137;
      break;
    } else if (($magicptr517 | 0) == 1) {
      label = 138;
      break;
    } else {
      label = 139;
      break;
    }
   case 137:
    $add669 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add669);
    $200 = HEAP32[$car664 >> 2] | 0;
    $cdr671 = $200 + 4 | 0;
    $201 = HEAP32[$cdr671 >> 2] | 0;
    $202 = $201;
    $conv672 = $202 & 65535;
    $call673 = _mrb_sym2name($mrb, $conv672) | 0;
    $call674 = _printf(108472, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call673, tempInt) | 0) | 0;
    label = 140;
    break;
   case 138:
    $add681 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add681);
    $203 = HEAP32[$car664 >> 2] | 0;
    $cdr683 = $203 + 4 | 0;
    $204 = HEAP32[$cdr683 >> 2] | 0;
    $205 = $204;
    $conv684 = $205 & 65535;
    $call685 = _mrb_sym2name($mrb, $conv684) | 0;
    $call686 = _printf(111136, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call685, tempInt) | 0) | 0;
    label = 140;
    break;
   case 139:
    $add690 = $offset_addr_0 + 1 | 0;
    _parser_dump($mrb, $199, $add690);
    _dump_prefix($add690);
    $206 = HEAP32[$car664 >> 2] | 0;
    $cdr693 = $206 + 4 | 0;
    $207 = HEAP32[$cdr693 >> 2] | 0;
    $208 = $207;
    $conv694 = $208 & 65535;
    $call695 = _mrb_sym2name($mrb, $conv694) | 0;
    $call696 = _printf(111136, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call695, tempInt) | 0) | 0;
    label = 140;
    break;
   case 140:
    $add699 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add699);
    $puts609 = _puts(58988) | 0;
    $cdr701 = $2 + 4 | 0;
    $209 = HEAP32[$cdr701 >> 2] | 0;
    $car702 = $209 | 0;
    $210 = HEAP32[$car702 >> 2] | 0;
    $cdr703 = $210 + 4 | 0;
    $211 = HEAP32[$cdr703 >> 2] | 0;
    $add704 = $offset_addr_0 + 2 | 0;
    $offset_tr_be = $add704;
    $tree_tr_be = $211;
    label = 19;
    break;
   case 141:
    $puts610 = _puts(58972) | 0;
    $car707 = $2 | 0;
    $212 = HEAP32[$car707 >> 2] | 0;
    $add708 = $offset_addr_0 + 1 | 0;
    _parser_dump($mrb, $212, $add708);
    _dump_prefix($add708);
    $puts611 = _puts(58964) | 0;
    $cdr711 = $2 + 4 | 0;
    $213 = HEAP32[$cdr711 >> 2] | 0;
    $car712 = $213 | 0;
    $214 = HEAP32[$car712 >> 2] | 0;
    $cdr713 = $214 + 4 | 0;
    $215 = HEAP32[$cdr713 >> 2] | 0;
    $add714 = $offset_addr_0 + 2 | 0;
    $offset_tr_be = $add714;
    $tree_tr_be = $215;
    label = 19;
    break;
   case 142:
    $puts612 = _puts(58952) | 0;
    $add717 = $offset_addr_0 + 1 | 0;
    _dump_prefix($add717);
    $car718 = $2 | 0;
    $216 = HEAP32[$car718 >> 2] | 0;
    $217 = $216;
    $conv719 = $217 & 65535;
    $call720 = _mrb_sym2name($mrb, $conv719) | 0;
    $puts613 = _puts($call720 | 0) | 0;
    $cdr722 = $2 + 4 | 0;
    $218 = HEAP32[$cdr722 >> 2] | 0;
    $car724 = $218 | 0;
    $219 = HEAP32[$car724 >> 2] | 0;
    $tobool725 = ($219 | 0) == 0;
    if ($tobool725) {
      label = 152;
      break;
    } else {
      label = 143;
      break;
    }
   case 143:
    $car727 = $219 | 0;
    $220 = HEAP32[$car727 >> 2] | 0;
    $tobool728 = ($220 | 0) == 0;
    if ($tobool728) {
      label = 144;
      break;
    } else {
      label = 145;
      break;
    }
   case 144:
    $cdr730 = $219 + 4 | 0;
    $221 = HEAP32[$cdr730 >> 2] | 0;
    $tobool731 = ($221 | 0) == 0;
    if ($tobool731) {
      label = 152;
      break;
    } else {
      label = 145;
      break;
    }
   case 145:
    _dump_prefix($add717);
    $puts614 = _puts(58932) | 0;
    $add735 = $offset_addr_0 + 2 | 0;
    _dump_prefix($add735);
    $tobool737833 = ($219 | 0) == 0;
    if ($tobool737833) {
      label = 151;
      break;
    } else {
      $n2723_0834 = $219;
      label = 146;
      break;
    }
   case 146:
    $car739 = $n2723_0834 | 0;
    $222 = HEAP32[$car739 >> 2] | 0;
    $tobool740 = ($222 | 0) == 0;
    if ($tobool740) {
      label = 150;
      break;
    } else {
      label = 147;
      break;
    }
   case 147:
    $223 = HEAP32[$car724 >> 2] | 0;
    $cmp743 = ($n2723_0834 | 0) == ($223 | 0);
    if ($cmp743) {
      label = 149;
      break;
    } else {
      label = 148;
      break;
    }
   case 148:
    $call746 = _printf(92224, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
    label = 149;
    break;
   case 149:
    $224 = HEAP32[$car739 >> 2] | 0;
    $225 = $224;
    $conv749 = $225 & 65535;
    $call750 = _mrb_sym2name($mrb, $conv749) | 0;
    $call751 = _printf(92200, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call750, tempInt) | 0) | 0;
    label = 150;
    break;
   case 150:
    $cdr753 = $n2723_0834 + 4 | 0;
    $226 = HEAP32[$cdr753 >> 2] | 0;
    $tobool737 = ($226 | 0) == 0;
    if ($tobool737) {
      label = 151;
      break;
    } else {
      $n2723_0834 = $226;
      label = 146;
      break;
    }
   case 151:
    $putchar615 = _putchar(10) | 0;
    label = 152;
    break;
   case 152:
    $cdr757 = $218 + 4 | 0;
    $227 = HEAP32[$cdr757 >> 2] | 0;
    $car758 = $227 | 0;
    $228 = HEAP32[$car758 >> 2] | 0;
    $tobool759 = ($228 | 0) == 0;
    if ($tobool759) {
      label = 165;
      break;
    } else {
      label = 153;
      break;
    }
   case 153:
    $car763 = $228 | 0;
    $229 = HEAP32[$car763 >> 2] | 0;
    $tobool764 = ($229 | 0) == 0;
    if ($tobool764) {
      label = 155;
      break;
    } else {
      label = 154;
      break;
    }
   case 154:
    _dump_prefix($add717);
    $puts616 = _puts(58916) | 0;
    $230 = HEAP32[$car763 >> 2] | 0;
    $add769 = $offset_addr_0 + 2 | 0;
    _dump_recur($mrb, $230, $add769);
    label = 155;
    break;
   case 155:
    $cdr771 = $228 + 4 | 0;
    $231 = HEAP32[$cdr771 >> 2] | 0;
    $car772 = $231 | 0;
    $232 = HEAP32[$car772 >> 2] | 0;
    $tobool773 = ($232 | 0) == 0;
    if ($tobool773) {
      label = 159;
      break;
    } else {
      label = 156;
      break;
    }
   case 156:
    _dump_prefix($add717);
    $puts617 = _puts(58900) | 0;
    $n2777_0835 = HEAP32[$car772 >> 2] | 0;
    $tobool780836 = ($n2777_0835 | 0) == 0;
    if ($tobool780836) {
      label = 159;
      break;
    } else {
      label = 157;
      break;
    }
   case 157:
    $add782 = $offset_addr_0 + 2 | 0;
    $n2777_0837 = $n2777_0835;
    label = 158;
    break;
   case 158:
    _dump_prefix($add782);
    $car783 = $n2777_0837 | 0;
    $233 = HEAP32[$car783 >> 2] | 0;
    $car784 = $233 | 0;
    $234 = HEAP32[$car784 >> 2] | 0;
    $235 = $234;
    $conv785 = $235 & 65535;
    $call786 = _mrb_sym2name($mrb, $conv785) | 0;
    $call787 = _printf(93892, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call786, tempInt) | 0) | 0;
    $236 = HEAP32[$car783 >> 2] | 0;
    $cdr789 = $236 + 4 | 0;
    $237 = HEAP32[$cdr789 >> 2] | 0;
    _parser_dump($mrb, $237, 0);
    $cdr790 = $n2777_0837 + 4 | 0;
    $n2777_0 = HEAP32[$cdr790 >> 2] | 0;
    $tobool780 = ($n2777_0 | 0) == 0;
    if ($tobool780) {
      label = 159;
      break;
    } else {
      $n2777_0837 = $n2777_0;
      label = 158;
      break;
    }
   case 159:
    $cdr793 = $231 + 4 | 0;
    $238 = HEAP32[$cdr793 >> 2] | 0;
    $car794 = $238 | 0;
    $239 = HEAP32[$car794 >> 2] | 0;
    $tobool795 = ($239 | 0) == 0;
    if ($tobool795) {
      label = 161;
      break;
    } else {
      label = 160;
      break;
    }
   case 160:
    _dump_prefix($add717);
    $240 = HEAP32[$car794 >> 2] | 0;
    $241 = $240;
    $conv799 = $241 & 65535;
    $call800 = _mrb_sym2name($mrb, $conv799) | 0;
    $call801 = _printf(93800, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call800, tempInt) | 0) | 0;
    label = 161;
    break;
   case 161:
    $cdr803 = $238 + 4 | 0;
    $242 = HEAP32[$cdr803 >> 2] | 0;
    $car804 = $242 | 0;
    $243 = HEAP32[$car804 >> 2] | 0;
    $tobool805 = ($243 | 0) == 0;
    if ($tobool805) {
      label = 163;
      break;
    } else {
      label = 162;
      break;
    }
   case 162:
    _dump_prefix($add717);
    $puts618 = _puts(58876) | 0;
    $244 = HEAP32[$car804 >> 2] | 0;
    $add810 = $offset_addr_0 + 2 | 0;
    _dump_recur($mrb, $244, $add810);
    label = 163;
    break;
   case 163:
    $cdr812 = $242 + 4 | 0;
    $245 = HEAP32[$cdr812 >> 2] | 0;
    $tobool813 = ($245 | 0) == 0;
    if ($tobool813) {
      label = 165;
      break;
    } else {
      label = 164;
      break;
    }
   case 164:
    _dump_prefix($add717);
    $246 = $245;
    $conv816 = $246 & 65535;
    $call817 = _mrb_sym2name($mrb, $conv816) | 0;
    $call818 = _printf(93712, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call817, tempInt) | 0) | 0;
    label = 165;
    break;
   case 165:
    $cdr821 = $227 + 4 | 0;
    $247 = HEAP32[$cdr821 >> 2] | 0;
    $car822 = $247 | 0;
    $248 = HEAP32[$car822 >> 2] | 0;
    $offset_tr_be = $add717;
    $tree_tr_be = $248;
    label = 19;
    break;
   case 166:
    $puts619 = _puts(60092) | 0;
    $car826 = $2 | 0;
    $249 = HEAP32[$car826 >> 2] | 0;
    $add827 = $offset_addr_0 + 1 | 0;
    _parser_dump($mrb, $249, $add827);
    $cdr828 = $2 + 4 | 0;
    $250 = HEAP32[$cdr828 >> 2] | 0;
    _dump_prefix($add827);
    $car830 = $250 | 0;
    $251 = HEAP32[$car830 >> 2] | 0;
    $252 = $251;
    $conv831 = $252 & 65535;
    $call832 = _mrb_sym2name($mrb, $conv831) | 0;
    $call833 = _printf(108472, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call832, tempInt) | 0) | 0;
    $cdr834 = $250 + 4 | 0;
    $253 = HEAP32[$cdr834 >> 2] | 0;
    $cdr835 = $253 + 4 | 0;
    $254 = HEAP32[$cdr835 >> 2] | 0;
    $car836 = $254 | 0;
    $255 = HEAP32[$car836 >> 2] | 0;
    $tobool837 = ($255 | 0) == 0;
    if ($tobool837) {
      label = 179;
      break;
    } else {
      label = 167;
      break;
    }
   case 167:
    $car841 = $255 | 0;
    $256 = HEAP32[$car841 >> 2] | 0;
    $tobool842 = ($256 | 0) == 0;
    if ($tobool842) {
      label = 169;
      break;
    } else {
      label = 168;
      break;
    }
   case 168:
    _dump_prefix($add827);
    $puts620 = _puts(60076) | 0;
    $257 = HEAP32[$car841 >> 2] | 0;
    $add847 = $offset_addr_0 + 2 | 0;
    _dump_recur($mrb, $257, $add847);
    label = 169;
    break;
   case 169:
    $cdr849 = $255 + 4 | 0;
    $258 = HEAP32[$cdr849 >> 2] | 0;
    $car850 = $258 | 0;
    $259 = HEAP32[$car850 >> 2] | 0;
    $tobool851 = ($259 | 0) == 0;
    if ($tobool851) {
      label = 173;
      break;
    } else {
      label = 170;
      break;
    }
   case 170:
    _dump_prefix($add827);
    $puts621 = _puts(60060) | 0;
    $n2855_0830 = HEAP32[$car850 >> 2] | 0;
    $tobool858831 = ($n2855_0830 | 0) == 0;
    if ($tobool858831) {
      label = 173;
      break;
    } else {
      label = 171;
      break;
    }
   case 171:
    $add860 = $offset_addr_0 + 2 | 0;
    $n2855_0832 = $n2855_0830;
    label = 172;
    break;
   case 172:
    _dump_prefix($add860);
    $car861 = $n2855_0832 | 0;
    $260 = HEAP32[$car861 >> 2] | 0;
    $car862 = $260 | 0;
    $261 = HEAP32[$car862 >> 2] | 0;
    $262 = $261;
    $conv863 = $262 & 65535;
    $call864 = _mrb_sym2name($mrb, $conv863) | 0;
    $call865 = _printf(93892, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call864, tempInt) | 0) | 0;
    $263 = HEAP32[$car861 >> 2] | 0;
    $cdr867 = $263 + 4 | 0;
    $264 = HEAP32[$cdr867 >> 2] | 0;
    _parser_dump($mrb, $264, 0);
    $cdr868 = $n2855_0832 + 4 | 0;
    $n2855_0 = HEAP32[$cdr868 >> 2] | 0;
    $tobool858 = ($n2855_0 | 0) == 0;
    if ($tobool858) {
      label = 173;
      break;
    } else {
      $n2855_0832 = $n2855_0;
      label = 172;
      break;
    }
   case 173:
    $cdr871 = $258 + 4 | 0;
    $265 = HEAP32[$cdr871 >> 2] | 0;
    $car872 = $265 | 0;
    $266 = HEAP32[$car872 >> 2] | 0;
    $tobool873 = ($266 | 0) == 0;
    if ($tobool873) {
      label = 175;
      break;
    } else {
      label = 174;
      break;
    }
   case 174:
    _dump_prefix($add827);
    $267 = HEAP32[$car872 >> 2] | 0;
    $268 = $267;
    $conv877 = $268 & 65535;
    $call878 = _mrb_sym2name($mrb, $conv877) | 0;
    $call879 = _printf(93800, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call878, tempInt) | 0) | 0;
    label = 175;
    break;
   case 175:
    $cdr881 = $265 + 4 | 0;
    $269 = HEAP32[$cdr881 >> 2] | 0;
    $car882 = $269 | 0;
    $270 = HEAP32[$car882 >> 2] | 0;
    $tobool883 = ($270 | 0) == 0;
    if ($tobool883) {
      label = 177;
      break;
    } else {
      label = 176;
      break;
    }
   case 176:
    _dump_prefix($add827);
    $puts622 = _puts(60036) | 0;
    $271 = HEAP32[$car882 >> 2] | 0;
    $add888 = $offset_addr_0 + 2 | 0;
    _dump_recur($mrb, $271, $add888);
    label = 177;
    break;
   case 177:
    $cdr890 = $269 + 4 | 0;
    $272 = HEAP32[$cdr890 >> 2] | 0;
    $tobool891 = ($272 | 0) == 0;
    if ($tobool891) {
      label = 179;
      break;
    } else {
      label = 178;
      break;
    }
   case 178:
    _dump_prefix($add827);
    $273 = $272;
    $conv894 = $273 & 65535;
    $call895 = _mrb_sym2name($mrb, $conv894) | 0;
    $call896 = _printf(93712, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call895, tempInt) | 0) | 0;
    label = 179;
    break;
   case 179:
    $cdr899 = $254 + 4 | 0;
    $274 = HEAP32[$cdr899 >> 2] | 0;
    $car900 = $274 | 0;
    $275 = HEAP32[$car900 >> 2] | 0;
    $offset_tr_be = $add827;
    $tree_tr_be = $275;
    label = 19;
    break;
   case 180:
    $puts623 = _puts(60020) | 0;
    $add904 = $offset_addr_0 + 1 | 0;
    $offset_tr_be = $add904;
    $tree_tr_be = $2;
    label = 19;
    break;
   case 181:
    $puts624 = _puts(60004) | 0;
    $276 = $2 + 16 | 0;
    $277 = HEAP32[$276 >> 2] | 0;
    $add907 = $offset_addr_0 + 1 | 0;
    $offset_tr_be = $add907;
    $tree_tr_be = $277;
    label = 19;
    break;
   case 182:
    $call908 = _printf(108192, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $1, HEAP32[tempInt + 4 >> 2] = $1, tempInt) | 0) | 0;
    label = 183;
    break;
   case 183:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_undef_value246($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 5;
  return;
}
function _mrb_nil_value247($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_fixnum_value248($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_parser_new($mrb) {
  $mrb = $mrb | 0;
  var $call = 0, $tobool = 0, $call1 = 0, $tobool2 = 0, $0 = 0, $mrb5 = 0, $pool6 = 0, $1 = 0, $in_single = 0, $2 = 0, $in_def = 0, $3 = 0, $send = 0, $4 = 0, $s = 0, $5 = 0, $f = 0, $6 = 0, $cmd_start = 0, $7 = 0, $capture_errors = 0, $8 = 0, $lineno = 0, $9 = 0, $column = 0, $10 = 0, $lex_strterm = 0, $11 = 0, $parsing_heredoc = 0, $12 = 0, $heredocs = 0, $13 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_pool_open($mrb) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call1 = _mrb_pool_alloc($call, 1424) | 0;
    $tobool2 = ($call1 | 0) == 0;
    if ($tobool2) {
      $retval_0 = 0;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $0 = $call1;
    _memset($call1 | 0, 0, 1424);
    $mrb5 = $call1;
    HEAP32[$mrb5 >> 2] = $mrb;
    $pool6 = $call1 + 4 | 0;
    $1 = $pool6;
    HEAP32[$1 >> 2] = $call;
    $in_single = $call1 + 68 | 0;
    $2 = $in_single;
    $in_def = $call1 + 64 | 0;
    $3 = $in_def;
    $send = $call1 + 16 | 0;
    $4 = $send;
    HEAP32[$4 >> 2] = 0;
    $s = $call1 + 12 | 0;
    $5 = $s;
    HEAP32[$5 >> 2] = 0;
    $f = $call1 + 20 | 0;
    $6 = $f;
    HEAP32[$6 >> 2] = 0;
    $cmd_start = $call1 + 72 | 0;
    $7 = $cmd_start;
    HEAP32[$7 >> 2] = 1;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$3 >> 2] = 0;
    $capture_errors = $call1 + 1140 | 0;
    $8 = $capture_errors;
    HEAP32[$8 >> 2] = 0;
    $lineno = $call1 + 32 | 0;
    $9 = $lineno;
    HEAP32[$9 >> 2] = 1;
    $column = $call1 + 36 | 0;
    $10 = $column;
    HEAP32[$10 >> 2] = 0;
    $lex_strterm = $call1 + 44 | 0;
    $11 = $lex_strterm;
    HEAP32[$11 >> 2] = 0;
    $parsing_heredoc = $call1 + 1116 | 0;
    $12 = $parsing_heredoc;
    HEAP32[$12 >> 2] = 0;
    $heredocs = $call1 + 1112 | 0;
    $13 = $heredocs;
    HEAP32[$13 >> 2] = 0;
    $retval_0 = $0;
    label = 5;
    break;
   case 5:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_parser_free($p) {
  $p = $p | 0;
  _mrb_pool_close(HEAP32[$p + 4 >> 2] | 0);
  return;
}
function _mrb_parse_nstring($mrb, $s, $len, $c) {
  $mrb = $mrb | 0;
  $s = $s | 0;
  $len = $len | 0;
  $c = $c | 0;
  var $call = 0, $tobool = 0, $s1 = 0, $add_ptr = 0, $send = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_parser_new($mrb) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $s1 = $call + 12 | 0;
    HEAP32[$s1 >> 2] = $s;
    $add_ptr = $s + $len | 0;
    $send = $call + 16 | 0;
    HEAP32[$send >> 2] = $add_ptr;
    _mrb_parser_parse($call, $c);
    $retval_0 = $call;
    label = 4;
    break;
   case 4:
    return $retval_0 | 0;
  }
  return 0;
}
function _load_exec($agg_result, $mrb, $p, $c) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $p = $p | 0;
  $c = $c | 0;
  var $v = 0, $buf = 0, $tmp = 0, $tmp12 = 0, $tmp20 = 0, $agg_tmp = 0, $tobool = 0, $tree = 0, $0 = 0, $tobool1 = 0, $nerr = 0, $1 = 0, $tobool2 = 0, $capture_errors = 0, $2 = 0, $tobool4 = 0, $arraydecay = 0, $lineno = 0, $3 = 0, $message = 0, $4 = 0, $call = 0, $call8 = 0, $p10 = 0, $5 = 0, $6 = 0, $exc = 0, $call11 = 0, $p14 = 0, $7 = 0, $8 = 0, $exc15 = 0, $call17 = 0, $cmp = 0, $call19 = 0, $p22 = 0, $9 = 0, $10 = 0, $exc23 = 0, $tobool25 = 0, $11 = 0, $12 = 0, $bf_clear = 0, $tobool27 = 0, $13 = 0, $bf_clear31 = 0, $tobool32 = 0, $irep = 0, $14 = 0, $arrayidx36 = 0, $15 = 0, $call37 = 0, $exc39 = 0, $16 = 0, $tobool40 = 0, $17 = 0, $18 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 316 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $v = __stackBase__ | 0;
    $buf = __stackBase__ + 12 | 0;
    $tmp = __stackBase__ + 268 | 0;
    $tmp12 = __stackBase__ + 280 | 0;
    $tmp20 = __stackBase__ + 292 | 0;
    $agg_tmp = __stackBase__ + 304 | 0;
    $tobool = ($p | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_undef_value246($agg_result);
    label = 19;
    break;
   case 4:
    $tree = $p + 1136 | 0;
    $0 = HEAP32[$tree >> 2] | 0;
    $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $nerr = $p + 1128 | 0;
    $1 = HEAP32[$nerr >> 2] | 0;
    $tobool2 = ($1 | 0) == 0;
    if ($tobool2) {
      label = 9;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $capture_errors = $p + 1140 | 0;
    $2 = HEAP32[$capture_errors >> 2] | 0;
    $tobool4 = ($2 | 0) == 0;
    if ($tobool4) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $arraydecay = $buf | 0;
    $lineno = $p + 1144 | 0;
    $3 = HEAP32[$lineno >> 2] | 0;
    $message = $p + 1152 | 0;
    $4 = HEAP32[$message >> 2] | 0;
    $call = _snprintf($arraydecay | 0, 256, 108176, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $3, HEAP32[tempInt + 4 >> 2] = $4, tempInt) | 0) | 0;
    $call8 = _mrb_class_get($mrb, 108036) | 0;
    _mrb_exc_new($tmp, $mrb, $call8, $arraydecay, $call);
    $p10 = $tmp;
    $5 = HEAP32[$p10 >> 2] | 0;
    $6 = $5;
    $exc = $mrb + 16 | 0;
    HEAP32[$exc >> 2] = $6;
    _mrb_parser_free($p);
    _mrb_undef_value246($agg_result);
    label = 19;
    break;
   case 8:
    $call11 = _mrb_class_get($mrb, 108036) | 0;
    _mrb_exc_new($tmp12, $mrb, $call11, 79060, 12);
    $p14 = $tmp12;
    $7 = HEAP32[$p14 >> 2] | 0;
    $8 = $7;
    $exc15 = $mrb + 16 | 0;
    HEAP32[$exc15 >> 2] = $8;
    _mrb_parser_free($p);
    _mrb_undef_value246($agg_result);
    label = 19;
    break;
   case 9:
    $call17 = _mrb_generate_code($mrb, $p) | 0;
    _mrb_parser_free($p);
    $cmp = ($call17 | 0) < 0;
    if ($cmp) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $call19 = _mrb_class_get($mrb, 108016) | 0;
    _mrb_exc_new($tmp20, $mrb, $call19, 79044, 13);
    $p22 = $tmp20;
    $9 = HEAP32[$p22 >> 2] | 0;
    $10 = $9;
    $exc23 = $mrb + 16 | 0;
    HEAP32[$exc23 >> 2] = $10;
    _mrb_nil_value247($agg_result);
    label = 19;
    break;
   case 11:
    $tobool25 = ($c | 0) == 0;
    if ($tobool25) {
      label = 16;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $11 = $c + 24 | 0;
    $12 = HEAP8[$11] | 0;
    $bf_clear = $12 & 2;
    $tobool27 = $bf_clear << 24 >> 24 == 0;
    if ($tobool27) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    _codedump_all($mrb, $call17);
    label = 14;
    break;
   case 14:
    $13 = HEAP8[$11] | 0;
    $bf_clear31 = $13 & 4;
    $tobool32 = $bf_clear31 << 24 >> 24 == 0;
    if ($tobool32) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    _mrb_fixnum_value248($agg_result, $call17);
    label = 19;
    break;
   case 16:
    $irep = $mrb + 24 | 0;
    $14 = HEAP32[$irep >> 2] | 0;
    $arrayidx36 = $14 + ($call17 << 2) | 0;
    $15 = HEAP32[$arrayidx36 >> 2] | 0;
    $call37 = _mrb_proc_new($mrb, $15) | 0;
    _mrb_top_self($agg_tmp, $mrb);
    _mrb_run($v, $mrb, $call37, $agg_tmp);
    $exc39 = $mrb + 16 | 0;
    $16 = HEAP32[$exc39 >> 2] | 0;
    $tobool40 = ($16 | 0) == 0;
    if ($tobool40) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    _mrb_nil_value247($agg_result);
    label = 19;
    break;
   case 18:
    $17 = $v;
    $18 = $agg_result;
    HEAP32[$18 >> 2] = HEAP32[$17 >> 2] | 0;
    HEAP32[$18 + 4 >> 2] = HEAP32[$17 + 4 >> 2] | 0;
    HEAP32[$18 + 8 >> 2] = HEAP32[$17 + 8 >> 2] | 0;
    label = 19;
    break;
   case 19:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_load_nstring_cxt($agg_result, $mrb, $s, $len, $c) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $s = $s | 0;
  $len = $len | 0;
  $c = $c | 0;
  _load_exec($agg_result, $mrb, _mrb_parse_nstring($mrb, $s, $len, $c) | 0, $c);
  return;
}
function _mrb_load_nstring($agg_result, $mrb, $s, $len) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $s = $s | 0;
  $len = $len | 0;
  _mrb_load_nstring_cxt($agg_result, $mrb, $s, $len, 0);
  return;
}
function _mrb_load_string_cxt($agg_result, $mrb, $s, $c) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $s = $s | 0;
  $c = $c | 0;
  _mrb_load_nstring_cxt($agg_result, $mrb, $s, _strlen($s | 0) | 0, $c);
  return;
}
function _mrb_load_string($agg_result, $mrb, $s) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $s = $s | 0;
  _mrb_load_string_cxt($agg_result, $mrb, $s, 0);
  return;
}
function _dump_prefix($offset) {
  $offset = $offset | 0;
  var $tobool1 = 0, $offset_addr_02 = 0, $dec = 0, $0 = 0, $call = 0, $1 = 0, $call1 = 0, $tobool = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool1 = ($offset | 0) == 0;
    if ($tobool1) {
      label = 4;
      break;
    } else {
      $offset_addr_02 = $offset;
      label = 3;
      break;
    }
   case 3:
    $dec = $offset_addr_02 - 1 | 0;
    $0 = HEAP32[_stdout >> 2] | 0;
    $call = _fputc(32, $0 | 0) | 0;
    $1 = HEAP32[_stdout >> 2] | 0;
    $call1 = _fputc(32, $1 | 0) | 0;
    $tobool = ($dec | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      $offset_addr_02 = $dec;
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _dump_recur($mrb, $tree, $offset) {
  $mrb = $mrb | 0;
  $tree = $tree | 0;
  $offset = $offset | 0;
  var $tobool3 = 0, $tree_addr_04 = 0, $car = 0, $0 = 0, $cdr = 0, $1 = 0, $tobool = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool3 = ($tree | 0) == 0;
    if ($tobool3) {
      label = 4;
      break;
    } else {
      $tree_addr_04 = $tree;
      label = 3;
      break;
    }
   case 3:
    $car = $tree_addr_04 | 0;
    $0 = HEAP32[$car >> 2] | 0;
    _parser_dump($mrb, $0, $offset);
    $cdr = $tree_addr_04 + 4 | 0;
    $1 = HEAP32[$cdr >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      $tree_addr_04 = $1;
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _parser_yylex($p) {
  $p = $p | 0;
  var $buf = 0, $endp = 0, $lex_strterm = 0, $0 = 0, $tobool = 0, $car = 0, $1 = 0, $2 = 0, $and = 0, $tobool2 = 0, $parsing_heredoc = 0, $3 = 0, $cmp = 0, $4 = 0, $5 = 0, $bf_clear = 0, $tobool4 = 0, $call = 0, $call6 = 0, $cmd_start = 0, $6 = 0, $lstate = 0, $7 = 0, $parsing_heredoc15 = 0, $lineno = 0, $column = 0, $column126 = 0, $lineno1346 = 0, $column1348 = 0, $space_seen_0 = 0, $8 = 0, $call10 = 0, $9 = 0, $10 = 0, $11 = 0, $cmp16 = 0, $call18 = 0, $type = 0, $12 = 0, $call19 = 0, $13 = 0, $14 = 0, $inc = 0, $space_seen_1 = 0, $call24 = 0, $call28 = 0, $cmp29 = 0, $call38 = 0, $call41 = 0, $cmp42 = 0, $call44 = 0, $ylval = 0, $15 = 0, $id = 0, $call50 = 0, $ylval51 = 0, $16 = 0, $id52 = 0, $17 = 0, $_off = 0, $switch = 0, $tobool60 = 0, $or_cond871 = 0, $conv62 = 0, $call63 = 0, $tobool64 = 0, $_pr = 0, $18 = 0, $c_0 = 0, $19 = 0, $_off872 = 0, $switch873 = 0, $_874 = 0, $call100 = 0, $20 = 0, $_off875 = 0, $switch876 = 0, $21 = 0, $cmp127 = 0, $call130 = 0, $tobool131 = 0, $22 = 0, $_off877 = 0, $switch878 = 0, $_879 = 0, $call148 = 0, $call152 = 0, $cmp153 = 0, $call169 = 0, $cmp170 = 0, $23 = 0, $tobool201 = 0, $call203 = 0, $tobool204 = 0, $_off880 = 0, $switch881 = 0, $_882 = 0, $cmp226 = 0, $call229 = 0, $cmp230 = 0, $24 = 0, $_off880940 = 0, $switch881941 = 0, $_882942 = 0, $call238 = 0, $cmp239 = 0, $call242 = 0, $ylval243 = 0, $25 = 0, $id244 = 0, $26 = 0, $_off883 = 0, $switch884 = 0, $_885 = 0, $call261 = 0, $call269 = 0, $cmp270 = 0, $call273 = 0, $ylval274 = 0, $27 = 0, $id275 = 0, $call280 = 0, $call283 = 0, $call285 = 0, $28 = 0, $tobool297 = 0, $_ = 0, $call304 = 0, $29 = 0, $_off886 = 0, $switch887 = 0, $call321 = 0, $cmp322 = 0, $call326 = 0, $tobool327 = 0, $30 = 0, $_off888 = 0, $switch889 = 0, $c2_0_ph = 0, $arraydecay = 0, $call347 = 0, $call353 = 0, $call354 = 0, $tobool355 = 0, $cmp357 = 0, $or_cond = 0, $call361 = 0, $call362 = 0, $tobool363 = 0, $cmp365 = 0, $or_cond1 = 0, $cmp370 = 0, $call373 = 0, $cmp374 = 0, $call378 = 0, $call382 = 0, $call383 = 0, $call384 = 0, $ylval385 = 0, $31 = 0, $nd = 0, $call388 = 0, $call393 = 0, $cmp394 = 0, $call397 = 0, $ylval398 = 0, $32 = 0, $id399 = 0, $call406 = 0, $ylval407 = 0, $33 = 0, $id408 = 0, $34 = 0, $_off890 = 0, $switch891 = 0, $tobool420 = 0, $or_cond892 = 0, $conv423 = 0, $call424 = 0, $tobool425 = 0, $_pr946 = 0, $35 = 0, $c_1 = 0, $36 = 0, $_off893 = 0, $switch894 = 0, $_895 = 0, $call460 = 0, $call465 = 0, $cmp466 = 0, $call469 = 0, $ylval470 = 0, $37 = 0, $id471 = 0, $call478 = 0, $ylval479 = 0, $38 = 0, $id480 = 0, $39 = 0, $_off896 = 0, $switch897 = 0, $_898 = 0, $call496 = 0, $40 = 0, $_off899 = 0, $switch900 = 0, $cmp506 = 0, $cmp511 = 0, $call514 = 0, $ylval515 = 0, $41 = 0, $id516 = 0, $tobool543 = 0, $conv546 = 0, $call547 = 0, $tobool548 = 0, $cmp554 = 0, $conv558 = 0, $isdigittmp = 0, $isdigit = 0, $call664947 = 0, $call671 = 0, $call566 = 0, $42 = 0, $_off901 = 0, $switch902 = 0, $cmp576 = 0, $call584 = 0, $ylval585 = 0, $43 = 0, $id586 = 0, $tobool618 = 0, $conv621 = 0, $call622 = 0, $tobool623 = 0, $cmp629 = 0, $conv633 = 0, $isdigittmp924 = 0, $isdigit925 = 0, $call642 = 0, $cmp643 = 0, $call646 = 0, $cmp647 = 0, $cmp652 = 0, $conv656 = 0, $isdigittmp926 = 0, $isdigit927 = 0, $call664 = 0, $c_3 = 0, $cmp673 = 0, $call676 = 0, $call677 = 0, $call684 = 0, $cmp685 = 0, $conv689 = 0, $call690 = 0, $tobool691 = 0, $nondigit_0 = 0, $c_4 = 0, $cmp693 = 0, $tobool696 = 0, $conv701 = 0, $call702 = 0, $tobool703 = 0, $call706 = 0, $nondigit_1 = 0, $call707 = 0, $cmp708 = 0, $nondigit_2 = 0, $c_5 = 0, $call711 = 0, $cmp712 = 0, $tobool719 = 0, $call723 = 0, $call724 = 0, $ylval725 = 0, $44 = 0, $nd726 = 0, $call734 = 0, $call734_off = 0, $45 = 0, $nondigit_3 = 0, $c_6 = 0, $cmp742 = 0, $tobool745 = 0, $c_6_off = 0, $46 = 0, $nondigit_4 = 0, $call757 = 0, $cmp758 = 0, $nondigit_5 = 0, $c_7 = 0, $call762 = 0, $cmp763 = 0, $tobool770 = 0, $call774 = 0, $call775 = 0, $ylval776 = 0, $47 = 0, $nd777 = 0, $call785 = 0, $cmp786 = 0, $conv790 = 0, $isdigittmp928 = 0, $isdigit929 = 0, $nondigit_6 = 0, $c_8 = 0, $cmp795 = 0, $tobool798 = 0, $conv803 = 0, $isdigittmp930 = 0, $isdigit931 = 0, $nondigit_7 = 0, $call809 = 0, $cmp810 = 0, $nondigit_8 = 0, $c_9 = 0, $call814 = 0, $cmp815 = 0, $tobool822 = 0, $call826 = 0, $call827 = 0, $ylval828 = 0, $48 = 0, $nd829 = 0, $call841 = 0, $conv849 = 0, $isdigittmp932 = 0, $isdigit933 = 0, $c_10 = 0, $c_10_off = 0, $49 = 0, $nondigit_9 = 0, $c_11 = 0, $cmp865 = 0, $tobool868 = 0, $c_11_off = 0, $50 = 0, $cmp879 = 0, $nondigit_10 = 0, $call884 = 0, $cmp885 = 0, $nondigit_11 = 0, $c_12 = 0, $call888 = 0, $cmp889 = 0, $tobool892 = 0, $call895 = 0, $call896 = 0, $ylval897 = 0, $51 = 0, $nd898 = 0, $tobool900 = 0, $c_13 = 0, $c_13_off = 0, $52 = 0, $nondigit_13 = 0, $c_14 = 0, $call921 = 0, $ylval922 = 0, $53 = 0, $nd923 = 0, $is_float_0 = 0, $seen_e_0 = 0, $nondigit_14 = 0, $c_15 = 0, $tobool929 = 0, $54 = 0, $55 = 0, $call937 = 0, $cmp938 = 0, $conv942 = 0, $isdigittmp934 = 0, $isdigit935 = 0, $inc948 = 0, $inc949 = 0, $tobool951 = 0, $tobool954 = 0, $inc957 = 0, $inc958 = 0, $call959 = 0, $tobool968 = 0, $is_float_1 = 0, $seen_point_1 = 0, $seen_e_1 = 0, $nondigit_15 = 0, $call973 = 0, $is_float_0_ph = 0, $seen_point_0_ph = 0, $seen_e_0_ph = 0, $nondigit_14_ph960 = 0, $c_15_ph961 = 0, $c_16 = 0, $tobool974 = 0, $is_float_2 = 0, $nondigit_16 = 0, $is_float_3 = 0, $tobool977 = 0, $call979 = 0, $call980 = 0, $call981 = 0.0, $cmp982 = 0, $56 = 0, $cmp986 = 0, $or_cond956 = 0, $call991 = 0, $57 = 0, $cmp992 = 0, $call996 = 0, $call1000 = 0, $ylval1001 = 0, $58 = 0, $nd1002 = 0, $call1004 = 0, $call1005 = 0, $ylval1006 = 0, $59 = 0, $nd1007 = 0, $paren_nest = 0, $60 = 0, $dec = 0, $cond_stack = 0, $61 = 0, $shr = 0, $and1011 = 0, $or = 0, $cmdarg_stack = 0, $62 = 0, $shr1013 = 0, $and1015 = 0, $or1016 = 0, $cmp1018 = 0, $_863 = 0, $call1026 = 0, $cmp1027 = 0, $63 = 0, $tobool1058 = 0, $call1060 = 0, $tobool1061 = 0, $_off903 = 0, $switch904 = 0, $conv1080 = 0, $call1081 = 0, $tobool1082 = 0, $64 = 0, $call1104 = 0, $call1107 = 0, $cmp1108 = 0, $call1111 = 0, $ylval1112 = 0, $65 = 0, $id1113 = 0, $66 = 0, $_off905 = 0, $switch906 = 0, $tobool1124 = 0, $or_cond907 = 0, $conv1127 = 0, $call1128 = 0, $tobool1129 = 0, $call1131 = 0, $67 = 0, $_off908 = 0, $switch909 = 0, $_910 = 0, $call1147 = 0, $cmp1148 = 0, $call1151 = 0, $ylval1152 = 0, $68 = 0, $id1153 = 0, $69 = 0, $_off911 = 0, $switch912 = 0, $_913 = 0, $70 = 0, $_off914 = 0, $switch915 = 0, $call1181 = 0, $cmp1182 = 0, $storemerge849 = 0, $71 = 0, $cmp1213 = 0, $tobool1216 = 0, $or_cond864 = 0, $tobool1216_old = 0, $call1218 = 0, $tobool1219 = 0, $_call10 = 0, $c_17 = 0, $paren_nest1223 = 0, $72 = 0, $inc1224 = 0, $cond_stack1225 = 0, $73 = 0, $shl = 0, $cmdarg_stack1227 = 0, $74 = 0, $shl1228 = 0, $paren_nest1232 = 0, $75 = 0, $inc1233 = 0, $76 = 0, $call1243 = 0, $cmp1244 = 0, $call1247 = 0, $cmp1248 = 0, $cmp1276 = 0, $tobool1279 = 0, $or_cond865 = 0, $tobool1279_old = 0, $c_18 = 0, $cond_stack1285 = 0, $77 = 0, $shl1286 = 0, $cmdarg_stack1288 = 0, $78 = 0, $shl1289 = 0, $lpar_beg = 0, $79 = 0, $tobool1292 = 0, $paren_nest1295 = 0, $80 = 0, $cmp1296 = 0, $81 = 0, $dec1302 = 0, $cond_stack1303 = 0, $82 = 0, $shl1304 = 0, $cmdarg_stack1306 = 0, $83 = 0, $shl1307 = 0, $84 = 0, $c_19 = 0, $cond_stack1334 = 0, $85 = 0, $shl1335 = 0, $cmdarg_stack1337 = 0, $86 = 0, $shl1338 = 0, $call1342 = 0, $cmp1343 = 0, $87 = 0, $inc1347 = 0, $88 = 0, $call1367 = 0, $c_20 = 0, $cmp1368 = 0, $conv1372 = 0, $call1373 = 0, $tobool1374 = 0, $call1377 = 0, $call1378 = 0, $tobool1379 = 0, $term_0 = 0, $c_21 = 0, $cmp1383 = 0, $cmp1386 = 0, $or_cond866 = 0, $term_1 = 0, $paren_0 = 0, $call1411 = 0, $call1414 = 0, $call1416 = 0, $call1418 = 0, $call1421 = 0, $call1424 = 0, $call1427 = 0, $call1430 = 0, $call1433 = 0, $call1436 = 0, $call1440 = 0, $cmp1441 = 0, $call1444 = 0, $ylval1445 = 0, $89 = 0, $id1446 = 0, $90 = 0, $_off916 = 0, $switch917 = 0, $tobool1457 = 0, $or_cond918 = 0, $conv1460 = 0, $call1461 = 0, $tobool1462 = 0, $91 = 0, $_off919 = 0, $switch920 = 0, $_921 = 0, $call1479 = 0, $call1480 = 0, $call1486 = 0, $cmp1487 = 0, $call1490 = 0, $notlhs845 = 0, $notrhs846 = 0, $or_cond16_not = 0, $cmp1496 = 0, $or_cond17 = 0, $c_22 = 0, $call1501 = 0, $call1502 = 0, $ylval1503 = 0, $92 = 0, $id1504 = 0, $call1506 = 0, $call1507 = 0, $call1508 = 0, $ylval1509 = 0, $93 = 0, $id1510 = 0, $cmp1512 = 0, $call1516 = 0, $ylval1517 = 0, $94 = 0, $nd1518 = 0, $c_23 = 0, $call1521 = 0, $cmp1523 = 0, $isdigittmp936 = 0, $isdigit937 = 0, $or_cond958 = 0, $cmp1528 = 0, $call1532 = 0, $call1533 = 0, $call1534 = 0, $ylval1535 = 0, $95 = 0, $nd1536 = 0, $call1538 = 0, $notlhs847 = 0, $notrhs848 = 0, $or_cond18_not = 0, $cmp1544 = 0, $or_cond19 = 0, $call1551 = 0, $call1552 = 0, $cmp1553 = 0, $call1556 = 0, $c_24 = 0, $cmp1558 = 0, $bidx = 0, $96 = 0, $cmp1561 = 0, $isdigittmp938 = 0, $isdigit939 = 0, $bidx1570 = 0, $97 = 0, $cmp1571 = 0, $call1578 = 0, $notlhs = 0, $notrhs = 0, $or_cond20_not = 0, $cmp1584 = 0, $or_cond21 = 0, $call1589 = 0, $call1591 = 0, $notlhs860 = 0, $notrhs861 = 0, $or_cond22_not = 0, $cmp1597 = 0, $or_cond23 = 0, $call1601 = 0, $token_column_0_ph = 0, $c_25_ph = 0, $c_25 = 0, $call1604 = 0, $cmp1605 = 0, $call1610 = 0, $tobool1611 = 0, $cmp1613 = 0, $or_cond24 = 0, $lnot = 0, $or_cond867 = 0, $cmp1618 = 0, $call1621 = 0, $cmp1622 = 0, $cmp1628 = 0, $or_cond25 = 0, $call1631 = 0, $call1633 = 0, $cmp1634 = 0, $call1638 = 0, $98 = 0, $conv1639 = 0, $call1648 = 0, $tobool1649 = 0, $99 = 0, $conv1657 = 0, $arrayidx1663 = 0, $100 = 0, $cmp1665 = 0, $_868 = 0, $call1671 = 0, $101 = 0, $cmp1681 = 0, $call1684 = 0, $cmp1685 = 0, $call1688 = 0, $tobool1689 = 0, $call1691 = 0, $tobool1692 = 0, $call1694 = 0, $tobool1695 = 0, $call1697 = 0, $tobool1698 = 0, $102 = 0, $conv1708 = 0, $call1709 = 0, $tobool1710 = 0, $result_1 = 0, $103 = 0, $tobool1719 = 0, $104 = 0, $105 = 0, $_off922 = 0, $switch923 = 0, $or_cond957 = 0, $call1729 = 0, $tobool1730 = 0, $call1732 = 0, $tobool1733 = 0, $call1736 = 0, $call1738 = 0, $ylval1739 = 0, $106 = 0, $id1740 = 0, $107 = 0, $cmp1744 = 0, $call1748 = 0, $call1749 = 0, $tobool1750 = 0, $state1753 = 0, $108 = 0, $cmp1755 = 0, $name = 0, $109 = 0, $call1758 = 0, $ylval1759 = 0, $110 = 0, $id1760 = 0, $arrayidx1762 = 0, $111 = 0, $cmp1765 = 0, $arrayidx1771 = 0, $112 = 0, $cmp1772 = 0, $lpar_beg1775 = 0, $113 = 0, $tobool1776 = 0, $paren_nest1779 = 0, $114 = 0, $cmp1780 = 0, $115 = 0, $dec1785 = 0, $cond_stack1787 = 0, $116 = 0, $and1788 = 0, $tobool1789 = 0, $cmdarg_stack1792 = 0, $117 = 0, $and1793 = 0, $tobool1794 = 0, $cmp1796 = 0, $or_cond870 = 0, $arrayidx1820 = 0, $118 = 0, $cmp1821 = 0, $119 = 0, $_pr955 = 0, $result_2 = 0, $call1876 = 0, $ylval1877 = 0, $120 = 0, $id1878 = 0, $retval_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 260 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $buf = __stackBase__ | 0;
    $endp = __stackBase__ + 256 | 0;
    $lex_strterm = $p + 44 | 0;
    $0 = HEAP32[$lex_strterm >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $car = $0 | 0;
    $1 = HEAP32[$car >> 2] | 0;
    $2 = $1;
    $and = $2 & 64;
    $tobool2 = ($and | 0) == 0;
    if ($tobool2) {
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $parsing_heredoc = $p + 1116 | 0;
    $3 = HEAP32[$parsing_heredoc >> 2] | 0;
    $cmp = ($3 | 0) == 0;
    if ($cmp) {
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $4 = $p + 1120 | 0;
    $5 = HEAP8[$4] | 0;
    $bf_clear = $5 & 1;
    $tobool4 = $bf_clear << 24 >> 24 == 0;
    if ($tobool4) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    $call = _parse_string($p) | 0;
    $retval_0 = $call;
    label = 395;
    break;
   case 7:
    $call6 = _parse_string($p) | 0;
    $retval_0 = $call6;
    label = 395;
    break;
   case 8:
    $cmd_start = $p + 72 | 0;
    $6 = HEAP32[$cmd_start >> 2] | 0;
    HEAP32[$cmd_start >> 2] = 0;
    $lstate = $p + 40 | 0;
    $7 = $p + 1120 | 0;
    $parsing_heredoc15 = $p + 1116 | 0;
    $lineno = $p + 32 | 0;
    $column = $p + 36 | 0;
    $column126 = $p + 36 | 0;
    $lineno1346 = $p + 32 | 0;
    $column1348 = $p + 36 | 0;
    $space_seen_0 = 0;
    label = 9;
    break;
   case 9:
    $8 = HEAP32[$lstate >> 2] | 0;
    $call10 = _nextc($p) | 0;
    if (($call10 | 0) == 32 | ($call10 | 0) == 9 | ($call10 | 0) == 12 | ($call10 | 0) == 13 | ($call10 | 0) == 11) {
      $space_seen_0 = 1;
      label = 9;
      break;
    } else if (($call10 | 0) == 35) {
      label = 10;
      break;
    } else if (($call10 | 0) == 10) {
      label = 11;
      break;
    } else if (($call10 | 0) == 42) {
      label = 20;
      break;
    } else if (($call10 | 0) == 33) {
      label = 32;
      break;
    } else if (($call10 | 0) == 61) {
      label = 38;
      break;
    } else if (($call10 | 0) == 60) {
      label = 46;
      break;
    } else if (($call10 | 0) == 62) {
      label = 57;
      break;
    } else if (($call10 | 0) == 34) {
      label = 62;
      break;
    } else if (($call10 | 0) == 39) {
      label = 63;
      break;
    } else if (($call10 | 0) == 96) {
      label = 64;
      break;
    } else if (($call10 | 0) == 63) {
      label = 68;
      break;
    } else if (($call10 | 0) == 38) {
      label = 89;
      break;
    } else if (($call10 | 0) == 124) {
      label = 101;
      break;
    } else if (($call10 | 0) == 43) {
      label = 107;
      break;
    } else if (($call10 | 0) == 45) {
      label = 120;
      break;
    } else if (($call10 | 0) == 46) {
      label = 134;
      break;
    } else if (($call10 | 0) == 48 | ($call10 | 0) == 49 | ($call10 | 0) == 50 | ($call10 | 0) == 51 | ($call10 | 0) == 52 | ($call10 | 0) == 53 | ($call10 | 0) == 54 | ($call10 | 0) == 55 | ($call10 | 0) == 56 | ($call10 | 0) == 57) {
      label = 141;
      break;
    } else if (($call10 | 0) == 41 | ($call10 | 0) == 93) {
      label = 223;
      break;
    } else if (($call10 | 0) == 125) {
      label = 224;
      break;
    } else if (($call10 | 0) == 58) {
      label = 225;
      break;
    } else if (($call10 | 0) == 47) {
      label = 235;
      break;
    } else if (($call10 | 0) == 94) {
      label = 243;
      break;
    } else if (($call10 | 0) == 59) {
      label = 246;
      break;
    } else if (($call10 | 0) == 44) {
      label = 247;
      break;
    } else if (($call10 | 0) == 126) {
      label = 248;
      break;
    } else if (($call10 | 0) == 40) {
      label = 252;
      break;
    } else if (($call10 | 0) == 91) {
      label = 257;
      break;
    } else if (($call10 | 0) == 123) {
      label = 266;
      break;
    } else if (($call10 | 0) == 92) {
      label = 273;
      break;
    } else if (($call10 | 0) == 37) {
      label = 276;
      break;
    } else if (($call10 | 0) == 36) {
      label = 305;
      break;
    } else if (($call10 | 0) == 64) {
      label = 323;
      break;
    } else if (($call10 | 0) == 95) {
      label = 335;
      break;
    } else if (($call10 | 0) == 0 | ($call10 | 0) == 4 | ($call10 | 0) == 26 | ($call10 | 0) == (-1 | 0)) {
      $retval_0 = 0;
      label = 395;
      break;
    } else {
      label = 336;
      break;
    }
   case 10:
    _skip($p);
    label = 11;
    break;
   case 11:
    $9 = HEAP8[$7] | 0;
    $10 = $9 & -2;
    HEAP8[$7] = $10;
    $11 = HEAP32[$parsing_heredoc15 >> 2] | 0;
    $cmp16 = ($11 | 0) == 0;
    if ($cmp16) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $call18 = _parsing_heredoc_inf($p) | 0;
    $type = $call18 + 4 | 0;
    $12 = HEAP32[$type >> 2] | 0;
    $call19 = _new_strterm($p, $12, 0, 0) | 0;
    HEAP32[$lex_strterm >> 2] = $call19;
    label = 19;
    break;
   case 13:
    $13 = HEAP32[$lstate >> 2] | 0;
    if (($13 | 0) == 0 | ($13 | 0) == 7 | ($13 | 0) == 8 | ($13 | 0) == 9 | ($13 | 0) == 10) {
      label = 14;
      break;
    } else {
      $space_seen_1 = $space_seen_0;
      label = 15;
      break;
    }
   case 14:
    $14 = HEAP32[$lineno >> 2] | 0;
    $inc = $14 + 1 | 0;
    HEAP32[$lineno >> 2] = $inc;
    HEAP32[$column >> 2] = 0;
    $space_seen_0 = $space_seen_0;
    label = 9;
    break;
   case 15:
    $call24 = _nextc($p) | 0;
    if (($call24 | 0) == 32 | ($call24 | 0) == 9 | ($call24 | 0) == 12 | ($call24 | 0) == 13 | ($call24 | 0) == 11) {
      $space_seen_1 = 1;
      label = 15;
      break;
    } else if (($call24 | 0) == 46) {
      label = 16;
      break;
    } else if (($call24 | 0) == 0 | ($call24 | 0) == (-1 | 0)) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 16:
    $call28 = _nextc($p) | 0;
    $cmp29 = ($call28 | 0) == 46;
    if ($cmp29) {
      label = 19;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    _pushback($p, $call28);
    _pushback($p, 46);
    $space_seen_0 = $space_seen_1;
    label = 9;
    break;
   case 18:
    _pushback($p, $call24);
    label = 19;
    break;
   case 19:
    HEAP32[$cmd_start >> 2] = 1;
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = 10;
    label = 395;
    break;
   case 20:
    $call38 = _nextc($p) | 0;
    if (($call38 | 0) == 42) {
      label = 21;
      break;
    } else if (($call38 | 0) == 61) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 21:
    $call41 = _nextc($p) | 0;
    $cmp42 = ($call41 | 0) == 61;
    if ($cmp42) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    $call44 = _intern_gen2($p, 104e3, 2) | 0;
    $ylval = $p + 1124 | 0;
    $15 = HEAP32[$ylval >> 2] | 0;
    $id = $15;
    HEAP16[$id >> 1] = $call44;
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = 345;
    label = 395;
    break;
   case 23:
    _pushback($p, $call41);
    $c_0 = 326;
    label = 31;
    break;
   case 24:
    $call50 = _intern_gen_c($p, 42) | 0;
    $ylval51 = $p + 1124 | 0;
    $16 = HEAP32[$ylval51 >> 2] | 0;
    $id52 = $16;
    HEAP16[$id52 >> 1] = $call50;
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = 345;
    label = 395;
    break;
   case 25:
    _pushback($p, $call38);
    $17 = HEAP32[$lstate >> 2] | 0;
    $_off = $17 - 4 | 0;
    $switch = $_off >>> 0 > 1;
    $tobool60 = ($space_seen_0 | 0) == 0;
    $or_cond871 = $switch | $tobool60;
    if ($or_cond871) {
      $18 = $17;
      label = 29;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    $conv62 = $call38 & 255;
    $call63 = _isspace($conv62 | 0) | 0;
    $tobool64 = ($call63 | 0) == 0;
    if ($tobool64) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    _yywarning($p, 107964);
    $c_0 = 353;
    label = 31;
    break;
   case 28:
    $_pr = HEAP32[$lstate >> 2] | 0;
    $18 = $_pr;
    label = 29;
    break;
   case 29:
    if (($18 | 0) == 0 | ($18 | 0) == 6 | ($18 | 0) == 10 | ($18 | 0) == 9) {
      $c_0 = 353;
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    $c_0 = 42;
    label = 31;
    break;
   case 31:
    $19 = HEAP32[$lstate >> 2] | 0;
    $_off872 = $19 - 7 | 0;
    $switch873 = $_off872 >>> 0 < 2;
    $_874 = $switch873 ? 4 : 0;
    HEAP32[$lstate >> 2] = $_874;
    $retval_0 = $c_0;
    label = 395;
    break;
   case 32:
    $call100 = _nextc($p) | 0;
    $20 = HEAP32[$lstate >> 2] | 0;
    $_off875 = $20 - 7 | 0;
    $switch876 = $_off875 >>> 0 < 2;
    if ($switch876) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    HEAP32[$lstate >> 2] = 4;
    if (($call100 | 0) == 61) {
      label = 35;
      break;
    } else if (($call100 | 0) == 126) {
      label = 36;
      break;
    } else if (($call100 | 0) == 64) {
      $retval_0 = 33;
      label = 395;
      break;
    } else {
      label = 37;
      break;
    }
   case 34:
    HEAP32[$lstate >> 2] = 0;
    if (($call100 | 0) == 61) {
      label = 35;
      break;
    } else if (($call100 | 0) == 126) {
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 35:
    $retval_0 = 330;
    label = 395;
    break;
   case 36:
    $retval_0 = 336;
    label = 395;
    break;
   case 37:
    _pushback($p, $call100);
    $retval_0 = 33;
    label = 395;
    break;
   case 38:
    $21 = HEAP32[$column126 >> 2] | 0;
    $cmp127 = ($21 | 0) == 1;
    if ($cmp127) {
      label = 39;
      break;
    } else {
      label = 41;
      break;
    }
   case 39:
    $call130 = _peeks($p, 107936) | 0;
    $tobool131 = ($call130 | 0) == 0;
    if ($tobool131) {
      label = 41;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    _skips($p);
    $space_seen_0 = $space_seen_0;
    label = 9;
    break;
   case 41:
    $22 = HEAP32[$lstate >> 2] | 0;
    $_off877 = $22 - 7 | 0;
    $switch878 = $_off877 >>> 0 < 2;
    $_879 = $switch878 ? 4 : 0;
    HEAP32[$lstate >> 2] = $_879;
    $call148 = _nextc($p) | 0;
    if (($call148 | 0) == 61) {
      label = 42;
      break;
    } else if (($call148 | 0) == 62) {
      label = 44;
      break;
    } else if (($call148 | 0) == 126) {
      $retval_0 = 335;
      label = 395;
      break;
    } else {
      label = 45;
      break;
    }
   case 42:
    $call152 = _nextc($p) | 0;
    $cmp153 = ($call152 | 0) == 61;
    if ($cmp153) {
      $retval_0 = 329;
      label = 395;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    _pushback($p, $call152);
    $retval_0 = 328;
    label = 395;
    break;
   case 44:
    $retval_0 = 346;
    label = 395;
    break;
   case 45:
    _pushback($p, $call148);
    $retval_0 = 61;
    label = 395;
    break;
   case 46:
    $call169 = _nextc($p) | 0;
    $cmp170 = ($call169 | 0) == 60;
    $23 = HEAP32[$lstate >> 2] | 0;
    if ($cmp170) {
      label = 47;
      break;
    } else {
      label = 50;
      break;
    }
   case 47:
    if (($23 | 0) == 4 | ($23 | 0) == 5) {
      label = 48;
      break;
    } else if (($23 | 0) == 8 | ($23 | 0) == 9 | ($23 | 0) == 1 | ($23 | 0) == 2 | ($23 | 0) == 3) {
      label = 53;
      break;
    } else {
      label = 49;
      break;
    }
   case 48:
    $tobool201 = ($space_seen_0 | 0) == 0;
    if ($tobool201) {
      label = 53;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    $call203 = _heredoc_identifier($p) | 0;
    $tobool204 = ($call203 | 0) == 0;
    if ($tobool204) {
      label = 53;
      break;
    } else {
      $retval_0 = $call203;
      label = 395;
      break;
    }
   case 50:
    $_off880 = $23 - 7 | 0;
    $switch881 = $_off880 >>> 0 < 2;
    $_882 = $switch881 ? 4 : 0;
    HEAP32[$lstate >> 2] = $_882;
    $cmp226 = ($call169 | 0) == 61;
    if ($cmp226) {
      label = 51;
      break;
    } else {
      label = 56;
      break;
    }
   case 51:
    $call229 = _nextc($p) | 0;
    $cmp230 = ($call229 | 0) == 62;
    if ($cmp230) {
      $retval_0 = 327;
      label = 395;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    _pushback($p, $call229);
    $retval_0 = 332;
    label = 395;
    break;
   case 53:
    $24 = HEAP32[$lstate >> 2] | 0;
    $_off880940 = $24 - 7 | 0;
    $switch881941 = $_off880940 >>> 0 < 2;
    $_882942 = $switch881941 ? 4 : 0;
    HEAP32[$lstate >> 2] = $_882942;
    $call238 = _nextc($p) | 0;
    $cmp239 = ($call238 | 0) == 61;
    if ($cmp239) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 54:
    $call242 = _intern_gen2($p, 104680, 2) | 0;
    $ylval243 = $p + 1124 | 0;
    $25 = HEAP32[$ylval243 >> 2] | 0;
    $id244 = $25;
    HEAP16[$id244 >> 1] = $call242;
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = 345;
    label = 395;
    break;
   case 55:
    _pushback($p, $call238);
    $retval_0 = 341;
    label = 395;
    break;
   case 56:
    _pushback($p, $call169);
    $retval_0 = 60;
    label = 395;
    break;
   case 57:
    $26 = HEAP32[$lstate >> 2] | 0;
    $_off883 = $26 - 7 | 0;
    $switch884 = $_off883 >>> 0 < 2;
    $_885 = $switch884 ? 4 : 0;
    HEAP32[$lstate >> 2] = $_885;
    $call261 = _nextc($p) | 0;
    if (($call261 | 0) == 62) {
      label = 58;
      break;
    } else if (($call261 | 0) == 61) {
      $retval_0 = 331;
      label = 395;
      break;
    } else {
      label = 61;
      break;
    }
   case 58:
    $call269 = _nextc($p) | 0;
    $cmp270 = ($call269 | 0) == 61;
    if ($cmp270) {
      label = 59;
      break;
    } else {
      label = 60;
      break;
    }
   case 59:
    $call273 = _intern_gen2($p, 104288, 2) | 0;
    $ylval274 = $p + 1124 | 0;
    $27 = HEAP32[$ylval274 >> 2] | 0;
    $id275 = $27;
    HEAP16[$id275 >> 1] = $call273;
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = 345;
    label = 395;
    break;
   case 60:
    _pushback($p, $call269);
    $retval_0 = 342;
    label = 395;
    break;
   case 61:
    _pushback($p, $call261);
    $retval_0 = 62;
    label = 395;
    break;
   case 62:
    $call280 = _new_strterm($p, 3, 34, 0) | 0;
    HEAP32[$lex_strterm >> 2] = $call280;
    $retval_0 = 360;
    label = 395;
    break;
   case 63:
    $call283 = _new_strterm($p, 1, 39, 0) | 0;
    HEAP32[$lex_strterm >> 2] = $call283;
    $call285 = _parse_string($p) | 0;
    $retval_0 = $call285;
    label = 395;
    break;
   case 64:
    $28 = HEAP32[$lstate >> 2] | 0;
    if (($28 | 0) == 7) {
      label = 65;
      break;
    } else if (($28 | 0) == 8) {
      label = 66;
      break;
    } else {
      label = 67;
      break;
    }
   case 65:
    HEAP32[$lstate >> 2] = 3;
    $retval_0 = 96;
    label = 395;
    break;
   case 66:
    $tobool297 = ($6 | 0) == 0;
    $_ = $tobool297 ? 4 : 5;
    HEAP32[$lstate >> 2] = $_;
    $retval_0 = 96;
    label = 395;
    break;
   case 67:
    $call304 = _new_strterm($p, 131, 96, 0) | 0;
    HEAP32[$lex_strterm >> 2] = $call304;
    $retval_0 = 361;
    label = 395;
    break;
   case 68:
    $29 = HEAP32[$lstate >> 2] | 0;
    $_off886 = $29 - 1 | 0;
    $switch887 = $_off886 >>> 0 < 3;
    if ($switch887) {
      label = 69;
      break;
    } else {
      label = 70;
      break;
    }
   case 69:
    HEAP32[$lstate >> 2] = 10;
    $retval_0 = 63;
    label = 395;
    break;
   case 70:
    $call321 = _nextc($p) | 0;
    $cmp322 = ($call321 | 0) == -1;
    if ($cmp322) {
      label = 71;
      break;
    } else {
      label = 72;
      break;
    }
   case 71:
    _yyerror($p, 107892);
    $retval_0 = 0;
    label = 395;
    break;
   case 72:
    $call326 = _isspace($call321 | 0) | 0;
    $tobool327 = ($call326 | 0) == 0;
    if ($tobool327) {
      label = 82;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    $30 = HEAP32[$lstate >> 2] | 0;
    $_off888 = $30 - 4 | 0;
    $switch889 = $_off888 >>> 0 < 2;
    if ($switch889) {
      label = 81;
      break;
    } else {
      label = 74;
      break;
    }
   case 74:
    if (($call321 | 0) == 10) {
      label = 75;
      break;
    } else if (($call321 | 0) == 9) {
      label = 76;
      break;
    } else if (($call321 | 0) == 11) {
      label = 77;
      break;
    } else if (($call321 | 0) == 13) {
      label = 78;
      break;
    } else if (($call321 | 0) == 12) {
      label = 79;
      break;
    } else if (($call321 | 0) == 32) {
      $c2_0_ph = 115;
      label = 80;
      break;
    } else {
      label = 81;
      break;
    }
   case 75:
    $c2_0_ph = 110;
    label = 80;
    break;
   case 76:
    $c2_0_ph = 116;
    label = 80;
    break;
   case 77:
    $c2_0_ph = 118;
    label = 80;
    break;
   case 78:
    $c2_0_ph = 114;
    label = 80;
    break;
   case 79:
    $c2_0_ph = 102;
    label = 80;
    break;
   case 80:
    $arraydecay = $buf | 0;
    $call347 = _snprintf($arraydecay | 0, 256, 107832, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $c2_0_ph, tempInt) | 0) | 0;
    _yyerror($p, $arraydecay);
    label = 81;
    break;
   case 81:
    _pushback($p, $call321);
    HEAP32[$lstate >> 2] = 10;
    $retval_0 = 63;
    label = 395;
    break;
   case 82:
    $call353 = _newtok($p) | 0;
    $call354 = _isalnum($call321 | 0) | 0;
    $tobool355 = ($call354 | 0) != 0;
    $cmp357 = ($call321 | 0) == 95;
    $or_cond = $tobool355 | $cmp357;
    if ($or_cond) {
      label = 83;
      break;
    } else {
      label = 84;
      break;
    }
   case 83:
    $call361 = _nextc($p) | 0;
    _pushback($p, $call361);
    $call362 = _isalnum($call361 | 0) | 0;
    $tobool363 = ($call362 | 0) != 0;
    $cmp365 = ($call361 | 0) == 95;
    $or_cond1 = $tobool363 | $cmp365;
    if ($or_cond1) {
      label = 81;
      break;
    } else {
      label = 84;
      break;
    }
   case 84:
    $cmp370 = ($call321 | 0) == 92;
    if ($cmp370) {
      label = 85;
      break;
    } else {
      label = 87;
      break;
    }
   case 85:
    $call373 = _nextc($p) | 0;
    $cmp374 = ($call373 | 0) == 117;
    if ($cmp374) {
      label = 88;
      break;
    } else {
      label = 86;
      break;
    }
   case 86:
    _pushback($p, $call373);
    $call378 = _read_escape($p) | 0;
    _tokadd($p, $call378);
    label = 88;
    break;
   case 87:
    _tokadd($p, $call321);
    label = 88;
    break;
   case 88:
    _tokfix($p);
    $call382 = _tok($p) | 0;
    $call383 = _toklen($p) | 0;
    $call384 = _new_str($p, $call382, $call383) | 0;
    $ylval385 = $p + 1124 | 0;
    $31 = HEAP32[$ylval385 >> 2] | 0;
    $nd = $31;
    HEAP32[$nd >> 2] = $call384;
    HEAP32[$lstate >> 2] = 1;
    $retval_0 = 315;
    label = 395;
    break;
   case 89:
    $call388 = _nextc($p) | 0;
    if (($call388 | 0) == 38) {
      label = 90;
      break;
    } else if (($call388 | 0) == 61) {
      label = 93;
      break;
    } else {
      label = 94;
      break;
    }
   case 90:
    HEAP32[$lstate >> 2] = 0;
    $call393 = _nextc($p) | 0;
    $cmp394 = ($call393 | 0) == 61;
    if ($cmp394) {
      label = 91;
      break;
    } else {
      label = 92;
      break;
    }
   case 91:
    $call397 = _intern_gen2($p, 107800, 2) | 0;
    $ylval398 = $p + 1124 | 0;
    $32 = HEAP32[$ylval398 >> 2] | 0;
    $id399 = $32;
    HEAP16[$id399 >> 1] = $call397;
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = 345;
    label = 395;
    break;
   case 92:
    _pushback($p, $call393);
    $retval_0 = 333;
    label = 395;
    break;
   case 93:
    $call406 = _intern_gen_c($p, 38) | 0;
    $ylval407 = $p + 1124 | 0;
    $33 = HEAP32[$ylval407 >> 2] | 0;
    $id408 = $33;
    HEAP16[$id408 >> 1] = $call406;
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = 345;
    label = 395;
    break;
   case 94:
    _pushback($p, $call388);
    $34 = HEAP32[$lstate >> 2] | 0;
    $_off890 = $34 - 4 | 0;
    $switch891 = $_off890 >>> 0 > 1;
    $tobool420 = ($space_seen_0 | 0) == 0;
    $or_cond892 = $switch891 | $tobool420;
    if ($or_cond892) {
      $35 = $34;
      label = 98;
      break;
    } else {
      label = 95;
      break;
    }
   case 95:
    $conv423 = $call388 & 255;
    $call424 = _isspace($conv423 | 0) | 0;
    $tobool425 = ($call424 | 0) == 0;
    if ($tobool425) {
      label = 96;
      break;
    } else {
      label = 97;
      break;
    }
   case 96:
    _yywarning($p, 107752);
    $c_1 = 354;
    label = 100;
    break;
   case 97:
    $_pr946 = HEAP32[$lstate >> 2] | 0;
    $35 = $_pr946;
    label = 98;
    break;
   case 98:
    if (($35 | 0) == 0 | ($35 | 0) == 6 | ($35 | 0) == 10 | ($35 | 0) == 9) {
      $c_1 = 354;
      label = 100;
      break;
    } else {
      label = 99;
      break;
    }
   case 99:
    $c_1 = 38;
    label = 100;
    break;
   case 100:
    $36 = HEAP32[$lstate >> 2] | 0;
    $_off893 = $36 - 7 | 0;
    $switch894 = $_off893 >>> 0 < 2;
    $_895 = $switch894 ? 4 : 0;
    HEAP32[$lstate >> 2] = $_895;
    $retval_0 = $c_1;
    label = 395;
    break;
   case 101:
    $call460 = _nextc($p) | 0;
    if (($call460 | 0) == 124) {
      label = 102;
      break;
    } else if (($call460 | 0) == 61) {
      label = 105;
      break;
    } else {
      label = 106;
      break;
    }
   case 102:
    HEAP32[$lstate >> 2] = 0;
    $call465 = _nextc($p) | 0;
    $cmp466 = ($call465 | 0) == 61;
    if ($cmp466) {
      label = 103;
      break;
    } else {
      label = 104;
      break;
    }
   case 103:
    $call469 = _intern_gen2($p, 107592, 2) | 0;
    $ylval470 = $p + 1124 | 0;
    $37 = HEAP32[$ylval470 >> 2] | 0;
    $id471 = $37;
    HEAP16[$id471 >> 1] = $call469;
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = 345;
    label = 395;
    break;
   case 104:
    _pushback($p, $call465);
    $retval_0 = 334;
    label = 395;
    break;
   case 105:
    $call478 = _intern_gen_c($p, 124) | 0;
    $ylval479 = $p + 1124 | 0;
    $38 = HEAP32[$ylval479 >> 2] | 0;
    $id480 = $38;
    HEAP16[$id480 >> 1] = $call478;
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = 345;
    label = 395;
    break;
   case 106:
    $39 = HEAP32[$lstate >> 2] | 0;
    $_off896 = $39 - 7 | 0;
    $switch897 = $_off896 >>> 0 < 2;
    $_898 = $switch897 ? 4 : 0;
    HEAP32[$lstate >> 2] = $_898;
    _pushback($p, $call460);
    $retval_0 = 124;
    label = 395;
    break;
   case 107:
    $call496 = _nextc($p) | 0;
    $40 = HEAP32[$lstate >> 2] | 0;
    $_off899 = $40 - 7 | 0;
    $switch900 = $_off899 >>> 0 < 2;
    if ($switch900) {
      label = 108;
      break;
    } else {
      label = 110;
      break;
    }
   case 108:
    HEAP32[$lstate >> 2] = 4;
    $cmp506 = ($call496 | 0) == 64;
    if ($cmp506) {
      $retval_0 = 324;
      label = 395;
      break;
    } else {
      label = 109;
      break;
    }
   case 109:
    _pushback($p, $call496);
    $retval_0 = 43;
    label = 395;
    break;
   case 110:
    $cmp511 = ($call496 | 0) == 61;
    if ($cmp511) {
      label = 111;
      break;
    } else {
      label = 112;
      break;
    }
   case 111:
    $call514 = _intern_gen_c($p, 43) | 0;
    $ylval515 = $p + 1124 | 0;
    $41 = HEAP32[$ylval515 >> 2] | 0;
    $id516 = $41;
    HEAP16[$id516 >> 1] = $call514;
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = 345;
    label = 395;
    break;
   case 112:
    if (($40 | 0) == 4 | ($40 | 0) == 5) {
      label = 113;
      break;
    } else if (($40 | 0) == 0 | ($40 | 0) == 6 | ($40 | 0) == 10 | ($40 | 0) == 9) {
      label = 116;
      break;
    } else {
      label = 119;
      break;
    }
   case 113:
    $tobool543 = ($space_seen_0 | 0) == 0;
    if ($tobool543) {
      label = 119;
      break;
    } else {
      label = 114;
      break;
    }
   case 114:
    $conv546 = $call496 & 255;
    $call547 = _isspace($conv546 | 0) | 0;
    $tobool548 = ($call547 | 0) == 0;
    if ($tobool548) {
      label = 115;
      break;
    } else {
      label = 119;
      break;
    }
   case 115:
    _arg_ambiguous($p);
    label = 116;
    break;
   case 116:
    HEAP32[$lstate >> 2] = 0;
    _pushback($p, $call496);
    $cmp554 = ($call496 | 0) == -1;
    if ($cmp554) {
      $retval_0 = 324;
      label = 395;
      break;
    } else {
      label = 117;
      break;
    }
   case 117:
    $conv558 = $call496 & 255;
    $isdigittmp = $conv558 - 48 | 0;
    $isdigit = $isdigittmp >>> 0 < 10;
    if ($isdigit) {
      label = 118;
      break;
    } else {
      $retval_0 = 324;
      label = 395;
      break;
    }
   case 118:
    HEAP32[$lstate >> 2] = 1;
    $call664947 = _newtok($p) | 0;
    _tokadd($p, 43);
    $call671 = _nextc($p) | 0;
    $c_3 = $call671;
    label = 142;
    break;
   case 119:
    HEAP32[$lstate >> 2] = 0;
    _pushback($p, $call496);
    $retval_0 = 43;
    label = 395;
    break;
   case 120:
    $call566 = _nextc($p) | 0;
    $42 = HEAP32[$lstate >> 2] | 0;
    $_off901 = $42 - 7 | 0;
    $switch902 = $_off901 >>> 0 < 2;
    if ($switch902) {
      label = 121;
      break;
    } else {
      label = 123;
      break;
    }
   case 121:
    HEAP32[$lstate >> 2] = 4;
    $cmp576 = ($call566 | 0) == 64;
    if ($cmp576) {
      $retval_0 = 325;
      label = 395;
      break;
    } else {
      label = 122;
      break;
    }
   case 122:
    _pushback($p, $call566);
    $retval_0 = 45;
    label = 395;
    break;
   case 123:
    if (($call566 | 0) == 61) {
      label = 124;
      break;
    } else if (($call566 | 0) == 62) {
      label = 125;
      break;
    } else {
      label = 126;
      break;
    }
   case 124:
    $call584 = _intern_gen_c($p, 45) | 0;
    $ylval585 = $p + 1124 | 0;
    $43 = HEAP32[$ylval585 >> 2] | 0;
    $id586 = $43;
    HEAP16[$id586 >> 1] = $call584;
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = 345;
    label = 395;
    break;
   case 125:
    HEAP32[$lstate >> 2] = 3;
    $retval_0 = 355;
    label = 395;
    break;
   case 126:
    if (($42 | 0) == 4 | ($42 | 0) == 5) {
      label = 127;
      break;
    } else if (($42 | 0) == 0 | ($42 | 0) == 6 | ($42 | 0) == 10 | ($42 | 0) == 9) {
      label = 130;
      break;
    } else {
      label = 133;
      break;
    }
   case 127:
    $tobool618 = ($space_seen_0 | 0) == 0;
    if ($tobool618) {
      label = 133;
      break;
    } else {
      label = 128;
      break;
    }
   case 128:
    $conv621 = $call566 & 255;
    $call622 = _isspace($conv621 | 0) | 0;
    $tobool623 = ($call622 | 0) == 0;
    if ($tobool623) {
      label = 129;
      break;
    } else {
      label = 133;
      break;
    }
   case 129:
    _arg_ambiguous($p);
    label = 130;
    break;
   case 130:
    HEAP32[$lstate >> 2] = 0;
    _pushback($p, $call566);
    $cmp629 = ($call566 | 0) == -1;
    if ($cmp629) {
      label = 132;
      break;
    } else {
      label = 131;
      break;
    }
   case 131:
    $conv633 = $call566 & 255;
    $isdigittmp924 = $conv633 - 48 | 0;
    $isdigit925 = $isdigittmp924 >>> 0 < 10;
    if ($isdigit925) {
      $retval_0 = 368;
      label = 395;
      break;
    } else {
      label = 132;
      break;
    }
   case 132:
    $retval_0 = 325;
    label = 395;
    break;
   case 133:
    HEAP32[$lstate >> 2] = 0;
    _pushback($p, $call566);
    $retval_0 = 45;
    label = 395;
    break;
   case 134:
    HEAP32[$lstate >> 2] = 0;
    $call642 = _nextc($p) | 0;
    $cmp643 = ($call642 | 0) == 46;
    if ($cmp643) {
      label = 135;
      break;
    } else {
      label = 137;
      break;
    }
   case 135:
    $call646 = _nextc($p) | 0;
    $cmp647 = ($call646 | 0) == 46;
    if ($cmp647) {
      $retval_0 = 338;
      label = 395;
      break;
    } else {
      label = 136;
      break;
    }
   case 136:
    _pushback($p, $call646);
    $retval_0 = 337;
    label = 395;
    break;
   case 137:
    _pushback($p, $call642);
    $cmp652 = ($call642 | 0) == -1;
    if ($cmp652) {
      label = 140;
      break;
    } else {
      label = 138;
      break;
    }
   case 138:
    $conv656 = $call642 & 255;
    $isdigittmp926 = $conv656 - 48 | 0;
    $isdigit927 = $isdigittmp926 >>> 0 < 10;
    if ($isdigit927) {
      label = 139;
      break;
    } else {
      label = 140;
      break;
    }
   case 139:
    _yyerror($p, 107536);
    label = 140;
    break;
   case 140:
    HEAP32[$lstate >> 2] = 8;
    $retval_0 = 46;
    label = 395;
    break;
   case 141:
    HEAP32[$lstate >> 2] = 1;
    $call664 = _newtok($p) | 0;
    $c_3 = $call10;
    label = 142;
    break;
   case 142:
    $cmp673 = ($c_3 | 0) == 48;
    if ($cmp673) {
      label = 143;
      break;
    } else {
      $c_15_ph961 = $c_3;
      $nondigit_14_ph960 = 0;
      $seen_e_0_ph = 0;
      $seen_point_0_ph = 0;
      $is_float_0_ph = 0;
      label = 212;
      break;
    }
   case 143:
    $call676 = _toklen($p) | 0;
    $call677 = _nextc($p) | 0;
    if (($call677 | 0) == 120 | ($call677 | 0) == 88) {
      label = 144;
      break;
    } else if (($call677 | 0) == 98 | ($call677 | 0) == 66) {
      label = 155;
      break;
    } else if (($call677 | 0) == 100 | ($call677 | 0) == 68) {
      label = 165;
      break;
    } else if (($call677 | 0) == 111 | ($call677 | 0) == 79) {
      label = 176;
      break;
    } else if (($call677 | 0) == 95) {
      $c_11 = 95;
      $nondigit_9 = 0;
      label = 180;
      break;
    } else {
      $c_10 = $call677;
      label = 179;
      break;
    }
   case 144:
    $call684 = _nextc($p) | 0;
    $cmp685 = ($call684 | 0) == -1;
    if ($cmp685) {
      $c_5 = -1;
      $nondigit_2 = 0;
      label = 151;
      break;
    } else {
      label = 145;
      break;
    }
   case 145:
    $conv689 = $call684 & 255;
    $call690 = _isxdigit($conv689 | 0) | 0;
    $tobool691 = ($call690 | 0) == 0;
    if ($tobool691) {
      $c_5 = $call684;
      $nondigit_2 = 0;
      label = 151;
      break;
    } else {
      $c_4 = $call684;
      $nondigit_0 = 0;
      label = 146;
      break;
    }
   case 146:
    $cmp693 = ($c_4 | 0) == 95;
    if ($cmp693) {
      label = 147;
      break;
    } else {
      label = 148;
      break;
    }
   case 147:
    $tobool696 = ($nondigit_0 | 0) == 0;
    if ($tobool696) {
      $nondigit_1 = 95;
      label = 150;
      break;
    } else {
      $c_5 = 95;
      $nondigit_2 = $nondigit_0;
      label = 151;
      break;
    }
   case 148:
    $conv701 = $c_4 & 255;
    $call702 = _isxdigit($conv701 | 0) | 0;
    $tobool703 = ($call702 | 0) == 0;
    if ($tobool703) {
      $c_5 = $c_4;
      $nondigit_2 = $nondigit_0;
      label = 151;
      break;
    } else {
      label = 149;
      break;
    }
   case 149:
    $call706 = _tolower($c_4 | 0) | 0;
    _tokadd($p, $call706);
    $nondigit_1 = 0;
    label = 150;
    break;
   case 150:
    $call707 = _nextc($p) | 0;
    $cmp708 = ($call707 | 0) == -1;
    if ($cmp708) {
      $c_5 = -1;
      $nondigit_2 = $nondigit_1;
      label = 151;
      break;
    } else {
      $c_4 = $call707;
      $nondigit_0 = $nondigit_1;
      label = 146;
      break;
    }
   case 151:
    _pushback($p, $c_5);
    _tokfix($p);
    $call711 = _toklen($p) | 0;
    $cmp712 = ($call711 | 0) == ($call676 | 0);
    if ($cmp712) {
      label = 152;
      break;
    } else {
      label = 153;
      break;
    }
   case 152:
    _yyerror($p, 107504);
    $retval_0 = 0;
    label = 395;
    break;
   case 153:
    $tobool719 = ($nondigit_2 | 0) == 0;
    if ($tobool719) {
      label = 154;
      break;
    } else {
      $nondigit_16 = $nondigit_2;
      $is_float_2 = 0;
      label = 215;
      break;
    }
   case 154:
    $call723 = _tok($p) | 0;
    $call724 = _new_int($p, $call723, 16) | 0;
    $ylval725 = $p + 1124 | 0;
    $44 = HEAP32[$ylval725 >> 2] | 0;
    $nd726 = $44;
    HEAP32[$nd726 >> 2] = $call724;
    $retval_0 = 313;
    label = 395;
    break;
   case 155:
    $call734 = _nextc($p) | 0;
    $call734_off = $call734 - 48 | 0;
    $45 = $call734_off >>> 0 < 2;
    if ($45) {
      $c_6 = $call734;
      $nondigit_3 = 0;
      label = 156;
      break;
    } else {
      $c_7 = $call734;
      $nondigit_5 = 0;
      label = 161;
      break;
    }
   case 156:
    $cmp742 = ($c_6 | 0) == 95;
    if ($cmp742) {
      label = 157;
      break;
    } else {
      label = 158;
      break;
    }
   case 157:
    $tobool745 = ($nondigit_3 | 0) == 0;
    if ($tobool745) {
      $nondigit_4 = 95;
      label = 160;
      break;
    } else {
      $c_7 = 95;
      $nondigit_5 = $nondigit_3;
      label = 161;
      break;
    }
   case 158:
    $c_6_off = $c_6 - 48 | 0;
    $46 = $c_6_off >>> 0 > 1;
    if ($46) {
      $c_7 = $c_6;
      $nondigit_5 = $nondigit_3;
      label = 161;
      break;
    } else {
      label = 159;
      break;
    }
   case 159:
    _tokadd($p, $c_6);
    $nondigit_4 = 0;
    label = 160;
    break;
   case 160:
    $call757 = _nextc($p) | 0;
    $cmp758 = ($call757 | 0) == -1;
    if ($cmp758) {
      $c_7 = -1;
      $nondigit_5 = $nondigit_4;
      label = 161;
      break;
    } else {
      $c_6 = $call757;
      $nondigit_3 = $nondigit_4;
      label = 156;
      break;
    }
   case 161:
    _pushback($p, $c_7);
    _tokfix($p);
    $call762 = _toklen($p) | 0;
    $cmp763 = ($call762 | 0) == ($call676 | 0);
    if ($cmp763) {
      label = 162;
      break;
    } else {
      label = 163;
      break;
    }
   case 162:
    _yyerror($p, 107504);
    $retval_0 = 0;
    label = 395;
    break;
   case 163:
    $tobool770 = ($nondigit_5 | 0) == 0;
    if ($tobool770) {
      label = 164;
      break;
    } else {
      $nondigit_16 = $nondigit_5;
      $is_float_2 = 0;
      label = 215;
      break;
    }
   case 164:
    $call774 = _tok($p) | 0;
    $call775 = _new_int($p, $call774, 2) | 0;
    $ylval776 = $p + 1124 | 0;
    $47 = HEAP32[$ylval776 >> 2] | 0;
    $nd777 = $47;
    HEAP32[$nd777 >> 2] = $call775;
    $retval_0 = 313;
    label = 395;
    break;
   case 165:
    $call785 = _nextc($p) | 0;
    $cmp786 = ($call785 | 0) == -1;
    if ($cmp786) {
      $c_9 = -1;
      $nondigit_8 = 0;
      label = 172;
      break;
    } else {
      label = 166;
      break;
    }
   case 166:
    $conv790 = $call785 & 255;
    $isdigittmp928 = $conv790 - 48 | 0;
    $isdigit929 = $isdigittmp928 >>> 0 < 10;
    if ($isdigit929) {
      $c_8 = $call785;
      $nondigit_6 = 0;
      label = 167;
      break;
    } else {
      $c_9 = $call785;
      $nondigit_8 = 0;
      label = 172;
      break;
    }
   case 167:
    $cmp795 = ($c_8 | 0) == 95;
    if ($cmp795) {
      label = 168;
      break;
    } else {
      label = 169;
      break;
    }
   case 168:
    $tobool798 = ($nondigit_6 | 0) == 0;
    if ($tobool798) {
      $nondigit_7 = 95;
      label = 171;
      break;
    } else {
      $c_9 = 95;
      $nondigit_8 = $nondigit_6;
      label = 172;
      break;
    }
   case 169:
    $conv803 = $c_8 & 255;
    $isdigittmp930 = $conv803 - 48 | 0;
    $isdigit931 = $isdigittmp930 >>> 0 < 10;
    if ($isdigit931) {
      label = 170;
      break;
    } else {
      $c_9 = $c_8;
      $nondigit_8 = $nondigit_6;
      label = 172;
      break;
    }
   case 170:
    _tokadd($p, $c_8);
    $nondigit_7 = 0;
    label = 171;
    break;
   case 171:
    $call809 = _nextc($p) | 0;
    $cmp810 = ($call809 | 0) == -1;
    if ($cmp810) {
      $c_9 = -1;
      $nondigit_8 = $nondigit_7;
      label = 172;
      break;
    } else {
      $c_8 = $call809;
      $nondigit_6 = $nondigit_7;
      label = 167;
      break;
    }
   case 172:
    _pushback($p, $c_9);
    _tokfix($p);
    $call814 = _toklen($p) | 0;
    $cmp815 = ($call814 | 0) == ($call676 | 0);
    if ($cmp815) {
      label = 173;
      break;
    } else {
      label = 174;
      break;
    }
   case 173:
    _yyerror($p, 107504);
    $retval_0 = 0;
    label = 395;
    break;
   case 174:
    $tobool822 = ($nondigit_8 | 0) == 0;
    if ($tobool822) {
      label = 175;
      break;
    } else {
      $nondigit_16 = $nondigit_8;
      $is_float_2 = 0;
      label = 215;
      break;
    }
   case 175:
    $call826 = _tok($p) | 0;
    $call827 = _new_int($p, $call826, 10) | 0;
    $ylval828 = $p + 1124 | 0;
    $48 = HEAP32[$ylval828 >> 2] | 0;
    $nd829 = $48;
    HEAP32[$nd829 >> 2] = $call827;
    $retval_0 = 313;
    label = 395;
    break;
   case 176:
    $call841 = _nextc($p) | 0;
    if (($call841 | 0) == (-1 | 0) | ($call841 | 0) == 95) {
      label = 178;
      break;
    } else {
      label = 177;
      break;
    }
   case 177:
    $conv849 = $call841 & 255;
    $isdigittmp932 = $conv849 - 48 | 0;
    $isdigit933 = $isdigittmp932 >>> 0 < 10;
    if ($isdigit933) {
      $c_10 = $call841;
      label = 179;
      break;
    } else {
      label = 178;
      break;
    }
   case 178:
    _yyerror($p, 107504);
    $retval_0 = 0;
    label = 395;
    break;
   case 179:
    $c_10_off = $c_10 - 48 | 0;
    $49 = $c_10_off >>> 0 < 8;
    if ($49) {
      $c_11 = $c_10;
      $nondigit_9 = 0;
      label = 180;
      break;
    } else {
      $c_13 = $c_10;
      label = 191;
      break;
    }
   case 180:
    $cmp865 = ($c_11 | 0) == 95;
    if ($cmp865) {
      label = 181;
      break;
    } else {
      label = 182;
      break;
    }
   case 181:
    $tobool868 = ($nondigit_9 | 0) == 0;
    if ($tobool868) {
      $nondigit_10 = 95;
      label = 185;
      break;
    } else {
      $c_12 = 95;
      $nondigit_11 = $nondigit_9;
      label = 186;
      break;
    }
   case 182:
    $c_11_off = $c_11 - 48 | 0;
    $50 = $c_11_off >>> 0 > 9;
    if ($50) {
      $c_12 = $c_11;
      $nondigit_11 = $nondigit_9;
      label = 186;
      break;
    } else {
      label = 183;
      break;
    }
   case 183:
    $cmp879 = ($c_11 | 0) > 55;
    if ($cmp879) {
      $c_14 = $c_11;
      $nondigit_13 = $nondigit_9;
      label = 192;
      break;
    } else {
      label = 184;
      break;
    }
   case 184:
    _tokadd($p, $c_11);
    $nondigit_10 = 0;
    label = 185;
    break;
   case 185:
    $call884 = _nextc($p) | 0;
    $cmp885 = ($call884 | 0) == -1;
    if ($cmp885) {
      $c_12 = -1;
      $nondigit_11 = $nondigit_10;
      label = 186;
      break;
    } else {
      $c_11 = $call884;
      $nondigit_9 = $nondigit_10;
      label = 180;
      break;
    }
   case 186:
    $call888 = _toklen($p) | 0;
    $cmp889 = ($call888 | 0) > ($call676 | 0);
    if ($cmp889) {
      label = 187;
      break;
    } else {
      label = 189;
      break;
    }
   case 187:
    _pushback($p, $c_12);
    _tokfix($p);
    $tobool892 = ($nondigit_11 | 0) == 0;
    if ($tobool892) {
      label = 188;
      break;
    } else {
      $nondigit_16 = $nondigit_11;
      $is_float_2 = 0;
      label = 215;
      break;
    }
   case 188:
    $call895 = _tok($p) | 0;
    $call896 = _new_int($p, $call895, 8) | 0;
    $ylval897 = $p + 1124 | 0;
    $51 = HEAP32[$ylval897 >> 2] | 0;
    $nd898 = $51;
    HEAP32[$nd898 >> 2] = $call896;
    $retval_0 = 313;
    label = 395;
    break;
   case 189:
    $tobool900 = ($nondigit_11 | 0) == 0;
    if ($tobool900) {
      $c_13 = $c_12;
      label = 191;
      break;
    } else {
      label = 190;
      break;
    }
   case 190:
    _pushback($p, $c_12);
    $nondigit_16 = $nondigit_11;
    $is_float_2 = 0;
    label = 215;
    break;
   case 191:
    $c_13_off = $c_13 - 56 | 0;
    $52 = $c_13_off >>> 0 < 2;
    if ($52) {
      $c_14 = $c_13;
      $nondigit_13 = 0;
      label = 192;
      break;
    } else {
      label = 193;
      break;
    }
   case 192:
    _yyerror($p, 107484);
    $c_15_ph961 = $c_14;
    $nondigit_14_ph960 = $nondigit_13;
    $seen_e_0_ph = 0;
    $seen_point_0_ph = 0;
    $is_float_0_ph = 0;
    label = 212;
    break;
   case 193:
    if (($c_13 | 0) == 101 | ($c_13 | 0) == 69 | ($c_13 | 0) == 46) {
      label = 194;
      break;
    } else {
      label = 195;
      break;
    }
   case 194:
    _tokadd($p, 48);
    $c_15_ph961 = $c_13;
    $nondigit_14_ph960 = 0;
    $seen_e_0_ph = 0;
    $seen_point_0_ph = 0;
    $is_float_0_ph = 0;
    label = 212;
    break;
   case 195:
    _pushback($p, $c_13);
    $call921 = _new_int($p, 107472, 10) | 0;
    $ylval922 = $p + 1124 | 0;
    $53 = HEAP32[$ylval922 >> 2] | 0;
    $nd923 = $53;
    HEAP32[$nd923 >> 2] = $call921;
    $retval_0 = 313;
    label = 395;
    break;
   case 196:
    if (($c_15 | 0) == 48 | ($c_15 | 0) == 49 | ($c_15 | 0) == 50 | ($c_15 | 0) == 51 | ($c_15 | 0) == 52 | ($c_15 | 0) == 53 | ($c_15 | 0) == 54 | ($c_15 | 0) == 55 | ($c_15 | 0) == 56 | ($c_15 | 0) == 57) {
      label = 197;
      break;
    } else if (($c_15 | 0) == 46) {
      label = 198;
      break;
    } else if (($c_15 | 0) == 101 | ($c_15 | 0) == 69) {
      label = 204;
      break;
    } else if (($c_15 | 0) == 95) {
      label = 209;
      break;
    } else {
      $c_16 = $c_15;
      label = 214;
      break;
    }
   case 197:
    _tokadd($p, $c_15);
    $nondigit_15 = 0;
    $seen_e_1 = $seen_e_0;
    $seen_point_1 = $seen_point_0_ph;
    $is_float_1 = $is_float_0;
    label = 211;
    break;
   case 198:
    $tobool929 = ($nondigit_14 | 0) == 0;
    if ($tobool929) {
      label = 199;
      break;
    } else {
      $nondigit_16 = $nondigit_14;
      $is_float_2 = $is_float_0;
      label = 215;
      break;
    }
   case 199:
    $54 = $seen_e_0 | $seen_point_0_ph;
    $55 = ($54 | 0) == 0;
    if ($55) {
      label = 200;
      break;
    } else {
      label = 213;
      break;
    }
   case 200:
    $call937 = _nextc($p) | 0;
    $cmp938 = ($call937 | 0) == -1;
    if ($cmp938) {
      label = 202;
      break;
    } else {
      label = 201;
      break;
    }
   case 201:
    $conv942 = $call937 & 255;
    $isdigittmp934 = $conv942 - 48 | 0;
    $isdigit935 = $isdigittmp934 >>> 0 < 10;
    if ($isdigit935) {
      label = 203;
      break;
    } else {
      label = 202;
      break;
    }
   case 202:
    _pushback($p, $call937);
    $c_16 = $c_15;
    label = 214;
    break;
   case 203:
    _tokadd($p, 46);
    _tokadd($p, $call937);
    $inc948 = $is_float_0 + 1 | 0;
    $inc949 = $seen_point_0_ph + 1 | 0;
    $nondigit_15 = 0;
    $seen_e_1 = $seen_e_0;
    $seen_point_1 = $inc949;
    $is_float_1 = $inc948;
    label = 211;
    break;
   case 204:
    $tobool951 = ($nondigit_14 | 0) == 0;
    if ($tobool951) {
      label = 206;
      break;
    } else {
      label = 205;
      break;
    }
   case 205:
    _pushback($p, $c_15);
    $c_16 = $nondigit_14;
    label = 214;
    break;
   case 206:
    $tobool954 = ($seen_e_0 | 0) == 0;
    if ($tobool954) {
      label = 207;
      break;
    } else {
      label = 213;
      break;
    }
   case 207:
    _tokadd($p, $c_15);
    $inc957 = $seen_e_0 + 1 | 0;
    $inc958 = $is_float_0 + 1 | 0;
    $call959 = _nextc($p) | 0;
    if (($call959 | 0) == 45 | ($call959 | 0) == 43) {
      label = 208;
      break;
    } else {
      $nondigit_14 = $c_15;
      $c_15 = $call959;
      $seen_e_0 = $inc957;
      $is_float_0 = $inc958;
      label = 196;
      break;
    }
   case 208:
    _tokadd($p, $call959);
    $nondigit_15 = $call959;
    $seen_e_1 = $inc957;
    $seen_point_1 = $seen_point_0_ph;
    $is_float_1 = $inc958;
    label = 211;
    break;
   case 209:
    $tobool968 = ($nondigit_14 | 0) == 0;
    if ($tobool968) {
      $nondigit_15 = 95;
      $seen_e_1 = $seen_e_0;
      $seen_point_1 = $seen_point_0_ph;
      $is_float_1 = $is_float_0;
      label = 211;
      break;
    } else {
      label = 210;
      break;
    }
   case 210:
    _pushback($p, $c_15);
    $nondigit_16 = $nondigit_14;
    $is_float_2 = $is_float_0;
    label = 215;
    break;
   case 211:
    $call973 = _nextc($p) | 0;
    $c_15_ph961 = $call973;
    $nondigit_14_ph960 = $nondigit_15;
    $seen_e_0_ph = $seen_e_1;
    $seen_point_0_ph = $seen_point_1;
    $is_float_0_ph = $is_float_1;
    label = 212;
    break;
   case 212:
    $c_15 = $c_15_ph961;
    $nondigit_14 = $nondigit_14_ph960;
    $seen_e_0 = $seen_e_0_ph;
    $is_float_0 = $is_float_0_ph;
    label = 196;
    break;
   case 213:
    _pushback($p, $c_15);
    $is_float_3 = $is_float_0;
    label = 216;
    break;
   case 214:
    _pushback($p, $c_16);
    $tobool974 = ($nondigit_14 | 0) == 0;
    if ($tobool974) {
      $is_float_3 = $is_float_0;
      label = 216;
      break;
    } else {
      $nondigit_16 = $nondigit_14;
      $is_float_2 = $is_float_0;
      label = 215;
      break;
    }
   case 215:
    _yyerror_i($p, 107440, $nondigit_16);
    $is_float_3 = $is_float_2;
    label = 216;
    break;
   case 216:
    _tokfix($p);
    $tobool977 = ($is_float_3 | 0) == 0;
    if ($tobool977) {
      label = 222;
      break;
    } else {
      label = 217;
      break;
    }
   case 217:
    $call979 = ___errno_location() | 0;
    HEAP32[$call979 >> 2] = 0;
    $call980 = _tok($p) | 0;
    $call981 = +_strtod($call980, $endp);
    $cmp982 = $call981 == 0.0;
    $56 = HEAP32[$endp >> 2] | 0;
    $cmp986 = ($56 | 0) == ($call980 | 0);
    $or_cond956 = $cmp982 & $cmp986;
    if ($or_cond956) {
      label = 218;
      break;
    } else {
      label = 219;
      break;
    }
   case 218:
    _yywarning_s($p, 107412, $call980);
    label = 221;
    break;
   case 219:
    $call991 = ___errno_location() | 0;
    $57 = HEAP32[$call991 >> 2] | 0;
    $cmp992 = ($57 | 0) == 34;
    if ($cmp992) {
      label = 220;
      break;
    } else {
      label = 221;
      break;
    }
   case 220:
    _yywarning_s($p, 107368, $call980);
    $call996 = ___errno_location() | 0;
    HEAP32[$call996 >> 2] = 0;
    label = 221;
    break;
   case 221:
    $call1000 = _new_float($p, $call980) | 0;
    $ylval1001 = $p + 1124 | 0;
    $58 = HEAP32[$ylval1001 >> 2] | 0;
    $nd1002 = $58;
    HEAP32[$nd1002 >> 2] = $call1000;
    $retval_0 = 314;
    label = 395;
    break;
   case 222:
    $call1004 = _tok($p) | 0;
    $call1005 = _new_int($p, $call1004, 10) | 0;
    $ylval1006 = $p + 1124 | 0;
    $59 = HEAP32[$ylval1006 >> 2] | 0;
    $nd1007 = $59;
    HEAP32[$nd1007 >> 2] = $call1005;
    $retval_0 = 313;
    label = 395;
    break;
   case 223:
    $paren_nest = $p + 56 | 0;
    $60 = HEAP32[$paren_nest >> 2] | 0;
    $dec = $60 - 1 | 0;
    HEAP32[$paren_nest >> 2] = $dec;
    label = 224;
    break;
   case 224:
    $cond_stack = $p + 48 | 0;
    $61 = HEAP32[$cond_stack >> 2] | 0;
    $shr = $61 >>> 1;
    $and1011 = $61 & 1;
    $or = $shr | $and1011;
    HEAP32[$cond_stack >> 2] = $or;
    $cmdarg_stack = $p + 52 | 0;
    $62 = HEAP32[$cmdarg_stack >> 2] | 0;
    $shr1013 = $62 >>> 1;
    $and1015 = $62 & 1;
    $or1016 = $shr1013 | $and1015;
    HEAP32[$cmdarg_stack >> 2] = $or1016;
    $cmp1018 = ($call10 | 0) == 41;
    $_863 = $cmp1018 ? 3 : 2;
    HEAP32[$lstate >> 2] = $_863;
    $retval_0 = $call10;
    label = 395;
    break;
   case 225:
    $call1026 = _nextc($p) | 0;
    $cmp1027 = ($call1026 | 0) == 58;
    $63 = HEAP32[$lstate >> 2] | 0;
    if ($cmp1027) {
      label = 226;
      break;
    } else {
      label = 231;
      break;
    }
   case 226:
    if (($63 | 0) == 4 | ($63 | 0) == 5) {
      label = 227;
      break;
    } else if (($63 | 0) == 0 | ($63 | 0) == 6 | ($63 | 0) == 10 | ($63 | 0) == 9) {
      label = 229;
      break;
    } else {
      label = 230;
      break;
    }
   case 227:
    $tobool1058 = ($space_seen_0 | 0) == 0;
    if ($tobool1058) {
      label = 230;
      break;
    } else {
      label = 228;
      break;
    }
   case 228:
    $call1060 = _isspace(255) | 0;
    $tobool1061 = ($call1060 | 0) == 0;
    if ($tobool1061) {
      label = 229;
      break;
    } else {
      label = 230;
      break;
    }
   case 229:
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = 344;
    label = 395;
    break;
   case 230:
    HEAP32[$lstate >> 2] = 8;
    $retval_0 = 343;
    label = 395;
    break;
   case 231:
    $_off903 = $63 - 1 | 0;
    $switch904 = $_off903 >>> 0 < 3;
    if ($switch904) {
      label = 233;
      break;
    } else {
      label = 232;
      break;
    }
   case 232:
    $conv1080 = $call1026 & 255;
    $call1081 = _isspace($conv1080 | 0) | 0;
    $tobool1082 = ($call1081 | 0) == 0;
    if ($tobool1082) {
      label = 234;
      break;
    } else {
      label = 233;
      break;
    }
   case 233:
    _pushback($p, $call1026);
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = 58;
    label = 395;
    break;
   case 234:
    _pushback($p, $call1026);
    HEAP32[$lstate >> 2] = 7;
    $retval_0 = 356;
    label = 395;
    break;
   case 235:
    $64 = HEAP32[$lstate >> 2] | 0;
    if (($64 | 0) == 0 | ($64 | 0) == 6 | ($64 | 0) == 10 | ($64 | 0) == 9) {
      label = 236;
      break;
    } else {
      label = 237;
      break;
    }
   case 236:
    $call1104 = _new_strterm($p, 7, 47, 0) | 0;
    HEAP32[$lex_strterm >> 2] = $call1104;
    $retval_0 = 357;
    label = 395;
    break;
   case 237:
    $call1107 = _nextc($p) | 0;
    $cmp1108 = ($call1107 | 0) == 61;
    if ($cmp1108) {
      label = 238;
      break;
    } else {
      label = 239;
      break;
    }
   case 238:
    $call1111 = _intern_gen_c($p, 47) | 0;
    $ylval1112 = $p + 1124 | 0;
    $65 = HEAP32[$ylval1112 >> 2] | 0;
    $id1113 = $65;
    HEAP16[$id1113 >> 1] = $call1111;
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = 345;
    label = 395;
    break;
   case 239:
    _pushback($p, $call1107);
    $66 = HEAP32[$lstate >> 2] | 0;
    $_off905 = $66 - 4 | 0;
    $switch906 = $_off905 >>> 0 > 1;
    $tobool1124 = ($space_seen_0 | 0) == 0;
    $or_cond907 = $switch906 | $tobool1124;
    if ($or_cond907) {
      label = 242;
      break;
    } else {
      label = 240;
      break;
    }
   case 240:
    $conv1127 = $call1107 & 255;
    $call1128 = _isspace($conv1127 | 0) | 0;
    $tobool1129 = ($call1128 | 0) == 0;
    if ($tobool1129) {
      label = 241;
      break;
    } else {
      label = 242;
      break;
    }
   case 241:
    $call1131 = _new_strterm($p, 7, 47, 0) | 0;
    HEAP32[$lex_strterm >> 2] = $call1131;
    $retval_0 = 357;
    label = 395;
    break;
   case 242:
    $67 = HEAP32[$lstate >> 2] | 0;
    $_off908 = $67 - 7 | 0;
    $switch909 = $_off908 >>> 0 < 2;
    $_910 = $switch909 ? 4 : 0;
    HEAP32[$lstate >> 2] = $_910;
    $retval_0 = 47;
    label = 395;
    break;
   case 243:
    $call1147 = _nextc($p) | 0;
    $cmp1148 = ($call1147 | 0) == 61;
    if ($cmp1148) {
      label = 244;
      break;
    } else {
      label = 245;
      break;
    }
   case 244:
    $call1151 = _intern_gen_c($p, 94) | 0;
    $ylval1152 = $p + 1124 | 0;
    $68 = HEAP32[$ylval1152 >> 2] | 0;
    $id1153 = $68;
    HEAP16[$id1153 >> 1] = $call1151;
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = 345;
    label = 395;
    break;
   case 245:
    $69 = HEAP32[$lstate >> 2] | 0;
    $_off911 = $69 - 7 | 0;
    $switch912 = $_off911 >>> 0 < 2;
    $_913 = $switch912 ? 4 : 0;
    HEAP32[$lstate >> 2] = $_913;
    _pushback($p, $call1147);
    $retval_0 = 94;
    label = 395;
    break;
   case 246:
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = 59;
    label = 395;
    break;
   case 247:
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = 44;
    label = 395;
    break;
   case 248:
    $70 = HEAP32[$lstate >> 2] | 0;
    $_off914 = $70 - 7 | 0;
    $switch915 = $_off914 >>> 0 < 2;
    if ($switch915) {
      label = 249;
      break;
    } else {
      $storemerge849 = 0;
      label = 251;
      break;
    }
   case 249:
    $call1181 = _nextc($p) | 0;
    $cmp1182 = ($call1181 | 0) == 64;
    if ($cmp1182) {
      $storemerge849 = 4;
      label = 251;
      break;
    } else {
      label = 250;
      break;
    }
   case 250:
    _pushback($p, $call1181);
    $storemerge849 = 4;
    label = 251;
    break;
   case 251:
    HEAP32[$lstate >> 2] = $storemerge849;
    $retval_0 = 126;
    label = 395;
    break;
   case 252:
    $71 = HEAP32[$lstate >> 2] | 0;
    if (($71 | 0) == 4) {
      label = 254;
      break;
    } else if (($71 | 0) == 0 | ($71 | 0) == 6 | ($71 | 0) == 10 | ($71 | 0) == 9) {
      $c_17 = 347;
      label = 256;
      break;
    } else {
      label = 253;
      break;
    }
   case 253:
    $cmp1213 = ($71 | 0) != 5;
    $tobool1216 = ($space_seen_0 | 0) == 0;
    $or_cond864 = $cmp1213 | $tobool1216;
    if ($or_cond864) {
      $c_17 = 40;
      label = 256;
      break;
    } else {
      label = 255;
      break;
    }
   case 254:
    $tobool1216_old = ($space_seen_0 | 0) == 0;
    if ($tobool1216_old) {
      $c_17 = $call10;
      label = 256;
      break;
    } else {
      label = 255;
      break;
    }
   case 255:
    $call1218 = _isspace(255) | 0;
    $tobool1219 = ($call1218 | 0) == 0;
    $_call10 = $tobool1219 ? 348 : $call10;
    $c_17 = $_call10;
    label = 256;
    break;
   case 256:
    $paren_nest1223 = $p + 56 | 0;
    $72 = HEAP32[$paren_nest1223 >> 2] | 0;
    $inc1224 = $72 + 1 | 0;
    HEAP32[$paren_nest1223 >> 2] = $inc1224;
    $cond_stack1225 = $p + 48 | 0;
    $73 = HEAP32[$cond_stack1225 >> 2] | 0;
    $shl = $73 << 1;
    HEAP32[$cond_stack1225 >> 2] = $shl;
    $cmdarg_stack1227 = $p + 52 | 0;
    $74 = HEAP32[$cmdarg_stack1227 >> 2] | 0;
    $shl1228 = $74 << 1;
    HEAP32[$cmdarg_stack1227 >> 2] = $shl1228;
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = $c_17;
    label = 395;
    break;
   case 257:
    $paren_nest1232 = $p + 56 | 0;
    $75 = HEAP32[$paren_nest1232 >> 2] | 0;
    $inc1233 = $75 + 1 | 0;
    HEAP32[$paren_nest1232 >> 2] = $inc1233;
    $76 = HEAP32[$lstate >> 2] | 0;
    if (($76 | 0) == 7 | ($76 | 0) == 8) {
      label = 258;
      break;
    } else if (($76 | 0) == 4) {
      label = 263;
      break;
    } else if (($76 | 0) == 0 | ($76 | 0) == 6 | ($76 | 0) == 10 | ($76 | 0) == 9) {
      $c_18 = 350;
      label = 265;
      break;
    } else {
      label = 262;
      break;
    }
   case 258:
    HEAP32[$lstate >> 2] = 4;
    $call1243 = _nextc($p) | 0;
    $cmp1244 = ($call1243 | 0) == 93;
    if ($cmp1244) {
      label = 259;
      break;
    } else {
      label = 261;
      break;
    }
   case 259:
    $call1247 = _nextc($p) | 0;
    $cmp1248 = ($call1247 | 0) == 61;
    if ($cmp1248) {
      $retval_0 = 340;
      label = 395;
      break;
    } else {
      label = 260;
      break;
    }
   case 260:
    _pushback($p, $call1247);
    $retval_0 = 339;
    label = 395;
    break;
   case 261:
    _pushback($p, $call1243);
    $retval_0 = 91;
    label = 395;
    break;
   case 262:
    $cmp1276 = ($76 | 0) != 5;
    $tobool1279 = ($space_seen_0 | 0) == 0;
    $or_cond865 = $cmp1276 | $tobool1279;
    if ($or_cond865) {
      $c_18 = 91;
      label = 265;
      break;
    } else {
      label = 264;
      break;
    }
   case 263:
    $tobool1279_old = ($space_seen_0 | 0) == 0;
    if ($tobool1279_old) {
      $c_18 = $call10;
      label = 265;
      break;
    } else {
      label = 264;
      break;
    }
   case 264:
    $c_18 = 350;
    label = 265;
    break;
   case 265:
    HEAP32[$lstate >> 2] = 0;
    $cond_stack1285 = $p + 48 | 0;
    $77 = HEAP32[$cond_stack1285 >> 2] | 0;
    $shl1286 = $77 << 1;
    HEAP32[$cond_stack1285 >> 2] = $shl1286;
    $cmdarg_stack1288 = $p + 52 | 0;
    $78 = HEAP32[$cmdarg_stack1288 >> 2] | 0;
    $shl1289 = $78 << 1;
    HEAP32[$cmdarg_stack1288 >> 2] = $shl1289;
    $retval_0 = $c_18;
    label = 395;
    break;
   case 266:
    $lpar_beg = $p + 60 | 0;
    $79 = HEAP32[$lpar_beg >> 2] | 0;
    $tobool1292 = ($79 | 0) == 0;
    if ($tobool1292) {
      label = 269;
      break;
    } else {
      label = 267;
      break;
    }
   case 267:
    $paren_nest1295 = $p + 56 | 0;
    $80 = HEAP32[$paren_nest1295 >> 2] | 0;
    $cmp1296 = ($79 | 0) == ($80 | 0);
    if ($cmp1296) {
      label = 268;
      break;
    } else {
      label = 269;
      break;
    }
   case 268:
    HEAP32[$lstate >> 2] = 0;
    HEAP32[$lpar_beg >> 2] = 0;
    $81 = HEAP32[$paren_nest1295 >> 2] | 0;
    $dec1302 = $81 - 1 | 0;
    HEAP32[$paren_nest1295 >> 2] = $dec1302;
    $cond_stack1303 = $p + 48 | 0;
    $82 = HEAP32[$cond_stack1303 >> 2] | 0;
    $shl1304 = $82 << 1;
    HEAP32[$cond_stack1303 >> 2] = $shl1304;
    $cmdarg_stack1306 = $p + 52 | 0;
    $83 = HEAP32[$cmdarg_stack1306 >> 2] | 0;
    $shl1307 = $83 << 1;
    HEAP32[$cmdarg_stack1306 >> 2] = $shl1307;
    $retval_0 = 363;
    label = 395;
    break;
   case 269:
    $84 = HEAP32[$lstate >> 2] | 0;
    if (($84 | 0) == 2) {
      label = 270;
      break;
    } else if (($84 | 0) == 4 | ($84 | 0) == 5 | ($84 | 0) == 1 | ($84 | 0) == 3) {
      $c_19 = 123;
      label = 272;
      break;
    } else {
      label = 271;
      break;
    }
   case 270:
    $c_19 = 352;
    label = 272;
    break;
   case 271:
    $c_19 = 351;
    label = 272;
    break;
   case 272:
    $cond_stack1334 = $p + 48 | 0;
    $85 = HEAP32[$cond_stack1334 >> 2] | 0;
    $shl1335 = $85 << 1;
    HEAP32[$cond_stack1334 >> 2] = $shl1335;
    $cmdarg_stack1337 = $p + 52 | 0;
    $86 = HEAP32[$cmdarg_stack1337 >> 2] | 0;
    $shl1338 = $86 << 1;
    HEAP32[$cmdarg_stack1337 >> 2] = $shl1338;
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = $c_19;
    label = 395;
    break;
   case 273:
    $call1342 = _nextc($p) | 0;
    $cmp1343 = ($call1342 | 0) == 10;
    if ($cmp1343) {
      label = 274;
      break;
    } else {
      label = 275;
      break;
    }
   case 274:
    $87 = HEAP32[$lineno1346 >> 2] | 0;
    $inc1347 = $87 + 1 | 0;
    HEAP32[$lineno1346 >> 2] = $inc1347;
    HEAP32[$column1348 >> 2] = 0;
    $space_seen_0 = 1;
    label = 9;
    break;
   case 275:
    _pushback($p, $call1342);
    $retval_0 = 92;
    label = 395;
    break;
   case 276:
    $88 = HEAP32[$lstate >> 2] | 0;
    if (($88 | 0) == 0 | ($88 | 0) == 6 | ($88 | 0) == 10 | ($88 | 0) == 9) {
      label = 277;
      break;
    } else {
      label = 300;
      break;
    }
   case 277:
    $call1367 = _nextc($p) | 0;
    $c_20 = $call1367;
    label = 278;
    break;
   case 278:
    $cmp1368 = ($c_20 | 0) == -1;
    if ($cmp1368) {
      label = 283;
      break;
    } else {
      label = 279;
      break;
    }
   case 279:
    $conv1372 = $c_20 & 255;
    $call1373 = _isalnum($conv1372 | 0) | 0;
    $tobool1374 = ($call1373 | 0) == 0;
    if ($tobool1374) {
      $c_21 = 81;
      $term_0 = $c_20;
      label = 282;
      break;
    } else {
      label = 280;
      break;
    }
   case 280:
    $call1377 = _nextc($p) | 0;
    $call1378 = _isalnum($call1377 | 0) | 0;
    $tobool1379 = ($call1378 | 0) == 0;
    if ($tobool1379) {
      $c_21 = $c_20;
      $term_0 = $call1377;
      label = 282;
      break;
    } else {
      label = 281;
      break;
    }
   case 281:
    _yyerror($p, 107328);
    $retval_0 = 0;
    label = 395;
    break;
   case 282:
    $cmp1383 = ($c_21 | 0) == -1;
    $cmp1386 = ($term_0 | 0) == -1;
    $or_cond866 = $cmp1383 | $cmp1386;
    if ($or_cond866) {
      label = 283;
      break;
    } else {
      label = 284;
      break;
    }
   case 283:
    _yyerror($p, 107268);
    $retval_0 = 0;
    label = 395;
    break;
   case 284:
    if (($term_0 | 0) == 91) {
      label = 285;
      break;
    } else if (($term_0 | 0) == 123) {
      label = 286;
      break;
    } else if (($term_0 | 0) == 60) {
      label = 287;
      break;
    } else if (($term_0 | 0) == 40) {
      $paren_0 = 40;
      $term_1 = 41;
      label = 289;
      break;
    } else {
      label = 288;
      break;
    }
   case 285:
    $paren_0 = $term_0;
    $term_1 = 93;
    label = 289;
    break;
   case 286:
    $paren_0 = $term_0;
    $term_1 = 125;
    label = 289;
    break;
   case 287:
    $paren_0 = $term_0;
    $term_1 = 62;
    label = 289;
    break;
   case 288:
    $paren_0 = 0;
    $term_1 = $term_0;
    label = 289;
    break;
   case 289:
    if (($c_21 | 0) == 81) {
      label = 290;
      break;
    } else if (($c_21 | 0) == 113) {
      label = 291;
      break;
    } else if (($c_21 | 0) == 87) {
      label = 292;
      break;
    } else if (($c_21 | 0) == 119) {
      label = 293;
      break;
    } else if (($c_21 | 0) == 120) {
      label = 294;
      break;
    } else if (($c_21 | 0) == 114) {
      label = 295;
      break;
    } else if (($c_21 | 0) == 115) {
      label = 296;
      break;
    } else if (($c_21 | 0) == 73) {
      label = 297;
      break;
    } else if (($c_21 | 0) == 105) {
      label = 298;
      break;
    } else {
      label = 299;
      break;
    }
   case 290:
    $call1411 = _new_strterm($p, 3, $term_1, $paren_0) | 0;
    HEAP32[$lex_strterm >> 2] = $call1411;
    $retval_0 = 360;
    label = 395;
    break;
   case 291:
    $call1414 = _new_strterm($p, 1, $term_1, $paren_0) | 0;
    HEAP32[$lex_strterm >> 2] = $call1414;
    $call1416 = _parse_string($p) | 0;
    $retval_0 = $call1416;
    label = 395;
    break;
   case 292:
    $call1418 = _new_strterm($p, 43, $term_1, $paren_0) | 0;
    HEAP32[$lex_strterm >> 2] = $call1418;
    $retval_0 = 358;
    label = 395;
    break;
   case 293:
    $call1421 = _new_strterm($p, 41, $term_1, $paren_0) | 0;
    HEAP32[$lex_strterm >> 2] = $call1421;
    $retval_0 = 358;
    label = 395;
    break;
   case 294:
    $call1424 = _new_strterm($p, 131, $term_1, $paren_0) | 0;
    HEAP32[$lex_strterm >> 2] = $call1424;
    $retval_0 = 361;
    label = 395;
    break;
   case 295:
    $call1427 = _new_strterm($p, 7, $term_1, $paren_0) | 0;
    HEAP32[$lex_strterm >> 2] = $call1427;
    $retval_0 = 357;
    label = 395;
    break;
   case 296:
    $call1430 = _new_strterm($p, 17, $term_1, $paren_0) | 0;
    HEAP32[$lex_strterm >> 2] = $call1430;
    $retval_0 = 356;
    label = 395;
    break;
   case 297:
    $call1433 = _new_strterm($p, 51, $term_1, $paren_0) | 0;
    HEAP32[$lex_strterm >> 2] = $call1433;
    $retval_0 = 359;
    label = 395;
    break;
   case 298:
    $call1436 = _new_strterm($p, 49, $term_1, $paren_0) | 0;
    HEAP32[$lex_strterm >> 2] = $call1436;
    $retval_0 = 359;
    label = 395;
    break;
   case 299:
    _yyerror($p, 107328);
    $retval_0 = 0;
    label = 395;
    break;
   case 300:
    $call1440 = _nextc($p) | 0;
    $cmp1441 = ($call1440 | 0) == 61;
    if ($cmp1441) {
      label = 301;
      break;
    } else {
      label = 302;
      break;
    }
   case 301:
    $call1444 = _intern_gen_c($p, 37) | 0;
    $ylval1445 = $p + 1124 | 0;
    $89 = HEAP32[$ylval1445 >> 2] | 0;
    $id1446 = $89;
    HEAP16[$id1446 >> 1] = $call1444;
    HEAP32[$lstate >> 2] = 0;
    $retval_0 = 345;
    label = 395;
    break;
   case 302:
    $90 = HEAP32[$lstate >> 2] | 0;
    $_off916 = $90 - 4 | 0;
    $switch917 = $_off916 >>> 0 > 1;
    $tobool1457 = ($space_seen_0 | 0) == 0;
    $or_cond918 = $switch917 | $tobool1457;
    if ($or_cond918) {
      label = 304;
      break;
    } else {
      label = 303;
      break;
    }
   case 303:
    $conv1460 = $call1440 & 255;
    $call1461 = _isspace($conv1460 | 0) | 0;
    $tobool1462 = ($call1461 | 0) == 0;
    if ($tobool1462) {
      $c_20 = $call1440;
      label = 278;
      break;
    } else {
      label = 304;
      break;
    }
   case 304:
    $91 = HEAP32[$lstate >> 2] | 0;
    $_off919 = $91 - 7 | 0;
    $switch920 = $_off919 >>> 0 < 2;
    $_921 = $switch920 ? 4 : 0;
    HEAP32[$lstate >> 2] = $_921;
    _pushback($p, $call1440);
    $retval_0 = 37;
    label = 395;
    break;
   case 305:
    HEAP32[$lstate >> 2] = 1;
    $call1479 = _newtok($p) | 0;
    $call1480 = _nextc($p) | 0;
    if (($call1480 | 0) == (-1 | 0)) {
      label = 306;
      break;
    } else if (($call1480 | 0) == 95) {
      label = 307;
      break;
    } else if (($call1480 | 0) == 126 | ($call1480 | 0) == 42 | ($call1480 | 0) == 36 | ($call1480 | 0) == 63 | ($call1480 | 0) == 33 | ($call1480 | 0) == 64 | ($call1480 | 0) == 47 | ($call1480 | 0) == 92 | ($call1480 | 0) == 59 | ($call1480 | 0) == 44 | ($call1480 | 0) == 46 | ($call1480 | 0) == 61 | ($call1480 | 0) == 58 | ($call1480 | 0) == 60 | ($call1480 | 0) == 62 | ($call1480 | 0) == 34) {
      $c_22 = $call1480;
      label = 311;
      break;
    } else if (($call1480 | 0) == 45) {
      label = 312;
      break;
    } else if (($call1480 | 0) == 38 | ($call1480 | 0) == 96 | ($call1480 | 0) == 39 | ($call1480 | 0) == 43) {
      label = 314;
      break;
    } else if (($call1480 | 0) == 49 | ($call1480 | 0) == 50 | ($call1480 | 0) == 51 | ($call1480 | 0) == 52 | ($call1480 | 0) == 53 | ($call1480 | 0) == 54 | ($call1480 | 0) == 55 | ($call1480 | 0) == 56 | ($call1480 | 0) == 57) {
      $c_23 = $call1480;
      label = 317;
      break;
    } else if (($call1480 | 0) == 48) {
      label = 322;
      break;
    } else {
      label = 320;
      break;
    }
   case 306:
    _yyerror($p, 107092);
    $retval_0 = 0;
    label = 395;
    break;
   case 307:
    $call1486 = _nextc($p) | 0;
    $cmp1487 = ($call1486 | 0) == -1;
    if ($cmp1487) {
      label = 310;
      break;
    } else {
      label = 308;
      break;
    }
   case 308:
    $call1490 = _isalnum($call1486 | 0) | 0;
    $notlhs845 = ($call1490 | 0) == 0;
    $notrhs846 = ($call1486 | 0) != 95;
    $or_cond16_not = $notrhs846 & $notlhs845;
    $cmp1496 = $call1486 >>> 0 < 128;
    $or_cond17 = $or_cond16_not & $cmp1496;
    if ($or_cond17) {
      label = 310;
      break;
    } else {
      label = 309;
      break;
    }
   case 309:
    _tokadd($p, 36);
    _tokadd($p, $call1486);
    $c_25_ph = $call1486;
    $token_column_0_ph = $call1479;
    label = 339;
    break;
   case 310:
    _pushback($p, $call1486);
    $c_22 = 95;
    label = 311;
    break;
   case 311:
    _tokadd($p, 36);
    _tokadd($p, $c_22);
    _tokfix($p);
    $call1501 = _tok($p) | 0;
    $call1502 = _intern_gen($p, $call1501) | 0;
    $ylval1503 = $p + 1124 | 0;
    $92 = HEAP32[$ylval1503 >> 2] | 0;
    $id1504 = $92;
    HEAP16[$id1504 >> 1] = $call1502;
    $retval_0 = 308;
    label = 395;
    break;
   case 312:
    _tokadd($p, 36);
    _tokadd($p, $call1480);
    $call1506 = _nextc($p) | 0;
    _pushback($p, $call1506);
    label = 313;
    break;
   case 313:
    _tokfix($p);
    $call1507 = _tok($p) | 0;
    $call1508 = _intern_gen($p, $call1507) | 0;
    $ylval1509 = $p + 1124 | 0;
    $93 = HEAP32[$ylval1509 >> 2] | 0;
    $id1510 = $93;
    HEAP16[$id1510 >> 1] = $call1508;
    $retval_0 = 308;
    label = 395;
    break;
   case 314:
    $cmp1512 = ($8 | 0) == 7;
    if ($cmp1512) {
      label = 315;
      break;
    } else {
      label = 316;
      break;
    }
   case 315:
    _tokadd($p, 36);
    _tokadd($p, $call1480);
    label = 313;
    break;
   case 316:
    $call1516 = _new_back_ref($p, $call1480) | 0;
    $ylval1517 = $p + 1124 | 0;
    $94 = HEAP32[$ylval1517 >> 2] | 0;
    $nd1518 = $94;
    HEAP32[$nd1518 >> 2] = $call1516;
    $retval_0 = 322;
    label = 395;
    break;
   case 317:
    _tokadd($p, $c_23);
    $call1521 = _nextc($p) | 0;
    $cmp1523 = ($call1521 | 0) != -1;
    $isdigittmp936 = $call1521 - 48 | 0;
    $isdigit937 = $isdigittmp936 >>> 0 < 10;
    $or_cond958 = $cmp1523 & $isdigit937;
    if ($or_cond958) {
      $c_23 = $call1521;
      label = 317;
      break;
    } else {
      label = 318;
      break;
    }
   case 318:
    _pushback($p, $call1521);
    $cmp1528 = ($8 | 0) == 7;
    if ($cmp1528) {
      label = 313;
      break;
    } else {
      label = 319;
      break;
    }
   case 319:
    _tokfix($p);
    $call1532 = _tok($p) | 0;
    $call1533 = _atoi($call1532 | 0) | 0;
    $call1534 = _new_nth_ref($p, $call1533) | 0;
    $ylval1535 = $p + 1124 | 0;
    $95 = HEAP32[$ylval1535 >> 2] | 0;
    $nd1536 = $95;
    HEAP32[$nd1536 >> 2] = $call1534;
    $retval_0 = 321;
    label = 395;
    break;
   case 320:
    $call1538 = _isalnum($call1480 | 0) | 0;
    $notlhs847 = ($call1538 | 0) == 0;
    $notrhs848 = ($call1480 | 0) != 95;
    $or_cond18_not = $notrhs848 & $notlhs847;
    $cmp1544 = $call1480 >>> 0 < 128;
    $or_cond19 = $or_cond18_not & $cmp1544;
    if ($or_cond19) {
      label = 321;
      break;
    } else {
      label = 322;
      break;
    }
   case 321:
    _pushback($p, $call1480);
    $retval_0 = 36;
    label = 395;
    break;
   case 322:
    _tokadd($p, 36);
    $c_25_ph = $call1480;
    $token_column_0_ph = $call1479;
    label = 339;
    break;
   case 323:
    $call1551 = _nextc($p) | 0;
    $call1552 = _newtok($p) | 0;
    _tokadd($p, 64);
    $cmp1553 = ($call1551 | 0) == 64;
    if ($cmp1553) {
      label = 324;
      break;
    } else {
      $c_24 = $call1551;
      label = 325;
      break;
    }
   case 324:
    _tokadd($p, 64);
    $call1556 = _nextc($p) | 0;
    $c_24 = $call1556;
    label = 325;
    break;
   case 325:
    $cmp1558 = ($c_24 | 0) == -1;
    if ($cmp1558) {
      label = 326;
      break;
    } else {
      label = 329;
      break;
    }
   case 326:
    $bidx = $p + 1108 | 0;
    $96 = HEAP32[$bidx >> 2] | 0;
    $cmp1561 = ($96 | 0) == 1;
    if ($cmp1561) {
      label = 327;
      break;
    } else {
      label = 328;
      break;
    }
   case 327:
    _yyerror($p, 107044);
    $retval_0 = 0;
    label = 395;
    break;
   case 328:
    _yyerror($p, 107008);
    $retval_0 = 0;
    label = 395;
    break;
   case 329:
    $isdigittmp938 = $c_24 - 48 | 0;
    $isdigit939 = $isdigittmp938 >>> 0 < 10;
    if ($isdigit939) {
      label = 330;
      break;
    } else {
      label = 333;
      break;
    }
   case 330:
    $bidx1570 = $p + 1108 | 0;
    $97 = HEAP32[$bidx1570 >> 2] | 0;
    $cmp1571 = ($97 | 0) == 1;
    if ($cmp1571) {
      label = 331;
      break;
    } else {
      label = 332;
      break;
    }
   case 331:
    _yyerror_i($p, 106956, $c_24);
    $retval_0 = 0;
    label = 395;
    break;
   case 332:
    _yyerror_i($p, 106900, $c_24);
    $retval_0 = 0;
    label = 395;
    break;
   case 333:
    $call1578 = _isalnum($c_24 | 0) | 0;
    $notlhs = ($call1578 | 0) == 0;
    $notrhs = ($c_24 | 0) != 95;
    $or_cond20_not = $notrhs & $notlhs;
    $cmp1584 = $c_24 >>> 0 < 128;
    $or_cond21 = $or_cond20_not & $cmp1584;
    if ($or_cond21) {
      label = 334;
      break;
    } else {
      $c_25_ph = $c_24;
      $token_column_0_ph = $call1552;
      label = 339;
      break;
    }
   case 334:
    _pushback($p, $c_24);
    $retval_0 = 64;
    label = 395;
    break;
   case 335:
    $call1589 = _newtok($p) | 0;
    $c_25_ph = 95;
    $token_column_0_ph = $call1589;
    label = 339;
    break;
   case 336:
    $call1591 = _isalnum($call10 | 0) | 0;
    $notlhs860 = ($call1591 | 0) == 0;
    $notrhs861 = ($call10 | 0) != 95;
    $or_cond22_not = $notrhs861 & $notlhs860;
    $cmp1597 = $call10 >>> 0 < 128;
    $or_cond23 = $or_cond22_not & $cmp1597;
    if ($or_cond23) {
      label = 337;
      break;
    } else {
      label = 338;
      break;
    }
   case 337:
    _yyerror_i($p, 106828, $call10);
    $space_seen_0 = $space_seen_0;
    label = 9;
    break;
   case 338:
    $call1601 = _newtok($p) | 0;
    $c_25_ph = $call10;
    $token_column_0_ph = $call1601;
    label = 339;
    break;
   case 339:
    $c_25 = $c_25_ph;
    label = 340;
    break;
   case 340:
    _tokadd($p, $c_25);
    $call1604 = _nextc($p) | 0;
    $cmp1605 = ($call1604 | 0) < 0;
    if ($cmp1605) {
      label = 342;
      break;
    } else {
      label = 341;
      break;
    }
   case 341:
    $call1610 = _isalnum($call1604 | 0) | 0;
    $tobool1611 = ($call1610 | 0) != 0;
    $cmp1613 = ($call1604 | 0) == 95;
    $or_cond24 = $tobool1611 | $cmp1613;
    $lnot = $call1604 >>> 0 > 127;
    $or_cond867 = $or_cond24 | $lnot;
    if ($or_cond867) {
      $c_25 = $call1604;
      label = 340;
      break;
    } else {
      label = 342;
      break;
    }
   case 342:
    $cmp1618 = ($token_column_0_ph | 0) == 0;
    if ($cmp1618) {
      label = 343;
      break;
    } else {
      label = 346;
      break;
    }
   case 343:
    $call1621 = _toklen($p) | 0;
    $cmp1622 = ($call1621 | 0) == 7;
    if ($cmp1622) {
      label = 344;
      break;
    } else {
      label = 346;
      break;
    }
   case 344:
    $cmp1628 = ($call1604 | 0) == 10;
    $or_cond25 = $cmp1605 | $cmp1628;
    if ($or_cond25) {
      label = 345;
      break;
    } else {
      label = 346;
      break;
    }
   case 345:
    $call1631 = _tok($p) | 0;
    $call1633 = _strncmp($call1631 | 0, 106820, $call1621 | 0) | 0;
    $cmp1634 = ($call1633 | 0) == 0;
    if ($cmp1634) {
      $retval_0 = -1;
      label = 395;
      break;
    } else {
      label = 346;
      break;
    }
   case 346:
    $call1638 = _tok($p) | 0;
    $98 = HEAP8[$call1638] | 0;
    $conv1639 = $98 << 24 >> 24;
    if (($conv1639 | 0) == 64 | ($conv1639 | 0) == 36) {
      label = 347;
      break;
    } else {
      label = 348;
      break;
    }
   case 347:
    _pushback($p, $call1604);
    label = 352;
    break;
   case 348:
    if (($call1604 | 0) == 63 | ($call1604 | 0) == 33) {
      label = 349;
      break;
    } else {
      label = 351;
      break;
    }
   case 349:
    $call1648 = _peek_n($p, 61, 0) | 0;
    $tobool1649 = ($call1648 | 0) == 0;
    if ($tobool1649) {
      label = 350;
      break;
    } else {
      label = 351;
      break;
    }
   case 350:
    _tokadd($p, $call1604);
    label = 352;
    break;
   case 351:
    _pushback($p, $call1604);
    label = 352;
    break;
   case 352:
    _tokfix($p);
    $99 = HEAP8[$call1638] | 0;
    $conv1657 = $99 << 24 >> 24;
    if (($conv1657 | 0) == 36) {
      label = 353;
      break;
    } else if (($conv1657 | 0) == 64) {
      label = 354;
      break;
    } else {
      label = 355;
      break;
    }
   case 353:
    HEAP32[$lstate >> 2] = 1;
    $result_2 = 308;
    label = 394;
    break;
   case 354:
    HEAP32[$lstate >> 2] = 1;
    $arrayidx1663 = $call1638 + 1 | 0;
    $100 = HEAP8[$arrayidx1663] | 0;
    $cmp1665 = $100 << 24 >> 24 == 64;
    $_868 = $cmp1665 ? 311 : 309;
    $result_2 = $_868;
    label = 394;
    break;
   case 355:
    $call1671 = _toklast($p) | 0;
    if (($call1671 | 0) == 33 | ($call1671 | 0) == 63) {
      $result_1 = 307;
      label = 366;
      break;
    } else {
      label = 356;
      break;
    }
   case 356:
    $101 = HEAP32[$lstate >> 2] | 0;
    $cmp1681 = ($101 | 0) == 7;
    if ($cmp1681) {
      label = 357;
      break;
    } else {
      label = 364;
      break;
    }
   case 357:
    $call1684 = _nextc($p) | 0;
    $cmp1685 = ($call1684 | 0) == 61;
    if ($cmp1685) {
      label = 358;
      break;
    } else {
      label = 363;
      break;
    }
   case 358:
    $call1688 = _peek_n($p, 126, 0) | 0;
    $tobool1689 = ($call1688 | 0) == 0;
    if ($tobool1689) {
      label = 359;
      break;
    } else {
      label = 363;
      break;
    }
   case 359:
    $call1691 = _peek_n($p, 62, 0) | 0;
    $tobool1692 = ($call1691 | 0) == 0;
    if ($tobool1692) {
      label = 360;
      break;
    } else {
      label = 363;
      break;
    }
   case 360:
    $call1694 = _peek_n($p, 61, 0) | 0;
    $tobool1695 = ($call1694 | 0) == 0;
    if ($tobool1695) {
      label = 362;
      break;
    } else {
      label = 361;
      break;
    }
   case 361:
    $call1697 = _peek_n($p, 62, 1) | 0;
    $tobool1698 = ($call1697 | 0) == 0;
    if ($tobool1698) {
      label = 363;
      break;
    } else {
      label = 362;
      break;
    }
   case 362:
    _tokadd($p, $call1684);
    _tokfix($p);
    label = 365;
    break;
   case 363:
    _pushback($p, $call1684);
    label = 364;
    break;
   case 364:
    $102 = HEAP8[$call1638] | 0;
    $conv1708 = $102 << 24 >> 24;
    $call1709 = _isupper($conv1708 | 0) | 0;
    $tobool1710 = ($call1709 | 0) == 0;
    if ($tobool1710) {
      label = 365;
      break;
    } else {
      $result_1 = 310;
      label = 366;
      break;
    }
   case 365:
    $result_1 = 306;
    label = 366;
    break;
   case 366:
    $103 = HEAP32[$lstate >> 2] | 0;
    $tobool1719 = ($6 | 0) == 0;
    $104 = $103 | $6;
    $105 = ($104 | 0) == 0;
    $_off922 = $103 - 4 | 0;
    $switch923 = $_off922 >>> 0 < 2;
    $or_cond957 = $105 | $switch923;
    if ($or_cond957) {
      label = 367;
      break;
    } else {
      label = 370;
      break;
    }
   case 367:
    $call1729 = _peek_n($p, 58, 0) | 0;
    $tobool1730 = ($call1729 | 0) == 0;
    if ($tobool1730) {
      label = 370;
      break;
    } else {
      label = 368;
      break;
    }
   case 368:
    $call1732 = _peek_n($p, 58, 1) | 0;
    $tobool1733 = ($call1732 | 0) == 0;
    if ($tobool1733) {
      label = 369;
      break;
    } else {
      label = 370;
      break;
    }
   case 369:
    HEAP32[$lstate >> 2] = 0;
    $call1736 = _nextc($p) | 0;
    _tokfix($p);
    $call1738 = _intern_gen($p, $call1638) | 0;
    $ylval1739 = $p + 1124 | 0;
    $106 = HEAP32[$ylval1739 >> 2] | 0;
    $id1740 = $106;
    HEAP16[$id1740 >> 1] = $call1738;
    $retval_0 = 312;
    label = 395;
    break;
   case 370:
    $107 = HEAP32[$lstate >> 2] | 0;
    $cmp1744 = ($107 | 0) == 8;
    if ($cmp1744) {
      label = 389;
      break;
    } else {
      label = 371;
      break;
    }
   case 371:
    $call1748 = _toklen($p) | 0;
    $call1749 = _reserved_word($call1638, $call1748) | 0;
    $tobool1750 = ($call1749 | 0) == 0;
    if ($tobool1750) {
      label = 388;
      break;
    } else {
      label = 372;
      break;
    }
   case 372:
    $state1753 = $call1749 + 12 | 0;
    $108 = HEAP32[$state1753 >> 2] | 0;
    HEAP32[$lstate >> 2] = $108;
    $cmp1755 = ($107 | 0) == 7;
    if ($cmp1755) {
      label = 373;
      break;
    } else {
      label = 374;
      break;
    }
   case 373:
    $name = $call1749 | 0;
    $109 = HEAP32[$name >> 2] | 0;
    $call1758 = _intern_gen($p, $109) | 0;
    $ylval1759 = $p + 1124 | 0;
    $110 = HEAP32[$ylval1759 >> 2] | 0;
    $id1760 = $110;
    HEAP16[$id1760 >> 1] = $call1758;
    $arrayidx1762 = $call1749 + 4 | 0;
    $111 = HEAP32[$arrayidx1762 >> 2] | 0;
    $retval_0 = $111;
    label = 395;
    break;
   case 374:
    $cmp1765 = ($108 | 0) == 0;
    if ($cmp1765) {
      label = 375;
      break;
    } else {
      label = 376;
      break;
    }
   case 375:
    HEAP32[$cmd_start >> 2] = 1;
    label = 376;
    break;
   case 376:
    $arrayidx1771 = $call1749 + 4 | 0;
    $112 = HEAP32[$arrayidx1771 >> 2] | 0;
    $cmp1772 = ($112 | 0) == 281;
    if ($cmp1772) {
      label = 377;
      break;
    } else {
      label = 384;
      break;
    }
   case 377:
    $lpar_beg1775 = $p + 60 | 0;
    $113 = HEAP32[$lpar_beg1775 >> 2] | 0;
    $tobool1776 = ($113 | 0) == 0;
    if ($tobool1776) {
      label = 380;
      break;
    } else {
      label = 378;
      break;
    }
   case 378:
    $paren_nest1779 = $p + 56 | 0;
    $114 = HEAP32[$paren_nest1779 >> 2] | 0;
    $cmp1780 = ($113 | 0) == ($114 | 0);
    if ($cmp1780) {
      label = 379;
      break;
    } else {
      label = 380;
      break;
    }
   case 379:
    HEAP32[$lpar_beg1775 >> 2] = 0;
    $115 = HEAP32[$paren_nest1779 >> 2] | 0;
    $dec1785 = $115 - 1 | 0;
    HEAP32[$paren_nest1779 >> 2] = $dec1785;
    $retval_0 = 284;
    label = 395;
    break;
   case 380:
    $cond_stack1787 = $p + 48 | 0;
    $116 = HEAP32[$cond_stack1787 >> 2] | 0;
    $and1788 = $116 & 1;
    $tobool1789 = ($and1788 | 0) == 0;
    if ($tobool1789) {
      label = 381;
      break;
    } else {
      $retval_0 = 282;
      label = 395;
      break;
    }
   case 381:
    $cmdarg_stack1792 = $p + 52 | 0;
    $117 = HEAP32[$cmdarg_stack1792 >> 2] | 0;
    $and1793 = $117 & 1;
    $tobool1794 = ($and1793 | 0) == 0;
    $cmp1796 = ($107 | 0) == 5;
    $or_cond870 = $tobool1794 | $cmp1796;
    if ($or_cond870) {
      label = 382;
      break;
    } else {
      $retval_0 = 283;
      label = 395;
      break;
    }
   case 382:
    if (($107 | 0) == 2 | ($107 | 0) == 0) {
      $retval_0 = 283;
      label = 395;
      break;
    } else {
      label = 383;
      break;
    }
   case 383:
    $retval_0 = 281;
    label = 395;
    break;
   case 384:
    if (($107 | 0) == 10 | ($107 | 0) == 0) {
      $retval_0 = $112;
      label = 395;
      break;
    } else {
      label = 385;
      break;
    }
   case 385:
    $arrayidx1820 = $call1749 + 8 | 0;
    $118 = HEAP32[$arrayidx1820 >> 2] | 0;
    $cmp1821 = ($112 | 0) == ($118 | 0);
    if ($cmp1821) {
      label = 387;
      break;
    } else {
      label = 386;
      break;
    }
   case 386:
    HEAP32[$lstate >> 2] = 0;
    label = 387;
    break;
   case 387:
    $119 = HEAP32[$arrayidx1820 >> 2] | 0;
    $retval_0 = $119;
    label = 395;
    break;
   case 388:
    $_pr955 = HEAP32[$lstate >> 2] | 0;
    if (($_pr955 | 0) == 0 | ($_pr955 | 0) == 6 | ($_pr955 | 0) == 10 | ($_pr955 | 0) == 9 | ($_pr955 | 0) == 8 | ($_pr955 | 0) == 4 | ($_pr955 | 0) == 5) {
      label = 389;
      break;
    } else if (($_pr955 | 0) == 7) {
      label = 392;
      break;
    } else {
      label = 393;
      break;
    }
   case 389:
    if ($tobool1719) {
      label = 391;
      break;
    } else {
      label = 390;
      break;
    }
   case 390:
    HEAP32[$lstate >> 2] = 5;
    $result_2 = $result_1;
    label = 394;
    break;
   case 391:
    HEAP32[$lstate >> 2] = 4;
    $result_2 = $result_1;
    label = 394;
    break;
   case 392:
    HEAP32[$lstate >> 2] = 3;
    $result_2 = $result_1;
    label = 394;
    break;
   case 393:
    HEAP32[$lstate >> 2] = 1;
    $result_2 = $result_1;
    label = 394;
    break;
   case 394:
    $call1876 = _intern_gen($p, $call1638) | 0;
    $ylval1877 = $p + 1124 | 0;
    $120 = HEAP32[$ylval1877 >> 2] | 0;
    $id1878 = $120;
    HEAP16[$id1878 >> 1] = $call1876;
    $retval_0 = $result_2;
    label = 395;
    break;
   case 395:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _newtok($p) {
  $p = $p | 0;
  HEAP32[$p + 1108 >> 2] = 0;
  return (HEAP32[$p + 36 >> 2] | 0) - 1 | 0;
}
function _parse_string($p) {
  $p = $p | 0;
  var $buf = 0, $flag = 0, $msg = 0, $lex_strterm = 0, $0 = 0, $car = 0, $1 = 0, $2 = 0, $cdr = 0, $3 = 0, $car2 = 0, $4 = 0, $5 = 0, $cdr5 = 0, $6 = 0, $car6 = 0, $7 = 0, $8 = 0, $cdr10 = 0, $9 = 0, $10 = 0, $and = 0, $tobool = 0, $call = 0, $cond = 0, $call11 = 0, $call12184200 = 0, $cmp185201 = 0, $cmp13202 = 0, $or_cond147186203 = 0, $tobool14 = 0, $and75 = 0, $tobool76 = 0, $lineno112 = 0, $column114 = 0, $and88 = 0, $tobool89 = 0, $lineno91 = 0, $column93 = 0, $and95 = 0, $tobool96 = 0, $11 = 0, $and128 = 0, $tobool129 = 0, $and149 = 0, $tobool150 = 0, $cmp13207 = 0, $cmp185206 = 0, $call12184205 = 0, $nest_level_0_ph204 = 0, $cmp188 = 0, $call12187 = 0, $cmp16 = 0, $lineno = 0, $12 = 0, $inc = 0, $column = 0, $13 = 0, $14 = 0, $bf_clear = 0, $15 = 0, $tobool17 = 0, $call19 = 0, $call20 = 0, $bf_clear21 = 0, $tobool22 = 0, $16 = 0, $conv25158 = 0, $call26159 = 0, $tobool27160 = 0, $cmp28161 = 0, $or_cond162 = 0, $len_0164 = 0, $s_0163 = 0, $incdec_ptr = 0, $dec = 0, $17 = 0, $conv25 = 0, $call26 = 0, $tobool27 = 0, $cmp28 = 0, $or_cond = 0, $s_1 = 0, $len_1 = 0, $sub = 0, $term_len = 0, $18 = 0, $cmp31 = 0, $term = 0, $19 = 0, $call35 = 0, $cmp36 = 0, $arraydecay = 0, $term44 = 0, $20 = 0, $call45 = 0, $call48 = 0, $call49 = 0, $call50 = 0, $ylval = 0, $21 = 0, $nd = 0, $cmp55 = 0, $inc58 = 0, $22 = 0, $23 = 0, $cdr60 = 0, $24 = 0, $car61 = 0, $dec66 = 0, $25 = 0, $26 = 0, $cdr68 = 0, $27 = 0, $car69 = 0, $call74 = 0, $cmp78 = 0, $cmp81 = 0, $or_cond148 = 0, $cmp85_not = 0, $brmerge = 0, $28 = 0, $inc92 = 0, $call99 = 0, $29 = 0, $30 = 0, $cmp106 = 0, $cmp109 = 0, $or_cond149 = 0, $31 = 0, $inc113 = 0, $conv117 = 0, $call118 = 0, $tobool119 = 0, $call131 = 0, $cmp132 = 0, $lstate = 0, $cmd_start = 0, $call135 = 0, $call136 = 0, $call137 = 0, $ylval138 = 0, $32 = 0, $nd139 = 0, $33 = 0, $34 = 0, $35 = 0, $call12 = 0, $cmp = 0, $or_cond147 = 0, $nest_level_1 = 0, $conv153 = 0, $call154 = 0, $tobool155 = 0, $call157 = 0, $cmp158 = 0, $lineno164 = 0, $column166 = 0, $c_0 = 0, $cmp161 = 0, $36 = 0, $inc165 = 0, $call168 = 0, $conv170 = 0, $call171 = 0, $tobool172 = 0, $call174 = 0, $call175 = 0, $call176 = 0, $ylval177 = 0, $37 = 0, $nd178 = 0, $call12184 = 0, $cmp185 = 0, $cmp13 = 0, $or_cond147186 = 0, $lstate181 = 0, $and182 = 0, $tobool183 = 0, $call185 = 0, $call186 = 0, $call187 = 0, $ylval188 = 0, $38 = 0, $nd189 = 0, $and191 = 0, $tobool192 = 0, $call251 = 0, $call252 = 0, $call198 = 0, $call199 = 0, $call201153192 = 0, $conv203154193 = 0, $call204155194 = 0, $tobool205156195 = 0, $call201153197 = 0, $f_0_ph196 = 0, $call201157 = 0, $or = 0, $or209 = 0, $or211 = 0, $f_0_ph_be = 0, $call201153 = 0, $conv203154 = 0, $call204155 = 0, $tobool205156 = 0, $call201 = 0, $conv203 = 0, $call204 = 0, $tobool205 = 0, $f_0_ph190 = 0, $call201_lcssa = 0, $call215 = 0, $tobool216 = 0, $arraydecay218 = 0, $call219 = 0, $cmp220 = 0, $cond222 = 0, $call224 = 0, $and227 = 0, $tobool228 = 0, $arraydecay230 = 0, $strlen145 = 0, $endptr146 = 0, $39 = 0, $and233 = 0, $tobool234 = 0, $arraydecay236 = 0, $strlen143 = 0, $endptr144 = 0, $40 = 0, $and239 = 0, $tobool240 = 0, $arraydecay242 = 0, $strlen = 0, $endptr = 0, $41 = 0, $arraydecay245 = 0, $call246 = 0, $call247 = 0, $ylval248 = 0, $42 = 0, $nd249 = 0, $call253 = 0, $ylval254 = 0, $43 = 0, $nd255 = 0, $retval_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 388 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $buf = __stackBase__ | 0;
    $flag = __stackBase__ + 256 | 0;
    $msg = __stackBase__ + 260 | 0;
    $lex_strterm = $p + 44 | 0;
    $0 = HEAP32[$lex_strterm >> 2] | 0;
    $car = $0 | 0;
    $1 = HEAP32[$car >> 2] | 0;
    $2 = $1;
    $cdr = $0 + 4 | 0;
    $3 = HEAP32[$cdr >> 2] | 0;
    $car2 = $3 | 0;
    $4 = HEAP32[$car2 >> 2] | 0;
    $5 = $4;
    $cdr5 = $3 + 4 | 0;
    $6 = HEAP32[$cdr5 >> 2] | 0;
    $car6 = $6 | 0;
    $7 = HEAP32[$car6 >> 2] | 0;
    $8 = $7;
    $cdr10 = $6 + 4 | 0;
    $9 = HEAP32[$cdr10 >> 2] | 0;
    $10 = $9;
    $and = $2 & 64;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      $cond = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _parsing_heredoc_inf($p) | 0;
    $cond = $call;
    label = 4;
    break;
   case 4:
    $call11 = _newtok($p) | 0;
    $call12184200 = _nextc($p) | 0;
    $cmp185201 = ($call12184200 | 0) == ($10 | 0);
    $cmp13202 = ($4 | 0) == 0;
    $or_cond147186203 = $cmp185201 & $cmp13202;
    if ($or_cond147186203) {
      label = 56;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $tobool14 = ($cond | 0) != 0;
    $and75 = $2 & 2;
    $tobool76 = ($and75 | 0) == 0;
    $lineno112 = $p + 32 | 0;
    $column114 = $p + 36 | 0;
    $and88 = $2 & 32;
    $tobool89 = ($and88 | 0) == 0;
    $lineno91 = $p + 32 | 0;
    $column93 = $p + 36 | 0;
    $and95 = $2 & 4;
    $tobool96 = ($and95 | 0) == 0;
    $11 = $cond | 0;
    $and128 = $2 & 2;
    $tobool129 = ($and128 | 0) == 0;
    $and149 = $2 & 32;
    $tobool150 = ($and149 | 0) == 0;
    $nest_level_0_ph204 = $5;
    $call12184205 = $call12184200;
    $cmp185206 = $cmp185201;
    $cmp13207 = $cmp13202;
    label = 6;
    break;
   case 6:
    $call12187 = $call12184205;
    $cmp188 = $cmp185206;
    label = 7;
    break;
   case 7:
    $cmp16 = ($call12187 | 0) == -1;
    if ($tobool14) {
      label = 8;
      break;
    } else {
      label = 18;
      break;
    }
   case 8:
    if (($call12187 | 0) == (-1 | 0) | ($call12187 | 0) == 10) {
      label = 9;
      break;
    } else {
      label = 20;
      break;
    }
   case 9:
    _tokadd($p, 10);
    _tokfix($p);
    $lineno = $p + 32 | 0;
    $12 = HEAP32[$lineno >> 2] | 0;
    $inc = $12 + 1 | 0;
    HEAP32[$lineno >> 2] = $inc;
    $column = $p + 36 | 0;
    HEAP32[$column >> 2] = 0;
    $13 = $cond | 0;
    $14 = HEAP8[$13] | 0;
    $bf_clear = $14 & 2;
    $15 = $14 | 2;
    HEAP8[$13] = $15;
    $tobool17 = $bf_clear << 24 >> 24 == 0;
    if ($tobool17) {
      label = 15;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $call19 = _tok($p) | 0;
    $call20 = _toklen($p) | 0;
    $bf_clear21 = $14 & 1;
    $tobool22 = $bf_clear21 << 24 >> 24 == 0;
    if ($tobool22) {
      $len_1 = $call20;
      $s_1 = $call19;
      label = 13;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $16 = HEAP8[$call19] | 0;
    $conv25158 = $16 & 255;
    $call26159 = _isspace($conv25158 | 0) | 0;
    $tobool27160 = ($call26159 | 0) != 0;
    $cmp28161 = ($call20 | 0) > 0;
    $or_cond162 = $tobool27160 & $cmp28161;
    if ($or_cond162) {
      $s_0163 = $call19;
      $len_0164 = $call20;
      label = 12;
      break;
    } else {
      $len_1 = $call20;
      $s_1 = $call19;
      label = 13;
      break;
    }
   case 12:
    $incdec_ptr = $s_0163 + 1 | 0;
    $dec = $len_0164 - 1 | 0;
    $17 = HEAP8[$incdec_ptr] | 0;
    $conv25 = $17 & 255;
    $call26 = _isspace($conv25 | 0) | 0;
    $tobool27 = ($call26 | 0) != 0;
    $cmp28 = ($dec | 0) > 0;
    $or_cond = $tobool27 & $cmp28;
    if ($or_cond) {
      $s_0163 = $incdec_ptr;
      $len_0164 = $dec;
      label = 12;
      break;
    } else {
      $len_1 = $dec;
      $s_1 = $incdec_ptr;
      label = 13;
      break;
    }
   case 13:
    $sub = $len_1 - 1 | 0;
    $term_len = $cond + 12 | 0;
    $18 = HEAP32[$term_len >> 2] | 0;
    $cmp31 = ($sub | 0) == ($18 | 0);
    if ($cmp31) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $term = $cond + 8 | 0;
    $19 = HEAP32[$term >> 2] | 0;
    $call35 = _strncmp($s_1 | 0, $19 | 0, $sub | 0) | 0;
    $cmp36 = ($call35 | 0) == 0;
    if ($cmp36) {
      $retval_0 = 365;
      label = 77;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    if ($cmp16) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    $arraydecay = $buf | 0;
    $term44 = $cond + 8 | 0;
    $20 = HEAP32[$term44 >> 2] | 0;
    $call45 = _snprintf($arraydecay | 0, 256, 104984, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $20, tempInt) | 0) | 0;
    _yyerror($p, $arraydecay);
    $retval_0 = 0;
    label = 77;
    break;
   case 17:
    $call48 = _tok($p) | 0;
    $call49 = _toklen($p) | 0;
    $call50 = _new_str($p, $call48, $call49) | 0;
    $ylval = $p + 1124 | 0;
    $21 = HEAP32[$ylval >> 2] | 0;
    $nd = $21;
    HEAP32[$nd >> 2] = $call50;
    $retval_0 = 320;
    label = 77;
    break;
   case 18:
    if ($cmp16) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    _yyerror($p, 104944);
    $retval_0 = 0;
    label = 77;
    break;
   case 20:
    $cmp55 = ($call12187 | 0) == ($8 | 0);
    if ($cmp55) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    $inc58 = $nest_level_0_ph204 + 1 | 0;
    $22 = $inc58;
    $23 = HEAP32[$lex_strterm >> 2] | 0;
    $cdr60 = $23 + 4 | 0;
    $24 = HEAP32[$cdr60 >> 2] | 0;
    $car61 = $24 | 0;
    HEAP32[$car61 >> 2] = $22;
    $nest_level_1 = $inc58;
    label = 46;
    break;
   case 22:
    if ($cmp188) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    $dec66 = $nest_level_0_ph204 - 1 | 0;
    $25 = $dec66;
    $26 = HEAP32[$lex_strterm >> 2] | 0;
    $cdr68 = $26 + 4 | 0;
    $27 = HEAP32[$cdr68 >> 2] | 0;
    $car69 = $27 | 0;
    HEAP32[$car69 >> 2] = $25;
    $nest_level_1 = $dec66;
    label = 46;
    break;
   case 24:
    if (($call12187 | 0) == 92) {
      label = 25;
      break;
    } else if (($call12187 | 0) == 35) {
      label = 40;
      break;
    } else {
      $nest_level_1 = $nest_level_0_ph204;
      label = 46;
      break;
    }
   case 25:
    $call74 = _nextc($p) | 0;
    if ($tobool76) {
      label = 34;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    $cmp78 = ($call74 | 0) == ($10 | 0);
    $cmp81 = ($call74 | 0) == ($8 | 0);
    $or_cond148 = $cmp78 | $cmp81;
    if ($or_cond148) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    _tokadd($p, $call74);
    label = 45;
    break;
   case 28:
    $cmp85_not = ($call74 | 0) != 10;
    $brmerge = $cmp85_not | $tobool89;
    if ($brmerge) {
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $28 = HEAP32[$lineno91 >> 2] | 0;
    $inc92 = $28 + 1 | 0;
    HEAP32[$lineno91 >> 2] = $inc92;
    HEAP32[$column93 >> 2] = 0;
    _tokadd($p, 10);
    label = 45;
    break;
   case 30:
    _pushback($p, $call74);
    if ($tobool96) {
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    _tokadd($p, 92);
    label = 32;
    break;
   case 32:
    $call99 = _read_escape($p) | 0;
    _tokadd($p, $call99);
    if ($tobool14) {
      label = 33;
      break;
    } else {
      label = 45;
      break;
    }
   case 33:
    $29 = HEAP8[$11] | 0;
    $30 = $29 & -3;
    HEAP8[$11] = $30;
    label = 45;
    break;
   case 34:
    $cmp106 = ($call74 | 0) == ($8 | 0);
    $cmp109 = ($call74 | 0) == ($10 | 0);
    $or_cond149 = $cmp106 | $cmp109;
    if ($or_cond149) {
      label = 39;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    if (($call74 | 0) == 10) {
      label = 36;
      break;
    } else if (($call74 | 0) == 92) {
      label = 39;
      break;
    } else {
      label = 37;
      break;
    }
   case 36:
    $31 = HEAP32[$lineno112 >> 2] | 0;
    $inc113 = $31 + 1 | 0;
    HEAP32[$lineno112 >> 2] = $inc113;
    HEAP32[$column114 >> 2] = 0;
    label = 39;
    break;
   case 37:
    $conv117 = $call74 & 255;
    $call118 = _isspace($conv117 | 0) | 0;
    $tobool119 = ($call118 | 0) == 0;
    if ($tobool119) {
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    _tokadd($p, 92);
    label = 39;
    break;
   case 39:
    _tokadd($p, $call74);
    label = 45;
    break;
   case 40:
    if ($tobool129) {
      $nest_level_1 = $nest_level_0_ph204;
      label = 46;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    $call131 = _nextc($p) | 0;
    $cmp132 = ($call131 | 0) == 123;
    if ($cmp132) {
      label = 42;
      break;
    } else {
      label = 44;
      break;
    }
   case 42:
    _tokfix($p);
    $lstate = $p + 40 | 0;
    HEAP32[$lstate >> 2] = 0;
    $cmd_start = $p + 72 | 0;
    HEAP32[$cmd_start >> 2] = 1;
    $call135 = _tok($p) | 0;
    $call136 = _toklen($p) | 0;
    $call137 = _new_str($p, $call135, $call136) | 0;
    $ylval138 = $p + 1124 | 0;
    $32 = HEAP32[$ylval138 >> 2] | 0;
    $nd139 = $32;
    HEAP32[$nd139 >> 2] = $call137;
    if ($tobool14) {
      label = 43;
      break;
    } else {
      $retval_0 = 319;
      label = 77;
      break;
    }
   case 43:
    $33 = $cond | 0;
    $34 = HEAP8[$33] | 0;
    $35 = $34 & -3;
    HEAP8[$33] = $35;
    $retval_0 = 319;
    label = 77;
    break;
   case 44:
    _tokadd($p, 35);
    _pushback($p, $call131);
    label = 45;
    break;
   case 45:
    $call12 = _nextc($p) | 0;
    $cmp = ($call12 | 0) == ($10 | 0);
    $or_cond147 = $cmp & $cmp13207;
    if ($or_cond147) {
      label = 56;
      break;
    } else {
      $call12187 = $call12;
      $cmp188 = $cmp;
      label = 7;
      break;
    }
   case 46:
    if ($tobool150) {
      label = 55;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    $conv153 = $call12187 & 255;
    $call154 = _isspace($conv153 | 0) | 0;
    $tobool155 = ($call154 | 0) == 0;
    if ($tobool155) {
      label = 55;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    $call157 = _toklen($p) | 0;
    $cmp158 = ($call157 | 0) == 0;
    if ($cmp158) {
      label = 49;
      break;
    } else {
      label = 54;
      break;
    }
   case 49:
    $lineno164 = $p + 32 | 0;
    $column166 = $p + 36 | 0;
    $c_0 = $call12187;
    label = 50;
    break;
   case 50:
    $cmp161 = ($c_0 | 0) == 10;
    if ($cmp161) {
      label = 51;
      break;
    } else {
      label = 52;
      break;
    }
   case 51:
    $36 = HEAP32[$lineno164 >> 2] | 0;
    $inc165 = $36 + 1 | 0;
    HEAP32[$lineno164 >> 2] = $inc165;
    HEAP32[$column166 >> 2] = 0;
    label = 52;
    break;
   case 52:
    $call168 = _nextc($p) | 0;
    $conv170 = $call168 & 255;
    $call171 = _isspace($conv170 | 0) | 0;
    $tobool172 = ($call171 | 0) == 0;
    if ($tobool172) {
      label = 53;
      break;
    } else {
      $c_0 = $call168;
      label = 50;
      break;
    }
   case 53:
    _pushback($p, $call168);
    $retval_0 = 366;
    label = 77;
    break;
   case 54:
    _pushback($p, $call12187);
    _tokfix($p);
    $call174 = _tok($p) | 0;
    $call175 = _toklen($p) | 0;
    $call176 = _new_str($p, $call174, $call175) | 0;
    $ylval177 = $p + 1124 | 0;
    $37 = HEAP32[$ylval177 >> 2] | 0;
    $nd178 = $37;
    HEAP32[$nd178 >> 2] = $call176;
    $retval_0 = 320;
    label = 77;
    break;
   case 55:
    _tokadd($p, $call12187);
    $call12184 = _nextc($p) | 0;
    $cmp185 = ($call12184 | 0) == ($10 | 0);
    $cmp13 = ($nest_level_1 | 0) == 0;
    $or_cond147186 = $cmp185 & $cmp13;
    if ($or_cond147186) {
      label = 56;
      break;
    } else {
      $nest_level_0_ph204 = $nest_level_1;
      $call12184205 = $call12184;
      $cmp185206 = $cmp185;
      $cmp13207 = $cmp13;
      label = 6;
      break;
    }
   case 56:
    _tokfix($p);
    $lstate181 = $p + 40 | 0;
    HEAP32[$lstate181 >> 2] = 1;
    _end_strterm($p);
    $and182 = $2 & 128;
    $tobool183 = ($and182 | 0) == 0;
    if ($tobool183) {
      label = 58;
      break;
    } else {
      label = 57;
      break;
    }
   case 57:
    $call185 = _tok($p) | 0;
    $call186 = _toklen($p) | 0;
    $call187 = _new_xstr($p, $call185, $call186) | 0;
    $ylval188 = $p + 1124 | 0;
    $38 = HEAP32[$ylval188 >> 2] | 0;
    $nd189 = $38;
    HEAP32[$nd189 >> 2] = $call187;
    $retval_0 = 316;
    label = 77;
    break;
   case 58:
    $and191 = $2 & 4;
    $tobool192 = ($and191 | 0) == 0;
    $call251 = _tok($p) | 0;
    $call252 = _toklen($p) | 0;
    if ($tobool192) {
      label = 76;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    $call198 = _parser_strndup($p, $call251, $call252) | 0;
    HEAP32[$flag >> 2] = 0;
    $call199 = _newtok($p) | 0;
    $call201153192 = _nextc($p) | 0;
    $conv203154193 = $call201153192 & 255;
    $call204155194 = _isalpha($conv203154193 | 0) | 0;
    $tobool205156195 = ($call204155194 | 0) == 0;
    if ($tobool205156195) {
      $call201_lcssa = $call201153192;
      $f_0_ph190 = 0;
      label = 67;
      break;
    } else {
      $f_0_ph196 = 0;
      $call201153197 = $call201153192;
      label = 60;
      break;
    }
   case 60:
    $call201157 = $call201153197;
    label = 61;
    break;
   case 61:
    if (($call201157 | 0) == 105) {
      label = 62;
      break;
    } else if (($call201157 | 0) == 120) {
      label = 63;
      break;
    } else if (($call201157 | 0) == 109) {
      label = 64;
      break;
    } else {
      label = 66;
      break;
    }
   case 62:
    $or = $f_0_ph196 | 1;
    $f_0_ph_be = $or;
    label = 65;
    break;
   case 63:
    $or209 = $f_0_ph196 | 2;
    $f_0_ph_be = $or209;
    label = 65;
    break;
   case 64:
    $or211 = $f_0_ph196 | 4;
    $f_0_ph_be = $or211;
    label = 65;
    break;
   case 65:
    $call201153 = _nextc($p) | 0;
    $conv203154 = $call201153 & 255;
    $call204155 = _isalpha($conv203154 | 0) | 0;
    $tobool205156 = ($call204155 | 0) == 0;
    if ($tobool205156) {
      $call201_lcssa = $call201153;
      $f_0_ph190 = $f_0_ph_be;
      label = 67;
      break;
    } else {
      $f_0_ph196 = $f_0_ph_be;
      $call201153197 = $call201153;
      label = 60;
      break;
    }
   case 66:
    _tokadd($p, $call201157);
    $call201 = _nextc($p) | 0;
    $conv203 = $call201 & 255;
    $call204 = _isalpha($conv203 | 0) | 0;
    $tobool205 = ($call204 | 0) == 0;
    if ($tobool205) {
      $call201_lcssa = $call201;
      $f_0_ph190 = $f_0_ph196;
      label = 67;
      break;
    } else {
      $call201157 = $call201;
      label = 61;
      break;
    }
   case 67:
    _pushback($p, $call201_lcssa);
    $call215 = _toklen($p) | 0;
    $tobool216 = ($call215 | 0) == 0;
    if ($tobool216) {
      label = 69;
      break;
    } else {
      label = 68;
      break;
    }
   case 68:
    _tokfix($p);
    $arraydecay218 = $msg | 0;
    $call219 = _toklen($p) | 0;
    $cmp220 = ($call219 | 0) > 1;
    $cond222 = $cmp220 ? 104904 : 98656;
    $call224 = _snprintf($arraydecay218 | 0, 128, 104912, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $cond222, HEAP32[tempInt + 4 >> 2] = $call251, tempInt) | 0) | 0;
    _yyerror($p, $arraydecay218);
    label = 69;
    break;
   case 69:
    $and227 = $f_0_ph190 & 1;
    $tobool228 = ($and227 | 0) == 0;
    if ($tobool228) {
      label = 71;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    $arraydecay230 = $flag;
    $strlen145 = _strlen($arraydecay230 | 0) | 0;
    $endptr146 = $arraydecay230 + $strlen145 | 0;
    $39 = $endptr146;
    tempBigInt = 105;
    HEAP8[$39] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$39 + 1 | 0] = tempBigInt & 255;
    label = 71;
    break;
   case 71:
    $and233 = $f_0_ph190 & 2;
    $tobool234 = ($and233 | 0) == 0;
    if ($tobool234) {
      label = 73;
      break;
    } else {
      label = 72;
      break;
    }
   case 72:
    $arraydecay236 = $flag;
    $strlen143 = _strlen($arraydecay236 | 0) | 0;
    $endptr144 = $arraydecay236 + $strlen143 | 0;
    $40 = $endptr144;
    tempBigInt = 120;
    HEAP8[$40] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$40 + 1 | 0] = tempBigInt & 255;
    label = 73;
    break;
   case 73:
    $and239 = $f_0_ph190 & 4;
    $tobool240 = ($and239 | 0) == 0;
    if ($tobool240) {
      label = 75;
      break;
    } else {
      label = 74;
      break;
    }
   case 74:
    $arraydecay242 = $flag;
    $strlen = _strlen($arraydecay242 | 0) | 0;
    $endptr = $arraydecay242 + $strlen | 0;
    $41 = $endptr;
    tempBigInt = 109;
    HEAP8[$41] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$41 + 1 | 0] = tempBigInt & 255;
    label = 75;
    break;
   case 75:
    $arraydecay245 = $flag;
    $call246 = _parser_strdup($p, $arraydecay245) | 0;
    $call247 = _new_regx($p, $call198, $call246) | 0;
    $ylval248 = $p + 1124 | 0;
    $42 = HEAP32[$ylval248 >> 2] | 0;
    $nd249 = $42;
    HEAP32[$nd249 >> 2] = $call247;
    $retval_0 = 317;
    label = 77;
    break;
   case 76:
    $call253 = _new_str($p, $call251, $call252) | 0;
    $ylval254 = $p + 1124 | 0;
    $43 = HEAP32[$ylval254 >> 2] | 0;
    $nd255 = $43;
    HEAP32[$nd255 >> 2] = $call253;
    $retval_0 = 318;
    label = 77;
    break;
   case 77:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _nextc($p) {
  $p = $p | 0;
  var $pb = 0, $0 = 0, $tobool = 0, $car = 0, $1 = 0, $2 = 0, $cdr = 0, $3 = 0, $f = 0, $4 = 0, $tobool5 = 0, $call = 0, $tobool8 = 0, $5 = 0, $call11 = 0, $cmp = 0, $s = 0, $6 = 0, $tobool15 = 0, $send = 0, $7 = 0, $cmp17 = 0, $incdec_ptr = 0, $8 = 0, $conv = 0, $c_0 = 0, $column = 0, $9 = 0, $inc = 0, $cxt = 0, $10 = 0, $tobool24 = 0, $partial_hook = 0, $11 = 0, $call30 = 0, $cmp31 = 0, $call36 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $pb = $p + 80 | 0;
    $0 = HEAP32[$pb >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $car = $0 | 0;
    $1 = HEAP32[$car >> 2] | 0;
    $2 = $1;
    $cdr = $0 + 4 | 0;
    $3 = HEAP32[$cdr >> 2] | 0;
    HEAP32[$pb >> 2] = $3;
    _cons_free_gen($p, $0);
    $c_0 = $2;
    label = 10;
    break;
   case 4:
    $f = $p + 20 | 0;
    $4 = HEAP32[$f >> 2] | 0;
    $tobool5 = ($4 | 0) == 0;
    if ($tobool5) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $call = _feof($4 | 0) | 0;
    $tobool8 = ($call | 0) == 0;
    if ($tobool8) {
      label = 6;
      break;
    } else {
      label = 11;
      break;
    }
   case 6:
    $5 = HEAP32[$f >> 2] | 0;
    $call11 = _fgetc($5 | 0) | 0;
    $cmp = ($call11 | 0) == -1;
    if ($cmp) {
      label = 11;
      break;
    } else {
      $c_0 = $call11;
      label = 10;
      break;
    }
   case 7:
    $s = $p + 12 | 0;
    $6 = HEAP32[$s >> 2] | 0;
    $tobool15 = ($6 | 0) == 0;
    if ($tobool15) {
      label = 11;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $send = $p + 16 | 0;
    $7 = HEAP32[$send >> 2] | 0;
    $cmp17 = $6 >>> 0 < $7 >>> 0;
    if ($cmp17) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    $incdec_ptr = $6 + 1 | 0;
    HEAP32[$s >> 2] = $incdec_ptr;
    $8 = HEAP8[$6] | 0;
    $conv = $8 & 255;
    $c_0 = $conv;
    label = 10;
    break;
   case 10:
    $column = $p + 36 | 0;
    $9 = HEAP32[$column >> 2] | 0;
    $inc = $9 + 1 | 0;
    HEAP32[$column >> 2] = $inc;
    $retval_0 = $c_0;
    label = 14;
    break;
   case 11:
    $cxt = $p + 24 | 0;
    $10 = HEAP32[$cxt >> 2] | 0;
    $tobool24 = ($10 | 0) == 0;
    if ($tobool24) {
      $retval_0 = -1;
      label = 14;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $partial_hook = $10 + 16 | 0;
    $11 = HEAP32[$partial_hook >> 2] | 0;
    $call30 = FUNCTION_TABLE_ii[$11 & 1023]($p) | 0;
    $cmp31 = ($call30 | 0) < 0;
    if ($cmp31) {
      $retval_0 = -1;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    HEAP32[$cxt >> 2] = 0;
    $call36 = _nextc($p) | 0;
    HEAP32[$cxt >> 2] = $10;
    return $call36 | 0;
   case 14:
    return $retval_0 | 0;
  }
  return 0;
}
function _skip($p) {
  $p = $p | 0;
  var $call = 0, $cmp = 0, $cmp1 = 0, $or_cond = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    label = 3;
    break;
   case 3:
    $call = _nextc($p) | 0;
    $cmp = ($call | 0) < 0;
    $cmp1 = ($call | 0) == 10;
    $or_cond = $cmp | $cmp1;
    if ($or_cond) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _new_strterm($p, $type, $term, $paren) {
  $p = $p | 0;
  $type = $type | 0;
  $term = $term | 0;
  $paren = $paren | 0;
  return _cons_gen($p, $type, _cons_gen($p, 0, _cons_gen($p, $paren, $term) | 0) | 0) | 0;
}
function _pushback($p, $c) {
  $p = $p | 0;
  $c = $c | 0;
  var $cmp = 0, $column = 0, $0 = 0, $dec = 0, $1 = 0, $pb = 0, $2 = 0, $call = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = ($c | 0) < 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $column = $p + 36 | 0;
    $0 = HEAP32[$column >> 2] | 0;
    $dec = $0 - 1 | 0;
    HEAP32[$column >> 2] = $dec;
    $1 = $c;
    $pb = $p + 80 | 0;
    $2 = HEAP32[$pb >> 2] | 0;
    $call = _cons_gen($p, $1, $2) | 0;
    HEAP32[$pb >> 2] = $call;
    label = 4;
    break;
   case 4:
    return;
  }
}
function _yywarning($p, $s) {
  $p = $p | 0;
  $s = $s | 0;
  _yywarn($p, $s);
  return;
}
function _peeks($p, $s) {
  $p = $p | 0;
  $s = $s | 0;
  var $call = 0, $f = 0, $0 = 0, $tobool = 0, $s_addr_0 = 0, $n_0 = 0, $1 = 0, $tobool1 = 0, $incdec_ptr = 0, $conv = 0, $inc = 0, $call2 = 0, $tobool3 = 0, $s5 = 0, $2 = 0, $tobool6 = 0, $add_ptr = 0, $send = 0, $3 = 0, $cmp = 0, $call11 = 0, $cmp12 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _strlen($s | 0) | 0;
    $f = $p + 20 | 0;
    $0 = HEAP32[$f >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      $n_0 = 0;
      $s_addr_0 = $s;
      label = 3;
      break;
    }
   case 3:
    $1 = HEAP8[$s_addr_0] | 0;
    $tobool1 = $1 << 24 >> 24 == 0;
    if ($tobool1) {
      $retval_0 = 1;
      label = 9;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $incdec_ptr = $s_addr_0 + 1 | 0;
    $conv = $1 << 24 >> 24;
    $inc = $n_0 + 1 | 0;
    $call2 = _peek_n($p, $conv, $n_0) | 0;
    $tobool3 = ($call2 | 0) == 0;
    if ($tobool3) {
      $retval_0 = 0;
      label = 9;
      break;
    } else {
      $n_0 = $inc;
      $s_addr_0 = $incdec_ptr;
      label = 3;
      break;
    }
   case 5:
    $s5 = $p + 12 | 0;
    $2 = HEAP32[$s5 >> 2] | 0;
    $tobool6 = ($2 | 0) == 0;
    if ($tobool6) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $add_ptr = $2 + $call | 0;
    $send = $p + 16 | 0;
    $3 = HEAP32[$send >> 2] | 0;
    $cmp = $add_ptr >>> 0 < $3 >>> 0;
    if ($cmp) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $call11 = _memcmp($2 | 0, $s | 0, $call | 0) | 0;
    $cmp12 = ($call11 | 0) == 0;
    if ($cmp12) {
      $retval_0 = 1;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $retval_0 = 0;
    label = 9;
    break;
   case 9:
    return $retval_0 | 0;
  }
  return 0;
}
function _skips($p) {
  $p = $p | 0;
  var $call3 = 0, $cmp4 = 0, $call5 = 0, $cmp2 = 0, $call = 0, $cmp = 0, $call6 = 0, $tobool = 0, $call10 = 0, $call10_1 = 0, $call10_2 = 0, $call10_3 = 0, $call10_4 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call3 = _nextc($p) | 0;
    $cmp4 = ($call3 | 0) < 0;
    if ($cmp4) {
      label = 7;
      break;
    } else {
      $call5 = $call3;
      label = 3;
      break;
    }
   case 3:
    $cmp2 = ($call5 | 0) == 10;
    if ($cmp2) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call = _nextc($p) | 0;
    $cmp = ($call | 0) < 0;
    if ($cmp) {
      label = 7;
      break;
    } else {
      $call5 = $call;
      label = 3;
      break;
    }
   case 5:
    $call6 = _peeks($p, 107921) | 0;
    $tobool = ($call6 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $call10 = _nextc($p) | 0;
    $call10_1 = _nextc($p) | 0;
    $call10_2 = _nextc($p) | 0;
    $call10_3 = _nextc($p) | 0;
    $call10_4 = _nextc($p) | 0;
    label = 7;
    break;
   case 7:
    return;
  }
}
function _heredoc_identifier($p) {
  $p = $p | 0;
  var $call = 0, $conv1 = 0, $call2 = 0, $tobool = 0, $cmp = 0, $or_cond60 = 0, $cmp4 = 0, $call7 = 0, $indent_0 = 0, $c_0 = 0, $quote_0 = 0, $call19 = 0, $call2064 = 0, $cmp2165 = 0, $cmp2366 = 0, $or_cond67 = 0, $call2068 = 0, $cmp25 = 0, $call20 = 0, $cmp21 = 0, $cmp23 = 0, $or_cond = 0, $call20_lcssa = 0, $cmp29 = 0, $call33 = 0, $notlhs = 0, $notrhs = 0, $or_cond1_not = 0, $cmp39 = 0, $or_cond2 = 0, $tobool42 = 0, $call46 = 0, $c_2 = 0, $call47 = 0, $cmp48 = 0, $call51 = 0, $tobool52 = 0, $cmp54 = 0, $or_cond3 = 0, $lnot = 0, $or_cond61 = 0, $quote_1 = 0, $call60 = 0, $cdr = 0, $0 = 0, $call61 = 0, $call62 = 0, $call63 = 0, $term64 = 0, $1 = 0, $call65 = 0, $2 = 0, $call65_c = 0, $tobool66 = 0, $type_0 = 0, $type69 = 0, $conv70 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $heredocs = 0, $9 = 0, $call71 = 0, $call72 = 0, $parsing_heredoc = 0, $10 = 0, $cmp74 = 0, $n_0 = 0, $cdr79 = 0, $11 = 0, $tobool80 = 0, $12 = 0, $13 = 0, $14 = 0, $lstate = 0, $ylval = 0, $15 = 0, $nd = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _nextc($p) | 0;
    $conv1 = $call & 255;
    $call2 = _isspace($conv1 | 0) | 0;
    $tobool = ($call2 | 0) != 0;
    $cmp = ($call | 0) == 61;
    $or_cond60 = $tobool | $cmp;
    if ($or_cond60) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _pushback($p, $call);
    $retval_0 = 0;
    label = 24;
    break;
   case 4:
    $cmp4 = ($call | 0) == 45;
    if ($cmp4) {
      label = 5;
      break;
    } else {
      $c_0 = $call;
      $indent_0 = 0;
      label = 6;
      break;
    }
   case 5:
    $call7 = _nextc($p) | 0;
    $c_0 = $call7;
    $indent_0 = 1;
    label = 6;
    break;
   case 6:
    if (($c_0 | 0) == 39) {
      label = 7;
      break;
    } else if (($c_0 | 0) == 34) {
      $quote_0 = 0;
      label = 8;
      break;
    } else {
      label = 13;
      break;
    }
   case 7:
    $quote_0 = 1;
    label = 8;
    break;
   case 8:
    $call19 = _newtok($p) | 0;
    $call2064 = _nextc($p) | 0;
    $cmp2165 = ($call2064 | 0) == -1;
    $cmp2366 = ($call2064 | 0) == ($c_0 | 0);
    $or_cond67 = $cmp2165 | $cmp2366;
    if ($or_cond67) {
      $call20_lcssa = $call2064;
      label = 11;
      break;
    } else {
      $call2068 = $call2064;
      label = 9;
      break;
    }
   case 9:
    $cmp25 = ($call2068 | 0) == 10;
    if ($cmp25) {
      label = 12;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _tokadd($p, $call2068);
    $call20 = _nextc($p) | 0;
    $cmp21 = ($call20 | 0) == -1;
    $cmp23 = ($call20 | 0) == ($c_0 | 0);
    $or_cond = $cmp21 | $cmp23;
    if ($or_cond) {
      $call20_lcssa = $call20;
      label = 11;
      break;
    } else {
      $call2068 = $call20;
      label = 9;
      break;
    }
   case 11:
    $cmp29 = ($call20_lcssa | 0) == -1;
    if ($cmp29) {
      label = 12;
      break;
    } else {
      $quote_1 = $quote_0;
      label = 20;
      break;
    }
   case 12:
    _yyerror($p, 105028);
    $retval_0 = 0;
    label = 24;
    break;
   case 13:
    $call33 = _isalnum($c_0 | 0) | 0;
    $notlhs = ($call33 | 0) == 0;
    $notrhs = ($c_0 | 0) != 95;
    $or_cond1_not = $notrhs & $notlhs;
    $cmp39 = $c_0 >>> 0 < 128;
    $or_cond2 = $or_cond1_not & $cmp39;
    if ($or_cond2) {
      label = 14;
      break;
    } else {
      label = 16;
      break;
    }
   case 14:
    _pushback($p, $c_0);
    $tobool42 = ($indent_0 | 0) == 0;
    if ($tobool42) {
      $retval_0 = 0;
      label = 24;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    _pushback($p, 45);
    $retval_0 = 0;
    label = 24;
    break;
   case 16:
    $call46 = _newtok($p) | 0;
    $c_2 = $c_0;
    label = 17;
    break;
   case 17:
    _tokadd($p, $c_2);
    $call47 = _nextc($p) | 0;
    $cmp48 = ($call47 | 0) == -1;
    if ($cmp48) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $call51 = _isalnum($call47 | 0) | 0;
    $tobool52 = ($call51 | 0) != 0;
    $cmp54 = ($call47 | 0) == 95;
    $or_cond3 = $tobool52 | $cmp54;
    $lnot = $call47 >>> 0 > 127;
    $or_cond61 = $or_cond3 | $lnot;
    if ($or_cond61) {
      $c_2 = $call47;
      label = 17;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    _pushback($p, $call47);
    $quote_1 = 0;
    label = 20;
    break;
   case 20:
    _tokfix($p);
    $call60 = _new_heredoc($p) | 0;
    $cdr = $call60 + 4 | 0;
    $0 = HEAP32[$cdr >> 2] | 0;
    $call61 = _tok($p) | 0;
    $call62 = _toklen($p) | 0;
    $call63 = _parser_strndup($p, $call61, $call62) | 0;
    $term64 = $0 + 8 | 0;
    $1 = $term64;
    HEAP32[$1 >> 2] = $call63;
    $call65 = _toklen($p) | 0;
    $2 = $0 + 12 | 0;
    $call65_c = $call65;
    HEAP32[$2 >> 2] = $call65_c;
    $tobool66 = ($quote_1 | 0) == 0;
    $type_0 = $tobool66 ? 67 : 65;
    $type69 = $0 + 4 | 0;
    HEAP32[$type69 >> 2] = $type_0;
    $conv70 = $indent_0 & 255;
    $3 = $0;
    $4 = HEAP8[$3] | 0;
    $5 = $4 & -4;
    $6 = $conv70 | $5;
    $7 = $6 | 2;
    HEAP8[$3] = $7;
    $8 = $0 + 16 | 0;
    HEAP32[$8 >> 2] = 0;
    $heredocs = $p + 1112 | 0;
    $9 = HEAP32[$heredocs >> 2] | 0;
    $call71 = _list1_gen($p, $call60) | 0;
    $call72 = _append_gen($9, $call71) | 0;
    HEAP32[$heredocs >> 2] = $call72;
    $parsing_heredoc = $p + 1116 | 0;
    $10 = HEAP32[$parsing_heredoc >> 2] | 0;
    $cmp74 = ($10 | 0) == 0;
    if ($cmp74) {
      $n_0 = $call72;
      label = 21;
      break;
    } else {
      label = 23;
      break;
    }
   case 21:
    $cdr79 = $n_0 + 4 | 0;
    $11 = HEAP32[$cdr79 >> 2] | 0;
    $tobool80 = ($11 | 0) == 0;
    if ($tobool80) {
      label = 22;
      break;
    } else {
      $n_0 = $11;
      label = 21;
      break;
    }
   case 22:
    HEAP32[$parsing_heredoc >> 2] = $n_0;
    label = 23;
    break;
   case 23:
    $12 = $p + 1120 | 0;
    $13 = HEAP8[$12] | 0;
    $14 = $13 | 1;
    HEAP8[$12] = $14;
    $lstate = $p + 40 | 0;
    HEAP32[$lstate >> 2] = 1;
    $ylval = $p + 1124 | 0;
    $15 = HEAP32[$ylval >> 2] | 0;
    $nd = $15;
    HEAP32[$nd >> 2] = $call60;
    $retval_0 = 364;
    label = 24;
    break;
   case 24:
    return $retval_0 | 0;
  }
  return 0;
}
function _tokadd($p, $c) {
  $p = $p | 0;
  $c = $c | 0;
  var $bidx = 0, $0 = 0, $cmp = 0, $conv = 0, $inc = 0, $arrayidx = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $bidx = $p + 1108 | 0;
    $0 = HEAP32[$bidx >> 2] | 0;
    $cmp = ($0 | 0) < 1024;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $conv = $c & 255;
    $inc = $0 + 1 | 0;
    HEAP32[$bidx >> 2] = $inc;
    $arrayidx = $0 + ($p + 84) | 0;
    HEAP8[$arrayidx] = $conv;
    label = 4;
    break;
   case 4:
    return;
  }
}
function _tok($p) {
  $p = $p | 0;
  return $p + 84 | 0;
}
function _toklen($p) {
  $p = $p | 0;
  return HEAP32[$p + 1108 >> 2] | 0;
}
function _toklast($p) {
  $p = $p | 0;
  return HEAP8[((HEAP32[$p + 1108 >> 2] | 0) - 1 | 0) + ($p + 84) | 0] | 0 | 0;
}
function _hash($str, $len) {
  $str = $str | 0;
  $len = $len | 0;
  var $_off = 0, $switch = 0, $arrayidx = 0, $0 = 0, $idxprom = 0, $arrayidx1 = 0, $1 = 0, $conv = 0, $add = 0, $hval_0 = 0, $2 = 0, $idxprom3 = 0, $arrayidx4 = 0, $3 = 0, $conv5 = 0, $add6 = 0, $arrayidx7 = 0, $4 = 0, $idxprom8 = 0, $arrayidx9 = 0, $5 = 0, $conv10 = 0, $add11 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $_off = $len - 1 | 0;
    $switch = $_off >>> 0 < 2;
    if ($switch) {
      $hval_0 = $len;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $arrayidx = $str + 2 | 0;
    $0 = HEAP8[$arrayidx] | 0;
    $idxprom = $0 & 255;
    $arrayidx1 = $idxprom + 79360 | 0;
    $1 = HEAP8[$arrayidx1] | 0;
    $conv = $1 & 255;
    $add = $conv + $len | 0;
    $hval_0 = $add;
    label = 4;
    break;
   case 4:
    $2 = HEAP8[$str] | 0;
    $idxprom3 = $2 & 255;
    $arrayidx4 = $idxprom3 + 79360 | 0;
    $3 = HEAP8[$arrayidx4] | 0;
    $conv5 = $3 & 255;
    $add6 = $conv5 + $hval_0 | 0;
    $arrayidx7 = $str + $_off | 0;
    $4 = HEAP8[$arrayidx7] | 0;
    $idxprom8 = $4 & 255;
    $arrayidx9 = $idxprom8 + 79360 | 0;
    $5 = HEAP8[$arrayidx9] | 0;
    $conv10 = $5 & 255;
    $add11 = $add6 + $conv10 | 0;
    return $add11 | 0;
  }
  return 0;
}
function _scan_oct($start, $len, $retlen) {
  $start = $start | 0;
  $len = $len | 0;
  $retlen = $retlen | 0;
  var $tobool9 = 0, $dec12_in = 0, $retval1_011 = 0, $s_010 = 0, $dec12 = 0, $0 = 0, $_off = 0, $1 = 0, $shl = 0, $incdec_ptr = 0, $sub = 0, $or = 0, $tobool = 0, $retval1_0_lcssa = 0, $s_0_lcssa = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $sub_ptr_div = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool9 = ($len | 0) == 0;
    if ($tobool9) {
      $s_0_lcssa = $start;
      $retval1_0_lcssa = 0;
      label = 5;
      break;
    } else {
      $s_010 = $start;
      $retval1_011 = 0;
      $dec12_in = $len;
      label = 3;
      break;
    }
   case 3:
    $dec12 = $dec12_in - 1 | 0;
    $0 = HEAP32[$s_010 >> 2] | 0;
    $_off = $0 - 48 | 0;
    $1 = $_off >>> 0 < 8;
    if ($1) {
      label = 4;
      break;
    } else {
      $s_0_lcssa = $s_010;
      $retval1_0_lcssa = $retval1_011;
      label = 5;
      break;
    }
   case 4:
    $shl = $retval1_011 << 3;
    $incdec_ptr = $s_010 + 4 | 0;
    $sub = $0 - 48 | 0;
    $or = $sub | $shl;
    $tobool = ($dec12 | 0) == 0;
    if ($tobool) {
      $s_0_lcssa = $incdec_ptr;
      $retval1_0_lcssa = $or;
      label = 5;
      break;
    } else {
      $s_010 = $incdec_ptr;
      $retval1_011 = $or;
      $dec12_in = $dec12;
      label = 3;
      break;
    }
   case 5:
    $sub_ptr_lhs_cast = $s_0_lcssa;
    $sub_ptr_rhs_cast = $start;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $sub_ptr_div = $sub_ptr_sub >> 2;
    HEAP32[$retlen >> 2] = $sub_ptr_div;
    return $retval1_0_lcssa | 0;
  }
  return 0;
}
function _cons_free_gen($p, $cons) {
  $p = $p | 0;
  $cons = $cons | 0;
  var $cells = 0;
  $cells = $p + 8 | 0;
  HEAP32[$cons + 4 >> 2] = HEAP32[$cells >> 2] | 0;
  HEAP32[$cells >> 2] = $cons;
  return;
}
function _yystpcpy($yydest, $yysrc) {
  $yydest = $yydest | 0;
  $yysrc = $yysrc | 0;
  var $yyd_0 = 0, $yys_0 = 0, $incdec_ptr = 0, $0 = 0, $incdec_ptr1 = 0, $cmp = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $yys_0 = $yysrc;
    $yyd_0 = $yydest;
    label = 3;
    break;
   case 3:
    $incdec_ptr = $yys_0 + 1 | 0;
    $0 = HEAP8[$yys_0] | 0;
    $incdec_ptr1 = $yyd_0 + 1 | 0;
    HEAP8[$yyd_0] = $0;
    $cmp = $0 << 24 >> 24 == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      $yys_0 = $incdec_ptr;
      $yyd_0 = $incdec_ptr1;
      label = 3;
      break;
    }
   case 4:
    return $yyd_0 | 0;
  }
  return 0;
}
function _yystrlen($yystr) {
  $yystr = $yystr | 0;
  var $yylen_0 = 0, $arrayidx = 0, $0 = 0, $tobool = 0, $inc = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $yylen_0 = 0;
    label = 3;
    break;
   case 3:
    $arrayidx = $yystr + $yylen_0 | 0;
    $0 = HEAP8[$arrayidx] | 0;
    $tobool = $0 << 24 >> 24 == 0;
    $inc = $yylen_0 + 1 | 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      $yylen_0 = $inc;
      label = 3;
      break;
    }
   case 4:
    return $yylen_0 | 0;
  }
  return 0;
}
function _local_var_p($p, $sym) {
  $p = $p | 0;
  $sym = $sym | 0;
  var $locals = 0, $l_06 = 0, $tobool7 = 0, $conv6 = 0, $l_08 = 0, $car = 0, $n_0_in = 0, $n_0 = 0, $tobool2 = 0, $car4 = 0, $0 = 0, $1 = 0, $sext = 0, $conv5 = 0, $cmp = 0, $cdr = 0, $cdr8 = 0, $l_0 = 0, $tobool = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $locals = $p + 76 | 0;
    $l_06 = HEAP32[$locals >> 2] | 0;
    $tobool7 = ($l_06 | 0) == 0;
    if ($tobool7) {
      $retval_0 = 0;
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $conv6 = $sym << 16 >> 16;
    $l_08 = $l_06;
    label = 4;
    break;
   case 4:
    $car = $l_08 | 0;
    $n_0_in = $car;
    label = 5;
    break;
   case 5:
    $n_0 = HEAP32[$n_0_in >> 2] | 0;
    $tobool2 = ($n_0 | 0) == 0;
    if ($tobool2) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $car4 = $n_0 | 0;
    $0 = HEAP32[$car4 >> 2] | 0;
    $1 = $0;
    $sext = $1 << 16;
    $conv5 = $sext >> 16;
    $cmp = ($conv5 | 0) == ($conv6 | 0);
    $cdr = $n_0 + 4 | 0;
    if ($cmp) {
      $retval_0 = 1;
      label = 8;
      break;
    } else {
      $n_0_in = $cdr;
      label = 5;
      break;
    }
   case 7:
    $cdr8 = $l_08 + 4 | 0;
    $l_0 = HEAP32[$cdr8 >> 2] | 0;
    $tobool = ($l_0 | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 8;
      break;
    } else {
      $l_08 = $l_0;
      label = 4;
      break;
    }
   case 8:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_obj_value625($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _read_escape($p) {
  $p = $p | 0;
  var $buf = 0, $i = 0, $buf22 = 0, $i23 = 0, $call = 0, $arrayidx = 0, $storemerge27 = 0, $cmp = 0, $call9 = 0, $arrayidx10 = 0, $cmp12 = 0, $_off = 0, $0 = 0, $inc = 0, $1 = 0, $call20 = 0, $storemerge = 0, $cmp25 = 0, $call27 = 0, $arrayidx28 = 0, $cmp30 = 0, $conv34 = 0, $call35 = 0, $tobool = 0, $inc40 = 0, $arrayidx37 = 0, $2 = 0, $arraydecay42 = 0, $3 = 0, $call43 = 0, $4 = 0, $cmp44 = 0, $call51 = 0, $cmp52 = 0, $call56 = 0, $call60 = 0, $or = 0, $and = 0, $or65 = 0, $call67 = 0, $cmp68 = 0, $call73 = 0, $call77 = 0, $c_0 = 0, $and89 = 0, $retval_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $buf = __stackBase__ | 0;
    $i = __stackBase__ + 12 | 0;
    $buf22 = __stackBase__ + 16 | 0;
    $i23 = __stackBase__ + 24 | 0;
    $call = _nextc($p) | 0;
    if (($call | 0) == 110) {
      label = 3;
      break;
    } else if (($call | 0) == 116) {
      label = 4;
      break;
    } else if (($call | 0) == 114) {
      label = 5;
      break;
    } else if (($call | 0) == 102) {
      label = 6;
      break;
    } else if (($call | 0) == 118) {
      label = 7;
      break;
    } else if (($call | 0) == 97) {
      label = 8;
      break;
    } else if (($call | 0) == 101) {
      label = 9;
      break;
    } else if (($call | 0) == 48 | ($call | 0) == 49 | ($call | 0) == 50 | ($call | 0) == 51 | ($call | 0) == 52 | ($call | 0) == 53 | ($call | 0) == 54 | ($call | 0) == 55) {
      label = 10;
      break;
    } else if (($call | 0) == 120) {
      $storemerge = 0;
      label = 17;
      break;
    } else if (($call | 0) == 98) {
      label = 24;
      break;
    } else if (($call | 0) == 115) {
      label = 25;
      break;
    } else if (($call | 0) == 77) {
      label = 26;
      break;
    } else if (($call | 0) == 67) {
      label = 31;
      break;
    } else if (($call | 0) == 99) {
      label = 33;
      break;
    } else if (($call | 0) == (-1 | 0)) {
      label = 38;
      break;
    } else {
      $retval_0 = $call;
      label = 39;
      break;
    }
   case 3:
    $retval_0 = 10;
    label = 39;
    break;
   case 4:
    $retval_0 = 9;
    label = 39;
    break;
   case 5:
    $retval_0 = 13;
    label = 39;
    break;
   case 6:
    $retval_0 = 12;
    label = 39;
    break;
   case 7:
    $retval_0 = 11;
    label = 39;
    break;
   case 8:
    $retval_0 = 7;
    label = 39;
    break;
   case 9:
    $retval_0 = 27;
    label = 39;
    break;
   case 10:
    $arrayidx = $buf | 0;
    HEAP32[$arrayidx >> 2] = $call;
    $storemerge27 = 1;
    label = 11;
    break;
   case 11:
    $cmp = ($storemerge27 | 0) < 3;
    if ($cmp) {
      label = 12;
      break;
    } else {
      label = 15;
      break;
    }
   case 12:
    $call9 = _nextc($p) | 0;
    $arrayidx10 = $buf + ($storemerge27 << 2) | 0;
    HEAP32[$arrayidx10 >> 2] = $call9;
    $cmp12 = ($call9 | 0) == -1;
    if ($cmp12) {
      label = 36;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $_off = $call9 - 48 | 0;
    $0 = $_off >>> 0 > 7;
    $inc = $storemerge27 + 1 | 0;
    if ($0) {
      label = 14;
      break;
    } else {
      $storemerge27 = $inc;
      label = 11;
      break;
    }
   case 14:
    HEAP32[$i >> 2] = $storemerge27;
    _pushback($p, $call9);
    label = 16;
    break;
   case 15:
    HEAP32[$i >> 2] = $storemerge27;
    label = 16;
    break;
   case 16:
    $1 = HEAP32[$i >> 2] | 0;
    $call20 = _scan_oct($arrayidx, $1, $i) | 0;
    $retval_0 = $call20;
    label = 39;
    break;
   case 17:
    $cmp25 = ($storemerge | 0) < 2;
    if ($cmp25) {
      label = 18;
      break;
    } else {
      label = 21;
      break;
    }
   case 18:
    $call27 = _nextc($p) | 0;
    $arrayidx28 = $buf22 + ($storemerge << 2) | 0;
    HEAP32[$arrayidx28 >> 2] = $call27;
    $cmp30 = ($call27 | 0) == -1;
    if ($cmp30) {
      label = 37;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $conv34 = $call27 & 255;
    $call35 = _isxdigit($conv34 | 0) | 0;
    $tobool = ($call35 | 0) == 0;
    $inc40 = $storemerge + 1 | 0;
    if ($tobool) {
      label = 20;
      break;
    } else {
      $storemerge = $inc40;
      label = 17;
      break;
    }
   case 20:
    HEAP32[$i23 >> 2] = $storemerge;
    $arrayidx37 = $buf22 + ($storemerge << 2) | 0;
    $2 = HEAP32[$arrayidx37 >> 2] | 0;
    _pushback($p, $2);
    label = 22;
    break;
   case 21:
    HEAP32[$i23 >> 2] = $storemerge;
    label = 22;
    break;
   case 22:
    $arraydecay42 = $buf22 | 0;
    $3 = HEAP32[$i23 >> 2] | 0;
    $call43 = _scan_hex($arraydecay42, $3, $i23) | 0;
    $4 = HEAP32[$i23 >> 2] | 0;
    $cmp44 = ($4 | 0) == 0;
    if ($cmp44) {
      label = 23;
      break;
    } else {
      $retval_0 = $call43;
      label = 39;
      break;
    }
   case 23:
    _yyerror($p, 105224);
    $retval_0 = 0;
    label = 39;
    break;
   case 24:
    $retval_0 = 8;
    label = 39;
    break;
   case 25:
    $retval_0 = 32;
    label = 39;
    break;
   case 26:
    $call51 = _nextc($p) | 0;
    $cmp52 = ($call51 | 0) == 45;
    if ($cmp52) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    _yyerror($p, 105224);
    _pushback($p, $call51);
    $retval_0 = 0;
    label = 39;
    break;
   case 28:
    $call56 = _nextc($p) | 0;
    if (($call56 | 0) == 92) {
      label = 29;
      break;
    } else if (($call56 | 0) == (-1 | 0)) {
      label = 38;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    $call60 = _read_escape($p) | 0;
    $or = $call60 | 128;
    $retval_0 = $or;
    label = 39;
    break;
   case 30:
    $and = $call56 & 127;
    $or65 = $and | 128;
    $retval_0 = $or65;
    label = 39;
    break;
   case 31:
    $call67 = _nextc($p) | 0;
    $cmp68 = ($call67 | 0) == 45;
    if ($cmp68) {
      label = 33;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    _yyerror($p, 105224);
    _pushback($p, $call67);
    $retval_0 = 0;
    label = 39;
    break;
   case 33:
    $call73 = _nextc($p) | 0;
    if (($call73 | 0) == 92) {
      label = 34;
      break;
    } else if (($call73 | 0) == (-1 | 0)) {
      label = 38;
      break;
    } else if (($call73 | 0) == 63) {
      $retval_0 = 127;
      label = 39;
      break;
    } else {
      $c_0 = $call73;
      label = 35;
      break;
    }
   case 34:
    $call77 = _read_escape($p) | 0;
    $c_0 = $call77;
    label = 35;
    break;
   case 35:
    $and89 = $c_0 & 159;
    $retval_0 = $and89;
    label = 39;
    break;
   case 36:
    HEAP32[$i >> 2] = $storemerge27;
    label = 38;
    break;
   case 37:
    HEAP32[$i23 >> 2] = $storemerge;
    label = 38;
    break;
   case 38:
    _yyerror($p, 105224);
    $retval_0 = 0;
    label = 39;
    break;
   case 39:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _tokfix($p) {
  $p = $p | 0;
  var $bidx = 0, $0 = 0, $cmp = 0, $1 = 0, $arrayidx = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $bidx = $p + 1108 | 0;
    $0 = HEAP32[$bidx >> 2] | 0;
    $cmp = ($0 | 0) > 1023;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _yyerror($p, 105256);
    label = 4;
    break;
   case 4:
    $1 = HEAP32[$bidx >> 2] | 0;
    $arrayidx = $1 + ($p + 84) | 0;
    HEAP8[$arrayidx] = 0;
    return;
  }
}
function _arg_ambiguous($p) {
  $p = $p | 0;
  _yywarning($p, 105296);
  return;
}
function _yyerror_i($p, $fmt, $i) {
  $p = $p | 0;
  $fmt = $fmt | 0;
  $i = $i | 0;
  var $arraydecay = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 256 | 0;
  $arraydecay = __stackBase__ | 0;
  _snprintf($arraydecay | 0, 256, $fmt | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt) | 0);
  _yyerror($p, $arraydecay);
  STACKTOP = __stackBase__;
  return;
}
function _yywarning_s($p, $fmt, $s) {
  $p = $p | 0;
  $fmt = $fmt | 0;
  $s = $s | 0;
  var $arraydecay = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 256 | 0;
  $arraydecay = __stackBase__ | 0;
  _snprintf($arraydecay | 0, 256, $fmt | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $s, tempInt) | 0);
  _yywarning($p, $arraydecay);
  STACKTOP = __stackBase__;
  return;
}
function _new_float($p, $s) {
  $p = $p | 0;
  $s = $s | 0;
  return _cons_gen($p, 51, _parser_strdup($p, $s) | 0) | 0;
}
function _intern_gen($p, $s) {
  $p = $p | 0;
  $s = $s | 0;
  return _mrb_intern249(HEAP32[$p >> 2] | 0, $s) | 0;
}
function _new_back_ref($p, $n) {
  $p = $p | 0;
  $n = $n | 0;
  return _cons_gen($p, 46, $n) | 0;
}
function _new_nth_ref($p, $n) {
  $p = $p | 0;
  $n = $n | 0;
  return _cons_gen($p, 45, $n) | 0;
}
function _peek_n($p, $c, $n) {
  $p = $p | 0;
  $c = $c | 0;
  $n = $n | 0;
  var $n_addr_0 = 0, $list_0 = 0, $call = 0, $cmp = 0, $0 = 0, $call1 = 0, $call2 = 0, $dec = 0, $tobool = 0, $pb = 0, $1 = 0, $tobool3 = 0, $call6 = 0, $call7 = 0, $storemerge = 0, $cmp11 = 0, $_ = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $list_0 = 0;
    $n_addr_0 = $n;
    label = 3;
    break;
   case 3:
    $call = _nextc($p) | 0;
    $cmp = ($call | 0) < 0;
    if ($cmp) {
      $retval_0 = 0;
      label = 8;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $0 = $call;
    $call1 = _list1_gen($p, $0) | 0;
    $call2 = _append_gen($list_0, $call1) | 0;
    $dec = $n_addr_0 - 1 | 0;
    $tobool = ($n_addr_0 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      $list_0 = $call2;
      $n_addr_0 = $dec;
      label = 3;
      break;
    }
   case 5:
    $pb = $p + 80 | 0;
    $1 = HEAP32[$pb >> 2] | 0;
    $tobool3 = ($1 | 0) == 0;
    if ($tobool3) {
      $storemerge = $call2;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $call6 = _list1_gen($p, $call2) | 0;
    $call7 = _append_gen($1, $call6) | 0;
    $storemerge = $call7;
    label = 7;
    break;
   case 7:
    HEAP32[$pb >> 2] = $storemerge;
    $cmp11 = ($call | 0) == ($c | 0);
    $_ = $cmp11 & 1;
    $retval_0 = $_;
    label = 8;
    break;
   case 8:
    return $retval_0 | 0;
  }
  return 0;
}
function _reserved_word($str, $len) {
  $str = $str | 0;
  $len = $len | 0;
  var $len_off = 0, $0 = 0, $call = 0, $1 = 0, $arrayidx = 0, $name = 0, $2 = 0, $3 = 0, $4 = 0, $cmp7 = 0, $add_ptr = 0, $add_ptr10 = 0, $call11 = 0, $tobool = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $len_off = $len - 2 | 0;
    $0 = $len_off >>> 0 < 11;
    if ($0) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $call = _hash($str, $len) | 0;
    $1 = $call >>> 0 < 51;
    if ($1) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $arrayidx = 60176 + ($call << 4) | 0;
    $name = $arrayidx | 0;
    $2 = HEAP32[$name >> 2] | 0;
    $3 = HEAP8[$str] | 0;
    $4 = HEAP8[$2] | 0;
    $cmp7 = $3 << 24 >> 24 == $4 << 24 >> 24;
    if ($cmp7) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $add_ptr = $str + 1 | 0;
    $add_ptr10 = $2 + 1 | 0;
    $call11 = _strcmp($add_ptr | 0, $add_ptr10 | 0) | 0;
    $tobool = ($call11 | 0) == 0;
    if ($tobool) {
      $retval_0 = $arrayidx;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $retval_0 = 0;
    label = 7;
    break;
   case 7:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_intern249($mrb, $cstr) {
  $mrb = $mrb | 0;
  $cstr = $cstr | 0;
  return _mrb_intern_cstr($mrb, $cstr) | 0;
}
function _parser_strdup($p, $s) {
  $p = $p | 0;
  $s = $s | 0;
  return _parser_strndup($p, $s, _strlen($s | 0) | 0) | 0;
}
function _parser_strndup($p, $s, $len) {
  $p = $p | 0;
  $s = $s | 0;
  $len = $len | 0;
  var $call = 0;
  $call = _parser_palloc($p, $len + 1 | 0) | 0;
  _memcpy($call | 0, $s | 0, $len);
  HEAP8[$call + $len | 0] = 0;
  return $call | 0;
}
function _scan_hex($start, $len, $retlen) {
  $start = $start | 0;
  $len = $len | 0;
  $retlen = $retlen | 0;
  var $tobool9 = 0, $dec12_in = 0, $retval1_011 = 0, $s_010 = 0, $dec12 = 0, $0 = 0, $tobool2 = 0, $memchr = 0, $tobool3 = 0, $shl = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_sub = 0, $and = 0, $or = 0, $incdec_ptr = 0, $tobool = 0, $retval1_0_lcssa = 0, $s_0_lcssa = 0, $sub_ptr_lhs_cast4 = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub5 = 0, $sub_ptr_div = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool9 = ($len | 0) == 0;
    if ($tobool9) {
      $s_0_lcssa = $start;
      $retval1_0_lcssa = 0;
      label = 6;
      break;
    } else {
      $s_010 = $start;
      $retval1_011 = 0;
      $dec12_in = $len;
      label = 3;
      break;
    }
   case 3:
    $dec12 = $dec12_in - 1 | 0;
    $0 = HEAP32[$s_010 >> 2] | 0;
    $tobool2 = ($0 | 0) == 0;
    if ($tobool2) {
      $s_0_lcssa = $s_010;
      $retval1_0_lcssa = $retval1_011;
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $memchr = _memchr(60140, $0 | 0, 33) | 0;
    $tobool3 = ($memchr | 0) == 0;
    if ($tobool3) {
      $s_0_lcssa = $s_010;
      $retval1_0_lcssa = $retval1_011;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $shl = $retval1_011 << 4;
    $sub_ptr_lhs_cast = $memchr;
    $sub_ptr_sub = $sub_ptr_lhs_cast - 60140 | 0;
    $and = $sub_ptr_sub & 15;
    $or = $and | $shl;
    $incdec_ptr = $s_010 + 4 | 0;
    $tobool = ($dec12 | 0) == 0;
    if ($tobool) {
      $s_0_lcssa = $incdec_ptr;
      $retval1_0_lcssa = $or;
      label = 6;
      break;
    } else {
      $s_010 = $incdec_ptr;
      $retval1_011 = $or;
      $dec12_in = $dec12;
      label = 3;
      break;
    }
   case 6:
    $sub_ptr_lhs_cast4 = $s_0_lcssa;
    $sub_ptr_rhs_cast = $start;
    $sub_ptr_sub5 = $sub_ptr_lhs_cast4 - $sub_ptr_rhs_cast | 0;
    $sub_ptr_div = $sub_ptr_sub5 >> 2;
    HEAP32[$retlen >> 2] = $sub_ptr_div;
    return $retval1_0_lcssa | 0;
  }
  return 0;
}
function _new_heredoc($p) {
  $p = $p | 0;
  return _cons_gen($p, 99, _parser_palloc($p, 20) | 0) | 0;
}
function _end_strterm($p) {
  $p = $p | 0;
  var $lex_strterm = 0;
  $lex_strterm = $p + 44 | 0;
  _cons_free_gen($p, HEAP32[(HEAP32[(HEAP32[$lex_strterm >> 2] | 0) + 4 >> 2] | 0) + 4 >> 2] | 0);
  _cons_free_gen($p, HEAP32[(HEAP32[$lex_strterm >> 2] | 0) + 4 >> 2] | 0);
  _cons_free_gen($p, HEAP32[$lex_strterm >> 2] | 0);
  HEAP32[$lex_strterm >> 2] = 0;
  return;
}
function _new_xstr($p, $s, $len) {
  $p = $p | 0;
  $s = $s | 0;
  $len = $len | 0;
  return _cons_gen($p, 57, _cons_gen($p, _parser_strndup($p, $s, $len) | 0, $len) | 0) | 0;
}
function _new_regx($p, $p1, $p2) {
  $p = $p | 0;
  $p1 = $p1 | 0;
  $p2 = $p2 | 0;
  return _cons_gen($p, 59, _cons_gen($p, $p1, $p2) | 0) | 0;
}
function _yytnamerr($yyres, $yystr) {
  $yyres = $yyres | 0;
  $yystr = $yystr | 0;
  var $0 = 0, $cmp = 0, $tobool = 0, $yyn_0 = 0, $yyp_0 = 0, $incdec_ptr = 0, $1 = 0, $conv2 = 0, $incdec_ptr4 = 0, $2 = 0, $cmp6 = 0, $yyp_1 = 0, $3 = 0, $arrayidx = 0, $inc = 0, $tobool12 = 0, $arrayidx14 = 0, $tobool17 = 0, $call = 0, $call20 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = HEAP8[$yystr] | 0;
    $cmp = $0 << 24 >> 24 == 34;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 11;
      break;
    }
   case 3:
    $tobool = ($yyres | 0) == 0;
    $yyp_0 = $yystr;
    $yyn_0 = 0;
    label = 4;
    break;
   case 4:
    $incdec_ptr = $yyp_0 + 1 | 0;
    $1 = HEAP8[$incdec_ptr] | 0;
    $conv2 = $1 << 24 >> 24;
    if (($conv2 | 0) == 92) {
      label = 5;
      break;
    } else if (($conv2 | 0) == 34) {
      label = 9;
      break;
    } else if (($conv2 | 0) == 39 | ($conv2 | 0) == 44) {
      label = 11;
      break;
    } else {
      $yyp_1 = $incdec_ptr;
      label = 6;
      break;
    }
   case 5:
    $incdec_ptr4 = $yyp_0 + 2 | 0;
    $2 = HEAP8[$incdec_ptr4] | 0;
    $cmp6 = $2 << 24 >> 24 == 92;
    if ($cmp6) {
      $yyp_1 = $incdec_ptr4;
      label = 6;
      break;
    } else {
      label = 11;
      break;
    }
   case 6:
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $3 = HEAP8[$yyp_1] | 0;
    $arrayidx = $yyres + $yyn_0 | 0;
    HEAP8[$arrayidx] = $3;
    label = 8;
    break;
   case 8:
    $inc = $yyn_0 + 1 | 0;
    $yyp_0 = $yyp_1;
    $yyn_0 = $inc;
    label = 4;
    break;
   case 9:
    $tobool12 = ($yyres | 0) == 0;
    if ($tobool12) {
      $retval_0 = $yyn_0;
      label = 14;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $arrayidx14 = $yyres + $yyn_0 | 0;
    HEAP8[$arrayidx14] = 0;
    $retval_0 = $yyn_0;
    label = 14;
    break;
   case 11:
    $tobool17 = ($yyres | 0) == 0;
    if ($tobool17) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $call = _yystrlen($yystr) | 0;
    $retval_0 = $call;
    label = 14;
    break;
   case 13:
    $call20 = _yystpcpy($yyres, $yystr) | 0;
    $sub_ptr_lhs_cast = $call20;
    $sub_ptr_rhs_cast = $yyres;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $retval_0 = $sub_ptr_sub;
    label = 14;
    break;
   case 14:
    return $retval_0 | 0;
  }
  return 0;
}
function _list6_gen($p, $b, $c, $d, $e, $f) {
  $p = $p | 0;
  $b = $b | 0;
  $c = $c | 0;
  $d = $d | 0;
  $e = $e | 0;
  $f = $f | 0;
  return _cons_gen($p, 71, _cons_gen($p, $b, _cons_gen($p, $c, _cons_gen($p, $d, _cons_gen($p, $e, _cons_gen($p, $f, 0) | 0) | 0) | 0) | 0) | 0) | 0;
}
function _list5_gen($p, $b, $c, $d, $e) {
  $p = $p | 0;
  $b = $b | 0;
  $c = $c | 0;
  $d = $d | 0;
  $e = $e | 0;
  return _cons_gen($p, 70, _cons_gen($p, $b, _cons_gen($p, $c, _cons_gen($p, $d, _cons_gen($p, $e, 0) | 0) | 0) | 0) | 0) | 0;
}
function _list4_gen($p, $a, $b, $c, $d) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  $c = $c | 0;
  $d = $d | 0;
  return _cons_gen($p, $a, _cons_gen($p, $b, _cons_gen($p, $c, _cons_gen($p, $d, 0) | 0) | 0) | 0) | 0;
}
function _local_add($p, $sym) {
  $p = $p | 0;
  $sym = $sym | 0;
  var $call = 0, $tobool = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _local_var_p($p, $sym) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _local_add_f($p, $sym);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _mrb_ary_new_capa($agg_result, $mrb, $capa) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $capa = $capa | 0;
  _mrb_obj_value625($agg_result, _ary_new_capa($mrb, $capa) | 0);
  return;
}
function _ary_new_capa($mrb, $capa) {
  $mrb = $mrb | 0;
  $capa = $capa | 0;
  var $cmp = 0, $call = 0, $mul = 0, $cmp1 = 0, $call3 = 0, $array_class = 0, $0 = 0, $call5 = 0, $1 = 0, $call6 = 0, $ptr = 0, $_c = 0, $aux = 0, $capa_c = 0, $len = 0, $2 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = ($capa | 0) > 357913941;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 94912) | 0;
    _mrb_raise($mrb, $call, 96996);
    label = 4;
    break;
   case 4:
    $mul = $capa * 12 & -1;
    $cmp1 = ($mul | 0) < ($capa | 0);
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $call3 = _mrb_class_get($mrb, 94912) | 0;
    _mrb_raise($mrb, $call3, 96996);
    label = 6;
    break;
   case 6:
    $array_class = $mrb + 64 | 0;
    $0 = HEAP32[$array_class >> 2] | 0;
    $call5 = _mrb_obj_alloc($mrb, 14, $0) | 0;
    $1 = $call5;
    $call6 = _mrb_malloc($mrb, $mul) | 0;
    $ptr = $call5 + 20 | 0;
    $_c = $call6;
    HEAP32[$ptr >> 2] = $_c;
    $aux = $call5 + 16 | 0;
    $capa_c = $capa;
    HEAP32[$aux >> 2] = $capa_c;
    $len = $call5 + 12 | 0;
    $2 = $len;
    HEAP32[$2 >> 2] = 0;
    return $1 | 0;
  }
  return 0;
}
function _mrb_ary_new($agg_result, $mrb) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  _mrb_ary_new_capa($agg_result, $mrb, 0);
  return;
}
function _mrb_assoc_new($agg_result, $mrb, $car, $cdr) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $car = $car | 0;
  $cdr = $cdr | 0;
  var $arv = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $car;
  $car = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$car >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$car + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$car + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $cdr;
  $cdr = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$cdr >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$cdr + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$cdr + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $arv = __stackBase__ | 0;
  $0 = $arv;
  $1 = $car;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  $2 = $arv + 12 | 0;
  $3 = $cdr;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
  HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
  HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
  _mrb_ary_new_from_values($agg_result, $mrb, 2, $arv | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_new_from_values($agg_result, $mrb, $size, $vals) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $size = $size | 0;
  $vals = $vals | 0;
  var $tmp = 0, $ary_sroa_0_0_copyload3 = 0, $1 = 0, $2$0 = 0, $2$1 = 0, $7 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $tmp = __stackBase__ | 0;
  _mrb_ary_new_capa($tmp, $mrb, $size);
  $ary_sroa_0_0_copyload3 = HEAP32[$tmp >> 2] | 0;
  $1 = $tmp + 4 | 0;
  $2$0 = HEAP32[$1 >> 2] | 0;
  $2$1 = HEAP32[$1 + 4 >> 2] | 0;
  _array_copy(HEAP32[$ary_sroa_0_0_copyload3 + 20 >> 2] | 0, $vals, $size);
  HEAP32[$ary_sroa_0_0_copyload3 + 12 >> 2] = $size;
  HEAP32[$agg_result >> 2] = $ary_sroa_0_0_copyload3;
  $7 = $agg_result + 4 | 0;
  HEAP32[$7 >> 2] = $2$0;
  HEAP32[$7 + 4 >> 2] = $2$1;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_s_create($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $vals = 0, $len = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $vals = __stackBase__ | 0;
  $len = __stackBase__ + 4 | 0;
  _mrb_get_args($mrb, 96012, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $vals, HEAP32[tempInt + 4 >> 2] = $len, tempInt) | 0);
  _mrb_ary_new_from_values($agg_result, $mrb, HEAP32[$len >> 2] | 0, HEAP32[$vals >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_concat($mrb, $self, $other) {
  $mrb = $mrb | 0;
  $self = $self | 0;
  $other = $other | 0;
  var $0 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $other;
  $other = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$other >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$other + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$other + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $0 = HEAP32[$other >> 2] | 0;
  _ary_concat($mrb, HEAP32[$self >> 2] | 0, HEAP32[$0 + 20 >> 2] | 0, HEAP32[$0 + 12 >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _ary_concat($mrb, $a, $ptr, $blen) {
  $mrb = $mrb | 0;
  $a = $a | 0;
  $ptr = $ptr | 0;
  $blen = $blen | 0;
  var $len1 = 0, $0 = 0, $add = 0, $capa = 0, $1 = 0, $cmp = 0, $ptr2 = 0, $2 = 0, $3 = 0, $add_ptr = 0, $4 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $len1 = $a + 12 | 0;
    $0 = HEAP32[$len1 >> 2] | 0;
    $add = $0 + $blen | 0;
    _ary_modify($mrb, $a);
    $capa = $a + 16 | 0;
    $1 = HEAP32[$capa >> 2] | 0;
    $cmp = ($1 | 0) < ($add | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _ary_expand_capa($mrb, $a, $add);
    label = 4;
    break;
   case 4:
    $ptr2 = $a + 20 | 0;
    $2 = HEAP32[$ptr2 >> 2] | 0;
    $3 = HEAP32[$len1 >> 2] | 0;
    $add_ptr = $2 + ($3 * 12 & -1) | 0;
    _array_copy($add_ptr, $ptr, $blen);
    $4 = $a;
    _mrb_write_barrier($mrb, $4);
    HEAP32[$len1 >> 2] = $add;
    return;
  }
}
function _mrb_ary_concat_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $ptr = 0, $blen = 0, $4 = 0, $5 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $ptr = __stackBase__ | 0;
  $blen = __stackBase__ + 4 | 0;
  _mrb_get_args($mrb, 108540, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $ptr, HEAP32[tempInt + 4 >> 2] = $blen, tempInt) | 0);
  _ary_concat($mrb, HEAP32[$self >> 2] | 0, HEAP32[$ptr >> 2] | 0, HEAP32[$blen >> 2] | 0);
  $4 = $agg_result;
  $5 = $self;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
  HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
  HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_plus($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $ptr = 0, $blen = 0, $tmp = 0, $0 = 0, $1 = 0, $ary_sroa_0_0_copyload2 = 0, $5 = 0, $6$0 = 0, $6$1 = 0, $7 = 0, $20 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $ptr = __stackBase__ | 0;
  $blen = __stackBase__ + 4 | 0;
  $tmp = __stackBase__ + 8 | 0;
  $0 = HEAP32[$self >> 2] | 0;
  _mrb_get_args($mrb, 108540, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $ptr, HEAP32[tempInt + 4 >> 2] = $blen, tempInt) | 0);
  $1 = $0 + 12 | 0;
  _mrb_ary_new_capa($tmp, $mrb, (HEAP32[$blen >> 2] | 0) + (HEAP32[$1 >> 2] | 0) | 0);
  $ary_sroa_0_0_copyload2 = HEAP32[$tmp >> 2] | 0;
  $5 = $tmp + 4 | 0;
  $6$0 = HEAP32[$5 >> 2] | 0;
  $6$1 = HEAP32[$5 + 4 >> 2] | 0;
  $7 = $ary_sroa_0_0_copyload2 + 20 | 0;
  _array_copy(HEAP32[$7 >> 2] | 0, HEAP32[$0 + 20 >> 2] | 0, HEAP32[$1 >> 2] | 0);
  _array_copy((HEAP32[$7 >> 2] | 0) + ((HEAP32[$1 >> 2] | 0) * 12 & -1) | 0, HEAP32[$ptr >> 2] | 0, HEAP32[$blen >> 2] | 0);
  HEAP32[$ary_sroa_0_0_copyload2 + 12 >> 2] = (HEAP32[$blen >> 2] | 0) + (HEAP32[$1 >> 2] | 0) | 0;
  HEAP32[$agg_result >> 2] = $ary_sroa_0_0_copyload2;
  $20 = $agg_result + 4 | 0;
  HEAP32[$20 >> 2] = $6$0;
  HEAP32[$20 + 4 >> 2] = $6$1;
  STACKTOP = __stackBase__;
  return;
}
function _array_copy($dst, $src, $size) {
  $dst = $dst | 0;
  $src = $src | 0;
  $size = $size | 0;
  var $cmp4 = 0, $i_05 = 0, $arrayidx = 0, $arrayidx1 = 0, $0 = 0, $1 = 0, $inc = 0, $exitcond = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp4 = ($size | 0) == 0;
    if ($cmp4) {
      label = 4;
      break;
    } else {
      $i_05 = 0;
      label = 3;
      break;
    }
   case 3:
    $arrayidx = $dst + ($i_05 * 12 & -1) | 0;
    $arrayidx1 = $src + ($i_05 * 12 & -1) | 0;
    $0 = $arrayidx;
    $1 = $arrayidx1;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    $inc = $i_05 + 1 | 0;
    $exitcond = ($inc | 0) == ($size | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $i_05 = $inc;
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _parser_palloc($p, $size) {
  $p = $p | 0;
  $size = $size | 0;
  var $pool = 0, $0 = 0, $call = 0, $tobool = 0, $arraydecay = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $pool = $p + 4 | 0;
    $0 = HEAP32[$pool >> 2] | 0;
    $call = _mrb_pool_alloc($0, $size) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $arraydecay = $p + 1384 | 0;
    _longjmp($arraydecay | 0, 1);
    return 0;
   case 4:
    return $call | 0;
  }
  return 0;
}
function _mrb_nil_value632($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_fixnum_value633($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_ary_cmp($agg_result, $mrb, $ary1) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $ary1 = $ary1 | 0;
  var $ary2 = 0, $v = 0, $agg_tmp = 0, $tmp = 0, $call = 0, $tt = 0, $0 = 0, $cmp = 0, $p = 0, $1 = 0, $p2 = 0, $2 = 0, $len3 = 0, $3 = 0, $4 = 0, $len4 = 0, $5 = 0, $6 = 0, $cmp5 = 0, $ptr = 0, $7 = 0, $8 = 0, $ptr6 = 0, $9 = 0, $10 = 0, $cmp7 = 0, $call10 = 0, $11 = 0, $len13 = 0, $12 = 0, $13 = 0, $14 = 0, $len16 = 0, $15 = 0, $16 = 0, $cmp17 = 0, $_ = 0, $r_sroa_0_0__cast7 = 0, $r_sroa_2_8__idx13 = 0, $i_0 = 0, $cmp23 = 0, $r_sroa_0_0_copyload8 = 0, $r_sroa_2_8_copyload14 = 0, $cmp25 = 0, $cmp28 = 0, $or_cond = 0, $inc = 0, $17 = 0, $r_sroa_1_4__idx9 = 0, $r_sroa_1_4__cast10 = 0, $r_sroa_1_4_copyload11 = 0, $18 = 0, $r_sroa_0_0__cast = 0, $r_sroa_1_4__idx = 0, $r_sroa_1_4__cast = 0, $r_sroa_2_8__idx12 = 0, $19 = 0, $20 = 0, $cmp34 = 0, $sub = 0, $cmp35 = 0, $cond = 0, $cond36 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  tempParam = $ary1;
  $ary1 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary1 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary1 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary1 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ary2 = __stackBase__ | 0;
    $v = __stackBase__ + 12 | 0;
    $agg_tmp = __stackBase__ + 24 | 0;
    $tmp = __stackBase__ + 36 | 0;
    $call = _mrb_get_args($mrb, 104504, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $ary2, tempInt) | 0) | 0;
    $tt = $ary2 + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 14;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_nil_value632($agg_result);
    label = 14;
    break;
   case 4:
    $p = $ary1;
    $1 = HEAP32[$p >> 2] | 0;
    $p2 = $ary2;
    $2 = HEAP32[$p2 >> 2] | 0;
    $len3 = $1 + 12 | 0;
    $3 = $len3;
    $4 = HEAP32[$3 >> 2] | 0;
    $len4 = $2 + 12 | 0;
    $5 = $len4;
    $6 = HEAP32[$5 >> 2] | 0;
    $cmp5 = ($4 | 0) == ($6 | 0);
    if ($cmp5) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    $ptr = $1 + 20 | 0;
    $7 = $ptr;
    $8 = HEAP32[$7 >> 2] | 0;
    $ptr6 = $2 + 20 | 0;
    $9 = $ptr6;
    $10 = HEAP32[$9 >> 2] | 0;
    $cmp7 = ($8 | 0) == ($10 | 0);
    if ($cmp7) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _mrb_fixnum_value633($agg_result, 0);
    label = 14;
    break;
   case 7:
    $call10 = _mrb_intern2($mrb, 101608, 3) | 0;
    $11 = HEAP32[$p >> 2] | 0;
    $len13 = $11 + 12 | 0;
    $12 = $len13;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = HEAP32[$p2 >> 2] | 0;
    $len16 = $14 + 12 | 0;
    $15 = $len16;
    $16 = HEAP32[$15 >> 2] | 0;
    $cmp17 = ($13 | 0) > ($16 | 0);
    $_ = $cmp17 ? $16 : $13;
    $r_sroa_0_0__cast7 = $tmp;
    $r_sroa_2_8__idx13 = $tmp + 8 | 0;
    $i_0 = 0;
    label = 8;
    break;
   case 8:
    $cmp23 = ($i_0 | 0) < ($_ | 0);
    if ($cmp23) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    _ary_elt($v, $ary2, $i_0);
    _ary_elt($agg_tmp, $ary1, $i_0);
    _mrb_funcall_argv($tmp, $mrb, $agg_tmp, $call10, 1, $v);
    $r_sroa_0_0_copyload8 = HEAP32[$r_sroa_0_0__cast7 >> 2] | 0;
    $r_sroa_2_8_copyload14 = HEAP32[$r_sroa_2_8__idx13 >> 2] | 0;
    $cmp25 = ($r_sroa_2_8_copyload14 | 0) == 3;
    $cmp28 = ($r_sroa_0_0_copyload8 | 0) == 0;
    $or_cond = $cmp25 & $cmp28;
    $inc = $i_0 + 1 | 0;
    if ($or_cond) {
      $i_0 = $inc;
      label = 8;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $17 = $tmp;
    $r_sroa_1_4__idx9 = $17 + 4 | 0;
    $r_sroa_1_4__cast10 = $r_sroa_1_4__idx9;
    $r_sroa_1_4_copyload11 = HEAP32[$r_sroa_1_4__cast10 >> 2] | 0;
    $18 = $agg_result;
    $r_sroa_0_0__cast = $agg_result;
    HEAP32[$r_sroa_0_0__cast >> 2] = $r_sroa_0_0_copyload8;
    $r_sroa_1_4__idx = $18 + 4 | 0;
    $r_sroa_1_4__cast = $r_sroa_1_4__idx;
    HEAP32[$r_sroa_1_4__cast >> 2] = $r_sroa_1_4_copyload11;
    $r_sroa_2_8__idx12 = $agg_result + 8 | 0;
    HEAP32[$r_sroa_2_8__idx12 >> 2] = $r_sroa_2_8_copyload14;
    label = 14;
    break;
   case 11:
    $19 = HEAP32[$3 >> 2] | 0;
    $20 = HEAP32[$5 >> 2] | 0;
    $cmp34 = ($19 | 0) == ($20 | 0);
    if ($cmp34) {
      $cond36 = 0;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $sub = $19 - $20 | 0;
    $cmp35 = ($sub | 0) > 0;
    $cond = $cmp35 ? 1 : -1;
    $cond36 = $cond;
    label = 13;
    break;
   case 13:
    _mrb_fixnum_value633($agg_result, $cond36);
    label = 14;
    break;
   case 14:
    STACKTOP = __stackBase__;
    return;
  }
}
function _ary_elt($agg_result, $ary, $offset) {
  $agg_result = $agg_result | 0;
  $ary = $ary | 0;
  $offset = $offset | 0;
  var $p = 0, $0 = 0, $len = 0, $1 = 0, $2 = 0, $cmp = 0, $cmp1 = 0, $cmp5 = 0, $or_cond = 0, $ptr = 0, $3 = 0, $4 = 0, $arrayidx = 0, $5 = 0, $6 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $ary;
  $ary = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $ary;
    $0 = HEAP32[$p >> 2] | 0;
    $len = $0 + 12 | 0;
    $1 = $len;
    $2 = HEAP32[$1 >> 2] | 0;
    $cmp = ($2 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value632($agg_result);
    label = 7;
    break;
   case 4:
    $cmp1 = ($offset | 0) > -1;
    $cmp5 = ($2 | 0) > ($offset | 0);
    $or_cond = $cmp1 & $cmp5;
    if ($or_cond) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _mrb_nil_value632($agg_result);
    label = 7;
    break;
   case 6:
    $ptr = $0 + 20 | 0;
    $3 = $ptr;
    $4 = HEAP32[$3 >> 2] | 0;
    $arrayidx = $4 + ($offset * 12 & -1) | 0;
    $5 = $agg_result;
    $6 = $arrayidx;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2] | 0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ary_replace($mrb, $self, $other) {
  $mrb = $mrb | 0;
  $self = $self | 0;
  $other = $other | 0;
  var $0 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $other;
  $other = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$other >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$other + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$other + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $0 = HEAP32[$other >> 2] | 0;
  _ary_replace($mrb, HEAP32[$self >> 2] | 0, HEAP32[$0 + 20 >> 2] | 0, HEAP32[$0 + 12 >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _ary_replace($mrb, $a, $argv, $len) {
  $mrb = $mrb | 0;
  $a = $a | 0;
  $argv = $argv | 0;
  $len = $len | 0;
  var $capa = 0, $0 = 0, $cmp = 0, $ptr = 0, $1 = 0, $2 = 0, $len1 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    _ary_modify($mrb, $a);
    $capa = $a + 16 | 0;
    $0 = HEAP32[$capa >> 2] | 0;
    $cmp = ($0 | 0) < ($len | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _ary_expand_capa($mrb, $a, $len);
    label = 4;
    break;
   case 4:
    $ptr = $a + 20 | 0;
    $1 = HEAP32[$ptr >> 2] | 0;
    _array_copy($1, $argv, $len);
    $2 = $a;
    _mrb_write_barrier($mrb, $2);
    $len1 = $a + 12 | 0;
    HEAP32[$len1 >> 2] = $len;
    return;
  }
}
function _mrb_ary_replace_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $other = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $other = __stackBase__ | 0;
  _mrb_get_args($mrb, 98756, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $other, tempInt) | 0);
  _mrb_ary_replace($mrb, $self, $other);
  $0 = $agg_result;
  $1 = $self;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_times($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $times = 0, $tmp = 0, $p = 0, $0 = 0, $call = 0, $1 = 0, $cmp = 0, $call1 = 0, $_pr = 0, $2 = 0, $cmp2 = 0, $len = 0, $3 = 0, $4 = 0, $mul = 0, $5 = 0, $ary_sroa_0_0__cast2 = 0, $ary_sroa_0_0_copyload3 = 0, $ary_sroa_1_4__raw_idx5 = 0, $6 = 0, $ld$0$0 = 0, $7$0 = 0, $ld$1$1 = 0, $7$1 = 0, $ptr7 = 0, $8 = 0, $9 = 0, $10 = 0, $dec15 = 0, $tobool16 = 0, $ptr8 = 0, $11 = 0, $len12 = 0, $12 = 0, $ptr_017 = 0, $13 = 0, $14 = 0, $15 = 0, $add_ptr = 0, $16 = 0, $add = 0, $17 = 0, $dec = 0, $tobool = 0, $18 = 0, $ary_sroa_0_0__cast = 0, $ary_sroa_1_4__raw_idx = 0, $19 = 0, $st$2$0 = 0, $st$3$1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $times = __stackBase__ | 0;
    $tmp = __stackBase__ + 4 | 0;
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $call = _mrb_get_args($mrb, 96284, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $times, tempInt) | 0) | 0;
    $1 = HEAP32[$times >> 2] | 0;
    $cmp = ($1 | 0) < 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $2 = $1;
      label = 4;
      break;
    }
   case 3:
    $call1 = _mrb_class_get($mrb, 94912) | 0;
    _mrb_raise($mrb, $call1, 93916);
    $_pr = HEAP32[$times >> 2] | 0;
    $2 = $_pr;
    label = 4;
    break;
   case 4:
    $cmp2 = ($2 | 0) == 0;
    if ($cmp2) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _mrb_ary_new($agg_result, $mrb);
    label = 10;
    break;
   case 6:
    $len = $0 + 12 | 0;
    $3 = $len;
    $4 = HEAP32[$3 >> 2] | 0;
    $mul = Math_imul($4, $2);
    _mrb_ary_new_capa($tmp, $mrb, $mul);
    $5 = $tmp;
    $ary_sroa_0_0__cast2 = $tmp;
    $ary_sroa_0_0_copyload3 = HEAP32[$ary_sroa_0_0__cast2 >> 2] | 0;
    $ary_sroa_1_4__raw_idx5 = $5 + 4 | 0;
    $6 = $ary_sroa_1_4__raw_idx5;
    $ld$0$0 = $6 | 0;
    $7$0 = HEAP32[$ld$0$0 >> 2] | 0;
    $ld$1$1 = $6 + 4 | 0;
    $7$1 = HEAP32[$ld$1$1 >> 2] | 0;
    $ptr7 = $ary_sroa_0_0_copyload3 + 20 | 0;
    $8 = $ptr7;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = HEAP32[$times >> 2] | 0;
    $dec15 = $10 - 1 | 0;
    HEAP32[$times >> 2] = $dec15;
    $tobool16 = ($10 | 0) == 0;
    if ($tobool16) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $ptr8 = $0 + 20 | 0;
    $11 = $ptr8;
    $len12 = $ary_sroa_0_0_copyload3 + 12 | 0;
    $12 = $len12;
    $ptr_017 = $9;
    label = 8;
    break;
   case 8:
    $13 = HEAP32[$11 >> 2] | 0;
    $14 = HEAP32[$3 >> 2] | 0;
    _array_copy($ptr_017, $13, $14);
    $15 = HEAP32[$3 >> 2] | 0;
    $add_ptr = $ptr_017 + ($15 * 12 & -1) | 0;
    $16 = HEAP32[$12 >> 2] | 0;
    $add = $16 + $15 | 0;
    HEAP32[$12 >> 2] = $add;
    $17 = HEAP32[$times >> 2] | 0;
    $dec = $17 - 1 | 0;
    HEAP32[$times >> 2] = $dec;
    $tobool = ($17 | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      $ptr_017 = $add_ptr;
      label = 8;
      break;
    }
   case 9:
    $18 = $agg_result;
    $ary_sroa_0_0__cast = $agg_result;
    HEAP32[$ary_sroa_0_0__cast >> 2] = $ary_sroa_0_0_copyload3;
    $ary_sroa_1_4__raw_idx = $18 + 4 | 0;
    $19 = $ary_sroa_1_4__raw_idx;
    $st$2$0 = $19 | 0;
    HEAP32[$st$2$0 >> 2] = $7$0;
    $st$3$1 = $19 + 4 | 0;
    HEAP32[$st$3$1 >> 2] = $7$1;
    label = 10;
    break;
   case 10:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ary_reverse_bang($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $tmp = 0, $p = 0, $0 = 0, $len = 0, $1 = 0, $2 = 0, $cmp = 0, $3 = 0, $ptr = 0, $4 = 0, $5 = 0, $6 = 0, $add_ptr_sum = 0, $cmp49 = 0, $add_ptr3 = 0, $7 = 0, $p2_011 = 0, $p1_010 = 0, $8 = 0, $incdec_ptr = 0, $9 = 0, $incdec_ptr5 = 0, $cmp4 = 0, $10 = 0, $11 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $len = $0 + 12 | 0;
    $1 = $len;
    $2 = HEAP32[$1 >> 2] | 0;
    $cmp = ($2 | 0) > 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $3 = $0;
    _ary_modify($mrb, $3);
    $ptr = $0 + 20 | 0;
    $4 = $ptr;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = HEAP32[$1 >> 2] | 0;
    $add_ptr_sum = $6 - 1 | 0;
    $cmp49 = ($add_ptr_sum | 0) > 0;
    if ($cmp49) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $add_ptr3 = $5 + ($add_ptr_sum * 12 & -1) | 0;
    $7 = $tmp;
    $p1_010 = $5;
    $p2_011 = $add_ptr3;
    label = 5;
    break;
   case 5:
    $8 = $p1_010;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    $incdec_ptr = $p1_010 + 12 | 0;
    $9 = $p2_011;
    HEAP32[$8 >> 2] = HEAP32[$9 >> 2] | 0;
    HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2] | 0;
    HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2] | 0;
    $incdec_ptr5 = $p2_011 - 12 | 0;
    HEAP32[$9 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$9 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$9 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    $cmp4 = $incdec_ptr >>> 0 < $incdec_ptr5 >>> 0;
    if ($cmp4) {
      $p1_010 = $incdec_ptr;
      $p2_011 = $incdec_ptr5;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $10 = $agg_result;
    $11 = $self;
    HEAP32[$10 >> 2] = HEAP32[$11 >> 2] | 0;
    HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2] | 0;
    HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _ary_modify($mrb, $a) {
  $mrb = $mrb | 0;
  $a = $a | 0;
  var $0 = 0, $1 = 0, $and = 0, $tobool = 0, $aux = 0, $shared1 = 0, $2 = 0, $refcnt = 0, $3 = 0, $cmp = 0, $ptr = 0, $4 = 0, $ptr2 = 0, $5 = 0, $cmp3 = 0, $len = 0, $6 = 0, $capa = 0, $7 = 0, $ptr10 = 0, $8 = 0, $len11 = 0, $9 = 0, $mul = 0, $call = 0, $10 = 0, $tobool12 = 0, $11 = 0, $12 = 0, $capa18 = 0, $13 = 0, $14 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $a;
    $1 = HEAP32[$0 >> 2] | 0;
    $and = $1 & 524288;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $aux = $a + 16 | 0;
    $shared1 = $aux;
    $2 = HEAP32[$shared1 >> 2] | 0;
    $refcnt = $2 | 0;
    $3 = HEAP32[$refcnt >> 2] | 0;
    $cmp = ($3 | 0) == 1;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $ptr = $a + 20 | 0;
    $4 = HEAP32[$ptr >> 2] | 0;
    $ptr2 = $2 + 4 | 0;
    $5 = HEAP32[$ptr2 >> 2] | 0;
    $cmp3 = ($4 | 0) == ($5 | 0);
    if ($cmp3) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[$ptr >> 2] = $5;
    $len = $a + 12 | 0;
    $6 = HEAP32[$len >> 2] | 0;
    $capa = $aux | 0;
    HEAP32[$capa >> 2] = $6;
    $7 = $2;
    _mrb_free($mrb, $7);
    label = 9;
    break;
   case 6:
    $ptr10 = $a + 20 | 0;
    $8 = HEAP32[$ptr10 >> 2] | 0;
    $len11 = $a + 12 | 0;
    $9 = HEAP32[$len11 >> 2] | 0;
    $mul = $9 * 12 & -1;
    $call = _mrb_malloc($mrb, $mul) | 0;
    $10 = $call;
    $tobool12 = ($8 | 0) == 0;
    if ($tobool12) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $11 = HEAP32[$len11 >> 2] | 0;
    _array_copy($10, $8, $11);
    label = 8;
    break;
   case 8:
    HEAP32[$ptr10 >> 2] = $10;
    $12 = HEAP32[$len11 >> 2] | 0;
    $capa18 = $aux | 0;
    HEAP32[$capa18 >> 2] = $12;
    _mrb_ary_decref($mrb, $2);
    label = 9;
    break;
   case 9:
    $13 = HEAP32[$0 >> 2] | 0;
    $14 = $13 & -524289;
    HEAP32[$0 >> 2] = $14;
    label = 10;
    break;
   case 10:
    return;
  }
}
function _mrb_ary_reverse($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $tmp = 0, $p = 0, $0 = 0, $len = 0, $1 = 0, $2 = 0, $3 = 0, $ary_sroa_0_0__cast3 = 0, $ary_sroa_0_0_copyload4 = 0, $ary_sroa_1_4__raw_idx6 = 0, $4 = 0, $ld$0$0 = 0, $5$0 = 0, $ld$1$1 = 0, $5$1 = 0, $6 = 0, $cmp = 0, $ptr = 0, $7 = 0, $8 = 0, $add_ptr = 0, $ptr9 = 0, $9 = 0, $add_ptr11_sum = 0, $10 = 0, $add_ptr12 = 0, $p1_016 = 0, $p26_015 = 0, $incdec_ptr = 0, $incdec_ptr14 = 0, $11 = 0, $12 = 0, $cmp13 = 0, $13 = 0, $len16 = 0, $14 = 0, $15 = 0, $ary_sroa_0_0__cast = 0, $ary_sroa_1_4__raw_idx = 0, $16 = 0, $st$2$0 = 0, $st$3$1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $len = $0 + 12 | 0;
    $1 = $len;
    $2 = HEAP32[$1 >> 2] | 0;
    _mrb_ary_new_capa($tmp, $mrb, $2);
    $3 = $tmp;
    $ary_sroa_0_0__cast3 = $tmp;
    $ary_sroa_0_0_copyload4 = HEAP32[$ary_sroa_0_0__cast3 >> 2] | 0;
    $ary_sroa_1_4__raw_idx6 = $3 + 4 | 0;
    $4 = $ary_sroa_1_4__raw_idx6;
    $ld$0$0 = $4 | 0;
    $5$0 = HEAP32[$ld$0$0 >> 2] | 0;
    $ld$1$1 = $4 + 4 | 0;
    $5$1 = HEAP32[$ld$1$1 >> 2] | 0;
    $6 = HEAP32[$1 >> 2] | 0;
    $cmp = ($6 | 0) > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $ptr = $0 + 20 | 0;
    $7 = $ptr;
    $8 = HEAP32[$7 >> 2] | 0;
    $add_ptr = $8 + ($6 * 12 & -1) | 0;
    $ptr9 = $ary_sroa_0_0_copyload4 + 20 | 0;
    $9 = $ptr9;
    $add_ptr11_sum = $6 - 1 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $add_ptr12 = $10 + ($add_ptr11_sum * 12 & -1) | 0;
    $p26_015 = $add_ptr12;
    $p1_016 = $8;
    label = 4;
    break;
   case 4:
    $incdec_ptr = $p26_015 - 12 | 0;
    $incdec_ptr14 = $p1_016 + 12 | 0;
    $11 = $p26_015;
    $12 = $p1_016;
    HEAP32[$11 >> 2] = HEAP32[$12 >> 2] | 0;
    HEAP32[$11 + 4 >> 2] = HEAP32[$12 + 4 >> 2] | 0;
    HEAP32[$11 + 8 >> 2] = HEAP32[$12 + 8 >> 2] | 0;
    $cmp13 = $incdec_ptr14 >>> 0 < $add_ptr >>> 0;
    if ($cmp13) {
      $p26_015 = $incdec_ptr;
      $p1_016 = $incdec_ptr14;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $13 = HEAP32[$1 >> 2] | 0;
    $len16 = $ary_sroa_0_0_copyload4 + 12 | 0;
    $14 = $len16;
    HEAP32[$14 >> 2] = $13;
    label = 6;
    break;
   case 6:
    $15 = $agg_result;
    $ary_sroa_0_0__cast = $agg_result;
    HEAP32[$ary_sroa_0_0__cast >> 2] = $ary_sroa_0_0_copyload4;
    $ary_sroa_1_4__raw_idx = $15 + 4 | 0;
    $16 = $ary_sroa_1_4__raw_idx;
    $st$2$0 = $16 | 0;
    HEAP32[$st$2$0 >> 2] = $5$0;
    $st$3$1 = $16 + 4 | 0;
    HEAP32[$st$3$1 >> 2] = $5$1;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ary_push($mrb, $ary, $elem) {
  $mrb = $mrb | 0;
  $ary = $ary | 0;
  $elem = $elem | 0;
  var $p = 0, $0 = 0, $1 = 0, $len = 0, $2 = 0, $3 = 0, $aux = 0, $capa = 0, $4 = 0, $cmp = 0, $add = 0, $5 = 0, $inc = 0, $ptr = 0, $6 = 0, $7 = 0, $arrayidx = 0, $8 = 0, $9 = 0, $10 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $ary;
  $ary = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $elem;
  $elem = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$elem >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$elem + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$elem + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $ary;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    _ary_modify($mrb, $1);
    $len = $0 + 12 | 0;
    $2 = $len;
    $3 = HEAP32[$2 >> 2] | 0;
    $aux = $0 + 16 | 0;
    $capa = $aux;
    $4 = HEAP32[$capa >> 2] | 0;
    $cmp = ($3 | 0) == ($4 | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $add = $3 + 1 | 0;
    _ary_expand_capa($mrb, $1, $add);
    label = 4;
    break;
   case 4:
    $5 = HEAP32[$2 >> 2] | 0;
    $inc = $5 + 1 | 0;
    HEAP32[$2 >> 2] = $inc;
    $ptr = $0 + 20 | 0;
    $6 = $ptr;
    $7 = HEAP32[$6 >> 2] | 0;
    $arrayidx = $7 + ($5 * 12 & -1) | 0;
    $8 = $arrayidx;
    $9 = $elem;
    HEAP32[$8 >> 2] = HEAP32[$9 >> 2] | 0;
    HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2] | 0;
    HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2] | 0;
    $10 = $0;
    _mrb_write_barrier($mrb, $10);
    STACKTOP = __stackBase__;
    return;
  }
}
function _ary_expand_capa($mrb, $a, $len) {
  $mrb = $mrb | 0;
  $a = $a | 0;
  $len = $len | 0;
  var $capa1 = 0, $0 = 0, $cmp = 0, $call = 0, $cmp216 = 0, $capa_017 = 0, $cmp3 = 0, $mul = 0, $_mul = 0, $cmp2 = 0, $capa_0_lcssa = 0, $cmp6 = 0, $_capa_0 = 0, $1 = 0, $cmp11 = 0, $ptr = 0, $2 = 0, $3 = 0, $mul13 = 0, $call14 = 0, $4 = 0, $tobool = 0, $call16 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $capa1 = $a + 16 | 0;
    $0 = HEAP32[$capa1 >> 2] | 0;
    $cmp = ($len | 0) > 357913941;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 94912) | 0;
    _mrb_raise($mrb, $call, 96996);
    label = 4;
    break;
   case 4:
    $cmp216 = ($0 | 0) < ($len | 0);
    if ($cmp216) {
      $capa_017 = $0;
      label = 5;
      break;
    } else {
      $capa_0_lcssa = $0;
      label = 6;
      break;
    }
   case 5:
    $cmp3 = ($capa_017 | 0) == 0;
    $mul = $capa_017 << 1;
    $_mul = $cmp3 ? 4 : $mul;
    $cmp2 = ($_mul | 0) < ($len | 0);
    if ($cmp2) {
      $capa_017 = $_mul;
      label = 5;
      break;
    } else {
      $capa_0_lcssa = $_mul;
      label = 6;
      break;
    }
   case 6:
    $cmp6 = ($capa_0_lcssa | 0) > 357913941;
    $_capa_0 = $cmp6 ? 357913941 : $capa_0_lcssa;
    $1 = HEAP32[$capa1 >> 2] | 0;
    $cmp11 = ($_capa_0 | 0) > ($1 | 0);
    if ($cmp11) {
      label = 7;
      break;
    } else {
      label = 10;
      break;
    }
   case 7:
    $ptr = $a + 20 | 0;
    $2 = HEAP32[$ptr >> 2] | 0;
    $3 = $2;
    $mul13 = $_capa_0 * 12 & -1;
    $call14 = _mrb_realloc($mrb, $3, $mul13) | 0;
    $4 = $call14;
    $tobool = ($call14 | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $call16 = _mrb_class_get($mrb, 96732) | 0;
    _mrb_raise($mrb, $call16, 96488);
    label = 9;
    break;
   case 9:
    HEAP32[$capa1 >> 2] = $_capa_0;
    HEAP32[$ptr >> 2] = $4;
    label = 10;
    break;
   case 10:
    return;
  }
}
function _mrb_ary_push_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $argv = 0, $len = 0, $call = 0, $0 = 0, $dec2 = 0, $tobool3 = 0, $1 = 0, $incdec_ptr = 0, $2 = 0, $dec = 0, $tobool = 0, $3 = 0, $4 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $argv = __stackBase__ | 0;
    $len = __stackBase__ + 4 | 0;
    $call = _mrb_get_args($mrb, 96012, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $argv, HEAP32[tempInt + 4 >> 2] = $len, tempInt) | 0) | 0;
    $0 = HEAP32[$len >> 2] | 0;
    $dec2 = $0 - 1 | 0;
    HEAP32[$len >> 2] = $dec2;
    $tobool3 = ($0 | 0) == 0;
    if ($tobool3) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $1 = HEAP32[$argv >> 2] | 0;
    $incdec_ptr = $1 + 12 | 0;
    HEAP32[$argv >> 2] = $incdec_ptr;
    _mrb_ary_push($mrb, $self, $1);
    $2 = HEAP32[$len >> 2] | 0;
    $dec = $2 - 1 | 0;
    HEAP32[$len >> 2] = $dec;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 4:
    $3 = $agg_result;
    $4 = $self;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ary_pop($agg_result, $mrb, $ary) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $ary = $ary | 0;
  var $p = 0, $0 = 0, $len = 0, $1 = 0, $2 = 0, $cmp = 0, $dec = 0, $ptr = 0, $3 = 0, $4 = 0, $arrayidx = 0, $5 = 0, $6 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $ary;
  $ary = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $ary;
    $0 = HEAP32[$p >> 2] | 0;
    $len = $0 + 12 | 0;
    $1 = $len;
    $2 = HEAP32[$1 >> 2] | 0;
    $cmp = ($2 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value632($agg_result);
    label = 5;
    break;
   case 4:
    $dec = $2 - 1 | 0;
    HEAP32[$1 >> 2] = $dec;
    $ptr = $0 + 20 | 0;
    $3 = $ptr;
    $4 = HEAP32[$3 >> 2] | 0;
    $arrayidx = $4 + ($dec * 12 & -1) | 0;
    $5 = $agg_result;
    $6 = $arrayidx;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2] | 0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ary_shift($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $val = 0, $p = 0, $0 = 0, $1 = 0, $len = 0, $2 = 0, $3 = 0, $cmp = 0, $4 = 0, $5 = 0, $and = 0, $tobool = 0, $ptr = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $incdec_ptr = 0, $11 = 0, $dec = 0, $12 = 0, $cmp6 = 0, $ptr9 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $dec1113 = 0, $tobool1214 = 0, $dec1116 = 0, $ptr8_015 = 0, $add_ptr = 0, $17 = 0, $18 = 0, $dec11 = 0, $tobool12 = 0, $19 = 0, $dec15 = 0, $20 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $val = __stackBase__ | 0;
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    $len = $0 + 12 | 0;
    $2 = $len;
    $3 = HEAP32[$2 >> 2] | 0;
    $cmp = ($3 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value632($agg_result);
    label = 11;
    break;
   case 4:
    $4 = $0;
    $5 = HEAP32[$4 >> 2] | 0;
    $and = $5 & 524288;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $ptr = $0 + 20 | 0;
    $6 = $ptr;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $val;
    $9 = $7;
    HEAP32[$8 >> 2] = HEAP32[$9 >> 2] | 0;
    HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2] | 0;
    HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2] | 0;
    $10 = HEAP32[$6 >> 2] | 0;
    $incdec_ptr = $10 + 12 | 0;
    HEAP32[$6 >> 2] = $incdec_ptr;
    $11 = HEAP32[$2 >> 2] | 0;
    $dec = $11 - 1 | 0;
    HEAP32[$2 >> 2] = $dec;
    $12 = $agg_result;
    HEAP32[$12 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$12 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$12 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    label = 11;
    break;
   case 6:
    $cmp6 = ($3 | 0) > 10;
    if ($cmp6) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _ary_make_shared($mrb, $1);
    label = 5;
    break;
   case 8:
    $ptr9 = $0 + 20 | 0;
    $13 = $ptr9;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $val;
    $16 = $14;
    HEAP32[$15 >> 2] = HEAP32[$16 >> 2] | 0;
    HEAP32[$15 + 4 >> 2] = HEAP32[$16 + 4 >> 2] | 0;
    HEAP32[$15 + 8 >> 2] = HEAP32[$16 + 8 >> 2] | 0;
    $dec1113 = $3 - 1 | 0;
    $tobool1214 = ($dec1113 | 0) == 0;
    if ($tobool1214) {
      label = 10;
      break;
    } else {
      $ptr8_015 = $14;
      $dec1116 = $dec1113;
      label = 9;
      break;
    }
   case 9:
    $add_ptr = $ptr8_015 + 12 | 0;
    $17 = $ptr8_015;
    $18 = $add_ptr;
    HEAP32[$17 >> 2] = HEAP32[$18 >> 2] | 0;
    HEAP32[$17 + 4 >> 2] = HEAP32[$18 + 4 >> 2] | 0;
    HEAP32[$17 + 8 >> 2] = HEAP32[$18 + 8 >> 2] | 0;
    $dec11 = $dec1116 - 1 | 0;
    $tobool12 = ($dec11 | 0) == 0;
    if ($tobool12) {
      label = 10;
      break;
    } else {
      $ptr8_015 = $add_ptr;
      $dec1116 = $dec11;
      label = 9;
      break;
    }
   case 10:
    $19 = HEAP32[$2 >> 2] | 0;
    $dec15 = $19 - 1 | 0;
    HEAP32[$2 >> 2] = $dec15;
    $20 = $agg_result;
    HEAP32[$20 >> 2] = HEAP32[$15 >> 2] | 0;
    HEAP32[$20 + 4 >> 2] = HEAP32[$15 + 4 >> 2] | 0;
    HEAP32[$20 + 8 >> 2] = HEAP32[$15 + 8 >> 2] | 0;
    label = 11;
    break;
   case 11:
    STACKTOP = __stackBase__;
    return;
  }
}
function _ary_make_shared($mrb, $a) {
  $mrb = $mrb | 0;
  $a = $a | 0;
  var $0 = 0, $1 = 0, $and = 0, $tobool = 0, $call = 0, $refcnt = 0, $capa = 0, $2 = 0, $len = 0, $3 = 0, $cmp = 0, $ptr = 0, $4 = 0, $5 = 0, $mul = 0, $add15 = 0, $call3 = 0, $6 = 0, $ptr4 = 0, $7 = 0, $ptr7 = 0, $8 = 0, $9 = 0, $len9 = 0, $10 = 0, $_c = 0, $11 = 0, $12 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $a;
    $1 = HEAP32[$0 >> 2] | 0;
    $and = $1 & 524288;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    $call = _mrb_malloc($mrb, 12) | 0;
    $refcnt = $call;
    HEAP32[$refcnt >> 2] = 1;
    $capa = $a + 16 | 0;
    $2 = HEAP32[$capa >> 2] | 0;
    $len = $a + 12 | 0;
    $3 = HEAP32[$len >> 2] | 0;
    $cmp = ($2 | 0) > ($3 | 0);
    $ptr = $a + 20 | 0;
    $4 = HEAP32[$ptr >> 2] | 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $5 = $4;
    $mul = $3 * 12 & -1;
    $add15 = $mul | 1;
    $call3 = _mrb_realloc($mrb, $5, $add15) | 0;
    $6 = $call3;
    $ptr4 = $call + 4 | 0;
    $7 = $ptr4;
    HEAP32[$7 >> 2] = $6;
    HEAP32[$ptr >> 2] = $6;
    label = 6;
    break;
   case 5:
    $ptr7 = $call + 4 | 0;
    $8 = $ptr7;
    HEAP32[$8 >> 2] = $4;
    label = 6;
    break;
   case 6:
    $9 = HEAP32[$len >> 2] | 0;
    $len9 = $call + 8 | 0;
    $10 = $len9;
    HEAP32[$10 >> 2] = $9;
    $_c = $call;
    HEAP32[$capa >> 2] = $_c;
    $11 = HEAP32[$0 >> 2] | 0;
    $12 = $11 | 524288;
    HEAP32[$0 >> 2] = $12;
    label = 7;
    break;
   case 7:
    return;
  }
}
function _mrb_ary_unshift($agg_result, $mrb, $self, $item) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  $item = $item | 0;
  var $p = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $and = 0, $tobool = 0, $aux = 0, $shared = 0, $4 = 0, $refcnt = 0, $5 = 0, $cmp = 0, $ptr = 0, $6 = 0, $7 = 0, $ptr4 = 0, $8 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $cmp5 = 0, $incdec_ptr = 0, $9 = 0, $10 = 0, $aux8 = 0, $capa = 0, $11 = 0, $len = 0, $12 = 0, $13 = 0, $add = 0, $cmp9 = 0, $ptr13 = 0, $14 = 0, $15 = 0, $add_ptr = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $len19 = 0, $20 = 0, $21 = 0, $inc = 0, $22 = 0, $23 = 0, $24 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $item;
  $item = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$item >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$item + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$item + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    $2 = $0;
    $3 = HEAP32[$2 >> 2] | 0;
    $and = $3 & 524288;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $aux = $0 + 16 | 0;
    $shared = $aux;
    $4 = HEAP32[$shared >> 2] | 0;
    $refcnt = $4 | 0;
    $5 = HEAP32[$refcnt >> 2] | 0;
    $cmp = ($5 | 0) == 1;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $ptr = $0 + 20 | 0;
    $6 = $ptr;
    $7 = HEAP32[$6 >> 2] | 0;
    $ptr4 = $4 + 4 | 0;
    $8 = HEAP32[$ptr4 >> 2] | 0;
    $sub_ptr_lhs_cast = $7;
    $sub_ptr_rhs_cast = $8;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $cmp5 = ($sub_ptr_sub | 0) > 0;
    if ($cmp5) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $incdec_ptr = $7 - 12 | 0;
    HEAP32[$6 >> 2] = $incdec_ptr;
    $9 = $incdec_ptr;
    $10 = $item;
    HEAP32[$9 >> 2] = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 + 4 >> 2] = HEAP32[$10 + 4 >> 2] | 0;
    HEAP32[$9 + 8 >> 2] = HEAP32[$10 + 8 >> 2] | 0;
    label = 9;
    break;
   case 6:
    _ary_modify($mrb, $1);
    $aux8 = $0 + 16 | 0;
    $capa = $aux8;
    $11 = HEAP32[$capa >> 2] | 0;
    $len = $0 + 12 | 0;
    $12 = $len;
    $13 = HEAP32[$12 >> 2] | 0;
    $add = $13 + 1 | 0;
    $cmp9 = ($11 | 0) < ($add | 0);
    if ($cmp9) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _ary_expand_capa($mrb, $1, $add);
    label = 8;
    break;
   case 8:
    $ptr13 = $0 + 20 | 0;
    $14 = $ptr13;
    $15 = HEAP32[$14 >> 2] | 0;
    $add_ptr = $15 + 12 | 0;
    $16 = HEAP32[$12 >> 2] | 0;
    _value_move640($add_ptr, $15, $16);
    $17 = HEAP32[$14 >> 2] | 0;
    $18 = $17;
    $19 = $item;
    HEAP32[$18 >> 2] = HEAP32[$19 >> 2] | 0;
    HEAP32[$18 + 4 >> 2] = HEAP32[$19 + 4 >> 2] | 0;
    HEAP32[$18 + 8 >> 2] = HEAP32[$19 + 8 >> 2] | 0;
    label = 9;
    break;
   case 9:
    $len19 = $0 + 12 | 0;
    $20 = $len19;
    $21 = HEAP32[$20 >> 2] | 0;
    $inc = $21 + 1 | 0;
    HEAP32[$20 >> 2] = $inc;
    $22 = $0;
    _mrb_write_barrier($mrb, $22);
    $23 = $agg_result;
    $24 = $self;
    HEAP32[$23 >> 2] = HEAP32[$24 >> 2] | 0;
    HEAP32[$23 + 4 >> 2] = HEAP32[$24 + 4 >> 2] | 0;
    HEAP32[$23 + 8 >> 2] = HEAP32[$24 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _value_move640($s1, $s2, $n) {
  $s1 = $s1 | 0;
  $s2 = $s2 | 0;
  $n = $n | 0;
  var $cmp = 0, $add_ptr = 0, $cmp1 = 0, $cmp415 = 0, $add_ptr2 = 0, $n_addr_018 = 0, $s2_addr_017 = 0, $s1_addr_016 = 0, $dec = 0, $incdec_ptr = 0, $incdec_ptr5 = 0, $0 = 0, $1 = 0, $cmp4 = 0, $cmp6 = 0, $cmp1020 = 0, $or_cond = 0, $n_addr_123 = 0, $s2_addr_122 = 0, $s1_addr_121 = 0, $dec9 = 0, $incdec_ptr12 = 0, $incdec_ptr13 = 0, $2 = 0, $3 = 0, $cmp10 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = $s1 >>> 0 > $s2 >>> 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    $add_ptr = $s2 + ($n * 12 & -1) | 0;
    $cmp1 = $add_ptr >>> 0 > $s1 >>> 0;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 7;
      break;
    }
   case 4:
    $cmp415 = ($n | 0) == 0;
    if ($cmp415) {
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $add_ptr2 = $s1 + ($n * 12 & -1) | 0;
    $s1_addr_016 = $add_ptr2;
    $s2_addr_017 = $add_ptr;
    $n_addr_018 = $n;
    label = 6;
    break;
   case 6:
    $dec = $n_addr_018 - 1 | 0;
    $incdec_ptr = $s1_addr_016 - 12 | 0;
    $incdec_ptr5 = $s2_addr_017 - 12 | 0;
    $0 = $incdec_ptr;
    $1 = $incdec_ptr5;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    $cmp4 = ($dec | 0) == 0;
    if ($cmp4) {
      label = 9;
      break;
    } else {
      $s1_addr_016 = $incdec_ptr;
      $s2_addr_017 = $incdec_ptr5;
      $n_addr_018 = $dec;
      label = 6;
      break;
    }
   case 7:
    $cmp6 = ($s1 | 0) == ($s2 | 0);
    $cmp1020 = ($n | 0) == 0;
    $or_cond = $cmp6 | $cmp1020;
    if ($or_cond) {
      label = 9;
      break;
    } else {
      $s1_addr_121 = $s1;
      $s2_addr_122 = $s2;
      $n_addr_123 = $n;
      label = 8;
      break;
    }
   case 8:
    $dec9 = $n_addr_123 - 1 | 0;
    $incdec_ptr12 = $s1_addr_121 + 12 | 0;
    $incdec_ptr13 = $s2_addr_122 + 12 | 0;
    $2 = $s1_addr_121;
    $3 = $s2_addr_122;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    $cmp10 = ($dec9 | 0) == 0;
    if ($cmp10) {
      label = 9;
      break;
    } else {
      $s1_addr_121 = $incdec_ptr12;
      $s2_addr_122 = $incdec_ptr13;
      $n_addr_123 = $dec9;
      label = 8;
      break;
    }
   case 9:
    return;
  }
}
function _mrb_ary_unshift_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $vals = 0, $len = 0, $p = 0, $0 = 0, $1 = 0, $call = 0, $2 = 0, $3 = 0, $and = 0, $tobool = 0, $aux = 0, $shared = 0, $4 = 0, $refcnt = 0, $5 = 0, $cmp = 0, $ptr = 0, $6 = 0, $7 = 0, $ptr4 = 0, $8 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $sub_ptr_div = 0, $9 = 0, $cmp5 = 0, $idx_neg = 0, $add_ptr = 0, $10 = 0, $cmp7 = 0, $11 = 0, $12 = 0, $aux9 = 0, $capa = 0, $13 = 0, $len10 = 0, $14 = 0, $15 = 0, $add = 0, $cmp11 = 0, $ptr16 = 0, $16 = 0, $17 = 0, $18 = 0, $add_ptr17 = 0, $19 = 0, $ptr21 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $len22 = 0, $25 = 0, $26 = 0, $add23 = 0, $27 = 0, $28 = 0, $29 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $vals = __stackBase__ | 0;
    $len = __stackBase__ + 4 | 0;
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    $call = _mrb_get_args($mrb, 96012, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $vals, HEAP32[tempInt + 4 >> 2] = $len, tempInt) | 0) | 0;
    $2 = $0;
    $3 = HEAP32[$2 >> 2] | 0;
    $and = $3 & 524288;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $aux = $0 + 16 | 0;
    $shared = $aux;
    $4 = HEAP32[$shared >> 2] | 0;
    $refcnt = $4 | 0;
    $5 = HEAP32[$refcnt >> 2] | 0;
    $cmp = ($5 | 0) == 1;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $ptr = $0 + 20 | 0;
    $6 = $ptr;
    $7 = HEAP32[$6 >> 2] | 0;
    $ptr4 = $4 + 4 | 0;
    $8 = HEAP32[$ptr4 >> 2] | 0;
    $sub_ptr_lhs_cast = $7;
    $sub_ptr_rhs_cast = $8;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $sub_ptr_div = ($sub_ptr_sub | 0) / 12 & -1;
    $9 = HEAP32[$len >> 2] | 0;
    $cmp5 = ($sub_ptr_div | 0) < ($9 | 0);
    if ($cmp5) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $idx_neg = -$9 | 0;
    $add_ptr = $7 + ($idx_neg * 12 & -1) | 0;
    HEAP32[$6 >> 2] = $add_ptr;
    label = 11;
    break;
   case 6:
    _ary_modify($mrb, $1);
    $10 = HEAP32[$len >> 2] | 0;
    $cmp7 = ($10 | 0) == 0;
    if ($cmp7) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $11 = $agg_result;
    $12 = $self;
    HEAP32[$11 >> 2] = HEAP32[$12 >> 2] | 0;
    HEAP32[$11 + 4 >> 2] = HEAP32[$12 + 4 >> 2] | 0;
    HEAP32[$11 + 8 >> 2] = HEAP32[$12 + 8 >> 2] | 0;
    label = 12;
    break;
   case 8:
    $aux9 = $0 + 16 | 0;
    $capa = $aux9;
    $13 = HEAP32[$capa >> 2] | 0;
    $len10 = $0 + 12 | 0;
    $14 = $len10;
    $15 = HEAP32[$14 >> 2] | 0;
    $add = $15 + $10 | 0;
    $cmp11 = ($13 | 0) < ($add | 0);
    if ($cmp11) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _ary_expand_capa($mrb, $1, $add);
    label = 10;
    break;
   case 10:
    $ptr16 = $0 + 20 | 0;
    $16 = $ptr16;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = HEAP32[$len >> 2] | 0;
    $add_ptr17 = $17 + ($18 * 12 & -1) | 0;
    $19 = HEAP32[$14 >> 2] | 0;
    _value_move640($add_ptr17, $17, $19);
    label = 11;
    break;
   case 11:
    $ptr21 = $0 + 20 | 0;
    $20 = $ptr21;
    $21 = HEAP32[$20 >> 2] | 0;
    $22 = HEAP32[$vals >> 2] | 0;
    $23 = HEAP32[$len >> 2] | 0;
    _array_copy($21, $22, $23);
    $24 = HEAP32[$len >> 2] | 0;
    $len22 = $0 + 12 | 0;
    $25 = $len22;
    $26 = HEAP32[$25 >> 2] | 0;
    $add23 = $26 + $24 | 0;
    HEAP32[$25 >> 2] = $add23;
    $27 = $0;
    _mrb_write_barrier($mrb, $27);
    $28 = $agg_result;
    $29 = $self;
    HEAP32[$28 >> 2] = HEAP32[$29 >> 2] | 0;
    HEAP32[$28 + 4 >> 2] = HEAP32[$29 + 4 >> 2] | 0;
    HEAP32[$28 + 8 >> 2] = HEAP32[$29 + 8 >> 2] | 0;
    label = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_bool_value647($agg_result, $boolean) {
  $agg_result = $agg_result | 0;
  $boolean = $boolean | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = $boolean << 24 >> 24 != 0 ? 2 : 0;
  return;
}
function _mrb_ary_ref($agg_result, $mrb, $ary, $n) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $ary = $ary | 0;
  $n = $n | 0;
  var $p = 0, $0 = 0, $cmp = 0, $len = 0, $1 = 0, $2 = 0, $add = 0, $cmp1 = 0, $n_addr_08 = 0, $len2 = 0, $3 = 0, $4 = 0, $cmp3 = 0, $ptr = 0, $5 = 0, $6 = 0, $arrayidx = 0, $7 = 0, $8 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $ary;
  $ary = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $ary;
    $0 = HEAP32[$p >> 2] | 0;
    $cmp = ($n | 0) < 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $n_addr_08 = $n;
      label = 4;
      break;
    }
   case 3:
    $len = $0 + 12 | 0;
    $1 = $len;
    $2 = HEAP32[$1 >> 2] | 0;
    $add = $2 + $n | 0;
    $cmp1 = ($add | 0) < 0;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      $n_addr_08 = $add;
      label = 4;
      break;
    }
   case 4:
    $len2 = $0 + 12 | 0;
    $3 = $len2;
    $4 = HEAP32[$3 >> 2] | 0;
    $cmp3 = ($4 | 0) > ($n_addr_08 | 0);
    if ($cmp3) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _mrb_nil_value632($agg_result);
    label = 7;
    break;
   case 6:
    $ptr = $0 + 20 | 0;
    $5 = $ptr;
    $6 = HEAP32[$5 >> 2] | 0;
    $arrayidx = $6 + ($n_addr_08 * 12 & -1) | 0;
    $7 = $agg_result;
    $8 = $arrayidx;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ary_set($mrb, $ary, $n, $val) {
  $mrb = $mrb | 0;
  $ary = $ary | 0;
  $n = $n | 0;
  $val = $val | 0;
  var $agg_tmp = 0, $p = 0, $0 = 0, $1 = 0, $cmp = 0, $len = 0, $2 = 0, $3 = 0, $add = 0, $cmp1 = 0, $call = 0, $4 = 0, $sub = 0, $n_addr_0 = 0, $len5 = 0, $5 = 0, $6 = 0, $cmp6 = 0, $aux = 0, $capa = 0, $7 = 0, $cmp8 = 0, $add10 = 0, $ptr = 0, $8 = 0, $9 = 0, $10 = 0, $add_ptr = 0, $add13 = 0, $sub15 = 0, $ptr19 = 0, $11 = 0, $12 = 0, $arrayidx = 0, $13 = 0, $14 = 0, $15 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $ary;
  $ary = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $p = $ary;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    _ary_modify($mrb, $1);
    $cmp = ($n | 0) < 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $n_addr_0 = $n;
      label = 5;
      break;
    }
   case 3:
    $len = $0 + 12 | 0;
    $2 = $len;
    $3 = HEAP32[$2 >> 2] | 0;
    $add = $3 + $n | 0;
    $cmp1 = ($add | 0) < 0;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      $n_addr_0 = $add;
      label = 5;
      break;
    }
   case 4:
    $call = _mrb_class_get($mrb, 93160) | 0;
    $4 = HEAP32[$2 >> 2] | 0;
    $sub = $add - $4 | 0;
    _mrb_fixnum_value633($agg_tmp, $sub);
    _mrb_raisef($mrb, $call, 92360, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    $n_addr_0 = $add;
    label = 5;
    break;
   case 5:
    $len5 = $0 + 12 | 0;
    $5 = $len5;
    $6 = HEAP32[$5 >> 2] | 0;
    $cmp6 = ($6 | 0) > ($n_addr_0 | 0);
    if ($cmp6) {
      label = 9;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $aux = $0 + 16 | 0;
    $capa = $aux;
    $7 = HEAP32[$capa >> 2] | 0;
    $cmp8 = ($7 | 0) > ($n_addr_0 | 0);
    if ($cmp8) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $add10 = $n_addr_0 + 1 | 0;
    _ary_expand_capa($mrb, $1, $add10);
    label = 8;
    break;
   case 8:
    $ptr = $0 + 20 | 0;
    $8 = $ptr;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = HEAP32[$5 >> 2] | 0;
    $add_ptr = $9 + ($10 * 12 & -1) | 0;
    $add13 = $n_addr_0 + 1 | 0;
    $sub15 = $add13 - $10 | 0;
    _ary_fill_with_nil($add_ptr, $sub15);
    HEAP32[$5 >> 2] = $add13;
    label = 9;
    break;
   case 9:
    $ptr19 = $0 + 20 | 0;
    $11 = $ptr19;
    $12 = HEAP32[$11 >> 2] | 0;
    $arrayidx = $12 + ($n_addr_0 * 12 & -1) | 0;
    $13 = $arrayidx;
    $14 = $val;
    HEAP32[$13 >> 2] = HEAP32[$14 >> 2] | 0;
    HEAP32[$13 + 4 >> 2] = HEAP32[$14 + 4 >> 2] | 0;
    HEAP32[$13 + 8 >> 2] = HEAP32[$14 + 8 >> 2] | 0;
    $15 = $0;
    _mrb_write_barrier($mrb, $15);
    STACKTOP = __stackBase__;
    return;
  }
}
function _ary_fill_with_nil($ptr, $size) {
  $ptr = $ptr | 0;
  $size = $size | 0;
  var $nil = 0, $tobool1 = 0, $0 = 0, $size_addr_03 = 0, $ptr_addr_02 = 0, $dec = 0, $incdec_ptr = 0, $1 = 0, $tobool = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $nil = __stackBase__ | 0;
    _mrb_nil_value632($nil);
    $tobool1 = ($size | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $0 = $nil;
    $ptr_addr_02 = $ptr;
    $size_addr_03 = $size;
    label = 4;
    break;
   case 4:
    $dec = $size_addr_03 - 1 | 0;
    $incdec_ptr = $ptr_addr_02 + 12 | 0;
    $1 = $ptr_addr_02;
    HEAP32[$1 >> 2] = HEAP32[$0 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2] | 0;
    $tobool = ($dec | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      $ptr_addr_02 = $incdec_ptr;
      $size_addr_03 = $dec;
      label = 4;
      break;
    }
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ary_splice($agg_result, $mrb, $ary, $head, $len, $rpl) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $ary = $ary | 0;
  $head = $head | 0;
  $len = $len | 0;
  $rpl = $rpl | 0;
  var $p = 0, $0 = 0, $1 = 0, $cmp = 0, $len1 = 0, $2 = 0, $3 = 0, $add = 0, $cmp2 = 0, $call = 0, $head_addr_0 = 0, $len5 = 0, $4 = 0, $5 = 0, $cmp6 = 0, $add8 = 0, $cmp9 = 0, $6 = 0, $sub = 0, $len_addr_0 = 0, $add13 = 0, $tt = 0, $7 = 0, $cmp14 = 0, $p17 = 0, $8 = 0, $len18 = 0, $9 = 0, $10 = 0, $ptr = 0, $11 = 0, $12 = 0, $argv_0 = 0, $argc_0 = 0, $add22 = 0, $13 = 0, $cmp24 = 0, $sub27 = 0, $add28 = 0, $size_0 = 0, $aux = 0, $capa = 0, $14 = 0, $cmp30 = 0, $15 = 0, $cmp34 = 0, $ptr36 = 0, $16 = 0, $17 = 0, $add_ptr = 0, $sub39 = 0, $cmp42 = 0, $ptr44 = 0, $18 = 0, $19 = 0, $add_ptr45_sum = 0, $add_ptr46 = 0, $add_ptr48 = 0, $sub50 = 0, $cmp5346 = 0, $ptr54 = 0, $20 = 0, $i_047 = 0, $21 = 0, $add_ptr55_sum = 0, $add_ptr56 = 0, $add_ptr57 = 0, $22 = 0, $23 = 0, $inc = 0, $exitcond = 0, $24 = 0, $25 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $ary;
  $ary = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $rpl;
  $rpl = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$rpl >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$rpl + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$rpl + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $ary;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    _ary_modify($mrb, $1);
    $cmp = ($head | 0) < 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $head_addr_0 = $head;
      label = 5;
      break;
    }
   case 3:
    $len1 = $0 + 12 | 0;
    $2 = $len1;
    $3 = HEAP32[$2 >> 2] | 0;
    $add = $3 + $head | 0;
    $cmp2 = ($add | 0) < 0;
    if ($cmp2) {
      label = 4;
      break;
    } else {
      $head_addr_0 = $add;
      label = 5;
      break;
    }
   case 4:
    $call = _mrb_class_get($mrb, 93160) | 0;
    _mrb_raise($mrb, $call, 111164);
    $head_addr_0 = $add;
    label = 5;
    break;
   case 5:
    $len5 = $0 + 12 | 0;
    $4 = $len5;
    $5 = HEAP32[$4 >> 2] | 0;
    $cmp6 = ($5 | 0) < ($len | 0);
    if ($cmp6) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $add8 = $head_addr_0 + $len | 0;
    $cmp9 = ($5 | 0) < ($add8 | 0);
    if ($cmp9) {
      label = 7;
      break;
    } else {
      $len_addr_0 = $len;
      label = 8;
      break;
    }
   case 7:
    $6 = HEAP32[$4 >> 2] | 0;
    $sub = $6 - $head_addr_0 | 0;
    $len_addr_0 = $sub;
    label = 8;
    break;
   case 8:
    $add13 = $len_addr_0 + $head_addr_0 | 0;
    $tt = $rpl + 8 | 0;
    $7 = HEAP32[$tt >> 2] | 0;
    $cmp14 = ($7 | 0) == 14;
    if ($cmp14) {
      label = 9;
      break;
    } else {
      $argc_0 = 1;
      $argv_0 = $rpl;
      label = 10;
      break;
    }
   case 9:
    $p17 = $rpl;
    $8 = HEAP32[$p17 >> 2] | 0;
    $len18 = $8 + 12 | 0;
    $9 = $len18;
    $10 = HEAP32[$9 >> 2] | 0;
    $ptr = $8 + 20 | 0;
    $11 = $ptr;
    $12 = HEAP32[$11 >> 2] | 0;
    $argc_0 = $10;
    $argv_0 = $12;
    label = 10;
    break;
   case 10:
    $add22 = $argc_0 + $head_addr_0 | 0;
    $13 = HEAP32[$4 >> 2] | 0;
    $cmp24 = ($add13 | 0) < ($13 | 0);
    if ($cmp24) {
      label = 11;
      break;
    } else {
      $size_0 = $add22;
      label = 12;
      break;
    }
   case 11:
    $sub27 = $13 - $add13 | 0;
    $add28 = $sub27 + $add22 | 0;
    $size_0 = $add28;
    label = 12;
    break;
   case 12:
    $aux = $0 + 16 | 0;
    $capa = $aux;
    $14 = HEAP32[$capa >> 2] | 0;
    $cmp30 = ($size_0 | 0) > ($14 | 0);
    if ($cmp30) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    _ary_expand_capa($mrb, $1, $size_0);
    label = 14;
    break;
   case 14:
    $15 = HEAP32[$4 >> 2] | 0;
    $cmp34 = ($head_addr_0 | 0) > ($15 | 0);
    if ($cmp34) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    $ptr36 = $0 + 20 | 0;
    $16 = $ptr36;
    $17 = HEAP32[$16 >> 2] | 0;
    $add_ptr = $17 + ($15 * 12 & -1) | 0;
    $sub39 = $head_addr_0 - $15 | 0;
    _ary_fill_with_nil($add_ptr, $sub39);
    label = 18;
    break;
   case 16:
    $cmp42 = ($head_addr_0 | 0) < ($15 | 0);
    if ($cmp42) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $ptr44 = $0 + 20 | 0;
    $18 = $ptr44;
    $19 = HEAP32[$18 >> 2] | 0;
    $add_ptr45_sum = $argc_0 + $head_addr_0 | 0;
    $add_ptr46 = $19 + ($add_ptr45_sum * 12 & -1) | 0;
    $add_ptr48 = $19 + ($add13 * 12 & -1) | 0;
    $sub50 = $15 - $add13 | 0;
    _value_move640($add_ptr46, $add_ptr48, $sub50);
    label = 18;
    break;
   case 18:
    $cmp5346 = ($argc_0 | 0) > 0;
    if ($cmp5346) {
      label = 19;
      break;
    } else {
      label = 21;
      break;
    }
   case 19:
    $ptr54 = $0 + 20 | 0;
    $20 = $ptr54;
    $i_047 = 0;
    label = 20;
    break;
   case 20:
    $21 = HEAP32[$20 >> 2] | 0;
    $add_ptr55_sum = $i_047 + $head_addr_0 | 0;
    $add_ptr56 = $21 + ($add_ptr55_sum * 12 & -1) | 0;
    $add_ptr57 = $argv_0 + ($i_047 * 12 & -1) | 0;
    $22 = $add_ptr56;
    $23 = $add_ptr57;
    HEAP32[$22 >> 2] = HEAP32[$23 >> 2] | 0;
    HEAP32[$22 + 4 >> 2] = HEAP32[$23 + 4 >> 2] | 0;
    HEAP32[$22 + 8 >> 2] = HEAP32[$23 + 8 >> 2] | 0;
    $inc = $i_047 + 1 | 0;
    $exitcond = ($inc | 0) == ($argc_0 | 0);
    if ($exitcond) {
      label = 21;
      break;
    } else {
      $i_047 = $inc;
      label = 20;
      break;
    }
   case 21:
    HEAP32[$4 >> 2] = $size_0;
    $24 = $agg_result;
    $25 = $ary;
    HEAP32[$24 >> 2] = HEAP32[$25 >> 2] | 0;
    HEAP32[$24 + 4 >> 2] = HEAP32[$25 + 4 >> 2] | 0;
    HEAP32[$24 + 8 >> 2] = HEAP32[$25 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ary_decref($mrb, $shared) {
  $mrb = $mrb | 0;
  $shared = $shared | 0;
  var $refcnt = 0, $0 = 0, $dec = 0, $cmp = 0, $ptr = 0, $1 = 0, $2 = 0, $3 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $refcnt = $shared | 0;
    $0 = HEAP32[$refcnt >> 2] | 0;
    $dec = $0 - 1 | 0;
    HEAP32[$refcnt >> 2] = $dec;
    $cmp = ($dec | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $ptr = $shared + 4 | 0;
    $1 = HEAP32[$ptr >> 2] | 0;
    $2 = $1;
    _mrb_free($mrb, $2);
    $3 = $shared;
    _mrb_free($mrb, $3);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _mrb_ary_aget($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $index = 0, $argv = 0, $size = 0, $p = 0, $0 = 0, $1 = 0, $call = 0, $2 = 0, $3 = 0, $4 = 0, $tt = 0, $5 = 0, $cmp = 0, $call2 = 0, $6 = 0, $cmp3 = 0, $len5 = 0, $7 = 0, $8 = 0, $add = 0, $cmp7 = 0, $9 = 0, $len8 = 0, $10 = 0, $11 = 0, $cmp9 = 0, $12 = 0, $i = 0, $13 = 0, $cmp14 = 0, $cmp18 = 0, $sub = 0, $cmp22 = 0, $sub_ = 0, $call27 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $index = __stackBase__ | 0;
    $argv = __stackBase__ + 4 | 0;
    $size = __stackBase__ + 8 | 0;
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    $call = _mrb_get_args($mrb, 110568, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $index, HEAP32[tempInt + 4 >> 2] = $argv, HEAP32[tempInt + 8 >> 2] = $size, tempInt) | 0) | 0;
    $2 = HEAP32[$size >> 2] | 0;
    if (($2 | 0) == 0) {
      label = 3;
      break;
    } else if (($2 | 0) == 1) {
      label = 4;
      break;
    } else {
      label = 15;
      break;
    }
   case 3:
    $3 = HEAP32[$index >> 2] | 0;
    _mrb_ary_ref($agg_result, 0, $self, $3);
    label = 16;
    break;
   case 4:
    $4 = HEAP32[$argv >> 2] | 0;
    $tt = $4 + 8 | 0;
    $5 = HEAP32[$tt >> 2] | 0;
    $cmp = ($5 | 0) == 3;
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $call2 = _mrb_class_get($mrb, 109932) | 0;
    _mrb_raise($mrb, $call2, 109428);
    label = 6;
    break;
   case 6:
    $6 = HEAP32[$index >> 2] | 0;
    $cmp3 = ($6 | 0) < 0;
    if ($cmp3) {
      label = 7;
      break;
    } else {
      $9 = $6;
      label = 8;
      break;
    }
   case 7:
    $len5 = $0 + 12 | 0;
    $7 = $len5;
    $8 = HEAP32[$7 >> 2] | 0;
    $add = $8 + $6 | 0;
    HEAP32[$index >> 2] = $add;
    $cmp7 = ($add | 0) < 0;
    if ($cmp7) {
      label = 9;
      break;
    } else {
      $9 = $add;
      label = 8;
      break;
    }
   case 8:
    $len8 = $0 + 12 | 0;
    $10 = $len8;
    $11 = HEAP32[$10 >> 2] | 0;
    $cmp9 = ($11 | 0) < ($9 | 0);
    if ($cmp9) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _mrb_nil_value632($agg_result);
    label = 16;
    break;
   case 10:
    $12 = HEAP32[$argv >> 2] | 0;
    $i = $12;
    $13 = HEAP32[$i >> 2] | 0;
    $cmp14 = ($13 | 0) < 0;
    if ($cmp14) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    _mrb_nil_value632($agg_result);
    label = 16;
    break;
   case 12:
    $cmp18 = ($11 | 0) == ($9 | 0);
    if ($cmp18) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    _mrb_ary_new($agg_result, $mrb);
    label = 16;
    break;
   case 14:
    $sub = $11 - $9 | 0;
    $cmp22 = ($13 | 0) > ($sub | 0);
    $sub_ = $cmp22 ? $sub : $13;
    _ary_subseq($agg_result, $mrb, $1, $9, $sub_);
    label = 16;
    break;
   case 15:
    $call27 = _mrb_class_get($mrb, 94912) | 0;
    _mrb_raise($mrb, $call27, 109008);
    _mrb_nil_value632($agg_result);
    label = 16;
    break;
   case 16:
    STACKTOP = __stackBase__;
    return;
  }
}
function _ary_subseq($agg_result, $mrb, $a, $beg, $len) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $a = $a | 0;
  $beg = $beg | 0;
  $len = $len | 0;
  var $call = 0, $3 = 0, $refcnt = 0, $5 = 0;
  _ary_make_shared($mrb, $a);
  $call = _mrb_obj_alloc($mrb, 14, HEAP32[$mrb + 64 >> 2] | 0) | 0;
  HEAP32[$call + 20 >> 2] = (HEAP32[$a + 20 >> 2] | 0) + ($beg * 12 & -1) | 0;
  HEAP32[$call + 12 >> 2] = $len;
  $3 = HEAP32[$a + 16 >> 2] | 0;
  HEAP32[$call + 16 >> 2] = $3;
  $refcnt = $3 | 0;
  HEAP32[$refcnt >> 2] = (HEAP32[$refcnt >> 2] | 0) + 1 | 0;
  $5 = $call;
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 524288;
  _mrb_obj_value625($agg_result, $call | 0);
  return;
}
function _mrb_ary_aset($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $argv = 0, $argc = 0, $tmp = 0, $call = 0, $0 = 0, $1 = 0, $tt = 0, $2 = 0, $cmp = 0, $call1 = 0, $3 = 0, $i = 0, $4 = 0, $arrayidx3 = 0, $5 = 0, $arrayidx4 = 0, $6 = 0, $7 = 0, $8 = 0, $i8 = 0, $9 = 0, $value10 = 0, $i11 = 0, $10 = 0, $arrayidx12 = 0, $11 = 0, $arrayidx13 = 0, $12 = 0, $13 = 0, $call14 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $argv = __stackBase__ | 0;
    $argc = __stackBase__ + 4 | 0;
    $tmp = __stackBase__ + 8 | 0;
    $call = _mrb_get_args($mrb, 96012, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $argv, HEAP32[tempInt + 4 >> 2] = $argc, tempInt) | 0) | 0;
    $0 = HEAP32[$argc >> 2] | 0;
    if (($0 | 0) == 2) {
      label = 3;
      break;
    } else if (($0 | 0) == 3) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    $1 = HEAP32[$argv >> 2] | 0;
    $tt = $1 + 8 | 0;
    $2 = HEAP32[$tt >> 2] | 0;
    $cmp = ($2 | 0) == 3;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call1 = _mrb_class_get($mrb, 109932) | 0;
    _mrb_raise($mrb, $call1, 108588);
    label = 5;
    break;
   case 5:
    $3 = HEAP32[$argv >> 2] | 0;
    $i = $3;
    $4 = HEAP32[$i >> 2] | 0;
    $arrayidx3 = $3 + 12 | 0;
    _mrb_ary_set($mrb, $self, $4, $arrayidx3);
    $5 = HEAP32[$argv >> 2] | 0;
    $arrayidx4 = $5 + 12 | 0;
    $6 = $agg_result;
    $7 = $arrayidx4;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    label = 8;
    break;
   case 6:
    $8 = HEAP32[$argv >> 2] | 0;
    $i8 = $8;
    $9 = HEAP32[$i8 >> 2] | 0;
    $value10 = $8 + 12 | 0;
    $i11 = $value10;
    $10 = HEAP32[$i11 >> 2] | 0;
    $arrayidx12 = $8 + 24 | 0;
    _mrb_ary_splice($tmp, $mrb, $self, $9, $10, $arrayidx12);
    $11 = HEAP32[$argv >> 2] | 0;
    $arrayidx13 = $11 + 24 | 0;
    $12 = $agg_result;
    $13 = $arrayidx13;
    HEAP32[$12 >> 2] = HEAP32[$13 >> 2] | 0;
    HEAP32[$12 + 4 >> 2] = HEAP32[$13 + 4 >> 2] | 0;
    HEAP32[$12 + 8 >> 2] = HEAP32[$13 + 8 >> 2] | 0;
    label = 8;
    break;
   case 7:
    $call14 = _mrb_class_get($mrb, 94912) | 0;
    _mrb_raise($mrb, $call14, 109008);
    _mrb_nil_value632($agg_result);
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ary_delete_at($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $index = 0, $val = 0, $p = 0, $0 = 0, $1 = 0, $call = 0, $2 = 0, $cmp = 0, $len1 = 0, $3 = 0, $4 = 0, $add = 0, $cmp2 = 0, $5 = 0, $len3 = 0, $6 = 0, $7 = 0, $cmp4 = 0, $8 = 0, $ptr7 = 0, $9 = 0, $10 = 0, $arrayidx = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $sub = 0, $dec13 = 0, $tobool14 = 0, $15 = 0, $add_ptr = 0, $dec16 = 0, $ptr_015 = 0, $add_ptr10 = 0, $16 = 0, $17 = 0, $dec = 0, $tobool = 0, $18 = 0, $dec12 = 0, $19 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $index = __stackBase__ | 0;
    $val = __stackBase__ + 4 | 0;
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    $call = _mrb_get_args($mrb, 96284, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $index, tempInt) | 0) | 0;
    $2 = HEAP32[$index >> 2] | 0;
    $cmp = ($2 | 0) < 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $5 = $2;
      label = 4;
      break;
    }
   case 3:
    $len1 = $0 + 12 | 0;
    $3 = $len1;
    $4 = HEAP32[$3 >> 2] | 0;
    $add = $4 + $2 | 0;
    HEAP32[$index >> 2] = $add;
    $cmp2 = ($add | 0) < 0;
    if ($cmp2) {
      label = 5;
      break;
    } else {
      $5 = $add;
      label = 4;
      break;
    }
   case 4:
    $len3 = $0 + 12 | 0;
    $6 = $len3;
    $7 = HEAP32[$6 >> 2] | 0;
    $cmp4 = ($7 | 0) > ($5 | 0);
    if ($cmp4) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _mrb_nil_value632($agg_result);
    label = 10;
    break;
   case 6:
    _ary_modify($mrb, $1);
    $8 = HEAP32[$index >> 2] | 0;
    $ptr7 = $0 + 20 | 0;
    $9 = $ptr7;
    $10 = HEAP32[$9 >> 2] | 0;
    $arrayidx = $10 + ($8 * 12 & -1) | 0;
    $11 = $val;
    $12 = $arrayidx;
    HEAP32[$11 >> 2] = HEAP32[$12 >> 2] | 0;
    HEAP32[$11 + 4 >> 2] = HEAP32[$12 + 4 >> 2] | 0;
    HEAP32[$11 + 8 >> 2] = HEAP32[$12 + 8 >> 2] | 0;
    $13 = HEAP32[$index >> 2] | 0;
    $14 = HEAP32[$6 >> 2] | 0;
    $sub = $14 - $13 | 0;
    $dec13 = $sub - 1 | 0;
    $tobool14 = ($dec13 | 0) == 0;
    if ($tobool14) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $15 = HEAP32[$9 >> 2] | 0;
    $add_ptr = $15 + ($13 * 12 & -1) | 0;
    $ptr_015 = $add_ptr;
    $dec16 = $dec13;
    label = 8;
    break;
   case 8:
    $add_ptr10 = $ptr_015 + 12 | 0;
    $16 = $ptr_015;
    $17 = $add_ptr10;
    HEAP32[$16 >> 2] = HEAP32[$17 >> 2] | 0;
    HEAP32[$16 + 4 >> 2] = HEAP32[$17 + 4 >> 2] | 0;
    HEAP32[$16 + 8 >> 2] = HEAP32[$17 + 8 >> 2] | 0;
    $dec = $dec16 - 1 | 0;
    $tobool = ($dec | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      $ptr_015 = $add_ptr10;
      $dec16 = $dec;
      label = 8;
      break;
    }
   case 9:
    $18 = HEAP32[$6 >> 2] | 0;
    $dec12 = $18 - 1 | 0;
    HEAP32[$6 >> 2] = $dec12;
    _ary_shrink_capa($mrb, $1);
    $19 = $agg_result;
    HEAP32[$19 >> 2] = HEAP32[$11 >> 2] | 0;
    HEAP32[$19 + 4 >> 2] = HEAP32[$11 + 4 >> 2] | 0;
    HEAP32[$19 + 8 >> 2] = HEAP32[$11 + 8 >> 2] | 0;
    label = 10;
    break;
   case 10:
    STACKTOP = __stackBase__;
    return;
  }
}
function _ary_shrink_capa($mrb, $a) {
  $mrb = $mrb | 0;
  $a = $a | 0;
  var $capa1 = 0, $0 = 0, $cmp = 0, $len = 0, $1 = 0, $mul = 0, $cmp2 = 0, $capa_0 = 0, $div = 0, $cmp5 = 0, $2 = 0, $mul9 = 0, $cmp10 = 0, $capa_1 = 0, $3 = 0, $cmp12 = 0, $4 = 0, $cmp15 = 0, $ptr = 0, $5 = 0, $6 = 0, $mul19 = 0, $call = 0, $7 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $capa1 = $a + 16 | 0;
    $0 = HEAP32[$capa1 >> 2] | 0;
    $cmp = ($0 | 0) < 8;
    if ($cmp) {
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $len = $a + 12 | 0;
    $1 = HEAP32[$len >> 2] | 0;
    $mul = $1 * 5 & -1;
    $cmp2 = ($0 | 0) > ($mul | 0);
    if ($cmp2) {
      $capa_0 = $0;
      label = 4;
      break;
    } else {
      label = 9;
      break;
    }
   case 4:
    $div = ($capa_0 | 0) / 2 & -1;
    $cmp5 = ($capa_0 | 0) < 8;
    if ($cmp5) {
      $capa_1 = 4;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $2 = HEAP32[$len >> 2] | 0;
    $mul9 = $2 * 5 & -1;
    $cmp10 = ($div | 0) > ($mul9 | 0);
    if ($cmp10) {
      $capa_0 = $div;
      label = 4;
      break;
    } else {
      $capa_1 = $div;
      label = 6;
      break;
    }
   case 6:
    $3 = HEAP32[$len >> 2] | 0;
    $cmp12 = ($capa_1 | 0) > ($3 | 0);
    if ($cmp12) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    $4 = HEAP32[$capa1 >> 2] | 0;
    $cmp15 = ($capa_1 | 0) < ($4 | 0);
    if ($cmp15) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    HEAP32[$capa1 >> 2] = $capa_1;
    $ptr = $a + 20 | 0;
    $5 = HEAP32[$ptr >> 2] | 0;
    $6 = $5;
    $mul19 = $capa_1 * 12 & -1;
    $call = _mrb_realloc($mrb, $6, $mul19) | 0;
    $7 = $call;
    HEAP32[$ptr >> 2] = $7;
    label = 9;
    break;
   case 9:
    return;
  }
}
function _mrb_ary_first($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $size = 0, $p = 0, $0 = 0, $1 = 0, $call = 0, $cmp = 0, $len = 0, $2 = 0, $3 = 0, $cmp1 = 0, $ptr = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $cmp2 = 0, $call4 = 0, $9 = 0, $len6 = 0, $10 = 0, $11 = 0, $cmp7 = 0, $12 = 0, $13 = 0, $and = 0, $tobool = 0, $14 = 0, $ptr13 = 0, $15 = 0, $16 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $size = __stackBase__ | 0;
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    $call = _mrb_get_args($mrb, 108260, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $size, tempInt) | 0) | 0;
    $cmp = ($call | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $len = $0 + 12 | 0;
    $2 = $len;
    $3 = HEAP32[$2 >> 2] | 0;
    $cmp1 = ($3 | 0) > 0;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $ptr = $0 + 20 | 0;
    $4 = $ptr;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg_result;
    $7 = $5;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    label = 13;
    break;
   case 5:
    _mrb_nil_value632($agg_result);
    label = 13;
    break;
   case 6:
    $8 = HEAP32[$size >> 2] | 0;
    $cmp2 = ($8 | 0) < 0;
    if ($cmp2) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $call4 = _mrb_class_get($mrb, 94912) | 0;
    _mrb_raise($mrb, $call4, 107944);
    label = 8;
    break;
   case 8:
    $9 = HEAP32[$size >> 2] | 0;
    $len6 = $0 + 12 | 0;
    $10 = $len6;
    $11 = HEAP32[$10 >> 2] | 0;
    $cmp7 = ($9 | 0) > ($11 | 0);
    if ($cmp7) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    HEAP32[$size >> 2] = $11;
    label = 10;
    break;
   case 10:
    $12 = $0;
    $13 = HEAP32[$12 >> 2] | 0;
    $and = $13 & 524288;
    $tobool = ($and | 0) == 0;
    $14 = HEAP32[$size >> 2] | 0;
    if ($tobool) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    _ary_subseq($agg_result, $mrb, $1, 0, $14);
    label = 13;
    break;
   case 12:
    $ptr13 = $0 + 20 | 0;
    $15 = $ptr13;
    $16 = HEAP32[$15 >> 2] | 0;
    _mrb_ary_new_from_values($agg_result, $mrb, $14, $16);
    label = 13;
    break;
   case 13:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ary_last($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $vals = 0, $len = 0, $p = 0, $0 = 0, $1 = 0, $call = 0, $2 = 0, $cmp = 0, $call1 = 0, $_pr = 0, $3 = 0, $cmp2 = 0, $len4 = 0, $4 = 0, $5 = 0, $cmp5 = 0, $sub = 0, $ptr = 0, $6 = 0, $7 = 0, $arrayidx = 0, $8 = 0, $9 = 0, $10 = 0, $i = 0, $11 = 0, $cmp9 = 0, $call11 = 0, $len13 = 0, $12 = 0, $13 = 0, $cmp14 = 0, $_ = 0, $14 = 0, $15 = 0, $and = 0, $tobool = 0, $cmp18 = 0, $or_cond = 0, $sub21 = 0, $ptr23 = 0, $16 = 0, $17 = 0, $add_ptr_sum = 0, $add_ptr25 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $vals = __stackBase__ | 0;
    $len = __stackBase__ + 4 | 0;
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    $call = _mrb_get_args($mrb, 96012, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $vals, HEAP32[tempInt + 4 >> 2] = $len, tempInt) | 0) | 0;
    $2 = HEAP32[$len >> 2] | 0;
    $cmp = ($2 | 0) > 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $3 = $2;
      label = 4;
      break;
    }
   case 3:
    $call1 = _mrb_class_get($mrb, 94912) | 0;
    _mrb_raise($mrb, $call1, 109008);
    $_pr = HEAP32[$len >> 2] | 0;
    $3 = $_pr;
    label = 4;
    break;
   case 4:
    $cmp2 = ($3 | 0) == 0;
    if ($cmp2) {
      label = 5;
      break;
    } else {
      label = 8;
      break;
    }
   case 5:
    $len4 = $0 + 12 | 0;
    $4 = $len4;
    $5 = HEAP32[$4 >> 2] | 0;
    $cmp5 = ($5 | 0) > 0;
    if ($cmp5) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $sub = $5 - 1 | 0;
    $ptr = $0 + 20 | 0;
    $6 = $ptr;
    $7 = HEAP32[$6 >> 2] | 0;
    $arrayidx = $7 + ($sub * 12 & -1) | 0;
    $8 = $agg_result;
    $9 = $arrayidx;
    HEAP32[$8 >> 2] = HEAP32[$9 >> 2] | 0;
    HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2] | 0;
    HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2] | 0;
    label = 13;
    break;
   case 7:
    _mrb_nil_value632($agg_result);
    label = 13;
    break;
   case 8:
    $10 = HEAP32[$vals >> 2] | 0;
    $i = $10;
    $11 = HEAP32[$i >> 2] | 0;
    $cmp9 = ($11 | 0) < 0;
    if ($cmp9) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $call11 = _mrb_class_get($mrb, 94912) | 0;
    _mrb_raise($mrb, $call11, 107944);
    label = 10;
    break;
   case 10:
    $len13 = $0 + 12 | 0;
    $12 = $len13;
    $13 = HEAP32[$12 >> 2] | 0;
    $cmp14 = ($11 | 0) > ($13 | 0);
    $_ = $cmp14 ? $13 : $11;
    $14 = $0;
    $15 = HEAP32[$14 >> 2] | 0;
    $and = $15 & 524288;
    $tobool = ($and | 0) != 0;
    $cmp18 = ($_ | 0) > 4;
    $or_cond = $tobool | $cmp18;
    if ($or_cond) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $sub21 = $13 - $_ | 0;
    _ary_subseq($agg_result, $mrb, $1, $sub21, $_);
    label = 13;
    break;
   case 12:
    $ptr23 = $0 + 20 | 0;
    $16 = $ptr23;
    $17 = HEAP32[$16 >> 2] | 0;
    $add_ptr_sum = $13 - $_ | 0;
    $add_ptr25 = $17 + ($add_ptr_sum * 12 & -1) | 0;
    _mrb_ary_new_from_values($agg_result, $mrb, $_, $add_ptr25);
    label = 13;
    break;
   case 13:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ary_index_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $obj = 0, $call = 0, $p = 0, $0 = 0, $len = 0, $1 = 0, $ptr = 0, $2 = 0, $i_0 = 0, $3 = 0, $cmp = 0, $4 = 0, $arrayidx = 0, $call3 = 0, $tobool = 0, $inc = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $obj = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 104504, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $obj, tempInt) | 0) | 0;
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $len = $0 + 12 | 0;
    $1 = $len;
    $ptr = $0 + 20 | 0;
    $2 = $ptr;
    $i_0 = 0;
    label = 3;
    break;
   case 3:
    $3 = HEAP32[$1 >> 2] | 0;
    $cmp = ($i_0 | 0) < ($3 | 0);
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $4 = HEAP32[$2 >> 2] | 0;
    $arrayidx = $4 + ($i_0 * 12 & -1) | 0;
    $call3 = _mrb_equal($mrb, $arrayidx, $obj) | 0;
    $tobool = ($call3 | 0) == 0;
    $inc = $i_0 + 1 | 0;
    if ($tobool) {
      $i_0 = $inc;
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _mrb_fixnum_value633($agg_result, $i_0);
    label = 7;
    break;
   case 6:
    _mrb_nil_value632($agg_result);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ary_rindex_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $obj = 0, $call = 0, $p = 0, $0 = 0, $len = 0, $1 = 0, $2 = 0, $i_0_in = 0, $i_0 = 0, $cmp = 0, $3 = 0, $ptr = 0, $4 = 0, $5 = 0, $arrayidx = 0, $call3 = 0, $tobool = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $obj = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 104504, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $obj, tempInt) | 0) | 0;
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $len = $0 + 12 | 0;
    $1 = $len;
    $2 = HEAP32[$1 >> 2] | 0;
    $i_0_in = $2;
    label = 3;
    break;
   case 3:
    $i_0 = $i_0_in - 1 | 0;
    $cmp = ($i_0_in | 0) > 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $3 = HEAP32[$p >> 2] | 0;
    $ptr = $3 + 20 | 0;
    $4 = $ptr;
    $5 = HEAP32[$4 >> 2] | 0;
    $arrayidx = $5 + ($i_0 * 12 & -1) | 0;
    $call3 = _mrb_equal($mrb, $arrayidx, $obj) | 0;
    $tobool = ($call3 | 0) == 0;
    if ($tobool) {
      $i_0_in = $i_0;
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _mrb_fixnum_value633($agg_result, $i_0);
    label = 7;
    break;
   case 6:
    _mrb_nil_value632($agg_result);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ary_splat($agg_result, $mrb, $v) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $v = $v | 0;
  var $tt = 0, $0 = 0, $cmp = 0, $1 = 0, $2 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $v + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 14;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $1 = $agg_result;
    $2 = $v;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    label = 5;
    break;
   case 4:
    _mrb_ary_new_from_values($agg_result, $mrb, 1, $v);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ary_clear($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $0 = 0, $3 = 0, $6 = 0, $7 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $0 = HEAP32[$self >> 2] | 0;
  _ary_modify($mrb, $0);
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  $3 = $0 + 20 | 0;
  _mrb_free($mrb, HEAP32[$3 >> 2] | 0);
  HEAP32[$3 >> 2] = 0;
  $6 = $agg_result;
  $7 = $self;
  HEAP32[$6 >> 2] = HEAP32[$7 >> 2] | 0;
  HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
  HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_empty_p($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_bool_value647($agg_result, (HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] | 0) == 0 & 1);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_check_array_type($agg_result, $mrb, $ary) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $ary = $ary | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $ary;
  $ary = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_check_convert_type($agg_result, $mrb, $ary, 14, 107476, 106948);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_entry($agg_result, $ary, $offset) {
  $agg_result = $agg_result | 0;
  $ary = $ary | 0;
  $offset = $offset | 0;
  var $cmp = 0, $p = 0, $0 = 0, $len = 0, $1 = 0, $2 = 0, $add = 0, $offset_addr_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $ary;
  $ary = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = ($offset | 0) < 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $offset_addr_0 = $offset;
      label = 4;
      break;
    }
   case 3:
    $p = $ary;
    $0 = HEAP32[$p >> 2] | 0;
    $len = $0 + 12 | 0;
    $1 = $len;
    $2 = HEAP32[$1 >> 2] | 0;
    $add = $2 + $offset | 0;
    $offset_addr_0 = $add;
    label = 4;
    break;
   case 4:
    _ary_elt($agg_result, $ary, $offset_addr_0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ary_join($agg_result, $mrb, $ary, $sep) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $ary = $ary | 0;
  $sep = $sep | 0;
  var $tmp = 0, $agg_tmp = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $ary;
  $ary = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $sep;
  $sep = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$sep >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$sep + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$sep + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $tmp = __stackBase__ | 0;
  $agg_tmp = __stackBase__ + 12 | 0;
  _mrb_obj_as_string($tmp, $mrb, $sep);
  $0 = $sep;
  $1 = $tmp;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  _mrb_ary_new($agg_tmp, $mrb);
  _join_ary($agg_result, $mrb, $ary, $sep, $agg_tmp);
  STACKTOP = __stackBase__;
  return;
}
function _kh_get_mt($h, $key) {
  $h = $h | 0;
  $key = $key | 0;
  var $conv = 0, $shl = 0, $xor = 0, $shr = 0, $xor3 = 0, $mask = 0, $0 = 0, $and = 0, $div19 = 0, $e_flags = 0, $1 = 0, $arrayidx20 = 0, $2 = 0, $rem21 = 0, $arrayidx522 = 0, $3 = 0, $and71623 = 0, $lnot24 = 0, $d_flags = 0, $4 = 0, $keys = 0, $inc = 0, $5 = 0, $div26 = 0, $k_025 = 0, $arrayidx9 = 0, $6 = 0, $and1417 = 0, $tobool15 = 0, $7 = 0, $arrayidx16 = 0, $8 = 0, $cmp = 0, $9 = 0, $add = 0, $10 = 0, $and23 = 0, $div = 0, $11 = 0, $arrayidx = 0, $12 = 0, $rem = 0, $arrayidx5 = 0, $13 = 0, $and716 = 0, $lnot = 0, $n_buckets = 0, $14 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $conv = $key << 16 >> 16;
    $shl = $conv << 2;
    $xor = $shl ^ $conv;
    $shr = $conv >> 2;
    $xor3 = $xor ^ $shr;
    $mask = $h + 32 | 0;
    $0 = HEAP32[$mask >> 2] | 0;
    $and = $0 & $xor3;
    $div19 = $and >>> 3;
    $e_flags = $h + 16 | 0;
    $1 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx20 = $1 + $div19 | 0;
    $2 = HEAP8[$arrayidx20] | 0;
    $rem21 = $and & 7;
    $arrayidx522 = $rem21 + 112148 | 0;
    $3 = HEAP8[$arrayidx522] | 0;
    $and71623 = $3 & $2;
    $lnot24 = $and71623 << 24 >> 24 == 0;
    if ($lnot24) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    $d_flags = $h + 20 | 0;
    $4 = HEAP32[$d_flags >> 2] | 0;
    $keys = $h + 24 | 0;
    $inc = $h + 36 | 0;
    $k_025 = $and;
    $div26 = $div19;
    $5 = $3;
    label = 4;
    break;
   case 4:
    $arrayidx9 = $4 + $div26 | 0;
    $6 = HEAP8[$arrayidx9] | 0;
    $and1417 = $6 & $5;
    $tobool15 = $and1417 << 24 >> 24 == 0;
    if ($tobool15) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $7 = HEAP32[$keys >> 2] | 0;
    $arrayidx16 = $7 + ($k_025 << 1) | 0;
    $8 = HEAP16[$arrayidx16 >> 1] | 0;
    $cmp = $8 << 16 >> 16 == $key << 16 >> 16;
    if ($cmp) {
      $retval_0 = $k_025;
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $9 = HEAP32[$inc >> 2] | 0;
    $add = $9 + $k_025 | 0;
    $10 = HEAP32[$mask >> 2] | 0;
    $and23 = $add & $10;
    $div = $and23 >>> 3;
    $11 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $11 + $div | 0;
    $12 = HEAP8[$arrayidx] | 0;
    $rem = $and23 & 7;
    $arrayidx5 = $rem + 112148 | 0;
    $13 = HEAP8[$arrayidx5] | 0;
    $and716 = $13 & $12;
    $lnot = $and716 << 24 >> 24 == 0;
    if ($lnot) {
      $k_025 = $and23;
      $div26 = $div;
      $5 = $13;
      label = 4;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $n_buckets = $h | 0;
    $14 = HEAP32[$n_buckets >> 2] | 0;
    $retval_0 = $14;
    label = 8;
    break;
   case 8:
    return $retval_0 | 0;
  }
  return 0;
}
function _kh_del_mt($h, $x) {
  $h = $h | 0;
  $x = $x | 0;
  var $arrayidx1 = 0, $size = 0;
  $arrayidx1 = (HEAP32[$h + 20 >> 2] | 0) + ($x >>> 3) | 0;
  HEAP8[$arrayidx1] = HEAP8[$arrayidx1] | HEAP8[112148 + ($x & 7) | 0];
  $size = $h + 4 | 0;
  HEAP32[$size >> 2] = (HEAP32[$size >> 2] | 0) - 1 | 0;
  return;
}
function _join_ary($agg_result, $mrb, $ary, $sep, $list) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $ary = $ary | 0;
  $sep = $sep | 0;
  $list = $list | 0;
  var $result = 0, $val = 0, $tmp24 = 0, $tmp31 = 0, $tmp39 = 0, $tmp40 = 0, $tmp49 = 0, $tmp58 = 0, $tmp62 = 0, $p = 0, $0 = 0, $len45 = 0, $1 = 0, $2 = 0, $cmp46 = 0, $3 = 0, $i_047 = 0, $ptr = 0, $4 = 0, $5 = 0, $arrayidx = 0, $call = 0, $tobool = 0, $call3 = 0, $inc = 0, $6 = 0, $len = 0, $7 = 0, $8 = 0, $cmp = 0, $9 = 0, $p7 = 0, $10 = 0, $len842 = 0, $11 = 0, $12 = 0, $cmp943 = 0, $tt = 0, $i15 = 0, $p19 = 0, $13 = 0, $ptr28 = 0, $14 = 0, $15 = 0, $tt30 = 0, $tmp_sroa_0_0__cast5 = 0, $tmp_sroa_2_8__idx23 = 0, $tmp_sroa_0_0__cast1 = 0, $tmp_sroa_2_8__idx18 = 0, $16 = 0, $17 = 0, $tmp_sroa_1_4__idx8 = 0, $tmp_sroa_1_4__cast9 = 0, $tmp_sroa_0_0__cast = 0, $tmp_sroa_1_4__idx = 0, $tmp_sroa_1_4__cast = 0, $18 = 0, $tmp_sroa_1_4__idx14 = 0, $tmp_sroa_1_4__cast15 = 0, $tmp_sroa_0_0__cast3 = 0, $tmp_sroa_1_4__idx11 = 0, $tmp_sroa_1_4__cast12 = 0, $p34 = 0, $19 = 0, $len8 = 0, $20 = 0, $21 = 0, $i_144 = 0, $cmp11 = 0, $22 = 0, $cmp12 = 0, $23 = 0, $tobool16 = 0, $24 = 0, $ptr20 = 0, $25 = 0, $26 = 0, $len23 = 0, $27 = 0, $28 = 0, $29 = 0, $arrayidx29 = 0, $30 = 0, $31 = 0, $32 = 0, $ptr35 = 0, $33 = 0, $34 = 0, $len38 = 0, $35 = 0, $36 = 0, $inc60 = 0, $37 = 0, $cmp9 = 0, $tmp_sroa_0_0_copyload6 = 0, $tmp_sroa_2_8_copyload24 = 0, $38 = 0, $39 = 0, $tmp_sroa_1_4_copyload16 = 0, $tmp_sroa_0_0_copyload2 = 0, $tmp_sroa_2_8_copyload19 = 0, $40 = 0, $41 = 0, $tmp_sroa_1_4_copyload10 = 0, $42 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 108 | 0;
  tempParam = $ary;
  $ary = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $sep;
  $sep = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$sep >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$sep + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$sep + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $list;
  $list = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$list >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$list + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$list + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $result = __stackBase__ | 0;
    $val = __stackBase__ + 12 | 0;
    $tmp24 = __stackBase__ + 24 | 0;
    $tmp31 = __stackBase__ + 36 | 0;
    $tmp39 = __stackBase__ + 48 | 0;
    $tmp40 = __stackBase__ + 60 | 0;
    $tmp49 = __stackBase__ + 72 | 0;
    $tmp58 = __stackBase__ + 84 | 0;
    $tmp62 = __stackBase__ + 96 | 0;
    $p = $list;
    $0 = HEAP32[$p >> 2] | 0;
    $len45 = $0 + 12 | 0;
    $1 = $len45;
    $2 = HEAP32[$1 >> 2] | 0;
    $cmp46 = ($2 | 0) > 0;
    if ($cmp46) {
      $i_047 = 0;
      $3 = $0;
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $ptr = $3 + 20 | 0;
    $4 = $ptr;
    $5 = HEAP32[$4 >> 2] | 0;
    $arrayidx = $5 + ($i_047 * 12 & -1) | 0;
    $call = _mrb_obj_equal(0, $ary, $arrayidx) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call3 = _mrb_class_get($mrb, 94912) | 0;
    _mrb_raise($mrb, $call3, 97328);
    label = 5;
    break;
   case 5:
    $inc = $i_047 + 1 | 0;
    $6 = HEAP32[$p >> 2] | 0;
    $len = $6 + 12 | 0;
    $7 = $len;
    $8 = HEAP32[$7 >> 2] | 0;
    $cmp = ($inc | 0) < ($8 | 0);
    if ($cmp) {
      $i_047 = $inc;
      $3 = $6;
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _mrb_ary_push($mrb, $list, $ary);
    _mrb_str_buf_new($result, $mrb, 64);
    $9 = $result;
    $p7 = $ary;
    $10 = HEAP32[$p7 >> 2] | 0;
    $len842 = $10 + 12 | 0;
    $11 = $len842;
    $12 = HEAP32[$11 >> 2] | 0;
    $cmp943 = ($12 | 0) > 0;
    if ($cmp943) {
      label = 7;
      break;
    } else {
      label = 20;
      break;
    }
   case 7:
    $tt = $sep + 8 | 0;
    $i15 = $sep;
    $p19 = $sep;
    $13 = HEAP32[$p7 >> 2] | 0;
    $ptr28 = $13 + 20 | 0;
    $14 = $ptr28;
    $15 = $val;
    $tt30 = $val + 8 | 0;
    $tmp_sroa_0_0__cast5 = $tmp40;
    $tmp_sroa_2_8__idx23 = $tmp40 + 8 | 0;
    $tmp_sroa_0_0__cast1 = $tmp49;
    $tmp_sroa_2_8__idx18 = $tmp49 + 8 | 0;
    $16 = $tmp58;
    $17 = $tmp49;
    $tmp_sroa_1_4__idx8 = $17 + 4 | 0;
    $tmp_sroa_1_4__cast9 = $tmp_sroa_1_4__idx8;
    $tmp_sroa_0_0__cast = $val;
    $tmp_sroa_1_4__idx = $15 + 4 | 0;
    $tmp_sroa_1_4__cast = $tmp_sroa_1_4__idx;
    $18 = $tmp40;
    $tmp_sroa_1_4__idx14 = $18 + 4 | 0;
    $tmp_sroa_1_4__cast15 = $tmp_sroa_1_4__idx14;
    $tmp_sroa_0_0__cast3 = $val;
    $tmp_sroa_1_4__idx11 = $15 + 4 | 0;
    $tmp_sroa_1_4__cast12 = $tmp_sroa_1_4__idx11;
    $p34 = $val;
    $19 = HEAP32[$p7 >> 2] | 0;
    $len8 = $19 + 12 | 0;
    $20 = $len8;
    $21 = $tmp31;
    $i_144 = 0;
    label = 8;
    break;
   case 8:
    $cmp11 = ($i_144 | 0) > 0;
    if ($cmp11) {
      label = 9;
      break;
    } else {
      label = 12;
      break;
    }
   case 9:
    $22 = HEAP32[$tt >> 2] | 0;
    $cmp12 = ($22 | 0) == 0;
    if ($cmp12) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $23 = HEAP32[$i15 >> 2] | 0;
    $tobool16 = ($23 | 0) == 0;
    if ($tobool16) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $24 = HEAP32[$p19 >> 2] | 0;
    $ptr20 = $24 + 20 | 0;
    $25 = $ptr20;
    $26 = HEAP32[$25 >> 2] | 0;
    $len23 = $24 + 12 | 0;
    $27 = $len23;
    $28 = HEAP32[$27 >> 2] | 0;
    _mrb_str_buf_cat($tmp24, $mrb, $result, $26, $28);
    label = 12;
    break;
   case 12:
    $29 = HEAP32[$14 >> 2] | 0;
    $arrayidx29 = $29 + ($i_144 * 12 & -1) | 0;
    $30 = $arrayidx29;
    HEAP32[$15 >> 2] = HEAP32[$30 >> 2] | 0;
    HEAP32[$15 + 4 >> 2] = HEAP32[$30 + 4 >> 2] | 0;
    HEAP32[$15 + 8 >> 2] = HEAP32[$30 + 8 >> 2] | 0;
    $31 = HEAP32[$tt30 >> 2] | 0;
    if (($31 | 0) == 14) {
      label = 13;
      break;
    } else if (($31 | 0) == 16) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 13:
    _join_ary($tmp31, $mrb, $val, $sep, $list);
    HEAP32[$15 >> 2] = HEAP32[$21 >> 2] | 0;
    HEAP32[$15 + 4 >> 2] = HEAP32[$21 + 4 >> 2] | 0;
    HEAP32[$15 + 8 >> 2] = HEAP32[$21 + 8 >> 2] | 0;
    label = 14;
    break;
   case 14:
    $32 = HEAP32[$p34 >> 2] | 0;
    $ptr35 = $32 + 20 | 0;
    $33 = $ptr35;
    $34 = HEAP32[$33 >> 2] | 0;
    $len38 = $32 + 12 | 0;
    $35 = $len38;
    $36 = HEAP32[$35 >> 2] | 0;
    _mrb_str_buf_cat($tmp39, $mrb, $result, $34, $36);
    $inc60 = $i_144 + 1 | 0;
    $37 = HEAP32[$20 >> 2] | 0;
    $cmp9 = ($inc60 | 0) < ($37 | 0);
    if ($cmp9) {
      $i_144 = $inc60;
      label = 8;
      break;
    } else {
      label = 20;
      break;
    }
   case 15:
    _mrb_check_string_type($tmp40, $mrb, $val);
    $tmp_sroa_0_0_copyload6 = HEAP32[$tmp_sroa_0_0__cast5 >> 2] | 0;
    $tmp_sroa_2_8_copyload24 = HEAP32[$tmp_sroa_2_8__idx23 >> 2] | 0;
    $38 = $tmp_sroa_2_8_copyload24 | $tmp_sroa_0_0_copyload6;
    $39 = ($38 | 0) == 0;
    if ($39) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $tmp_sroa_1_4_copyload16 = HEAP32[$tmp_sroa_1_4__cast15 >> 2] | 0;
    HEAP32[$tmp_sroa_0_0__cast3 >> 2] = $tmp_sroa_0_0_copyload6;
    HEAP32[$tmp_sroa_1_4__cast12 >> 2] = $tmp_sroa_1_4_copyload16;
    HEAP32[$tt30 >> 2] = $tmp_sroa_2_8_copyload24;
    label = 14;
    break;
   case 17:
    _mrb_check_convert_type($tmp49, $mrb, $val, 14, 107476, 106948);
    $tmp_sroa_0_0_copyload2 = HEAP32[$tmp_sroa_0_0__cast1 >> 2] | 0;
    $tmp_sroa_2_8_copyload19 = HEAP32[$tmp_sroa_2_8__idx18 >> 2] | 0;
    $40 = $tmp_sroa_2_8_copyload19 | $tmp_sroa_0_0_copyload2;
    $41 = ($40 | 0) == 0;
    if ($41) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $tmp_sroa_1_4_copyload10 = HEAP32[$tmp_sroa_1_4__cast9 >> 2] | 0;
    HEAP32[$tmp_sroa_0_0__cast >> 2] = $tmp_sroa_0_0_copyload2;
    HEAP32[$tmp_sroa_1_4__cast >> 2] = $tmp_sroa_1_4_copyload10;
    HEAP32[$tt30 >> 2] = $tmp_sroa_2_8_copyload19;
    label = 13;
    break;
   case 19:
    _mrb_obj_as_string($tmp58, $mrb, $val);
    HEAP32[$15 >> 2] = HEAP32[$16 >> 2] | 0;
    HEAP32[$15 + 4 >> 2] = HEAP32[$16 + 4 >> 2] | 0;
    HEAP32[$15 + 8 >> 2] = HEAP32[$16 + 8 >> 2] | 0;
    label = 14;
    break;
   case 20:
    _mrb_ary_pop($tmp62, 0, $list);
    $42 = $agg_result;
    HEAP32[$42 >> 2] = HEAP32[$9 >> 2] | 0;
    HEAP32[$42 + 4 >> 2] = HEAP32[$9 + 4 >> 2] | 0;
    HEAP32[$42 + 8 >> 2] = HEAP32[$9 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_init_array($mrb) {
  $mrb = $mrb | 0;
  var $call = 0, $1 = 0;
  $call = _mrb_define_class($mrb, 107476, HEAP32[$mrb + 44 >> 2] | 0) | 0;
  HEAP32[$mrb + 64 >> 2] = $call;
  $1 = $call;
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -522241 | 28672;
  _mrb_include_module($mrb, $call, _mrb_class_get($mrb, 106556) | 0);
  _mrb_define_class_method($mrb, $call, 106088, 362, 0);
  _mrb_define_method($mrb, $call, 96012, 74, 0);
  _mrb_define_method($mrb, $call, 105704, 432, 0);
  _mrb_define_method($mrb, $call, 105432, 424, 0);
  _mrb_define_method($mrb, $call, 106088, 644, 0);
  _mrb_define_method($mrb, $call, 104908, 830, 0);
  _mrb_define_method($mrb, $call, 104548, 728, 0);
  _mrb_define_method($mrb, $call, 104188, 548, 0);
  _mrb_define_method($mrb, $call, 103920, 116, 0);
  _mrb_define_method($mrb, $call, 103608, 480, 0);
  _mrb_define_method($mrb, $call, 103356, 864, 0);
  _mrb_define_method($mrb, $call, 103064, 616, 0);
  _mrb_define_method($mrb, $call, 102628, 630, 0);
  _mrb_define_method($mrb, $call, 102236, 328, 0);
  _mrb_define_method($mrb, $call, 102056, 812, 0);
  _mrb_define_method($mrb, $call, 101832, 334, 0);
  _mrb_define_method($mrb, $call, 101624, 584, 0);
  _mrb_define_method($mrb, $call, 101316, 424, 0);
  _mrb_define_method($mrb, $call, 101144, 630, 0);
  _mrb_define_method($mrb, $call, 100916, 550, 0);
  _mrb_define_method($mrb, $call, 100552, 56, 0);
  _mrb_define_method($mrb, $call, 100316, 190, 0);
  _mrb_define_method($mrb, $call, 99924, 536, 0);
  _mrb_define_method($mrb, $call, 99536, 334, 0);
  _mrb_define_method($mrb, $call, 99244, 644, 0);
  _mrb_define_method($mrb, $call, 99020, 662, 0);
  _mrb_define_method($mrb, $call, 98772, 44, 0);
  _mrb_define_alias($mrb, $call, 98592, 98772);
  _mrb_define_method($mrb, $call, 98436, 32, 0);
  _mrb_define_method($mrb, $call, 98224, 118, 0);
  _mrb_define_method($mrb, $call, 101608, 4, 0);
  return;
}
function _mrb_ary_join_m($agg_result, $mrb, $ary) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $ary = $ary | 0;
  var $sep = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $ary;
  $ary = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $sep = __stackBase__ | 0;
  _mrb_nil_value632($sep);
  _mrb_get_args($mrb, 97764, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $sep, tempInt) | 0);
  _mrb_ary_join($agg_result, $mrb, $ary, $sep);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_size($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_fixnum_value633($agg_result, HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_inspect($agg_result, $mrb, $ary) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $ary = $ary | 0;
  var $agg_tmp = 0, $p = 0, $0 = 0, $len = 0, $1 = 0, $2 = 0, $cmp = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $ary;
  $ary = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $p = $ary;
    $0 = HEAP32[$p >> 2] | 0;
    $len = $0 + 12 | 0;
    $1 = $len;
    $2 = HEAP32[$1 >> 2] | 0;
    $cmp = ($2 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_str_new($agg_result, $mrb, 106088, 2);
    label = 5;
    break;
   case 4:
    _mrb_ary_new($agg_tmp, $mrb);
    _inspect_ary($agg_result, $mrb, $ary, $agg_tmp);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ary_equal($agg_result, $mrb, $ary1) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $ary1 = $ary1 | 0;
  var $ary2 = 0, $agg_tmp = 0, $agg_tmp26 = 0, $call = 0, $call1 = 0, $tobool = 0, $tt = 0, $0 = 0, $cmp = 0, $cmp5 = 0, $call7 = 0, $call8 = 0, $tobool9 = 0, $call12 = 0, $conv = 0, $p = 0, $1 = 0, $len = 0, $2 = 0, $3 = 0, $p15 = 0, $4 = 0, $len16 = 0, $5 = 0, $6 = 0, $cmp17 = 0, $i_0 = 0, $7 = 0, $len23 = 0, $8 = 0, $9 = 0, $cmp24 = 0, $call27 = 0, $tobool28 = 0, $inc = 0, $equal_p_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  tempParam = $ary1;
  $ary1 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary1 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary1 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary1 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ary2 = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $agg_tmp26 = __stackBase__ + 24 | 0;
    $call = _mrb_get_args($mrb, 104504, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $ary2, tempInt) | 0) | 0;
    $call1 = _mrb_obj_equal(0, $ary1, $ary2) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $equal_p_0 = 1;
      label = 10;
      break;
    }
   case 3:
    $tt = $ary2 + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = $0 >>> 0 < 8;
    if ($cmp) {
      $equal_p_0 = 0;
      label = 10;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $cmp5 = ($0 | 0) == 14;
    if ($cmp5) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $call7 = _mrb_intern2($mrb, 106948, 6) | 0;
    $call8 = _mrb_respond_to($mrb, $ary2, $call7) | 0;
    $tobool9 = ($call8 | 0) == 0;
    if ($tobool9) {
      $equal_p_0 = 0;
      label = 10;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $call12 = _mrb_equal($mrb, $ary2, $ary1) | 0;
    $conv = $call12 & 255;
    $equal_p_0 = $conv;
    label = 10;
    break;
   case 7:
    $p = $ary1;
    $1 = HEAP32[$p >> 2] | 0;
    $len = $1 + 12 | 0;
    $2 = $len;
    $3 = HEAP32[$2 >> 2] | 0;
    $p15 = $ary2;
    $4 = HEAP32[$p15 >> 2] | 0;
    $len16 = $4 + 12 | 0;
    $5 = $len16;
    $6 = HEAP32[$5 >> 2] | 0;
    $cmp17 = ($3 | 0) == ($6 | 0);
    if ($cmp17) {
      $i_0 = 0;
      label = 8;
      break;
    } else {
      $equal_p_0 = 0;
      label = 10;
      break;
    }
   case 8:
    $7 = HEAP32[$p >> 2] | 0;
    $len23 = $7 + 12 | 0;
    $8 = $len23;
    $9 = HEAP32[$8 >> 2] | 0;
    $cmp24 = ($i_0 | 0) < ($9 | 0);
    if ($cmp24) {
      label = 9;
      break;
    } else {
      $equal_p_0 = 1;
      label = 10;
      break;
    }
   case 9:
    _ary_elt($agg_tmp, $ary1, $i_0);
    _ary_elt($agg_tmp26, $ary2, $i_0);
    $call27 = _mrb_equal($mrb, $agg_tmp, $agg_tmp26) | 0;
    $tobool28 = ($call27 | 0) == 0;
    $inc = $i_0 + 1 | 0;
    if ($tobool28) {
      $equal_p_0 = 0;
      label = 10;
      break;
    } else {
      $i_0 = $inc;
      label = 8;
      break;
    }
   case 10:
    _mrb_bool_value647($agg_result, $equal_p_0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ary_eql($agg_result, $mrb, $ary1) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $ary1 = $ary1 | 0;
  var $ary2 = 0, $agg_tmp = 0, $agg_tmp14 = 0, $call = 0, $call1 = 0, $tobool = 0, $tt = 0, $0 = 0, $cmp = 0, $p = 0, $1 = 0, $len = 0, $2 = 0, $3 = 0, $p5 = 0, $4 = 0, $len6 = 0, $5 = 0, $6 = 0, $cmp7 = 0, $i_0 = 0, $7 = 0, $len12 = 0, $8 = 0, $9 = 0, $cmp13 = 0, $call15 = 0, $tobool16 = 0, $inc = 0, $eql_p_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  tempParam = $ary1;
  $ary1 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary1 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary1 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary1 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ary2 = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $agg_tmp14 = __stackBase__ + 24 | 0;
    $call = _mrb_get_args($mrb, 104504, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $ary2, tempInt) | 0) | 0;
    $call1 = _mrb_obj_equal(0, $ary1, $ary2) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $eql_p_0 = 1;
      label = 7;
      break;
    }
   case 3:
    $tt = $ary2 + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 14;
    if ($cmp) {
      label = 4;
      break;
    } else {
      $eql_p_0 = 0;
      label = 7;
      break;
    }
   case 4:
    $p = $ary1;
    $1 = HEAP32[$p >> 2] | 0;
    $len = $1 + 12 | 0;
    $2 = $len;
    $3 = HEAP32[$2 >> 2] | 0;
    $p5 = $ary2;
    $4 = HEAP32[$p5 >> 2] | 0;
    $len6 = $4 + 12 | 0;
    $5 = $len6;
    $6 = HEAP32[$5 >> 2] | 0;
    $cmp7 = ($3 | 0) == ($6 | 0);
    if ($cmp7) {
      $i_0 = 0;
      label = 5;
      break;
    } else {
      $eql_p_0 = 0;
      label = 7;
      break;
    }
   case 5:
    $7 = HEAP32[$p >> 2] | 0;
    $len12 = $7 + 12 | 0;
    $8 = $len12;
    $9 = HEAP32[$8 >> 2] | 0;
    $cmp13 = ($i_0 | 0) < ($9 | 0);
    if ($cmp13) {
      label = 6;
      break;
    } else {
      $eql_p_0 = 1;
      label = 7;
      break;
    }
   case 6:
    _ary_elt($agg_tmp, $ary1, $i_0);
    _ary_elt($agg_tmp14, $ary2, $i_0);
    $call15 = _mrb_eql($mrb, $agg_tmp, $agg_tmp14) | 0;
    $tobool16 = ($call15 | 0) == 0;
    $inc = $i_0 + 1 | 0;
    if ($tobool16) {
      $eql_p_0 = 0;
      label = 7;
      break;
    } else {
      $i_0 = $inc;
      label = 5;
      break;
    }
   case 7:
    _mrb_bool_value647($agg_result, $eql_p_0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _inspect_ary($agg_result, $mrb, $ary, $list) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $ary = $ary | 0;
  $list = $list | 0;
  var $arystr = 0, $head = 0, $sep = 0, $tail = 0, $tmp3 = 0, $tmp15 = 0, $tmp27 = 0, $tmp32 = 0, $tmp40 = 0, $tmp45 = 0, $tmp46 = 0, $0 = 0, $1 = 0, $p = 0, $2 = 0, $len = 0, $3 = 0, $4 = 0, $ptr = 0, $5 = 0, $i_0 = 0, $cmp = 0, $6 = 0, $arrayidx = 0, $call = 0, $tobool = 0, $inc = 0, $7 = 0, $p6 = 0, $8 = 0, $len723 = 0, $9 = 0, $10 = 0, $cmp824 = 0, $arraydecay14 = 0, $11 = 0, $ptr19 = 0, $12 = 0, $len7 = 0, $13 = 0, $i_125 = 0, $call11 = 0, $cmp12 = 0, $14 = 0, $arrayidx20 = 0, $tt = 0, $15 = 0, $cmp21 = 0, $s_sroa_0_0_in_in = 0, $s_sroa_0_0_in = 0, $s_sroa_0_0 = 0, $ptr36 = 0, $16 = 0, $17 = 0, $len39 = 0, $18 = 0, $19 = 0, $inc42 = 0, $20 = 0, $cmp8 = 0, $21 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 108 | 0;
  tempParam = $ary;
  $ary = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $list;
  $list = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$list >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$list + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$list + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $arystr = __stackBase__ | 0;
    $head = __stackBase__ + 12 | 0;
    $sep = __stackBase__ + 16 | 0;
    $tail = __stackBase__ + 20 | 0;
    $tmp3 = __stackBase__ + 24 | 0;
    $tmp15 = __stackBase__ + 36 | 0;
    $tmp27 = __stackBase__ + 48 | 0;
    $tmp32 = __stackBase__ + 60 | 0;
    $tmp40 = __stackBase__ + 72 | 0;
    $tmp45 = __stackBase__ + 84 | 0;
    $tmp46 = __stackBase__ + 96 | 0;
    $0 = $head | 0;
    HEAP8[$0] = 91;
    HEAP16[$sep >> 1] = 8236;
    $1 = $tail | 0;
    HEAP8[$1] = 93;
    $p = $list;
    $2 = HEAP32[$p >> 2] | 0;
    $len = $2 + 12 | 0;
    $3 = $len;
    $4 = HEAP32[$3 >> 2] | 0;
    $ptr = $2 + 20 | 0;
    $5 = $ptr;
    $i_0 = 0;
    label = 3;
    break;
   case 3:
    $cmp = ($i_0 | 0) < ($4 | 0);
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $6 = HEAP32[$5 >> 2] | 0;
    $arrayidx = $6 + ($i_0 * 12 & -1) | 0;
    $call = _mrb_obj_equal(0, $ary, $arrayidx) | 0;
    $tobool = ($call | 0) == 0;
    $inc = $i_0 + 1 | 0;
    if ($tobool) {
      $i_0 = $inc;
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _mrb_str_new($agg_result, $mrb, 98004, 5);
    label = 15;
    break;
   case 6:
    _mrb_ary_push($mrb, $list, $ary);
    _mrb_str_buf_new($arystr, $mrb, 64);
    $7 = $arystr;
    _mrb_str_buf_cat($tmp3, $mrb, $arystr, $0, 1);
    $p6 = $ary;
    $8 = HEAP32[$p6 >> 2] | 0;
    $len723 = $8 + 12 | 0;
    $9 = $len723;
    $10 = HEAP32[$9 >> 2] | 0;
    $cmp824 = ($10 | 0) > 0;
    if ($cmp824) {
      label = 7;
      break;
    } else {
      label = 14;
      break;
    }
   case 7:
    $arraydecay14 = $sep;
    $11 = HEAP32[$p6 >> 2] | 0;
    $ptr19 = $11 + 20 | 0;
    $12 = $ptr19;
    $len7 = $11 + 12 | 0;
    $13 = $len7;
    $i_125 = 0;
    label = 8;
    break;
   case 8:
    $call11 = _mrb_gc_arena_save($mrb) | 0;
    $cmp12 = ($i_125 | 0) > 0;
    if ($cmp12) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _mrb_str_buf_cat($tmp15, $mrb, $arystr, $arraydecay14, 2);
    label = 10;
    break;
   case 10:
    $14 = HEAP32[$12 >> 2] | 0;
    $arrayidx20 = $14 + ($i_125 * 12 & -1) | 0;
    $tt = $14 + ($i_125 * 12 & -1) + 8 | 0;
    $15 = HEAP32[$tt >> 2] | 0;
    $cmp21 = ($15 | 0) == 14;
    if ($cmp21) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    _inspect_ary($tmp27, $mrb, $arrayidx20, $list);
    $s_sroa_0_0_in_in = $tmp27;
    label = 13;
    break;
   case 12:
    _mrb_inspect($tmp32, $mrb, $arrayidx20);
    $s_sroa_0_0_in_in = $tmp32;
    label = 13;
    break;
   case 13:
    $s_sroa_0_0_in = $s_sroa_0_0_in_in;
    $s_sroa_0_0 = HEAP32[$s_sroa_0_0_in >> 2] | 0;
    $ptr36 = $s_sroa_0_0 + 20 | 0;
    $16 = $ptr36;
    $17 = HEAP32[$16 >> 2] | 0;
    $len39 = $s_sroa_0_0 + 12 | 0;
    $18 = $len39;
    $19 = HEAP32[$18 >> 2] | 0;
    _mrb_str_buf_cat($tmp40, $mrb, $arystr, $17, $19);
    _mrb_gc_arena_restore($mrb, $call11);
    $inc42 = $i_125 + 1 | 0;
    $20 = HEAP32[$13 >> 2] | 0;
    $cmp8 = ($inc42 | 0) < ($20 | 0);
    if ($cmp8) {
      $i_125 = $inc42;
      label = 8;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    _mrb_str_buf_cat($tmp45, $mrb, $arystr, $1, 1);
    _mrb_ary_pop($tmp46, 0, $list);
    $21 = $agg_result;
    HEAP32[$21 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$21 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$21 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    label = 15;
    break;
   case 15:
    STACKTOP = __stackBase__;
    return;
  }
}
function _kh_alloc_mt($h) {
  $h = $h | 0;
  var $0 = 0, $shr = 0, $shr1 = 0, $mrb = 0, $call = 0, $e_flags = 0, $div3 = 0, $d_flags = 0;
  $0 = HEAP32[$h >> 2] | 0;
  HEAP32[$h + 8 >> 2] = 0;
  HEAP32[$h + 4 >> 2] = 0;
  $shr = $0 >>> 2;
  $shr1 = $0 >>> 1;
  HEAP32[$h + 12 >> 2] = $shr | $shr1;
  $mrb = $h + 40 | 0;
  $call = _mrb_malloc(HEAP32[$mrb >> 2] | 0, $shr) | 0;
  $e_flags = $h + 16 | 0;
  HEAP32[$e_flags >> 2] = $call;
  $div3 = $0 >>> 3;
  $d_flags = $h + 20 | 0;
  HEAP32[$d_flags >> 2] = $call + $div3 | 0;
  _kh_fill_flags751(HEAP32[$e_flags >> 2] | 0, -1, $div3);
  _kh_fill_flags751(HEAP32[$d_flags >> 2] | 0, 0, $div3);
  HEAP32[$h + 24 >> 2] = _mrb_malloc(HEAP32[$mrb >> 2] | 0, $0 << 1) | 0;
  HEAP32[$h + 28 >> 2] = _mrb_malloc(HEAP32[$mrb >> 2] | 0, $0 << 2) | 0;
  HEAP32[$h + 32 >> 2] = $0 - 1 | 0;
  HEAP32[$h + 36 >> 2] = $shr1 - 1 | 0;
  return;
}
function _kh_fill_flags751($p, $c, $len) {
  $p = $p | 0;
  $c = $c | 0;
  $len = $len | 0;
  var $cmp1 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp1 = ($len | 0) == 0;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _memset($p | 0, $c | 0, $len | 0);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _kh_init_mt_size($mrb, $size) {
  $mrb = $mrb | 0;
  $size = $size | 0;
  var $call = 0, $0 = 0, $dec = 0, $or = 0, $or2 = 0, $or4 = 0, $or6 = 0;
  $call = _mrb_calloc($mrb, 1, 44) | 0;
  $0 = $call;
  $dec = $size >>> 0 < 8 ? 7 : $size - 1 | 0;
  $or = $dec >>> 1 | $dec;
  $or2 = $or >>> 2 | $or;
  $or4 = $or2 >>> 4 | $or2;
  $or6 = $or4 >>> 8 | $or4;
  HEAP32[$call >> 2] = ($or6 >>> 16 | $or6) + 1 | 0;
  HEAP32[$call + 40 >> 2] = $mrb;
  _kh_alloc_mt($0);
  return $0 | 0;
}
function _kh_init_mt($mrb) {
  $mrb = $mrb | 0;
  return _kh_init_mt_size($mrb, 32) | 0;
}
function _kh_destroy_mt($h) {
  $h = $h | 0;
  var $tobool = 0, $mrb = 0, $0 = 0, $keys = 0, $1 = 0, $2 = 0, $3 = 0, $vals = 0, $4 = 0, $5 = 0, $6 = 0, $e_flags = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($h | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $mrb = $h + 40 | 0;
    $0 = HEAP32[$mrb >> 2] | 0;
    $keys = $h + 24 | 0;
    $1 = HEAP32[$keys >> 2] | 0;
    $2 = $1;
    _mrb_free($0, $2);
    $3 = HEAP32[$mrb >> 2] | 0;
    $vals = $h + 28 | 0;
    $4 = HEAP32[$vals >> 2] | 0;
    $5 = $4;
    _mrb_free($3, $5);
    $6 = HEAP32[$mrb >> 2] | 0;
    $e_flags = $h + 16 | 0;
    $7 = HEAP32[$e_flags >> 2] | 0;
    _mrb_free($6, $7);
    $8 = HEAP32[$mrb >> 2] | 0;
    $9 = $h;
    _mrb_free($8, $9);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _kh_resize_mt($h, $new_n_buckets) {
  $h = $h | 0;
  $new_n_buckets = $new_n_buckets | 0;
  var $cmp = 0, $new_n_buckets_op = 0, $dec = 0, $shr = 0, $or = 0, $shr1 = 0, $or2 = 0, $shr3 = 0, $or4 = 0, $shr5 = 0, $or6 = 0, $shr7 = 0, $or8 = 0, $inc = 0, $e_flags = 0, $0 = 0, $keys = 0, $1 = 0, $vals = 0, $2 = 0, $n_buckets = 0, $3 = 0, $cmp1033 = 0, $i_034 = 0, $div = 0, $arrayidx = 0, $4 = 0, $rem = 0, $arrayidx11 = 0, $5 = 0, $and32 = 0, $tobool = 0, $arrayidx14 = 0, $6 = 0, $call = 0, $arrayidx15 = 0, $7 = 0, $8 = 0, $arrayidx17 = 0, $inc19 = 0, $exitcond = 0, $mrb = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = $new_n_buckets >>> 0 < 8;
    $new_n_buckets_op = $new_n_buckets - 1 | 0;
    $dec = $cmp ? 7 : $new_n_buckets_op;
    $shr = $dec >>> 1;
    $or = $shr | $dec;
    $shr1 = $or >>> 2;
    $or2 = $shr1 | $or;
    $shr3 = $or2 >>> 4;
    $or4 = $shr3 | $or2;
    $shr5 = $or4 >>> 8;
    $or6 = $shr5 | $or4;
    $shr7 = $or6 >>> 16;
    $or8 = $shr7 | $or6;
    $inc = $or8 + 1 | 0;
    $e_flags = $h + 16 | 0;
    $0 = HEAP32[$e_flags >> 2] | 0;
    $keys = $h + 24 | 0;
    $1 = HEAP32[$keys >> 2] | 0;
    $vals = $h + 28 | 0;
    $2 = HEAP32[$vals >> 2] | 0;
    $n_buckets = $h | 0;
    $3 = HEAP32[$n_buckets >> 2] | 0;
    HEAP32[$n_buckets >> 2] = $inc;
    _kh_alloc_mt($h);
    $cmp1033 = ($3 | 0) == 0;
    if ($cmp1033) {
      label = 6;
      break;
    } else {
      $i_034 = 0;
      label = 3;
      break;
    }
   case 3:
    $div = $i_034 >>> 3;
    $arrayidx = $0 + $div | 0;
    $4 = HEAP8[$arrayidx] | 0;
    $rem = $i_034 & 7;
    $arrayidx11 = $rem + 112148 | 0;
    $5 = HEAP8[$arrayidx11] | 0;
    $and32 = $5 & $4;
    $tobool = $and32 << 24 >> 24 == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $arrayidx14 = $1 + ($i_034 << 1) | 0;
    $6 = HEAP16[$arrayidx14 >> 1] | 0;
    $call = _kh_put_mt($h, $6) | 0;
    $arrayidx15 = $2 + ($i_034 << 2) | 0;
    $7 = HEAP32[$arrayidx15 >> 2] | 0;
    $8 = HEAP32[$vals >> 2] | 0;
    $arrayidx17 = $8 + ($call << 2) | 0;
    HEAP32[$arrayidx17 >> 2] = $7;
    label = 5;
    break;
   case 5:
    $inc19 = $i_034 + 1 | 0;
    $exitcond = ($inc19 | 0) == ($3 | 0);
    if ($exitcond) {
      label = 6;
      break;
    } else {
      $i_034 = $inc19;
      label = 3;
      break;
    }
   case 6:
    $mrb = $h + 40 | 0;
    $9 = HEAP32[$mrb >> 2] | 0;
    _mrb_free($9, $0);
    $10 = HEAP32[$mrb >> 2] | 0;
    $11 = $1;
    _mrb_free($10, $11);
    $12 = HEAP32[$mrb >> 2] | 0;
    $13 = $2;
    _mrb_free($12, $13);
    return;
  }
}
function _kh_put_mt($h, $key) {
  $h = $h | 0;
  $key = $key | 0;
  var $n_occupied = 0, $0 = 0, $upper_bound = 0, $1 = 0, $cmp = 0, $n_buckets = 0, $2 = 0, $mul = 0, $conv = 0, $shl = 0, $xor = 0, $shr = 0, $xor3 = 0, $mask = 0, $3 = 0, $and = 0, $keys = 0, $div44 = 0, $e_flags = 0, $4 = 0, $arrayidx45 = 0, $5 = 0, $rem46 = 0, $arrayidx547 = 0, $6 = 0, $and74048 = 0, $tobool49 = 0, $d_flags = 0, $7 = 0, $inc = 0, $8 = 0, $arrayidx552 = 0, $div51 = 0, $k_050 = 0, $arrayidx9 = 0, $9 = 0, $and1441 = 0, $phitmp = 0, $10 = 0, $arrayidx16 = 0, $11 = 0, $cmp19 = 0, $12 = 0, $add = 0, $13 = 0, $and24 = 0, $div = 0, $14 = 0, $arrayidx = 0, $15 = 0, $rem = 0, $arrayidx5 = 0, $16 = 0, $and740 = 0, $tobool = 0, $arrayidx5_lcssa = 0, $div_lcssa = 0, $k_0_lcssa = 0, $17 = 0, $arrayidx27 = 0, $18 = 0, $19 = 0, $and3242 = 0, $tobool33 = 0, $keys35 = 0, $20 = 0, $arrayidx36 = 0, $21 = 0, $neg = 0, $22 = 0, $arrayidx42 = 0, $23 = 0, $and44 = 0, $size = 0, $24 = 0, $inc46 = 0, $25 = 0, $inc48 = 0, $d_flags50 = 0, $26 = 0, $arrayidx51 = 0, $27 = 0, $and5643 = 0, $tobool57 = 0, $keys59 = 0, $28 = 0, $arrayidx60 = 0, $29 = 0, $neg64 = 0, $30 = 0, $arrayidx67 = 0, $31 = 0, $and69 = 0, $size71 = 0, $32 = 0, $inc72 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $n_occupied = $h + 8 | 0;
    $0 = HEAP32[$n_occupied >> 2] | 0;
    $upper_bound = $h + 12 | 0;
    $1 = HEAP32[$upper_bound >> 2] | 0;
    $cmp = $0 >>> 0 < $1 >>> 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $n_buckets = $h | 0;
    $2 = HEAP32[$n_buckets >> 2] | 0;
    $mul = $2 << 1;
    _kh_resize_mt($h, $mul);
    label = 4;
    break;
   case 4:
    $conv = $key << 16 >> 16;
    $shl = $conv << 2;
    $xor = $shl ^ $conv;
    $shr = $conv >> 2;
    $xor3 = $xor ^ $shr;
    $mask = $h + 32 | 0;
    $3 = HEAP32[$mask >> 2] | 0;
    $and = $3 & $xor3;
    $keys = $h + 24 | 0;
    $div44 = $and >>> 3;
    $e_flags = $h + 16 | 0;
    $4 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx45 = $4 + $div44 | 0;
    $5 = HEAP8[$arrayidx45] | 0;
    $rem46 = $and & 7;
    $arrayidx547 = $rem46 + 112148 | 0;
    $6 = HEAP8[$arrayidx547] | 0;
    $and74048 = $6 & $5;
    $tobool49 = $and74048 << 24 >> 24 == 0;
    if ($tobool49) {
      label = 5;
      break;
    } else {
      $k_0_lcssa = $and;
      $div_lcssa = $div44;
      $arrayidx5_lcssa = $arrayidx547;
      label = 9;
      break;
    }
   case 5:
    $d_flags = $h + 20 | 0;
    $7 = HEAP32[$d_flags >> 2] | 0;
    $inc = $h + 36 | 0;
    $k_050 = $and;
    $div51 = $div44;
    $arrayidx552 = $arrayidx547;
    $8 = $6;
    label = 6;
    break;
   case 6:
    $arrayidx9 = $7 + $div51 | 0;
    $9 = HEAP8[$arrayidx9] | 0;
    $and1441 = $9 & $8;
    $phitmp = $and1441 << 24 >> 24 == 0;
    if ($phitmp) {
      label = 7;
      break;
    } else {
      $k_0_lcssa = $k_050;
      $div_lcssa = $div51;
      $arrayidx5_lcssa = $arrayidx552;
      label = 9;
      break;
    }
   case 7:
    $10 = HEAP32[$keys >> 2] | 0;
    $arrayidx16 = $10 + ($k_050 << 1) | 0;
    $11 = HEAP16[$arrayidx16 >> 1] | 0;
    $cmp19 = $11 << 16 >> 16 == $key << 16 >> 16;
    if ($cmp19) {
      $k_0_lcssa = $k_050;
      $div_lcssa = $div51;
      $arrayidx5_lcssa = $arrayidx552;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $12 = HEAP32[$inc >> 2] | 0;
    $add = $12 + $k_050 | 0;
    $13 = HEAP32[$mask >> 2] | 0;
    $and24 = $add & $13;
    $div = $and24 >>> 3;
    $14 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $14 + $div | 0;
    $15 = HEAP8[$arrayidx] | 0;
    $rem = $and24 & 7;
    $arrayidx5 = $rem + 112148 | 0;
    $16 = HEAP8[$arrayidx5] | 0;
    $and740 = $16 & $15;
    $tobool = $and740 << 24 >> 24 == 0;
    if ($tobool) {
      $k_050 = $and24;
      $div51 = $div;
      $arrayidx552 = $arrayidx5;
      $8 = $16;
      label = 6;
      break;
    } else {
      $k_0_lcssa = $and24;
      $div_lcssa = $div;
      $arrayidx5_lcssa = $arrayidx5;
      label = 9;
      break;
    }
   case 9:
    $17 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx27 = $17 + $div_lcssa | 0;
    $18 = HEAP8[$arrayidx27] | 0;
    $19 = HEAP8[$arrayidx5_lcssa] | 0;
    $and3242 = $19 & $18;
    $tobool33 = $and3242 << 24 >> 24 == 0;
    if ($tobool33) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $keys35 = $h + 24 | 0;
    $20 = HEAP32[$keys35 >> 2] | 0;
    $arrayidx36 = $20 + ($k_0_lcssa << 1) | 0;
    HEAP16[$arrayidx36 >> 1] = $key;
    $21 = HEAP8[$arrayidx5_lcssa] | 0;
    $neg = $21 ^ -1;
    $22 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx42 = $22 + $div_lcssa | 0;
    $23 = HEAP8[$arrayidx42] | 0;
    $and44 = $23 & $neg;
    HEAP8[$arrayidx42] = $and44;
    $size = $h + 4 | 0;
    $24 = HEAP32[$size >> 2] | 0;
    $inc46 = $24 + 1 | 0;
    HEAP32[$size >> 2] = $inc46;
    $25 = HEAP32[$n_occupied >> 2] | 0;
    $inc48 = $25 + 1 | 0;
    HEAP32[$n_occupied >> 2] = $inc48;
    label = 13;
    break;
   case 11:
    $d_flags50 = $h + 20 | 0;
    $26 = HEAP32[$d_flags50 >> 2] | 0;
    $arrayidx51 = $26 + $div_lcssa | 0;
    $27 = HEAP8[$arrayidx51] | 0;
    $and5643 = $27 & $19;
    $tobool57 = $and5643 << 24 >> 24 == 0;
    if ($tobool57) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $keys59 = $h + 24 | 0;
    $28 = HEAP32[$keys59 >> 2] | 0;
    $arrayidx60 = $28 + ($k_0_lcssa << 1) | 0;
    HEAP16[$arrayidx60 >> 1] = $key;
    $29 = HEAP8[$arrayidx5_lcssa] | 0;
    $neg64 = $29 ^ -1;
    $30 = HEAP32[$d_flags50 >> 2] | 0;
    $arrayidx67 = $30 + $div_lcssa | 0;
    $31 = HEAP8[$arrayidx67] | 0;
    $and69 = $31 & $neg64;
    HEAP8[$arrayidx67] = $and69;
    $size71 = $h + 4 | 0;
    $32 = HEAP32[$size71 >> 2] | 0;
    $inc72 = $32 + 1 | 0;
    HEAP32[$size71 >> 2] = $inc72;
    label = 13;
    break;
   case 13:
    return $k_0_lcssa | 0;
  }
  return 0;
}
function _kh_copy_mt($mrb, $h) {
  $mrb = $mrb | 0;
  $h = $h | 0;
  var $call = 0, $n_buckets = 0, $0 = 0, $cmp16 = 0, $e_flags = 0, $d_flags = 0, $keys = 0, $vals = 0, $vals14 = 0, $k_017 = 0, $div = 0, $1 = 0, $arrayidx = 0, $2 = 0, $rem = 0, $arrayidx1 = 0, $3 = 0, $and14 = 0, $tobool = 0, $4 = 0, $arrayidx4 = 0, $5 = 0, $and915 = 0, $tobool10 = 0, $6 = 0, $arrayidx11 = 0, $7 = 0, $call12 = 0, $8 = 0, $arrayidx13 = 0, $9 = 0, $10 = 0, $arrayidx15 = 0, $inc = 0, $11 = 0, $cmp = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _kh_init_mt($mrb) | 0;
    $n_buckets = $h | 0;
    $0 = HEAP32[$n_buckets >> 2] | 0;
    $cmp16 = ($0 | 0) == 0;
    if ($cmp16) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $e_flags = $h + 16 | 0;
    $d_flags = $h + 20 | 0;
    $keys = $h + 24 | 0;
    $vals = $h + 28 | 0;
    $vals14 = $call + 28 | 0;
    $k_017 = 0;
    label = 4;
    break;
   case 4:
    $div = $k_017 >>> 3;
    $1 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $1 + $div | 0;
    $2 = HEAP8[$arrayidx] | 0;
    $rem = $k_017 & 7;
    $arrayidx1 = $rem + 112148 | 0;
    $3 = HEAP8[$arrayidx1] | 0;
    $and14 = $3 & $2;
    $tobool = $and14 << 24 >> 24 == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    $4 = HEAP32[$d_flags >> 2] | 0;
    $arrayidx4 = $4 + $div | 0;
    $5 = HEAP8[$arrayidx4] | 0;
    $and915 = $5 & $3;
    $tobool10 = $and915 << 24 >> 24 == 0;
    if ($tobool10) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $6 = HEAP32[$keys >> 2] | 0;
    $arrayidx11 = $6 + ($k_017 << 1) | 0;
    $7 = HEAP16[$arrayidx11 >> 1] | 0;
    $call12 = _kh_put_mt($call, $7) | 0;
    $8 = HEAP32[$vals >> 2] | 0;
    $arrayidx13 = $8 + ($k_017 << 2) | 0;
    $9 = HEAP32[$arrayidx13 >> 2] | 0;
    $10 = HEAP32[$vals14 >> 2] | 0;
    $arrayidx15 = $10 + ($call12 << 2) | 0;
    HEAP32[$arrayidx15 >> 2] = $9;
    label = 7;
    break;
   case 7:
    $inc = $k_017 + 1 | 0;
    $11 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($inc | 0) == ($11 | 0);
    if ($cmp) {
      label = 8;
      break;
    } else {
      $k_017 = $inc;
      label = 4;
      break;
    }
   case 8:
    return $call | 0;
  }
  return 0;
}
function _mrb_gc_mark_mt_size($mrb, $c) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  var $mt = 0, $0 = 0, $tobool = 0, $size = 0, $1 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $mt = $c + 16 | 0;
    $0 = HEAP32[$mt >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $size = $0 + 4 | 0;
    $1 = HEAP32[$size >> 2] | 0;
    $retval_0 = $1;
    label = 4;
    break;
   case 4:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_obj_value753($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_class_real($cl) {
  $cl = $cl | 0;
  var $0 = 0, $1 = 0, $bf_clear3 = 0, $bf_clear_off4 = 0, $2 = 0, $cl_addr_05 = 0, $super = 0, $3 = 0, $4 = 0, $5 = 0, $bf_clear = 0, $bf_clear_off = 0, $6 = 0, $cl_addr_0_lcssa = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $cl;
    $1 = HEAP32[$0 >> 2] | 0;
    $bf_clear3 = $1 & 255;
    $bf_clear_off4 = $bf_clear3 - 11 | 0;
    $2 = $bf_clear_off4 >>> 0 < 2;
    if ($2) {
      $cl_addr_05 = $cl;
      label = 3;
      break;
    } else {
      $cl_addr_0_lcssa = $cl;
      label = 4;
      break;
    }
   case 3:
    $super = $cl_addr_05 + 20 | 0;
    $3 = HEAP32[$super >> 2] | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $bf_clear = $5 & 255;
    $bf_clear_off = $bf_clear - 11 | 0;
    $6 = $bf_clear_off >>> 0 < 2;
    if ($6) {
      $cl_addr_05 = $3;
      label = 3;
      break;
    } else {
      $cl_addr_0_lcssa = $3;
      label = 4;
      break;
    }
   case 4:
    return $cl_addr_0_lcssa | 0;
  }
  return 0;
}
function _mrb_gc_mark_mt($mrb, $c) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  var $mt = 0, $0 = 0, $tobool = 0, $n_buckets = 0, $1 = 0, $cmp14 = 0, $e_flags = 0, $d_flags = 0, $vals = 0, $k_015 = 0, $div = 0, $2 = 0, $arrayidx = 0, $3 = 0, $rem = 0, $arrayidx1 = 0, $4 = 0, $and12 = 0, $tobool3 = 0, $5 = 0, $arrayidx5 = 0, $6 = 0, $and1013 = 0, $tobool11 = 0, $7 = 0, $arrayidx13 = 0, $8 = 0, $tobool14 = 0, $9 = 0, $inc = 0, $10 = 0, $cmp = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $mt = $c + 16 | 0;
    $0 = HEAP32[$mt >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $n_buckets = $0 | 0;
    $1 = HEAP32[$n_buckets >> 2] | 0;
    $cmp14 = ($1 | 0) == 0;
    if ($cmp14) {
      label = 10;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $e_flags = $0 + 16 | 0;
    $d_flags = $0 + 20 | 0;
    $vals = $0 + 28 | 0;
    $k_015 = 0;
    label = 5;
    break;
   case 5:
    $div = $k_015 >>> 3;
    $2 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $2 + $div | 0;
    $3 = HEAP8[$arrayidx] | 0;
    $rem = $k_015 & 7;
    $arrayidx1 = $rem + 112148 | 0;
    $4 = HEAP8[$arrayidx1] | 0;
    $and12 = $4 & $3;
    $tobool3 = $and12 << 24 >> 24 == 0;
    if ($tobool3) {
      label = 6;
      break;
    } else {
      label = 9;
      break;
    }
   case 6:
    $5 = HEAP32[$d_flags >> 2] | 0;
    $arrayidx5 = $5 + $div | 0;
    $6 = HEAP8[$arrayidx5] | 0;
    $and1013 = $6 & $4;
    $tobool11 = $and1013 << 24 >> 24 == 0;
    if ($tobool11) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    $7 = HEAP32[$vals >> 2] | 0;
    $arrayidx13 = $7 + ($k_015 << 2) | 0;
    $8 = HEAP32[$arrayidx13 >> 2] | 0;
    $tobool14 = ($8 | 0) == 0;
    if ($tobool14) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $9 = $8;
    _mrb_gc_mark($mrb, $9);
    label = 9;
    break;
   case 9:
    $inc = $k_015 + 1 | 0;
    $10 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($inc | 0) == ($10 | 0);
    if ($cmp) {
      label = 10;
      break;
    } else {
      $k_015 = $inc;
      label = 5;
      break;
    }
   case 10:
    return;
  }
}
function _mrb_gc_free_mt($mrb, $c) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  _kh_destroy_mt(HEAP32[$c + 16 >> 2] | 0);
  return;
}
function _mrb_name_class($mrb, $c, $name) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  $name = $name | 0;
  var $agg_tmp = 0, $call = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $agg_tmp = __stackBase__ | 0;
  $call = _mrb_intern2($mrb, 94960, 11) | 0;
  _mrb_symbol_value752($agg_tmp, $name);
  _mrb_obj_iv_set($mrb, $c, $call, $agg_tmp);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_symbol_value752($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  var $v_sroa_1_2__raw_idx = 0, $v_sroa_1_2_idx = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP16[$agg_result >> 1] = $i;
  $v_sroa_1_2__raw_idx = $agg_result + 2 | 0;
  $v_sroa_1_2_idx = __stackBase__ | 0;
  HEAP16[$v_sroa_1_2__raw_idx >> 1] = HEAP16[$v_sroa_1_2_idx >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 2 >> 1] = HEAP16[$v_sroa_1_2_idx + 2 >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 4 >> 1] = HEAP16[$v_sroa_1_2_idx + 4 >> 1] | 0;
  HEAP32[$agg_result + 8 >> 2] = 4;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_define_module_id($mrb, $name) {
  $mrb = $mrb | 0;
  $name = $name | 0;
  var $agg_tmp = 0, $call = 0, $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $agg_tmp = __stackBase__ | 0;
  $call = _mrb_module_new($mrb) | 0;
  $1 = HEAP32[$mrb + 44 >> 2] | 0;
  _mrb_obj_value753($agg_tmp, $call | 0);
  _mrb_obj_iv_set($mrb, $1, $name, $agg_tmp);
  _mrb_name_class($mrb, $call, $name);
  STACKTOP = __stackBase__;
  return $call | 0;
}
function _mrb_module_new($mrb) {
  $mrb = $mrb | 0;
  var $call = 0;
  $call = _mrb_obj_alloc($mrb, 10, HEAP32[$mrb + 52 >> 2] | 0) | 0;
  HEAP32[$call + 16 >> 2] = _kh_init_mt($mrb) | 0;
  return $call | 0;
}
function _mrb_define_module($mrb, $name) {
  $mrb = $mrb | 0;
  $name = $name | 0;
  return _mrb_define_module_id($mrb, _mrb_intern754($mrb, $name) | 0) | 0;
}
function _mrb_intern754($mrb, $cstr) {
  $mrb = $mrb | 0;
  $cstr = $cstr | 0;
  return _mrb_intern_cstr($mrb, $cstr) | 0;
}
function _mrb_class_outer_module($mrb, $c) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  var $tmp = 0, $0 = 0, $call = 0, $outer_sroa_0_0__cast = 0, $outer_sroa_0_0_copyload = 0, $outer_sroa_2_8__idx2 = 0, $outer_sroa_2_8_copyload = 0, $1 = 0, $2 = 0, $3 = 0, $retval_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $0 = $c;
    $call = _mrb_intern2($mrb, 108264, 9) | 0;
    _mrb_obj_iv_get($tmp, 0, $0, $call);
    $outer_sroa_0_0__cast = $tmp;
    $outer_sroa_0_0_copyload = HEAP32[$outer_sroa_0_0__cast >> 2] | 0;
    $outer_sroa_2_8__idx2 = $tmp + 8 | 0;
    $outer_sroa_2_8_copyload = HEAP32[$outer_sroa_2_8__idx2 >> 2] | 0;
    $1 = $outer_sroa_2_8_copyload | $outer_sroa_0_0_copyload;
    $2 = ($1 | 0) == 0;
    if ($2) {
      $retval_0 = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $3 = $outer_sroa_0_0_copyload;
    $retval_0 = $3;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_vm_define_module($mrb, $outer, $id) {
  $mrb = $mrb | 0;
  $outer = $outer | 0;
  $id = $id | 0;
  var $tmp = 0, $call = 0, $tobool = 0, $v_sroa_0_0__cast = 0, $v_sroa_0_0_copyload = 0, $0 = 0, $call1 = 0, $c_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $outer;
  $outer = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$outer >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$outer + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$outer + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $call = _mrb_const_defined(0, $outer, $id) | 0;
    $tobool = $call << 24 >> 24 == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_const_get($tmp, $mrb, $outer, $id);
    $v_sroa_0_0__cast = $tmp;
    $v_sroa_0_0_copyload = HEAP32[$v_sroa_0_0__cast >> 2] | 0;
    $0 = $v_sroa_0_0_copyload;
    $c_0 = $0;
    label = 5;
    break;
   case 4:
    $call1 = _mrb_module_new($mrb) | 0;
    _setup_class($mrb, $outer, $call1, $id);
    $c_0 = $call1;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return $c_0 | 0;
  }
  return 0;
}
function _setup_class($mrb, $outer, $c, $id) {
  $mrb = $mrb | 0;
  $outer = $outer | 0;
  $c = $c | 0;
  $id = $id | 0;
  var $agg_tmp = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $outer;
  $outer = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$outer >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$outer + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$outer + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $agg_tmp = __stackBase__ | 0;
  _mrb_name_class($mrb, $c, $id);
  _mrb_obj_value753($agg_tmp, $c | 0);
  _mrb_const_set($mrb, $outer, $id, $agg_tmp);
  _mrb_obj_iv_set($mrb, $c, _mrb_intern2($mrb, 108264, 9) | 0, $outer);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_define_class_id($mrb, $name, $super) {
  $mrb = $mrb | 0;
  $name = $name | 0;
  $super = $super | 0;
  var $agg_tmp = 0, $call = 0, $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $agg_tmp = __stackBase__ | 0;
  $call = _mrb_class_new($mrb, $super) | 0;
  $1 = HEAP32[$mrb + 44 >> 2] | 0;
  _mrb_obj_value753($agg_tmp, $call | 0);
  _mrb_obj_iv_set($mrb, $1, $name, $agg_tmp);
  _mrb_name_class($mrb, $call, $name);
  STACKTOP = __stackBase__;
  return $call | 0;
}
function _mrb_class_new($mrb, $super) {
  $mrb = $mrb | 0;
  $super = $super | 0;
  var $tobool = 0, $call = 0, $call11 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $sext = 0, $bf_value10 = 0, $5 = 0, $6 = 0, $call13 = 0, $7 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($super | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _boot_defclass($mrb, $super) | 0;
    $call13 = $call;
    label = 5;
    break;
   case 4:
    _mrb_check_inheritable($mrb, $super);
    $call11 = _boot_defclass($mrb, $super) | 0;
    $0 = $call11;
    $1 = HEAP32[$0 >> 2] | 0;
    $2 = $super;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $3 >>> 11;
    $sext = $4 << 24;
    $bf_value10 = $sext >> 13;
    $5 = $1 & -522241;
    $6 = $5 | $bf_value10;
    HEAP32[$0 >> 2] = $6;
    $call13 = $call11;
    label = 5;
    break;
   case 5:
    $7 = $call13;
    _prepare_singleton_class($mrb, $7);
    return $call13 | 0;
  }
  return 0;
}
function _mrb_define_class($mrb, $name, $super) {
  $mrb = $mrb | 0;
  $name = $name | 0;
  $super = $super | 0;
  return _mrb_define_class_id($mrb, _mrb_intern754($mrb, $name) | 0, $super) | 0;
}
function _mrb_vm_define_class($mrb, $outer, $super, $id) {
  $mrb = $mrb | 0;
  $outer = $outer | 0;
  $super = $super | 0;
  $id = $id | 0;
  var $v = 0, $agg_tmp = 0, $agg_tmp36 = 0, $agg_tmp37 = 0, $tmp = 0, $call = 0, $tobool = 0, $p = 0, $0 = 0, $1 = 0, $tt = 0, $2 = 0, $cmp = 0, $i = 0, $3 = 0, $tobool2 = 0, $_pr = 0, $4 = 0, $cmp5 = 0, $call7 = 0, $super8 = 0, $5 = 0, $6 = 0, $tobool9 = 0, $p11 = 0, $7 = 0, $8 = 0, $call13 = 0, $cmp14 = 0, $call16 = 0, $tt20 = 0, $9 = 0, $cmp21 = 0, $i24 = 0, $10 = 0, $tobool25 = 0, $_pr23 = 0, $11 = 0, $cmp28 = 0, $call30 = 0, $p33 = 0, $12 = 0, $13 = 0, $object_class = 0, $14 = 0, $s_0 = 0, $call35 = 0, $15 = 0, $16 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 60 | 0;
  tempParam = $outer;
  $outer = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$outer >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$outer + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$outer + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $super;
  $super = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$super >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$super + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$super + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $v = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $agg_tmp36 = __stackBase__ + 24 | 0;
    $agg_tmp37 = __stackBase__ + 36 | 0;
    $tmp = __stackBase__ + 48 | 0;
    $call = _mrb_const_defined(0, $outer, $id) | 0;
    $tobool = $call << 24 >> 24 == 0;
    if ($tobool) {
      label = 11;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_const_get($v, $mrb, $outer, $id);
    _mrb_check_type($mrb, $v, 9);
    $p = $v;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    $tt = $super + 8 | 0;
    $2 = HEAP32[$tt >> 2] | 0;
    $cmp = ($2 | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      $4 = $2;
      label = 6;
      break;
    }
   case 4:
    $i = $super;
    $3 = HEAP32[$i >> 2] | 0;
    $tobool2 = ($3 | 0) == 0;
    if ($tobool2) {
      $retval_0 = $1;
      label = 19;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $_pr = HEAP32[$tt >> 2] | 0;
    $4 = $_pr;
    label = 6;
    break;
   case 6:
    $cmp5 = ($4 | 0) == 9;
    if ($cmp5) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $call7 = _mrb_class_get($mrb, 104196) | 0;
    _mrb_raisef($mrb, $call7, 101340, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$super >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$super + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$super + 8 >> 2] | 0, tempInt) | 0);
    label = 8;
    break;
   case 8:
    $super8 = $0 + 20 | 0;
    $5 = $super8;
    $6 = HEAP32[$5 >> 2] | 0;
    $tobool9 = ($6 | 0) == 0;
    if ($tobool9) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $p11 = $super;
    $7 = HEAP32[$p11 >> 2] | 0;
    $8 = $7;
    $call13 = _mrb_class_real($6) | 0;
    $cmp14 = ($8 | 0) == ($call13 | 0);
    if ($cmp14) {
      $retval_0 = $1;
      label = 19;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $call16 = _mrb_class_get($mrb, 104196) | 0;
    _mrb_sym2str($agg_tmp, $mrb, $id);
    _mrb_raisef($mrb, $call16, 98604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    $retval_0 = $1;
    label = 19;
    break;
   case 11:
    $tt20 = $super + 8 | 0;
    $9 = HEAP32[$tt20 >> 2] | 0;
    $cmp21 = ($9 | 0) == 0;
    if ($cmp21) {
      label = 12;
      break;
    } else {
      $11 = $9;
      label = 14;
      break;
    }
   case 12:
    $i24 = $super;
    $10 = HEAP32[$i24 >> 2] | 0;
    $tobool25 = ($10 | 0) == 0;
    if ($tobool25) {
      label = 17;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $_pr23 = HEAP32[$tt20 >> 2] | 0;
    $11 = $_pr23;
    label = 14;
    break;
   case 14:
    $cmp28 = ($11 | 0) == 9;
    if ($cmp28) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $call30 = _mrb_class_get($mrb, 104196) | 0;
    _mrb_raisef($mrb, $call30, 101340, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$super >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$super + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$super + 8 >> 2] | 0, tempInt) | 0);
    label = 16;
    break;
   case 16:
    $p33 = $super;
    $12 = HEAP32[$p33 >> 2] | 0;
    $13 = $12;
    $s_0 = $13;
    label = 18;
    break;
   case 17:
    $object_class = $mrb + 44 | 0;
    $14 = HEAP32[$object_class >> 2] | 0;
    $s_0 = $14;
    label = 18;
    break;
   case 18:
    $call35 = _mrb_class_new($mrb, $s_0) | 0;
    _setup_class($mrb, $outer, $call35, $id);
    $15 = $s_0 | 0;
    _mrb_obj_value753($agg_tmp36, $15);
    $16 = $call35 | 0;
    _mrb_obj_value753($agg_tmp37, $16);
    _mrb_funcall($tmp, $mrb, $agg_tmp36, 96036, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp37 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp37 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp37 + 8 >> 2] | 0, tempInt) | 0);
    $retval_0 = $call35;
    label = 19;
    break;
   case 19:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_class_get($mrb, $name) {
  $mrb = $mrb | 0;
  $name = $name | 0;
  var $0 = 0;
  $0 = HEAP32[$mrb + 44 >> 2] | 0;
  return _class_from_sym($mrb, $0, _mrb_intern754($mrb, $name) | 0) | 0;
}
function _class_from_sym($mrb, $klass, $id) {
  $mrb = $mrb | 0;
  $klass = $klass | 0;
  $id = $id | 0;
  var $c = 0, $agg_tmp = 0, $agg_tmp3 = 0, $0 = 0, $tt = 0, $1 = 0, $_off = 0, $switch = 0, $call = 0, $p = 0, $2 = 0, $3 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $c = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $agg_tmp3 = __stackBase__ + 24 | 0;
    $0 = $klass | 0;
    _mrb_obj_value753($agg_tmp, $0);
    _mrb_const_get($c, $mrb, $agg_tmp, $id);
    $tt = $c + 8 | 0;
    $1 = HEAP32[$tt >> 2] | 0;
    $_off = $1 - 9 | 0;
    $switch = $_off >>> 0 < 2;
    if ($switch) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 104196) | 0;
    _mrb_sym2str($agg_tmp3, $mrb, $id);
    _mrb_raisef($mrb, $call, 111268, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp3 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp3 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp3 + 8 >> 2] | 0, tempInt) | 0);
    label = 4;
    break;
   case 4:
    $p = $c;
    $2 = HEAP32[$p >> 2] | 0;
    $3 = $2;
    STACKTOP = __stackBase__;
    return $3 | 0;
  }
  return 0;
}
function _mrb_define_class_under($mrb, $outer, $name, $super) {
  $mrb = $mrb | 0;
  $outer = $outer | 0;
  $name = $name | 0;
  $super = $super | 0;
  var $agg_tmp = 0, $call = 0, $call1 = 0, $tobool = 0, $call2 = 0, $super3 = 0, $0 = 0, $call4 = 0, $cmp = 0, $tobool7 = 0, $call10 = 0, $1 = 0, $retval_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $call = _mrb_intern754($mrb, $name) | 0;
    $call1 = _mrb_const_defined_at($mrb, $outer, $call) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call2 = _class_from_sym($mrb, $outer, $call) | 0;
    $super3 = $call2 + 20 | 0;
    $0 = HEAP32[$super3 >> 2] | 0;
    $call4 = _mrb_class_real($0) | 0;
    $cmp = ($call4 | 0) == ($super | 0);
    if ($cmp) {
      $retval_0 = $call2;
      label = 8;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _mrb_name_error($mrb, $call, 94860, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $name, tempInt) | 0);
    $retval_0 = $call2;
    label = 8;
    break;
   case 5:
    $tobool7 = ($super | 0) == 0;
    if ($tobool7) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _mrb_warn($mrb, 93848, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $outer, HEAP32[tempInt + 4 >> 2] = $name, tempInt) | 0);
    label = 7;
    break;
   case 7:
    $call10 = _mrb_class_new($mrb, $super) | 0;
    $1 = $outer | 0;
    _mrb_obj_value753($agg_tmp, $1);
    _setup_class($mrb, $agg_tmp, $call10, $call);
    $retval_0 = $call10;
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_define_method_raw($mrb, $c, $mid, $p) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  $mid = $mid | 0;
  $p = $p | 0;
  var $mt = 0, $0 = 0, $tobool = 0, $call = 0, $h_0 = 0, $call2 = 0, $vals = 0, $1 = 0, $arrayidx = 0, $tobool3 = 0, $2 = 0, $3 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $mt = $c + 16 | 0;
    $0 = HEAP32[$mt >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $h_0 = $0;
      label = 4;
      break;
    }
   case 3:
    $call = _kh_init_mt($mrb) | 0;
    HEAP32[$mt >> 2] = $call;
    $h_0 = $call;
    label = 4;
    break;
   case 4:
    $call2 = _kh_put_mt($h_0, $mid) | 0;
    $vals = $h_0 + 28 | 0;
    $1 = HEAP32[$vals >> 2] | 0;
    $arrayidx = $1 + ($call2 << 2) | 0;
    HEAP32[$arrayidx >> 2] = $p;
    $tobool3 = ($p | 0) == 0;
    if ($tobool3) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $2 = $c;
    $3 = $p;
    _mrb_field_write_barrier($mrb, $2, $3);
    label = 6;
    break;
   case 6:
    return;
  }
}
function _mrb_define_method_id($mrb, $c, $mid, $func, $aspec) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  $mid = $mid | 0;
  $func = $func | 0;
  $aspec = $aspec | 0;
  var $call = 0, $call1 = 0;
  $call = _mrb_gc_arena_save($mrb) | 0;
  $call1 = _mrb_proc_new_cfunc($mrb, $func) | 0;
  HEAP32[$call1 + 16 >> 2] = $c;
  _mrb_define_method_raw($mrb, $c, $mid, $call1);
  _mrb_gc_arena_restore($mrb, $call);
  return;
}
function _mrb_define_method($mrb, $c, $name, $func, $aspec) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  $name = $name | 0;
  $func = $func | 0;
  $aspec = $aspec | 0;
  _mrb_define_method_id($mrb, $c, _mrb_intern754($mrb, $name) | 0, $func, 0);
  return;
}
function _mrb_define_method_vm($mrb, $c, $name, $body) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  $name = $name | 0;
  $body = $body | 0;
  var $mt = 0, $0 = 0, $tobool = 0, $call = 0, $h_0 = 0, $call2 = 0, $p3 = 0, $1 = 0, $2 = 0, $vals = 0, $3 = 0, $arrayidx = 0, $tobool4 = 0, $4 = 0, $5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $body;
  $body = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$body >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$body + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$body + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $mt = $c + 16 | 0;
    $0 = HEAP32[$mt >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $h_0 = $0;
      label = 4;
      break;
    }
   case 3:
    $call = _kh_init_mt($mrb) | 0;
    HEAP32[$mt >> 2] = $call;
    $h_0 = $call;
    label = 4;
    break;
   case 4:
    $call2 = _kh_put_mt($h_0, $name) | 0;
    $p3 = $body;
    $1 = HEAP32[$p3 >> 2] | 0;
    $2 = $1;
    $vals = $h_0 + 28 | 0;
    $3 = HEAP32[$vals >> 2] | 0;
    $arrayidx = $3 + ($call2 << 2) | 0;
    HEAP32[$arrayidx >> 2] = $2;
    $tobool4 = ($1 | 0) == 0;
    if ($tobool4) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $4 = $c;
    $5 = $1;
    _mrb_field_write_barrier($mrb, $4, $5);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_nil_value777($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_get_args($mrb, $format, varrp) {
  $mrb = $mrb | 0;
  $format = $format | 0;
  varrp = varrp | 0;
  var $c = 0, $ap = 0, $tmp = 0, $tmp39 = 0, $tmp51 = 0, $tmp67 = 0, $tmp87 = 0, $tmp116 = 0, $tmp142 = 0, $tmp179 = 0, $ss209 = 0, $agg_tmp = 0, $obj = 0, $agg_tmp273 = 0, $c1 = 0, $0 = 0, $stack = 0, $1 = 0, $add_ptr = 0, $ci = 0, $2 = 0, $argc3 = 0, $3 = 0, $ap4 = 0, $cmp = 0, $4 = 0, $stack6 = 0, $5 = 0, $value = 0, $p = 0, $6 = 0, $len = 0, $7 = 0, $8 = 0, $ptr = 0, $9 = 0, $10 = 0, $argc_0_ph = 0, $sp_0_ph = 0, $11 = 0, $tobool114 = 0, $12 = 0, $13 = 0, $14 = 0, $ss_sroa_0_0__cast = 0, $ss76_sroa_0_0__cast = 0, $aa_sroa_0_0__cast = 0, $tmp141_sroa_0_0__idx = 0, $tmp178_sroa_0_0__cast = 0, $15 = 0, $tt211 = 0, $sym = 0, $16 = 0, $format_pn = 0, $i_0117 = 0, $sp_0116 = 0, $opt_0115 = 0, $incdec_ptr118 = 0, $conv = 0, $cmp7 = 0, $tobool9 = 0, $or_cond112 = 0, $call = 0, $17 = 0, $conv12 = 0, $ap_cur = 0, $ap_next = 0, $cmp15 = 0, $18 = 0, $19 = 0, $incdec_ptr18 = 0, $20 = 0, $21 = 0, $inc = 0, $ap_cur22 = 0, $ap_next23 = 0, $cmp24 = 0, $22 = 0, $23 = 0, $incdec_ptr27 = 0, $24 = 0, $inc28 = 0, $ap_cur33 = 0, $ap_next34 = 0, $cmp35 = 0, $25 = 0, $26 = 0, $incdec_ptr38 = 0, $27 = 0, $inc40 = 0, $ap_cur45 = 0, $ap_next46 = 0, $cmp47 = 0, $28 = 0, $29 = 0, $incdec_ptr50 = 0, $30 = 0, $inc52 = 0, $ap_cur59 = 0, $31 = 0, $ap_next60 = 0, $32 = 0, $ap_next62 = 0, $cmp63 = 0, $33 = 0, $34 = 0, $incdec_ptr66 = 0, $ss_sroa_0_0_copyload = 0, $ptr70 = 0, $35 = 0, $36 = 0, $len71 = 0, $37 = 0, $38 = 0, $inc72 = 0, $ap_cur81 = 0, $39 = 0, $ap_next82 = 0, $40 = 0, $cmp83 = 0, $incdec_ptr86 = 0, $ss76_sroa_0_0_copyload = 0, $ptr90 = 0, $41 = 0, $42 = 0, $call91 = 0, $len92 = 0, $43 = 0, $44 = 0, $cmp93 = 0, $call96 = 0, $45 = 0, $inc99 = 0, $ap_cur108 = 0, $46 = 0, $ap_next109 = 0, $47 = 0, $ap_next111 = 0, $cmp112 = 0, $48 = 0, $49 = 0, $incdec_ptr115 = 0, $aa_sroa_0_0_copyload = 0, $ptr119 = 0, $50 = 0, $51 = 0, $len120 = 0, $52 = 0, $53 = 0, $inc121 = 0, $ap_cur126 = 0, $54 = 0, $ap_next127 = 0, $55 = 0, $cmp128 = 0, $tt = 0, $56 = 0, $f = 0, $57 = 0.0, $i135 = 0, $58 = 0, $conv136 = 0.0, $call138 = 0, $tmp141_sroa_0_0_copyload = 0.0, $incdec_ptr146 = 0, $inc147 = 0, $ap_cur152 = 0, $59 = 0, $ap_next153 = 0, $60 = 0, $cmp154 = 0, $tt157 = 0, $61 = 0, $i160 = 0, $62 = 0, $f165 = 0, $63 = 0.0, $cmp166 = 0, $cmp169 = 0, $or_cond = 0, $call172 = 0, $conv174 = 0, $tmp178_sroa_0_0_copyload = 0, $incdec_ptr183 = 0, $inc184 = 0, $ap_cur188 = 0, $ap_next189 = 0, $cmp190 = 0, $64 = 0, $65 = 0, $incdec_ptr194 = 0, $b_sroa_1_8__idx6 = 0, $b_sroa_1_8_copyload = 0, $cmp196 = 0, $conv198 = 0, $inc199 = 0, $ap_cur203 = 0, $66 = 0, $ap_next204 = 0, $67 = 0, $cmp205 = 0, $incdec_ptr210 = 0, $68 = 0, $69 = 0, $70 = 0, $call220 = 0, $call223 = 0, $inc226 = 0, $ap_cur232 = 0, $71 = 0, $ap_next233 = 0, $72 = 0, $73 = 0, $ci235 = 0, $74 = 0, $argc236 = 0, $75 = 0, $cmp237 = 0, $stack241 = 0, $76 = 0, $add_ptr242 = 0, $add_ptr249_sum = 0, $add_ptr250 = 0, $bp_0 = 0, $77 = 0, $78 = 0, $ap_cur257 = 0, $79 = 0, $ap_next258 = 0, $80 = 0, $81 = 0, $ap_next260 = 0, $82 = 0, $cmp261 = 0, $sub = 0, $cmp264 = 0, $83 = 0, $add_ptr268 = 0, $opt_0_be = 0, $sp_0_be = 0, $i_0_be = 0, $84 = 0, $tobool = 0, $call272 = 0, $i_0_lcssa = 0, $cmp277 = 0, $call280 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 152 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $c = __stackBase__ | 0;
    $ap = __stackBase__ + 4 | 0;
    $tmp = __stackBase__ + 8 | 0;
    $tmp39 = __stackBase__ + 20 | 0;
    $tmp51 = __stackBase__ + 32 | 0;
    $tmp67 = __stackBase__ + 44 | 0;
    $tmp87 = __stackBase__ + 56 | 0;
    $tmp116 = __stackBase__ + 68 | 0;
    $tmp142 = __stackBase__ + 80 | 0;
    $tmp179 = __stackBase__ + 92 | 0;
    $ss209 = __stackBase__ + 104 | 0;
    $agg_tmp = __stackBase__ + 116 | 0;
    $obj = __stackBase__ + 128 | 0;
    $agg_tmp273 = __stackBase__ + 140 | 0;
    $c1 = $mrb + 8 | 0;
    $0 = HEAP32[$c1 >> 2] | 0;
    $stack = $0 + 4 | 0;
    $1 = HEAP32[$stack >> 2] | 0;
    $add_ptr = $1 + 12 | 0;
    $ci = $0 + 16 | 0;
    $2 = HEAP32[$ci >> 2] | 0;
    $argc3 = $2 + 16 | 0;
    $3 = HEAP32[$argc3 >> 2] | 0;
    $ap4 = $ap;
    HEAP32[$ap4 >> 2] = varrp;
    $cmp = ($3 | 0) < 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $sp_0_ph = $add_ptr;
      $argc_0_ph = $3;
      label = 4;
      break;
    }
   case 3:
    $4 = HEAP32[$c1 >> 2] | 0;
    $stack6 = $4 + 4 | 0;
    $5 = HEAP32[$stack6 >> 2] | 0;
    $value = $5 + 12 | 0;
    $p = $value;
    $6 = HEAP32[$p >> 2] | 0;
    $len = $6 + 12 | 0;
    $7 = $len;
    $8 = HEAP32[$7 >> 2] | 0;
    $ptr = $6 + 20 | 0;
    $9 = $ptr;
    $10 = HEAP32[$9 >> 2] | 0;
    $sp_0_ph = $10;
    $argc_0_ph = $8;
    label = 4;
    break;
   case 4:
    $11 = HEAP8[$format] | 0;
    HEAP8[$c] = $11;
    $tobool114 = $11 << 24 >> 24 == 0;
    if ($tobool114) {
      $i_0_lcssa = 0;
      label = 61;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $12 = $tmp;
    $13 = $tmp39;
    $14 = $tmp51;
    $ss_sroa_0_0__cast = $tmp67;
    $ss76_sroa_0_0__cast = $tmp87;
    $aa_sroa_0_0__cast = $tmp116;
    $tmp141_sroa_0_0__idx = $tmp142 | 0;
    $tmp178_sroa_0_0__cast = $tmp179;
    $15 = $ss209;
    $tt211 = $ss209 + 8 | 0;
    $sym = $ss209;
    $opt_0115 = 0;
    $sp_0116 = $sp_0_ph;
    $i_0117 = 0;
    $format_pn = $format;
    $16 = $11;
    label = 6;
    break;
   case 6:
    $incdec_ptr118 = $format_pn + 1 | 0;
    $conv = $16 << 24 >> 24;
    if (($conv | 0) == 124 | ($conv | 0) == 42 | ($conv | 0) == 38) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $cmp7 = ($argc_0_ph | 0) <= ($i_0117 | 0);
    $tobool9 = ($opt_0115 | 0) == 0;
    $or_cond112 = $cmp7 & $tobool9;
    if ($or_cond112) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $call = _mrb_class_get($mrb, 93124) | 0;
    _mrb_raise($mrb, $call, 92300);
    label = 9;
    break;
   case 9:
    $17 = HEAP8[$c] | 0;
    $conv12 = $17 << 24 >> 24;
    if (($conv12 | 0) == 111) {
      label = 10;
      break;
    } else if (($conv12 | 0) == 83) {
      label = 12;
      break;
    } else if (($conv12 | 0) == 65) {
      label = 14;
      break;
    } else if (($conv12 | 0) == 72) {
      label = 16;
      break;
    } else if (($conv12 | 0) == 115) {
      label = 18;
      break;
    } else if (($conv12 | 0) == 122) {
      label = 20;
      break;
    } else if (($conv12 | 0) == 97) {
      label = 24;
      break;
    } else if (($conv12 | 0) == 102) {
      label = 26;
      break;
    } else if (($conv12 | 0) == 105) {
      label = 33;
      break;
    } else if (($conv12 | 0) == 98) {
      label = 42;
      break;
    } else if (($conv12 | 0) == 110) {
      label = 44;
      break;
    } else if (($conv12 | 0) == 38) {
      label = 50;
      break;
    } else if (($conv12 | 0) == 42) {
      label = 54;
      break;
    } else if (($conv12 | 0) == 124) {
      $i_0_be = $i_0117;
      $sp_0_be = $sp_0116;
      $opt_0_be = 1;
      label = 58;
      break;
    } else {
      label = 60;
      break;
    }
   case 10:
    $ap_cur = HEAP32[$ap >> 2] | 0;
    $ap_next = $ap_cur + 4 | 0;
    HEAP32[$ap >> 2] = $ap_next;
    $cmp15 = ($i_0117 | 0) < ($argc_0_ph | 0);
    if ($cmp15) {
      label = 11;
      break;
    } else {
      $i_0_be = $i_0117;
      $sp_0_be = $sp_0116;
      $opt_0_be = $opt_0115;
      label = 58;
      break;
    }
   case 11:
    $18 = $ap_cur;
    $19 = HEAP32[$18 >> 2] | 0;
    $incdec_ptr18 = $sp_0116 + 12 | 0;
    $20 = $19;
    $21 = $sp_0116;
    HEAP32[$20 >> 2] = HEAP32[$21 >> 2] | 0;
    HEAP32[$20 + 4 >> 2] = HEAP32[$21 + 4 >> 2] | 0;
    HEAP32[$20 + 8 >> 2] = HEAP32[$21 + 8 >> 2] | 0;
    $inc = $i_0117 + 1 | 0;
    $i_0_be = $inc;
    $sp_0_be = $incdec_ptr18;
    $opt_0_be = $opt_0115;
    label = 58;
    break;
   case 12:
    $ap_cur22 = HEAP32[$ap >> 2] | 0;
    $ap_next23 = $ap_cur22 + 4 | 0;
    HEAP32[$ap >> 2] = $ap_next23;
    $cmp24 = ($i_0117 | 0) < ($argc_0_ph | 0);
    if ($cmp24) {
      label = 13;
      break;
    } else {
      $i_0_be = $i_0117;
      $sp_0_be = $sp_0116;
      $opt_0_be = $opt_0115;
      label = 58;
      break;
    }
   case 13:
    $22 = $ap_cur22;
    $23 = HEAP32[$22 >> 2] | 0;
    $incdec_ptr27 = $sp_0116 + 12 | 0;
    _to_str($tmp, $mrb, $sp_0116);
    $24 = $23;
    HEAP32[$24 >> 2] = HEAP32[$12 >> 2] | 0;
    HEAP32[$24 + 4 >> 2] = HEAP32[$12 + 4 >> 2] | 0;
    HEAP32[$24 + 8 >> 2] = HEAP32[$12 + 8 >> 2] | 0;
    $inc28 = $i_0117 + 1 | 0;
    $i_0_be = $inc28;
    $sp_0_be = $incdec_ptr27;
    $opt_0_be = $opt_0115;
    label = 58;
    break;
   case 14:
    $ap_cur33 = HEAP32[$ap >> 2] | 0;
    $ap_next34 = $ap_cur33 + 4 | 0;
    HEAP32[$ap >> 2] = $ap_next34;
    $cmp35 = ($i_0117 | 0) < ($argc_0_ph | 0);
    if ($cmp35) {
      label = 15;
      break;
    } else {
      $i_0_be = $i_0117;
      $sp_0_be = $sp_0116;
      $opt_0_be = $opt_0115;
      label = 58;
      break;
    }
   case 15:
    $25 = $ap_cur33;
    $26 = HEAP32[$25 >> 2] | 0;
    $incdec_ptr38 = $sp_0116 + 12 | 0;
    _to_ary($tmp39, $mrb, $sp_0116);
    $27 = $26;
    HEAP32[$27 >> 2] = HEAP32[$13 >> 2] | 0;
    HEAP32[$27 + 4 >> 2] = HEAP32[$13 + 4 >> 2] | 0;
    HEAP32[$27 + 8 >> 2] = HEAP32[$13 + 8 >> 2] | 0;
    $inc40 = $i_0117 + 1 | 0;
    $i_0_be = $inc40;
    $sp_0_be = $incdec_ptr38;
    $opt_0_be = $opt_0115;
    label = 58;
    break;
   case 16:
    $ap_cur45 = HEAP32[$ap >> 2] | 0;
    $ap_next46 = $ap_cur45 + 4 | 0;
    HEAP32[$ap >> 2] = $ap_next46;
    $cmp47 = ($i_0117 | 0) < ($argc_0_ph | 0);
    if ($cmp47) {
      label = 17;
      break;
    } else {
      $i_0_be = $i_0117;
      $sp_0_be = $sp_0116;
      $opt_0_be = $opt_0115;
      label = 58;
      break;
    }
   case 17:
    $28 = $ap_cur45;
    $29 = HEAP32[$28 >> 2] | 0;
    $incdec_ptr50 = $sp_0116 + 12 | 0;
    _to_hash($tmp51, $mrb, $sp_0116);
    $30 = $29;
    HEAP32[$30 >> 2] = HEAP32[$14 >> 2] | 0;
    HEAP32[$30 + 4 >> 2] = HEAP32[$14 + 4 >> 2] | 0;
    HEAP32[$30 + 8 >> 2] = HEAP32[$14 + 8 >> 2] | 0;
    $inc52 = $i_0117 + 1 | 0;
    $i_0_be = $inc52;
    $sp_0_be = $incdec_ptr50;
    $opt_0_be = $opt_0115;
    label = 58;
    break;
   case 18:
    $ap_cur59 = HEAP32[$ap >> 2] | 0;
    $31 = $ap_cur59;
    $ap_next60 = $ap_cur59 + 4 | 0;
    HEAP32[$ap >> 2] = $ap_next60;
    $32 = HEAP32[$31 >> 2] | 0;
    $ap_next62 = $ap_cur59 + 8 | 0;
    HEAP32[$ap >> 2] = $ap_next62;
    $cmp63 = ($i_0117 | 0) < ($argc_0_ph | 0);
    if ($cmp63) {
      label = 19;
      break;
    } else {
      $i_0_be = $i_0117;
      $sp_0_be = $sp_0116;
      $opt_0_be = $opt_0115;
      label = 58;
      break;
    }
   case 19:
    $33 = $ap_next60;
    $34 = HEAP32[$33 >> 2] | 0;
    $incdec_ptr66 = $sp_0116 + 12 | 0;
    _to_str($tmp67, $mrb, $sp_0116);
    $ss_sroa_0_0_copyload = HEAP32[$ss_sroa_0_0__cast >> 2] | 0;
    $ptr70 = $ss_sroa_0_0_copyload + 20 | 0;
    $35 = $ptr70;
    $36 = HEAP32[$35 >> 2] | 0;
    HEAP32[$32 >> 2] = $36;
    $len71 = $ss_sroa_0_0_copyload + 12 | 0;
    $37 = $len71;
    $38 = HEAP32[$37 >> 2] | 0;
    HEAP32[$34 >> 2] = $38;
    $inc72 = $i_0117 + 1 | 0;
    $i_0_be = $inc72;
    $sp_0_be = $incdec_ptr66;
    $opt_0_be = $opt_0115;
    label = 58;
    break;
   case 20:
    $ap_cur81 = HEAP32[$ap >> 2] | 0;
    $39 = $ap_cur81;
    $ap_next82 = $ap_cur81 + 4 | 0;
    HEAP32[$ap >> 2] = $ap_next82;
    $40 = HEAP32[$39 >> 2] | 0;
    $cmp83 = ($i_0117 | 0) < ($argc_0_ph | 0);
    if ($cmp83) {
      label = 21;
      break;
    } else {
      $i_0_be = $i_0117;
      $sp_0_be = $sp_0116;
      $opt_0_be = $opt_0115;
      label = 58;
      break;
    }
   case 21:
    $incdec_ptr86 = $sp_0116 + 12 | 0;
    _to_str($tmp87, $mrb, $sp_0116);
    $ss76_sroa_0_0_copyload = HEAP32[$ss76_sroa_0_0__cast >> 2] | 0;
    $ptr90 = $ss76_sroa_0_0_copyload + 20 | 0;
    $41 = $ptr90;
    $42 = HEAP32[$41 >> 2] | 0;
    $call91 = _strlen($42 | 0) | 0;
    $len92 = $ss76_sroa_0_0_copyload + 12 | 0;
    $43 = $len92;
    $44 = HEAP32[$43 >> 2] | 0;
    $cmp93 = ($call91 | 0) == ($44 | 0);
    if ($cmp93) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $call96 = _mrb_class_get($mrb, 93124) | 0;
    _mrb_raise($mrb, $call96, 111144);
    label = 23;
    break;
   case 23:
    $45 = HEAP32[$41 >> 2] | 0;
    HEAP32[$40 >> 2] = $45;
    $inc99 = $i_0117 + 1 | 0;
    $i_0_be = $inc99;
    $sp_0_be = $incdec_ptr86;
    $opt_0_be = $opt_0115;
    label = 58;
    break;
   case 24:
    $ap_cur108 = HEAP32[$ap >> 2] | 0;
    $46 = $ap_cur108;
    $ap_next109 = $ap_cur108 + 4 | 0;
    HEAP32[$ap >> 2] = $ap_next109;
    $47 = HEAP32[$46 >> 2] | 0;
    $ap_next111 = $ap_cur108 + 8 | 0;
    HEAP32[$ap >> 2] = $ap_next111;
    $cmp112 = ($i_0117 | 0) < ($argc_0_ph | 0);
    if ($cmp112) {
      label = 25;
      break;
    } else {
      $i_0_be = $i_0117;
      $sp_0_be = $sp_0116;
      $opt_0_be = $opt_0115;
      label = 58;
      break;
    }
   case 25:
    $48 = $ap_next109;
    $49 = HEAP32[$48 >> 2] | 0;
    $incdec_ptr115 = $sp_0116 + 12 | 0;
    _to_ary($tmp116, $mrb, $sp_0116);
    $aa_sroa_0_0_copyload = HEAP32[$aa_sroa_0_0__cast >> 2] | 0;
    $ptr119 = $aa_sroa_0_0_copyload + 20 | 0;
    $50 = $ptr119;
    $51 = HEAP32[$50 >> 2] | 0;
    HEAP32[$47 >> 2] = $51;
    $len120 = $aa_sroa_0_0_copyload + 12 | 0;
    $52 = $len120;
    $53 = HEAP32[$52 >> 2] | 0;
    HEAP32[$49 >> 2] = $53;
    $inc121 = $i_0117 + 1 | 0;
    $i_0_be = $inc121;
    $sp_0_be = $incdec_ptr115;
    $opt_0_be = $opt_0115;
    label = 58;
    break;
   case 26:
    $ap_cur126 = HEAP32[$ap >> 2] | 0;
    $54 = $ap_cur126;
    $ap_next127 = $ap_cur126 + 4 | 0;
    HEAP32[$ap >> 2] = $ap_next127;
    $55 = HEAP32[$54 >> 2] | 0;
    $cmp128 = ($i_0117 | 0) < ($argc_0_ph | 0);
    if ($cmp128) {
      label = 27;
      break;
    } else {
      $i_0_be = $i_0117;
      $sp_0_be = $sp_0116;
      $opt_0_be = $opt_0115;
      label = 58;
      break;
    }
   case 27:
    $tt = $sp_0116 + 8 | 0;
    $56 = HEAP32[$tt >> 2] | 0;
    if (($56 | 0) == 6) {
      label = 28;
      break;
    } else if (($56 | 0) == 3) {
      label = 29;
      break;
    } else if (($56 | 0) == 16) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 28:
    $f = $sp_0116 | 0;
    $57 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $57, HEAP32[$55 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$55 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 32;
    break;
   case 29:
    $i135 = $sp_0116;
    $58 = HEAP32[$i135 >> 2] | 0;
    $conv136 = +($58 | 0);
    HEAPF64[tempDoublePtr >> 3] = $conv136, HEAP32[$55 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$55 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 32;
    break;
   case 30:
    $call138 = _mrb_class_get($mrb, 104196) | 0;
    _mrb_raise($mrb, $call138, 110484);
    label = 32;
    break;
   case 31:
    _mrb_convert_type($tmp142, $mrb, $sp_0116, 6, 109924, 109400);
    $tmp141_sroa_0_0_copyload = (HEAP32[tempDoublePtr >> 2] = HEAP32[$tmp141_sroa_0_0__idx >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$tmp141_sroa_0_0__idx + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $tmp141_sroa_0_0_copyload, HEAP32[$55 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$55 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 32;
    break;
   case 32:
    $incdec_ptr146 = $sp_0116 + 12 | 0;
    $inc147 = $i_0117 + 1 | 0;
    $i_0_be = $inc147;
    $sp_0_be = $incdec_ptr146;
    $opt_0_be = $opt_0115;
    label = 58;
    break;
   case 33:
    $ap_cur152 = HEAP32[$ap >> 2] | 0;
    $59 = $ap_cur152;
    $ap_next153 = $ap_cur152 + 4 | 0;
    HEAP32[$ap >> 2] = $ap_next153;
    $60 = HEAP32[$59 >> 2] | 0;
    $cmp154 = ($i_0117 | 0) < ($argc_0_ph | 0);
    if ($cmp154) {
      label = 34;
      break;
    } else {
      $i_0_be = $i_0117;
      $sp_0_be = $sp_0116;
      $opt_0_be = $opt_0115;
      label = 58;
      break;
    }
   case 34:
    $tt157 = $sp_0116 + 8 | 0;
    $61 = HEAP32[$tt157 >> 2] | 0;
    if (($61 | 0) == 3) {
      label = 35;
      break;
    } else if (($61 | 0) == 6) {
      label = 36;
      break;
    } else if (($61 | 0) == 0) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 35:
    $i160 = $sp_0116;
    $62 = HEAP32[$i160 >> 2] | 0;
    HEAP32[$60 >> 2] = $62;
    label = 41;
    break;
   case 36:
    $f165 = $sp_0116 | 0;
    $63 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f165 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f165 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $cmp166 = $63 <= 2147483647.0;
    $cmp169 = $63 >= -2147483648.0;
    $or_cond = $cmp166 & $cmp169;
    if ($or_cond) {
      label = 38;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    $call172 = _mrb_class_get($mrb, 108996) | 0;
    _mrb_raise($mrb, $call172, 108544);
    label = 38;
    break;
   case 38:
    $conv174 = ~~$63;
    HEAP32[$60 >> 2] = $conv174;
    label = 41;
    break;
   case 39:
    HEAP32[$60 >> 2] = 0;
    label = 41;
    break;
   case 40:
    _mrb_convert_type($tmp179, $mrb, $sp_0116, 3, 108244, 107928);
    $tmp178_sroa_0_0_copyload = HEAP32[$tmp178_sroa_0_0__cast >> 2] | 0;
    HEAP32[$60 >> 2] = $tmp178_sroa_0_0_copyload;
    label = 41;
    break;
   case 41:
    $incdec_ptr183 = $sp_0116 + 12 | 0;
    $inc184 = $i_0117 + 1 | 0;
    $i_0_be = $inc184;
    $sp_0_be = $incdec_ptr183;
    $opt_0_be = $opt_0115;
    label = 58;
    break;
   case 42:
    $ap_cur188 = HEAP32[$ap >> 2] | 0;
    $ap_next189 = $ap_cur188 + 4 | 0;
    HEAP32[$ap >> 2] = $ap_next189;
    $cmp190 = ($i_0117 | 0) < ($argc_0_ph | 0);
    if ($cmp190) {
      label = 43;
      break;
    } else {
      $i_0_be = $i_0117;
      $sp_0_be = $sp_0116;
      $opt_0_be = $opt_0115;
      label = 58;
      break;
    }
   case 43:
    $64 = $ap_cur188;
    $65 = HEAP32[$64 >> 2] | 0;
    $incdec_ptr194 = $sp_0116 + 12 | 0;
    $b_sroa_1_8__idx6 = $sp_0116 + 8 | 0;
    $b_sroa_1_8_copyload = HEAP32[$b_sroa_1_8__idx6 >> 2] | 0;
    $cmp196 = ($b_sroa_1_8_copyload | 0) != 0;
    $conv198 = $cmp196 & 1;
    HEAP8[$65] = $conv198;
    $inc199 = $i_0117 + 1 | 0;
    $i_0_be = $inc199;
    $sp_0_be = $incdec_ptr194;
    $opt_0_be = $opt_0115;
    label = 58;
    break;
   case 44:
    $ap_cur203 = HEAP32[$ap >> 2] | 0;
    $66 = $ap_cur203;
    $ap_next204 = $ap_cur203 + 4 | 0;
    HEAP32[$ap >> 2] = $ap_next204;
    $67 = HEAP32[$66 >> 2] | 0;
    $cmp205 = ($i_0117 | 0) < ($argc_0_ph | 0);
    if ($cmp205) {
      label = 45;
      break;
    } else {
      $i_0_be = $i_0117;
      $sp_0_be = $sp_0116;
      $opt_0_be = $opt_0115;
      label = 58;
      break;
    }
   case 45:
    $incdec_ptr210 = $sp_0116 + 12 | 0;
    $68 = $sp_0116;
    HEAP32[$15 >> 2] = HEAP32[$68 >> 2] | 0;
    HEAP32[$15 + 4 >> 2] = HEAP32[$68 + 4 >> 2] | 0;
    HEAP32[$15 + 8 >> 2] = HEAP32[$68 + 8 >> 2] | 0;
    $69 = HEAP32[$tt211 >> 2] | 0;
    if (($69 | 0) == 4) {
      label = 46;
      break;
    } else if (($69 | 0) == 16) {
      label = 47;
      break;
    } else {
      label = 48;
      break;
    }
   case 46:
    $70 = HEAP16[$sym >> 1] | 0;
    HEAP16[$67 >> 1] = $70;
    label = 49;
    break;
   case 47:
    _to_str($agg_tmp, $mrb, $ss209);
    $call220 = _mrb_intern_str($mrb, $agg_tmp) | 0;
    HEAP16[$67 >> 1] = $call220;
    label = 49;
    break;
   case 48:
    _mrb_funcall($obj, $mrb, $ss209, 107464, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    $call223 = _mrb_class_get($mrb, 104196) | 0;
    _mrb_raisef($mrb, $call223, 106864, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$obj >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$obj + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$obj + 8 >> 2] | 0, tempInt) | 0);
    label = 49;
    break;
   case 49:
    $inc226 = $i_0117 + 1 | 0;
    $i_0_be = $inc226;
    $sp_0_be = $incdec_ptr210;
    $opt_0_be = $opt_0115;
    label = 58;
    break;
   case 50:
    $ap_cur232 = HEAP32[$ap >> 2] | 0;
    $71 = $ap_cur232;
    $ap_next233 = $ap_cur232 + 4 | 0;
    HEAP32[$ap >> 2] = $ap_next233;
    $72 = HEAP32[$71 >> 2] | 0;
    $73 = HEAP32[$c1 >> 2] | 0;
    $ci235 = $73 + 16 | 0;
    $74 = HEAP32[$ci235 >> 2] | 0;
    $argc236 = $74 + 16 | 0;
    $75 = HEAP32[$argc236 >> 2] | 0;
    $cmp237 = ($75 | 0) < 0;
    $stack241 = $73 + 4 | 0;
    $76 = HEAP32[$stack241 >> 2] | 0;
    if ($cmp237) {
      label = 51;
      break;
    } else {
      label = 52;
      break;
    }
   case 51:
    $add_ptr242 = $76 + 24 | 0;
    $bp_0 = $add_ptr242;
    label = 53;
    break;
   case 52:
    $add_ptr249_sum = $75 + 1 | 0;
    $add_ptr250 = $76 + ($add_ptr249_sum * 12 & -1) | 0;
    $bp_0 = $add_ptr250;
    label = 53;
    break;
   case 53:
    $77 = $72;
    $78 = $bp_0;
    HEAP32[$77 >> 2] = HEAP32[$78 >> 2] | 0;
    HEAP32[$77 + 4 >> 2] = HEAP32[$78 + 4 >> 2] | 0;
    HEAP32[$77 + 8 >> 2] = HEAP32[$78 + 8 >> 2] | 0;
    $i_0_be = $i_0117;
    $sp_0_be = $sp_0116;
    $opt_0_be = $opt_0115;
    label = 58;
    break;
   case 54:
    $ap_cur257 = HEAP32[$ap >> 2] | 0;
    $79 = $ap_cur257;
    $ap_next258 = $ap_cur257 + 4 | 0;
    HEAP32[$ap >> 2] = $ap_next258;
    $80 = HEAP32[$79 >> 2] | 0;
    $81 = $ap_next258;
    $ap_next260 = $ap_cur257 + 8 | 0;
    HEAP32[$ap >> 2] = $ap_next260;
    $82 = HEAP32[$81 >> 2] | 0;
    $cmp261 = ($argc_0_ph | 0) > ($i_0117 | 0);
    if ($cmp261) {
      label = 55;
      break;
    } else {
      label = 59;
      break;
    }
   case 55:
    $sub = $argc_0_ph - $i_0117 | 0;
    HEAP32[$82 >> 2] = $sub;
    $cmp264 = ($sub | 0) > 0;
    if ($cmp264) {
      label = 56;
      break;
    } else {
      label = 57;
      break;
    }
   case 56:
    HEAP32[$80 >> 2] = $sp_0116;
    label = 57;
    break;
   case 57:
    $83 = HEAP32[$82 >> 2] | 0;
    $add_ptr268 = $sp_0116 + ($83 * 12 & -1) | 0;
    $i_0_be = $argc_0_ph;
    $sp_0_be = $add_ptr268;
    $opt_0_be = $opt_0115;
    label = 58;
    break;
   case 58:
    $84 = HEAP8[$incdec_ptr118] | 0;
    HEAP8[$c] = $84;
    $tobool = $84 << 24 >> 24 == 0;
    if ($tobool) {
      $i_0_lcssa = $i_0_be;
      label = 61;
      break;
    } else {
      $opt_0115 = $opt_0_be;
      $sp_0116 = $sp_0_be;
      $i_0117 = $i_0_be;
      $format_pn = $incdec_ptr118;
      $16 = $84;
      label = 6;
      break;
    }
   case 59:
    HEAP32[$82 >> 2] = 0;
    HEAP32[$80 >> 2] = 0;
    $i_0_be = $i_0117;
    $sp_0_be = $sp_0116;
    $opt_0_be = $opt_0115;
    label = 58;
    break;
   case 60:
    $call272 = _mrb_class_get($mrb, 93124) | 0;
    _mrb_str_new($agg_tmp273, $mrb, $c, 1);
    _mrb_raisef($mrb, $call272, 106516, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp273 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp273 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp273 + 8 >> 2] | 0, tempInt) | 0);
    $i_0_be = $i_0117;
    $sp_0_be = $sp_0116;
    $opt_0_be = $opt_0115;
    label = 58;
    break;
   case 61:
    $cmp277 = ($argc_0_ph | 0) > ($i_0_lcssa | 0);
    if ($cmp277) {
      label = 62;
      break;
    } else {
      label = 63;
      break;
    }
   case 62:
    $call280 = _mrb_class_get($mrb, 93124) | 0;
    _mrb_raise($mrb, $call280, 92300);
    label = 63;
    break;
   case 63:
    STACKTOP = __stackBase__;
    return $i_0_lcssa | 0;
  }
  return 0;
}
function _to_str($agg_result, $mrb, $val) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $val = $val | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _check_type($agg_result, $mrb, $val, 16, 92164, 111632);
  STACKTOP = __stackBase__;
  return;
}
function _to_ary($agg_result, $mrb, $val) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $val = $val | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _check_type($agg_result, $mrb, $val, 14, 92264, 92216);
  STACKTOP = __stackBase__;
  return;
}
function _to_hash($agg_result, $mrb, $val) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $val = $val | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _check_type($agg_result, $mrb, $val, 15, 92408, 92384);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_include_module($mrb, $c, $m) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  $m = $m | 0;
  var $tobool37 = 0, $mt = 0, $tobool333 = 0, $class_class = 0, $m_addr_040 = 0, $ins_pos_038 = 0, $0 = 0, $mt1 = 0, $1 = 0, $cmp = 0, $call = 0, $superclass_seen_036 = 0, $p_034 = 0, $cmp5 = 0, $2 = 0, $3 = 0, $bf_clear = 0, $cmp6 = 0, $mt8 = 0, $4 = 0, $5 = 0, $cmp10 = 0, $6 = 0, $7 = 0, $bf_clear12 = 0, $cmp13 = 0, $tobool15 = 0, $or_cond = 0, $p_0_ins_pos_0 = 0, $superclass_seen_1 = 0, $super = 0, $8 = 0, $tobool3 = 0, $9 = 0, $call20 = 0, $10 = 0, $11 = 0, $12 = 0, $bf_clear21 = 0, $cmp22 = 0, $c24 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $mt30 = 0, $_c = 0, $iv = 0, $17 = 0, $iv31 = 0, $18 = 0, $super32 = 0, $19 = 0, $super33 = 0, $_c30 = 0, $20 = 0, $ins_pos_1 = 0, $super35 = 0, $21 = 0, $tobool = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool37 = ($m | 0) == 0;
    if ($tobool37) {
      label = 17;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $mt = $c + 16 | 0;
    $tobool333 = ($c | 0) == 0;
    $class_class = $mrb + 48 | 0;
    $ins_pos_038 = $c;
    $m_addr_040 = $m;
    label = 4;
    break;
   case 4:
    $0 = HEAP32[$mt >> 2] | 0;
    $mt1 = $m_addr_040 + 16 | 0;
    $1 = HEAP32[$mt1 >> 2] | 0;
    $cmp = ($0 | 0) == ($1 | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $call = _mrb_class_get($mrb, 93124) | 0;
    _mrb_raise($mrb, $call, 106028);
    label = 6;
    break;
   case 6:
    if ($tobool333) {
      label = 12;
      break;
    } else {
      $p_034 = $c;
      $superclass_seen_036 = 0;
      label = 7;
      break;
    }
   case 7:
    $cmp5 = ($p_034 | 0) == ($c | 0);
    if ($cmp5) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $2 = $p_034;
    $3 = HEAP32[$2 >> 2] | 0;
    $bf_clear = $3 & 255;
    $cmp6 = ($bf_clear | 0) == 9;
    if ($cmp6) {
      $superclass_seen_1 = 1;
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $mt8 = $p_034 + 16 | 0;
    $4 = HEAP32[$mt8 >> 2] | 0;
    $5 = HEAP32[$mt1 >> 2] | 0;
    $cmp10 = ($4 | 0) == ($5 | 0);
    if ($cmp10) {
      label = 10;
      break;
    } else {
      $superclass_seen_1 = $superclass_seen_036;
      label = 11;
      break;
    }
   case 10:
    $6 = $p_034;
    $7 = HEAP32[$6 >> 2] | 0;
    $bf_clear12 = $7 & 255;
    $cmp13 = ($bf_clear12 | 0) == 11;
    $tobool15 = ($superclass_seen_036 | 0) == 0;
    $or_cond = $cmp13 & $tobool15;
    $p_0_ins_pos_0 = $or_cond ? $p_034 : $ins_pos_038;
    $ins_pos_1 = $p_0_ins_pos_0;
    label = 16;
    break;
   case 11:
    $super = $p_034 + 20 | 0;
    $8 = HEAP32[$super >> 2] | 0;
    $tobool3 = ($8 | 0) == 0;
    if ($tobool3) {
      label = 12;
      break;
    } else {
      $p_034 = $8;
      $superclass_seen_036 = $superclass_seen_1;
      label = 7;
      break;
    }
   case 12:
    $9 = HEAP32[$class_class >> 2] | 0;
    $call20 = _mrb_obj_alloc($mrb, 11, $9) | 0;
    $10 = $call20;
    $11 = $m_addr_040;
    $12 = HEAP32[$11 >> 2] | 0;
    $bf_clear21 = $12 & 255;
    $cmp22 = ($bf_clear21 | 0) == 11;
    if ($cmp22) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $c24 = $m_addr_040 + 4 | 0;
    $13 = HEAP32[$c24 >> 2] | 0;
    $14 = $call20 + 4 | 0;
    HEAP32[$14 >> 2] = $13;
    label = 15;
    break;
   case 14:
    $15 = $call20 + 4 | 0;
    HEAP32[$15 >> 2] = $m_addr_040;
    label = 15;
    break;
   case 15:
    $16 = HEAP32[$mt1 >> 2] | 0;
    $mt30 = $call20 + 16 | 0;
    $_c = $16;
    HEAP32[$mt30 >> 2] = $_c;
    $iv = $m_addr_040 + 12 | 0;
    $17 = HEAP32[$iv >> 2] | 0;
    $iv31 = $call20 + 12 | 0;
    $18 = $iv31;
    HEAP32[$18 >> 2] = $17;
    $super32 = $ins_pos_038 + 20 | 0;
    $19 = HEAP32[$super32 >> 2] | 0;
    $super33 = $call20 + 20 | 0;
    $_c30 = $19;
    HEAP32[$super33 >> 2] = $_c30;
    HEAP32[$super32 >> 2] = $10;
    $20 = $ins_pos_038;
    _mrb_field_write_barrier($mrb, $20, $call20);
    $ins_pos_1 = $10;
    label = 16;
    break;
   case 16:
    $super35 = $m_addr_040 + 20 | 0;
    $21 = HEAP32[$super35 >> 2] | 0;
    $tobool = ($21 | 0) == 0;
    if ($tobool) {
      label = 17;
      break;
    } else {
      $ins_pos_038 = $ins_pos_1;
      $m_addr_040 = $21;
      label = 4;
      break;
    }
   case 17:
    return;
  }
}
function _mrb_mod_module_eval($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $a = 0, $b = 0, $call = 0, $cmp = 0, $call1 = 0, $p = 0, $0 = 0, $1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $a = __stackBase__ | 0;
    $b = __stackBase__ + 12 | 0;
    $call = _mrb_get_args($mrb, 105692, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $a, HEAP32[tempInt + 4 >> 2] = $b, tempInt) | 0) | 0;
    $cmp = ($call | 0) == 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call1 = _mrb_class_get($mrb, 105404) | 0;
    _mrb_raise($mrb, $call1, 104852);
    label = 4;
    break;
   case 4:
    $p = $mod;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    _mrb_yield_internal($agg_result, $mrb, $b, 0, 0, $mod, $1);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_singleton_class($agg_result, $mrb, $v) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $v = $v | 0;
  var $tt = 0, $0 = 0, $i = 0, $1 = 0, $tobool = 0, $nil_class = 0, $2 = 0, $3 = 0, $false_class = 0, $4 = 0, $5 = 0, $true_class = 0, $6 = 0, $7 = 0, $object_class = 0, $8 = 0, $9 = 0, $call = 0, $p = 0, $10 = 0, $11 = 0, $c = 0, $12 = 0, $13 = 0, $14 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $v + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    if (($0 | 0) == 0) {
      label = 3;
      break;
    } else if (($0 | 0) == 2) {
      label = 6;
      break;
    } else if (($0 | 0) == 7) {
      label = 7;
      break;
    } else if (($0 | 0) == 4 | ($0 | 0) == 3 | ($0 | 0) == 6) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 3:
    $i = $v;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $nil_class = $mrb + 88 | 0;
    $2 = HEAP32[$nil_class >> 2] | 0;
    $3 = $2 | 0;
    _mrb_obj_value753($agg_result, $3);
    label = 10;
    break;
   case 5:
    $false_class = $mrb + 84 | 0;
    $4 = HEAP32[$false_class >> 2] | 0;
    $5 = $4 | 0;
    _mrb_obj_value753($agg_result, $5);
    label = 10;
    break;
   case 6:
    $true_class = $mrb + 80 | 0;
    $6 = HEAP32[$true_class >> 2] | 0;
    $7 = $6 | 0;
    _mrb_obj_value753($agg_result, $7);
    label = 10;
    break;
   case 7:
    $object_class = $mrb + 44 | 0;
    $8 = HEAP32[$object_class >> 2] | 0;
    $9 = $8 | 0;
    _mrb_obj_value753($agg_result, $9);
    label = 10;
    break;
   case 8:
    $call = _mrb_class_get($mrb, 104196) | 0;
    _mrb_raise($mrb, $call, 104516);
    _mrb_nil_value777($agg_result);
    label = 10;
    break;
   case 9:
    $p = $v;
    $10 = HEAP32[$p >> 2] | 0;
    $11 = $10;
    _prepare_singleton_class($mrb, $11);
    $c = $10 + 4 | 0;
    $12 = $c;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $13 | 0;
    _mrb_obj_value753($agg_result, $14);
    label = 10;
    break;
   case 10:
    STACKTOP = __stackBase__;
    return;
  }
}
function _prepare_singleton_class($mrb, $o) {
  $mrb = $mrb | 0;
  $o = $o | 0;
  var $agg_tmp = 0, $c1 = 0, $0 = 0, $1 = 0, $2 = 0, $bf_clear = 0, $cmp = 0, $class_class = 0, $3 = 0, $call = 0, $4 = 0, $mt = 0, $iv = 0, $5 = 0, $6 = 0, $7 = 0, $bf_clear2 = 0, $super = 0, $8 = 0, $tobool = 0, $9 = 0, $super7 = 0, $_c28 = 0, $10 = 0, $11 = 0, $super10 = 0, $_c29 = 0, $super16 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $super19 = 0, $_c27 = 0, $16 = 0, $super22 = 0, $_c = 0, $17 = 0, $call26 = 0, $18 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $c1 = $o + 4 | 0;
    $0 = HEAP32[$c1 >> 2] | 0;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $bf_clear = $2 & 255;
    $cmp = ($bf_clear | 0) == 12;
    if ($cmp) {
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $class_class = $mrb + 48 | 0;
    $3 = HEAP32[$class_class >> 2] | 0;
    $call = _mrb_obj_alloc($mrb, 12, $3) | 0;
    $4 = $call;
    $mt = $call + 16 | 0;
    HEAP32[$mt >> 2] = 0;
    $iv = $call + 12 | 0;
    $5 = $iv;
    HEAP32[$5 >> 2] = 0;
    $6 = $o;
    $7 = HEAP32[$6 >> 2] | 0;
    $bf_clear2 = $7 & 255;
    if (($bf_clear2 | 0) == 9) {
      label = 4;
      break;
    } else if (($bf_clear2 | 0) == 12) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 4:
    $super = $o + 20 | 0;
    $8 = HEAP32[$super >> 2] | 0;
    $tobool = ($8 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $9 = HEAP32[$class_class >> 2] | 0;
    $super7 = $call + 20 | 0;
    $_c28 = $9;
    HEAP32[$super7 >> 2] = $_c28;
    label = 9;
    break;
   case 6:
    $10 = $8 + 4 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $super10 = $call + 20 | 0;
    $_c29 = $11;
    HEAP32[$super10 >> 2] = $_c29;
    label = 9;
    break;
   case 7:
    $super16 = $o + 20 | 0;
    $12 = HEAP32[$super16 >> 2] | 0;
    _prepare_singleton_class($mrb, $12);
    $13 = HEAP32[$super16 >> 2] | 0;
    $14 = $13 + 4 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $super19 = $call + 20 | 0;
    $_c27 = $15;
    HEAP32[$super19 >> 2] = $_c27;
    label = 9;
    break;
   case 8:
    $16 = HEAP32[$c1 >> 2] | 0;
    $super22 = $call + 20 | 0;
    $_c = $16;
    HEAP32[$super22 >> 2] = $_c;
    label = 9;
    break;
   case 9:
    HEAP32[$c1 >> 2] = $4;
    _mrb_field_write_barrier($mrb, $o, $call);
    _mrb_field_write_barrier($mrb, $call, $o);
    $17 = $call;
    $call26 = _mrb_intern2($mrb, 93256, 12) | 0;
    $18 = $o | 0;
    _mrb_obj_value753($agg_tmp, $18);
    _mrb_obj_iv_set($mrb, $17, $call26, $agg_tmp);
    label = 10;
    break;
   case 10:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_define_singleton_method($mrb, $o, $name, $func, $aspec) {
  $mrb = $mrb | 0;
  $o = $o | 0;
  $name = $name | 0;
  $func = $func | 0;
  $aspec = $aspec | 0;
  var $1 = 0;
  _prepare_singleton_class($mrb, $o);
  $1 = HEAP32[$o + 4 >> 2] | 0;
  _mrb_define_method_id($mrb, $1, _mrb_intern754($mrb, $name) | 0, $func, 0);
  return;
}
function _mrb_define_class_method($mrb, $c, $name, $func, $aspec) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  $name = $name | 0;
  $func = $func | 0;
  $aspec = $aspec | 0;
  _mrb_define_singleton_method($mrb, $c, $name, $func, 0);
  return;
}
function _mrb_define_module_function($mrb, $c, $name, $func, $aspec) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  $name = $name | 0;
  $func = $func | 0;
  $aspec = $aspec | 0;
  _mrb_define_class_method($mrb, $c, $name, $func, 0);
  _mrb_define_method($mrb, $c, $name, $func, 0);
  return;
}
function _mrb_method_search_vm($mrb, $cp, $mid) {
  $mrb = $mrb | 0;
  $cp = $cp | 0;
  $mid = $mid | 0;
  var $c_011 = 0, $tobool12 = 0, $c_013 = 0, $mt = 0, $0 = 0, $tobool1 = 0, $call = 0, $n_buckets = 0, $1 = 0, $cmp = 0, $vals = 0, $2 = 0, $arrayidx = 0, $3 = 0, $tobool3 = 0, $super = 0, $c_0 = 0, $tobool = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $c_011 = HEAP32[$cp >> 2] | 0;
    $tobool12 = ($c_011 | 0) == 0;
    if ($tobool12) {
      $retval_0 = 0;
      label = 8;
      break;
    } else {
      $c_013 = $c_011;
      label = 3;
      break;
    }
   case 3:
    $mt = $c_013 + 16 | 0;
    $0 = HEAP32[$mt >> 2] | 0;
    $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call = _kh_get_mt($0, $mid) | 0;
    $n_buckets = $0 | 0;
    $1 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($call | 0) == ($1 | 0);
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $vals = $0 + 28 | 0;
    $2 = HEAP32[$vals >> 2] | 0;
    $arrayidx = $2 + ($call << 2) | 0;
    $3 = HEAP32[$arrayidx >> 2] | 0;
    $tobool3 = ($3 | 0) == 0;
    if ($tobool3) {
      $retval_0 = 0;
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    HEAP32[$cp >> 2] = $c_013;
    $retval_0 = $3;
    label = 8;
    break;
   case 7:
    $super = $c_013 + 20 | 0;
    $c_0 = HEAP32[$super >> 2] | 0;
    $tobool = ($c_0 | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 8;
      break;
    } else {
      $c_013 = $c_0;
      label = 3;
      break;
    }
   case 8:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_method_search($mrb, $c, $mid) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  $mid = $mid | 0;
  var $c_addr = 0, $inspect = 0, $agg_tmp = 0, $agg_tmp2 = 0, $tmp = 0, $agg_tmp3 = 0, $call = 0, $tobool = 0, $0 = 0, $1 = 0, $p = 0, $2 = 0, $len = 0, $3 = 0, $4 = 0, $cmp = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $c_addr = __stackBase__ | 0;
    $inspect = __stackBase__ + 4 | 0;
    $agg_tmp = __stackBase__ + 16 | 0;
    $agg_tmp2 = __stackBase__ + 28 | 0;
    $tmp = __stackBase__ + 40 | 0;
    $agg_tmp3 = __stackBase__ + 52 | 0;
    HEAP32[$c_addr >> 2] = $c;
    $call = _mrb_method_search_vm(0, $c_addr, $mid) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $0 = HEAP32[$c_addr >> 2] | 0;
    $1 = $0 | 0;
    _mrb_obj_value753($agg_tmp, $1);
    _mrb_funcall($inspect, $mrb, $agg_tmp, 107464, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    $p = $inspect;
    $2 = HEAP32[$p >> 2] | 0;
    $len = $2 + 12 | 0;
    $3 = $len;
    $4 = HEAP32[$3 >> 2] | 0;
    $cmp = ($4 | 0) > 64;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $5 = HEAP32[$c_addr >> 2] | 0;
    $6 = $5 | 0;
    _mrb_obj_value753($agg_tmp2, $6);
    _mrb_any_to_s($tmp, $mrb, $agg_tmp2);
    $7 = $inspect;
    $8 = $tmp;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    label = 5;
    break;
   case 5:
    _mrb_sym2str($agg_tmp3, $mrb, $mid);
    _mrb_name_error($mrb, $mid, 104140, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp3 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp3 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp3 + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$inspect >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$inspect + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$inspect + 8 >> 2] | 0, tempInt) | 0);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return $call | 0;
  }
  return 0;
}
function _mrb_obj_call_init($mrb, $obj, $argc, $argv) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $argc = $argc | 0;
  $argv = $argv | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_funcall_argv(__stackBase__ | 0, $mrb, $obj, HEAP16[$mrb + 36 >> 1] | 0, $argc, $argv);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_class_new_instance($agg_result, $mrb, $argc, $argv, $klass) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $argc = $argc | 0;
  $argv = $argv | 0;
  $klass = $klass | 0;
  var $obj = 0, $call = 0, $3 = 0, $4 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $obj = __stackBase__ | 0;
  $call = _mrb_obj_alloc($mrb, HEAP32[$klass >> 2] & 255, $klass) | 0;
  HEAP32[$call + 20 >> 2] = $klass;
  _mrb_obj_value753($obj, $call | 0);
  $3 = $obj;
  _mrb_obj_call_init($mrb, $obj, $argc, $argv);
  $4 = $agg_result;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2] | 0;
  HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
  HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_class786($mrb, $v) {
  $mrb = $mrb | 0;
  $v = $v | 0;
  var $tt = 0, $0 = 0, $i = 0, $1 = 0, $tobool = 0, $false_class = 0, $nil_class = 0, $true_class = 0, $symbol_class = 0, $fixnum_class = 0, $float_class = 0, $p = 0, $2 = 0, $c = 0, $3 = 0, $retval_0_in = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $v + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    if (($0 | 0) == 0) {
      label = 3;
      break;
    } else if (($0 | 0) == 2) {
      label = 6;
      break;
    } else if (($0 | 0) == 4) {
      label = 7;
      break;
    } else if (($0 | 0) == 3) {
      label = 8;
      break;
    } else if (($0 | 0) == 6) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 3:
    $i = $v;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $false_class = $mrb + 84 | 0;
    $retval_0_in = $false_class;
    label = 11;
    break;
   case 5:
    $nil_class = $mrb + 88 | 0;
    $retval_0_in = $nil_class;
    label = 11;
    break;
   case 6:
    $true_class = $mrb + 80 | 0;
    $retval_0_in = $true_class;
    label = 11;
    break;
   case 7:
    $symbol_class = $mrb + 92 | 0;
    $retval_0_in = $symbol_class;
    label = 11;
    break;
   case 8:
    $fixnum_class = $mrb + 76 | 0;
    $retval_0_in = $fixnum_class;
    label = 11;
    break;
   case 9:
    $float_class = $mrb + 72 | 0;
    $retval_0_in = $float_class;
    label = 11;
    break;
   case 10:
    $p = $v;
    $2 = HEAP32[$p >> 2] | 0;
    $c = $2 + 4 | 0;
    $3 = $c;
    $retval_0_in = $3;
    label = 11;
    break;
   case 11:
    $retval_0 = HEAP32[$retval_0_in >> 2] | 0;
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_bool_value793($agg_result, $boolean) {
  $agg_result = $agg_result | 0;
  $boolean = $boolean | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = $boolean << 24 >> 24 != 0 ? 2 : 0;
  return;
}
function _mrb_instance_new($agg_result, $mrb, $cv) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $cv = $cv | 0;
  var $obj = 0, $blk = 0, $argv = 0, $argc = 0, $0 = 0, $and = 0, $6 = 0, $10 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  tempParam = $cv;
  $cv = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$cv >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$cv + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$cv + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $obj = __stackBase__ | 0;
  $blk = __stackBase__ + 12 | 0;
  $argv = __stackBase__ + 24 | 0;
  $argc = __stackBase__ + 28 | 0;
  $0 = HEAP32[$cv >> 2] | 0;
  $and = (HEAP32[$0 >> 2] | 0) >>> 11 & 255;
  _mrb_obj_value753($obj, _mrb_obj_alloc($mrb, ($and | 0) == 0 ? 8 : $and, $0) | 0);
  $6 = $obj;
  _mrb_get_args($mrb, 103896, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $argv, HEAP32[tempInt + 4 >> 2] = $argc, HEAP32[tempInt + 8 >> 2] = $blk, tempInt) | 0);
  _mrb_funcall_with_block(__stackBase__ + 32 | 0, $mrb, $obj, HEAP16[$mrb + 36 >> 1] | 0, HEAP32[$argc >> 2] | 0, HEAP32[$argv >> 2] | 0, $blk);
  $10 = $agg_result;
  HEAP32[$10 >> 2] = HEAP32[$6 >> 2] | 0;
  HEAP32[$10 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
  HEAP32[$10 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_class_new_class($agg_result, $mrb, $cv) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $cv = $cv | 0;
  var $super = 0, $tmp = 0, $call = 0, $cmp = 0, $object_class = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $p = 0, $4 = 0, $5 = 0, $call1 = 0, $6 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $cv;
  $cv = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$cv >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$cv + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$cv + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $super = __stackBase__ | 0;
    $tmp = __stackBase__ + 12 | 0;
    $call = _mrb_get_args($mrb, 103588, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $super, tempInt) | 0) | 0;
    $cmp = ($call | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $object_class = $mrb + 44 | 0;
    $0 = HEAP32[$object_class >> 2] | 0;
    $1 = $0 | 0;
    _mrb_obj_value753($tmp, $1);
    $2 = $super;
    $3 = $tmp;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    label = 4;
    break;
   case 4:
    $p = $super;
    $4 = HEAP32[$p >> 2] | 0;
    $5 = $4;
    $call1 = _mrb_class_new($mrb, $5) | 0;
    $6 = $call1 | 0;
    _mrb_obj_value753($agg_result, $6);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_class_superclass($agg_result, $mrb, $klass) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $klass = $klass | 0;
  var $p = 0, $0 = 0, $super = 0, $1 = 0, $c_0_in = 0, $c_0 = 0, $tobool = 0, $2 = 0, $3 = 0, $bf_clear = 0, $cmp = 0, $super1 = 0, $4 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $klass;
  $klass = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$klass >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$klass + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$klass + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $klass;
    $0 = HEAP32[$p >> 2] | 0;
    $super = $0 + 20 | 0;
    $1 = $super;
    $c_0_in = $1;
    label = 3;
    break;
   case 3:
    $c_0 = HEAP32[$c_0_in >> 2] | 0;
    $tobool = ($c_0 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $2 = $c_0;
    $3 = HEAP32[$2 >> 2] | 0;
    $bf_clear = $3 & 255;
    $cmp = ($bf_clear | 0) == 11;
    $super1 = $c_0 + 20 | 0;
    if ($cmp) {
      $c_0_in = $super1;
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _mrb_nil_value777($agg_result);
    label = 7;
    break;
   case 6:
    $4 = $c_0 | 0;
    _mrb_obj_value753($agg_result, $4);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_obj_respond_to($c, $mid) {
  $c = $c | 0;
  $mid = $mid | 0;
  var $tobool7 = 0, $c_addr_08 = 0, $mt = 0, $0 = 0, $tobool1 = 0, $call = 0, $n_buckets = 0, $1 = 0, $cmp = 0, $vals = 0, $2 = 0, $arrayidx = 0, $3 = 0, $not_tobool3 = 0, $_ = 0, $super = 0, $4 = 0, $tobool = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool7 = ($c | 0) == 0;
    if ($tobool7) {
      $retval_0 = 0;
      label = 7;
      break;
    } else {
      $c_addr_08 = $c;
      label = 3;
      break;
    }
   case 3:
    $mt = $c_addr_08 + 16 | 0;
    $0 = HEAP32[$mt >> 2] | 0;
    $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call = _kh_get_mt($0, $mid) | 0;
    $n_buckets = $0 | 0;
    $1 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($call | 0) == ($1 | 0);
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $vals = $0 + 28 | 0;
    $2 = HEAP32[$vals >> 2] | 0;
    $arrayidx = $2 + ($call << 2) | 0;
    $3 = HEAP32[$arrayidx >> 2] | 0;
    $not_tobool3 = ($3 | 0) != 0;
    $_ = $not_tobool3 & 1;
    $retval_0 = $_;
    label = 7;
    break;
   case 6:
    $super = $c_addr_08 + 20 | 0;
    $4 = HEAP32[$super >> 2] | 0;
    $tobool = ($4 | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 7;
      break;
    } else {
      $c_addr_08 = $4;
      label = 3;
      break;
    }
   case 7:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_respond_to($mrb, $obj, $mid) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $mid = $mid | 0;
  var $call1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $call1 = _mrb_obj_respond_to(_mrb_class786($mrb, $obj) | 0, $mid) | 0;
  STACKTOP = __stackBase__;
  return $call1 | 0;
}
function _mrb_class_path($agg_result, $mrb, $c) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $c = $c | 0;
  var $path = 0, $len = 0, $base = 0, $agg_tmp = 0, $tmp14 = 0, $agg_tmp16 = 0, $tmp19 = 0, $call = 0, $0 = 0, $1 = 0, $tt = 0, $2 = 0, $cmp = 0, $i = 0, $3 = 0, $tobool = 0, $call2 = 0, $call4 = 0, $cmp5 = 0, $tobool8 = 0, $object_class = 0, $4 = 0, $cmp10 = 0, $5 = 0, $call15 = 0, $6 = 0, $call18 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 76 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $path = __stackBase__ | 0;
    $len = __stackBase__ + 12 | 0;
    $base = __stackBase__ + 16 | 0;
    $agg_tmp = __stackBase__ + 28 | 0;
    $tmp14 = __stackBase__ + 40 | 0;
    $agg_tmp16 = __stackBase__ + 52 | 0;
    $tmp19 = __stackBase__ + 64 | 0;
    $call = _mrb_intern2($mrb, 103324, 13) | 0;
    $0 = $c;
    _mrb_obj_iv_get($path, 0, $0, $call);
    $1 = $path;
    $tt = $path + 8 | 0;
    $2 = HEAP32[$tt >> 2] | 0;
    $cmp = ($2 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 11;
      break;
    }
   case 3:
    $i = $path;
    $3 = HEAP32[$i >> 2] | 0;
    $tobool = ($3 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 11;
      break;
    }
   case 4:
    $call2 = _mrb_class_outer_module($mrb, $c) | 0;
    $call4 = _mrb_class_sym($mrb, $c, $call2) | 0;
    $cmp5 = $call4 << 16 >> 16 == 0;
    if ($cmp5) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _mrb_nil_value777($agg_result);
    label = 12;
    break;
   case 6:
    $tobool8 = ($call2 | 0) == 0;
    if ($tobool8) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $object_class = $mrb + 44 | 0;
    $4 = HEAP32[$object_class >> 2] | 0;
    $cmp10 = ($call2 | 0) == ($4 | 0);
    if ($cmp10) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _mrb_class_path($base, $mrb, $call2);
    _mrb_str_new($agg_tmp, $mrb, 103040, 2);
    _mrb_str_plus($tmp14, $mrb, $base, $agg_tmp);
    $5 = $tmp14;
    HEAP32[$1 >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    $call15 = _mrb_sym2name_len($mrb, $call4, $len) | 0;
    $6 = HEAP32[$len >> 2] | 0;
    _mrb_str_new($agg_tmp16, $mrb, $call15, $6);
    _mrb_str_concat($mrb, $path, $agg_tmp16);
    label = 10;
    break;
   case 9:
    $call18 = _mrb_sym2name_len($mrb, $call4, $len) | 0;
    $7 = HEAP32[$len >> 2] | 0;
    _mrb_str_new($tmp19, $mrb, $call18, $7);
    $8 = $tmp19;
    HEAP32[$1 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    label = 10;
    break;
   case 10:
    _mrb_obj_iv_set($mrb, $0, $call, $path);
    label = 11;
    break;
   case 11:
    $9 = $agg_result;
    HEAP32[$9 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$9 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$9 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_class_name($mrb, $c) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  var $path = 0, $agg_tmp = 0, $tmp1 = 0, $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $tobool = 0, $2 = 0, $p = 0, $3 = 0, $ptr = 0, $4 = 0, $5 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $path = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $tmp1 = __stackBase__ + 24 | 0;
    _mrb_class_path($path, $mrb, $c);
    $tt = $path + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $i = $path;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _mrb_str_new($path, $mrb, 102556, 8);
    $2 = $c | 0;
    _mrb_ptr_to_str($agg_tmp, $mrb, $2);
    _mrb_str_concat($mrb, $path, $agg_tmp);
    _mrb_str_cat($tmp1, $mrb, $path, 102232, 1);
    label = 5;
    break;
   case 5:
    $p = $path;
    $3 = HEAP32[$p >> 2] | 0;
    $ptr = $3 + 20 | 0;
    $4 = $ptr;
    $5 = HEAP32[$4 >> 2] | 0;
    STACKTOP = __stackBase__;
    return $5 | 0;
  }
  return 0;
}
function _mrb_obj_classname($mrb, $obj) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $call1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $call1 = _mrb_class_name($mrb, _mrb_obj_class($mrb, $obj) | 0) | 0;
  STACKTOP = __stackBase__;
  return $call1 | 0;
}
function _mrb_obj_class($mrb, $obj) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $call1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $call1 = _mrb_class_real(_mrb_class786($mrb, $obj) | 0) | 0;
  STACKTOP = __stackBase__;
  return $call1 | 0;
}
function _mrb_check_inheritable($mrb, $super) {
  $mrb = $mrb | 0;
  $super = $super | 0;
  var $agg_tmp = 0, $0 = 0, $1 = 0, $bf_clear = 0, $cmp = 0, $call = 0, $2 = 0, $3 = 0, $bf_clear1 = 0, $cmp2 = 0, $call4 = 0, $class_class = 0, $4 = 0, $cmp6 = 0, $call8 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $0 = $super;
    $1 = HEAP32[$0 >> 2] | 0;
    $bf_clear = $1 & 255;
    $cmp = ($bf_clear | 0) == 9;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 104196) | 0;
    $2 = $super | 0;
    _mrb_obj_value753($agg_tmp, $2);
    _mrb_raisef($mrb, $call, 101340, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    label = 4;
    break;
   case 4:
    $3 = HEAP32[$0 >> 2] | 0;
    $bf_clear1 = $3 & 255;
    $cmp2 = ($bf_clear1 | 0) == 12;
    if ($cmp2) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $call4 = _mrb_class_get($mrb, 104196) | 0;
    _mrb_raise($mrb, $call4, 102016);
    label = 6;
    break;
   case 6:
    $class_class = $mrb + 48 | 0;
    $4 = HEAP32[$class_class >> 2] | 0;
    $cmp6 = ($4 | 0) == ($super | 0);
    if ($cmp6) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $call8 = _mrb_class_get($mrb, 104196) | 0;
    _mrb_raise($mrb, $call8, 101800);
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return;
  }
}
function _boot_defclass($mrb, $super) {
  $mrb = $mrb | 0;
  $super = $super | 0;
  var $class_class = 0, $0 = 0, $call = 0, $1 = 0, $tobool = 0, $object_class = 0, $2 = 0, $cond = 0, $super1 = 0, $cond_c = 0, $3 = 0, $call2 = 0, $mt = 0, $call2_c = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $class_class = $mrb + 48 | 0;
    $0 = HEAP32[$class_class >> 2] | 0;
    $call = _mrb_obj_alloc($mrb, 9, $0) | 0;
    $1 = $call;
    $tobool = ($super | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $cond = $super;
      label = 4;
      break;
    }
   case 3:
    $object_class = $mrb + 44 | 0;
    $2 = HEAP32[$object_class >> 2] | 0;
    $cond = $2;
    label = 4;
    break;
   case 4:
    $super1 = $call + 20 | 0;
    $cond_c = $cond;
    HEAP32[$super1 >> 2] = $cond_c;
    $3 = $super;
    _mrb_field_write_barrier($mrb, $call, $3);
    $call2 = _kh_init_mt($mrb) | 0;
    $mt = $call + 16 | 0;
    $call2_c = $call2;
    HEAP32[$mt >> 2] = $call2_c;
    return $1 | 0;
  }
  return 0;
}
function _mrb_alias_method($mrb, $c, $a, $b) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $agg_tmp = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $agg_tmp = __stackBase__ | 0;
  _mrb_obj_value753($agg_tmp, _mrb_method_search($mrb, $c, $b) | 0);
  _mrb_define_method_vm($mrb, $c, $a, $agg_tmp);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_define_alias($mrb, $klass, $name1, $name2) {
  $mrb = $mrb | 0;
  $klass = $klass | 0;
  $name1 = $name1 | 0;
  $name2 = $name2 | 0;
  var $call = 0;
  $call = _mrb_intern754($mrb, $name1) | 0;
  _mrb_alias_method($mrb, $klass, $call, _mrb_intern754($mrb, $name2) | 0);
  return;
}
function _mrb_mod_alias($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $new_value = 0, $old_value = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $new_value = __stackBase__ | 0;
  $old_value = __stackBase__ + 12 | 0;
  $1 = HEAP32[$mod >> 2] | 0;
  _mrb_get_args($mrb, 101620, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $new_value, HEAP32[tempInt + 4 >> 2] = $old_value, tempInt) | 0);
  _mrb_alias_method($mrb, $1, HEAP16[$new_value >> 1] | 0, HEAP16[$old_value >> 1] | 0);
  _mrb_nil_value777($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_undef_method($mrb, $c, $name) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  $name = $name | 0;
  _undef_method($mrb, $c, _mrb_intern754($mrb, $name) | 0);
  return;
}
function _undef_method($mrb, $c, $a) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  $a = $a | 0;
  var $m = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $m = __stackBase__ | 0;
  HEAP32[$m + 8 >> 2] = 13;
  HEAP32[$m >> 2] = 0;
  _mrb_define_method_vm($mrb, $c, $a, $m);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_undef_class_method($mrb, $c, $name) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  $name = $name | 0;
  var $agg_tmp = 0, $tmp = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $agg_tmp = __stackBase__ | 0;
  $tmp = __stackBase__ + 12 | 0;
  _mrb_obj_value753($agg_tmp, $c | 0);
  _mrb_singleton_class($tmp, $mrb, $agg_tmp);
  _mrb_undef_method($mrb, HEAP32[$tmp >> 2] | 0, $name);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_undef($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $argc = 0, $argv = 0, $p = 0, $0 = 0, $1 = 0, $call = 0, $2 = 0, $dec2 = 0, $tobool3 = 0, $3 = 0, $sym = 0, $4 = 0, $5 = 0, $incdec_ptr = 0, $6 = 0, $dec = 0, $tobool = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $argc = __stackBase__ | 0;
    $argv = __stackBase__ + 4 | 0;
    $p = $mod;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    $call = _mrb_get_args($mrb, 101312, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $argv, HEAP32[tempInt + 4 >> 2] = $argc, tempInt) | 0) | 0;
    $2 = HEAP32[$argc >> 2] | 0;
    $dec2 = $2 - 1 | 0;
    HEAP32[$argc >> 2] = $dec2;
    $tobool3 = ($2 | 0) == 0;
    if ($tobool3) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $3 = HEAP32[$argv >> 2] | 0;
    $sym = $3;
    $4 = HEAP16[$sym >> 1] | 0;
    _undef_method($mrb, $1, $4);
    $5 = HEAP32[$argv >> 2] | 0;
    $incdec_ptr = $5 + 12 | 0;
    HEAP32[$argv >> 2] = $incdec_ptr;
    $6 = HEAP32[$argc >> 2] | 0;
    $dec = $6 - 1 | 0;
    HEAP32[$argc >> 2] = $dec;
    $tobool = ($6 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 4:
    _mrb_nil_value777($agg_result);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_mod_remove_cvar($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $id = 0, $tmp = 0, $agg_tmp = 0, $agg_tmp4 = 0, $call = 0, $0 = 0, $1 = 0, $val_sroa_1_8__idx4 = 0, $val_sroa_1_8_copyload5 = 0, $cmp = 0, $val_sroa_0_0__idx1 = 0, $val_sroa_0_0_copyload2 = 0.0, $val_sroa_0_0__idx = 0, $val_sroa_1_8__idx3 = 0, $2 = 0, $call1 = 0, $tobool = 0, $3 = 0, $4 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $id = __stackBase__ | 0;
    $tmp = __stackBase__ + 4 | 0;
    $agg_tmp = __stackBase__ + 16 | 0;
    $agg_tmp4 = __stackBase__ + 28 | 0;
    $call = _mrb_get_args($mrb, 101140, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $id, tempInt) | 0) | 0;
    $0 = HEAP16[$id >> 1] | 0;
    _check_cv_name_sym($mrb, $0);
    $1 = HEAP16[$id >> 1] | 0;
    _mrb_iv_remove($tmp, 0, $mod, $1);
    $val_sroa_1_8__idx4 = $tmp + 8 | 0;
    $val_sroa_1_8_copyload5 = HEAP32[$val_sroa_1_8__idx4 >> 2] | 0;
    $cmp = ($val_sroa_1_8_copyload5 | 0) == 5;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $val_sroa_0_0__idx1 = $tmp | 0;
    $val_sroa_0_0_copyload2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$val_sroa_0_0__idx1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$val_sroa_0_0__idx1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $val_sroa_0_0__idx = $agg_result | 0;
    HEAPF64[tempDoublePtr >> 3] = $val_sroa_0_0_copyload2, HEAP32[$val_sroa_0_0__idx >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$val_sroa_0_0__idx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $val_sroa_1_8__idx3 = $agg_result + 8 | 0;
    HEAP32[$val_sroa_1_8__idx3 >> 2] = $val_sroa_1_8_copyload5;
    label = 7;
    break;
   case 4:
    $2 = HEAP16[$id >> 1] | 0;
    $call1 = _mrb_cv_defined(0, $mod, $2) | 0;
    $tobool = $call1 << 24 >> 24 == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $3 = HEAP16[$id >> 1] | 0;
    _mrb_sym2str($agg_tmp, $mrb, $3);
    _mrb_name_error($mrb, $3, 100892, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$mod >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$mod + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$mod + 8 >> 2] | 0, tempInt) | 0);
    label = 6;
    break;
   case 6:
    $4 = HEAP16[$id >> 1] | 0;
    _mrb_sym2str($agg_tmp4, $mrb, $4);
    _mrb_name_error($mrb, $4, 100504, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp4 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp4 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp4 + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$mod >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$mod + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$mod + 8 >> 2] | 0, tempInt) | 0);
    _mrb_nil_value777($agg_result);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _check_cv_name_sym($mrb, $id) {
  $mrb = $mrb | 0;
  $id = $id | 0;
  var $len = 0, $agg_tmp = 0, $call = 0, $0 = 0, $cmp = 0, $1 = 0, $cmp1 = 0, $arrayidx3 = 0, $2 = 0, $cmp5 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $len = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 4 | 0;
    $call = _mrb_sym2name_len($mrb, $id, $len) | 0;
    $0 = HEAP32[$len >> 2] | 0;
    $cmp = $0 >>> 0 < 3;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $1 = HEAP8[$call] | 0;
    $cmp1 = $1 << 24 >> 24 == 64;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $arrayidx3 = $call + 1 | 0;
    $2 = HEAP8[$arrayidx3] | 0;
    $cmp5 = $2 << 24 >> 24 == 64;
    if ($cmp5) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _mrb_sym2str($agg_tmp, $mrb, $id);
    _mrb_name_error($mrb, $id, 93056, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_mod_remove_method($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $argc = 0, $argv = 0, $call = 0, $0 = 0, $dec2 = 0, $tobool3 = 0, $1 = 0, $sym = 0, $2 = 0, $3 = 0, $incdec_ptr = 0, $4 = 0, $dec = 0, $tobool = 0, $5 = 0, $6 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $argc = __stackBase__ | 0;
    $argv = __stackBase__ + 4 | 0;
    $call = _mrb_get_args($mrb, 101312, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $argv, HEAP32[tempInt + 4 >> 2] = $argc, tempInt) | 0) | 0;
    $0 = HEAP32[$argc >> 2] | 0;
    $dec2 = $0 - 1 | 0;
    HEAP32[$argc >> 2] = $dec2;
    $tobool3 = ($0 | 0) == 0;
    if ($tobool3) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $1 = HEAP32[$argv >> 2] | 0;
    $sym = $1;
    $2 = HEAP16[$sym >> 1] | 0;
    _remove_method($mrb, $mod, $2);
    $3 = HEAP32[$argv >> 2] | 0;
    $incdec_ptr = $3 + 12 | 0;
    HEAP32[$argv >> 2] = $incdec_ptr;
    $4 = HEAP32[$argc >> 2] | 0;
    $dec = $4 - 1 | 0;
    HEAP32[$argc >> 2] = $dec;
    $tobool = ($4 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 4:
    $5 = $agg_result;
    $6 = $mod;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2] | 0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _remove_method($mrb, $mod, $mid) {
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  $mid = $mid | 0;
  var $agg_tmp = 0, $p = 0, $0 = 0, $mt = 0, $1 = 0, $2 = 0, $tobool = 0, $call = 0, $n_buckets = 0, $3 = 0, $cmp = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $p = $mod;
    $0 = HEAP32[$p >> 2] | 0;
    $mt = $0 + 16 | 0;
    $1 = $mt;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _kh_get_mt($2, $mid) | 0;
    $n_buckets = $2 | 0;
    $3 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($call | 0) == ($3 | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _kh_del_mt($2, $call);
    label = 6;
    break;
   case 5:
    _mrb_sym2str($agg_tmp, $mrb, $mid);
    _mrb_name_error($mrb, $mid, 92468, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$mod >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$mod + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$mod + 8 >> 2] | 0, tempInt) | 0);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_mod_const_defined($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $id = 0, $tmp5 = 0, $tt = 0, $0 = 0, $cmp = 0, $sym = 0, $1 = 0, $2 = 0, $call = 0, $sym4_sroa_0_0__cast = 0, $sym4_sroa_0_0_copyload = 0, $sym4_sroa_2_8__idx2 = 0, $sym4_sroa_2_8_copyload = 0, $3 = 0, $4 = 0, $sym4_sroa_0_0_extract_trunc = 0, $call13 = 0, $const_defined_p_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $id = __stackBase__ | 0;
    $tmp5 = __stackBase__ + 12 | 0;
    _get_sym_or_str_arg($id, $mrb);
    $tt = $id + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 4;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $sym = $id;
    $1 = HEAP16[$sym >> 1] | 0;
    _check_const_name_sym($mrb, $1);
    $2 = HEAP16[$sym >> 1] | 0;
    $call = _mrb_const_defined(0, $mod, $2) | 0;
    $const_defined_p_0 = $call;
    label = 6;
    break;
   case 4:
    _check_const_name_str($mrb, $id);
    _mrb_check_intern_str($tmp5, $mrb, $id);
    $sym4_sroa_0_0__cast = $tmp5;
    $sym4_sroa_0_0_copyload = HEAP32[$sym4_sroa_0_0__cast >> 2] | 0;
    $sym4_sroa_2_8__idx2 = $tmp5 + 8 | 0;
    $sym4_sroa_2_8_copyload = HEAP32[$sym4_sroa_2_8__idx2 >> 2] | 0;
    $3 = $sym4_sroa_2_8_copyload | $sym4_sroa_0_0_copyload;
    $4 = ($3 | 0) == 0;
    if ($4) {
      $const_defined_p_0 = 0;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $sym4_sroa_0_0_extract_trunc = $sym4_sroa_0_0_copyload & 65535;
    $call13 = _mrb_const_defined(0, $mod, $sym4_sroa_0_0_extract_trunc) | 0;
    $const_defined_p_0 = $call13;
    label = 6;
    break;
   case 6:
    _mrb_bool_value793($agg_result, $const_defined_p_0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _get_sym_or_str_arg($agg_result, $mrb) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  var $sym_or_str = 0, $obj = 0, $call = 0, $tt = 0, $0 = 0, $1 = 0, $2 = 0, $call3 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $sym_or_str = __stackBase__ | 0;
    $obj = __stackBase__ + 12 | 0;
    $call = _mrb_get_args($mrb, 93596, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $sym_or_str, tempInt) | 0) | 0;
    $tt = $sym_or_str + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    if (($0 | 0) == 4 | ($0 | 0) == 16) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $1 = $agg_result;
    $2 = $sym_or_str;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    label = 5;
    break;
   case 4:
    _mrb_funcall($obj, $mrb, $sym_or_str, 107464, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    $call3 = _mrb_class_get($mrb, 104196) | 0;
    _mrb_raisef($mrb, $call3, 106864, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$obj >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$obj + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$obj + 8 >> 2] | 0, tempInt) | 0);
    _mrb_nil_value777($agg_result);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _check_const_name_sym($mrb, $id) {
  $mrb = $mrb | 0;
  $id = $id | 0;
  var $len = 0, $agg_tmp = 0, $call = 0, $0 = 0, $cmp = 0, $1 = 0, $conv = 0, $call1 = 0, $tobool = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $len = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 4 | 0;
    $call = _mrb_sym2name_len($mrb, $id, $len) | 0;
    $0 = HEAP32[$len >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $1 = HEAP8[$call] | 0;
    $conv = $1 & 255;
    $call1 = _isupper($conv | 0) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _mrb_sym2str($agg_tmp, $mrb, $id);
    _mrb_name_error($mrb, $id, 92516, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _check_const_name_str($mrb, $str) {
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $p = 0, $0 = 0, $len = 0, $1 = 0, $2 = 0, $cmp = 0, $ptr = 0, $3 = 0, $4 = 0, $5 = 0, $conv = 0, $call = 0, $tobool = 0, $call3 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $str;
    $0 = HEAP32[$p >> 2] | 0;
    $len = $0 + 12 | 0;
    $1 = $len;
    $2 = HEAP32[$1 >> 2] | 0;
    $cmp = ($2 | 0) < 1;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $ptr = $0 + 20 | 0;
    $3 = $ptr;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = HEAP8[$4] | 0;
    $conv = $5 & 255;
    $call = _isupper($conv | 0) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $call3 = _mrb_intern_str($mrb, $str) | 0;
    _mrb_name_error($mrb, $call3, 92516, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$str >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$str + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$str + 8 >> 2] | 0, tempInt) | 0);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_mod_const_get($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $id = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $id = __stackBase__ | 0;
  _mrb_get_args($mrb, 101140, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $id, tempInt) | 0);
  _check_const_name_sym($mrb, HEAP16[$id >> 1] | 0);
  _mrb_const_get($agg_result, $mrb, $mod, HEAP16[$id >> 1] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_const_set($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $id = 0, $value = 0, $2 = 0, $3 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $id = __stackBase__ | 0;
  $value = __stackBase__ + 4 | 0;
  _mrb_get_args($mrb, 100312, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $id, HEAP32[tempInt + 4 >> 2] = $value, tempInt) | 0);
  _check_const_name_sym($mrb, HEAP16[$id >> 1] | 0);
  _mrb_const_set($mrb, $mod, HEAP16[$id >> 1] | 0, $value);
  $2 = $agg_result;
  $3 = $value;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
  HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
  HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_remove_const($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $id = 0, $tmp = 0, $agg_tmp = 0, $call = 0, $0 = 0, $1 = 0, $val_sroa_0_0__idx1 = 0, $val_sroa_0_0_copyload2 = 0.0, $val_sroa_1_8__idx4 = 0, $val_sroa_1_8_copyload5 = 0, $cmp = 0, $2 = 0, $val_sroa_0_0__idx = 0, $val_sroa_1_8__idx3 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $id = __stackBase__ | 0;
    $tmp = __stackBase__ + 4 | 0;
    $agg_tmp = __stackBase__ + 16 | 0;
    $call = _mrb_get_args($mrb, 101140, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $id, tempInt) | 0) | 0;
    $0 = HEAP16[$id >> 1] | 0;
    _check_const_name_sym($mrb, $0);
    $1 = HEAP16[$id >> 1] | 0;
    _mrb_iv_remove($tmp, 0, $mod, $1);
    $val_sroa_0_0__idx1 = $tmp | 0;
    $val_sroa_0_0_copyload2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$val_sroa_0_0__idx1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$val_sroa_0_0__idx1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $val_sroa_1_8__idx4 = $tmp + 8 | 0;
    $val_sroa_1_8_copyload5 = HEAP32[$val_sroa_1_8__idx4 >> 2] | 0;
    $cmp = ($val_sroa_1_8_copyload5 | 0) == 5;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $2 = HEAP16[$id >> 1] | 0;
    _mrb_sym2str($agg_tmp, $mrb, $2);
    _mrb_name_error($mrb, $2, 99856, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    label = 4;
    break;
   case 4:
    $val_sroa_0_0__idx = $agg_result | 0;
    HEAPF64[tempDoublePtr >> 3] = $val_sroa_0_0_copyload2, HEAP32[$val_sroa_0_0__idx >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$val_sroa_0_0__idx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $val_sroa_1_8__idx3 = $agg_result + 8 | 0;
    HEAP32[$val_sroa_1_8__idx3 >> 2] = $val_sroa_1_8_copyload5;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_init_class($mrb) {
  $mrb = $mrb | 0;
  var $agg_tmp = 0, $agg_tmp7 = 0, $agg_tmp8 = 0, $agg_tmp9 = 0, $agg_tmp10 = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $4 = 0, $8 = 0, $11 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 60 | 0;
  $agg_tmp = __stackBase__ | 0;
  $agg_tmp7 = __stackBase__ + 12 | 0;
  $agg_tmp8 = __stackBase__ + 24 | 0;
  $agg_tmp9 = __stackBase__ + 36 | 0;
  $agg_tmp10 = __stackBase__ + 48 | 0;
  $call = _boot_defclass($mrb, 0) | 0;
  $call1 = _boot_defclass($mrb, $call) | 0;
  HEAP32[$mrb + 44 >> 2] = $call1;
  $call2 = _boot_defclass($mrb, $call1) | 0;
  HEAP32[$mrb + 52 >> 2] = $call2;
  $call3 = _boot_defclass($mrb, $call2) | 0;
  HEAP32[$mrb + 48 >> 2] = $call3;
  HEAP32[$call3 + 4 >> 2] = $call3;
  HEAP32[$call2 + 4 >> 2] = $call3;
  HEAP32[$call1 + 4 >> 2] = $call3;
  HEAP32[$call + 4 >> 2] = $call3;
  _prepare_singleton_class($mrb, $call);
  _prepare_singleton_class($mrb, $call1);
  _prepare_singleton_class($mrb, $call2);
  _prepare_singleton_class($mrb, $call3);
  $4 = $call | 0;
  _mrb_obj_value753($agg_tmp, $4);
  _mrb_define_const($mrb, $call, 99524, $agg_tmp);
  _mrb_obj_value753($agg_tmp7, $4);
  _mrb_define_const($mrb, $call1, 99524, $agg_tmp7);
  _mrb_obj_value753($agg_tmp8, $call1 | 0);
  _mrb_define_const($mrb, $call1, 99236, $agg_tmp8);
  _mrb_obj_value753($agg_tmp9, $call2 | 0);
  _mrb_define_const($mrb, $call1, 99012, $agg_tmp9);
  _mrb_obj_value753($agg_tmp10, $call3 | 0);
  _mrb_define_const($mrb, $call1, 98764, $agg_tmp10);
  _mrb_name_class($mrb, $call, _mrb_intern754($mrb, 99524) | 0);
  _mrb_name_class($mrb, $call1, _mrb_intern754($mrb, 99236) | 0);
  _mrb_name_class($mrb, $call2, _mrb_intern754($mrb, 99012) | 0);
  _mrb_name_class($mrb, $call3, _mrb_intern754($mrb, 98764) | 0);
  _mrb_undef_method($mrb, $call2, 98588);
  $8 = $call3;
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -522241 | 18432;
  _mrb_define_method($mrb, $call, 98424, 508, 0);
  _mrb_define_method($mrb, $call, 98220, 474, 0);
  _mrb_define_method($mrb, $call, 97980, 10, 0);
  _mrb_define_class_method($mrb, $call3, 98588, 468, 0);
  _mrb_define_method($mrb, $call3, 97752, 816, 0);
  _mrb_define_method($mrb, $call3, 98588, 734, 0);
  _mrb_define_method($mrb, $call3, 96036, 508, 0);
  $11 = $call2;
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] & -522241 | 20480;
  _mrb_define_method($mrb, $call2, 97260, 592, 0);
  _mrb_define_method($mrb, $call2, 96964, 544, 0);
  _mrb_define_method($mrb, $call2, 96700, 614, 0);
  _mrb_define_method($mrb, $call2, 96460, 778, 0);
  _mrb_define_method($mrb, $call2, 96288, 508, 0);
  _mrb_define_method($mrb, $call2, 96016, 712, 0);
  _mrb_define_method($mrb, $call2, 95884, 54, 0);
  _mrb_define_method($mrb, $call2, 95744, 290, 0);
  _mrb_define_method($mrb, $call2, 95672, 272, 0);
  _mrb_define_method($mrb, $call2, 95560, 508, 0);
  _mrb_define_method($mrb, $call2, 95280, 104, 0);
  _mrb_define_method($mrb, $call2, 95132, 202, 0);
  _mrb_define_method($mrb, $call2, 95056, 352, 0);
  _mrb_define_method($mrb, $call2, 94996, 272, 0);
  _mrb_define_method($mrb, $call2, 94928, 14, 0);
  _mrb_define_method($mrb, $call2, 94844, 314, 0);
  _mrb_define_method($mrb, $call2, 94772, 670, 0);
  _mrb_define_method($mrb, $call2, 107464, 670, 0);
  _mrb_define_method($mrb, $call2, 94692, 720, 0);
  _mrb_define_method($mrb, $call2, 94596, 448, 0);
  _mrb_define_method($mrb, $call2, 94548, 2, 0);
  _mrb_define_method($mrb, $call2, 94204, 752, 0);
  _mrb_define_method($mrb, $call2, 94080, 818, 0);
  _mrb_define_method($mrb, $call2, 94012, 488, 0);
  _mrb_define_method($mrb, $call2, 93972, 132, 0);
  _mrb_define_method($mrb, $call2, 93936, 222, 0);
  _mrb_define_method($mrb, $call2, 93832, 244, 0);
  _mrb_define_method($mrb, $call2, 93784, 860, 0);
  _mrb_define_method($mrb, $call2, 93748, 472, 0);
  _mrb_define_class_method($mrb, $call2, 93972, 766, 0);
  _mrb_undef_method($mrb, $call3, 95744);
  _mrb_undef_method($mrb, $call3, 96460);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_bob_init($agg_result, $mrb, $cv) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $cv = $cv | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $cv;
  $cv = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$cv >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$cv + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$cv + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_nil_value777($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_bob_not($agg_result, $mrb, $cv) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $cv = $cv | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $cv;
  $cv = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$cv >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$cv + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$cv + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_bool_value793($agg_result, (HEAP32[$cv + 8 >> 2] | 0) == 0 & 1);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_bob_missing($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $name = 0, $a = 0, $alen = 0, $inspect = 0, $tmp = 0, $tmp7 = 0, $tmp9 = 0, $agg_tmp = 0, $call = 0, $tt = 0, $0 = 0, $cmp = 0, $call1 = 0, $call2 = 0, $call3 = 0, $tobool = 0, $1 = 0, $2 = 0, $p = 0, $3 = 0, $len = 0, $4 = 0, $5 = 0, $cmp5 = 0, $6 = 0, $7 = 0, $8 = 0, $call11 = 0, $sym = 0, $9 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 80 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $name = __stackBase__ | 0;
    $a = __stackBase__ + 12 | 0;
    $alen = __stackBase__ + 16 | 0;
    $inspect = __stackBase__ + 20 | 0;
    $tmp = __stackBase__ + 32 | 0;
    $tmp7 = __stackBase__ + 44 | 0;
    $tmp9 = __stackBase__ + 56 | 0;
    $agg_tmp = __stackBase__ + 68 | 0;
    $call = _mrb_get_args($mrb, 93024, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $name, HEAP32[tempInt + 4 >> 2] = $a, HEAP32[tempInt + 8 >> 2] = $alen, tempInt) | 0) | 0;
    $tt = $name + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 4;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call1 = _mrb_class_get($mrb, 104196) | 0;
    _mrb_raise($mrb, $call1, 92936);
    label = 4;
    break;
   case 4:
    $call2 = _mrb_intern2($mrb, 107464, 7) | 0;
    $call3 = _mrb_respond_to($mrb, $mod, $call2) | 0;
    $tobool = ($call3 | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _mrb_funcall($tmp, $mrb, $mod, 107464, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    $1 = $inspect;
    $2 = $tmp;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    $p = $inspect;
    $3 = HEAP32[$p >> 2] | 0;
    $len = $3 + 12 | 0;
    $4 = $len;
    $5 = HEAP32[$4 >> 2] | 0;
    $cmp5 = ($5 | 0) > 64;
    if ($cmp5) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    _mrb_any_to_s($tmp7, $mrb, $mod);
    $6 = $tmp7;
    HEAP32[$1 >> 2] = HEAP32[$6 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
    label = 8;
    break;
   case 7:
    _mrb_any_to_s($tmp9, $mrb, $mod);
    $7 = $inspect;
    $8 = $tmp9;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    label = 8;
    break;
   case 8:
    $call11 = _mrb_class_get($mrb, 92888) | 0;
    $sym = $name;
    $9 = HEAP16[$sym >> 1] | 0;
    _mrb_sym2str($agg_tmp, $mrb, $9);
    _mrb_raisef($mrb, $call11, 92584, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$inspect >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$inspect + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$inspect + 8 >> 2] | 0, tempInt) | 0);
    _mrb_nil_value777($agg_result);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_true_value($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = 2;
  return;
}
function _mrb_false_value($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_mod_cvar_defined($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $id = 0, $tmp5 = 0, $tt = 0, $0 = 0, $cmp = 0, $sym = 0, $1 = 0, $2 = 0, $call = 0, $sym4_sroa_0_0__cast = 0, $sym4_sroa_0_0_copyload = 0, $sym4_sroa_2_8__idx2 = 0, $sym4_sroa_2_8_copyload = 0, $3 = 0, $4 = 0, $sym4_sroa_0_0_extract_trunc = 0, $call13 = 0, $defined_p_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $id = __stackBase__ | 0;
    $tmp5 = __stackBase__ + 12 | 0;
    _get_sym_or_str_arg($id, $mrb);
    $tt = $id + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 4;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $sym = $id;
    $1 = HEAP16[$sym >> 1] | 0;
    _check_cv_name_sym($mrb, $1);
    $2 = HEAP16[$sym >> 1] | 0;
    $call = _mrb_cv_defined(0, $mod, $2) | 0;
    $defined_p_0 = $call;
    label = 6;
    break;
   case 4:
    _check_cv_name_str($mrb, $id);
    _mrb_check_intern_str($tmp5, $mrb, $id);
    $sym4_sroa_0_0__cast = $tmp5;
    $sym4_sroa_0_0_copyload = HEAP32[$sym4_sroa_0_0__cast >> 2] | 0;
    $sym4_sroa_2_8__idx2 = $tmp5 + 8 | 0;
    $sym4_sroa_2_8_copyload = HEAP32[$sym4_sroa_2_8__idx2 >> 2] | 0;
    $3 = $sym4_sroa_2_8_copyload | $sym4_sroa_0_0_copyload;
    $4 = ($3 | 0) == 0;
    if ($4) {
      $defined_p_0 = 0;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $sym4_sroa_0_0_extract_trunc = $sym4_sroa_0_0_copyload & 65535;
    $call13 = _mrb_cv_defined(0, $mod, $sym4_sroa_0_0_extract_trunc) | 0;
    $defined_p_0 = $call13;
    label = 6;
    break;
   case 6:
    _mrb_bool_value793($agg_result, $defined_p_0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_mod_cvar_get($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $id = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $id = __stackBase__ | 0;
  _mrb_get_args($mrb, 101140, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $id, tempInt) | 0);
  _check_cv_name_sym($mrb, HEAP16[$id >> 1] | 0);
  _mrb_cv_get($agg_result, $mrb, $mod, HEAP16[$id >> 1] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_cvar_set($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $value = 0, $id = 0, $2 = 0, $3 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $value = __stackBase__ | 0;
  $id = __stackBase__ + 12 | 0;
  _mrb_get_args($mrb, 100312, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $id, HEAP32[tempInt + 4 >> 2] = $value, tempInt) | 0);
  _check_cv_name_sym($mrb, HEAP16[$id >> 1] | 0);
  _mrb_cv_set($mrb, $mod, HEAP16[$id >> 1] | 0, $value);
  $2 = $agg_result;
  $3 = $value;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
  HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
  HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_extend_object($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $obj = 0, $tmp = 0, $4 = 0, $5 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $obj = __stackBase__ | 0;
  $tmp = __stackBase__ + 12 | 0;
  _mrb_check_type($mrb, $mod, 10);
  _mrb_get_args($mrb, 93596, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $obj, tempInt) | 0);
  _mrb_singleton_class($tmp, $mrb, $obj);
  _mrb_include_module($mrb, HEAP32[$tmp >> 2] | 0, HEAP32[$mod >> 2] | 0);
  $4 = $agg_result;
  $5 = $mod;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
  HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
  HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_include($agg_result, $mrb, $klass) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $klass = $klass | 0;
  var $argv = 0, $argc = 0, $tmp = 0, $tmp3 = 0, $call = 0, $0 = 0, $cmp9 = 0, $_lcssa = 0, $dec6 = 0, $tobool7 = 0, $i_010 = 0, $1 = 0, $arrayidx = 0, $inc = 0, $2 = 0, $cmp = 0, $dec8 = 0, $3 = 0, $arrayidx1 = 0, $4 = 0, $5 = 0, $arrayidx2 = 0, $_pr = 0, $dec = 0, $tobool = 0, $6 = 0, $7 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  tempParam = $klass;
  $klass = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$klass >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$klass + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$klass + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $argv = __stackBase__ | 0;
    $argc = __stackBase__ + 4 | 0;
    $tmp = __stackBase__ + 8 | 0;
    $tmp3 = __stackBase__ + 20 | 0;
    $call = _mrb_get_args($mrb, 101312, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $argv, HEAP32[tempInt + 4 >> 2] = $argc, tempInt) | 0) | 0;
    $0 = HEAP32[$argc >> 2] | 0;
    $cmp9 = ($0 | 0) > 0;
    if ($cmp9) {
      $i_010 = 0;
      label = 4;
      break;
    } else {
      $_lcssa = $0;
      label = 3;
      break;
    }
   case 3:
    $dec6 = $_lcssa - 1 | 0;
    HEAP32[$argc >> 2] = $dec6;
    $tobool7 = ($_lcssa | 0) == 0;
    if ($tobool7) {
      label = 6;
      break;
    } else {
      $dec8 = $dec6;
      label = 5;
      break;
    }
   case 4:
    $1 = HEAP32[$argv >> 2] | 0;
    $arrayidx = $1 + ($i_010 * 12 & -1) | 0;
    _mrb_check_type($mrb, $arrayidx, 10);
    $inc = $i_010 + 1 | 0;
    $2 = HEAP32[$argc >> 2] | 0;
    $cmp = ($inc | 0) < ($2 | 0);
    if ($cmp) {
      $i_010 = $inc;
      label = 4;
      break;
    } else {
      $_lcssa = $2;
      label = 3;
      break;
    }
   case 5:
    $3 = HEAP32[$argv >> 2] | 0;
    $arrayidx1 = $3 + ($dec8 * 12 & -1) | 0;
    _mrb_funcall($tmp, $mrb, $arrayidx1, 95744, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$klass >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$klass + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$klass + 8 >> 2] | 0, tempInt) | 0);
    $4 = HEAP32[$argc >> 2] | 0;
    $5 = HEAP32[$argv >> 2] | 0;
    $arrayidx2 = $5 + ($4 * 12 & -1) | 0;
    _mrb_funcall($tmp3, $mrb, $arrayidx2, 95560, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$klass >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$klass + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$klass + 8 >> 2] | 0, tempInt) | 0);
    $_pr = HEAP32[$argc >> 2] | 0;
    $dec = $_pr - 1 | 0;
    HEAP32[$argc >> 2] = $dec;
    $tobool = ($_pr | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      $dec8 = $dec;
      label = 5;
      break;
    }
   case 6:
    $6 = $agg_result;
    $7 = $klass;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_mod_include_p($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $mod2 = 0, $p = 0, $0 = 0, $call = 0, $tobool5 = 0, $1 = 0, $p3 = 0, $c_06 = 0, $2 = 0, $3 = 0, $bf_clear = 0, $cmp = 0, $c1 = 0, $4 = 0, $5 = 0, $6 = 0, $cmp4 = 0, $super = 0, $7 = 0, $tobool = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $mod2 = __stackBase__ | 0;
    $p = $mod;
    $0 = HEAP32[$p >> 2] | 0;
    $call = _mrb_get_args($mrb, 93596, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $mod2, tempInt) | 0) | 0;
    _mrb_check_type($mrb, $mod2, 10);
    $tobool5 = ($0 | 0) == 0;
    if ($tobool5) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $1 = $0;
    $p3 = $mod2;
    $c_06 = $1;
    label = 4;
    break;
   case 4:
    $2 = $c_06;
    $3 = HEAP32[$2 >> 2] | 0;
    $bf_clear = $3 & 255;
    $cmp = ($bf_clear | 0) == 11;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    $c1 = $c_06 + 4 | 0;
    $4 = HEAP32[$c1 >> 2] | 0;
    $5 = HEAP32[$p3 >> 2] | 0;
    $6 = $5;
    $cmp4 = ($4 | 0) == ($6 | 0);
    if ($cmp4) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _mrb_true_value($agg_result);
    label = 9;
    break;
   case 7:
    $super = $c_06 + 20 | 0;
    $7 = HEAP32[$super >> 2] | 0;
    $tobool = ($7 | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      $c_06 = $7;
      label = 4;
      break;
    }
   case 8:
    _mrb_false_value($agg_result);
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_mod_append_features($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $klass = 0, $4 = 0, $5 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $klass = __stackBase__ | 0;
  _mrb_check_type($mrb, $mod, 10);
  _mrb_get_args($mrb, 93596, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $klass, tempInt) | 0);
  _mrb_include_module($mrb, HEAP32[$klass >> 2] | 0, HEAP32[$mod >> 2] | 0);
  $4 = $agg_result;
  $5 = $mod;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
  HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
  HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_included_modules($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $result = 0, $agg_tmp = 0, $p = 0, $0 = 0, $1 = 0, $tobool5 = 0, $2 = 0, $c_06 = 0, $3 = 0, $4 = 0, $bf_clear = 0, $cmp = 0, $c1 = 0, $5 = 0, $6 = 0, $super = 0, $7 = 0, $tobool = 0, $8 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $result = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    _mrb_ary_new($result, $mrb);
    $1 = $result;
    $tobool5 = ($0 | 0) == 0;
    if ($tobool5) {
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $2 = $0;
    $c_06 = $2;
    label = 4;
    break;
   case 4:
    $3 = $c_06;
    $4 = HEAP32[$3 >> 2] | 0;
    $bf_clear = $4 & 255;
    $cmp = ($bf_clear | 0) == 11;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $c1 = $c_06 + 4 | 0;
    $5 = HEAP32[$c1 >> 2] | 0;
    $6 = $5 | 0;
    _mrb_obj_value753($agg_tmp, $6);
    _mrb_ary_push($mrb, $result, $agg_tmp);
    label = 6;
    break;
   case 6:
    $super = $c_06 + 20 | 0;
    $7 = HEAP32[$super >> 2] | 0;
    $tobool = ($7 | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      $c_06 = $7;
      label = 4;
      break;
    }
   case 7:
    $8 = $agg_result;
    HEAP32[$8 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$8 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$8 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_mod_instance_methods($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $recur = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $recur = __stackBase__ | 0;
  $1 = HEAP32[$mod >> 2] | 0;
  HEAP8[$recur] = 1;
  _mrb_get_args($mrb, 93120, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $recur, tempInt) | 0);
  _class_instance_method_list($agg_result, $mrb, HEAP8[$recur] | 0, $1, 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_method_defined($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $id = 0, $sym3 = 0, $tt = 0, $0 = 0, $cmp = 0, $p = 0, $1 = 0, $2 = 0, $sym = 0, $3 = 0, $call = 0, $conv = 0, $tt4 = 0, $4 = 0, $cmp5 = 0, $i = 0, $5 = 0, $tobool = 0, $p11 = 0, $6 = 0, $7 = 0, $sym13 = 0, $8 = 0, $call14 = 0, $conv15 = 0, $method_defined_p_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $id = __stackBase__ | 0;
    $sym3 = __stackBase__ + 12 | 0;
    _get_sym_or_str_arg($id, $mrb);
    $tt = $id + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 4;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $p = $mod;
    $1 = HEAP32[$p >> 2] | 0;
    $2 = $1;
    $sym = $id;
    $3 = HEAP16[$sym >> 1] | 0;
    $call = _mrb_obj_respond_to($2, $3) | 0;
    $conv = $call & 255;
    $method_defined_p_0 = $conv;
    label = 7;
    break;
   case 4:
    _mrb_check_intern_str($sym3, $mrb, $id);
    $tt4 = $sym3 + 8 | 0;
    $4 = HEAP32[$tt4 >> 2] | 0;
    $cmp5 = ($4 | 0) == 0;
    if ($cmp5) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $i = $sym3;
    $5 = HEAP32[$i >> 2] | 0;
    $tobool = ($5 | 0) == 0;
    if ($tobool) {
      $method_defined_p_0 = 0;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $p11 = $mod;
    $6 = HEAP32[$p11 >> 2] | 0;
    $7 = $6;
    $sym13 = $sym3;
    $8 = HEAP16[$sym13 >> 1] | 0;
    $call14 = _mrb_obj_respond_to($7, $8) | 0;
    $conv15 = $call14 & 255;
    $method_defined_p_0 = $conv15;
    label = 7;
    break;
   case 7:
    _mrb_bool_value793($agg_result, $method_defined_p_0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_mod_to_s($agg_result, $mrb, $klass) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $klass = $klass | 0;
  var $str = 0, $v = 0, $agg_tmp = 0, $tmp2 = 0, $agg_tmp3 = 0, $tmp4 = 0, $tmp5 = 0, $tmp9 = 0, $tmp16 = 0, $tmp18 = 0, $tmp20 = 0, $agg_tmp22 = 0, $tmp23 = 0, $tt = 0, $0 = 0, $cmp = 0, $call = 0, $tt1 = 0, $1 = 0, $p = 0, $2 = 0, $3 = 0, $path_sroa_0_0__cast1 = 0, $path_sroa_0_0_copyload2 = 0, $path_sroa_2_8__idx7 = 0, $path_sroa_2_8_copyload8 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $path_sroa_1_4__idx3 = 0, $path_sroa_1_4__cast4 = 0, $path_sroa_1_4_copyload5 = 0, $path_sroa_0_0__cast = 0, $path_sroa_1_4__idx = 0, $path_sroa_1_4__cast = 0, $path_sroa_2_8__idx6 = 0, $9 = 0, $10 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 156 | 0;
  tempParam = $klass;
  $klass = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$klass >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$klass + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$klass + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $str = __stackBase__ | 0;
    $v = __stackBase__ + 12 | 0;
    $agg_tmp = __stackBase__ + 24 | 0;
    $tmp2 = __stackBase__ + 36 | 0;
    $agg_tmp3 = __stackBase__ + 48 | 0;
    $tmp4 = __stackBase__ + 60 | 0;
    $tmp5 = __stackBase__ + 72 | 0;
    $tmp9 = __stackBase__ + 84 | 0;
    $tmp16 = __stackBase__ + 96 | 0;
    $tmp18 = __stackBase__ + 108 | 0;
    $tmp20 = __stackBase__ + 120 | 0;
    $agg_tmp22 = __stackBase__ + 132 | 0;
    $tmp23 = __stackBase__ + 144 | 0;
    $tt = $klass + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 12;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    $call = _mrb_intern2($mrb, 93256, 12) | 0;
    _mrb_iv_get($v, 0, $klass, $call);
    _mrb_str_new($str, $mrb, 102556, 8);
    $tt1 = $v + 8 | 0;
    $1 = HEAP32[$tt1 >> 2] | 0;
    if (($1 | 0) == 9 | ($1 | 0) == 10 | ($1 | 0) == 12) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _mrb_inspect($agg_tmp, $mrb, $v);
    _mrb_str_append($tmp2, $mrb, $str, $agg_tmp);
    label = 6;
    break;
   case 5:
    _mrb_any_to_s($agg_tmp3, $mrb, $v);
    _mrb_str_append($tmp4, $mrb, $str, $agg_tmp3);
    label = 6;
    break;
   case 6:
    _mrb_str_cat($tmp5, $mrb, $str, 102232, 1);
    label = 14;
    break;
   case 7:
    _mrb_str_buf_new($str, $mrb, 32);
    $p = $klass;
    $2 = HEAP32[$p >> 2] | 0;
    $3 = $2;
    _mrb_class_path($tmp9, $mrb, $3);
    $path_sroa_0_0__cast1 = $tmp9;
    $path_sroa_0_0_copyload2 = HEAP32[$path_sroa_0_0__cast1 >> 2] | 0;
    $path_sroa_2_8__idx7 = $tmp9 + 8 | 0;
    $path_sroa_2_8_copyload8 = HEAP32[$path_sroa_2_8__idx7 >> 2] | 0;
    $4 = $path_sroa_2_8_copyload8 | $path_sroa_0_0_copyload2;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 8;
      break;
    } else {
      label = 13;
      break;
    }
   case 8:
    $6 = HEAP32[$tt >> 2] | 0;
    if (($6 | 0) == 9) {
      label = 9;
      break;
    } else if (($6 | 0) == 10) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    _mrb_str_cat($tmp16, $mrb, $str, 102556, 8);
    label = 12;
    break;
   case 10:
    _mrb_str_cat($tmp18, $mrb, $str, 93204, 9);
    label = 12;
    break;
   case 11:
    _mrb_str_cat($tmp20, $mrb, $str, 93172, 9);
    label = 12;
    break;
   case 12:
    _mrb_ptr_to_str($agg_tmp22, $mrb, $2);
    _mrb_str_concat($mrb, $str, $agg_tmp22);
    _mrb_str_cat($tmp23, $mrb, $str, 102232, 1);
    label = 14;
    break;
   case 13:
    $7 = $str;
    $8 = $tmp9;
    $path_sroa_1_4__idx3 = $8 + 4 | 0;
    $path_sroa_1_4__cast4 = $path_sroa_1_4__idx3;
    $path_sroa_1_4_copyload5 = HEAP32[$path_sroa_1_4__cast4 >> 2] | 0;
    $path_sroa_0_0__cast = $str;
    HEAP32[$path_sroa_0_0__cast >> 2] = $path_sroa_0_0_copyload2;
    $path_sroa_1_4__idx = $7 + 4 | 0;
    $path_sroa_1_4__cast = $path_sroa_1_4__idx;
    HEAP32[$path_sroa_1_4__cast >> 2] = $path_sroa_1_4_copyload5;
    $path_sroa_2_8__idx6 = $str + 8 | 0;
    HEAP32[$path_sroa_2_8__idx6 >> 2] = $path_sroa_2_8_copyload8;
    label = 14;
    break;
   case 14:
    $9 = $agg_result;
    $10 = $str;
    HEAP32[$9 >> 2] = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 + 4 >> 2] = HEAP32[$10 + 4 >> 2] | 0;
    HEAP32[$9 + 8 >> 2] = HEAP32[$10 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_mod_ancestors($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $result = 0, $agg_tmp = 0, $agg_tmp1 = 0, $agg_tmp6 = 0, $p = 0, $0 = 0, $1 = 0, $super = 0, $2 = 0, $c_011 = 0, $tobool12 = 0, $c_013 = 0, $3 = 0, $4 = 0, $bf_clear = 0, $c2 = 0, $5 = 0, $6 = 0, $7 = 0, $super8 = 0, $c_0 = 0, $tobool = 0, $8 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $result = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $agg_tmp1 = __stackBase__ + 24 | 0;
    $agg_tmp6 = __stackBase__ + 36 | 0;
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    _mrb_ary_new($result, $mrb);
    $1 = $result;
    _mrb_obj_value753($agg_tmp, $0);
    _mrb_ary_push($mrb, $result, $agg_tmp);
    $super = $0 + 20 | 0;
    $2 = $super;
    $c_011 = HEAP32[$2 >> 2] | 0;
    $tobool12 = ($c_011 | 0) == 0;
    if ($tobool12) {
      label = 7;
      break;
    } else {
      $c_013 = $c_011;
      label = 3;
      break;
    }
   case 3:
    $3 = $c_013;
    $4 = HEAP32[$3 >> 2] | 0;
    $bf_clear = $4 & 255;
    if (($bf_clear | 0) == 11) {
      label = 4;
      break;
    } else if (($bf_clear | 0) == 12) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $c2 = $c_013 + 4 | 0;
    $5 = HEAP32[$c2 >> 2] | 0;
    $6 = $5 | 0;
    _mrb_obj_value753($agg_tmp1, $6);
    _mrb_ary_push($mrb, $result, $agg_tmp1);
    label = 6;
    break;
   case 5:
    $7 = $c_013 | 0;
    _mrb_obj_value753($agg_tmp6, $7);
    _mrb_ary_push($mrb, $result, $agg_tmp6);
    label = 6;
    break;
   case 6:
    $super8 = $c_013 + 20 | 0;
    $c_0 = HEAP32[$super8 >> 2] | 0;
    $tobool = ($c_0 | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      $c_013 = $c_0;
      label = 3;
      break;
    }
   case 7:
    $8 = $agg_result;
    HEAP32[$8 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$8 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$8 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mod_define_method($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $mid = 0, $blk = 0, $p = 0, $0 = 0, $1 = 0, $call = 0, $tt = 0, $2 = 0, $cmp = 0, $i = 0, $3 = 0, $tobool = 0, $call3 = 0, $proc_class = 0, $4 = 0, $call4 = 0, $5 = 0, $p6 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $mid = __stackBase__ | 0;
    $blk = __stackBase__ + 4 | 0;
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    $call = _mrb_get_args($mrb, 93356, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $mid, HEAP32[tempInt + 4 >> 2] = $blk, tempInt) | 0) | 0;
    $tt = $blk + 8 | 0;
    $2 = HEAP32[$tt >> 2] | 0;
    $cmp = ($2 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $i = $blk;
    $3 = HEAP32[$i >> 2] | 0;
    $tobool = ($3 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $call3 = _mrb_class_get($mrb, 93124) | 0;
    _mrb_raise($mrb, $call3, 93292);
    label = 5;
    break;
   case 5:
    $proc_class = $mrb + 56 | 0;
    $4 = HEAP32[$proc_class >> 2] | 0;
    $call4 = _mrb_obj_alloc($mrb, 13, $4) | 0;
    $5 = $call4;
    $p6 = $blk;
    $6 = HEAP32[$p6 >> 2] | 0;
    $7 = $6;
    _mrb_proc_copy($5, $7);
    $8 = HEAP16[$mid >> 1] | 0;
    _mrb_define_method_raw($mrb, $1, $8, $5);
    $9 = $agg_result;
    $10 = $blk;
    HEAP32[$9 >> 2] = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 + 4 >> 2] = HEAP32[$10 + 4 >> 2] | 0;
    HEAP32[$9 + 8 >> 2] = HEAP32[$10 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_mod_eqq($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $obj = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $obj = __stackBase__ | 0;
  _mrb_get_args($mrb, 93596, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $obj, tempInt) | 0);
  _mrb_bool_value793($agg_result, _mrb_obj_is_kind_of($mrb, $obj, HEAP32[$mod >> 2] | 0) & 255);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_s_constants($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_raise($mrb, _mrb_class_get($mrb, 105404) | 0, 93636);
  _mrb_nil_value777($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _check_cv_name_str($mrb, $str) {
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $p = 0, $0 = 0, $ptr = 0, $1 = 0, $2 = 0, $len3 = 0, $3 = 0, $4 = 0, $cmp = 0, $5 = 0, $cmp4 = 0, $arrayidx6 = 0, $6 = 0, $cmp8 = 0, $call = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $str;
    $0 = HEAP32[$p >> 2] | 0;
    $ptr = $0 + 20 | 0;
    $1 = $ptr;
    $2 = HEAP32[$1 >> 2] | 0;
    $len3 = $0 + 12 | 0;
    $3 = $len3;
    $4 = HEAP32[$3 >> 2] | 0;
    $cmp = $4 >>> 0 < 3;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $5 = HEAP8[$2] | 0;
    $cmp4 = $5 << 24 >> 24 == 64;
    if ($cmp4) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $arrayidx6 = $2 + 1 | 0;
    $6 = HEAP8[$arrayidx6] | 0;
    $cmp8 = $6 << 24 >> 24 == 64;
    if ($cmp8) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $call = _mrb_intern_str($mrb, $str) | 0;
    _mrb_name_error($mrb, $call, 93056, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$str >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$str + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$str + 8 >> 2] | 0, tempInt) | 0);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _check_type($agg_result, $mrb, $val, $t, $c, $m) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $val = $val | 0;
  $t = $t | 0;
  $c = $c | 0;
  $m = $m | 0;
  var $tmp1 = 0, $agg_tmp = 0, $0 = 0, $tmp_sroa_0_0__cast1 = 0, $tmp_sroa_0_0_copyload2 = 0, $tmp_sroa_1_4__idx3 = 0, $tmp_sroa_1_4__cast4 = 0, $tmp_sroa_1_4_copyload5 = 0, $tmp_sroa_2_8__idx7 = 0, $tmp_sroa_2_8_copyload8 = 0, $1 = 0, $2 = 0, $call = 0, $3 = 0, $tmp_sroa_0_0__cast = 0, $tmp_sroa_1_4__idx = 0, $tmp_sroa_1_4__cast = 0, $tmp_sroa_2_8__idx6 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp1 = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    _mrb_check_convert_type($tmp1, $mrb, $val, $t, $c, $m);
    $0 = $tmp1;
    $tmp_sroa_0_0__cast1 = $tmp1;
    $tmp_sroa_0_0_copyload2 = HEAP32[$tmp_sroa_0_0__cast1 >> 2] | 0;
    $tmp_sroa_1_4__idx3 = $0 + 4 | 0;
    $tmp_sroa_1_4__cast4 = $tmp_sroa_1_4__idx3;
    $tmp_sroa_1_4_copyload5 = HEAP32[$tmp_sroa_1_4__cast4 >> 2] | 0;
    $tmp_sroa_2_8__idx7 = $tmp1 + 8 | 0;
    $tmp_sroa_2_8_copyload8 = HEAP32[$tmp_sroa_2_8__idx7 >> 2] | 0;
    $1 = $tmp_sroa_2_8_copyload8 | $tmp_sroa_0_0_copyload2;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 104196) | 0;
    _mrb_str_new_cstr($agg_tmp, $mrb, $c);
    _mrb_raisef($mrb, $call, 92288, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    label = 4;
    break;
   case 4:
    $3 = $agg_result;
    $tmp_sroa_0_0__cast = $agg_result;
    HEAP32[$tmp_sroa_0_0__cast >> 2] = $tmp_sroa_0_0_copyload2;
    $tmp_sroa_1_4__idx = $3 + 4 | 0;
    $tmp_sroa_1_4__cast = $tmp_sroa_1_4__idx;
    HEAP32[$tmp_sroa_1_4__cast >> 2] = $tmp_sroa_1_4_copyload5;
    $tmp_sroa_2_8__idx6 = $agg_result + 8 | 0;
    HEAP32[$tmp_sroa_2_8__idx6 >> 2] = $tmp_sroa_2_8_copyload8;
    STACKTOP = __stackBase__;
    return;
  }
}
function _codegen_malloc($s, $len) {
  $s = $s | 0;
  $len = $len | 0;
  var $mrb = 0, $0 = 0, $call = 0, $tobool = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $mrb = $s | 0;
    $0 = HEAP32[$mrb >> 2] | 0;
    $call = _mrb_malloc($0, $len) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _codegen_error($s, 93688);
    label = 4;
    break;
   case 4:
    return $call | 0;
  }
  return 0;
}
function _codegen_realloc($s, $p, $len) {
  $s = $s | 0;
  $p = $p | 0;
  $len = $len | 0;
  var $mrb = 0, $0 = 0, $call = 0, $tobool = 0, $cmp = 0, $or_cond = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $mrb = $s | 0;
    $0 = HEAP32[$mrb >> 2] | 0;
    $call = _mrb_realloc($0, $p, $len) | 0;
    $tobool = ($call | 0) != 0;
    $cmp = ($len | 0) == 0;
    $or_cond = $tobool | $cmp;
    if ($or_cond) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _codegen_error($s, 107812);
    label = 4;
    break;
   case 4:
    return $call | 0;
  }
  return 0;
}
function _codedump_all($mrb, $start) {
  $mrb = $mrb | 0;
  $start = $start | 0;
  var $irep_len = 0, $0 = 0, $cmp4 = 0, $i_05 = 0, $inc = 0, $1 = 0, $cmp = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $irep_len = $mrb + 28 | 0;
    $0 = HEAP32[$irep_len >> 2] | 0;
    $cmp4 = $0 >>> 0 > $start >>> 0;
    if ($cmp4) {
      $i_05 = $start;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _codedump($mrb, $i_05);
    $inc = $i_05 + 1 | 0;
    $1 = HEAP32[$irep_len >> 2] | 0;
    $cmp = $inc >>> 0 < $1 >>> 0;
    if ($cmp) {
      $i_05 = $inc;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    return;
  }
}
function _codegen_error($s, $message) {
  $s = $s | 0;
  $message = $message | 0;
  var $tobool = 0, $prev9 = 0, $0 = 0, $tobool110 = 0, $mpool11 = 0, $1 = 0, $prev12 = 0, $2 = 0, $prev = 0, $3 = 0, $tobool1 = 0, $mpool = 0, $4 = 0, $s_addr_0_lcssa = 0, $filename = 0, $5 = 0, $tobool4 = 0, $lineno = 0, $6 = 0, $tobool5 = 0, $conv = 0, $7 = 0, $call = 0, $8 = 0, $call10 = 0, $arraydecay = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($s | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $prev9 = $s + 48 | 0;
    $0 = HEAP32[$prev9 >> 2] | 0;
    $tobool110 = ($0 | 0) == 0;
    $mpool11 = $s + 4 | 0;
    $1 = HEAP32[$mpool11 >> 2] | 0;
    _mrb_pool_close($1);
    if ($tobool110) {
      $s_addr_0_lcssa = $s;
      label = 6;
      break;
    } else {
      $prev12 = $prev9;
      label = 5;
      break;
    }
   case 4:
    STACKTOP = __stackBase__;
    return;
   case 5:
    $2 = HEAP32[$prev12 >> 2] | 0;
    $prev = $2 + 48 | 0;
    $3 = HEAP32[$prev >> 2] | 0;
    $tobool1 = ($3 | 0) == 0;
    $mpool = $2 + 4 | 0;
    $4 = HEAP32[$mpool >> 2] | 0;
    _mrb_pool_close($4);
    if ($tobool1) {
      $s_addr_0_lcssa = $2;
      label = 6;
      break;
    } else {
      $prev12 = $prev;
      label = 5;
      break;
    }
   case 6:
    $filename = $s_addr_0_lcssa + 80 | 0;
    $5 = HEAP32[$filename >> 2] | 0;
    $tobool4 = ($5 | 0) == 0;
    if ($tobool4) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $lineno = $s_addr_0_lcssa + 84 | 0;
    $6 = HEAP16[$lineno >> 1] | 0;
    $tobool5 = $6 << 16 >> 16 == 0;
    if ($tobool5) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $conv = $6 << 16 >> 16;
    $7 = HEAP32[_stderr >> 2] | 0;
    $call = _fprintf($7 | 0, 111604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $5, HEAP32[tempInt + 4 >> 2] = $conv, HEAP32[tempInt + 8 >> 2] = $message, tempInt) | 0) | 0;
    label = 10;
    break;
   case 9:
    $8 = HEAP32[_stderr >> 2] | 0;
    $call10 = _fprintf($8 | 0, 111220, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $message, tempInt) | 0) | 0;
    label = 10;
    break;
   case 10:
    $arraydecay = $s_addr_0_lcssa + 8 | 0;
    _longjmp($arraydecay | 0, 1);
  }
}
function _codedump($mrb, $n) {
  $mrb = $mrb | 0;
  $n = $n | 0;
  var $s = 0, $irep1 = 0, $0 = 0, $arrayidx = 0, $1 = 0, $tobool = 0, $nregs = 0, $2 = 0, $conv = 0, $nlocals = 0, $3 = 0, $conv2 = 0, $plen = 0, $4 = 0, $slen = 0, $5 = 0, $call = 0, $ilen = 0, $6 = 0, $cmp251 = 0, $iseq = 0, $syms = 0, $syms54 = 0, $syms61 = 0, $syms72 = 0, $syms79 = 0, $syms92 = 0, $syms101 = 0, $syms112 = 0, $syms119 = 0, $syms146 = 0, $syms153 = 0, $syms186 = 0, $syms197 = 0, $syms208 = 0, $syms323 = 0, $syms332 = 0, $syms343 = 0, $syms354 = 0, $syms365 = 0, $syms376 = 0, $syms387 = 0, $syms398 = 0, $syms409 = 0, $syms420 = 0, $syms431 = 0, $syms442 = 0, $pool = 0, $7 = 0, $p = 0, $syms516 = 0, $syms525 = 0, $i_0252 = 0, $call4 = 0, $call5 = 0, $8 = 0, $arrayidx6 = 0, $9 = 0, $and = 0, $puts = 0, $shr = 0, $shr10 = 0, $and11 = 0, $call12 = 0, $shr14 = 0, $shr16 = 0, $and17 = 0, $call18 = 0, $shr20 = 0, $shr22 = 0, $and23 = 0, $sub = 0, $call24 = 0, $shr26 = 0, $shr28 = 0, $and29 = 0, $10 = 0, $arrayidx30 = 0, $11 = 0, $call31 = 0, $call32 = 0, $shr34 = 0, $call36 = 0, $shr38 = 0, $call40 = 0, $shr42 = 0, $call44 = 0, $shr46 = 0, $call48 = 0, $shr50 = 0, $shr52 = 0, $and53 = 0, $12 = 0, $arrayidx55 = 0, $13 = 0, $call56 = 0, $call57 = 0, $shr59 = 0, $and60 = 0, $14 = 0, $arrayidx62 = 0, $15 = 0, $call63 = 0, $shr64 = 0, $call66 = 0, $shr68 = 0, $shr70 = 0, $and71 = 0, $16 = 0, $arrayidx73 = 0, $17 = 0, $call74 = 0, $call75 = 0, $shr77 = 0, $and78 = 0, $18 = 0, $arrayidx80 = 0, $19 = 0, $call81 = 0, $shr82 = 0, $call84 = 0, $shr86 = 0, $shr90 = 0, $and91 = 0, $20 = 0, $arrayidx93 = 0, $21 = 0, $call94 = 0, $call95 = 0, $shr97 = 0, $add = 0, $shr99 = 0, $and100 = 0, $22 = 0, $arrayidx102 = 0, $23 = 0, $call103 = 0, $call106 = 0, $shr108 = 0, $shr110 = 0, $and111 = 0, $24 = 0, $arrayidx113 = 0, $25 = 0, $call114 = 0, $call115 = 0, $shr117 = 0, $and118 = 0, $26 = 0, $arrayidx120 = 0, $27 = 0, $call121 = 0, $shr122 = 0, $call124 = 0, $shr126 = 0, $shr128 = 0, $and129 = 0, $shr130 = 0, $and131 = 0, $call132 = 0, $shr134 = 0, $shr136 = 0, $and137 = 0, $shr138 = 0, $and139 = 0, $call140 = 0, $shr142 = 0, $shr144 = 0, $and145 = 0, $28 = 0, $arrayidx147 = 0, $29 = 0, $call148 = 0, $call149 = 0, $shr151 = 0, $and152 = 0, $30 = 0, $arrayidx154 = 0, $31 = 0, $call155 = 0, $shr156 = 0, $call158 = 0, $shr160 = 0, $and161 = 0, $sub162 = 0, $add163 = 0, $call164 = 0, $shr166 = 0, $shr168 = 0, $and169 = 0, $sub170 = 0, $add171 = 0, $call172 = 0, $shr174 = 0, $shr176 = 0, $and177 = 0, $sub178 = 0, $add179 = 0, $call180 = 0, $shr182 = 0, $shr184 = 0, $and185 = 0, $32 = 0, $arrayidx187 = 0, $33 = 0, $call188 = 0, $shr189 = 0, $and190 = 0, $call191 = 0, $shr193 = 0, $shr195 = 0, $and196 = 0, $34 = 0, $arrayidx198 = 0, $35 = 0, $call199 = 0, $shr200 = 0, $and201 = 0, $call202 = 0, $shr204 = 0, $shr206 = 0, $and207 = 0, $36 = 0, $arrayidx209 = 0, $37 = 0, $call210 = 0, $shr211 = 0, $and212 = 0, $call213 = 0, $shr215 = 0, $shr217 = 0, $and218 = 0, $call219 = 0, $shr221 = 0, $shr223 = 0, $shr225243 = 0, $and226 = 0, $shr229244 = 0, $and230 = 0, $shr233245 = 0, $and234 = 0, $and238 = 0, $call239 = 0, $shr241 = 0, $shr243237 = 0, $and244 = 0, $shr247238 = 0, $and248 = 0, $shr251239 = 0, $and252 = 0, $shr255240 = 0, $and256 = 0, $shr259241 = 0, $and260 = 0, $shr263242 = 0, $and264 = 0, $and267 = 0, $call268 = 0, $shr270 = 0, $call272 = 0, $shr273 = 0, $and274 = 0, $putchar = 0, $puts246 = 0, $puts247 = 0, $puts248 = 0, $shr283 = 0, $shr285 = 0, $shr287234 = 0, $and288 = 0, $shr291235 = 0, $and292 = 0, $shr295236 = 0, $and296 = 0, $and300 = 0, $call301 = 0, $shr303 = 0, $shr305 = 0, $and306 = 0, $shr307 = 0, $and308 = 0, $call309 = 0, $shr311 = 0, $shr313 = 0, $and314 = 0, $shr315 = 0, $and316 = 0, $call317 = 0, $shr319 = 0, $shr321 = 0, $and322 = 0, $38 = 0, $arrayidx324 = 0, $39 = 0, $call325 = 0, $call326 = 0, $shr328 = 0, $shr330 = 0, $and331 = 0, $40 = 0, $arrayidx333 = 0, $41 = 0, $call334 = 0, $shr335 = 0, $and336 = 0, $call337 = 0, $shr339 = 0, $shr341 = 0, $and342 = 0, $42 = 0, $arrayidx344 = 0, $43 = 0, $call345 = 0, $shr346 = 0, $and347 = 0, $call348 = 0, $shr350 = 0, $shr352 = 0, $and353 = 0, $44 = 0, $arrayidx355 = 0, $45 = 0, $call356 = 0, $shr357 = 0, $and358 = 0, $call359 = 0, $shr361 = 0, $shr363 = 0, $and364 = 0, $46 = 0, $arrayidx366 = 0, $47 = 0, $call367 = 0, $shr368 = 0, $and369 = 0, $call370 = 0, $shr372 = 0, $shr374 = 0, $and375 = 0, $48 = 0, $arrayidx377 = 0, $49 = 0, $call378 = 0, $shr379 = 0, $and380 = 0, $call381 = 0, $shr383 = 0, $shr385 = 0, $and386 = 0, $50 = 0, $arrayidx388 = 0, $51 = 0, $call389 = 0, $shr390 = 0, $and391 = 0, $call392 = 0, $shr394 = 0, $shr396 = 0, $and397 = 0, $52 = 0, $arrayidx399 = 0, $53 = 0, $call400 = 0, $shr401 = 0, $and402 = 0, $call403 = 0, $shr405 = 0, $shr407 = 0, $and408 = 0, $54 = 0, $arrayidx410 = 0, $55 = 0, $call411 = 0, $shr412 = 0, $and413 = 0, $call414 = 0, $shr416 = 0, $shr418 = 0, $and419 = 0, $56 = 0, $arrayidx421 = 0, $57 = 0, $call422 = 0, $shr423 = 0, $and424 = 0, $call425 = 0, $shr427 = 0, $shr429 = 0, $and430 = 0, $58 = 0, $arrayidx432 = 0, $59 = 0, $call433 = 0, $shr434 = 0, $and435 = 0, $call436 = 0, $shr438 = 0, $shr440 = 0, $and441 = 0, $60 = 0, $arrayidx443 = 0, $61 = 0, $call444 = 0, $shr445 = 0, $and446 = 0, $call447 = 0, $puts249 = 0, $shr451 = 0, $shr453 = 0, $and454 = 0, $shr455 = 0, $and456 = 0, $call457 = 0, $shr459 = 0, $shr461 = 0, $and462 = 0, $call463 = 0, $shr465 = 0, $shr467 = 0, $and468 = 0, $call469 = 0, $shr471 = 0, $shr473 = 0, $and474 = 0, $shr475 = 0, $and476 = 0, $call477 = 0, $shr479 = 0, $shr481 = 0, $and482 = 0, $shr483 = 0, $and484 = 0, $call485 = 0, $shr487 = 0, $and488 = 0, $62 = 0, $arrayidx489 = 0, $63 = 0, $shr490 = 0, $64 = 0, $ptr = 0, $65 = 0, $66 = 0, $call492 = 0, $shr494 = 0, $shr496 = 0, $and497 = 0, $call498 = 0, $shr500 = 0, $shr502 = 0, $and503 = 0, $shr504 = 0, $and505 = 0, $call506 = 0, $shr508 = 0, $call510 = 0, $shr512 = 0, $shr514 = 0, $and515 = 0, $67 = 0, $arrayidx517 = 0, $68 = 0, $call518 = 0, $call519 = 0, $shr521 = 0, $shr523 = 0, $and524 = 0, $69 = 0, $arrayidx526 = 0, $70 = 0, $call527 = 0, $call528 = 0, $shr530 = 0, $shr532 = 0, $and533 = 0, $add534 = 0, $call535 = 0, $shr537 = 0, $shr539 = 0, $and540 = 0, $call541 = 0, $shr543 = 0, $call545 = 0, $shr547 = 0, $and548 = 0, $call549 = 0, $shr551 = 0, $and552 = 0, $add553 = 0, $call554 = 0, $shr556 = 0, $and557 = 0, $sub558 = 0, $add559 = 0, $call560 = 0, $shr562 = 0, $call564 = 0, $shr566 = 0, $call568 = 0, $shr570 = 0, $call572 = 0, $shr574 = 0, $call576 = 0, $shr579 = 0, $shr581 = 0, $and582 = 0, $shr583 = 0, $and584 = 0, $call585 = 0, $inc = 0, $71 = 0, $cmp = 0, $putchar250 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $s = __stackBase__ | 0;
    $irep1 = $mrb + 24 | 0;
    $0 = HEAP32[$irep1 >> 2] | 0;
    $arrayidx = $0 + ($n << 2) | 0;
    $1 = HEAP32[$arrayidx >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 81;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $nregs = $1 + 6 | 0;
    $2 = HEAP16[$nregs >> 1] | 0;
    $conv = $2 & 65535;
    $nlocals = $1 + 4 | 0;
    $3 = HEAP16[$nlocals >> 1] | 0;
    $conv2 = $3 & 65535;
    $plen = $1 + 36 | 0;
    $4 = HEAP32[$plen >> 2] | 0;
    $slen = $1 + 40 | 0;
    $5 = HEAP32[$slen >> 2] | 0;
    $call = _printf(104444, (tempInt = STACKTOP, STACKTOP = STACKTOP + 20 | 0, HEAP32[tempInt >> 2] = $n, HEAP32[tempInt + 4 >> 2] = $conv, HEAP32[tempInt + 8 >> 2] = $conv2, HEAP32[tempInt + 12 >> 2] = $4, HEAP32[tempInt + 16 >> 2] = $5, tempInt) | 0) | 0;
    $ilen = $1 + 32 | 0;
    $6 = HEAP32[$ilen >> 2] | 0;
    $cmp251 = ($6 | 0) == 0;
    if ($cmp251) {
      label = 80;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $iseq = $1 + 12 | 0;
    $syms = $1 + 20 | 0;
    $syms54 = $1 + 20 | 0;
    $syms61 = $1 + 20 | 0;
    $syms72 = $1 + 20 | 0;
    $syms79 = $1 + 20 | 0;
    $syms92 = $1 + 20 | 0;
    $syms101 = $1 + 20 | 0;
    $syms112 = $1 + 20 | 0;
    $syms119 = $1 + 20 | 0;
    $syms146 = $1 + 20 | 0;
    $syms153 = $1 + 20 | 0;
    $syms186 = $1 + 20 | 0;
    $syms197 = $1 + 20 | 0;
    $syms208 = $1 + 20 | 0;
    $syms323 = $1 + 20 | 0;
    $syms332 = $1 + 20 | 0;
    $syms343 = $1 + 20 | 0;
    $syms354 = $1 + 20 | 0;
    $syms365 = $1 + 20 | 0;
    $syms376 = $1 + 20 | 0;
    $syms387 = $1 + 20 | 0;
    $syms398 = $1 + 20 | 0;
    $syms409 = $1 + 20 | 0;
    $syms420 = $1 + 20 | 0;
    $syms431 = $1 + 20 | 0;
    $syms442 = $1 + 20 | 0;
    $pool = $1 + 16 | 0;
    $7 = $s;
    $p = $s;
    $syms516 = $1 + 20 | 0;
    $syms525 = $1 + 20 | 0;
    $i_0252 = 0;
    label = 5;
    break;
   case 5:
    $call4 = _mrb_gc_arena_save($mrb) | 0;
    $call5 = _printf(104104, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i_0252, tempInt) | 0) | 0;
    $8 = HEAP32[$iseq >> 2] | 0;
    $arrayidx6 = $8 + ($i_0252 << 2) | 0;
    $9 = HEAP32[$arrayidx6 >> 2] | 0;
    $and = $9 & 127;
    if (($and | 0) == 0) {
      label = 6;
      break;
    } else if (($and | 0) == 1) {
      label = 7;
      break;
    } else if (($and | 0) == 2) {
      label = 8;
      break;
    } else if (($and | 0) == 3) {
      label = 9;
      break;
    } else if (($and | 0) == 4) {
      label = 10;
      break;
    } else if (($and | 0) == 5) {
      label = 11;
      break;
    } else if (($and | 0) == 6) {
      label = 12;
      break;
    } else if (($and | 0) == 7) {
      label = 13;
      break;
    } else if (($and | 0) == 8) {
      label = 14;
      break;
    } else if (($and | 0) == 9) {
      label = 15;
      break;
    } else if (($and | 0) == 10) {
      label = 16;
      break;
    } else if (($and | 0) == 17) {
      label = 17;
      break;
    } else if (($and | 0) == 18) {
      label = 18;
      break;
    } else if (($and | 0) == 19) {
      label = 19;
      break;
    } else if (($and | 0) == 20) {
      label = 20;
      break;
    } else if (($and | 0) == 13) {
      label = 21;
      break;
    } else if (($and | 0) == 14) {
      label = 22;
      break;
    } else if (($and | 0) == 21) {
      label = 23;
      break;
    } else if (($and | 0) == 22) {
      label = 24;
      break;
    } else if (($and | 0) == 15) {
      label = 25;
      break;
    } else if (($and | 0) == 16) {
      label = 26;
      break;
    } else if (($and | 0) == 23) {
      label = 27;
      break;
    } else if (($and | 0) == 24) {
      label = 28;
      break;
    } else if (($and | 0) == 25) {
      label = 29;
      break;
    } else if (($and | 0) == 32) {
      label = 30;
      break;
    } else if (($and | 0) == 33) {
      label = 31;
      break;
    } else if (($and | 0) == 42) {
      label = 32;
      break;
    } else if (($and | 0) == 36) {
      label = 33;
      break;
    } else if (($and | 0) == 37) {
      label = 34;
      break;
    } else if (($and | 0) == 38) {
      label = 35;
      break;
    } else if (($and | 0) == 41) {
      label = 36;
      break;
    } else if (($and | 0) == 43) {
      label = 41;
      break;
    } else if (($and | 0) == 64) {
      label = 42;
      break;
    } else if (($and | 0) == 65) {
      label = 43;
      break;
    } else if (($and | 0) == 70) {
      label = 44;
      break;
    } else if (($and | 0) == 44) {
      label = 45;
      break;
    } else if (($and | 0) == 45) {
      label = 46;
      break;
    } else if (($and | 0) == 46) {
      label = 47;
      break;
    } else if (($and | 0) == 47) {
      label = 48;
      break;
    } else if (($and | 0) == 48) {
      label = 49;
      break;
    } else if (($and | 0) == 49) {
      label = 50;
      break;
    } else if (($and | 0) == 51) {
      label = 51;
      break;
    } else if (($and | 0) == 52) {
      label = 52;
      break;
    } else if (($and | 0) == 53) {
      label = 53;
      break;
    } else if (($and | 0) == 54) {
      label = 54;
      break;
    } else if (($and | 0) == 50) {
      label = 55;
      break;
    } else if (($and | 0) == 74) {
      label = 56;
      break;
    } else if (($and | 0) == 55) {
      label = 57;
      break;
    } else if (($and | 0) == 56) {
      label = 58;
      break;
    } else if (($and | 0) == 57) {
      label = 59;
      break;
    } else if (($and | 0) == 58) {
      label = 60;
      break;
    } else if (($and | 0) == 60) {
      label = 61;
      break;
    } else if (($and | 0) == 61) {
      label = 62;
      break;
    } else if (($and | 0) == 62) {
      label = 63;
      break;
    } else if (($and | 0) == 63) {
      label = 64;
      break;
    } else if (($and | 0) == 66) {
      label = 65;
      break;
    } else if (($and | 0) == 67) {
      label = 66;
      break;
    } else if (($and | 0) == 68) {
      label = 67;
      break;
    } else if (($and | 0) == 69) {
      label = 68;
      break;
    } else if (($and | 0) == 71) {
      label = 69;
      break;
    } else if (($and | 0) == 72) {
      label = 70;
      break;
    } else if (($and | 0) == 75) {
      label = 71;
      break;
    } else if (($and | 0) == 30) {
      label = 72;
      break;
    } else if (($and | 0) == 26) {
      label = 73;
      break;
    } else if (($and | 0) == 27) {
      label = 74;
      break;
    } else if (($and | 0) == 29) {
      label = 75;
      break;
    } else if (($and | 0) == 28) {
      label = 76;
      break;
    } else if (($and | 0) == 31) {
      label = 77;
      break;
    } else {
      label = 78;
      break;
    }
   case 6:
    $puts = _puts(59996) | 0;
    label = 79;
    break;
   case 7:
    $shr = $9 >>> 23;
    $shr10 = $9 >>> 14;
    $and11 = $shr10 & 511;
    $call12 = _printf(103536, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr, HEAP32[tempInt + 4 >> 2] = $and11, tempInt) | 0) | 0;
    label = 79;
    break;
   case 8:
    $shr14 = $9 >>> 23;
    $shr16 = $9 >>> 7;
    $and17 = $shr16 & 65535;
    $call18 = _printf(103272, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr14, HEAP32[tempInt + 4 >> 2] = $and17, tempInt) | 0) | 0;
    label = 79;
    break;
   case 9:
    $shr20 = $9 >>> 23;
    $shr22 = $9 >>> 7;
    $and23 = $shr22 & 65535;
    $sub = $and23 - 32767 | 0;
    $call24 = _printf(103e3, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr20, HEAP32[tempInt + 4 >> 2] = $sub, tempInt) | 0) | 0;
    label = 79;
    break;
   case 10:
    $shr26 = $9 >>> 23;
    $shr28 = $9 >>> 7;
    $and29 = $shr28 & 65535;
    $10 = HEAP32[$syms >> 2] | 0;
    $arrayidx30 = $10 + ($and29 << 1) | 0;
    $11 = HEAP16[$arrayidx30 >> 1] | 0;
    $call31 = _mrb_sym2name($mrb, $11) | 0;
    $call32 = _printf(102480, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr26, HEAP32[tempInt + 4 >> 2] = $call31, tempInt) | 0) | 0;
    label = 79;
    break;
   case 11:
    $shr34 = $9 >>> 23;
    $call36 = _printf(102200, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $shr34, tempInt) | 0) | 0;
    label = 79;
    break;
   case 12:
    $shr38 = $9 >>> 23;
    $call40 = _printf(101980, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $shr38, tempInt) | 0) | 0;
    label = 79;
    break;
   case 13:
    $shr42 = $9 >>> 23;
    $call44 = _printf(101768, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $shr42, tempInt) | 0) | 0;
    label = 79;
    break;
   case 14:
    $shr46 = $9 >>> 23;
    $call48 = _printf(101580, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $shr46, tempInt) | 0) | 0;
    label = 79;
    break;
   case 15:
    $shr50 = $9 >>> 23;
    $shr52 = $9 >>> 7;
    $and53 = $shr52 & 65535;
    $12 = HEAP32[$syms54 >> 2] | 0;
    $arrayidx55 = $12 + ($and53 << 1) | 0;
    $13 = HEAP16[$arrayidx55 >> 1] | 0;
    $call56 = _mrb_sym2name($mrb, $13) | 0;
    $call57 = _printf(101264, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr50, HEAP32[tempInt + 4 >> 2] = $call56, tempInt) | 0) | 0;
    label = 79;
    break;
   case 16:
    $shr59 = $9 >>> 7;
    $and60 = $shr59 & 65535;
    $14 = HEAP32[$syms61 >> 2] | 0;
    $arrayidx62 = $14 + ($and60 << 1) | 0;
    $15 = HEAP16[$arrayidx62 >> 1] | 0;
    $call63 = _mrb_sym2name($mrb, $15) | 0;
    $shr64 = $9 >>> 23;
    $call66 = _printf(101100, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $call63, HEAP32[tempInt + 4 >> 2] = $shr64, tempInt) | 0) | 0;
    label = 79;
    break;
   case 17:
    $shr68 = $9 >>> 23;
    $shr70 = $9 >>> 7;
    $and71 = $shr70 & 65535;
    $16 = HEAP32[$syms72 >> 2] | 0;
    $arrayidx73 = $16 + ($and71 << 1) | 0;
    $17 = HEAP16[$arrayidx73 >> 1] | 0;
    $call74 = _mrb_sym2name($mrb, $17) | 0;
    $call75 = _printf(100852, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr68, HEAP32[tempInt + 4 >> 2] = $call74, tempInt) | 0) | 0;
    label = 79;
    break;
   case 18:
    $shr77 = $9 >>> 7;
    $and78 = $shr77 & 65535;
    $18 = HEAP32[$syms79 >> 2] | 0;
    $arrayidx80 = $18 + ($and78 << 1) | 0;
    $19 = HEAP16[$arrayidx80 >> 1] | 0;
    $call81 = _mrb_sym2name($mrb, $19) | 0;
    $shr82 = $9 >>> 23;
    $call84 = _printf(100472, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $call81, HEAP32[tempInt + 4 >> 2] = $shr82, tempInt) | 0) | 0;
    label = 79;
    break;
   case 19:
    $shr86 = $9 >>> 23;
    $shr90 = $9 >>> 7;
    $and91 = $shr90 & 65535;
    $20 = HEAP32[$syms92 >> 2] | 0;
    $arrayidx93 = $20 + ($and91 << 1) | 0;
    $21 = HEAP16[$arrayidx93 >> 1] | 0;
    $call94 = _mrb_sym2name($mrb, $21) | 0;
    $call95 = _printf(100268, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr86, HEAP32[tempInt + 4 >> 2] = $shr86, HEAP32[tempInt + 8 >> 2] = $call94, tempInt) | 0) | 0;
    label = 79;
    break;
   case 20:
    $shr97 = $9 >>> 23;
    $add = $shr97 + 1 | 0;
    $shr99 = $9 >>> 7;
    $and100 = $shr99 & 65535;
    $22 = HEAP32[$syms101 >> 2] | 0;
    $arrayidx102 = $22 + ($and100 << 1) | 0;
    $23 = HEAP16[$arrayidx102 >> 1] | 0;
    $call103 = _mrb_sym2name($mrb, $23) | 0;
    $call106 = _printf(99792, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $add, HEAP32[tempInt + 4 >> 2] = $call103, HEAP32[tempInt + 8 >> 2] = $shr97, tempInt) | 0) | 0;
    label = 79;
    break;
   case 21:
    $shr108 = $9 >>> 23;
    $shr110 = $9 >>> 7;
    $and111 = $shr110 & 65535;
    $24 = HEAP32[$syms112 >> 2] | 0;
    $arrayidx113 = $24 + ($and111 << 1) | 0;
    $25 = HEAP16[$arrayidx113 >> 1] | 0;
    $call114 = _mrb_sym2name($mrb, $25) | 0;
    $call115 = _printf(99484, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr108, HEAP32[tempInt + 4 >> 2] = $call114, tempInt) | 0) | 0;
    label = 79;
    break;
   case 22:
    $shr117 = $9 >>> 7;
    $and118 = $shr117 & 65535;
    $26 = HEAP32[$syms119 >> 2] | 0;
    $arrayidx120 = $26 + ($and118 << 1) | 0;
    $27 = HEAP16[$arrayidx120 >> 1] | 0;
    $call121 = _mrb_sym2name($mrb, $27) | 0;
    $shr122 = $9 >>> 23;
    $call124 = _printf(99200, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $call121, HEAP32[tempInt + 4 >> 2] = $shr122, tempInt) | 0) | 0;
    label = 79;
    break;
   case 23:
    $shr126 = $9 >>> 23;
    $shr128 = $9 >>> 14;
    $and129 = $shr128 & 511;
    $shr130 = $9 >>> 7;
    $and131 = $shr130 & 127;
    $call132 = _printf(98956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr126, HEAP32[tempInt + 4 >> 2] = $and129, HEAP32[tempInt + 8 >> 2] = $and131, tempInt) | 0) | 0;
    label = 79;
    break;
   case 24:
    $shr134 = $9 >>> 23;
    $shr136 = $9 >>> 14;
    $and137 = $shr136 & 511;
    $shr138 = $9 >>> 7;
    $and139 = $shr138 & 127;
    $call140 = _printf(98728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr134, HEAP32[tempInt + 4 >> 2] = $and137, HEAP32[tempInt + 8 >> 2] = $and139, tempInt) | 0) | 0;
    label = 79;
    break;
   case 25:
    $shr142 = $9 >>> 23;
    $shr144 = $9 >>> 7;
    $and145 = $shr144 & 65535;
    $28 = HEAP32[$syms146 >> 2] | 0;
    $arrayidx147 = $28 + ($and145 << 1) | 0;
    $29 = HEAP16[$arrayidx147 >> 1] | 0;
    $call148 = _mrb_sym2name($mrb, $29) | 0;
    $call149 = _printf(98560, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr142, HEAP32[tempInt + 4 >> 2] = $call148, tempInt) | 0) | 0;
    label = 79;
    break;
   case 26:
    $shr151 = $9 >>> 7;
    $and152 = $shr151 & 65535;
    $30 = HEAP32[$syms153 >> 2] | 0;
    $arrayidx154 = $30 + ($and152 << 1) | 0;
    $31 = HEAP16[$arrayidx154 >> 1] | 0;
    $call155 = _mrb_sym2name($mrb, $31) | 0;
    $shr156 = $9 >>> 23;
    $call158 = _printf(98380, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $call155, HEAP32[tempInt + 4 >> 2] = $shr156, tempInt) | 0) | 0;
    label = 79;
    break;
   case 27:
    $shr160 = $9 >>> 7;
    $and161 = $shr160 & 65535;
    $sub162 = $i_0252 - 32767 | 0;
    $add163 = $sub162 + $and161 | 0;
    $call164 = _printf(98180, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $add163, tempInt) | 0) | 0;
    label = 79;
    break;
   case 28:
    $shr166 = $9 >>> 23;
    $shr168 = $9 >>> 7;
    $and169 = $shr168 & 65535;
    $sub170 = $i_0252 - 32767 | 0;
    $add171 = $sub170 + $and169 | 0;
    $call172 = _printf(97940, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr166, HEAP32[tempInt + 4 >> 2] = $add171, tempInt) | 0) | 0;
    label = 79;
    break;
   case 29:
    $shr174 = $9 >>> 23;
    $shr176 = $9 >>> 7;
    $and177 = $shr176 & 65535;
    $sub178 = $i_0252 - 32767 | 0;
    $add179 = $sub178 + $and177 | 0;
    $call180 = _printf(97716, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr174, HEAP32[tempInt + 4 >> 2] = $add179, tempInt) | 0) | 0;
    label = 79;
    break;
   case 30:
    $shr182 = $9 >>> 23;
    $shr184 = $9 >>> 14;
    $and185 = $shr184 & 511;
    $32 = HEAP32[$syms186 >> 2] | 0;
    $arrayidx187 = $32 + ($and185 << 1) | 0;
    $33 = HEAP16[$arrayidx187 >> 1] | 0;
    $call188 = _mrb_sym2name($mrb, $33) | 0;
    $shr189 = $9 >>> 7;
    $and190 = $shr189 & 127;
    $call191 = _printf(97176, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr182, HEAP32[tempInt + 4 >> 2] = $call188, HEAP32[tempInt + 8 >> 2] = $and190, tempInt) | 0) | 0;
    label = 79;
    break;
   case 31:
    $shr193 = $9 >>> 23;
    $shr195 = $9 >>> 14;
    $and196 = $shr195 & 511;
    $34 = HEAP32[$syms197 >> 2] | 0;
    $arrayidx198 = $34 + ($and196 << 1) | 0;
    $35 = HEAP16[$arrayidx198 >> 1] | 0;
    $call199 = _mrb_sym2name($mrb, $35) | 0;
    $shr200 = $9 >>> 7;
    $and201 = $shr200 & 127;
    $call202 = _printf(96928, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr193, HEAP32[tempInt + 4 >> 2] = $call199, HEAP32[tempInt + 8 >> 2] = $and201, tempInt) | 0) | 0;
    label = 79;
    break;
   case 32:
    $shr204 = $9 >>> 23;
    $shr206 = $9 >>> 14;
    $and207 = $shr206 & 511;
    $36 = HEAP32[$syms208 >> 2] | 0;
    $arrayidx209 = $36 + ($and207 << 1) | 0;
    $37 = HEAP16[$arrayidx209 >> 1] | 0;
    $call210 = _mrb_sym2name($mrb, $37) | 0;
    $shr211 = $9 >>> 7;
    $and212 = $shr211 & 127;
    $call213 = _printf(96664, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr204, HEAP32[tempInt + 4 >> 2] = $call210, HEAP32[tempInt + 8 >> 2] = $and212, tempInt) | 0) | 0;
    label = 79;
    break;
   case 33:
    $shr215 = $9 >>> 23;
    $shr217 = $9 >>> 7;
    $and218 = $shr217 & 127;
    $call219 = _printf(96424, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr215, HEAP32[tempInt + 4 >> 2] = $and218, tempInt) | 0) | 0;
    label = 79;
    break;
   case 34:
    $shr221 = $9 >>> 23;
    $shr223 = $9 >>> 7;
    $shr225243 = $9 >>> 17;
    $and226 = $shr225243 & 63;
    $shr229244 = $9 >>> 16;
    $and230 = $shr229244 & 1;
    $shr233245 = $9 >>> 11;
    $and234 = $shr233245 & 31;
    $and238 = $shr223 & 15;
    $call239 = _printf(96248, (tempInt = STACKTOP, STACKTOP = STACKTOP + 20 | 0, HEAP32[tempInt >> 2] = $shr221, HEAP32[tempInt + 4 >> 2] = $and226, HEAP32[tempInt + 8 >> 2] = $and230, HEAP32[tempInt + 12 >> 2] = $and234, HEAP32[tempInt + 16 >> 2] = $and238, tempInt) | 0) | 0;
    label = 79;
    break;
   case 35:
    $shr241 = $9 >>> 7;
    $shr243237 = $9 >>> 25;
    $and244 = $shr243237 & 31;
    $shr247238 = $9 >>> 20;
    $and248 = $shr247238 & 31;
    $shr251239 = $9 >>> 19;
    $and252 = $shr251239 & 1;
    $shr255240 = $9 >>> 14;
    $and256 = $shr255240 & 31;
    $shr259241 = $9 >>> 9;
    $and260 = $shr259241 & 31;
    $shr263242 = $9 >>> 8;
    $and264 = $shr263242 & 1;
    $and267 = $shr241 & 1;
    $call268 = _printf(95980, (tempInt = STACKTOP, STACKTOP = STACKTOP + 28 | 0, HEAP32[tempInt >> 2] = $and244, HEAP32[tempInt + 4 >> 2] = $and248, HEAP32[tempInt + 8 >> 2] = $and252, HEAP32[tempInt + 12 >> 2] = $and256, HEAP32[tempInt + 16 >> 2] = $and260, HEAP32[tempInt + 20 >> 2] = $and264, HEAP32[tempInt + 24 >> 2] = $and267, tempInt) | 0) | 0;
    label = 79;
    break;
   case 36:
    $shr270 = $9 >>> 23;
    $call272 = _printf(95868, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $shr270, tempInt) | 0) | 0;
    $shr273 = $9 >>> 14;
    $and274 = $shr273 & 511;
    if (($and274 | 0) == 0) {
      label = 37;
      break;
    } else if (($and274 | 0) == 2) {
      label = 38;
      break;
    } else if (($and274 | 0) == 1) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 37:
    $putchar = _putchar(10) | 0;
    label = 79;
    break;
   case 38:
    $puts246 = _puts(59988) | 0;
    label = 79;
    break;
   case 39:
    $puts247 = _puts(59980) | 0;
    label = 79;
    break;
   case 40:
    $puts248 = _puts(59972) | 0;
    label = 79;
    break;
   case 41:
    $shr283 = $9 >>> 23;
    $shr285 = $9 >>> 7;
    $shr287234 = $9 >>> 17;
    $and288 = $shr287234 & 63;
    $shr291235 = $9 >>> 16;
    $and292 = $shr291235 & 1;
    $shr295236 = $9 >>> 11;
    $and296 = $shr295236 & 31;
    $and300 = $shr285 & 15;
    $call301 = _printf(95104, (tempInt = STACKTOP, STACKTOP = STACKTOP + 20 | 0, HEAP32[tempInt >> 2] = $shr283, HEAP32[tempInt + 4 >> 2] = $and288, HEAP32[tempInt + 8 >> 2] = $and292, HEAP32[tempInt + 12 >> 2] = $and296, HEAP32[tempInt + 16 >> 2] = $and300, tempInt) | 0) | 0;
    label = 79;
    break;
   case 42:
    $shr303 = $9 >>> 23;
    $shr305 = $9 >>> 9;
    $and306 = $shr305 & 16383;
    $shr307 = $9 >>> 7;
    $and308 = $shr307 & 3;
    $call309 = _printf(95028, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr303, HEAP32[tempInt + 4 >> 2] = $and306, HEAP32[tempInt + 8 >> 2] = $and308, tempInt) | 0) | 0;
    label = 79;
    break;
   case 43:
    $shr311 = $9 >>> 23;
    $shr313 = $9 >>> 14;
    $and314 = $shr313 & 511;
    $shr315 = $9 >>> 7;
    $and316 = $shr315 & 127;
    $call317 = _printf(94972, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr311, HEAP32[tempInt + 4 >> 2] = $and314, HEAP32[tempInt + 8 >> 2] = $and316, tempInt) | 0) | 0;
    label = 79;
    break;
   case 44:
    $shr319 = $9 >>> 23;
    $shr321 = $9 >>> 14;
    $and322 = $shr321 & 511;
    $38 = HEAP32[$syms323 >> 2] | 0;
    $arrayidx324 = $38 + ($and322 << 1) | 0;
    $39 = HEAP16[$arrayidx324 >> 1] | 0;
    $call325 = _mrb_sym2name($mrb, $39) | 0;
    $call326 = _printf(94892, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr319, HEAP32[tempInt + 4 >> 2] = $call325, tempInt) | 0) | 0;
    label = 79;
    break;
   case 45:
    $shr328 = $9 >>> 23;
    $shr330 = $9 >>> 14;
    $and331 = $shr330 & 511;
    $40 = HEAP32[$syms332 >> 2] | 0;
    $arrayidx333 = $40 + ($and331 << 1) | 0;
    $41 = HEAP16[$arrayidx333 >> 1] | 0;
    $call334 = _mrb_sym2name($mrb, $41) | 0;
    $shr335 = $9 >>> 7;
    $and336 = $shr335 & 127;
    $call337 = _printf(94824, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr328, HEAP32[tempInt + 4 >> 2] = $call334, HEAP32[tempInt + 8 >> 2] = $and336, tempInt) | 0) | 0;
    label = 79;
    break;
   case 46:
    $shr339 = $9 >>> 23;
    $shr341 = $9 >>> 14;
    $and342 = $shr341 & 511;
    $42 = HEAP32[$syms343 >> 2] | 0;
    $arrayidx344 = $42 + ($and342 << 1) | 0;
    $43 = HEAP16[$arrayidx344 >> 1] | 0;
    $call345 = _mrb_sym2name($mrb, $43) | 0;
    $shr346 = $9 >>> 7;
    $and347 = $shr346 & 127;
    $call348 = _printf(94752, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr339, HEAP32[tempInt + 4 >> 2] = $call345, HEAP32[tempInt + 8 >> 2] = $and347, tempInt) | 0) | 0;
    label = 79;
    break;
   case 47:
    $shr350 = $9 >>> 23;
    $shr352 = $9 >>> 14;
    $and353 = $shr352 & 511;
    $44 = HEAP32[$syms354 >> 2] | 0;
    $arrayidx355 = $44 + ($and353 << 1) | 0;
    $45 = HEAP16[$arrayidx355 >> 1] | 0;
    $call356 = _mrb_sym2name($mrb, $45) | 0;
    $shr357 = $9 >>> 7;
    $and358 = $shr357 & 127;
    $call359 = _printf(94672, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr350, HEAP32[tempInt + 4 >> 2] = $call356, HEAP32[tempInt + 8 >> 2] = $and358, tempInt) | 0) | 0;
    label = 79;
    break;
   case 48:
    $shr361 = $9 >>> 23;
    $shr363 = $9 >>> 14;
    $and364 = $shr363 & 511;
    $46 = HEAP32[$syms365 >> 2] | 0;
    $arrayidx366 = $46 + ($and364 << 1) | 0;
    $47 = HEAP16[$arrayidx366 >> 1] | 0;
    $call367 = _mrb_sym2name($mrb, $47) | 0;
    $shr368 = $9 >>> 7;
    $and369 = $shr368 & 127;
    $call370 = _printf(94576, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr361, HEAP32[tempInt + 4 >> 2] = $call367, HEAP32[tempInt + 8 >> 2] = $and369, tempInt) | 0) | 0;
    label = 79;
    break;
   case 49:
    $shr372 = $9 >>> 23;
    $shr374 = $9 >>> 14;
    $and375 = $shr374 & 511;
    $48 = HEAP32[$syms376 >> 2] | 0;
    $arrayidx377 = $48 + ($and375 << 1) | 0;
    $49 = HEAP16[$arrayidx377 >> 1] | 0;
    $call378 = _mrb_sym2name($mrb, $49) | 0;
    $shr379 = $9 >>> 7;
    $and380 = $shr379 & 127;
    $call381 = _printf(94528, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr372, HEAP32[tempInt + 4 >> 2] = $call378, HEAP32[tempInt + 8 >> 2] = $and380, tempInt) | 0) | 0;
    label = 79;
    break;
   case 50:
    $shr383 = $9 >>> 23;
    $shr385 = $9 >>> 14;
    $and386 = $shr385 & 511;
    $50 = HEAP32[$syms387 >> 2] | 0;
    $arrayidx388 = $50 + ($and386 << 1) | 0;
    $51 = HEAP16[$arrayidx388 >> 1] | 0;
    $call389 = _mrb_sym2name($mrb, $51) | 0;
    $shr390 = $9 >>> 7;
    $and391 = $shr390 & 127;
    $call392 = _printf(94144, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr383, HEAP32[tempInt + 4 >> 2] = $call389, HEAP32[tempInt + 8 >> 2] = $and391, tempInt) | 0) | 0;
    label = 79;
    break;
   case 51:
    $shr394 = $9 >>> 23;
    $shr396 = $9 >>> 14;
    $and397 = $shr396 & 511;
    $52 = HEAP32[$syms398 >> 2] | 0;
    $arrayidx399 = $52 + ($and397 << 1) | 0;
    $53 = HEAP16[$arrayidx399 >> 1] | 0;
    $call400 = _mrb_sym2name($mrb, $53) | 0;
    $shr401 = $9 >>> 7;
    $and402 = $shr401 & 127;
    $call403 = _printf(94060, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr394, HEAP32[tempInt + 4 >> 2] = $call400, HEAP32[tempInt + 8 >> 2] = $and402, tempInt) | 0) | 0;
    label = 79;
    break;
   case 52:
    $shr405 = $9 >>> 23;
    $shr407 = $9 >>> 14;
    $and408 = $shr407 & 511;
    $54 = HEAP32[$syms409 >> 2] | 0;
    $arrayidx410 = $54 + ($and408 << 1) | 0;
    $55 = HEAP16[$arrayidx410 >> 1] | 0;
    $call411 = _mrb_sym2name($mrb, $55) | 0;
    $shr412 = $9 >>> 7;
    $and413 = $shr412 & 127;
    $call414 = _printf(93992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr405, HEAP32[tempInt + 4 >> 2] = $call411, HEAP32[tempInt + 8 >> 2] = $and413, tempInt) | 0) | 0;
    label = 79;
    break;
   case 53:
    $shr416 = $9 >>> 23;
    $shr418 = $9 >>> 14;
    $and419 = $shr418 & 511;
    $56 = HEAP32[$syms420 >> 2] | 0;
    $arrayidx421 = $56 + ($and419 << 1) | 0;
    $57 = HEAP16[$arrayidx421 >> 1] | 0;
    $call422 = _mrb_sym2name($mrb, $57) | 0;
    $shr423 = $9 >>> 7;
    $and424 = $shr423 & 127;
    $call425 = _printf(93952, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr416, HEAP32[tempInt + 4 >> 2] = $call422, HEAP32[tempInt + 8 >> 2] = $and424, tempInt) | 0) | 0;
    label = 79;
    break;
   case 54:
    $shr427 = $9 >>> 23;
    $shr429 = $9 >>> 14;
    $and430 = $shr429 & 511;
    $58 = HEAP32[$syms431 >> 2] | 0;
    $arrayidx432 = $58 + ($and430 << 1) | 0;
    $59 = HEAP16[$arrayidx432 >> 1] | 0;
    $call433 = _mrb_sym2name($mrb, $59) | 0;
    $shr434 = $9 >>> 7;
    $and435 = $shr434 & 127;
    $call436 = _printf(93896, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr427, HEAP32[tempInt + 4 >> 2] = $call433, HEAP32[tempInt + 8 >> 2] = $and435, tempInt) | 0) | 0;
    label = 79;
    break;
   case 55:
    $shr438 = $9 >>> 23;
    $shr440 = $9 >>> 14;
    $and441 = $shr440 & 511;
    $60 = HEAP32[$syms442 >> 2] | 0;
    $arrayidx443 = $60 + ($and441 << 1) | 0;
    $61 = HEAP16[$arrayidx443 >> 1] | 0;
    $call444 = _mrb_sym2name($mrb, $61) | 0;
    $shr445 = $9 >>> 7;
    $and446 = $shr445 & 127;
    $call447 = _printf(93812, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr438, HEAP32[tempInt + 4 >> 2] = $call444, HEAP32[tempInt + 8 >> 2] = $and446, tempInt) | 0) | 0;
    label = 79;
    break;
   case 56:
    $puts249 = _puts(59952) | 0;
    label = 79;
    break;
   case 57:
    $shr451 = $9 >>> 23;
    $shr453 = $9 >>> 14;
    $and454 = $shr453 & 511;
    $shr455 = $9 >>> 7;
    $and456 = $shr455 & 127;
    $call457 = _printf(93724, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr451, HEAP32[tempInt + 4 >> 2] = $and454, HEAP32[tempInt + 8 >> 2] = $and456, tempInt) | 0) | 0;
    label = 79;
    break;
   case 58:
    $shr459 = $9 >>> 23;
    $shr461 = $9 >>> 14;
    $and462 = $shr461 & 511;
    $call463 = _printf(93616, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr459, HEAP32[tempInt + 4 >> 2] = $and462, tempInt) | 0) | 0;
    label = 79;
    break;
   case 59:
    $shr465 = $9 >>> 23;
    $shr467 = $9 >>> 14;
    $and468 = $shr467 & 511;
    $call469 = _printf(93576, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr465, HEAP32[tempInt + 4 >> 2] = $and468, tempInt) | 0) | 0;
    label = 79;
    break;
   case 60:
    $shr471 = $9 >>> 23;
    $shr473 = $9 >>> 14;
    $and474 = $shr473 & 511;
    $shr475 = $9 >>> 7;
    $and476 = $shr475 & 127;
    $call477 = _printf(93324, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr471, HEAP32[tempInt + 4 >> 2] = $and474, HEAP32[tempInt + 8 >> 2] = $and476, tempInt) | 0) | 0;
    label = 79;
    break;
   case 61:
    $shr479 = $9 >>> 23;
    $shr481 = $9 >>> 14;
    $and482 = $shr481 & 511;
    $shr483 = $9 >>> 7;
    $and484 = $shr483 & 127;
    $call485 = _printf(93272, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr479, HEAP32[tempInt + 4 >> 2] = $and482, HEAP32[tempInt + 8 >> 2] = $and484, tempInt) | 0) | 0;
    label = 79;
    break;
   case 62:
    $shr487 = $9 >>> 7;
    $and488 = $shr487 & 65535;
    $62 = HEAP32[$pool >> 2] | 0;
    $arrayidx489 = $62 + ($and488 * 12 & -1) | 0;
    $63 = $arrayidx489;
    HEAP32[$7 >> 2] = HEAP32[$63 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$63 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$63 + 8 >> 2] | 0;
    _mrb_str_dump($s, $mrb, $arrayidx489);
    $shr490 = $9 >>> 23;
    $64 = HEAP32[$p >> 2] | 0;
    $ptr = $64 + 20 | 0;
    $65 = $ptr;
    $66 = HEAP32[$65 >> 2] | 0;
    $call492 = _printf(93216, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr490, HEAP32[tempInt + 4 >> 2] = $66, tempInt) | 0) | 0;
    label = 79;
    break;
   case 63:
    $shr494 = $9 >>> 23;
    $shr496 = $9 >>> 14;
    $and497 = $shr496 & 511;
    $call498 = _printf(93184, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr494, HEAP32[tempInt + 4 >> 2] = $and497, tempInt) | 0) | 0;
    label = 79;
    break;
   case 64:
    $shr500 = $9 >>> 23;
    $shr502 = $9 >>> 14;
    $and503 = $shr502 & 511;
    $shr504 = $9 >>> 7;
    $and505 = $shr504 & 127;
    $call506 = _printf(93140, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $shr500, HEAP32[tempInt + 4 >> 2] = $and503, HEAP32[tempInt + 8 >> 2] = $and505, tempInt) | 0) | 0;
    label = 79;
    break;
   case 65:
    $shr508 = $9 >>> 23;
    $call510 = _printf(93104, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $shr508, tempInt) | 0) | 0;
    label = 79;
    break;
   case 66:
    $shr512 = $9 >>> 23;
    $shr514 = $9 >>> 14;
    $and515 = $shr514 & 511;
    $67 = HEAP32[$syms516 >> 2] | 0;
    $arrayidx517 = $67 + ($and515 << 1) | 0;
    $68 = HEAP16[$arrayidx517 >> 1] | 0;
    $call518 = _mrb_sym2name($mrb, $68) | 0;
    $call519 = _printf(93036, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr512, HEAP32[tempInt + 4 >> 2] = $call518, tempInt) | 0) | 0;
    label = 79;
    break;
   case 67:
    $shr521 = $9 >>> 23;
    $shr523 = $9 >>> 14;
    $and524 = $shr523 & 511;
    $69 = HEAP32[$syms525 >> 2] | 0;
    $arrayidx526 = $69 + ($and524 << 1) | 0;
    $70 = HEAP16[$arrayidx526 >> 1] | 0;
    $call527 = _mrb_sym2name($mrb, $70) | 0;
    $call528 = _printf(93004, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr521, HEAP32[tempInt + 4 >> 2] = $call527, tempInt) | 0) | 0;
    label = 79;
    break;
   case 68:
    $shr530 = $9 >>> 23;
    $shr532 = $9 >>> 7;
    $and533 = $shr532 & 65535;
    $add534 = $and533 + $n | 0;
    $call535 = _printf(92916, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr530, HEAP32[tempInt + 4 >> 2] = $add534, tempInt) | 0) | 0;
    label = 79;
    break;
   case 69:
    $shr537 = $9 >>> 23;
    $shr539 = $9 >>> 14;
    $and540 = $shr539 & 511;
    $call541 = _printf(92868, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr537, HEAP32[tempInt + 4 >> 2] = $and540, tempInt) | 0) | 0;
    label = 79;
    break;
   case 70:
    $shr543 = $9 >>> 23;
    $call545 = _printf(92540, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $shr543, tempInt) | 0) | 0;
    label = 79;
    break;
   case 71:
    $shr547 = $9 >>> 7;
    $and548 = $shr547 & 65535;
    $call549 = _printf(92500, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $and548, tempInt) | 0) | 0;
    label = 79;
    break;
   case 72:
    $shr551 = $9 >>> 7;
    $and552 = $shr551 & 65535;
    $add553 = $and552 + $n | 0;
    $call554 = _printf(92448, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $add553, tempInt) | 0) | 0;
    label = 79;
    break;
   case 73:
    $shr556 = $9 >>> 7;
    $and557 = $shr556 & 65535;
    $sub558 = $i_0252 - 32767 | 0;
    $add559 = $sub558 + $and557 | 0;
    $call560 = _printf(92392, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $add559, tempInt) | 0) | 0;
    label = 79;
    break;
   case 74:
    $shr562 = $9 >>> 23;
    $call564 = _printf(92344, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $shr562, tempInt) | 0) | 0;
    label = 79;
    break;
   case 75:
    $shr566 = $9 >>> 23;
    $call568 = _printf(92272, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $shr566, tempInt) | 0) | 0;
    label = 79;
    break;
   case 76:
    $shr570 = $9 >>> 23;
    $call572 = _printf(92248, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $shr570, tempInt) | 0) | 0;
    label = 79;
    break;
   case 77:
    $shr574 = $9 >>> 23;
    $call576 = _printf(92204, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $shr574, tempInt) | 0) | 0;
    label = 79;
    break;
   case 78:
    $shr579 = $9 >>> 23;
    $shr581 = $9 >>> 14;
    $and582 = $shr581 & 511;
    $shr583 = $9 >>> 7;
    $and584 = $shr583 & 127;
    $call585 = _printf(92140, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $and, HEAP32[tempInt + 4 >> 2] = $shr579, HEAP32[tempInt + 8 >> 2] = $and582, HEAP32[tempInt + 12 >> 2] = $and584, tempInt) | 0) | 0;
    label = 79;
    break;
   case 79:
    _mrb_gc_arena_restore($mrb, $call4);
    $inc = $i_0252 + 1 | 0;
    $71 = HEAP32[$ilen >> 2] | 0;
    $cmp = $inc >>> 0 < $71 >>> 0;
    if ($cmp) {
      $i_0252 = $inc;
      label = 5;
      break;
    } else {
      label = 80;
      break;
    }
   case 80:
    $putchar250 = _putchar(10) | 0;
    label = 81;
    break;
   case 81:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_generate_code($mrb, $p) {
  $mrb = $mrb | 0;
  $p = $p | 0;
  var $0 = 0, $call = 0;
  $0 = HEAP32[$mrb + 28 >> 2] | 0;
  $call = _codegen_start($mrb, $p) | 0;
  return (($call | 0) < 0 ? $call : $0) | 0;
}
function _codegen_start($mrb, $p) {
  $mrb = $mrb | 0;
  $p = $p | 0;
  var $call = 0, $tobool = 0, $mrb1 = 0, $filename = 0, $0 = 0, $tobool2 = 0, $filename5 = 0, $arraydecay = 0, $call7 = 0, $cmp = 0, $tree = 0, $1 = 0, $mpool = 0, $2 = 0, $retval_0 = 0, label = 0, setjmpLabel = 0, setjmpTable = 0;
  label = 2;
  setjmpLabel = 0;
  setjmpTable = STACKTOP;
  STACKTOP = STACKTOP + 168 | 0;
  HEAP32[setjmpTable >> 2] = 0;
  while (1) switch (label | 0) {
   case 2:
    $call = invoke_iiii(162, $mrb | 0, 0, 0) | 0;
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return 0;
    }
    __THREW__ = threwValue = 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      $retval_0 = -1;
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $mrb1 = $call | 0;
    HEAP32[$mrb1 >> 2] = $mrb;
    $filename = $p + 28 | 0;
    $0 = HEAP32[$filename >> 2] | 0;
    $tobool2 = ($0 | 0) == 0;
    if ($tobool2) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $filename5 = $call + 80 | 0;
    HEAP32[$filename5 >> 2] = $0;
    label = 5;
    break;
   case 5:
    $arraydecay = $call + 8 | 0;
    $call7 = _saveSetjmp($arraydecay | 0, label, setjmpTable) | 0;
    label = 8;
    break;
   case 8:
    $cmp = ($call7 | 0) == 0;
    if ($cmp) {
      label = 6;
      break;
    } else {
      $retval_0 = -1;
      label = 7;
      break;
    }
   case 6:
    $tree = $p + 1136 | 0;
    $1 = HEAP32[$tree >> 2] | 0;
    invoke_viii(402, $call | 0, $1 | 0, 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return 0;
    }
    __THREW__ = threwValue = 0;
    $mpool = $call + 4 | 0;
    $2 = HEAP32[$mpool >> 2] | 0;
    invoke_vi(256, $2 | 0);
    if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
      setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
      if ((setjmpLabel | 0) > 0) {
        label = -1111;
        break;
      } else return 0;
    }
    __THREW__ = threwValue = 0;
    $retval_0 = 0;
    label = 7;
    break;
   case 7:
    return $retval_0 | 0;
   case -1111:
    if ((setjmpLabel | 0) == 5) {
      $call7 = threwValue;
      label = 8;
    }
    __THREW__ = threwValue = 0;
    break;
  }
  return 0;
}
function _scope_new($mrb, $prev, $lv) {
  $mrb = $mrb | 0;
  $prev = $prev | 0;
  $lv = $lv | 0;
  var $call = 0, $call1 = 0, $0 = 0, $tobool = 0, $mrb2 = 0, $mpool = 0, $1 = 0, $tobool3 = 0, $prev6 = 0, $2 = 0, $bf_field_offs = 0, $3 = 0, $4 = 0, $5 = 0, $bf_field_offs7 = 0, $6 = 0, $7 = 0, $call8 = 0, $irep = 0, $8 = 0, $idx = 0, $9 = 0, $idx10 = 0, $10 = 0, $icapa = 0, $11 = 0, $call12 = 0, $12 = 0, $iseq = 0, $13 = 0, $pcapa = 0, $14 = 0, $call15 = 0, $15 = 0, $16 = 0, $pool17 = 0, $17 = 0, $plen = 0, $scapa = 0, $18 = 0, $call19 = 0, $19 = 0, $20 = 0, $syms = 0, $21 = 0, $slen = 0, $lv22 = 0, $22 = 0, $call23 = 0, $add = 0, $sp = 0, $23 = 0, $24 = 0, $add24 = 0, $nlocals = 0, $25 = 0, $call26 = 0, $ai = 0, $26 = 0, $filename = 0, $27 = 0, $filename27 = 0, $28 = 0, $tobool29 = 0, $29 = 0, $mul32 = 0, $call33 = 0, $30 = 0, $lines = 0, $31 = 0, $lineno = 0, $32 = 0, $lineno35 = 0, $33 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_pool_open($mrb) | 0;
    $call1 = _mrb_pool_alloc($call, 128) | 0;
    $0 = $call1;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _memset($call1 | 0, 0, 128);
    $mrb2 = $call1;
    HEAP32[$mrb2 >> 2] = $mrb;
    $mpool = $call1 + 4 | 0;
    $1 = $mpool;
    HEAP32[$1 >> 2] = $call;
    $tobool3 = ($prev | 0) == 0;
    if ($tobool3) {
      $retval_0 = $0;
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $prev6 = $call1 + 48 | 0;
    $2 = $prev6;
    HEAP32[$2 >> 2] = $prev;
    $bf_field_offs = $call1 + 68 | 0;
    $3 = $bf_field_offs;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 | 32767;
    HEAP32[$3 >> 2] = $5;
    $bf_field_offs7 = $call1 + 69 | 0;
    $6 = HEAP8[$bf_field_offs7] | 0;
    $7 = $6 & 127;
    HEAP8[$bf_field_offs7] = $7;
    $call8 = _mrb_add_irep($mrb) | 0;
    $irep = $call1 + 100 | 0;
    $8 = $irep;
    HEAP32[$8 >> 2] = $call8;
    $idx = $call8 | 0;
    $9 = HEAP32[$idx >> 2] | 0;
    $idx10 = $call1 + 124 | 0;
    $10 = $idx10;
    HEAP32[$10 >> 2] = $9;
    $icapa = $call1 + 96 | 0;
    $11 = $icapa;
    HEAP32[$11 >> 2] = 1024;
    $call12 = _mrb_malloc($mrb, 4096) | 0;
    $12 = $call12;
    $iseq = $call1 + 88 | 0;
    $13 = $iseq;
    HEAP32[$13 >> 2] = $12;
    $pcapa = $call1 + 104 | 0;
    $14 = $pcapa;
    HEAP32[$14 >> 2] = 32;
    $call15 = _mrb_malloc($mrb, 384) | 0;
    $15 = $call15;
    $16 = HEAP32[$8 >> 2] | 0;
    $pool17 = $16 + 16 | 0;
    HEAP32[$pool17 >> 2] = $15;
    $17 = HEAP32[$8 >> 2] | 0;
    $plen = $17 + 36 | 0;
    HEAP32[$plen >> 2] = 0;
    $scapa = $call1 + 108 | 0;
    $18 = $scapa;
    HEAP32[$18 >> 2] = 256;
    $call19 = _mrb_malloc($mrb, 512) | 0;
    $19 = $call19;
    $20 = HEAP32[$8 >> 2] | 0;
    $syms = $20 + 20 | 0;
    HEAP32[$syms >> 2] = $19;
    $21 = HEAP32[$8 >> 2] | 0;
    $slen = $21 + 40 | 0;
    HEAP32[$slen >> 2] = 0;
    $lv22 = $call1 + 52 | 0;
    $22 = $lv22;
    HEAP32[$22 >> 2] = $lv;
    $call23 = _node_len($lv) | 0;
    $add = $call23 + 1 | 0;
    $sp = $call1 + 56 | 0;
    $23 = $sp;
    $24 = HEAP32[$23 >> 2] | 0;
    $add24 = $add + $24 | 0;
    HEAP32[$23 >> 2] = $add24;
    $nlocals = $call1 + 112 | 0;
    $25 = $nlocals;
    HEAP32[$25 >> 2] = $add24;
    $call26 = _mrb_gc_arena_save($mrb) | 0;
    $ai = $call1 + 120 | 0;
    $26 = $ai;
    HEAP32[$26 >> 2] = $call26;
    $filename = $prev + 80 | 0;
    $27 = HEAP32[$filename >> 2] | 0;
    $filename27 = $call1 + 80 | 0;
    $28 = $filename27;
    HEAP32[$28 >> 2] = $27;
    $tobool29 = ($27 | 0) == 0;
    if ($tobool29) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $29 = HEAP32[$11 >> 2] | 0;
    $mul32 = $29 << 1;
    $call33 = _mrb_malloc($mrb, $mul32) | 0;
    $30 = $call33;
    $lines = $call1 + 92 | 0;
    $31 = $lines;
    HEAP32[$31 >> 2] = $30;
    label = 6;
    break;
   case 6:
    $lineno = $prev + 84 | 0;
    $32 = HEAP16[$lineno >> 1] | 0;
    $lineno35 = $call1 + 84 | 0;
    $33 = $lineno35;
    HEAP16[$33 >> 1] = $32;
    $retval_0 = $0;
    label = 7;
    break;
   case 7:
    return $retval_0 | 0;
  }
  return 0;
}
function _codegen($s, $tree, $val) {
  $s = $s | 0;
  $tree = $tree | 0;
  $val = $val | 0;
  var $len663 = 0, $buf = 0, $tmpcast = 0, $str = 0, $fix = 0, $str1342 = 0, $tmp1343 = 0, $agg_tmp = 0, $tmp1344 = 0, $overflow = 0, $agg_tmp1374 = 0, $agg_tmp1401 = 0, $agg_tmp1423 = 0, $agg_tmp1444 = 0, $overflow1467 = 0, $agg_tmp1476 = 0, $agg_tmp1504 = 0, $agg_tmp1550 = 0, $agg_tmp1627 = 0, $agg_tmp1681 = 0, $agg_tmp1706 = 0, $agg_tmp1797 = 0, $agg_tmp1829 = 0, $tobool = 0, $car = 0, $0 = 0, $1 = 0, $lineno = 0, $2 = 0, $lineno1 = 0, $cdr = 0, $3 = 0, $tobool5051075 = 0, $tobool2 = 0, $tobool3 = 0, $or_cond = 0, $sp = 0, $4 = 0, $shl = 0, $or = 0, $tobool61057 = 0, $tree_addr_01058 = 0, $car7 = 0, $5 = 0, $cdr8 = 0, $6 = 0, $tobool9 = 0, $cond = 0, $7 = 0, $tobool6 = 0, $call = 0, $call13 = 0, $pc1 = 0, $car14 = 0, $8 = 0, $tobool15 = 0, $tobool18 = 0, $sp20 = 0, $9 = 0, $dec = 0, $type = 0, $call23 = 0, $cdr24 = 0, $10 = 0, $car25 = 0, $11 = 0, $tobool26 = 0, $sp31 = 0, $12 = 0, $shl33 = 0, $or34 = 0, $and32 = 0, $shl63 = 0, $mrb71 = 0, $mrb = 0, $tobool109 = 0, $exend_01062 = 0, $pos1_01061 = 0, $n2_01060 = 0, $car39 = 0, $13 = 0, $car41 = 0, $14 = 0, $tobool42 = 0, $n4_0 = 0, $pos2_0 = 0, $tobool45 = 0, $car47 = 0, $15 = 0, $16 = 0, $shl50 = 0, $17 = 0, $call52 = 0, $call53 = 0, $and54 = 0, $shl55 = 0, $or51 = 0, $or56 = 0, $18 = 0, $shl60 = 0, $or61 = 0, $or64 = 0, $19 = 0, $dec66 = 0, $shl69 = 0, $20 = 0, $call72 = 0, $call73 = 0, $and74 = 0, $shl75 = 0, $or70 = 0, $or77 = 0, $call78 = 0, $21 = 0, $shl81 = 0, $add = 0, $and83 = 0, $shl84 = 0, $or82 = 0, $or85 = 0, $cdr88 = 0, $22 = 0, $tobool90 = 0, $call91 = 0, $23 = 0, $dec93 = 0, $cdr94 = 0, $24 = 0, $car95 = 0, $25 = 0, $tobool96 = 0, $26 = 0, $cdr102 = 0, $27 = 0, $car103 = 0, $28 = 0, $tobool104 = 0, $29 = 0, $dec112 = 0, $call115 = 0, $add116 = 0, $and117 = 0, $shl118 = 0, $or119 = 0, $cdr120 = 0, $30 = 0, $tobool36 = 0, $tobool122 = 0, $or126 = 0, $exend_1 = 0, $sp129 = 0, $31 = 0, $dec130 = 0, $cdr131 = 0, $32 = 0, $car132 = 0, $33 = 0, $tobool133 = 0, $tobool137 = 0, $pc = 0, $34 = 0, $ensure_level = 0, $35 = 0, $inc = 0, $car144 = 0, $36 = 0, $cdr145 = 0, $37 = 0, $call146 = 0, $and147 = 0, $shl148 = 0, $or149 = 0, $iseq = 0, $38 = 0, $arrayidx = 0, $39 = 0, $dec151 = 0, $call155 = 0, $sp156 = 0, $40 = 0, $shl158 = 0, $and160 = 0, $shl161 = 0, $or162 = 0, $or163 = 0, $call167 = 0, $sp168 = 0, $41 = 0, $shl170 = 0, $and172 = 0, $shl173 = 0, $or174 = 0, $or175 = 0, $cdr182 = 0, $42 = 0, $cdr183 = 0, $43 = 0, $car184 = 0, $44 = 0, $car185 = 0, $45 = 0, $sp186 = 0, $46 = 0, $dec187 = 0, $call188 = 0, $47 = 0, $shl191 = 0, $or193 = 0, $48 = 0, $car195 = 0, $49 = 0, $tobool196 = 0, $50 = 0, $car199 = 0, $51 = 0, $tobool200 = 0, $52 = 0, $shl204 = 0, $or205 = 0, $tobool207 = 0, $53 = 0, $dec212 = 0, $call214 = 0, $54 = 0, $dec219 = 0, $call220 = 0, $55 = 0, $shl223 = 0, $or224 = 0, $car230 = 0, $56 = 0, $call231 = 0, $sp232 = 0, $57 = 0, $dec233 = 0, $shl236 = 0, $or238 = 0, $cdr239 = 0, $58 = 0, $car243 = 0, $59 = 0, $call244 = 0, $sp245 = 0, $60 = 0, $dec246 = 0, $shl249 = 0, $or251 = 0, $cdr252 = 0, $61 = 0, $call256 = 0, $call257 = 0, $pc1258 = 0, $call259 = 0, $pc2 = 0, $cdr260 = 0, $62 = 0, $63 = 0, $car262 = 0, $64 = 0, $sp263 = 0, $65 = 0, $dec264 = 0, $shl267 = 0, $66 = 0, $pc270 = 0, $67 = 0, $sub = 0, $add271 = 0, $and272 = 0, $shl273 = 0, $or268 = 0, $or274 = 0, $call278 = 0, $call279 = 0, $pc1280 = 0, $call281 = 0, $pc2282 = 0, $cdr283 = 0, $68 = 0, $69 = 0, $car285 = 0, $70 = 0, $sp286 = 0, $71 = 0, $dec287 = 0, $shl290 = 0, $72 = 0, $pc293 = 0, $73 = 0, $sub294 = 0, $add295 = 0, $and296 = 0, $shl297 = 0, $or291 = 0, $or298 = 0, $tobool300 = 0, $car313 = 0, $74 = 0, $tobool314 = 0, $sp316 = 0, $75 = 0, $head_0 = 0, $tree_addr_1_in1069 = 0, $tree_addr_11070 = 0, $tobool3211071 = 0, $tobool374 = 0, $sp376 = 0, $tobool329 = 0, $sp352 = 0, $and335 = 0, $shl336 = 0, $mrb344 = 0, $tree_addr_11073 = 0, $pos3_01072 = 0, $car323 = 0, $76 = 0, $car324 = 0, $n_01064 = 0, $tobool3261065 = 0, $n_01067 = 0, $pos2308_01066 = 0, $car328 = 0, $77 = 0, $78 = 0, $shl333 = 0, $or334 = 0, $or337 = 0, $79 = 0, $dec339 = 0, $shl342 = 0, $80 = 0, $call345 = 0, $call346 = 0, $and347 = 0, $shl348 = 0, $or343 = 0, $or350 = 0, $dec353 = 0, $call355 = 0, $81 = 0, $shl358 = 0, $add360 = 0, $and361 = 0, $shl362 = 0, $or359 = 0, $or363 = 0, $cdr364 = 0, $n_0 = 0, $tobool326 = 0, $pos2308_0_lcssa = 0, $82 = 0, $car367 = 0, $83 = 0, $tobool368 = 0, $call370 = 0, $pos1306_0 = 0, $84 = 0, $cdr373 = 0, $85 = 0, $86 = 0, $dec377 = 0, $call379 = 0, $add380 = 0, $and381 = 0, $shl382 = 0, $or383 = 0, $tobool384 = 0, $tree_addr_1_in = 0, $tree_addr_1 = 0, $tobool321 = 0, $pos3_0_lcssa = 0, $tobool389 = 0, $sp391 = 0, $87 = 0, $shl393 = 0, $or394 = 0, $tobool396 = 0, $call400 = 0, $car403 = 0, $88 = 0, $cdr404 = 0, $89 = 0, $tobool405 = 0, $sp407 = 0, $90 = 0, $dec410 = 0, $shl413 = 0, $and412 = 0, $shl417 = 0, $or414 = 0, $or418 = 0, $car421 = 0, $91 = 0, $cdr422 = 0, $92 = 0, $tobool423 = 0, $sp425 = 0, $93 = 0, $dec428 = 0, $shl431 = 0, $and430 = 0, $shl435 = 0, $or432 = 0, $or437 = 0, $cdr441 = 0, $94 = 0, $95 = 0, $conv = 0, $call442 = 0, $car443 = 0, $96 = 0, $sp444 = 0, $97 = 0, $dec445 = 0, $shl448 = 0, $and450 = 0, $shl451 = 0, $or449 = 0, $or452 = 0, $tobool453 = 0, $98 = 0, $conv459 = 0, $call460 = 0, $sp461 = 0, $99 = 0, $shl463 = 0, $or464 = 0, $100 = 0, $shl467 = 0, $and469 = 0, $shl470 = 0, $or468 = 0, $or471 = 0, $tobool472 = 0, $call478 = 0, $cmp = 0, $tobool481 = 0, $sp483 = 0, $101 = 0, $sub484 = 0, $shl487 = 0, $and486 = 0, $shl491 = 0, $and493 = 0, $shl494 = 0, $or488 = 0, $or492 = 0, $or495 = 0, $tree_addr_21077 = 0, $len_01076 = 0, $car507 = 0, $102 = 0, $car508 = 0, $103 = 0, $104 = 0, $cdr510 = 0, $105 = 0, $inc511 = 0, $cdr512 = 0, $106 = 0, $tobool505 = 0, $len_0_lcssa = 0, $tobool514 = 0, $mul = 0, $sp516 = 0, $107 = 0, $sub517 = 0, $shl520 = 0, $and519 = 0, $shl524 = 0, $and526 = 0, $shl527 = 0, $or521 = 0, $or525 = 0, $or528 = 0, $cdr532 = 0, $108 = 0, $sp533 = 0, $109 = 0, $dec534 = 0, $car535 = 0, $110 = 0, $cdr544 = 0, $111 = 0, $sp547 = 0, $112 = 0, $car548 = 0, $113 = 0, $cmp549 = 0, $cdr552 = 0, $114 = 0, $call553 = 0, $tobool554 = 0, $t_01092 = 0, $tobool5581093 = 0, $t_01095 = 0, $len539_01094 = 0, $car560 = 0, $115 = 0, $inc561 = 0, $cdr562 = 0, $t_0 = 0, $tobool558 = 0, $len539_0_lcssa = 0, $car564 = 0, $116 = 0, $car565 = 0, $117 = 0, $tobool566 = 0, $n541_01089 = 0, $t_11088 = 0, $car572 = 0, $118 = 0, $add573 = 0, $inc574 = 0, $cdr575 = 0, $119 = 0, $tobool570 = 0, $n541_1 = 0, $cdr578 = 0, $120 = 0, $tobool579 = 0, $cdr581 = 0, $121 = 0, $tobool582 = 0, $car585 = 0, $p_01082 = 0, $tobool5871083 = 0, $p_01085 = 0, $post_01084 = 0, $inc589 = 0, $cdr590 = 0, $p_0 = 0, $tobool587 = 0, $post_1 = 0, $car593 = 0, $122 = 0, $tobool594 = 0, $sub597 = 0, $sub598 = 0, $123 = 0, $shl601 = 0, $add603 = 0, $and604 = 0, $shl605 = 0, $and607 = 0, $shl608 = 0, $or602 = 0, $or606 = 0, $or609 = 0, $124 = 0, $125 = 0, $n541_2 = 0, $126 = 0, $tobool615 = 0, $car618 = 0, $127 = 0, $tobool619 = 0, $cmp6241079 = 0, $or_cond1135 = 0, $n541_31081 = 0, $t_21080 = 0, $car627 = 0, $128 = 0, $add628 = 0, $cdr629 = 0, $129 = 0, $inc630 = 0, $exitcond = 0, $130 = 0, $sub635 = 0, $tobool636 = 0, $shl639 = 0, $and638 = 0, $shl642 = 0, $and644 = 0, $shl645 = 0, $or640 = 0, $or643 = 0, $or646 = 0, $car649 = 0, $131 = 0, $tobool650 = 0, $132 = 0, $dec653 = 0, $cdr659 = 0, $133 = 0, $car660 = 0, $134 = 0, $135 = 0, $conv661 = 0, $mrb665 = 0, $136 = 0, $call666 = 0, $car669 = 0, $137 = 0, $138 = 0, $cmp670 = 0, $139 = 0, $cmp675 = 0, $arrayidx678 = 0, $140 = 0, $cmp680 = 0, $_pr = 0, $141 = 0, $cmp684 = 0, $arrayidx687 = 0, $142 = 0, $cmp689 = 0, $sp694 = 0, $143 = 0, $dec695 = 0, $call696 = 0, $144 = 0, $cmp699 = 0, $cond701 = 0, $145 = 0, $shl705 = 0, $or706 = 0, $or707 = 0, $146 = 0, $cdr709 = 0, $147 = 0, $car710 = 0, $148 = 0, $149 = 0, $dec712 = 0, $150 = 0, $151 = 0, $cdr717 = 0, $152 = 0, $car718 = 0, $153 = 0, $sp719 = 0, $154 = 0, $dec722 = 0, $call723 = 0, $155 = 0, $cmp724 = 0, $156 = 0, $cmp729 = 0, $157 = 0, $shl734 = 0, $and736 = 0, $shl737 = 0, $or735 = 0, $or739 = 0, $_pr1032 = 0, $cmp741 = 0, $158 = 0, $cmp746 = 0, $159 = 0, $shl751 = 0, $and753 = 0, $shl754 = 0, $or752 = 0, $or756 = 0, $_pr1034_pr = 0, $cmp758 = 0, $160 = 0, $cmp763 = 0, $161 = 0, $shl768 = 0, $and770 = 0, $shl771 = 0, $or769 = 0, $or773 = 0, $_pr1036_pr = 0, $cmp775 = 0, $162 = 0, $cmp780 = 0, $163 = 0, $shl785 = 0, $and787 = 0, $shl788 = 0, $or786 = 0, $or790 = 0, $_pr1038_pr_pr = 0, $cmp792 = 0, $164 = 0, $cmp797 = 0, $165 = 0, $shl802 = 0, $and804 = 0, $shl805 = 0, $or803 = 0, $or807 = 0, $_pr1040 = 0, $166 = 0, $cmp809 = 0, $167 = 0, $cmp814 = 0, $arrayidx817 = 0, $168 = 0, $cmp819 = 0, $169 = 0, $shl824 = 0, $and826 = 0, $shl827 = 0, $or825 = 0, $or829 = 0, $170 = 0, $cmp831 = 0, $171 = 0, $cmp836 = 0, $172 = 0, $shl841 = 0, $and843 = 0, $shl844 = 0, $or842 = 0, $or846 = 0, $_pr1041 = 0, $173 = 0, $cmp848 = 0, $174 = 0, $cmp853 = 0, $arrayidx856 = 0, $175 = 0, $cmp858 = 0, $176 = 0, $shl863 = 0, $and865 = 0, $shl866 = 0, $or864 = 0, $or868 = 0, $177 = 0, $shl872 = 0, $and874 = 0, $shl875 = 0, $or873 = 0, $or877 = 0, $178 = 0, $179 = 0, $tobool893 = 0, $car896 = 0, $180 = 0, $tobool897 = 0, $call899 = 0, $cmp900 = 0, $n890_01047 = 0, $sendv_01044 = 0, $cdr908 = 0, $181 = 0, $tobool909 = 0, $sp912 = 0, $182 = 0, $dec913 = 0, $n890_01046 = 0, $sendv_01043 = 0, $sp915 = 0, $183 = 0, $shl917 = 0, $or918 = 0, $n890_01045 = 0, $sendv_01042 = 0, $sp921 = 0, $184 = 0, $add920_neg = 0, $sub922 = 0, $tobool923 = 0, $shl928 = 0, $n890_01045_op = 0, $n890_01045_op_op = 0, $n890_01045_op_op_op = 0, $or929 = 0, $or932 = 0, $tobool933 = 0, $lv_0 = 0, $s2_0 = 0, $185 = 0, $186 = 0, $lnot = 0, $inc943 = 0, $prev = 0, $187 = 0, $tobool944 = 0, $tobool948 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $phitmp1027 = 0, $lv_11050 = 0, $ainfo_0 = 0, $sp953 = 0, $192 = 0, $shl955 = 0, $and958 = 0, $and960 = 0, $shl961 = 0, $or956 = 0, $or962 = 0, $tobool963 = 0, $cdr965 = 0, $193 = 0, $tobool966 = 0, $194 = 0, $195 = 0, $sub970 = 0, $196 = 0, $dec973 = 0, $shl976 = 0, $or978 = 0, $tobool979 = 0, $tobool983 = 0, $sp985 = 0, $197 = 0, $dec986 = 0, $sp988 = 0, $198 = 0, $shl990 = 0, $or991 = 0, $loop = 0, $199 = 0, $tobool993 = 0, $sp995 = 0, $200 = 0, $shl997 = 0, $or999 = 0, $or998 = 0, $tobool1006 = 0, $lv1013_0 = 0, $s21011_0 = 0, $201 = 0, $202 = 0, $lnot1024 = 0, $inc1026 = 0, $prev1027 = 0, $203 = 0, $tobool1028 = 0, $tobool1032 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $phitmp1025 = 0, $lv1013_11052 = 0, $ainfo1015_0 = 0, $sp1038 = 0, $208 = 0, $shl1040 = 0, $and1043 = 0, $and1045 = 0, $shl1046 = 0, $or1041 = 0, $or1047 = 0, $tobool1048 = 0, $call1050 = 0, $cmp1051 = 0, $sendv1019_0 = 0, $n1017_0 = 0, $209 = 0, $add1056_neg = 0, $sub1058 = 0, $shl1064 = 0, $mrb1066 = 0, $210 = 0, $call1067 = 0, $call1068 = 0, $and1069 = 0, $shl1070 = 0, $and1072 = 0, $shl1073 = 0, $or1065 = 0, $or1071 = 0, $or1074 = 0, $tobool1075 = 0, $tobool1079 = 0, $loop1083 = 0, $211 = 0, $tobool1084 = 0, $type1088 = 0, $212 = 0, $cmp1089 = 0, $ensure_level1092 = 0, $213 = 0, $ensure_level1094 = 0, $214 = 0, $cmp1095 = 0, $sub1101 = 0, $shl1103 = 0, $or1104 = 0, $215 = 0, $pc11107 = 0, $216 = 0, $pc1108 = 0, $217 = 0, $sub1109 = 0, $add1110 = 0, $and1111 = 0, $shl1112 = 0, $or1113 = 0, $tobool1115 = 0, $sp1117 = 0, $218 = 0, $dec1118 = 0, $sp1120 = 0, $219 = 0, $shl1122 = 0, $or1123 = 0, $sp1125 = 0, $220 = 0, $shl1127 = 0, $or1128 = 0, $tobool1131 = 0, $loop1135 = 0, $221 = 0, $tobool1136 = 0, $ensure_level1139 = 0, $222 = 0, $ensure_level1141 = 0, $223 = 0, $cmp1142 = 0, $sub1148 = 0, $shl1150 = 0, $or1151 = 0, $224 = 0, $pc21154 = 0, $225 = 0, $pc1155 = 0, $226 = 0, $sub1156 = 0, $add1157 = 0, $and1158 = 0, $shl1159 = 0, $or1160 = 0, $loop1164 = 0, $227 = 0, $tobool1165 = 0, $lp1169_01107 = 0, $n1172_01106 = 0, $type1175 = 0, $228 = 0, $cmp1176 = 0, $cmp1180 = 0, $inc1183 = 0, $inc1183_n1172_0 = 0, $prev1185 = 0, $229 = 0, $tobool1174 = 0, $cmp1190 = 0, $n1172_21102 = 0, $dec1194 = 0, $tobool1195 = 0, $ensure_level1199 = 0, $230 = 0, $ensure_level1200 = 0, $231 = 0, $cmp1201 = 0, $sub1206 = 0, $shl1208 = 0, $or1209 = 0, $pc11211 = 0, $232 = 0, $pc1212 = 0, $233 = 0, $sub1213 = 0, $add1214 = 0, $and1215 = 0, $shl1216 = 0, $or1217 = 0, $tobool1221 = 0, $234 = 0, $conv1225 = 0, $call1226 = 0, $cmp1227 = 0, $sp1230 = 0, $235 = 0, $shl1232 = 0, $and1234 = 0, $shl1235 = 0, $or1233 = 0, $or1236 = 0, $s_pn = 0, $lv1239_0 = 0, $up_0_in = 0, $up_0 = 0, $tobool1243 = 0, $call1246 = 0, $cmp1247 = 0, $inc1261 = 0, $sp1250 = 0, $236 = 0, $shl1252 = 0, $and1254 = 0, $shl1255 = 0, $and1257 = 0, $shl1258 = 0, $or1253 = 0, $or1256 = 0, $or1259 = 0, $237 = 0, $conv1269 = 0, $call1270 = 0, $sp1271 = 0, $238 = 0, $shl1273 = 0, $and1275 = 0, $shl1276 = 0, $or1274 = 0, $or1277 = 0, $239 = 0, $conv1281 = 0, $call1282 = 0, $sp1283 = 0, $240 = 0, $shl1285 = 0, $and1287 = 0, $shl1288 = 0, $or1286 = 0, $or1289 = 0, $241 = 0, $conv1293 = 0, $call1294 = 0, $sp1295 = 0, $242 = 0, $shl1297 = 0, $and1299 = 0, $shl1300 = 0, $or1298 = 0, $or1301 = 0, $243 = 0, $conv1305 = 0, $call1306 = 0, $sp1307 = 0, $244 = 0, $shl1309 = 0, $and1311 = 0, $shl1312 = 0, $or1310 = 0, $or1313 = 0, $245 = 0, $conv1320 = 0, $arrayidx1321 = 0, $mrb1322 = 0, $246 = 0, $arraydecay = 0, $247 = 0, $call1325 = 0, $call1326 = 0, $sp1327 = 0, $248 = 0, $shl1329 = 0, $and1331 = 0, $shl1332 = 0, $or1330 = 0, $or1333 = 0, $mrb1339 = 0, $249 = 0, $250 = 0, $call1345 = 0, $call1346 = 0, $sp1347 = 0, $251 = 0, $shl1349 = 0, $and1351 = 0, $shl1352 = 0, $or1350 = 0, $or1353 = 0, $tobool1357 = 0, $car1361 = 0, $252 = 0, $253 = 0, $cdr1363 = 0, $254 = 0, $car1364 = 0, $255 = 0, $256 = 0, $call1368 = 0, $257 = 0, $tobool1369 = 0, $call1372 = 0.0, $call1375 = 0, $sp1376 = 0, $258 = 0, $shl1378 = 0, $and1380 = 0, $shl1381 = 0, $or1379 = 0, $or1382 = 0, $call1368_off = 0, $259 = 0, $sp1390 = 0, $260 = 0, $shl1392 = 0, $add1394 = 0, $and1395 = 0, $shl1396 = 0, $or1393 = 0, $or1397 = 0, $call1402 = 0, $sp1403 = 0, $261 = 0, $shl1405 = 0, $and1407 = 0, $shl1408 = 0, $or1406 = 0, $or1409 = 0, $co_0 = 0, $tobool1414 = 0, $262 = 0, $call1420 = 0.0, $call1424 = 0, $sp1425 = 0, $263 = 0, $shl1427 = 0, $and1429 = 0, $shl1430 = 0, $or1428 = 0, $or1431 = 0, $car1434 = 0, $264 = 0, $265 = 0, $cdr1435 = 0, $266 = 0, $267 = 0, $call1441 = 0.0, $sub1445 = 0.0, $call1446 = 0, $sp1447 = 0, $268 = 0, $shl1449 = 0, $and1451 = 0, $shl1452 = 0, $or1450 = 0, $or1453 = 0, $car1457 = 0, $269 = 0, $270 = 0, $cdr1460 = 0, $271 = 0, $car1461 = 0, $272 = 0, $273 = 0, $call1468 = 0, $274 = 0, $tobool1469 = 0, $call1473 = 0.0, $sub1477 = 0.0, $call1478 = 0, $sp1479 = 0, $275 = 0, $shl1481 = 0, $and1483 = 0, $shl1484 = 0, $or1482 = 0, $or1485 = 0, $call1468_off = 0, $276 = 0, $sp1493 = 0, $277 = 0, $shl1495 = 0, $add1497 = 0, $and1498 = 0, $shl1499 = 0, $or1496 = 0, $or1500 = 0, $call1505 = 0, $sp1506 = 0, $278 = 0, $shl1508 = 0, $and1510 = 0, $shl1511 = 0, $or1509 = 0, $or1512 = 0, $co1465_0 = 0, $mrb1517 = 0, $279 = 0, $call1518 = 0, $call1519 = 0, $sp1520 = 0, $280 = 0, $shl1522 = 0, $or1523 = 0, $281 = 0, $dec1527 = 0, $shl1530 = 0, $and1532 = 0, $shl1533 = 0, $or1531 = 0, $or1535 = 0, $tobool1537 = 0, $car1541 = 0, $282 = 0, $283 = 0, $cdr1544 = 0, $284 = 0, $285 = 0, $mrb1546 = 0, $286 = 0, $call1547 = 0, $call1552 = 0, $287 = 0, $sp1554 = 0, $288 = 0, $shl1556 = 0, $and1558 = 0, $shl1559 = 0, $or1557 = 0, $or1560 = 0, $289 = 0, $290 = 0, $tree_addr_3 = 0, $tobool1564 = 0, $tobool15931110 = 0, $car1568 = 0, $291 = 0, $n1567_0_in1113 = 0, $n1567_01114 = 0, $tobool15711115 = 0, $sp1574 = 0, $n1567_01116 = 0, $car1573 = 0, $292 = 0, $293 = 0, $dec1577 = 0, $shl1580 = 0, $add1583 = 0, $and1584 = 0, $shl1585 = 0, $or1581 = 0, $or1586 = 0, $n1567_0_in = 0, $n1567_0 = 0, $tobool1571 = 0, $n1591_01111 = 0, $car1595 = 0, $294 = 0, $car1596 = 0, $295 = 0, $cmp1597 = 0, $cdr1602 = 0, $296 = 0, $tobool1593 = 0, $tobool1608 = 0, $car1612 = 0, $297 = 0, $298 = 0, $cdr1615 = 0, $299 = 0, $300 = 0, $mrb1618 = 0, $301 = 0, $call1619 = 0, $call1623 = 0, $call1624 = 0, $302 = 0, $call1629 = 0, $sp1630 = 0, $303 = 0, $shl1632 = 0, $or1633 = 0, $304 = 0, $shl1636 = 0, $and1638 = 0, $shl1639 = 0, $or1637 = 0, $or1640 = 0, $305 = 0, $shl1643 = 0, $and1645 = 0, $shl1646 = 0, $or1644 = 0, $or1647 = 0, $306 = 0, $dec1649 = 0, $307 = 0, $call1651 = 0, $call1652 = 0, $308 = 0, $shl1655 = 0, $and1657 = 0, $shl1658 = 0, $or1656 = 0, $or1660 = 0, $309 = 0, $tobool1664 = 0, $car1667 = 0, $310 = 0, $311 = 0, $cdr1669 = 0, $312 = 0, $313 = 0, $mrb1672 = 0, $314 = 0, $call1673 = 0, $call1677 = 0, $call1678 = 0, $315 = 0, $call1683 = 0, $call1684 = 0, $sp1686 = 0, $316 = 0, $shl1688 = 0, $or1689 = 0, $317 = 0, $shl1692 = 0, $and1694 = 0, $shl1695 = 0, $or1693 = 0, $or1696 = 0, $318 = 0, $shl1699 = 0, $and1701 = 0, $shl1702 = 0, $or1700 = 0, $or1703 = 0, $tobool1704 = 0, $319 = 0, $call1708 = 0, $call1709 = 0, $320 = 0, $shl1712 = 0, $and1714 = 0, $shl1715 = 0, $or1713 = 0, $or1716 = 0, $321 = 0, $dec1719 = 0, $argc_0 = 0, $322 = 0, $dec1722 = 0, $323 = 0, $call1724 = 0, $call1725 = 0, $324 = 0, $shl1728 = 0, $and1730 = 0, $shl1731 = 0, $or1732 = 0, $or1735 = 0, $325 = 0, $tobool1739 = 0, $car1743 = 0, $326 = 0, $tobool18651118 = 0, $mrb1746 = 0, $327 = 0, $call1747 = 0, $call1751 = 0, $call1752 = 0, $sp1759 = 0, $328 = 0, $shl1761 = 0, $or1762 = 0, $329 = 0, $shl1765 = 0, $and1767 = 0, $shl1768 = 0, $or1766 = 0, $or1769 = 0, $car1770 = 0, $330 = 0, $n1742_0_in1120 = 0, $n1742_01121 = 0, $tobool17731122 = 0, $n1742_01123 = 0, $car1775 = 0, $331 = 0, $332 = 0, $dec1779 = 0, $shl1782 = 0, $add1785 = 0, $and1786 = 0, $shl1787 = 0, $or1783 = 0, $or1788 = 0, $n1742_0_in = 0, $n1742_0 = 0, $tobool1773 = 0, $cdr1791 = 0, $333 = 0, $cdr1792 = 0, $334 = 0, $car1793 = 0, $335 = 0, $tobool1794 = 0, $336 = 0, $337 = 0, $call1799 = 0, $call1800 = 0, $338 = 0, $339 = 0, $shl1804 = 0, $and1806 = 0, $shl1807 = 0, $or1805 = 0, $or1808 = 0, $340 = 0, $dec1810 = 0, $shl1813 = 0, $and1817 = 0, $shl1818 = 0, $or1814 = 0, $or1819 = 0, $cdr1821 = 0, $341 = 0, $tobool1822 = 0, $342 = 0, $343 = 0, $call1831 = 0, $call1832 = 0, $344 = 0, $shl1835 = 0, $and1837 = 0, $shl1838 = 0, $or1836 = 0, $or1839 = 0, $345 = 0, $dec1842 = 0, $argc1754_0 = 0, $346 = 0, $dec1845 = 0, $347 = 0, $call1847 = 0, $call1848 = 0, $348 = 0, $shl1851 = 0, $and1853 = 0, $shl1854 = 0, $or1855 = 0, $or1858 = 0, $349 = 0, $n1862_01119 = 0, $car1867 = 0, $350 = 0, $car1868 = 0, $351 = 0, $cmp1869 = 0, $cdr1874 = 0, $352 = 0, $tobool1865 = 0, $tobool1878 = 0, $353 = 0, $conv1882 = 0, $call1883 = 0, $sp1884 = 0, $354 = 0, $shl1886 = 0, $and1888 = 0, $shl1889 = 0, $or1887 = 0, $or1890 = 0, $tobool1893 = 0, $tobool1897 = 0, $sp1899 = 0, $355 = 0, $shl1901 = 0, $or1902 = 0, $tobool1905 = 0, $sp1907 = 0, $356 = 0, $shl1909 = 0, $or1910 = 0, $tobool1913 = 0, $sp1915 = 0, $357 = 0, $shl1917 = 0, $or1918 = 0, $tobool1921 = 0, $sp1923 = 0, $358 = 0, $shl1925 = 0, $or1926 = 0, $car1930 = 0, $359 = 0, $360 = 0, $conv1931 = 0, $call1932 = 0, $cdr1934 = 0, $361 = 0, $362 = 0, $conv1935 = 0, $call1936 = 0, $mrb1938 = 0, $363 = 0, $call1939 = 0, $call1940 = 0, $sp1941 = 0, $364 = 0, $shl1943 = 0, $or1944 = 0, $365 = 0, $shl1947 = 0, $and1949 = 0, $shl1950 = 0, $or1948 = 0, $or1951 = 0, $366 = 0, $shl1954 = 0, $and1956 = 0, $shl1957 = 0, $or1955 = 0, $or1958 = 0, $367 = 0, $shl1961 = 0, $or1962 = 0, $368 = 0, $sub1964 = 0, $shl1967 = 0, $and1969 = 0, $shl1970 = 0, $or1968 = 0, $or1972 = 0, $tobool1973 = 0, $mrb1978 = 0, $369 = 0, $call1979 = 0, $call1980 = 0, $sp1984 = 0, $370 = 0, $shl1986 = 0, $or1987 = 0, $tobool19891124 = 0, $t1983_01126 = 0, $num_01125 = 0, $car1992 = 0, $371 = 0, $372 = 0, $conv1993 = 0, $call1994 = 0, $373 = 0, $shl1997 = 0, $and1999 = 0, $shl2000 = 0, $or1998 = 0, $or2001 = 0, $cdr2002 = 0, $374 = 0, $inc2003 = 0, $tobool1989 = 0, $num_0_lcssa = 0, $375 = 0, $add2005_neg = 0, $sub2007 = 0, $shl2010 = 0, $and2012 = 0, $shl2013 = 0, $and2015 = 0, $shl2016 = 0, $or2011 = 0, $or2014 = 0, $or2017 = 0, $tobool2018 = 0, $car2024 = 0, $376 = 0, $car2025 = 0, $377 = 0, $magicptr = 0, $sp2029 = 0, $378 = 0, $shl2031 = 0, $or2032 = 0, $sp2039 = 0, $379 = 0, $shl2041 = 0, $or2042 = 0, $cdr2048 = 0, $380 = 0, $car2049 = 0, $381 = 0, $tobool2050 = 0, $sp2055 = 0, $382 = 0, $shl2057 = 0, $or2058 = 0, $sp2060 = 0, $383 = 0, $dec2063 = 0, $384 = 0, $cdr2065 = 0, $385 = 0, $386 = 0, $conv2066 = 0, $call2067 = 0, $387 = 0, $shl2070 = 0, $and2072 = 0, $shl2073 = 0, $or2071 = 0, $or2074 = 0, $388 = 0, $cdr2076 = 0, $389 = 0, $car2077 = 0, $390 = 0, $call2078 = 0, $391 = 0, $shl2081 = 0, $and2083 = 0, $shl2084 = 0, $or2082 = 0, $or2085 = 0, $tobool2086 = 0, $car2092 = 0, $392 = 0, $car2093 = 0, $393 = 0, $magicptr1030 = 0, $sp2097 = 0, $394 = 0, $shl2099 = 0, $or2100 = 0, $sp2107 = 0, $395 = 0, $shl2109 = 0, $or2110 = 0, $sp2116 = 0, $396 = 0, $dec2117 = 0, $397 = 0, $cdr2119 = 0, $398 = 0, $399 = 0, $conv2120 = 0, $call2121 = 0, $400 = 0, $shl2124 = 0, $and2126 = 0, $shl2127 = 0, $or2125 = 0, $or2128 = 0, $cdr2129 = 0, $401 = 0, $car2130 = 0, $402 = 0, $call2131 = 0, $403 = 0, $shl2134 = 0, $and2136 = 0, $shl2137 = 0, $or2135 = 0, $or2138 = 0, $tobool2139 = 0, $car2145 = 0, $404 = 0, $sp2146 = 0, $405 = 0, $dec2147 = 0, $shl2150 = 0, $and2149 = 0, $shl2154 = 0, $or2151 = 0, $or2155 = 0, $cdr2156 = 0, $406 = 0, $car2157 = 0, $407 = 0, $call2158 = 0, $408 = 0, $shl2161 = 0, $and2163 = 0, $shl2164 = 0, $or2162 = 0, $or2165 = 0, $tobool2166 = 0, $car2172 = 0, $409 = 0, $410 = 0, $conv2173 = 0, $call2174 = 0, $cdr2177 = 0, $411 = 0, $call2178 = 0, $sp2179 = 0, $412 = 0, $shl2181 = 0, $or2182 = 0, $413 = 0, $shl2185 = 0, $and2187 = 0, $shl2188 = 0, $or2189 = 0, $or2190 = 0, $414 = 0, $dec2192 = 0, $shl2195 = 0, $and2197 = 0, $shl2198 = 0, $or2196 = 0, $or2199 = 0, $tobool2200 = 0, $415 = 0, $shl2204 = 0, $or2205 = 0, $car2209 = 0, $416 = 0, $cdr2212 = 0, $417 = 0, $car2213 = 0, $418 = 0, $419 = 0, $conv2214 = 0, $call2215 = 0, $420 = 0, $cdr2219 = 0, $421 = 0, $call2220 = 0, $sp2221 = 0, $422 = 0, $dec2222 = 0, $shl2225 = 0, $and2224 = 0, $shl2229 = 0, $or2226 = 0, $or2230 = 0, $423 = 0, $shl2233 = 0, $and2235 = 0, $shl2236 = 0, $or2237 = 0, $or2238 = 0, $424 = 0, $dec2240 = 0, $shl2243 = 0, $and2245 = 0, $shl2246 = 0, $or2244 = 0, $or2247 = 0, $tobool2248 = 0, $425 = 0, $shl2252 = 0, $or2253 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $len663 = __stackBase__ | 0;
    $buf = __stackBase__ + 4 | 0;
    $tmpcast = $buf;
    $str = STACKTOP;
    STACKTOP = STACKTOP + 12 | 0;
    $fix = STACKTOP;
    STACKTOP = STACKTOP + 12 | 0;
    $str1342 = STACKTOP;
    STACKTOP = STACKTOP + 12 | 0;
    $tmp1343 = STACKTOP;
    STACKTOP = STACKTOP + 12 | 0;
    $agg_tmp = STACKTOP;
    STACKTOP = STACKTOP + 12 | 0;
    $tmp1344 = STACKTOP;
    STACKTOP = STACKTOP + 12 | 0;
    $overflow = STACKTOP;
    STACKTOP = STACKTOP + 4 | 0;
    $agg_tmp1374 = STACKTOP;
    STACKTOP = STACKTOP + 12 | 0;
    $agg_tmp1401 = STACKTOP;
    STACKTOP = STACKTOP + 12 | 0;
    $agg_tmp1423 = STACKTOP;
    STACKTOP = STACKTOP + 12 | 0;
    $agg_tmp1444 = STACKTOP;
    STACKTOP = STACKTOP + 12 | 0;
    $overflow1467 = STACKTOP;
    STACKTOP = STACKTOP + 4 | 0;
    $agg_tmp1476 = STACKTOP;
    STACKTOP = STACKTOP + 12 | 0;
    $agg_tmp1504 = STACKTOP;
    STACKTOP = STACKTOP + 12 | 0;
    $agg_tmp1550 = STACKTOP;
    STACKTOP = STACKTOP + 12 | 0;
    $agg_tmp1627 = STACKTOP;
    STACKTOP = STACKTOP + 12 | 0;
    $agg_tmp1681 = STACKTOP;
    STACKTOP = STACKTOP + 12 | 0;
    $agg_tmp1706 = STACKTOP;
    STACKTOP = STACKTOP + 12 | 0;
    $agg_tmp1797 = STACKTOP;
    STACKTOP = STACKTOP + 12 | 0;
    $agg_tmp1829 = STACKTOP;
    STACKTOP = STACKTOP + 12 | 0;
    $tobool = ($tree | 0) == 0;
    if ($tobool) {
      label = 320;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $car = $tree | 0;
    $0 = HEAP32[$car >> 2] | 0;
    $1 = $0;
    $lineno = $tree + 8 | 0;
    $2 = HEAP16[$lineno >> 1] | 0;
    $lineno1 = $s + 84 | 0;
    HEAP16[$lineno1 >> 1] = $2;
    $cdr = $tree + 4 | 0;
    $3 = HEAP32[$cdr >> 2] | 0;
    if (($1 | 0) == 36) {
      label = 4;
      break;
    } else if (($1 | 0) == 17) {
      label = 5;
      break;
    } else if (($1 | 0) == 18) {
      label = 9;
      break;
    } else if (($1 | 0) == 19) {
      label = 34;
      break;
    } else if (($1 | 0) == 53) {
      label = 35;
      break;
    } else if (($1 | 0) == 4) {
      label = 36;
      break;
    } else if (($1 | 0) == 5) {
      label = 37;
      break;
    } else if (($1 | 0) == 20) {
      label = 47;
      break;
    } else if (($1 | 0) == 21) {
      label = 48;
      break;
    } else if (($1 | 0) == 9) {
      label = 49;
      break;
    } else if (($1 | 0) == 10) {
      label = 50;
      break;
    } else if (($1 | 0) == 12) {
      label = 51;
      break;
    } else if (($1 | 0) == 6) {
      label = 53;
      break;
    } else if (($1 | 0) == 3) {
      label = 73;
      break;
    } else if (($1 | 0) == 30 | ($1 | 0) == 29) {
      label = 74;
      break;
    } else if (($1 | 0) == 80) {
      label = 75;
      break;
    } else if (($1 | 0) == 81) {
      label = 77;
      break;
    } else if (($1 | 0) == 77) {
      label = 79;
      break;
    } else if (($1 | 0) == 78) {
      label = 81;
      break;
    } else if (($1 | 0) == 34) {
      label = 83;
      break;
    } else if (($1 | 0) == 66) {
      label = 91;
      break;
    } else if (($1 | 0) == 24) {
      label = 92;
      break;
    } else if (($1 | 0) == 23) {
      label = 93;
      break;
    } else if (($1 | 0) == 28) {
      label = 112;
      break;
    } else if (($1 | 0) == 32) {
      label = 149;
      break;
    } else if (($1 | 0) == 33) {
      label = 158;
      break;
    } else if (($1 | 0) == 37) {
      label = 168;
      break;
    } else if (($1 | 0) == 38) {
      $s21011_0 = $s;
      $lv1013_0 = 0;
      label = 176;
      break;
    } else if (($1 | 0) == 13) {
      label = 185;
      break;
    } else if (($1 | 0) == 14) {
      label = 187;
      break;
    } else if (($1 | 0) == 15) {
      label = 199;
      break;
    } else if (($1 | 0) == 16) {
      label = 204;
      break;
    } else if (($1 | 0) == 39) {
      label = 214;
      break;
    } else if (($1 | 0) == 41) {
      label = 221;
      break;
    } else if (($1 | 0) == 42) {
      label = 222;
      break;
    } else if (($1 | 0) == 44) {
      label = 223;
      break;
    } else if (($1 | 0) == 43) {
      label = 224;
      break;
    } else if (($1 | 0) == 89) {
      label = 225;
      break;
    } else if (($1 | 0) == 46) {
      label = 226;
      break;
    } else if (($1 | 0) == 45) {
      label = 227;
      break;
    } else if (($1 | 0) == 69) {
      label = 228;
      break;
    } else if (($1 | 0) == 50) {
      label = 229;
      break;
    } else if (($1 | 0) == 51) {
      label = 237;
      break;
    } else if (($1 | 0) == 52) {
      label = 239;
      break;
    } else if (($1 | 0) == 55) {
      label = 249;
      break;
    } else if (($1 | 0) == 99) {
      label = 251;
      break;
    } else if (($1 | 0) == 56) {
      $tree_addr_3 = $3;
      label = 252;
      break;
    } else if (($1 | 0) == 101) {
      label = 260;
      break;
    } else if (($1 | 0) == 102) {
      label = 261;
      break;
    } else if (($1 | 0) == 57) {
      label = 262;
      break;
    } else if (($1 | 0) == 59) {
      label = 264;
      break;
    } else if (($1 | 0) == 60) {
      label = 268;
      break;
    } else if (($1 | 0) == 54) {
      label = 280;
      break;
    } else if (($1 | 0) == 97) {
      label = 282;
      break;
    } else if (($1 | 0) == 85) {
      label = 284;
      break;
    } else if (($1 | 0) == 86) {
      label = 286;
      break;
    } else if (($1 | 0) == 87) {
      label = 288;
      break;
    } else if (($1 | 0) == 88) {
      label = 290;
      break;
    } else if (($1 | 0) == 72) {
      label = 292;
      break;
    } else if (($1 | 0) == 73) {
      label = 294;
      break;
    } else if (($1 | 0) == 74) {
      label = 298;
      break;
    } else if (($1 | 0) == 75) {
      label = 307;
      break;
    } else if (($1 | 0) == 76) {
      label = 313;
      break;
    } else if (($1 | 0) == 70) {
      label = 315;
      break;
    } else if (($1 | 0) == 71) {
      label = 317;
      break;
    } else if (($1 | 0) == 91) {
      label = 319;
      break;
    } else {
      label = 320;
      break;
    }
   case 4:
    $tobool5051075 = ($3 | 0) == 0;
    if ($tobool5051075) {
      $len_0_lcssa = 0;
      label = 89;
      break;
    } else {
      $len_01076 = 0;
      $tree_addr_21077 = $3;
      label = 88;
      break;
    }
   case 5:
    $tobool2 = ($val | 0) != 0;
    $tobool3 = ($3 | 0) == 0;
    $or_cond = $tobool2 & $tobool3;
    if ($or_cond) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $sp = $s + 56 | 0;
    $4 = HEAP32[$sp >> 2] | 0;
    $shl = $4 << 23;
    $or = $shl | 5;
    _genop($s, $or);
    _push_($s);
    label = 7;
    break;
   case 7:
    $tobool61057 = ($3 | 0) == 0;
    if ($tobool61057) {
      label = 320;
      break;
    } else {
      $tree_addr_01058 = $3;
      label = 8;
      break;
    }
   case 8:
    $car7 = $tree_addr_01058 | 0;
    $5 = HEAP32[$car7 >> 2] | 0;
    $cdr8 = $tree_addr_01058 + 4 | 0;
    $6 = HEAP32[$cdr8 >> 2] | 0;
    $tobool9 = ($6 | 0) != 0;
    $cond = $tobool9 ? 0 : $val;
    _codegen($s, $5, $cond);
    $7 = HEAP32[$cdr8 >> 2] | 0;
    $tobool6 = ($7 | 0) == 0;
    if ($tobool6) {
      label = 320;
      break;
    } else {
      $tree_addr_01058 = $7;
      label = 8;
      break;
    }
   case 9:
    $call = _new_label($s) | 0;
    _genop($s, 26);
    $call13 = _loop_push($s, 3) | 0;
    $pc1 = $call13 + 4 | 0;
    HEAP32[$pc1 >> 2] = $call;
    $car14 = $3 | 0;
    $8 = HEAP32[$car14 >> 2] | 0;
    $tobool15 = ($8 | 0) == 0;
    if ($tobool15) {
      label = 12;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _codegen($s, $8, $val);
    $tobool18 = ($val | 0) == 0;
    if ($tobool18) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $sp20 = $s + 56 | 0;
    $9 = HEAP32[$sp20 >> 2] | 0;
    $dec = $9 - 1 | 0;
    HEAP32[$sp20 >> 2] = $dec;
    label = 12;
    break;
   case 12:
    $type = $call13 | 0;
    HEAP32[$type >> 2] = 4;
    $call23 = _new_label($s) | 0;
    _genop($s, 23);
    _dispatch($s, $call);
    $cdr24 = $3 + 4 | 0;
    $10 = HEAP32[$cdr24 >> 2] | 0;
    $car25 = $10 | 0;
    $11 = HEAP32[$car25 >> 2] | 0;
    $tobool26 = ($11 | 0) == 0;
    if ($tobool26) {
      $exend_1 = 0;
      label = 29;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $sp31 = $s + 56 | 0;
    $12 = HEAP32[$sp31 >> 2] | 0;
    $shl33 = $12 << 23;
    $or34 = $shl33 | 27;
    _genop($s, $or34);
    _push_($s);
    $and32 = $12 << 14;
    $shl63 = $and32 & 8372224;
    $mrb71 = $s | 0;
    $mrb = $s | 0;
    $tobool109 = ($val | 0) == 0;
    $n2_01060 = $11;
    $pos1_01061 = 0;
    $exend_01062 = 0;
    label = 14;
    break;
   case 14:
    $car39 = $n2_01060 | 0;
    $13 = HEAP32[$car39 >> 2] | 0;
    $car41 = $13 | 0;
    $14 = HEAP32[$car41 >> 2] | 0;
    $tobool42 = ($pos1_01061 | 0) == 0;
    if ($tobool42) {
      $pos2_0 = 0;
      $n4_0 = $14;
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    _dispatch($s, $pos1_01061);
    $pos2_0 = 0;
    $n4_0 = $14;
    label = 16;
    break;
   case 16:
    $tobool45 = ($n4_0 | 0) != 0;
    if ($tobool45) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $car47 = $n4_0 | 0;
    $15 = HEAP32[$car47 >> 2] | 0;
    _codegen($s, $15, 1);
    label = 19;
    break;
   case 18:
    $16 = HEAP32[$sp31 >> 2] | 0;
    $shl50 = $16 << 23;
    $17 = HEAP32[$mrb >> 2] | 0;
    $call52 = _mrb_intern2($17, 103828, 13) | 0;
    $call53 = _new_msym($s, $call52) | 0;
    $and54 = $call53 << 7;
    $shl55 = $and54 & 8388480;
    $or51 = $shl50 | $shl55;
    $or56 = $or51 | 17;
    _genop($s, $or56);
    _push_($s);
    label = 19;
    break;
   case 19:
    $18 = HEAP32[$sp31 >> 2] | 0;
    $shl60 = $18 << 23;
    $or61 = $shl63 | $shl60;
    $or64 = $or61 | 1;
    _genop($s, $or64);
    $19 = HEAP32[$sp31 >> 2] | 0;
    $dec66 = $19 - 1 | 0;
    HEAP32[$sp31 >> 2] = $dec66;
    $shl69 = $dec66 << 23;
    $20 = HEAP32[$mrb71 >> 2] | 0;
    $call72 = _mrb_intern2($20, 101092, 3) | 0;
    $call73 = _new_msym($s, $call72) | 0;
    $and74 = $call73 << 14;
    $shl75 = $and74 & 8372224;
    $or70 = $shl69 | $shl75;
    $or77 = $or70 | 160;
    _genop($s, $or77);
    $call78 = _new_label($s) | 0;
    $21 = HEAP32[$sp31 >> 2] | 0;
    $shl81 = $21 << 23;
    $add = $pos2_0 << 7;
    $and83 = $add + 4194176 | 0;
    $shl84 = $and83 & 8388480;
    $or82 = $shl84 | $shl81;
    $or85 = $or82 | 24;
    _genop($s, $or85);
    if ($tobool45) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    $cdr88 = $n4_0 + 4 | 0;
    $22 = HEAP32[$cdr88 >> 2] | 0;
    $tobool90 = ($22 | 0) == 0;
    if ($tobool90) {
      label = 21;
      break;
    } else {
      $pos2_0 = $call78;
      $n4_0 = $22;
      label = 16;
      break;
    }
   case 21:
    $call91 = _new_label($s) | 0;
    _genop($s, 4194199);
    _dispatch_linked($s, $call78);
    $23 = HEAP32[$sp31 >> 2] | 0;
    $dec93 = $23 - 1 | 0;
    HEAP32[$sp31 >> 2] = $dec93;
    $cdr94 = $13 + 4 | 0;
    $24 = HEAP32[$cdr94 >> 2] | 0;
    $car95 = $24 | 0;
    $25 = HEAP32[$car95 >> 2] | 0;
    $tobool96 = ($25 | 0) == 0;
    if ($tobool96) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    _gen_assignment($s, $25, $12, 0);
    label = 23;
    break;
   case 23:
    $26 = HEAP32[$cdr94 >> 2] | 0;
    $cdr102 = $26 + 4 | 0;
    $27 = HEAP32[$cdr102 >> 2] | 0;
    $car103 = $27 | 0;
    $28 = HEAP32[$car103 >> 2] | 0;
    $tobool104 = ($28 | 0) == 0;
    if ($tobool104) {
      label = 26;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    _codegen($s, $28, $val);
    if ($tobool109) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $29 = HEAP32[$sp31 >> 2] | 0;
    $dec112 = $29 - 1 | 0;
    HEAP32[$sp31 >> 2] = $dec112;
    label = 26;
    break;
   case 26:
    $call115 = _new_label($s) | 0;
    $add116 = $exend_01062 << 7;
    $and117 = $add116 + 4194176 | 0;
    $shl118 = $and117 & 8388480;
    $or119 = $shl118 | 23;
    _genop($s, $or119);
    $cdr120 = $n2_01060 + 4 | 0;
    $30 = HEAP32[$cdr120 >> 2] | 0;
    _push_($s);
    $tobool36 = ($30 | 0) == 0;
    if ($tobool36) {
      label = 27;
      break;
    } else {
      $n2_01060 = $30;
      $pos1_01061 = $call91;
      $exend_01062 = $call115;
      label = 14;
      break;
    }
   case 27:
    $tobool122 = ($call91 | 0) == 0;
    if ($tobool122) {
      $exend_1 = $call115;
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    _dispatch($s, $call91);
    $or126 = $shl33 | 29;
    _genop($s, $or126);
    $exend_1 = $call115;
    label = 29;
    break;
   case 29:
    $sp129 = $s + 56 | 0;
    $31 = HEAP32[$sp129 >> 2] | 0;
    $dec130 = $31 - 1 | 0;
    HEAP32[$sp129 >> 2] = $dec130;
    $cdr131 = $10 + 4 | 0;
    $32 = HEAP32[$cdr131 >> 2] | 0;
    _dispatch($s, $call23);
    _genop($s, 8388636);
    $car132 = $32 | 0;
    $33 = HEAP32[$car132 >> 2] | 0;
    $tobool133 = ($33 | 0) == 0;
    if ($tobool133) {
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    _codegen($s, $33, $val);
    label = 33;
    break;
   case 31:
    $tobool137 = ($val | 0) == 0;
    if ($tobool137) {
      label = 33;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    _push_($s);
    label = 33;
    break;
   case 33:
    _dispatch_linked($s, $exend_1);
    _loop_pop($s, 0);
    label = 320;
    break;
   case 34:
    $pc = $s + 60 | 0;
    $34 = HEAP32[$pc >> 2] | 0;
    _genop($s, 30);
    $ensure_level = $s + 76 | 0;
    $35 = HEAP32[$ensure_level >> 2] | 0;
    $inc = $35 + 1 | 0;
    HEAP32[$ensure_level >> 2] = $inc;
    $car144 = $3 | 0;
    $36 = HEAP32[$car144 >> 2] | 0;
    _codegen($s, $36, $val);
    $cdr145 = $3 + 4 | 0;
    $37 = HEAP32[$cdr145 >> 2] | 0;
    $call146 = _scope_body($s, $37) | 0;
    $and147 = $call146 << 7;
    $shl148 = $and147 & 8388480;
    $or149 = $shl148 | 30;
    $iseq = $s + 88 | 0;
    $38 = HEAP32[$iseq >> 2] | 0;
    $arrayidx = $38 + ($34 << 2) | 0;
    HEAP32[$arrayidx >> 2] = $or149;
    $39 = HEAP32[$ensure_level >> 2] | 0;
    $dec151 = $39 - 1 | 0;
    HEAP32[$ensure_level >> 2] = $dec151;
    _genop_peep($s, 8388639, 0);
    label = 320;
    break;
   case 35:
    $call155 = _lambda_body($s, $3, 1) | 0;
    $sp156 = $s + 56 | 0;
    $40 = HEAP32[$sp156 >> 2] | 0;
    $shl158 = $40 << 23;
    $and160 = $call155 << 9;
    $shl161 = $and160 & 8388096;
    $or162 = $shl161 | $shl158;
    $or163 = $or162 | 448;
    _genop($s, $or163);
    _push_($s);
    label = 320;
    break;
   case 36:
    $call167 = _lambda_body($s, $3, 1) | 0;
    $sp168 = $s + 56 | 0;
    $41 = HEAP32[$sp168 >> 2] | 0;
    $shl170 = $41 << 23;
    $and172 = $call167 << 9;
    $shl173 = $and172 & 8388096;
    $or174 = $shl173 | $shl170;
    $or175 = $or174 | 320;
    _genop($s, $or175);
    _push_($s);
    label = 320;
    break;
   case 37:
    $cdr182 = $3 + 4 | 0;
    $42 = HEAP32[$cdr182 >> 2] | 0;
    $cdr183 = $42 + 4 | 0;
    $43 = HEAP32[$cdr183 >> 2] | 0;
    $car184 = $43 | 0;
    $44 = HEAP32[$car184 >> 2] | 0;
    $car185 = $3 | 0;
    $45 = HEAP32[$car185 >> 2] | 0;
    _codegen($s, $45, 1);
    $sp186 = $s + 56 | 0;
    $46 = HEAP32[$sp186 >> 2] | 0;
    $dec187 = $46 - 1 | 0;
    HEAP32[$sp186 >> 2] = $dec187;
    $call188 = _new_label($s) | 0;
    $47 = HEAP32[$sp186 >> 2] | 0;
    $shl191 = $47 << 23;
    $or193 = $shl191 | 4194201;
    _genop($s, $or193);
    $48 = HEAP32[$cdr182 >> 2] | 0;
    $car195 = $48 | 0;
    $49 = HEAP32[$car195 >> 2] | 0;
    _codegen($s, $49, $val);
    $tobool196 = ($val | 0) != 0;
    if ($tobool196) {
      label = 38;
      break;
    } else {
      label = 40;
      break;
    }
   case 38:
    $50 = HEAP32[$cdr182 >> 2] | 0;
    $car199 = $50 | 0;
    $51 = HEAP32[$car199 >> 2] | 0;
    $tobool200 = ($51 | 0) == 0;
    if ($tobool200) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    $52 = HEAP32[$sp186 >> 2] | 0;
    $shl204 = $52 << 23;
    $or205 = $shl204 | 5;
    _genop($s, $or205);
    _push_($s);
    label = 40;
    break;
   case 40:
    $tobool207 = ($44 | 0) == 0;
    if ($tobool207) {
      label = 44;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    if ($tobool196) {
      label = 42;
      break;
    } else {
      label = 43;
      break;
    }
   case 42:
    $53 = HEAP32[$sp186 >> 2] | 0;
    $dec212 = $53 - 1 | 0;
    HEAP32[$sp186 >> 2] = $dec212;
    label = 43;
    break;
   case 43:
    $call214 = _new_label($s) | 0;
    _genop($s, 4194199);
    _dispatch($s, $call188);
    _codegen($s, $44, $val);
    _dispatch($s, $call214);
    label = 320;
    break;
   case 44:
    if ($tobool196) {
      label = 45;
      break;
    } else {
      label = 46;
      break;
    }
   case 45:
    $54 = HEAP32[$sp186 >> 2] | 0;
    $dec219 = $54 - 1 | 0;
    HEAP32[$sp186 >> 2] = $dec219;
    $call220 = _new_label($s) | 0;
    _genop($s, 4194199);
    _dispatch($s, $call188);
    $55 = HEAP32[$sp186 >> 2] | 0;
    $shl223 = $55 << 23;
    $or224 = $shl223 | 5;
    _genop($s, $or224);
    _dispatch($s, $call220);
    _push_($s);
    label = 320;
    break;
   case 46:
    _dispatch($s, $call188);
    label = 320;
    break;
   case 47:
    $car230 = $3 | 0;
    $56 = HEAP32[$car230 >> 2] | 0;
    _codegen($s, $56, 1);
    $call231 = _new_label($s) | 0;
    $sp232 = $s + 56 | 0;
    $57 = HEAP32[$sp232 >> 2] | 0;
    $dec233 = $57 - 1 | 0;
    HEAP32[$sp232 >> 2] = $dec233;
    $shl236 = $dec233 << 23;
    $or238 = $shl236 | 4194201;
    _genop($s, $or238);
    $cdr239 = $3 + 4 | 0;
    $58 = HEAP32[$cdr239 >> 2] | 0;
    _codegen($s, $58, $val);
    _dispatch($s, $call231);
    label = 320;
    break;
   case 48:
    $car243 = $3 | 0;
    $59 = HEAP32[$car243 >> 2] | 0;
    _codegen($s, $59, 1);
    $call244 = _new_label($s) | 0;
    $sp245 = $s + 56 | 0;
    $60 = HEAP32[$sp245 >> 2] | 0;
    $dec246 = $60 - 1 | 0;
    HEAP32[$sp245 >> 2] = $dec246;
    $shl249 = $dec246 << 23;
    $or251 = $shl249 | 4194200;
    _genop($s, $or251);
    $cdr252 = $3 + 4 | 0;
    $61 = HEAP32[$cdr252 >> 2] | 0;
    _codegen($s, $61, $val);
    _dispatch($s, $call244);
    label = 320;
    break;
   case 49:
    $call256 = _loop_push($s, 0) | 0;
    $call257 = _new_label($s) | 0;
    $pc1258 = $call256 + 4 | 0;
    HEAP32[$pc1258 >> 2] = $call257;
    _genop($s, 4194199);
    $call259 = _new_label($s) | 0;
    $pc2 = $call256 + 8 | 0;
    HEAP32[$pc2 >> 2] = $call259;
    $cdr260 = $3 + 4 | 0;
    $62 = HEAP32[$cdr260 >> 2] | 0;
    _codegen($s, $62, 0);
    $63 = HEAP32[$pc1258 >> 2] | 0;
    _dispatch($s, $63);
    $car262 = $3 | 0;
    $64 = HEAP32[$car262 >> 2] | 0;
    _codegen($s, $64, 1);
    $sp263 = $s + 56 | 0;
    $65 = HEAP32[$sp263 >> 2] | 0;
    $dec264 = $65 - 1 | 0;
    HEAP32[$sp263 >> 2] = $dec264;
    $shl267 = $dec264 << 23;
    $66 = HEAP32[$pc2 >> 2] | 0;
    $pc270 = $s + 60 | 0;
    $67 = HEAP32[$pc270 >> 2] | 0;
    $sub = $66 - $67 | 0;
    $add271 = $sub << 7;
    $and272 = $add271 + 4194176 | 0;
    $shl273 = $and272 & 8388480;
    $or268 = $shl267 | $shl273;
    $or274 = $or268 | 24;
    _genop($s, $or274);
    _loop_pop($s, $val);
    label = 320;
    break;
   case 50:
    $call278 = _loop_push($s, 0) | 0;
    $call279 = _new_label($s) | 0;
    $pc1280 = $call278 + 4 | 0;
    HEAP32[$pc1280 >> 2] = $call279;
    _genop($s, 4194199);
    $call281 = _new_label($s) | 0;
    $pc2282 = $call278 + 8 | 0;
    HEAP32[$pc2282 >> 2] = $call281;
    $cdr283 = $3 + 4 | 0;
    $68 = HEAP32[$cdr283 >> 2] | 0;
    _codegen($s, $68, 0);
    $69 = HEAP32[$pc1280 >> 2] | 0;
    _dispatch($s, $69);
    $car285 = $3 | 0;
    $70 = HEAP32[$car285 >> 2] | 0;
    _codegen($s, $70, 1);
    $sp286 = $s + 56 | 0;
    $71 = HEAP32[$sp286 >> 2] | 0;
    $dec287 = $71 - 1 | 0;
    HEAP32[$sp286 >> 2] = $dec287;
    $shl290 = $dec287 << 23;
    $72 = HEAP32[$pc2282 >> 2] | 0;
    $pc293 = $s + 60 | 0;
    $73 = HEAP32[$pc293 >> 2] | 0;
    $sub294 = $72 - $73 | 0;
    $add295 = $sub294 << 7;
    $and296 = $add295 + 4194176 | 0;
    $shl297 = $and296 & 8388480;
    $or291 = $shl290 | $shl297;
    $or298 = $or291 | 25;
    _genop($s, $or298);
    _loop_pop($s, $val);
    label = 320;
    break;
   case 51:
    _for_body($s, $3);
    $tobool300 = ($val | 0) == 0;
    if ($tobool300) {
      label = 320;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    _push_($s);
    label = 320;
    break;
   case 53:
    $car313 = $3 | 0;
    $74 = HEAP32[$car313 >> 2] | 0;
    $tobool314 = ($74 | 0) == 0;
    if ($tobool314) {
      $head_0 = 0;
      label = 55;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    $sp316 = $s + 56 | 0;
    $75 = HEAP32[$sp316 >> 2] | 0;
    _codegen($s, $74, 1);
    $head_0 = $75;
    label = 55;
    break;
   case 55:
    $tree_addr_1_in1069 = $3 + 4 | 0;
    $tree_addr_11070 = HEAP32[$tree_addr_1_in1069 >> 2] | 0;
    $tobool3211071 = ($tree_addr_11070 | 0) == 0;
    if ($tobool3211071) {
      $pos3_0_lcssa = 0;
      label = 69;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    $tobool374 = ($val | 0) == 0;
    $sp376 = $s + 56 | 0;
    $tobool329 = ($head_0 | 0) == 0;
    $sp352 = $s + 56 | 0;
    $and335 = $head_0 << 14;
    $shl336 = $and335 & 8372224;
    $mrb344 = $s | 0;
    $pos3_01072 = 0;
    $tree_addr_11073 = $tree_addr_11070;
    label = 57;
    break;
   case 57:
    $car323 = $tree_addr_11073 | 0;
    $76 = HEAP32[$car323 >> 2] | 0;
    $car324 = $76 | 0;
    $n_01064 = HEAP32[$car324 >> 2] | 0;
    $tobool3261065 = ($n_01064 | 0) == 0;
    if ($tobool3261065) {
      $pos2308_0_lcssa = 0;
      label = 62;
      break;
    } else {
      $pos2308_01066 = 0;
      $n_01067 = $n_01064;
      label = 58;
      break;
    }
   case 58:
    $car328 = $n_01067 | 0;
    $77 = HEAP32[$car328 >> 2] | 0;
    _codegen($s, $77, 1);
    $78 = HEAP32[$sp352 >> 2] | 0;
    if ($tobool329) {
      label = 60;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    $shl333 = $78 << 23;
    $or334 = $shl336 | $shl333;
    $or337 = $or334 | 1;
    _genop($s, $or337);
    $79 = HEAP32[$sp352 >> 2] | 0;
    $dec339 = $79 - 1 | 0;
    HEAP32[$sp352 >> 2] = $dec339;
    $shl342 = $dec339 << 23;
    $80 = HEAP32[$mrb344 >> 2] | 0;
    $call345 = _mrb_intern2($80, 101092, 3) | 0;
    $call346 = _new_msym($s, $call345) | 0;
    $and347 = $call346 << 14;
    $shl348 = $and347 & 8372224;
    $or343 = $shl342 | $shl348;
    $or350 = $or343 | 160;
    _genop($s, $or350);
    label = 61;
    break;
   case 60:
    $dec353 = $78 - 1 | 0;
    HEAP32[$sp352 >> 2] = $dec353;
    label = 61;
    break;
   case 61:
    $call355 = _new_label($s) | 0;
    $81 = HEAP32[$sp352 >> 2] | 0;
    $shl358 = $81 << 23;
    $add360 = $pos2308_01066 << 7;
    $and361 = $add360 + 4194176 | 0;
    $shl362 = $and361 & 8388480;
    $or359 = $shl362 | $shl358;
    $or363 = $or359 | 24;
    _genop($s, $or363);
    $cdr364 = $n_01067 + 4 | 0;
    $n_0 = HEAP32[$cdr364 >> 2] | 0;
    $tobool326 = ($n_0 | 0) == 0;
    if ($tobool326) {
      $pos2308_0_lcssa = $call355;
      label = 62;
      break;
    } else {
      $pos2308_01066 = $call355;
      $n_01067 = $n_0;
      label = 58;
      break;
    }
   case 62:
    $82 = HEAP32[$car323 >> 2] | 0;
    $car367 = $82 | 0;
    $83 = HEAP32[$car367 >> 2] | 0;
    $tobool368 = ($83 | 0) == 0;
    if ($tobool368) {
      $pos1306_0 = 0;
      label = 64;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    $call370 = _new_label($s) | 0;
    _genop($s, 4194199);
    _dispatch_linked($s, $pos2308_0_lcssa);
    $pos1306_0 = $call370;
    label = 64;
    break;
   case 64:
    $84 = HEAP32[$car323 >> 2] | 0;
    $cdr373 = $84 + 4 | 0;
    $85 = HEAP32[$cdr373 >> 2] | 0;
    _codegen($s, $85, $val);
    if ($tobool374) {
      label = 66;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    $86 = HEAP32[$sp376 >> 2] | 0;
    $dec377 = $86 - 1 | 0;
    HEAP32[$sp376 >> 2] = $dec377;
    label = 66;
    break;
   case 66:
    $call379 = _new_label($s) | 0;
    $add380 = $pos3_01072 << 7;
    $and381 = $add380 + 4194176 | 0;
    $shl382 = $and381 & 8388480;
    $or383 = $shl382 | 23;
    _genop($s, $or383);
    $tobool384 = ($pos1306_0 | 0) == 0;
    if ($tobool384) {
      label = 67;
      break;
    } else {
      label = 68;
      break;
    }
   case 67:
    $tree_addr_1_in = $tree_addr_11073 + 4 | 0;
    $tree_addr_1 = HEAP32[$tree_addr_1_in >> 2] | 0;
    $tobool321 = ($tree_addr_1 | 0) == 0;
    if ($tobool321) {
      $pos3_0_lcssa = $call379;
      label = 69;
      break;
    } else {
      $pos3_01072 = $call379;
      $tree_addr_11073 = $tree_addr_1;
      label = 57;
      break;
    }
   case 68:
    _dispatch($s, $pos1306_0);
    label = 67;
    break;
   case 69:
    $tobool389 = ($val | 0) == 0;
    if ($tobool389) {
      label = 71;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    $sp391 = $s + 56 | 0;
    $87 = HEAP32[$sp391 >> 2] | 0;
    $shl393 = $87 << 23;
    $or394 = $shl393 | 5;
    _genop($s, $or394);
    _push_($s);
    label = 71;
    break;
   case 71:
    $tobool396 = ($pos3_0_lcssa | 0) == 0;
    if ($tobool396) {
      label = 320;
      break;
    } else {
      label = 72;
      break;
    }
   case 72:
    _dispatch_linked($s, $pos3_0_lcssa);
    label = 320;
    break;
   case 73:
    $call400 = _scope_body($s, $3) | 0;
    label = 320;
    break;
   case 74:
    _gen_call($s, $3, 0, 0, $val);
    label = 320;
    break;
   case 75:
    $car403 = $3 | 0;
    $88 = HEAP32[$car403 >> 2] | 0;
    _codegen($s, $88, $val);
    $cdr404 = $3 + 4 | 0;
    $89 = HEAP32[$cdr404 >> 2] | 0;
    _codegen($s, $89, $val);
    $tobool405 = ($val | 0) == 0;
    if ($tobool405) {
      label = 320;
      break;
    } else {
      label = 76;
      break;
    }
   case 76:
    $sp407 = $s + 56 | 0;
    $90 = HEAP32[$sp407 >> 2] | 0;
    $dec410 = $90 - 2 | 0;
    HEAP32[$sp407 >> 2] = $dec410;
    $shl413 = $dec410 << 23;
    $and412 = $dec410 << 14;
    $shl417 = $and412 & 8372224;
    $or414 = $shl413 | $shl417;
    $or418 = $or414 | 65;
    _genop($s, $or418);
    _push_($s);
    label = 320;
    break;
   case 77:
    $car421 = $3 | 0;
    $91 = HEAP32[$car421 >> 2] | 0;
    _codegen($s, $91, $val);
    $cdr422 = $3 + 4 | 0;
    $92 = HEAP32[$cdr422 >> 2] | 0;
    _codegen($s, $92, $val);
    $tobool423 = ($val | 0) == 0;
    if ($tobool423) {
      label = 320;
      break;
    } else {
      label = 78;
      break;
    }
   case 78:
    $sp425 = $s + 56 | 0;
    $93 = HEAP32[$sp425 >> 2] | 0;
    $dec428 = $93 - 2 | 0;
    HEAP32[$sp425 >> 2] = $dec428;
    $shl431 = $dec428 << 23;
    $and430 = $dec428 << 14;
    $shl435 = $and430 & 8372224;
    $or432 = $shl431 | $shl435;
    $or437 = $or432 | 193;
    _genop($s, $or437);
    _push_($s);
    label = 320;
    break;
   case 79:
    $cdr441 = $3 + 4 | 0;
    $94 = HEAP32[$cdr441 >> 2] | 0;
    $95 = $94;
    $conv = $95 & 65535;
    $call442 = _new_sym900($s, $conv) | 0;
    $car443 = $3 | 0;
    $96 = HEAP32[$car443 >> 2] | 0;
    _codegen($s, $96, 1);
    $sp444 = $s + 56 | 0;
    $97 = HEAP32[$sp444 >> 2] | 0;
    $dec445 = $97 - 1 | 0;
    HEAP32[$sp444 >> 2] = $dec445;
    $shl448 = $dec445 << 23;
    $and450 = $call442 << 7;
    $shl451 = $and450 & 8388480;
    $or449 = $shl451 | $shl448;
    $or452 = $or449 | 19;
    _genop($s, $or452);
    $tobool453 = ($val | 0) == 0;
    if ($tobool453) {
      label = 320;
      break;
    } else {
      label = 80;
      break;
    }
   case 80:
    _push_($s);
    label = 320;
    break;
   case 81:
    $98 = $3;
    $conv459 = $98 & 65535;
    $call460 = _new_sym900($s, $conv459) | 0;
    $sp461 = $s + 56 | 0;
    $99 = HEAP32[$sp461 >> 2] | 0;
    $shl463 = $99 << 23;
    $or464 = $shl463 | 66;
    _genop($s, $or464);
    $100 = HEAP32[$sp461 >> 2] | 0;
    $shl467 = $100 << 23;
    $and469 = $call460 << 7;
    $shl470 = $and469 & 8388480;
    $or468 = $shl470 | $shl467;
    $or471 = $or468 | 19;
    _genop($s, $or471);
    $tobool472 = ($val | 0) == 0;
    if ($tobool472) {
      label = 320;
      break;
    } else {
      label = 82;
      break;
    }
   case 82:
    _push_($s);
    label = 320;
    break;
   case 83:
    $call478 = _gen_values($s, $3, $val) | 0;
    $cmp = ($call478 | 0) > -1;
    $tobool481 = ($val | 0) != 0;
    if ($cmp) {
      label = 84;
      break;
    } else {
      label = 86;
      break;
    }
   case 84:
    if ($tobool481) {
      label = 85;
      break;
    } else {
      label = 320;
      break;
    }
   case 85:
    $sp483 = $s + 56 | 0;
    $101 = HEAP32[$sp483 >> 2] | 0;
    $sub484 = $101 - $call478 | 0;
    HEAP32[$sp483 >> 2] = $sub484;
    $shl487 = $sub484 << 23;
    $and486 = $sub484 << 14;
    $shl491 = $and486 & 8372224;
    $and493 = $call478 << 7;
    $shl494 = $and493 & 16256;
    $or488 = $shl494 | $shl487;
    $or492 = $or488 | $shl491;
    $or495 = $or492 | 55;
    _genop($s, $or495);
    _push_($s);
    label = 320;
    break;
   case 86:
    if ($tobool481) {
      label = 87;
      break;
    } else {
      label = 320;
      break;
    }
   case 87:
    _push_($s);
    label = 320;
    break;
   case 88:
    $car507 = $tree_addr_21077 | 0;
    $102 = HEAP32[$car507 >> 2] | 0;
    $car508 = $102 | 0;
    $103 = HEAP32[$car508 >> 2] | 0;
    _codegen($s, $103, $val);
    $104 = HEAP32[$car507 >> 2] | 0;
    $cdr510 = $104 + 4 | 0;
    $105 = HEAP32[$cdr510 >> 2] | 0;
    _codegen($s, $105, $val);
    $inc511 = $len_01076 + 1 | 0;
    $cdr512 = $tree_addr_21077 + 4 | 0;
    $106 = HEAP32[$cdr512 >> 2] | 0;
    $tobool505 = ($106 | 0) == 0;
    if ($tobool505) {
      $len_0_lcssa = $inc511;
      label = 89;
      break;
    } else {
      $len_01076 = $inc511;
      $tree_addr_21077 = $106;
      label = 88;
      break;
    }
   case 89:
    $tobool514 = ($val | 0) == 0;
    if ($tobool514) {
      label = 320;
      break;
    } else {
      label = 90;
      break;
    }
   case 90:
    $mul = $len_0_lcssa << 1;
    $sp516 = $s + 56 | 0;
    $107 = HEAP32[$sp516 >> 2] | 0;
    $sub517 = $107 - $mul | 0;
    HEAP32[$sp516 >> 2] = $sub517;
    $shl520 = $sub517 << 23;
    $and519 = $sub517 << 14;
    $shl524 = $and519 & 8372224;
    $and526 = $len_0_lcssa << 7;
    $shl527 = $and526 & 16256;
    $or521 = $shl527 | $shl520;
    $or525 = $or521 | $shl524;
    $or528 = $or525 | 63;
    _genop($s, $or528);
    _push_($s);
    label = 320;
    break;
   case 91:
    _codegen($s, $3, 1);
    label = 320;
    break;
   case 92:
    $cdr532 = $3 + 4 | 0;
    $108 = HEAP32[$cdr532 >> 2] | 0;
    _codegen($s, $108, 1);
    $sp533 = $s + 56 | 0;
    $109 = HEAP32[$sp533 >> 2] | 0;
    $dec534 = $109 - 1 | 0;
    HEAP32[$sp533 >> 2] = $dec534;
    $car535 = $3 | 0;
    $110 = HEAP32[$car535 >> 2] | 0;
    _gen_assignment($s, $110, $dec534, $val);
    label = 320;
    break;
   case 93:
    $cdr544 = $3 + 4 | 0;
    $111 = HEAP32[$cdr544 >> 2] | 0;
    $sp547 = $s + 56 | 0;
    $112 = HEAP32[$sp547 >> 2] | 0;
    $car548 = $111 | 0;
    $113 = HEAP32[$car548 >> 2] | 0;
    $cmp549 = ($113 | 0) == 34;
    if ($cmp549) {
      label = 94;
      break;
    } else {
      label = 110;
      break;
    }
   case 94:
    $cdr552 = $111 + 4 | 0;
    $114 = HEAP32[$cdr552 >> 2] | 0;
    $call553 = _nosplat($114) | 0;
    $tobool554 = ($call553 | 0) == 0;
    if ($tobool554) {
      label = 110;
      break;
    } else {
      label = 95;
      break;
    }
   case 95:
    $t_01092 = HEAP32[$cdr552 >> 2] | 0;
    $tobool5581093 = ($t_01092 | 0) == 0;
    if ($tobool5581093) {
      $len539_0_lcssa = 0;
      label = 97;
      break;
    } else {
      $len539_01094 = 0;
      $t_01095 = $t_01092;
      label = 96;
      break;
    }
   case 96:
    $car560 = $t_01095 | 0;
    $115 = HEAP32[$car560 >> 2] | 0;
    _codegen($s, $115, 1);
    $inc561 = $len539_01094 + 1 | 0;
    $cdr562 = $t_01095 + 4 | 0;
    $t_0 = HEAP32[$cdr562 >> 2] | 0;
    $tobool558 = ($t_0 | 0) == 0;
    if ($tobool558) {
      $len539_0_lcssa = $inc561;
      label = 97;
      break;
    } else {
      $len539_01094 = $inc561;
      $t_01095 = $t_0;
      label = 96;
      break;
    }
   case 97:
    $car564 = $3 | 0;
    $116 = HEAP32[$car564 >> 2] | 0;
    $car565 = $116 | 0;
    $117 = HEAP32[$car565 >> 2] | 0;
    $tobool566 = ($117 | 0) == 0;
    if ($tobool566) {
      $n541_1 = 0;
      label = 99;
      break;
    } else {
      $t_11088 = $117;
      $n541_01089 = 0;
      label = 98;
      break;
    }
   case 98:
    $car572 = $t_11088 | 0;
    $118 = HEAP32[$car572 >> 2] | 0;
    $add573 = $n541_01089 + $112 | 0;
    _gen_assignment($s, $118, $add573, 0);
    $inc574 = $n541_01089 + 1 | 0;
    $cdr575 = $t_11088 + 4 | 0;
    $119 = HEAP32[$cdr575 >> 2] | 0;
    $tobool570 = ($119 | 0) == 0;
    if ($tobool570) {
      $n541_1 = $inc574;
      label = 99;
      break;
    } else {
      $t_11088 = $119;
      $n541_01089 = $inc574;
      label = 98;
      break;
    }
   case 99:
    $cdr578 = $116 + 4 | 0;
    $120 = HEAP32[$cdr578 >> 2] | 0;
    $tobool579 = ($120 | 0) == 0;
    if ($tobool579) {
      label = 108;
      break;
    } else {
      label = 100;
      break;
    }
   case 100:
    $cdr581 = $120 + 4 | 0;
    $121 = HEAP32[$cdr581 >> 2] | 0;
    $tobool582 = ($121 | 0) == 0;
    if ($tobool582) {
      $post_1 = 0;
      label = 103;
      break;
    } else {
      label = 101;
      break;
    }
   case 101:
    $car585 = $121 | 0;
    $p_01082 = HEAP32[$car585 >> 2] | 0;
    $tobool5871083 = ($p_01082 | 0) == 0;
    if ($tobool5871083) {
      $post_1 = 0;
      label = 103;
      break;
    } else {
      $post_01084 = 0;
      $p_01085 = $p_01082;
      label = 102;
      break;
    }
   case 102:
    $inc589 = $post_01084 + 1 | 0;
    $cdr590 = $p_01085 + 4 | 0;
    $p_0 = HEAP32[$cdr590 >> 2] | 0;
    $tobool587 = ($p_0 | 0) == 0;
    if ($tobool587) {
      $post_1 = $inc589;
      label = 103;
      break;
    } else {
      $post_01084 = $inc589;
      $p_01085 = $p_0;
      label = 102;
      break;
    }
   case 103:
    $car593 = $120 | 0;
    $122 = HEAP32[$car593 >> 2] | 0;
    $tobool594 = ($122 | 0) == 0;
    if ($tobool594) {
      $n541_2 = $n541_1;
      label = 105;
      break;
    } else {
      label = 104;
      break;
    }
   case 104:
    $sub597 = $len539_0_lcssa - $post_1 | 0;
    $sub598 = $sub597 - $n541_1 | 0;
    $123 = HEAP32[$sp547 >> 2] | 0;
    $shl601 = $123 << 23;
    $add603 = $n541_1 + $112 | 0;
    $and604 = $add603 << 14;
    $shl605 = $and604 & 8372224;
    $and607 = $sub598 << 7;
    $shl608 = $and607 & 16256;
    $or602 = $shl605 | $shl608;
    $or606 = $or602 | $shl601;
    $or609 = $or606 | 55;
    _genop($s, $or609);
    $124 = HEAP32[$car593 >> 2] | 0;
    $125 = HEAP32[$sp547 >> 2] | 0;
    _gen_assignment($s, $124, $125, 0);
    $n541_2 = $sub597;
    label = 105;
    break;
   case 105:
    $126 = HEAP32[$cdr581 >> 2] | 0;
    $tobool615 = ($126 | 0) == 0;
    if ($tobool615) {
      label = 108;
      break;
    } else {
      label = 106;
      break;
    }
   case 106:
    $car618 = $126 | 0;
    $127 = HEAP32[$car618 >> 2] | 0;
    $tobool619 = ($127 | 0) != 0;
    $cmp6241079 = ($n541_2 | 0) < ($len539_0_lcssa | 0);
    $or_cond1135 = $tobool619 & $cmp6241079;
    if ($or_cond1135) {
      $t_21080 = $127;
      $n541_31081 = $n541_2;
      label = 107;
      break;
    } else {
      label = 108;
      break;
    }
   case 107:
    $car627 = $t_21080 | 0;
    $128 = HEAP32[$car627 >> 2] | 0;
    $add628 = $n541_31081 + $112 | 0;
    _gen_assignment($s, $128, $add628, 0);
    $cdr629 = $t_21080 + 4 | 0;
    $129 = HEAP32[$cdr629 >> 2] | 0;
    $inc630 = $n541_31081 + 1 | 0;
    $exitcond = ($inc630 | 0) == ($len539_0_lcssa | 0);
    if ($exitcond) {
      label = 108;
      break;
    } else {
      $t_21080 = $129;
      $n541_31081 = $inc630;
      label = 107;
      break;
    }
   case 108:
    $130 = HEAP32[$sp547 >> 2] | 0;
    $sub635 = $130 - $len539_0_lcssa | 0;
    HEAP32[$sp547 >> 2] = $sub635;
    $tobool636 = ($val | 0) == 0;
    if ($tobool636) {
      label = 320;
      break;
    } else {
      label = 109;
      break;
    }
   case 109:
    $shl639 = $112 << 23;
    $and638 = $112 << 14;
    $shl642 = $and638 & 8372224;
    $and644 = $len539_0_lcssa << 7;
    $shl645 = $and644 & 16256;
    $or640 = $shl639 | $shl642;
    $or643 = $or640 | $shl645;
    $or646 = $or643 | 55;
    _genop($s, $or646);
    _push_($s);
    label = 320;
    break;
   case 110:
    _codegen($s, $111, 1);
    $car649 = $3 | 0;
    $131 = HEAP32[$car649 >> 2] | 0;
    _gen_vmassignment($s, $131, $112, $val);
    $tobool650 = ($val | 0) == 0;
    if ($tobool650) {
      label = 111;
      break;
    } else {
      label = 320;
      break;
    }
   case 111:
    $132 = HEAP32[$sp547 >> 2] | 0;
    $dec653 = $132 - 1 | 0;
    HEAP32[$sp547 >> 2] = $dec653;
    label = 320;
    break;
   case 112:
    $cdr659 = $3 + 4 | 0;
    $133 = HEAP32[$cdr659 >> 2] | 0;
    $car660 = $133 | 0;
    $134 = HEAP32[$car660 >> 2] | 0;
    $135 = $134;
    $conv661 = $135 & 65535;
    $mrb665 = $s | 0;
    $136 = HEAP32[$mrb665 >> 2] | 0;
    $call666 = _mrb_sym2name_len($136, $conv661, $len663) | 0;
    $car669 = $3 | 0;
    $137 = HEAP32[$car669 >> 2] | 0;
    _codegen($s, $137, 1);
    $138 = HEAP32[$len663 >> 2] | 0;
    $cmp670 = ($138 | 0) == 2;
    if ($cmp670) {
      label = 113;
      break;
    } else {
      label = 119;
      break;
    }
   case 113:
    $139 = HEAP8[$call666] | 0;
    $cmp675 = $139 << 24 >> 24 == 124;
    if ($cmp675) {
      label = 114;
      break;
    } else {
      $141 = $139;
      label = 116;
      break;
    }
   case 114:
    $arrayidx678 = $call666 + 1 | 0;
    $140 = HEAP8[$arrayidx678] | 0;
    $cmp680 = $140 << 24 >> 24 == 124;
    if ($cmp680) {
      label = 118;
      break;
    } else {
      label = 115;
      break;
    }
   case 115:
    $_pr = HEAP8[$call666] | 0;
    $141 = $_pr;
    label = 116;
    break;
   case 116:
    $cmp684 = $141 << 24 >> 24 == 38;
    if ($cmp684) {
      label = 117;
      break;
    } else {
      label = 119;
      break;
    }
   case 117:
    $arrayidx687 = $call666 + 1 | 0;
    $142 = HEAP8[$arrayidx687] | 0;
    $cmp689 = $142 << 24 >> 24 == 38;
    if ($cmp689) {
      label = 118;
      break;
    } else {
      label = 119;
      break;
    }
   case 118:
    $sp694 = $s + 56 | 0;
    $143 = HEAP32[$sp694 >> 2] | 0;
    $dec695 = $143 - 1 | 0;
    HEAP32[$sp694 >> 2] = $dec695;
    $call696 = _new_label($s) | 0;
    $144 = HEAP8[$call666] | 0;
    $cmp699 = $144 << 24 >> 24 == 124;
    $cond701 = $cmp699 ? 24 : 25;
    $145 = HEAP32[$sp694 >> 2] | 0;
    $shl705 = $145 << 23;
    $or706 = $shl705 | $cond701;
    $or707 = $or706 | 4194176;
    _genop($s, $or707);
    $146 = HEAP32[$cdr659 >> 2] | 0;
    $cdr709 = $146 + 4 | 0;
    $147 = HEAP32[$cdr709 >> 2] | 0;
    $car710 = $147 | 0;
    $148 = HEAP32[$car710 >> 2] | 0;
    _codegen($s, $148, 1);
    $149 = HEAP32[$sp694 >> 2] | 0;
    $dec712 = $149 - 1 | 0;
    HEAP32[$sp694 >> 2] = $dec712;
    $150 = HEAP32[$car669 >> 2] | 0;
    _gen_assignment($s, $150, $dec712, $val);
    _dispatch($s, $call696);
    label = 320;
    break;
   case 119:
    $151 = HEAP32[$cdr659 >> 2] | 0;
    $cdr717 = $151 + 4 | 0;
    $152 = HEAP32[$cdr717 >> 2] | 0;
    $car718 = $152 | 0;
    $153 = HEAP32[$car718 >> 2] | 0;
    _codegen($s, $153, 1);
    $sp719 = $s + 56 | 0;
    $154 = HEAP32[$sp719 >> 2] | 0;
    $dec722 = $154 - 2 | 0;
    HEAP32[$sp719 >> 2] = $dec722;
    $call723 = _new_msym($s, $conv661) | 0;
    $155 = HEAP32[$len663 >> 2] | 0;
    $cmp724 = ($155 | 0) == 1;
    if ($cmp724) {
      label = 120;
      break;
    } else {
      $166 = $155;
      label = 135;
      break;
    }
   case 120:
    $156 = HEAP8[$call666] | 0;
    $cmp729 = $156 << 24 >> 24 == 43;
    if ($cmp729) {
      label = 121;
      break;
    } else {
      label = 122;
      break;
    }
   case 121:
    $157 = HEAP32[$sp719 >> 2] | 0;
    $shl734 = $157 << 23;
    $and736 = $call723 << 14;
    $shl737 = $and736 & 8372224;
    $or735 = $shl737 | $shl734;
    $or739 = $or735 | 172;
    _genop_peep($s, $or739, $val);
    label = 148;
    break;
   case 122:
    $_pr1032 = HEAP32[$len663 >> 2] | 0;
    $cmp741 = ($_pr1032 | 0) == 1;
    if ($cmp741) {
      label = 123;
      break;
    } else {
      label = 134;
      break;
    }
   case 123:
    $158 = HEAP8[$call666] | 0;
    $cmp746 = $158 << 24 >> 24 == 45;
    if ($cmp746) {
      label = 124;
      break;
    } else {
      label = 125;
      break;
    }
   case 124:
    $159 = HEAP32[$sp719 >> 2] | 0;
    $shl751 = $159 << 23;
    $and753 = $call723 << 14;
    $shl754 = $and753 & 8372224;
    $or752 = $shl754 | $shl751;
    $or756 = $or752 | 174;
    _genop_peep($s, $or756, $val);
    label = 148;
    break;
   case 125:
    $_pr1034_pr = HEAP32[$len663 >> 2] | 0;
    $cmp758 = ($_pr1034_pr | 0) == 1;
    if ($cmp758) {
      label = 126;
      break;
    } else {
      $166 = $_pr1034_pr;
      label = 135;
      break;
    }
   case 126:
    $160 = HEAP8[$call666] | 0;
    $cmp763 = $160 << 24 >> 24 == 42;
    if ($cmp763) {
      label = 127;
      break;
    } else {
      label = 128;
      break;
    }
   case 127:
    $161 = HEAP32[$sp719 >> 2] | 0;
    $shl768 = $161 << 23;
    $and770 = $call723 << 14;
    $shl771 = $and770 & 8372224;
    $or769 = $shl771 | $shl768;
    $or773 = $or769 | 176;
    _genop($s, $or773);
    label = 148;
    break;
   case 128:
    $_pr1036_pr = HEAP32[$len663 >> 2] | 0;
    $cmp775 = ($_pr1036_pr | 0) == 1;
    if ($cmp775) {
      label = 129;
      break;
    } else {
      label = 134;
      break;
    }
   case 129:
    $162 = HEAP8[$call666] | 0;
    $cmp780 = $162 << 24 >> 24 == 47;
    if ($cmp780) {
      label = 130;
      break;
    } else {
      label = 131;
      break;
    }
   case 130:
    $163 = HEAP32[$sp719 >> 2] | 0;
    $shl785 = $163 << 23;
    $and787 = $call723 << 14;
    $shl788 = $and787 & 8372224;
    $or786 = $shl788 | $shl785;
    $or790 = $or786 | 177;
    _genop($s, $or790);
    label = 148;
    break;
   case 131:
    $_pr1038_pr_pr = HEAP32[$len663 >> 2] | 0;
    $cmp792 = ($_pr1038_pr_pr | 0) == 1;
    if ($cmp792) {
      label = 132;
      break;
    } else {
      $166 = $_pr1038_pr_pr;
      label = 135;
      break;
    }
   case 132:
    $164 = HEAP8[$call666] | 0;
    $cmp797 = $164 << 24 >> 24 == 60;
    if ($cmp797) {
      label = 133;
      break;
    } else {
      label = 134;
      break;
    }
   case 133:
    $165 = HEAP32[$sp719 >> 2] | 0;
    $shl802 = $165 << 23;
    $and804 = $call723 << 14;
    $shl805 = $and804 & 8372224;
    $or803 = $shl805 | $shl802;
    $or807 = $or803 | 179;
    _genop($s, $or807);
    label = 148;
    break;
   case 134:
    $_pr1040 = HEAP32[$len663 >> 2] | 0;
    $166 = $_pr1040;
    label = 135;
    break;
   case 135:
    $cmp809 = ($166 | 0) == 2;
    if ($cmp809) {
      label = 136;
      break;
    } else {
      label = 139;
      break;
    }
   case 136:
    $167 = HEAP8[$call666] | 0;
    $cmp814 = $167 << 24 >> 24 == 60;
    if ($cmp814) {
      label = 137;
      break;
    } else {
      label = 139;
      break;
    }
   case 137:
    $arrayidx817 = $call666 + 1 | 0;
    $168 = HEAP8[$arrayidx817] | 0;
    $cmp819 = $168 << 24 >> 24 == 61;
    if ($cmp819) {
      label = 138;
      break;
    } else {
      label = 139;
      break;
    }
   case 138:
    $169 = HEAP32[$sp719 >> 2] | 0;
    $shl824 = $169 << 23;
    $and826 = $call723 << 14;
    $shl827 = $and826 & 8372224;
    $or825 = $shl827 | $shl824;
    $or829 = $or825 | 180;
    _genop($s, $or829);
    label = 148;
    break;
   case 139:
    $170 = HEAP32[$len663 >> 2] | 0;
    $cmp831 = ($170 | 0) == 1;
    if ($cmp831) {
      label = 140;
      break;
    } else {
      $173 = $170;
      label = 143;
      break;
    }
   case 140:
    $171 = HEAP8[$call666] | 0;
    $cmp836 = $171 << 24 >> 24 == 62;
    if ($cmp836) {
      label = 141;
      break;
    } else {
      label = 142;
      break;
    }
   case 141:
    $172 = HEAP32[$sp719 >> 2] | 0;
    $shl841 = $172 << 23;
    $and843 = $call723 << 14;
    $shl844 = $and843 & 8372224;
    $or842 = $shl844 | $shl841;
    $or846 = $or842 | 181;
    _genop($s, $or846);
    label = 148;
    break;
   case 142:
    $_pr1041 = HEAP32[$len663 >> 2] | 0;
    $173 = $_pr1041;
    label = 143;
    break;
   case 143:
    $cmp848 = ($173 | 0) == 2;
    if ($cmp848) {
      label = 144;
      break;
    } else {
      label = 147;
      break;
    }
   case 144:
    $174 = HEAP8[$call666] | 0;
    $cmp853 = $174 << 24 >> 24 == 62;
    if ($cmp853) {
      label = 145;
      break;
    } else {
      label = 147;
      break;
    }
   case 145:
    $arrayidx856 = $call666 + 1 | 0;
    $175 = HEAP8[$arrayidx856] | 0;
    $cmp858 = $175 << 24 >> 24 == 61;
    if ($cmp858) {
      label = 146;
      break;
    } else {
      label = 147;
      break;
    }
   case 146:
    $176 = HEAP32[$sp719 >> 2] | 0;
    $shl863 = $176 << 23;
    $and865 = $call723 << 14;
    $shl866 = $and865 & 8372224;
    $or864 = $shl866 | $shl863;
    $or868 = $or864 | 182;
    _genop($s, $or868);
    label = 148;
    break;
   case 147:
    $177 = HEAP32[$sp719 >> 2] | 0;
    $shl872 = $177 << 23;
    $and874 = $call723 << 14;
    $shl875 = $and874 & 8372224;
    $or873 = $shl875 | $shl872;
    $or877 = $or873 | 160;
    _genop($s, $or877);
    label = 148;
    break;
   case 148:
    $178 = HEAP32[$car669 >> 2] | 0;
    $179 = HEAP32[$sp719 >> 2] | 0;
    _gen_assignment($s, $178, $179, $val);
    label = 320;
    break;
   case 149:
    _push_($s);
    $tobool893 = ($3 | 0) == 0;
    if ($tobool893) {
      $sendv_01043 = 0;
      $n890_01046 = 0;
      label = 155;
      break;
    } else {
      label = 150;
      break;
    }
   case 150:
    $car896 = $3 | 0;
    $180 = HEAP32[$car896 >> 2] | 0;
    $tobool897 = ($180 | 0) == 0;
    if ($tobool897) {
      $sendv_01044 = 0;
      $n890_01047 = 0;
      label = 153;
      break;
    } else {
      label = 151;
      break;
    }
   case 151:
    $call899 = _gen_values($s, $180, 1) | 0;
    $cmp900 = ($call899 | 0) < 0;
    if ($cmp900) {
      label = 152;
      break;
    } else {
      $sendv_01044 = 0;
      $n890_01047 = $call899;
      label = 153;
      break;
    }
   case 152:
    _push_($s);
    $sendv_01044 = 1;
    $n890_01047 = 1;
    label = 153;
    break;
   case 153:
    $cdr908 = $3 + 4 | 0;
    $181 = HEAP32[$cdr908 >> 2] | 0;
    $tobool909 = ($181 | 0) == 0;
    if ($tobool909) {
      $sendv_01043 = $sendv_01044;
      $n890_01046 = $n890_01047;
      label = 155;
      break;
    } else {
      label = 154;
      break;
    }
   case 154:
    _codegen($s, $181, 1);
    $sp912 = $s + 56 | 0;
    $182 = HEAP32[$sp912 >> 2] | 0;
    $dec913 = $182 - 1 | 0;
    HEAP32[$sp912 >> 2] = $dec913;
    $sendv_01042 = $sendv_01044;
    $n890_01045 = $n890_01047;
    label = 156;
    break;
   case 155:
    $sp915 = $s + 56 | 0;
    $183 = HEAP32[$sp915 >> 2] | 0;
    $shl917 = $183 << 23;
    $or918 = $shl917 | 5;
    _genop($s, $or918);
    $sendv_01042 = $sendv_01043;
    $n890_01045 = $n890_01046;
    label = 156;
    break;
   case 156:
    $sp921 = $s + 56 | 0;
    $184 = HEAP32[$sp921 >> 2] | 0;
    $add920_neg = $n890_01045 ^ -1;
    $sub922 = $184 + $add920_neg | 0;
    HEAP32[$sp921 >> 2] = $sub922;
    $tobool923 = ($sendv_01042 | 0) == 0;
    $shl928 = $sub922 << 23;
    $n890_01045_op = $n890_01045 << 7;
    $n890_01045_op_op = $n890_01045_op & 16256;
    $n890_01045_op_op_op = $n890_01045_op_op | 36;
    $or929 = $tobool923 ? $n890_01045_op_op_op : 16292;
    $or932 = $or929 | $shl928;
    _genop($s, $or932);
    $tobool933 = ($val | 0) == 0;
    if ($tobool933) {
      label = 320;
      break;
    } else {
      label = 157;
      break;
    }
   case 157:
    _push_($s);
    label = 320;
    break;
   case 158:
    _push_($s);
    $s2_0 = $s;
    $lv_0 = 0;
    label = 159;
    break;
   case 159:
    $185 = $s2_0 + 69 | 0;
    $186 = HEAP8[$185] | 0;
    $lnot = $186 << 24 >> 24 > -1;
    if ($lnot) {
      label = 160;
      break;
    } else {
      label = 161;
      break;
    }
   case 160:
    $inc943 = $lv_0 + 1 | 0;
    $prev = $s2_0 + 48 | 0;
    $187 = HEAP32[$prev >> 2] | 0;
    $tobool944 = ($187 | 0) == 0;
    if ($tobool944) {
      $ainfo_0 = 0;
      $lv_11050 = $inc943;
      label = 163;
      break;
    } else {
      $s2_0 = $187;
      $lv_0 = $inc943;
      label = 159;
      break;
    }
   case 161:
    $tobool948 = ($s2_0 | 0) == 0;
    if ($tobool948) {
      $ainfo_0 = 0;
      $lv_11050 = $lv_0;
      label = 163;
      break;
    } else {
      label = 162;
      break;
    }
   case 162:
    $188 = $s2_0 + 68 | 0;
    $189 = $188;
    $190 = HEAP32[$189 >> 2] | 0;
    $191 = $190 << 4;
    $phitmp1027 = $191 & 65520;
    $ainfo_0 = $phitmp1027;
    $lv_11050 = $lv_0;
    label = 163;
    break;
   case 163:
    $sp953 = $s + 56 | 0;
    $192 = HEAP32[$sp953 >> 2] | 0;
    $shl955 = $192 << 23;
    $and958 = $lv_11050 & 15;
    $and960 = $ainfo_0 | $and958;
    $shl961 = $and960 << 7;
    $or956 = $shl961 | $shl955;
    $or962 = $or956 | 37;
    _genop($s, $or962);
    $tobool963 = ($3 | 0) == 0;
    if ($tobool963) {
      label = 166;
      break;
    } else {
      label = 164;
      break;
    }
   case 164:
    $cdr965 = $3 + 4 | 0;
    $193 = HEAP32[$cdr965 >> 2] | 0;
    $tobool966 = ($193 | 0) == 0;
    if ($tobool966) {
      label = 166;
      break;
    } else {
      label = 165;
      break;
    }
   case 165:
    _push_($s);
    $194 = HEAP32[$cdr965 >> 2] | 0;
    _codegen($s, $194, 1);
    $195 = HEAP32[$sp953 >> 2] | 0;
    $sub970 = $195 - 2 | 0;
    HEAP32[$sp953 >> 2] = $sub970;
    label = 166;
    break;
   case 166:
    $196 = HEAP32[$sp953 >> 2] | 0;
    $dec973 = $196 - 1 | 0;
    HEAP32[$sp953 >> 2] = $dec973;
    $shl976 = $dec973 << 23;
    $or978 = $shl976 | 16292;
    _genop($s, $or978);
    $tobool979 = ($val | 0) == 0;
    if ($tobool979) {
      label = 320;
      break;
    } else {
      label = 167;
      break;
    }
   case 167:
    _push_($s);
    label = 320;
    break;
   case 168:
    $tobool983 = ($3 | 0) == 0;
    if ($tobool983) {
      label = 170;
      break;
    } else {
      label = 169;
      break;
    }
   case 169:
    _codegen($s, $3, 1);
    $sp985 = $s + 56 | 0;
    $197 = HEAP32[$sp985 >> 2] | 0;
    $dec986 = $197 - 1 | 0;
    HEAP32[$sp985 >> 2] = $dec986;
    label = 171;
    break;
   case 170:
    $sp988 = $s + 56 | 0;
    $198 = HEAP32[$sp988 >> 2] | 0;
    $shl990 = $198 << 23;
    $or991 = $shl990 | 5;
    _genop($s, $or991);
    label = 171;
    break;
   case 171:
    $loop = $s + 72 | 0;
    $199 = HEAP32[$loop >> 2] | 0;
    $tobool993 = ($199 | 0) == 0;
    $sp995 = $s + 56 | 0;
    $200 = HEAP32[$sp995 >> 2] | 0;
    $shl997 = $200 << 23;
    if ($tobool993) {
      label = 173;
      break;
    } else {
      label = 172;
      break;
    }
   case 172:
    $or999 = $shl997 | 32809;
    _genop($s, $or999);
    label = 174;
    break;
   case 173:
    $or998 = $shl997 | 41;
    _genop_peep($s, $or998, 0);
    label = 174;
    break;
   case 174:
    $tobool1006 = ($val | 0) == 0;
    if ($tobool1006) {
      label = 320;
      break;
    } else {
      label = 175;
      break;
    }
   case 175:
    _push_($s);
    label = 320;
    break;
   case 176:
    $201 = $s21011_0 + 69 | 0;
    $202 = HEAP8[$201] | 0;
    $lnot1024 = $202 << 24 >> 24 > -1;
    if ($lnot1024) {
      label = 177;
      break;
    } else {
      label = 178;
      break;
    }
   case 177:
    $inc1026 = $lv1013_0 + 1 | 0;
    $prev1027 = $s21011_0 + 48 | 0;
    $203 = HEAP32[$prev1027 >> 2] | 0;
    $tobool1028 = ($203 | 0) == 0;
    if ($tobool1028) {
      $ainfo1015_0 = 0;
      $lv1013_11052 = $inc1026;
      label = 180;
      break;
    } else {
      $s21011_0 = $203;
      $lv1013_0 = $inc1026;
      label = 176;
      break;
    }
   case 178:
    $tobool1032 = ($s21011_0 | 0) == 0;
    if ($tobool1032) {
      $ainfo1015_0 = 0;
      $lv1013_11052 = $lv1013_0;
      label = 180;
      break;
    } else {
      label = 179;
      break;
    }
   case 179:
    $204 = $s21011_0 + 68 | 0;
    $205 = $204;
    $206 = HEAP32[$205 >> 2] | 0;
    $207 = $206 << 4;
    $phitmp1025 = $207 & 65520;
    $ainfo1015_0 = $phitmp1025;
    $lv1013_11052 = $lv1013_0;
    label = 180;
    break;
   case 180:
    $sp1038 = $s + 56 | 0;
    $208 = HEAP32[$sp1038 >> 2] | 0;
    $shl1040 = $208 << 23;
    $and1043 = $lv1013_11052 & 15;
    $and1045 = $ainfo1015_0 | $and1043;
    $shl1046 = $and1045 << 7;
    $or1041 = $shl1046 | $shl1040;
    $or1047 = $or1041 | 43;
    _genop($s, $or1047);
    _push_($s);
    $tobool1048 = ($3 | 0) == 0;
    if ($tobool1048) {
      $n1017_0 = 0;
      $sendv1019_0 = 0;
      label = 183;
      break;
    } else {
      label = 181;
      break;
    }
   case 181:
    $call1050 = _gen_values($s, $3, 1) | 0;
    $cmp1051 = ($call1050 | 0) < 0;
    if ($cmp1051) {
      label = 182;
      break;
    } else {
      $n1017_0 = $call1050;
      $sendv1019_0 = $call1050;
      label = 183;
      break;
    }
   case 182:
    _push_($s);
    $n1017_0 = 1;
    $sendv1019_0 = 127;
    label = 183;
    break;
   case 183:
    $209 = HEAP32[$sp1038 >> 2] | 0;
    $add1056_neg = $n1017_0 ^ -1;
    $sub1058 = $209 + $add1056_neg | 0;
    HEAP32[$sp1038 >> 2] = $sub1058;
    $shl1064 = $sub1058 << 23;
    $mrb1066 = $s | 0;
    $210 = HEAP32[$mrb1066 >> 2] | 0;
    $call1067 = _mrb_intern2($210, 98360, 4) | 0;
    $call1068 = _new_msym($s, $call1067) | 0;
    $and1069 = $call1068 << 14;
    $shl1070 = $and1069 & 8372224;
    $and1072 = $sendv1019_0 << 7;
    $shl1073 = $and1072 & 16256;
    $or1065 = $shl1073 | $shl1064;
    $or1071 = $or1065 | $shl1070;
    $or1074 = $or1071 | 32;
    _genop($s, $or1074);
    $tobool1075 = ($val | 0) == 0;
    if ($tobool1075) {
      label = 320;
      break;
    } else {
      label = 184;
      break;
    }
   case 184:
    _push_($s);
    label = 320;
    break;
   case 185:
    _loop_break($s, $3);
    $tobool1079 = ($val | 0) == 0;
    if ($tobool1079) {
      label = 320;
      break;
    } else {
      label = 186;
      break;
    }
   case 186:
    _push_($s);
    label = 320;
    break;
   case 187:
    $loop1083 = $s + 72 | 0;
    $211 = HEAP32[$loop1083 >> 2] | 0;
    $tobool1084 = ($211 | 0) == 0;
    if ($tobool1084) {
      label = 188;
      break;
    } else {
      label = 189;
      break;
    }
   case 188:
    _raise_error($s, 95844);
    label = 197;
    break;
   case 189:
    $type1088 = $211 | 0;
    $212 = HEAP32[$type1088 >> 2] | 0;
    $cmp1089 = ($212 | 0) == 0;
    if ($cmp1089) {
      label = 190;
      break;
    } else {
      label = 193;
      break;
    }
   case 190:
    $ensure_level1092 = $s + 76 | 0;
    $213 = HEAP32[$ensure_level1092 >> 2] | 0;
    $ensure_level1094 = $211 + 20 | 0;
    $214 = HEAP32[$ensure_level1094 >> 2] | 0;
    $cmp1095 = ($213 | 0) > ($214 | 0);
    if ($cmp1095) {
      label = 191;
      break;
    } else {
      label = 192;
      break;
    }
   case 191:
    $sub1101 = $213 - $214 | 0;
    $shl1103 = $sub1101 << 23;
    $or1104 = $shl1103 | 31;
    _genop_peep($s, $or1104, 0);
    label = 192;
    break;
   case 192:
    _codegen($s, $3, 0);
    $215 = HEAP32[$loop1083 >> 2] | 0;
    $pc11107 = $215 + 4 | 0;
    $216 = HEAP32[$pc11107 >> 2] | 0;
    $pc1108 = $s + 60 | 0;
    $217 = HEAP32[$pc1108 >> 2] | 0;
    $sub1109 = $216 - $217 | 0;
    $add1110 = $sub1109 << 7;
    $and1111 = $add1110 + 4194176 | 0;
    $shl1112 = $and1111 & 8388480;
    $or1113 = $shl1112 | 23;
    _genop($s, $or1113);
    label = 197;
    break;
   case 193:
    $tobool1115 = ($3 | 0) == 0;
    if ($tobool1115) {
      label = 195;
      break;
    } else {
      label = 194;
      break;
    }
   case 194:
    _codegen($s, $3, 1);
    $sp1117 = $s + 56 | 0;
    $218 = HEAP32[$sp1117 >> 2] | 0;
    $dec1118 = $218 - 1 | 0;
    HEAP32[$sp1117 >> 2] = $dec1118;
    label = 196;
    break;
   case 195:
    $sp1120 = $s + 56 | 0;
    $219 = HEAP32[$sp1120 >> 2] | 0;
    $shl1122 = $219 << 23;
    $or1123 = $shl1122 | 5;
    _genop($s, $or1123);
    label = 196;
    break;
   case 196:
    $sp1125 = $s + 56 | 0;
    $220 = HEAP32[$sp1125 >> 2] | 0;
    $shl1127 = $220 << 23;
    $or1128 = $shl1127 | 41;
    _genop_peep($s, $or1128, 0);
    label = 197;
    break;
   case 197:
    $tobool1131 = ($val | 0) == 0;
    if ($tobool1131) {
      label = 320;
      break;
    } else {
      label = 198;
      break;
    }
   case 198:
    _push_($s);
    label = 320;
    break;
   case 199:
    $loop1135 = $s + 72 | 0;
    $221 = HEAP32[$loop1135 >> 2] | 0;
    $tobool1136 = ($221 | 0) == 0;
    if ($tobool1136) {
      label = 200;
      break;
    } else {
      label = 201;
      break;
    }
   case 200:
    _raise_error($s, 94712);
    label = 320;
    break;
   case 201:
    $ensure_level1139 = $s + 76 | 0;
    $222 = HEAP32[$ensure_level1139 >> 2] | 0;
    $ensure_level1141 = $221 + 20 | 0;
    $223 = HEAP32[$ensure_level1141 >> 2] | 0;
    $cmp1142 = ($222 | 0) > ($223 | 0);
    if ($cmp1142) {
      label = 202;
      break;
    } else {
      label = 203;
      break;
    }
   case 202:
    $sub1148 = $222 - $223 | 0;
    $shl1150 = $sub1148 << 23;
    $or1151 = $shl1150 | 31;
    _genop_peep($s, $or1151, 0);
    label = 203;
    break;
   case 203:
    $224 = HEAP32[$loop1135 >> 2] | 0;
    $pc21154 = $224 + 8 | 0;
    $225 = HEAP32[$pc21154 >> 2] | 0;
    $pc1155 = $s + 60 | 0;
    $226 = HEAP32[$pc1155 >> 2] | 0;
    $sub1156 = $225 - $226 | 0;
    $add1157 = $sub1156 << 7;
    $and1158 = $add1157 + 4194176 | 0;
    $shl1159 = $and1158 & 8388480;
    $or1160 = $shl1159 | 23;
    _genop($s, $or1160);
    label = 320;
    break;
   case 204:
    $loop1164 = $s + 72 | 0;
    $227 = HEAP32[$loop1164 >> 2] | 0;
    $tobool1165 = ($227 | 0) == 0;
    if ($tobool1165) {
      label = 205;
      break;
    } else {
      $n1172_01106 = 0;
      $lp1169_01107 = $227;
      label = 206;
      break;
    }
   case 205:
    _raise_error($s, 93764);
    label = 320;
    break;
   case 206:
    $type1175 = $lp1169_01107 | 0;
    $228 = HEAP32[$type1175 >> 2] | 0;
    $cmp1176 = ($228 | 0) == 4;
    if ($cmp1176) {
      label = 209;
      break;
    } else {
      label = 207;
      break;
    }
   case 207:
    $cmp1180 = ($228 | 0) == 3;
    $inc1183 = $cmp1180 & 1;
    $inc1183_n1172_0 = $inc1183 + $n1172_01106 | 0;
    $prev1185 = $lp1169_01107 + 24 | 0;
    $229 = HEAP32[$prev1185 >> 2] | 0;
    $tobool1174 = ($229 | 0) == 0;
    if ($tobool1174) {
      label = 208;
      break;
    } else {
      $n1172_01106 = $inc1183_n1172_0;
      $lp1169_01107 = $229;
      label = 206;
      break;
    }
   case 208:
    _raise_error($s, 93764);
    label = 320;
    break;
   case 209:
    $cmp1190 = ($n1172_01106 | 0) > 0;
    if ($cmp1190) {
      $n1172_21102 = $n1172_01106;
      label = 210;
      break;
    } else {
      label = 211;
      break;
    }
   case 210:
    $dec1194 = $n1172_21102 - 1 | 0;
    _genop_peep($s, 8388636, 0);
    $tobool1195 = ($dec1194 | 0) == 0;
    if ($tobool1195) {
      label = 211;
      break;
    } else {
      $n1172_21102 = $dec1194;
      label = 210;
      break;
    }
   case 211:
    $ensure_level1199 = $s + 76 | 0;
    $230 = HEAP32[$ensure_level1199 >> 2] | 0;
    $ensure_level1200 = $lp1169_01107 + 20 | 0;
    $231 = HEAP32[$ensure_level1200 >> 2] | 0;
    $cmp1201 = ($230 | 0) > ($231 | 0);
    if ($cmp1201) {
      label = 212;
      break;
    } else {
      label = 213;
      break;
    }
   case 212:
    $sub1206 = $230 - $231 | 0;
    $shl1208 = $sub1206 << 23;
    $or1209 = $shl1208 | 31;
    _genop_peep($s, $or1209, 0);
    label = 213;
    break;
   case 213:
    $pc11211 = $lp1169_01107 + 4 | 0;
    $232 = HEAP32[$pc11211 >> 2] | 0;
    $pc1212 = $s + 60 | 0;
    $233 = HEAP32[$pc1212 >> 2] | 0;
    $sub1213 = $232 - $233 | 0;
    $add1214 = $sub1213 << 7;
    $and1215 = $add1214 + 4194176 | 0;
    $shl1216 = $and1215 & 8388480;
    $or1217 = $shl1216 | 23;
    _genop($s, $or1217);
    label = 320;
    break;
   case 214:
    $tobool1221 = ($val | 0) == 0;
    if ($tobool1221) {
      label = 320;
      break;
    } else {
      label = 215;
      break;
    }
   case 215:
    $234 = $3;
    $conv1225 = $234 & 65535;
    $call1226 = _lv_idx($s, $conv1225) | 0;
    $cmp1227 = ($call1226 | 0) > 0;
    if ($cmp1227) {
      label = 216;
      break;
    } else {
      $lv1239_0 = 0;
      $s_pn = $s;
      label = 217;
      break;
    }
   case 216:
    $sp1230 = $s + 56 | 0;
    $235 = HEAP32[$sp1230 >> 2] | 0;
    $shl1232 = $235 << 23;
    $and1234 = $call1226 << 14;
    $shl1235 = $and1234 & 8372224;
    $or1233 = $shl1235 | $shl1232;
    $or1236 = $or1233 | 1;
    _genop($s, $or1236);
    label = 220;
    break;
   case 217:
    $up_0_in = $s_pn + 48 | 0;
    $up_0 = HEAP32[$up_0_in >> 2] | 0;
    $tobool1243 = ($up_0 | 0) == 0;
    if ($tobool1243) {
      label = 220;
      break;
    } else {
      label = 218;
      break;
    }
   case 218:
    $call1246 = _lv_idx($up_0, $conv1225) | 0;
    $cmp1247 = ($call1246 | 0) > 0;
    $inc1261 = $lv1239_0 + 1 | 0;
    if ($cmp1247) {
      label = 219;
      break;
    } else {
      $lv1239_0 = $inc1261;
      $s_pn = $up_0;
      label = 217;
      break;
    }
   case 219:
    $sp1250 = $s + 56 | 0;
    $236 = HEAP32[$sp1250 >> 2] | 0;
    $shl1252 = $236 << 23;
    $and1254 = $call1246 << 14;
    $shl1255 = $and1254 & 8372224;
    $and1257 = $lv1239_0 << 7;
    $shl1258 = $and1257 & 16256;
    $or1253 = $shl1258 | $shl1255;
    $or1256 = $or1253 | $shl1252;
    $or1259 = $or1256 | 21;
    _genop($s, $or1259);
    label = 220;
    break;
   case 220:
    _push_($s);
    label = 320;
    break;
   case 221:
    $237 = $3;
    $conv1269 = $237 & 65535;
    $call1270 = _new_sym900($s, $conv1269) | 0;
    $sp1271 = $s + 56 | 0;
    $238 = HEAP32[$sp1271 >> 2] | 0;
    $shl1273 = $238 << 23;
    $and1275 = $call1270 << 7;
    $shl1276 = $and1275 & 8388480;
    $or1274 = $shl1276 | $shl1273;
    $or1277 = $or1274 | 9;
    _genop($s, $or1277);
    _push_($s);
    label = 320;
    break;
   case 222:
    $239 = $3;
    $conv1281 = $239 & 65535;
    $call1282 = _new_sym900($s, $conv1281) | 0;
    $sp1283 = $s + 56 | 0;
    $240 = HEAP32[$sp1283 >> 2] | 0;
    $shl1285 = $240 << 23;
    $and1287 = $call1282 << 7;
    $shl1288 = $and1287 & 8388480;
    $or1286 = $shl1288 | $shl1285;
    $or1289 = $or1286 | 13;
    _genop($s, $or1289);
    _push_($s);
    label = 320;
    break;
   case 223:
    $241 = $3;
    $conv1293 = $241 & 65535;
    $call1294 = _new_sym900($s, $conv1293) | 0;
    $sp1295 = $s + 56 | 0;
    $242 = HEAP32[$sp1295 >> 2] | 0;
    $shl1297 = $242 << 23;
    $and1299 = $call1294 << 7;
    $shl1300 = $and1299 & 8388480;
    $or1298 = $shl1300 | $shl1297;
    $or1301 = $or1298 | 15;
    _genop($s, $or1301);
    _push_($s);
    label = 320;
    break;
   case 224:
    $243 = $3;
    $conv1305 = $243 & 65535;
    $call1306 = _new_sym900($s, $conv1305) | 0;
    $sp1307 = $s + 56 | 0;
    $244 = HEAP32[$sp1307 >> 2] | 0;
    $shl1309 = $244 << 23;
    $and1311 = $call1306 << 7;
    $shl1312 = $and1311 & 8388480;
    $or1310 = $shl1312 | $shl1309;
    $or1313 = $or1310 | 17;
    _genop($s, $or1313);
    _push_($s);
    label = 320;
    break;
   case 225:
    _codegen($s, $3, 1);
    label = 320;
    break;
   case 226:
    HEAP16[$buf >> 1] = 36;
    $245 = $3;
    $conv1320 = $245 & 255;
    $arrayidx1321 = $tmpcast + 1 | 0;
    HEAP8[$arrayidx1321] = $conv1320;
    $mrb1322 = $s | 0;
    $246 = HEAP32[$mrb1322 >> 2] | 0;
    $arraydecay = $buf;
    _mrb_str_new($str, $246, $arraydecay, 2);
    $247 = HEAP32[$mrb1322 >> 2] | 0;
    $call1325 = _mrb_intern_str($247, $str) | 0;
    $call1326 = _new_sym900($s, $call1325) | 0;
    $sp1327 = $s + 56 | 0;
    $248 = HEAP32[$sp1327 >> 2] | 0;
    $shl1329 = $248 << 23;
    $and1331 = $call1326 << 7;
    $shl1332 = $and1331 & 8388480;
    $or1330 = $shl1332 | $shl1329;
    $or1333 = $or1330 | 9;
    _genop($s, $or1333);
    _push_($s);
    label = 320;
    break;
   case 227:
    $mrb1339 = $s | 0;
    $249 = HEAP32[$mrb1339 >> 2] | 0;
    $250 = $3;
    _mrb_fixnum_value901($fix, $250);
    _mrb_str_buf_new($str1342, $249, 4);
    _mrb_str_buf_cat($tmp1343, $249, $str1342, 93032, 1);
    _mrb_fixnum_to_str($agg_tmp, $249, $fix, 10);
    _mrb_str_buf_append($tmp1344, $249, $str1342, $agg_tmp);
    $call1345 = _mrb_intern_str($249, $str1342) | 0;
    $call1346 = _new_sym900($s, $call1345) | 0;
    $sp1347 = $s + 56 | 0;
    $251 = HEAP32[$sp1347 >> 2] | 0;
    $shl1349 = $251 << 23;
    $and1351 = $call1346 << 7;
    $shl1352 = $and1351 & 8388480;
    $or1350 = $shl1352 | $shl1349;
    $or1353 = $or1350 | 9;
    _genop($s, $or1353);
    _push_($s);
    label = 320;
    break;
   case 228:
    _codegen($s, $3, 1);
    label = 320;
    break;
   case 229:
    $tobool1357 = ($val | 0) == 0;
    if ($tobool1357) {
      label = 320;
      break;
    } else {
      label = 230;
      break;
    }
   case 230:
    $car1361 = $3 | 0;
    $252 = HEAP32[$car1361 >> 2] | 0;
    $253 = $252;
    $cdr1363 = $3 + 4 | 0;
    $254 = HEAP32[$cdr1363 >> 2] | 0;
    $car1364 = $254 | 0;
    $255 = HEAP32[$car1364 >> 2] | 0;
    $256 = $255;
    $call1368 = _readint_mrb_int($s, $253, $256, 0, $overflow) | 0;
    $257 = HEAP32[$overflow >> 2] | 0;
    $tobool1369 = ($257 | 0) == 0;
    if ($tobool1369) {
      label = 232;
      break;
    } else {
      label = 231;
      break;
    }
   case 231:
    $call1372 = +_readint_float($s, $253, $256);
    _mrb_float_value902($agg_tmp1374, $call1372);
    $call1375 = _new_lit($s, $agg_tmp1374) | 0;
    $sp1376 = $s + 56 | 0;
    $258 = HEAP32[$sp1376 >> 2] | 0;
    $shl1378 = $258 << 23;
    $and1380 = $call1375 << 7;
    $shl1381 = $and1380 & 8388480;
    $or1379 = $shl1381 | $shl1378;
    $or1382 = $or1379 | 2;
    _genop($s, $or1382);
    label = 236;
    break;
   case 232:
    $call1368_off = $call1368 + 32766 | 0;
    $259 = $call1368_off >>> 0 < 65533;
    if ($259) {
      label = 233;
      break;
    } else {
      label = 234;
      break;
    }
   case 233:
    $sp1390 = $s + 56 | 0;
    $260 = HEAP32[$sp1390 >> 2] | 0;
    $shl1392 = $260 << 23;
    $add1394 = $call1368 << 7;
    $and1395 = $add1394 + 4194176 | 0;
    $shl1396 = $and1395 & 8388480;
    $or1393 = $shl1396 | $shl1392;
    $or1397 = $or1393 | 3;
    $co_0 = $or1397;
    label = 235;
    break;
   case 234:
    _mrb_fixnum_value901($agg_tmp1401, $call1368);
    $call1402 = _new_lit($s, $agg_tmp1401) | 0;
    $sp1403 = $s + 56 | 0;
    $261 = HEAP32[$sp1403 >> 2] | 0;
    $shl1405 = $261 << 23;
    $and1407 = $call1402 << 7;
    $shl1408 = $and1407 & 8388480;
    $or1406 = $shl1408 | $shl1405;
    $or1409 = $or1406 | 2;
    $co_0 = $or1409;
    label = 235;
    break;
   case 235:
    _genop($s, $co_0);
    label = 236;
    break;
   case 236:
    _push_($s);
    label = 320;
    break;
   case 237:
    $tobool1414 = ($val | 0) == 0;
    if ($tobool1414) {
      label = 320;
      break;
    } else {
      label = 238;
      break;
    }
   case 238:
    $262 = $3;
    $call1420 = +_strtod($262, 0);
    _mrb_float_value902($agg_tmp1423, $call1420);
    $call1424 = _new_lit($s, $agg_tmp1423) | 0;
    $sp1425 = $s + 56 | 0;
    $263 = HEAP32[$sp1425 >> 2] | 0;
    $shl1427 = $263 << 23;
    $and1429 = $call1424 << 7;
    $shl1430 = $and1429 & 8388480;
    $or1428 = $shl1430 | $shl1427;
    $or1431 = $or1428 | 2;
    _genop($s, $or1431);
    _push_($s);
    label = 320;
    break;
   case 239:
    $car1434 = $3 | 0;
    $264 = HEAP32[$car1434 >> 2] | 0;
    $265 = $264;
    $cdr1435 = $3 + 4 | 0;
    $266 = HEAP32[$cdr1435 >> 2] | 0;
    if (($265 | 0) == 51) {
      label = 240;
      break;
    } else if (($265 | 0) == 50) {
      label = 241;
      break;
    } else {
      label = 248;
      break;
    }
   case 240:
    $267 = $266;
    $call1441 = +_strtod($267, 0);
    $sub1445 = -0.0 - $call1441;
    _mrb_float_value902($agg_tmp1444, $sub1445);
    $call1446 = _new_lit($s, $agg_tmp1444) | 0;
    $sp1447 = $s + 56 | 0;
    $268 = HEAP32[$sp1447 >> 2] | 0;
    $shl1449 = $268 << 23;
    $and1451 = $call1446 << 7;
    $shl1452 = $and1451 & 8388480;
    $or1450 = $shl1452 | $shl1449;
    $or1453 = $or1450 | 2;
    _genop($s, $or1453);
    _push_($s);
    label = 320;
    break;
   case 241:
    $car1457 = $266 | 0;
    $269 = HEAP32[$car1457 >> 2] | 0;
    $270 = $269;
    $cdr1460 = $266 + 4 | 0;
    $271 = HEAP32[$cdr1460 >> 2] | 0;
    $car1461 = $271 | 0;
    $272 = HEAP32[$car1461 >> 2] | 0;
    $273 = $272;
    $call1468 = _readint_mrb_int($s, $270, $273, 1, $overflow1467) | 0;
    $274 = HEAP32[$overflow1467 >> 2] | 0;
    $tobool1469 = ($274 | 0) == 0;
    if ($tobool1469) {
      label = 243;
      break;
    } else {
      label = 242;
      break;
    }
   case 242:
    $call1473 = +_readint_float($s, $270, $273);
    $sub1477 = -0.0 - $call1473;
    _mrb_float_value902($agg_tmp1476, $sub1477);
    $call1478 = _new_lit($s, $agg_tmp1476) | 0;
    $sp1479 = $s + 56 | 0;
    $275 = HEAP32[$sp1479 >> 2] | 0;
    $shl1481 = $275 << 23;
    $and1483 = $call1478 << 7;
    $shl1484 = $and1483 & 8388480;
    $or1482 = $shl1484 | $shl1481;
    $or1485 = $or1482 | 2;
    _genop($s, $or1485);
    label = 247;
    break;
   case 243:
    $call1468_off = $call1468 + 32766 | 0;
    $276 = $call1468_off >>> 0 < 65533;
    if ($276) {
      label = 244;
      break;
    } else {
      label = 245;
      break;
    }
   case 244:
    $sp1493 = $s + 56 | 0;
    $277 = HEAP32[$sp1493 >> 2] | 0;
    $shl1495 = $277 << 23;
    $add1497 = $call1468 << 7;
    $and1498 = $add1497 + 4194176 | 0;
    $shl1499 = $and1498 & 8388480;
    $or1496 = $shl1499 | $shl1495;
    $or1500 = $or1496 | 3;
    $co1465_0 = $or1500;
    label = 246;
    break;
   case 245:
    _mrb_fixnum_value901($agg_tmp1504, $call1468);
    $call1505 = _new_lit($s, $agg_tmp1504) | 0;
    $sp1506 = $s + 56 | 0;
    $278 = HEAP32[$sp1506 >> 2] | 0;
    $shl1508 = $278 << 23;
    $and1510 = $call1505 << 7;
    $shl1511 = $and1510 & 8388480;
    $or1509 = $shl1511 | $shl1508;
    $or1512 = $or1509 | 2;
    $co1465_0 = $or1512;
    label = 246;
    break;
   case 246:
    _genop($s, $co1465_0);
    label = 247;
    break;
   case 247:
    _push_($s);
    label = 320;
    break;
   case 248:
    $mrb1517 = $s | 0;
    $279 = HEAP32[$mrb1517 >> 2] | 0;
    $call1518 = _mrb_intern2($279, 92228, 1) | 0;
    $call1519 = _new_msym($s, $call1518) | 0;
    $sp1520 = $s + 56 | 0;
    $280 = HEAP32[$sp1520 >> 2] | 0;
    $shl1522 = $280 << 23;
    $or1523 = $shl1522 | 3;
    _genop($s, $or1523);
    _push_($s);
    _codegen($s, $266, 1);
    $281 = HEAP32[$sp1520 >> 2] | 0;
    $dec1527 = $281 - 2 | 0;
    HEAP32[$sp1520 >> 2] = $dec1527;
    $shl1530 = $dec1527 << 23;
    $and1532 = $call1519 << 14;
    $shl1533 = $and1532 & 8372224;
    $or1531 = $shl1533 | $shl1530;
    $or1535 = $or1531 | 302;
    _genop($s, $or1535);
    label = 320;
    break;
   case 249:
    $tobool1537 = ($val | 0) == 0;
    if ($tobool1537) {
      label = 320;
      break;
    } else {
      label = 250;
      break;
    }
   case 250:
    $car1541 = $3 | 0;
    $282 = HEAP32[$car1541 >> 2] | 0;
    $283 = $282;
    $cdr1544 = $3 + 4 | 0;
    $284 = HEAP32[$cdr1544 >> 2] | 0;
    $285 = $284;
    $mrb1546 = $s | 0;
    $286 = HEAP32[$mrb1546 >> 2] | 0;
    $call1547 = _mrb_gc_arena_save($286) | 0;
    _mrb_str_new($agg_tmp1550, $286, $283, $285);
    $call1552 = _new_lit($s, $agg_tmp1550) | 0;
    $287 = HEAP32[$mrb1546 >> 2] | 0;
    _mrb_gc_arena_restore($287, $call1547);
    $sp1554 = $s + 56 | 0;
    $288 = HEAP32[$sp1554 >> 2] | 0;
    $shl1556 = $288 << 23;
    $and1558 = $call1552 << 7;
    $shl1559 = $and1558 & 8388480;
    $or1557 = $shl1559 | $shl1556;
    $or1560 = $or1557 | 61;
    _genop($s, $or1560);
    _push_($s);
    label = 320;
    break;
   case 251:
    $289 = $3 + 16 | 0;
    $290 = HEAP32[$289 >> 2] | 0;
    $tree_addr_3 = $290;
    label = 252;
    break;
   case 252:
    $tobool1564 = ($val | 0) == 0;
    if ($tobool1564) {
      label = 253;
      break;
    } else {
      label = 254;
      break;
    }
   case 253:
    $tobool15931110 = ($tree_addr_3 | 0) == 0;
    if ($tobool15931110) {
      label = 320;
      break;
    } else {
      $n1591_01111 = $tree_addr_3;
      label = 257;
      break;
    }
   case 254:
    $car1568 = $tree_addr_3 | 0;
    $291 = HEAP32[$car1568 >> 2] | 0;
    _codegen($s, $291, 1);
    $n1567_0_in1113 = $tree_addr_3 + 4 | 0;
    $n1567_01114 = HEAP32[$n1567_0_in1113 >> 2] | 0;
    $tobool15711115 = ($n1567_01114 | 0) == 0;
    if ($tobool15711115) {
      label = 320;
      break;
    } else {
      label = 255;
      break;
    }
   case 255:
    $sp1574 = $s + 56 | 0;
    $n1567_01116 = $n1567_01114;
    label = 256;
    break;
   case 256:
    $car1573 = $n1567_01116 | 0;
    $292 = HEAP32[$car1573 >> 2] | 0;
    _codegen($s, $292, 1);
    $293 = HEAP32[$sp1574 >> 2] | 0;
    $dec1577 = $293 - 2 | 0;
    HEAP32[$sp1574 >> 2] = $dec1577;
    $shl1580 = $dec1577 << 23;
    $add1583 = $293 << 14;
    $and1584 = $add1583 + 8372224 | 0;
    $shl1585 = $and1584 & 8372224;
    $or1581 = $shl1580 | $shl1585;
    $or1586 = $or1581 | 62;
    _genop_peep($s, $or1586, 1);
    _push_($s);
    $n1567_0_in = $n1567_01116 + 4 | 0;
    $n1567_0 = HEAP32[$n1567_0_in >> 2] | 0;
    $tobool1571 = ($n1567_0 | 0) == 0;
    if ($tobool1571) {
      label = 320;
      break;
    } else {
      $n1567_01116 = $n1567_0;
      label = 256;
      break;
    }
   case 257:
    $car1595 = $n1591_01111 | 0;
    $294 = HEAP32[$car1595 >> 2] | 0;
    $car1596 = $294 | 0;
    $295 = HEAP32[$car1596 >> 2] | 0;
    $cmp1597 = ($295 | 0) == 55;
    if ($cmp1597) {
      label = 259;
      break;
    } else {
      label = 258;
      break;
    }
   case 258:
    _codegen($s, $294, 0);
    label = 259;
    break;
   case 259:
    $cdr1602 = $n1591_01111 + 4 | 0;
    $296 = HEAP32[$cdr1602 >> 2] | 0;
    $tobool1593 = ($296 | 0) == 0;
    if ($tobool1593) {
      label = 320;
      break;
    } else {
      $n1591_01111 = $296;
      label = 257;
      break;
    }
   case 260:
    _gen_literal_array($s, $3, 0, $val);
    label = 320;
    break;
   case 261:
    _gen_literal_array($s, $3, 1, $val);
    label = 320;
    break;
   case 262:
    $tobool1608 = ($val | 0) == 0;
    if ($tobool1608) {
      label = 320;
      break;
    } else {
      label = 263;
      break;
    }
   case 263:
    $car1612 = $3 | 0;
    $297 = HEAP32[$car1612 >> 2] | 0;
    $298 = $297;
    $cdr1615 = $3 + 4 | 0;
    $299 = HEAP32[$cdr1615 >> 2] | 0;
    $300 = $299;
    $mrb1618 = $s | 0;
    $301 = HEAP32[$mrb1618 >> 2] | 0;
    $call1619 = _mrb_gc_arena_save($301) | 0;
    $call1623 = _mrb_intern2($301, 111120, 6) | 0;
    $call1624 = _new_sym900($s, $call1623) | 0;
    $302 = HEAP32[$mrb1618 >> 2] | 0;
    _mrb_str_new($agg_tmp1627, $302, $298, $300);
    $call1629 = _new_lit($s, $agg_tmp1627) | 0;
    $sp1630 = $s + 56 | 0;
    $303 = HEAP32[$sp1630 >> 2] | 0;
    $shl1632 = $303 << 23;
    $or1633 = $shl1632 | 66;
    _genop($s, $or1633);
    $304 = HEAP32[$sp1630 >> 2] | 0;
    $shl1636 = $304 << 23;
    $and1638 = $call1624 << 7;
    $shl1639 = $and1638 & 8388480;
    $or1637 = $shl1639 | $shl1636;
    $or1640 = $or1637 | 19;
    _genop($s, $or1640);
    _push_($s);
    $305 = HEAP32[$sp1630 >> 2] | 0;
    $shl1643 = $305 << 23;
    $and1645 = $call1629 << 7;
    $shl1646 = $and1645 & 8388480;
    $or1644 = $shl1646 | $shl1643;
    $or1647 = $or1644 | 61;
    _genop($s, $or1647);
    $306 = HEAP32[$sp1630 >> 2] | 0;
    $dec1649 = $306 - 1 | 0;
    HEAP32[$sp1630 >> 2] = $dec1649;
    $307 = HEAP32[$mrb1618 >> 2] | 0;
    $call1651 = _mrb_intern2($307, 110436, 1) | 0;
    $call1652 = _new_sym900($s, $call1651) | 0;
    $308 = HEAP32[$sp1630 >> 2] | 0;
    $shl1655 = $308 << 23;
    $and1657 = $call1652 << 14;
    $shl1658 = $and1657 & 8372224;
    $or1656 = $shl1658 | $shl1655;
    $or1660 = $or1656 | 160;
    _genop($s, $or1660);
    $309 = HEAP32[$mrb1618 >> 2] | 0;
    _mrb_gc_arena_restore($309, $call1619);
    _push_($s);
    label = 320;
    break;
   case 264:
    $tobool1664 = ($val | 0) == 0;
    if ($tobool1664) {
      label = 320;
      break;
    } else {
      label = 265;
      break;
    }
   case 265:
    $car1667 = $3 | 0;
    $310 = HEAP32[$car1667 >> 2] | 0;
    $311 = $310;
    $cdr1669 = $3 + 4 | 0;
    $312 = HEAP32[$cdr1669 >> 2] | 0;
    $313 = $312;
    $mrb1672 = $s | 0;
    $314 = HEAP32[$mrb1672 >> 2] | 0;
    $call1673 = _mrb_gc_arena_save($314) | 0;
    $call1677 = _mrb_intern903($314) | 0;
    $call1678 = _new_sym900($s, $call1677) | 0;
    $315 = HEAP32[$mrb1672 >> 2] | 0;
    $call1683 = _strlen($311 | 0) | 0;
    _mrb_str_new($agg_tmp1681, $315, $311, $call1683);
    $call1684 = _new_lit($s, $agg_tmp1681) | 0;
    $sp1686 = $s + 56 | 0;
    $316 = HEAP32[$sp1686 >> 2] | 0;
    $shl1688 = $316 << 23;
    $or1689 = $shl1688 | 66;
    _genop($s, $or1689);
    $317 = HEAP32[$sp1686 >> 2] | 0;
    $shl1692 = $317 << 23;
    $and1694 = $call1678 << 7;
    $shl1695 = $and1694 & 8388480;
    $or1693 = $shl1695 | $shl1692;
    $or1696 = $or1693 | 19;
    _genop($s, $or1696);
    _push_($s);
    $318 = HEAP32[$sp1686 >> 2] | 0;
    $shl1699 = $318 << 23;
    $and1701 = $call1684 << 7;
    $shl1702 = $and1701 & 8388480;
    $or1700 = $shl1702 | $shl1699;
    $or1703 = $or1700 | 61;
    _genop($s, $or1703);
    $tobool1704 = ($312 | 0) == 0;
    if ($tobool1704) {
      $argc_0 = 160;
      label = 267;
      break;
    } else {
      label = 266;
      break;
    }
   case 266:
    _push_($s);
    $319 = HEAP32[$mrb1672 >> 2] | 0;
    $call1708 = _strlen($313 | 0) | 0;
    _mrb_str_new($agg_tmp1706, $319, $313, $call1708);
    $call1709 = _new_lit($s, $agg_tmp1706) | 0;
    $320 = HEAP32[$sp1686 >> 2] | 0;
    $shl1712 = $320 << 23;
    $and1714 = $call1709 << 7;
    $shl1715 = $and1714 & 8388480;
    $or1713 = $shl1715 | $shl1712;
    $or1716 = $or1713 | 61;
    _genop($s, $or1716);
    $321 = HEAP32[$sp1686 >> 2] | 0;
    $dec1719 = $321 - 1 | 0;
    HEAP32[$sp1686 >> 2] = $dec1719;
    $argc_0 = 288;
    label = 267;
    break;
   case 267:
    $322 = HEAP32[$sp1686 >> 2] | 0;
    $dec1722 = $322 - 1 | 0;
    HEAP32[$sp1686 >> 2] = $dec1722;
    $323 = HEAP32[$mrb1672 >> 2] | 0;
    $call1724 = _mrb_intern2($323, 109356, 7) | 0;
    $call1725 = _new_sym900($s, $call1724) | 0;
    $324 = HEAP32[$sp1686 >> 2] | 0;
    $shl1728 = $324 << 23;
    $and1730 = $call1725 << 14;
    $shl1731 = $and1730 & 8372224;
    $or1732 = $argc_0 | $shl1731;
    $or1735 = $or1732 | $shl1728;
    _genop($s, $or1735);
    $325 = HEAP32[$mrb1672 >> 2] | 0;
    _mrb_gc_arena_restore($325, $call1673);
    _push_($s);
    label = 320;
    break;
   case 268:
    $tobool1739 = ($val | 0) == 0;
    $car1743 = $3 | 0;
    $326 = HEAP32[$car1743 >> 2] | 0;
    if ($tobool1739) {
      label = 269;
      break;
    } else {
      label = 270;
      break;
    }
   case 269:
    $tobool18651118 = ($326 | 0) == 0;
    if ($tobool18651118) {
      label = 320;
      break;
    } else {
      $n1862_01119 = $326;
      label = 277;
      break;
    }
   case 270:
    $mrb1746 = $s | 0;
    $327 = HEAP32[$mrb1746 >> 2] | 0;
    $call1747 = _mrb_gc_arena_save($327) | 0;
    $call1751 = _mrb_intern903($327) | 0;
    $call1752 = _new_sym900($s, $call1751) | 0;
    $sp1759 = $s + 56 | 0;
    $328 = HEAP32[$sp1759 >> 2] | 0;
    $shl1761 = $328 << 23;
    $or1762 = $shl1761 | 66;
    _genop($s, $or1762);
    $329 = HEAP32[$sp1759 >> 2] | 0;
    $shl1765 = $329 << 23;
    $and1767 = $call1752 << 7;
    $shl1768 = $and1767 & 8388480;
    $or1766 = $shl1768 | $shl1765;
    $or1769 = $or1766 | 19;
    _genop($s, $or1769);
    _push_($s);
    $car1770 = $326 | 0;
    $330 = HEAP32[$car1770 >> 2] | 0;
    _codegen($s, $330, 1);
    $n1742_0_in1120 = $326 + 4 | 0;
    $n1742_01121 = HEAP32[$n1742_0_in1120 >> 2] | 0;
    $tobool17731122 = ($n1742_01121 | 0) == 0;
    if ($tobool17731122) {
      label = 272;
      break;
    } else {
      $n1742_01123 = $n1742_01121;
      label = 271;
      break;
    }
   case 271:
    $car1775 = $n1742_01123 | 0;
    $331 = HEAP32[$car1775 >> 2] | 0;
    _codegen($s, $331, 1);
    $332 = HEAP32[$sp1759 >> 2] | 0;
    $dec1779 = $332 - 2 | 0;
    HEAP32[$sp1759 >> 2] = $dec1779;
    $shl1782 = $dec1779 << 23;
    $add1785 = $332 << 14;
    $and1786 = $add1785 + 8372224 | 0;
    $shl1787 = $and1786 & 8372224;
    $or1783 = $shl1782 | $shl1787;
    $or1788 = $or1783 | 62;
    _genop_peep($s, $or1788, 1);
    _push_($s);
    $n1742_0_in = $n1742_01123 + 4 | 0;
    $n1742_0 = HEAP32[$n1742_0_in >> 2] | 0;
    $tobool1773 = ($n1742_0 | 0) == 0;
    if ($tobool1773) {
      label = 272;
      break;
    } else {
      $n1742_01123 = $n1742_0;
      label = 271;
      break;
    }
   case 272:
    $cdr1791 = $3 + 4 | 0;
    $333 = HEAP32[$cdr1791 >> 2] | 0;
    $cdr1792 = $333 + 4 | 0;
    $334 = HEAP32[$cdr1792 >> 2] | 0;
    $car1793 = $334 | 0;
    $335 = HEAP32[$car1793 >> 2] | 0;
    $tobool1794 = ($335 | 0) == 0;
    if ($tobool1794) {
      label = 274;
      break;
    } else {
      label = 273;
      break;
    }
   case 273:
    $336 = $335;
    $337 = HEAP32[$mrb1746 >> 2] | 0;
    $call1799 = _strlen($336 | 0) | 0;
    _mrb_str_new($agg_tmp1797, $337, $336, $call1799);
    $call1800 = _new_lit($s, $agg_tmp1797) | 0;
    $338 = HEAP32[$car1743 >> 2] | 0;
    _codegen($s, $338, 1);
    $339 = HEAP32[$sp1759 >> 2] | 0;
    $shl1804 = $339 << 23;
    $and1806 = $call1800 << 7;
    $shl1807 = $and1806 & 8388480;
    $or1805 = $shl1807 | $shl1804;
    $or1808 = $or1805 | 61;
    _genop($s, $or1808);
    $340 = HEAP32[$sp1759 >> 2] | 0;
    $dec1810 = $340 - 1 | 0;
    HEAP32[$sp1759 >> 2] = $dec1810;
    $shl1813 = $dec1810 << 23;
    $and1817 = $340 << 14;
    $shl1818 = $and1817 & 8372224;
    $or1814 = $shl1818 | $shl1813;
    $or1819 = $or1814 | 62;
    _genop_peep($s, $or1819, 1);
    label = 274;
    break;
   case 274:
    $cdr1821 = $334 + 4 | 0;
    $341 = HEAP32[$cdr1821 >> 2] | 0;
    $tobool1822 = ($341 | 0) == 0;
    if ($tobool1822) {
      $argc1754_0 = 160;
      label = 276;
      break;
    } else {
      label = 275;
      break;
    }
   case 275:
    $342 = $341;
    _push_($s);
    $343 = HEAP32[$mrb1746 >> 2] | 0;
    $call1831 = _strlen($342 | 0) | 0;
    _mrb_str_new($agg_tmp1829, $343, $342, $call1831);
    $call1832 = _new_lit($s, $agg_tmp1829) | 0;
    $344 = HEAP32[$sp1759 >> 2] | 0;
    $shl1835 = $344 << 23;
    $and1837 = $call1832 << 7;
    $shl1838 = $and1837 & 8388480;
    $or1836 = $shl1838 | $shl1835;
    $or1839 = $or1836 | 61;
    _genop($s, $or1839);
    $345 = HEAP32[$sp1759 >> 2] | 0;
    $dec1842 = $345 - 1 | 0;
    HEAP32[$sp1759 >> 2] = $dec1842;
    $argc1754_0 = 288;
    label = 276;
    break;
   case 276:
    $346 = HEAP32[$sp1759 >> 2] | 0;
    $dec1845 = $346 - 1 | 0;
    HEAP32[$sp1759 >> 2] = $dec1845;
    $347 = HEAP32[$mrb1746 >> 2] | 0;
    $call1847 = _mrb_intern2($347, 109356, 7) | 0;
    $call1848 = _new_sym900($s, $call1847) | 0;
    $348 = HEAP32[$sp1759 >> 2] | 0;
    $shl1851 = $348 << 23;
    $and1853 = $call1848 << 14;
    $shl1854 = $and1853 & 8372224;
    $or1855 = $argc1754_0 | $shl1854;
    $or1858 = $or1855 | $shl1851;
    _genop($s, $or1858);
    $349 = HEAP32[$mrb1746 >> 2] | 0;
    _mrb_gc_arena_restore($349, $call1747);
    _push_($s);
    label = 320;
    break;
   case 277:
    $car1867 = $n1862_01119 | 0;
    $350 = HEAP32[$car1867 >> 2] | 0;
    $car1868 = $350 | 0;
    $351 = HEAP32[$car1868 >> 2] | 0;
    $cmp1869 = ($351 | 0) == 55;
    if ($cmp1869) {
      label = 279;
      break;
    } else {
      label = 278;
      break;
    }
   case 278:
    _codegen($s, $350, 0);
    label = 279;
    break;
   case 279:
    $cdr1874 = $n1862_01119 + 4 | 0;
    $352 = HEAP32[$cdr1874 >> 2] | 0;
    $tobool1865 = ($352 | 0) == 0;
    if ($tobool1865) {
      label = 320;
      break;
    } else {
      $n1862_01119 = $352;
      label = 277;
      break;
    }
   case 280:
    $tobool1878 = ($val | 0) == 0;
    if ($tobool1878) {
      label = 320;
      break;
    } else {
      label = 281;
      break;
    }
   case 281:
    $353 = $3;
    $conv1882 = $353 & 65535;
    $call1883 = _new_sym900($s, $conv1882) | 0;
    $sp1884 = $s + 56 | 0;
    $354 = HEAP32[$sp1884 >> 2] | 0;
    $shl1886 = $354 << 23;
    $and1888 = $call1883 << 7;
    $shl1889 = $and1888 & 8388480;
    $or1887 = $shl1889 | $shl1886;
    $or1890 = $or1887 | 4;
    _genop($s, $or1890);
    _push_($s);
    label = 320;
    break;
   case 282:
    _codegen($s, $3, $val);
    $tobool1893 = ($val | 0) == 0;
    if ($tobool1893) {
      label = 320;
      break;
    } else {
      label = 283;
      break;
    }
   case 283:
    _gen_send_intern($s);
    label = 320;
    break;
   case 284:
    $tobool1897 = ($val | 0) == 0;
    if ($tobool1897) {
      label = 320;
      break;
    } else {
      label = 285;
      break;
    }
   case 285:
    $sp1899 = $s + 56 | 0;
    $355 = HEAP32[$sp1899 >> 2] | 0;
    $shl1901 = $355 << 23;
    $or1902 = $shl1901 | 6;
    _genop($s, $or1902);
    _push_($s);
    label = 320;
    break;
   case 286:
    $tobool1905 = ($val | 0) == 0;
    if ($tobool1905) {
      label = 320;
      break;
    } else {
      label = 287;
      break;
    }
   case 287:
    $sp1907 = $s + 56 | 0;
    $356 = HEAP32[$sp1907 >> 2] | 0;
    $shl1909 = $356 << 23;
    $or1910 = $shl1909 | 5;
    _genop($s, $or1910);
    _push_($s);
    label = 320;
    break;
   case 288:
    $tobool1913 = ($val | 0) == 0;
    if ($tobool1913) {
      label = 320;
      break;
    } else {
      label = 289;
      break;
    }
   case 289:
    $sp1915 = $s + 56 | 0;
    $357 = HEAP32[$sp1915 >> 2] | 0;
    $shl1917 = $357 << 23;
    $or1918 = $shl1917 | 7;
    _genop($s, $or1918);
    _push_($s);
    label = 320;
    break;
   case 290:
    $tobool1921 = ($val | 0) == 0;
    if ($tobool1921) {
      label = 320;
      break;
    } else {
      label = 291;
      break;
    }
   case 291:
    $sp1923 = $s + 56 | 0;
    $358 = HEAP32[$sp1923 >> 2] | 0;
    $shl1925 = $358 << 23;
    $or1926 = $shl1925 | 8;
    _genop($s, $or1926);
    _push_($s);
    label = 320;
    break;
   case 292:
    $car1930 = $3 | 0;
    $359 = HEAP32[$car1930 >> 2] | 0;
    $360 = $359;
    $conv1931 = $360 & 65535;
    $call1932 = _new_msym($s, $conv1931) | 0;
    $cdr1934 = $3 + 4 | 0;
    $361 = HEAP32[$cdr1934 >> 2] | 0;
    $362 = $361;
    $conv1935 = $362 & 65535;
    $call1936 = _new_msym($s, $conv1935) | 0;
    $mrb1938 = $s | 0;
    $363 = HEAP32[$mrb1938 >> 2] | 0;
    $call1939 = _mrb_intern2($363, 108960, 12) | 0;
    $call1940 = _new_msym($s, $call1939) | 0;
    $sp1941 = $s + 56 | 0;
    $364 = HEAP32[$sp1941 >> 2] | 0;
    $shl1943 = $364 << 23;
    $or1944 = $shl1943 | 72;
    _genop($s, $or1944);
    _push_($s);
    $365 = HEAP32[$sp1941 >> 2] | 0;
    $shl1947 = $365 << 23;
    $and1949 = $call1932 << 7;
    $shl1950 = $and1949 & 8388480;
    $or1948 = $shl1950 | $shl1947;
    $or1951 = $or1948 | 4;
    _genop($s, $or1951);
    _push_($s);
    $366 = HEAP32[$sp1941 >> 2] | 0;
    $shl1954 = $366 << 23;
    $and1956 = $call1936 << 7;
    $shl1957 = $and1956 & 8388480;
    $or1955 = $shl1957 | $shl1954;
    $or1958 = $or1955 | 4;
    _genop($s, $or1958);
    _push_($s);
    $367 = HEAP32[$sp1941 >> 2] | 0;
    $shl1961 = $367 << 23;
    $or1962 = $shl1961 | 5;
    _genop($s, $or1962);
    $368 = HEAP32[$sp1941 >> 2] | 0;
    $sub1964 = $368 - 3 | 0;
    HEAP32[$sp1941 >> 2] = $sub1964;
    $shl1967 = $sub1964 << 23;
    $and1969 = $call1940 << 14;
    $shl1970 = $and1969 & 8372224;
    $or1968 = $shl1970 | $shl1967;
    $or1972 = $or1968 | 288;
    _genop($s, $or1972);
    $tobool1973 = ($val | 0) == 0;
    if ($tobool1973) {
      label = 320;
      break;
    } else {
      label = 293;
      break;
    }
   case 293:
    _push_($s);
    label = 320;
    break;
   case 294:
    $mrb1978 = $s | 0;
    $369 = HEAP32[$mrb1978 >> 2] | 0;
    $call1979 = _mrb_intern2($369, 108504, 12) | 0;
    $call1980 = _new_msym($s, $call1979) | 0;
    $sp1984 = $s + 56 | 0;
    $370 = HEAP32[$sp1984 >> 2] | 0;
    $shl1986 = $370 << 23;
    $or1987 = $shl1986 | 72;
    _genop($s, $or1987);
    _push_($s);
    $tobool19891124 = ($3 | 0) == 0;
    if ($tobool19891124) {
      $num_0_lcssa = 0;
      label = 296;
      break;
    } else {
      $num_01125 = 0;
      $t1983_01126 = $3;
      label = 295;
      break;
    }
   case 295:
    $car1992 = $t1983_01126 | 0;
    $371 = HEAP32[$car1992 >> 2] | 0;
    $372 = $371;
    $conv1993 = $372 & 65535;
    $call1994 = _new_msym($s, $conv1993) | 0;
    $373 = HEAP32[$sp1984 >> 2] | 0;
    $shl1997 = $373 << 23;
    $and1999 = $call1994 << 7;
    $shl2000 = $and1999 & 8388480;
    $or1998 = $shl2000 | $shl1997;
    $or2001 = $or1998 | 4;
    _genop($s, $or2001);
    _push_($s);
    $cdr2002 = $t1983_01126 + 4 | 0;
    $374 = HEAP32[$cdr2002 >> 2] | 0;
    $inc2003 = $num_01125 + 1 | 0;
    $tobool1989 = ($374 | 0) == 0;
    if ($tobool1989) {
      $num_0_lcssa = $inc2003;
      label = 296;
      break;
    } else {
      $num_01125 = $inc2003;
      $t1983_01126 = $374;
      label = 295;
      break;
    }
   case 296:
    $375 = HEAP32[$sp1984 >> 2] | 0;
    $add2005_neg = $num_0_lcssa ^ -1;
    $sub2007 = $375 + $add2005_neg | 0;
    HEAP32[$sp1984 >> 2] = $sub2007;
    $shl2010 = $sub2007 << 23;
    $and2012 = $call1980 << 14;
    $shl2013 = $and2012 & 8372224;
    $and2015 = $num_0_lcssa << 7;
    $shl2016 = $and2015 & 16256;
    $or2011 = $shl2013 | $shl2016;
    $or2014 = $or2011 | $shl2010;
    $or2017 = $or2014 | 32;
    _genop($s, $or2017);
    $tobool2018 = ($val | 0) == 0;
    if ($tobool2018) {
      label = 320;
      break;
    } else {
      label = 297;
      break;
    }
   case 297:
    _push_($s);
    label = 320;
    break;
   case 298:
    $car2024 = $3 | 0;
    $376 = HEAP32[$car2024 >> 2] | 0;
    $car2025 = $376 | 0;
    $377 = HEAP32[$car2025 >> 2] | 0;
    $magicptr = $377;
    if (($magicptr | 0) == 0) {
      label = 299;
      break;
    } else if (($magicptr | 0) == 1) {
      label = 300;
      break;
    } else {
      label = 301;
      break;
    }
   case 299:
    $sp2029 = $s + 56 | 0;
    $378 = HEAP32[$sp2029 >> 2] | 0;
    $shl2031 = $378 << 23;
    $or2032 = $shl2031 | 5;
    _genop($s, $or2032);
    _push_($s);
    label = 302;
    break;
   case 300:
    $sp2039 = $s + 56 | 0;
    $379 = HEAP32[$sp2039 >> 2] | 0;
    $shl2041 = $379 << 23;
    $or2042 = $shl2041 | 66;
    _genop($s, $or2042);
    _push_($s);
    label = 302;
    break;
   case 301:
    _codegen($s, $377, 1);
    label = 302;
    break;
   case 302:
    $cdr2048 = $3 + 4 | 0;
    $380 = HEAP32[$cdr2048 >> 2] | 0;
    $car2049 = $380 | 0;
    $381 = HEAP32[$car2049 >> 2] | 0;
    $tobool2050 = ($381 | 0) == 0;
    if ($tobool2050) {
      label = 304;
      break;
    } else {
      label = 303;
      break;
    }
   case 303:
    _codegen($s, $381, 1);
    label = 305;
    break;
   case 304:
    $sp2055 = $s + 56 | 0;
    $382 = HEAP32[$sp2055 >> 2] | 0;
    $shl2057 = $382 << 23;
    $or2058 = $shl2057 | 5;
    _genop($s, $or2058);
    _push_($s);
    label = 305;
    break;
   case 305:
    $sp2060 = $s + 56 | 0;
    $383 = HEAP32[$sp2060 >> 2] | 0;
    $dec2063 = $383 - 2 | 0;
    HEAP32[$sp2060 >> 2] = $dec2063;
    $384 = HEAP32[$car2024 >> 2] | 0;
    $cdr2065 = $384 + 4 | 0;
    $385 = HEAP32[$cdr2065 >> 2] | 0;
    $386 = $385;
    $conv2066 = $386 & 65535;
    $call2067 = _new_msym($s, $conv2066) | 0;
    $387 = HEAP32[$sp2060 >> 2] | 0;
    $shl2070 = $387 << 23;
    $and2072 = $call2067 << 14;
    $shl2073 = $and2072 & 8372224;
    $or2071 = $shl2073 | $shl2070;
    $or2074 = $or2071 | 67;
    _genop($s, $or2074);
    $388 = HEAP32[$cdr2048 >> 2] | 0;
    $cdr2076 = $388 + 4 | 0;
    $389 = HEAP32[$cdr2076 >> 2] | 0;
    $car2077 = $389 | 0;
    $390 = HEAP32[$car2077 >> 2] | 0;
    $call2078 = _scope_body($s, $390) | 0;
    $391 = HEAP32[$sp2060 >> 2] | 0;
    $shl2081 = $391 << 23;
    $and2083 = $call2078 << 7;
    $shl2084 = $and2083 & 8388480;
    $or2082 = $shl2084 | $shl2081;
    $or2085 = $or2082 | 69;
    _genop($s, $or2085);
    $tobool2086 = ($val | 0) == 0;
    if ($tobool2086) {
      label = 320;
      break;
    } else {
      label = 306;
      break;
    }
   case 306:
    _push_($s);
    label = 320;
    break;
   case 307:
    $car2092 = $3 | 0;
    $392 = HEAP32[$car2092 >> 2] | 0;
    $car2093 = $392 | 0;
    $393 = HEAP32[$car2093 >> 2] | 0;
    $magicptr1030 = $393;
    if (($magicptr1030 | 0) == 0) {
      label = 308;
      break;
    } else if (($magicptr1030 | 0) == 1) {
      label = 309;
      break;
    } else {
      label = 310;
      break;
    }
   case 308:
    $sp2097 = $s + 56 | 0;
    $394 = HEAP32[$sp2097 >> 2] | 0;
    $shl2099 = $394 << 23;
    $or2100 = $shl2099 | 5;
    _genop($s, $or2100);
    _push_($s);
    label = 311;
    break;
   case 309:
    $sp2107 = $s + 56 | 0;
    $395 = HEAP32[$sp2107 >> 2] | 0;
    $shl2109 = $395 << 23;
    $or2110 = $shl2109 | 66;
    _genop($s, $or2110);
    _push_($s);
    label = 311;
    break;
   case 310:
    _codegen($s, $393, 1);
    label = 311;
    break;
   case 311:
    $sp2116 = $s + 56 | 0;
    $396 = HEAP32[$sp2116 >> 2] | 0;
    $dec2117 = $396 - 1 | 0;
    HEAP32[$sp2116 >> 2] = $dec2117;
    $397 = HEAP32[$car2092 >> 2] | 0;
    $cdr2119 = $397 + 4 | 0;
    $398 = HEAP32[$cdr2119 >> 2] | 0;
    $399 = $398;
    $conv2120 = $399 & 65535;
    $call2121 = _new_msym($s, $conv2120) | 0;
    $400 = HEAP32[$sp2116 >> 2] | 0;
    $shl2124 = $400 << 23;
    $and2126 = $call2121 << 14;
    $shl2127 = $and2126 & 8372224;
    $or2125 = $shl2127 | $shl2124;
    $or2128 = $or2125 | 68;
    _genop($s, $or2128);
    $cdr2129 = $3 + 4 | 0;
    $401 = HEAP32[$cdr2129 >> 2] | 0;
    $car2130 = $401 | 0;
    $402 = HEAP32[$car2130 >> 2] | 0;
    $call2131 = _scope_body($s, $402) | 0;
    $403 = HEAP32[$sp2116 >> 2] | 0;
    $shl2134 = $403 << 23;
    $and2136 = $call2131 << 7;
    $shl2137 = $and2136 & 8388480;
    $or2135 = $shl2137 | $shl2134;
    $or2138 = $or2135 | 69;
    _genop($s, $or2138);
    $tobool2139 = ($val | 0) == 0;
    if ($tobool2139) {
      label = 320;
      break;
    } else {
      label = 312;
      break;
    }
   case 312:
    _push_($s);
    label = 320;
    break;
   case 313:
    $car2145 = $3 | 0;
    $404 = HEAP32[$car2145 >> 2] | 0;
    _codegen($s, $404, 1);
    $sp2146 = $s + 56 | 0;
    $405 = HEAP32[$sp2146 >> 2] | 0;
    $dec2147 = $405 - 1 | 0;
    HEAP32[$sp2146 >> 2] = $dec2147;
    $shl2150 = $dec2147 << 23;
    $and2149 = $dec2147 << 14;
    $shl2154 = $and2149 & 8372224;
    $or2151 = $shl2150 | $shl2154;
    $or2155 = $or2151 | 71;
    _genop($s, $or2155);
    $cdr2156 = $3 + 4 | 0;
    $406 = HEAP32[$cdr2156 >> 2] | 0;
    $car2157 = $406 | 0;
    $407 = HEAP32[$car2157 >> 2] | 0;
    $call2158 = _scope_body($s, $407) | 0;
    $408 = HEAP32[$sp2146 >> 2] | 0;
    $shl2161 = $408 << 23;
    $and2163 = $call2158 << 7;
    $shl2164 = $and2163 & 8388480;
    $or2162 = $shl2164 | $shl2161;
    $or2165 = $or2162 | 69;
    _genop($s, $or2165);
    $tobool2166 = ($val | 0) == 0;
    if ($tobool2166) {
      label = 320;
      break;
    } else {
      label = 314;
      break;
    }
   case 314:
    _push_($s);
    label = 320;
    break;
   case 315:
    $car2172 = $3 | 0;
    $409 = HEAP32[$car2172 >> 2] | 0;
    $410 = $409;
    $conv2173 = $410 & 65535;
    $call2174 = _new_msym($s, $conv2173) | 0;
    $cdr2177 = $3 + 4 | 0;
    $411 = HEAP32[$cdr2177 >> 2] | 0;
    $call2178 = _lambda_body($s, $411, 0) | 0;
    $sp2179 = $s + 56 | 0;
    $412 = HEAP32[$sp2179 >> 2] | 0;
    $shl2181 = $412 << 23;
    $or2182 = $shl2181 | 72;
    _genop($s, $or2182);
    _push_($s);
    $413 = HEAP32[$sp2179 >> 2] | 0;
    $shl2185 = $413 << 23;
    $and2187 = $call2178 << 9;
    $shl2188 = $and2187 & 8388096;
    $or2189 = $shl2188 | $shl2185;
    $or2190 = $or2189 | 192;
    _genop($s, $or2190);
    $414 = HEAP32[$sp2179 >> 2] | 0;
    $dec2192 = $414 - 1 | 0;
    HEAP32[$sp2179 >> 2] = $dec2192;
    $shl2195 = $dec2192 << 23;
    $and2197 = $call2174 << 14;
    $shl2198 = $and2197 & 8372224;
    $or2196 = $shl2198 | $shl2195;
    $or2199 = $or2196 | 70;
    _genop($s, $or2199);
    $tobool2200 = ($val | 0) == 0;
    if ($tobool2200) {
      label = 320;
      break;
    } else {
      label = 316;
      break;
    }
   case 316:
    $415 = HEAP32[$sp2179 >> 2] | 0;
    $shl2204 = $415 << 23;
    $or2205 = $shl2204 | 5;
    _genop($s, $or2205);
    _push_($s);
    label = 320;
    break;
   case 317:
    $car2209 = $3 | 0;
    $416 = HEAP32[$car2209 >> 2] | 0;
    $cdr2212 = $3 + 4 | 0;
    $417 = HEAP32[$cdr2212 >> 2] | 0;
    $car2213 = $417 | 0;
    $418 = HEAP32[$car2213 >> 2] | 0;
    $419 = $418;
    $conv2214 = $419 & 65535;
    $call2215 = _new_msym($s, $conv2214) | 0;
    $420 = HEAP32[$cdr2212 >> 2] | 0;
    $cdr2219 = $420 + 4 | 0;
    $421 = HEAP32[$cdr2219 >> 2] | 0;
    $call2220 = _lambda_body($s, $421, 0) | 0;
    _codegen($s, $416, 1);
    $sp2221 = $s + 56 | 0;
    $422 = HEAP32[$sp2221 >> 2] | 0;
    $dec2222 = $422 - 1 | 0;
    HEAP32[$sp2221 >> 2] = $dec2222;
    $shl2225 = $dec2222 << 23;
    $and2224 = $dec2222 << 14;
    $shl2229 = $and2224 & 8372224;
    $or2226 = $shl2225 | $shl2229;
    $or2230 = $or2226 | 71;
    _genop($s, $or2230);
    _push_($s);
    $423 = HEAP32[$sp2221 >> 2] | 0;
    $shl2233 = $423 << 23;
    $and2235 = $call2220 << 9;
    $shl2236 = $and2235 & 8388096;
    $or2237 = $shl2236 | $shl2233;
    $or2238 = $or2237 | 192;
    _genop($s, $or2238);
    $424 = HEAP32[$sp2221 >> 2] | 0;
    $dec2240 = $424 - 1 | 0;
    HEAP32[$sp2221 >> 2] = $dec2240;
    $shl2243 = $dec2240 << 23;
    $and2245 = $call2215 << 14;
    $shl2246 = $and2245 & 8372224;
    $or2244 = $shl2246 | $shl2243;
    $or2247 = $or2244 | 70;
    _genop($s, $or2247);
    $tobool2248 = ($val | 0) == 0;
    if ($tobool2248) {
      label = 320;
      break;
    } else {
      label = 318;
      break;
    }
   case 318:
    $425 = HEAP32[$sp2221 >> 2] | 0;
    $shl2252 = $425 << 23;
    $or2253 = $shl2252 | 5;
    _genop($s, $or2253);
    _push_($s);
    label = 320;
    break;
   case 319:
    _codegen($s, $3, 0);
    label = 320;
    break;
   case 320:
    STACKTOP = __stackBase__;
    return;
  }
}
function _new_label($s) {
  $s = $s | 0;
  var $pc = 0;
  $pc = $s + 60 | 0;
  HEAP32[$s + 64 >> 2] = HEAP32[$pc >> 2] | 0;
  return HEAP32[$pc >> 2] | 0;
}
function _genop($s, $i) {
  $s = $s | 0;
  $i = $i | 0;
  var $pc = 0, $0 = 0, $icapa = 0, $1 = 0, $cmp = 0, $mul = 0, $iseq = 0, $2 = 0, $3 = 0, $mul3 = 0, $call = 0, $4 = 0, $lines = 0, $5 = 0, $tobool = 0, $6 = 0, $7 = 0, $mul8 = 0, $call9 = 0, $8 = 0, $9 = 0, $iseq13 = 0, $10 = 0, $arrayidx = 0, $lines14 = 0, $11 = 0, $tobool15 = 0, $lineno = 0, $12 = 0, $13 = 0, $arrayidx19 = 0, $14 = 0, $inc = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $pc = $s + 60 | 0;
    $0 = HEAP32[$pc >> 2] | 0;
    $icapa = $s + 96 | 0;
    $1 = HEAP32[$icapa >> 2] | 0;
    $cmp = ($0 | 0) == ($1 | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $mul = $1 << 1;
    HEAP32[$icapa >> 2] = $mul;
    $iseq = $s + 88 | 0;
    $2 = HEAP32[$iseq >> 2] | 0;
    $3 = $2;
    $mul3 = $1 << 3;
    $call = _codegen_realloc($s, $3, $mul3) | 0;
    $4 = $call;
    HEAP32[$iseq >> 2] = $4;
    $lines = $s + 92 | 0;
    $5 = HEAP32[$lines >> 2] | 0;
    $tobool = ($5 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $6 = $5;
    $7 = HEAP32[$icapa >> 2] | 0;
    $mul8 = $7 << 1;
    $call9 = _codegen_realloc($s, $6, $mul8) | 0;
    $8 = $call9;
    HEAP32[$lines >> 2] = $8;
    label = 5;
    break;
   case 5:
    $9 = HEAP32[$pc >> 2] | 0;
    $iseq13 = $s + 88 | 0;
    $10 = HEAP32[$iseq13 >> 2] | 0;
    $arrayidx = $10 + ($9 << 2) | 0;
    HEAP32[$arrayidx >> 2] = $i;
    $lines14 = $s + 92 | 0;
    $11 = HEAP32[$lines14 >> 2] | 0;
    $tobool15 = ($11 | 0) == 0;
    if ($tobool15) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $lineno = $s + 84 | 0;
    $12 = HEAP16[$lineno >> 1] | 0;
    $13 = HEAP32[$pc >> 2] | 0;
    $arrayidx19 = $11 + ($13 << 1) | 0;
    HEAP16[$arrayidx19 >> 1] = $12;
    label = 7;
    break;
   case 7:
    $14 = HEAP32[$pc >> 2] | 0;
    $inc = $14 + 1 | 0;
    HEAP32[$pc >> 2] = $inc;
    return;
  }
}
function _push_($s) {
  $s = $s | 0;
  var $sp = 0, $0 = 0, $cmp = 0, $1 = 0, $inc = 0, $nregs = 0, $2 = 0, $cmp3 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $sp = $s + 56 | 0;
    $0 = HEAP32[$sp >> 2] | 0;
    $cmp = ($0 | 0) > 511;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _codegen_error($s, 104828);
    label = 4;
    break;
   case 4:
    $1 = HEAP32[$sp >> 2] | 0;
    $inc = $1 + 1 | 0;
    HEAP32[$sp >> 2] = $inc;
    $nregs = $s + 116 | 0;
    $2 = HEAP32[$nregs >> 2] | 0;
    $cmp3 = ($inc | 0) > ($2 | 0);
    if ($cmp3) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[$nregs >> 2] = $inc;
    label = 6;
    break;
   case 6:
    return;
  }
}
function _loop_push($s, $t) {
  $s = $s | 0;
  $t = $t | 0;
  var $call = 0, $0 = 0, $loop = 0;
  $call = _codegen_palloc($s, 28) | 0;
  $0 = $call;
  HEAP32[$call >> 2] = $t;
  HEAP32[$call + 12 >> 2] = 0;
  HEAP32[$call + 8 >> 2] = 0;
  HEAP32[$call + 4 >> 2] = 0;
  $loop = $s + 72 | 0;
  HEAP32[$call + 24 >> 2] = HEAP32[$loop >> 2] | 0;
  HEAP32[$call + 20 >> 2] = HEAP32[$s + 76 >> 2] | 0;
  HEAP32[$call + 16 >> 2] = HEAP32[$s + 56 >> 2] | 0;
  HEAP32[$loop >> 2] = $0;
  return $0 | 0;
}
function _new_msym($s, $sym) {
  $s = $s | 0;
  $sym = $sym | 0;
  var $irep = 0, $0 = 0, $slen = 0, $1 = 0, $cmp = 0, $_ = 0, $i_0 = 0, $cmp1 = 0, $2 = 0, $syms = 0, $3 = 0, $arrayidx = 0, $4 = 0, $cmp4 = 0, $cmp12 = 0, $inc = 0, $cmp16 = 0, $5 = 0, $syms21 = 0, $6 = 0, $arrayidx22 = 0, $7 = 0, $slen24 = 0, $8 = 0, $cmp25 = 0, $inc30 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $irep = $s + 100 | 0;
    $0 = HEAP32[$irep >> 2] | 0;
    $slen = $0 + 40 | 0;
    $1 = HEAP32[$slen >> 2] | 0;
    $cmp = ($1 | 0) > 256;
    $_ = $cmp ? 256 : $1;
    $i_0 = 0;
    label = 3;
    break;
   case 3:
    $cmp1 = ($i_0 | 0) < ($_ | 0);
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $2 = HEAP32[$irep >> 2] | 0;
    $syms = $2 + 20 | 0;
    $3 = HEAP32[$syms >> 2] | 0;
    $arrayidx = $3 + ($i_0 << 1) | 0;
    $4 = HEAP16[$arrayidx >> 1] | 0;
    $cmp4 = $4 << 16 >> 16 == $sym << 16 >> 16;
    if ($cmp4) {
      label = 10;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $cmp12 = $4 << 16 >> 16 == 0;
    $inc = $i_0 + 1 | 0;
    if ($cmp12) {
      label = 6;
      break;
    } else {
      $i_0 = $inc;
      label = 3;
      break;
    }
   case 6:
    $cmp16 = ($i_0 | 0) == 256;
    if ($cmp16) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _codegen_error($s, 105648);
    label = 8;
    break;
   case 8:
    $5 = HEAP32[$irep >> 2] | 0;
    $syms21 = $5 + 20 | 0;
    $6 = HEAP32[$syms21 >> 2] | 0;
    $arrayidx22 = $6 + ($i_0 << 1) | 0;
    HEAP16[$arrayidx22 >> 1] = $sym;
    $7 = HEAP32[$irep >> 2] | 0;
    $slen24 = $7 + 40 | 0;
    $8 = HEAP32[$slen24 >> 2] | 0;
    $cmp25 = ($i_0 | 0) == ($8 | 0);
    if ($cmp25) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $inc30 = $8 + 1 | 0;
    HEAP32[$slen24 >> 2] = $inc30;
    label = 10;
    break;
   case 10:
    return $i_0 | 0;
  }
  return 0;
}
function _dispatch_linked($s, $pc) {
  $s = $s | 0;
  $pc = $pc | 0;
  var $tobool = 0, $iseq = 0, $pc_addr_0 = 0, $0 = 0, $arrayidx = 0, $1 = 0, $shr = 0, $and = 0, $sub = 0, $tobool1 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($pc | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $iseq = $s + 88 | 0;
    $pc_addr_0 = $pc;
    label = 4;
    break;
   case 4:
    $0 = HEAP32[$iseq >> 2] | 0;
    $arrayidx = $0 + ($pc_addr_0 << 2) | 0;
    $1 = HEAP32[$arrayidx >> 2] | 0;
    $shr = $1 >>> 7;
    $and = $shr & 65535;
    $sub = $and - 32767 | 0;
    _dispatch($s, $pc_addr_0);
    $tobool1 = ($sub | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      $pc_addr_0 = $sub;
      label = 4;
      break;
    }
   case 5:
    return;
  }
}
function _gen_assignment($s, $node, $sp, $val) {
  $s = $s | 0;
  $node = $node | 0;
  $sp = $sp | 0;
  $val = $val | 0;
  var $car = 0, $0 = 0, $1 = 0, $cdr = 0, $2 = 0, $3 = 0, $conv = 0, $call = 0, $shl = 0, $and1 = 0, $shl2 = 0, $or = 0, $or3 = 0, $4 = 0, $conv5 = 0, $call6 = 0, $cmp = 0, $cmp8 = 0, $shl12 = 0, $and14 = 0, $shl15 = 0, $or13 = 0, $or16 = 0, $lv_0 = 0, $s_pn = 0, $up_0_in = 0, $up_0 = 0, $tobool = 0, $call18 = 0, $cmp19 = 0, $inc = 0, $shl23 = 0, $and25 = 0, $shl26 = 0, $and28 = 0, $shl29 = 0, $or24 = 0, $or27 = 0, $or30 = 0, $5 = 0, $conv35 = 0, $call36 = 0, $shl38 = 0, $and40 = 0, $shl41 = 0, $or39 = 0, $or42 = 0, $6 = 0, $conv44 = 0, $call45 = 0, $shl47 = 0, $and49 = 0, $shl50 = 0, $or48 = 0, $or51 = 0, $7 = 0, $conv53 = 0, $call54 = 0, $shl56 = 0, $and58 = 0, $shl59 = 0, $or57 = 0, $or60 = 0, $cdr62 = 0, $8 = 0, $9 = 0, $conv63 = 0, $call64 = 0, $sp65 = 0, $10 = 0, $shl67 = 0, $and69 = 0, $shl70 = 0, $or68 = 0, $or71 = 0, $car72 = 0, $11 = 0, $12 = 0, $sub = 0, $shl76 = 0, $and78 = 0, $shl79 = 0, $or77 = 0, $or80 = 0, $cdr82 = 0, $13 = 0, $car83 = 0, $14 = 0, $15 = 0, $conv84 = 0, $call85 = 0, $sp86 = 0, $16 = 0, $dec = 0, $cond = 0, $shl91 = 0, $and93 = 0, $shl94 = 0, $or92 = 0, $or95 = 0, $call97 = 0, $tobool98 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $car = $node | 0;
    $0 = HEAP32[$car >> 2] | 0;
    $1 = $0;
    $cdr = $node + 4 | 0;
    $2 = HEAP32[$cdr >> 2] | 0;
    if (($1 | 0) == 41) {
      label = 3;
      break;
    } else if (($1 | 0) == 39) {
      label = 4;
      break;
    } else if (($1 | 0) == 42) {
      label = 10;
      break;
    } else if (($1 | 0) == 44) {
      label = 11;
      break;
    } else if (($1 | 0) == 43) {
      label = 12;
      break;
    } else if (($1 | 0) == 77) {
      label = 13;
      break;
    } else if (($1 | 0) == 29) {
      label = 14;
      break;
    } else {
      label = 16;
      break;
    }
   case 3:
    $3 = $2;
    $conv = $3 & 65535;
    $call = _new_sym900($s, $conv) | 0;
    $shl = $sp << 23;
    $and1 = $call << 7;
    $shl2 = $and1 & 8388480;
    $or = $shl | $shl2;
    $or3 = $or | 10;
    _genop_peep($s, $or3, $val);
    label = 17;
    break;
   case 4:
    $4 = $2;
    $conv5 = $4 & 65535;
    $call6 = _lv_idx($s, $conv5) | 0;
    $cmp = ($call6 | 0) > 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      $s_pn = $s;
      $lv_0 = 0;
      label = 7;
      break;
    }
   case 5:
    $cmp8 = ($call6 | 0) == ($sp | 0);
    if ($cmp8) {
      label = 17;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $shl12 = $call6 << 23;
    $and14 = $sp << 14;
    $shl15 = $and14 & 8372224;
    $or13 = $shl15 | $shl12;
    $or16 = $or13 | 1;
    _genop_peep($s, $or16, $val);
    label = 17;
    break;
   case 7:
    $up_0_in = $s_pn + 48 | 0;
    $up_0 = HEAP32[$up_0_in >> 2] | 0;
    $tobool = ($up_0 | 0) == 0;
    if ($tobool) {
      label = 17;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $call18 = _lv_idx($up_0, $conv5) | 0;
    $cmp19 = ($call18 | 0) > 0;
    $inc = $lv_0 + 1 | 0;
    if ($cmp19) {
      label = 9;
      break;
    } else {
      $s_pn = $up_0;
      $lv_0 = $inc;
      label = 7;
      break;
    }
   case 9:
    $shl23 = $sp << 23;
    $and25 = $call18 << 14;
    $shl26 = $and25 & 8372224;
    $and28 = $lv_0 << 7;
    $shl29 = $and28 & 16256;
    $or24 = $shl23 | $shl29;
    $or27 = $or24 | $shl26;
    $or30 = $or27 | 22;
    _genop_peep($s, $or30, $val);
    label = 17;
    break;
   case 10:
    $5 = $2;
    $conv35 = $5 & 65535;
    $call36 = _new_sym900($s, $conv35) | 0;
    $shl38 = $sp << 23;
    $and40 = $call36 << 7;
    $shl41 = $and40 & 8388480;
    $or39 = $shl38 | $shl41;
    $or42 = $or39 | 14;
    _genop_peep($s, $or42, $val);
    label = 17;
    break;
   case 11:
    $6 = $2;
    $conv44 = $6 & 65535;
    $call45 = _new_sym900($s, $conv44) | 0;
    $shl47 = $sp << 23;
    $and49 = $call45 << 7;
    $shl50 = $and49 & 8388480;
    $or48 = $shl47 | $shl50;
    $or51 = $or48 | 16;
    _genop_peep($s, $or51, $val);
    label = 17;
    break;
   case 12:
    $7 = $2;
    $conv53 = $7 & 65535;
    $call54 = _new_sym900($s, $conv53) | 0;
    $shl56 = $sp << 23;
    $and58 = $call54 << 7;
    $shl59 = $and58 & 8388480;
    $or57 = $shl56 | $shl59;
    $or60 = $or57 | 18;
    _genop_peep($s, $or60, $val);
    label = 17;
    break;
   case 13:
    $cdr62 = $2 + 4 | 0;
    $8 = HEAP32[$cdr62 >> 2] | 0;
    $9 = $8;
    $conv63 = $9 & 65535;
    $call64 = _new_sym900($s, $conv63) | 0;
    $sp65 = $s + 56 | 0;
    $10 = HEAP32[$sp65 >> 2] | 0;
    $shl67 = $10 << 23;
    $and69 = $sp << 14;
    $shl70 = $and69 & 8372224;
    $or68 = $shl70 | $shl67;
    $or71 = $or68 | 1;
    _genop_peep($s, $or71, 0);
    _push_($s);
    $car72 = $2 | 0;
    $11 = HEAP32[$car72 >> 2] | 0;
    _codegen($s, $11, 1);
    $12 = HEAP32[$sp65 >> 2] | 0;
    $sub = $12 - 2 | 0;
    HEAP32[$sp65 >> 2] = $sub;
    $shl76 = $sub << 23;
    $and78 = $call64 << 7;
    $shl79 = $and78 & 8388480;
    $or77 = $shl79 | $shl76;
    $or80 = $or77 | 20;
    _genop_peep($s, $or80, $val);
    label = 17;
    break;
   case 14:
    _push_($s);
    $cdr82 = $2 + 4 | 0;
    $13 = HEAP32[$cdr82 >> 2] | 0;
    $car83 = $13 | 0;
    $14 = HEAP32[$car83 >> 2] | 0;
    $15 = $14;
    $conv84 = $15 & 65535;
    $call85 = _attrsym($s, $conv84) | 0;
    _gen_call($s, $2, $call85, $sp, 0);
    $sp86 = $s + 56 | 0;
    $16 = HEAP32[$sp86 >> 2] | 0;
    $dec = $16 - 1 | 0;
    HEAP32[$sp86 >> 2] = $dec;
    $cond = ($val | 0) == 0;
    if ($cond) {
      label = 19;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $shl91 = $dec << 23;
    $and93 = $sp << 14;
    $shl94 = $and93 & 8372224;
    $or92 = $shl94 | $shl91;
    $or95 = $or92 | 1;
    _genop_peep($s, $or95, $val);
    label = 17;
    break;
   case 16:
    $call97 = _printf(106484, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $1, tempInt) | 0) | 0;
    label = 17;
    break;
   case 17:
    $tobool98 = ($val | 0) == 0;
    if ($tobool98) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    _push_($s);
    label = 19;
    break;
   case 19:
    STACKTOP = __stackBase__;
    return;
  }
}
function _loop_pop($s, $val) {
  $s = $s | 0;
  $val = $val | 0;
  var $tobool = 0, $sp = 0, $0 = 0, $shl = 0, $or = 0, $loop = 0, $1 = 0, $pc3 = 0, $2 = 0, $3 = 0, $prev = 0, $4 = 0, $loop_c = 0, $5 = 0, $pc3_c = 0, $6 = 0, $7 = 0, $prev_c = 0, $8 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($val | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $sp = $s + 56 | 0;
    $0 = HEAP32[$sp >> 2] | 0;
    $shl = $0 << 23;
    $or = $shl | 5;
    _genop($s, $or);
    $loop = $s + 72 | 0;
    $1 = HEAP32[$loop >> 2] | 0;
    $pc3 = $1 + 12 | 0;
    $2 = HEAP32[$pc3 >> 2] | 0;
    _dispatch_linked($s, $2);
    $3 = HEAP32[$loop >> 2] | 0;
    $prev = $3 + 24 | 0;
    $4 = HEAP32[$prev >> 2] | 0;
    HEAP32[$loop >> 2] = $4;
    _push_($s);
    label = 5;
    break;
   case 4:
    $loop_c = $s + 72 | 0;
    $5 = HEAP32[$loop_c >> 2] | 0;
    $pc3_c = $5 + 12 | 0;
    $6 = HEAP32[$pc3_c >> 2] | 0;
    _dispatch_linked($s, $6);
    $7 = HEAP32[$loop_c >> 2] | 0;
    $prev_c = $7 + 24 | 0;
    $8 = HEAP32[$prev_c >> 2] | 0;
    HEAP32[$loop_c >> 2] = $8;
    label = 5;
    break;
   case 5:
    return;
  }
}
function _scope_body($s, $tree) {
  $s = $s | 0;
  $tree = $tree | 0;
  var $mrb = 0, $0 = 0, $car = 0, $1 = 0, $call = 0, $idx1 = 0, $2 = 0, $cdr = 0, $3 = 0, $iseq = 0, $4 = 0, $tobool = 0, $nregs = 0, $5 = 0, $cmp = 0, $sp = 0, $6 = 0, $shl = 0, $or = 0, $idx5 = 0, $7 = 0, $sub = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $mrb = $s | 0;
    $0 = HEAP32[$mrb >> 2] | 0;
    $car = $tree | 0;
    $1 = HEAP32[$car >> 2] | 0;
    $call = _scope_new($0, $s, $1) | 0;
    $idx1 = $call + 124 | 0;
    $2 = HEAP32[$idx1 >> 2] | 0;
    $cdr = $tree + 4 | 0;
    $3 = HEAP32[$cdr >> 2] | 0;
    _codegen($call, $3, 1);
    $iseq = $s + 88 | 0;
    $4 = HEAP32[$iseq >> 2] | 0;
    $tobool = ($4 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _genop($call, 74);
    label = 7;
    break;
   case 4:
    $nregs = $call + 116 | 0;
    $5 = HEAP32[$nregs >> 2] | 0;
    $cmp = ($5 | 0) == 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _genop($call, 5);
    _genop($call, 41);
    label = 7;
    break;
   case 6:
    $sp = $call + 56 | 0;
    $6 = HEAP32[$sp >> 2] | 0;
    $shl = $6 << 23;
    $or = $shl | 41;
    _genop_peep($call, $or, 0);
    label = 7;
    break;
   case 7:
    _scope_finish($call);
    $idx5 = $s + 124 | 0;
    $7 = HEAP32[$idx5 >> 2] | 0;
    $sub = $2 - $7 | 0;
    return $sub | 0;
  }
  return 0;
}
function _genop_peep($s, $i, $val) {
  $s = $s | 0;
  $i = $i | 0;
  $val = $val | 0;
  var $lastlabel = 0, $0 = 0, $pc = 0, $1 = 0, $cmp = 0, $cmp2 = 0, $or_cond = 0, $sub = 0, $iseq = 0, $2 = 0, $arrayidx = 0, $3 = 0, $and = 0, $and4 = 0, $shr = 0, $shr6 = 0, $and7 = 0, $cmp8 = 0, $tobool = 0, $shr15 = 0, $cmp17 = 0, $shr21 = 0, $and22 = 0, $cmp23 = 0, $nlocals = 0, $4 = 0, $cmp27 = 0, $nlocals38 = 0, $5 = 0, $cmp39 = 0, $shl = 0, $and45 = 0, $or = 0, $or48 = 0, $6 = 0, $sub50 = 0, $7 = 0, $arrayidx52 = 0, $shr57 = 0, $cmp59 = 0, $nlocals63 = 0, $8 = 0, $cmp64 = 0, $shl69 = 0, $and72 = 0, $or70 = 0, $or76 = 0, $shr85 = 0, $cmp87 = 0, $nlocals91 = 0, $9 = 0, $cmp92 = 0, $shl98 = 0, $or99 = 0, $and101 = 0, $or104 = 0, $and106 = 0, $or109 = 0, $10 = 0, $sub111 = 0, $11 = 0, $arrayidx113 = 0, $shr118 = 0, $cmp120 = 0, $nlocals124 = 0, $12 = 0, $cmp125 = 0, $shl131 = 0, $or132 = 0, $and134 = 0, $or137 = 0, $13 = 0, $sub139 = 0, $14 = 0, $arrayidx141 = 0, $shr146 = 0, $cmp148 = 0, $nlocals152 = 0, $15 = 0, $cmp153 = 0, $shl159 = 0, $or160 = 0, $and162 = 0, $or165 = 0, $shr174 = 0, $cmp176 = 0, $nlocals180 = 0, $16 = 0, $cmp181 = 0, $shl187 = 0, $or188 = 0, $17 = 0, $sub190 = 0, $18 = 0, $arrayidx192 = 0, $tobool195 = 0, $cmp198 = 0, $or_cond157 = 0, $shr200 = 0, $shr202 = 0, $cmp204 = 0, $shr207 = 0, $shl210 = 0, $or211 = 0, $or216 = 0, $19 = 0, $sub218 = 0, $20 = 0, $arrayidx220 = 0, $tobool224 = 0, $cmp227 = 0, $or_cond158 = 0, $shr229 = 0, $shr231 = 0, $cmp233 = 0, $shr236 = 0, $shl239 = 0, $or245 = 0, $or250 = 0, $cmp258 = 0, $shr260 = 0, $shr262156 = 0, $shl266 = 0, $or267 = 0, $cmp274 = 0, $shr276 = 0, $shr278154 = 0, $shl282 = 0, $or283 = 0, $shr292 = 0, $shl295 = 0, $or296 = 0, $and303 = 0, $or308 = 0, $or324 = 0, $21 = 0, $sub326 = 0, $22 = 0, $arrayidx328 = 0, $23 = 0, $dec = 0, $24 = 0, $sub332 = 0, $25 = 0, $arrayidx334 = 0, $26 = 0, $shr335 = 0, $or339 = 0, $or346 = 0, $27 = 0, $sub348 = 0, $28 = 0, $arrayidx350 = 0, $shr353 = 0, $or357 = 0, $and359 = 0, $or362 = 0, $29 = 0, $sub370 = 0, $30 = 0, $arrayidx372 = 0, $shr378 = 0, $and379 = 0, $sub380 = 0, $cmp381 = 0, $sub383 = 0, $sub383_sub380 = 0, $c_0_off = 0, $31 = 0, $cmp389 = 0, $or395 = 0, $and401 = 0, $shl402 = 0, $or400 = 0, $or403 = 0, $32 = 0, $sub405 = 0, $33 = 0, $arrayidx407 = 0, $sub418 = 0, $and419 = 0, $shl420 = 0, $or417 = 0, $or421 = 0, $34 = 0, $sub423 = 0, $35 = 0, $arrayidx425 = 0, $cmp429 = 0, $shr432 = 0, $and433 = 0, $irep = 0, $36 = 0, $pool = 0, $37 = 0, $tt = 0, $38 = 0, $cmp435 = 0, $value = 0, $p = 0, $39 = 0, $len = 0, $40 = 0, $41 = 0, $cmp440 = 0, $42 = 0, $dec443 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $lastlabel = $s + 64 | 0;
    $0 = HEAP32[$lastlabel >> 2] | 0;
    $pc = $s + 60 | 0;
    $1 = HEAP32[$pc >> 2] | 0;
    $cmp = ($0 | 0) != ($1 | 0);
    $cmp2 = ($1 | 0) > 0;
    $or_cond = $cmp & $cmp2;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 55;
      break;
    }
   case 3:
    $sub = $1 - 1 | 0;
    $iseq = $s + 88 | 0;
    $2 = HEAP32[$iseq >> 2] | 0;
    $arrayidx = $2 + ($sub << 2) | 0;
    $3 = HEAP32[$arrayidx >> 2] | 0;
    $and = $i & 127;
    $and4 = $3 & 127;
    if (($and | 0) == 1) {
      label = 4;
      break;
    } else if (($and | 0) == 14 | ($and | 0) == 16 | ($and | 0) == 18 | ($and | 0) == 20 | ($and | 0) == 10) {
      label = 28;
      break;
    } else if (($and | 0) == 22) {
      label = 31;
      break;
    } else if (($and | 0) == 31) {
      label = 34;
      break;
    } else if (($and | 0) == 28) {
      label = 36;
      break;
    } else if (($and | 0) == 41) {
      label = 38;
      break;
    } else if (($and | 0) == 44 | ($and | 0) == 46) {
      label = 46;
      break;
    } else if (($and | 0) == 62) {
      label = 51;
      break;
    } else {
      label = 55;
      break;
    }
   case 4:
    $shr = $i >>> 23;
    $shr6 = $i >>> 14;
    $and7 = $shr6 & 511;
    $cmp8 = ($shr | 0) == ($and7 | 0);
    if ($cmp8) {
      label = 56;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $tobool = ($val | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 55;
      break;
    }
   case 6:
    if (($and4 | 0) == 1) {
      label = 7;
      break;
    } else if (($and4 | 0) == 3) {
      label = 13;
      break;
    } else if (($and4 | 0) == 55 | ($and4 | 0) == 63 | ($and4 | 0) == 65 | ($and4 | 0) == 58 | ($and4 | 0) == 21) {
      label = 16;
      break;
    } else if (($and4 | 0) == 4 | ($and4 | 0) == 9 | ($and4 | 0) == 13 | ($and4 | 0) == 15 | ($and4 | 0) == 17 | ($and4 | 0) == 11 | ($and4 | 0) == 2 | ($and4 | 0) == 61) {
      label = 19;
      break;
    } else if (($and4 | 0) == 71) {
      label = 22;
      break;
    } else if (($and4 | 0) == 5 | ($and4 | 0) == 6 | ($and4 | 0) == 7 | ($and4 | 0) == 8 | ($and4 | 0) == 66) {
      label = 25;
      break;
    } else {
      label = 55;
      break;
    }
   case 7:
    $shr15 = $3 >>> 23;
    $cmp17 = ($and7 | 0) == ($shr15 | 0);
    if ($cmp17) {
      label = 8;
      break;
    } else {
      label = 55;
      break;
    }
   case 8:
    $shr21 = $3 >>> 14;
    $and22 = $shr21 & 511;
    $cmp23 = ($shr | 0) == ($and22 | 0);
    if ($cmp23) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    $nlocals = $s + 112 | 0;
    $4 = HEAP32[$nlocals >> 2] | 0;
    $cmp27 = ($shr | 0) < ($4 | 0);
    if ($cmp27) {
      label = 10;
      break;
    } else {
      label = 56;
      break;
    }
   case 10:
    if ($cmp17) {
      label = 11;
      break;
    } else {
      label = 55;
      break;
    }
   case 11:
    $nlocals38 = $s + 112 | 0;
    $5 = HEAP32[$nlocals38 >> 2] | 0;
    $cmp39 = ($shr15 | 0) < ($5 | 0);
    if ($cmp39) {
      label = 55;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $shl = $shr << 23;
    $and45 = $3 & 8372224;
    $or = $shl | $and45;
    $or48 = $or | 1;
    $6 = HEAP32[$pc >> 2] | 0;
    $sub50 = $6 - 1 | 0;
    $7 = HEAP32[$iseq >> 2] | 0;
    $arrayidx52 = $7 + ($sub50 << 2) | 0;
    HEAP32[$arrayidx52 >> 2] = $or48;
    label = 56;
    break;
   case 13:
    $shr57 = $3 >>> 23;
    $cmp59 = ($and7 | 0) == ($shr57 | 0);
    if ($cmp59) {
      label = 14;
      break;
    } else {
      label = 55;
      break;
    }
   case 14:
    $nlocals63 = $s + 112 | 0;
    $8 = HEAP32[$nlocals63 >> 2] | 0;
    $cmp64 = ($shr57 | 0) < ($8 | 0);
    if ($cmp64) {
      label = 55;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $shl69 = $shr << 23;
    $and72 = $3 & 8388480;
    $or70 = $shl69 | $and72;
    $or76 = $or70 | 3;
    HEAP32[$arrayidx >> 2] = $or76;
    label = 56;
    break;
   case 16:
    $shr85 = $3 >>> 23;
    $cmp87 = ($and7 | 0) == ($shr85 | 0);
    if ($cmp87) {
      label = 17;
      break;
    } else {
      label = 55;
      break;
    }
   case 17:
    $nlocals91 = $s + 112 | 0;
    $9 = HEAP32[$nlocals91 >> 2] | 0;
    $cmp92 = ($shr85 | 0) < ($9 | 0);
    if ($cmp92) {
      label = 55;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $shl98 = $shr << 23;
    $or99 = $and4 | $shl98;
    $and101 = $3 & 8372224;
    $or104 = $or99 | $and101;
    $and106 = $3 & 16256;
    $or109 = $or104 | $and106;
    $10 = HEAP32[$pc >> 2] | 0;
    $sub111 = $10 - 1 | 0;
    $11 = HEAP32[$iseq >> 2] | 0;
    $arrayidx113 = $11 + ($sub111 << 2) | 0;
    HEAP32[$arrayidx113 >> 2] = $or109;
    label = 56;
    break;
   case 19:
    $shr118 = $3 >>> 23;
    $cmp120 = ($and7 | 0) == ($shr118 | 0);
    if ($cmp120) {
      label = 20;
      break;
    } else {
      label = 55;
      break;
    }
   case 20:
    $nlocals124 = $s + 112 | 0;
    $12 = HEAP32[$nlocals124 >> 2] | 0;
    $cmp125 = ($shr118 | 0) < ($12 | 0);
    if ($cmp125) {
      label = 55;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $shl131 = $shr << 23;
    $or132 = $and4 | $shl131;
    $and134 = $3 & 8388480;
    $or137 = $or132 | $and134;
    $13 = HEAP32[$pc >> 2] | 0;
    $sub139 = $13 - 1 | 0;
    $14 = HEAP32[$iseq >> 2] | 0;
    $arrayidx141 = $14 + ($sub139 << 2) | 0;
    HEAP32[$arrayidx141 >> 2] = $or137;
    label = 56;
    break;
   case 22:
    $shr146 = $3 >>> 23;
    $cmp148 = ($and7 | 0) == ($shr146 | 0);
    if ($cmp148) {
      label = 23;
      break;
    } else {
      label = 55;
      break;
    }
   case 23:
    $nlocals152 = $s + 112 | 0;
    $15 = HEAP32[$nlocals152 >> 2] | 0;
    $cmp153 = ($shr146 | 0) < ($15 | 0);
    if ($cmp153) {
      label = 55;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $shl159 = $shr << 23;
    $or160 = $and4 | $shl159;
    $and162 = $3 & 8372224;
    $or165 = $or160 | $and162;
    HEAP32[$arrayidx >> 2] = $or165;
    label = 56;
    break;
   case 25:
    $shr174 = $3 >>> 23;
    $cmp176 = ($and7 | 0) == ($shr174 | 0);
    if ($cmp176) {
      label = 26;
      break;
    } else {
      label = 55;
      break;
    }
   case 26:
    $nlocals180 = $s + 112 | 0;
    $16 = HEAP32[$nlocals180 >> 2] | 0;
    $cmp181 = ($shr174 | 0) < ($16 | 0);
    if ($cmp181) {
      label = 55;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $shl187 = $shr << 23;
    $or188 = $and4 | $shl187;
    $17 = HEAP32[$pc >> 2] | 0;
    $sub190 = $17 - 1 | 0;
    $18 = HEAP32[$iseq >> 2] | 0;
    $arrayidx192 = $18 + ($sub190 << 2) | 0;
    HEAP32[$arrayidx192 >> 2] = $or188;
    label = 56;
    break;
   case 28:
    $tobool195 = ($val | 0) == 0;
    $cmp198 = ($and4 | 0) == 1;
    $or_cond157 = $tobool195 & $cmp198;
    if ($or_cond157) {
      label = 29;
      break;
    } else {
      label = 55;
      break;
    }
   case 29:
    $shr200 = $i >>> 23;
    $shr202 = $3 >>> 23;
    $cmp204 = ($shr200 | 0) == ($shr202 | 0);
    if ($cmp204) {
      label = 30;
      break;
    } else {
      label = 55;
      break;
    }
   case 30:
    $shr207 = $3 >>> 14;
    $shl210 = $shr207 << 23;
    $or211 = $i & 8388607;
    $or216 = $or211 | $shl210;
    $19 = HEAP32[$pc >> 2] | 0;
    $sub218 = $19 - 1 | 0;
    $20 = HEAP32[$iseq >> 2] | 0;
    $arrayidx220 = $20 + ($sub218 << 2) | 0;
    HEAP32[$arrayidx220 >> 2] = $or216;
    label = 56;
    break;
   case 31:
    $tobool224 = ($val | 0) == 0;
    $cmp227 = ($and4 | 0) == 1;
    $or_cond158 = $tobool224 & $cmp227;
    if ($or_cond158) {
      label = 32;
      break;
    } else {
      label = 55;
      break;
    }
   case 32:
    $shr229 = $i >>> 23;
    $shr231 = $3 >>> 23;
    $cmp233 = ($shr229 | 0) == ($shr231 | 0);
    if ($cmp233) {
      label = 33;
      break;
    } else {
      label = 55;
      break;
    }
   case 33:
    $shr236 = $3 >>> 14;
    $shl239 = $shr236 << 23;
    $or245 = $i & 8388607;
    $or250 = $or245 | $shl239;
    HEAP32[$arrayidx >> 2] = $or250;
    label = 56;
    break;
   case 34:
    $cmp258 = ($and4 | 0) == 31;
    if ($cmp258) {
      label = 35;
      break;
    } else {
      label = 55;
      break;
    }
   case 35:
    $shr260 = $3 & -8388608;
    $shr262156 = $shr260 + $i | 0;
    $shl266 = $shr262156 & -8388608;
    $or267 = $shl266 | 31;
    HEAP32[$arrayidx >> 2] = $or267;
    label = 56;
    break;
   case 36:
    $cmp274 = ($and4 | 0) == 28;
    if ($cmp274) {
      label = 37;
      break;
    } else {
      label = 55;
      break;
    }
   case 37:
    $shr276 = $3 & -8388608;
    $shr278154 = $shr276 + $i | 0;
    $shl282 = $shr278154 & -8388608;
    $or283 = $shl282 | 28;
    HEAP32[$arrayidx >> 2] = $or283;
    label = 56;
    break;
   case 38:
    if (($and4 | 0) == 1) {
      label = 39;
      break;
    } else if (($and4 | 0) == 3) {
      label = 40;
      break;
    } else if (($and4 | 0) == 55 | ($and4 | 0) == 63 | ($and4 | 0) == 65 | ($and4 | 0) == 58 | ($and4 | 0) == 21) {
      label = 41;
      break;
    } else if (($and4 | 0) == 14 | ($and4 | 0) == 16 | ($and4 | 0) == 18 | ($and4 | 0) == 20 | ($and4 | 0) == 22 | ($and4 | 0) == 10) {
      label = 42;
      break;
    } else if (($and4 | 0) == 4 | ($and4 | 0) == 9 | ($and4 | 0) == 13 | ($and4 | 0) == 15 | ($and4 | 0) == 17 | ($and4 | 0) == 11 | ($and4 | 0) == 2 | ($and4 | 0) == 61) {
      label = 43;
      break;
    } else if (($and4 | 0) == 71) {
      label = 44;
      break;
    } else if (($and4 | 0) == 5 | ($and4 | 0) == 6 | ($and4 | 0) == 7 | ($and4 | 0) == 8 | ($and4 | 0) == 66) {
      label = 45;
      break;
    } else if (($and4 | 0) == 41) {
      label = 56;
      break;
    } else {
      label = 55;
      break;
    }
   case 39:
    $shr292 = $3 >>> 14;
    $shl295 = $shr292 << 23;
    $or296 = $shl295 | 41;
    HEAP32[$arrayidx >> 2] = $or296;
    label = 56;
    break;
   case 40:
    $and303 = $3 & 8388480;
    $or308 = $and303 | 3;
    HEAP32[$arrayidx >> 2] = $or308;
    _genop($s, 41);
    label = 56;
    break;
   case 41:
    $or324 = $3 & 8388607;
    $21 = HEAP32[$pc >> 2] | 0;
    $sub326 = $21 - 1 | 0;
    $22 = HEAP32[$iseq >> 2] | 0;
    $arrayidx328 = $22 + ($sub326 << 2) | 0;
    HEAP32[$arrayidx328 >> 2] = $or324;
    _genop($s, 41);
    label = 56;
    break;
   case 42:
    $23 = HEAP32[$pc >> 2] | 0;
    $dec = $23 - 1 | 0;
    HEAP32[$pc >> 2] = $dec;
    _genop_peep($s, $3, 0);
    $24 = HEAP32[$pc >> 2] | 0;
    $sub332 = $24 - 1 | 0;
    $25 = HEAP32[$iseq >> 2] | 0;
    $arrayidx334 = $25 + ($sub332 << 2) | 0;
    $26 = HEAP32[$arrayidx334 >> 2] | 0;
    $shr335 = $26 & -8388608;
    $or339 = $shr335 | 41;
    _genop($s, $or339);
    return;
   case 43:
    $or346 = $3 & 8388607;
    $27 = HEAP32[$pc >> 2] | 0;
    $sub348 = $27 - 1 | 0;
    $28 = HEAP32[$iseq >> 2] | 0;
    $arrayidx350 = $28 + ($sub348 << 2) | 0;
    HEAP32[$arrayidx350 >> 2] = $or346;
    _genop($s, 41);
    label = 56;
    break;
   case 44:
    $shr353 = $i & -8388608;
    $or357 = $and4 | $shr353;
    $and359 = $3 & 8372224;
    $or362 = $or357 | $and359;
    HEAP32[$arrayidx >> 2] = $or362;
    _genop($s, 41);
    label = 56;
    break;
   case 45:
    $29 = HEAP32[$pc >> 2] | 0;
    $sub370 = $29 - 1 | 0;
    $30 = HEAP32[$iseq >> 2] | 0;
    $arrayidx372 = $30 + ($sub370 << 2) | 0;
    HEAP32[$arrayidx372 >> 2] = $and4;
    _genop($s, 41);
    label = 56;
    break;
   case 46:
    if (($and4 | 0) == 3) {
      label = 47;
      break;
    } else if (($and4 | 0) == 61) {
      label = 52;
      break;
    } else {
      label = 55;
      break;
    }
   case 47:
    $shr378 = $3 >>> 7;
    $and379 = $shr378 & 65535;
    $sub380 = $and379 - 32767 | 0;
    $cmp381 = ($and | 0) == 46;
    $sub383 = 32767 - $and379 | 0;
    $sub383_sub380 = $cmp381 ? $sub383 : $sub380;
    $c_0_off = $sub383_sub380 + 127 | 0;
    $31 = $c_0_off >>> 0 > 254;
    if ($31) {
      label = 55;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    $cmp389 = ($sub383_sub380 | 0) > -1;
    $or395 = $i & -16384;
    if ($cmp389) {
      label = 49;
      break;
    } else {
      label = 50;
      break;
    }
   case 49:
    $and401 = $sub383_sub380 << 7;
    $shl402 = $and401 & 16256;
    $or400 = $or395 | $shl402;
    $or403 = $or400 | 45;
    $32 = HEAP32[$pc >> 2] | 0;
    $sub405 = $32 - 1 | 0;
    $33 = HEAP32[$iseq >> 2] | 0;
    $arrayidx407 = $33 + ($sub405 << 2) | 0;
    HEAP32[$arrayidx407 >> 2] = $or403;
    label = 56;
    break;
   case 50:
    $sub418 = -$sub383_sub380 | 0;
    $and419 = $sub418 << 7;
    $shl420 = $and419 & 16256;
    $or417 = $or395 | $shl420;
    $or421 = $or417 | 47;
    $34 = HEAP32[$pc >> 2] | 0;
    $sub423 = $34 - 1 | 0;
    $35 = HEAP32[$iseq >> 2] | 0;
    $arrayidx425 = $35 + ($sub423 << 2) | 0;
    HEAP32[$arrayidx425 >> 2] = $or421;
    label = 56;
    break;
   case 51:
    $cmp429 = ($and4 | 0) == 61;
    if ($cmp429) {
      label = 52;
      break;
    } else {
      label = 55;
      break;
    }
   case 52:
    $shr432 = $3 >>> 7;
    $and433 = $shr432 & 65535;
    $irep = $s + 100 | 0;
    $36 = HEAP32[$irep >> 2] | 0;
    $pool = $36 + 16 | 0;
    $37 = HEAP32[$pool >> 2] | 0;
    $tt = $37 + ($and433 * 12 & -1) + 8 | 0;
    $38 = HEAP32[$tt >> 2] | 0;
    $cmp435 = ($38 | 0) == 16;
    if ($cmp435) {
      label = 53;
      break;
    } else {
      label = 55;
      break;
    }
   case 53:
    $value = $37 + ($and433 * 12 & -1) | 0;
    $p = $value;
    $39 = HEAP32[$p >> 2] | 0;
    $len = $39 + 12 | 0;
    $40 = $len;
    $41 = HEAP32[$40 >> 2] | 0;
    $cmp440 = ($41 | 0) == 0;
    if ($cmp440) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 54:
    $42 = HEAP32[$pc >> 2] | 0;
    $dec443 = $42 - 1 | 0;
    HEAP32[$pc >> 2] = $dec443;
    label = 56;
    break;
   case 55:
    _genop($s, $i);
    label = 56;
    break;
   case 56:
    return;
  }
}
function _dispatch($s, $pc) {
  $s = $s | 0;
  $pc = $pc | 0;
  var $pc1 = 0, $0 = 0, $iseq = 0, $1 = 0, $arrayidx = 0, $2 = 0, $and = 0, $lastlabel = 0, $_off = 0, $switch = 0, $3 = 0, $4 = 0, $sub = 0, $or = 0, $add = 0, $and6 = 0, $shl7 = 0, $or8 = 0, $5 = 0, $arrayidx10 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $pc1 = $s + 60 | 0;
    $0 = HEAP32[$pc1 >> 2] | 0;
    $iseq = $s + 88 | 0;
    $1 = HEAP32[$iseq >> 2] | 0;
    $arrayidx = $1 + ($pc << 2) | 0;
    $2 = HEAP32[$arrayidx >> 2] | 0;
    $and = $2 & 127;
    $lastlabel = $s + 64 | 0;
    HEAP32[$lastlabel >> 2] = $0;
    $_off = $and - 23 | 0;
    $switch = $_off >>> 0 < 4;
    if ($switch) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $3 = HEAP32[_stderr >> 2] | 0;
    $4 = _fwrite(105356, 28, 1, $3 | 0) | 0;
    _scope_error();
   case 4:
    $sub = $0 - $pc | 0;
    $or = $2 & -8388481;
    $add = $sub << 7;
    $and6 = $add + 4194176 | 0;
    $shl7 = $and6 & 8388480;
    $or8 = $shl7 | $or;
    $5 = HEAP32[$iseq >> 2] | 0;
    $arrayidx10 = $5 + ($pc << 2) | 0;
    HEAP32[$arrayidx10 >> 2] = $or8;
    return;
  }
}
function _nosplat($t) {
  $t = $t | 0;
  var $tobool3 = 0, $t_addr_04 = 0, $car = 0, $0 = 0, $car1 = 0, $1 = 0, $cmp = 0, $cdr = 0, $2 = 0, $tobool = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool3 = ($t | 0) == 0;
    if ($tobool3) {
      $retval_0 = 1;
      label = 5;
      break;
    } else {
      $t_addr_04 = $t;
      label = 3;
      break;
    }
   case 3:
    $car = $t_addr_04 | 0;
    $0 = HEAP32[$car >> 2] | 0;
    $car1 = $0 | 0;
    $1 = HEAP32[$car1 >> 2] | 0;
    $cmp = ($1 | 0) == 66;
    if ($cmp) {
      $retval_0 = 0;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $cdr = $t_addr_04 + 4 | 0;
    $2 = HEAP32[$cdr >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      $retval_0 = 1;
      label = 5;
      break;
    } else {
      $t_addr_04 = $2;
      label = 3;
      break;
    }
   case 5:
    return $retval_0 | 0;
  }
  return 0;
}
function _lambda_body($s, $tree, $blk) {
  $s = $s | 0;
  $tree = $tree | 0;
  $blk = $blk | 0;
  var $idx1 = 0, $0 = 0, $mrb = 0, $1 = 0, $car = 0, $2 = 0, $call = 0, $idx2 = 0, $3 = 0, $tobool = 0, $4 = 0, $5 = 0, $bf_value = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call4 = 0, $call5 = 0, $pc1 = 0, $cdr = 0, $10 = 0, $car6 = 0, $11 = 0, $tobool7 = 0, $car10 = 0, $12 = 0, $call11 = 0, $n_0_in = 0, $n_0 = 0, $tobool14 = 0, $cdr15 = 0, $13 = 0, $cdr17 = 0, $14 = 0, $car18 = 0, $15 = 0, $call19 = 0, $cdr22 = 0, $16 = 0, $car23 = 0, $17 = 0, $tobool24 = 0, $cond = 0, $cdr28 = 0, $18 = 0, $car29 = 0, $19 = 0, $call30 = 0, $cdr35 = 0, $20 = 0, $tobool36 = 0, $cond37 = 0, $and = 0, $shl = 0, $and38 = 0, $shl39 = 0, $or = 0, $shl41 = 0, $or42 = 0, $and43 = 0, $shl44 = 0, $or45 = 0, $add = 0, $and54 = 0, $shl57 = 0, $and54_masked = 0, $or58_masked = 0, $bf_value61 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $and63 = 0, $shl64 = 0, $or65 = 0, $call66 = 0, $cmp66 = 0, $i_067 = 0, $call68 = 0, $inc = 0, $exitcond = 0, $cmp69 = 0, $cmp6969 = 0, $26 = 0, $cdr74 = 0, $27 = 0, $car75 = 0, $opt_062 = 0, $tobool7763 = 0, $sp = 0, $opt_065 = 0, $i_164 = 0, $add80 = 0, $car81 = 0, $28 = 0, $cdr82 = 0, $29 = 0, $30 = 0, $car84 = 0, $31 = 0, $32 = 0, $conv85 = 0, $call86 = 0, $33 = 0, $dec = 0, $shl88 = 0, $and91 = 0, $shl92 = 0, $or89 = 0, $or93 = 0, $inc94 = 0, $cdr95 = 0, $opt_0 = 0, $tobool77 = 0, $i_1_lcssa = 0, $add100 = 0, $cdr103 = 0, $34 = 0, $car104 = 0, $35 = 0, $sp105 = 0, $36 = 0, $dec106 = 0, $pc = 0, $37 = 0, $cmp107 = 0, $sub = 0, $iseq = 0, $38 = 0, $arrayidx = 0, $39 = 0, $40 = 0, $41 = 0, $lastlabel = 0, $42 = 0, $cmp119 = 0, $nregs = 0, $43 = 0, $cmp122 = 0, $44 = 0, $shl127 = 0, $or128 = 0, $sub135 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $idx1 = $s + 124 | 0;
    $0 = HEAP32[$idx1 >> 2] | 0;
    $mrb = $s | 0;
    $1 = HEAP32[$mrb >> 2] | 0;
    $car = $tree | 0;
    $2 = HEAP32[$car >> 2] | 0;
    $call = _scope_new($1, $s, $2) | 0;
    $idx2 = $call + 124 | 0;
    $3 = HEAP32[$idx2 >> 2] | 0;
    $tobool = ($blk | 0) != 0;
    $4 = $tobool & 1;
    $5 = $call + 69 | 0;
    $bf_value = $4 << 7;
    $6 = HEAP8[$5] | 0;
    $7 = $6 & 127;
    $8 = $7 | $bf_value;
    $9 = $8 ^ -128;
    HEAP8[$5] = $9;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call4 = _loop_push($call, 1) | 0;
    $call5 = _new_label($call) | 0;
    $pc1 = $call4 + 4 | 0;
    HEAP32[$pc1 >> 2] = $call5;
    label = 4;
    break;
   case 4:
    $cdr = $tree + 4 | 0;
    $10 = HEAP32[$cdr >> 2] | 0;
    $car6 = $10 | 0;
    $11 = HEAP32[$car6 >> 2] | 0;
    $tobool7 = ($11 | 0) == 0;
    if ($tobool7) {
      label = 16;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $car10 = $11 | 0;
    $12 = HEAP32[$car10 >> 2] | 0;
    $call11 = _node_len($12) | 0;
    $n_0_in = $car10;
    label = 6;
    break;
   case 6:
    $n_0 = HEAP32[$n_0_in >> 2] | 0;
    $tobool14 = ($n_0 | 0) == 0;
    $cdr15 = $n_0 + 4 | 0;
    if ($tobool14) {
      label = 7;
      break;
    } else {
      $n_0_in = $cdr15;
      label = 6;
      break;
    }
   case 7:
    $13 = HEAP32[$car6 >> 2] | 0;
    $cdr17 = $13 + 4 | 0;
    $14 = HEAP32[$cdr17 >> 2] | 0;
    $car18 = $14 | 0;
    $15 = HEAP32[$car18 >> 2] | 0;
    $call19 = _node_len($15) | 0;
    $cdr22 = $14 + 4 | 0;
    $16 = HEAP32[$cdr22 >> 2] | 0;
    $car23 = $16 | 0;
    $17 = HEAP32[$car23 >> 2] | 0;
    $tobool24 = ($17 | 0) != 0;
    $cond = $tobool24 & 1;
    $cdr28 = $16 + 4 | 0;
    $18 = HEAP32[$cdr28 >> 2] | 0;
    $car29 = $18 | 0;
    $19 = HEAP32[$car29 >> 2] | 0;
    $call30 = _node_len($19) | 0;
    $cdr35 = $18 + 4 | 0;
    $20 = HEAP32[$cdr35 >> 2] | 0;
    $tobool36 = ($20 | 0) != 0;
    $cond37 = $tobool36 & 1;
    $and = $call11 << 18;
    $shl = $and & 8126464;
    $and38 = $call19 << 13;
    $shl39 = $and38 & 253952;
    $or = $shl39 | $shl;
    $shl41 = $cond << 12;
    $or42 = $or | $shl41;
    $and43 = $call30 & 31;
    $shl44 = $and43 << 7;
    $or45 = $or42 | $shl44;
    $add = $call19 + $call11 | 0;
    $and54 = $add << 6;
    $shl57 = $cond << 5;
    $and54_masked = $and54 & 4032;
    $or58_masked = $shl57 | $and54_masked;
    $bf_value61 = $or58_masked | $and43;
    $21 = $call + 68 | 0;
    $22 = $21;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = $23 & -32768;
    $25 = $bf_value61 | $24;
    HEAP32[$22 >> 2] = $25;
    $and63 = $or45 | $cond37;
    $shl64 = $and63 << 7;
    $or65 = $shl64 | 38;
    _genop($call, $or65);
    $call66 = _new_label($call) | 0;
    $cmp66 = ($call19 | 0) > 0;
    if ($cmp66) {
      $i_067 = 0;
      label = 8;
      break;
    } else {
      $cmp6969 = 0;
      label = 11;
      break;
    }
   case 8:
    $call68 = _new_label($call) | 0;
    _genop($call, 4194199);
    $inc = $i_067 + 1 | 0;
    $exitcond = ($inc | 0) == ($call19 | 0);
    if ($exitcond) {
      label = 9;
      break;
    } else {
      $i_067 = $inc;
      label = 8;
      break;
    }
   case 9:
    $cmp69 = ($call19 | 0) > 0;
    if ($cmp69) {
      label = 10;
      break;
    } else {
      $cmp6969 = 0;
      label = 11;
      break;
    }
   case 10:
    _genop($call, 4194199);
    $cmp6969 = 1;
    label = 11;
    break;
   case 11:
    $26 = HEAP32[$car6 >> 2] | 0;
    $cdr74 = $26 + 4 | 0;
    $27 = HEAP32[$cdr74 >> 2] | 0;
    $car75 = $27 | 0;
    $opt_062 = HEAP32[$car75 >> 2] | 0;
    $tobool7763 = ($opt_062 | 0) == 0;
    if ($tobool7763) {
      $i_1_lcssa = 0;
      label = 14;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $sp = $call + 56 | 0;
    $i_164 = 0;
    $opt_065 = $opt_062;
    label = 13;
    break;
   case 13:
    $add80 = $i_164 + $call66 | 0;
    _dispatch($call, $add80);
    $car81 = $opt_065 | 0;
    $28 = HEAP32[$car81 >> 2] | 0;
    $cdr82 = $28 + 4 | 0;
    $29 = HEAP32[$cdr82 >> 2] | 0;
    _codegen($call, $29, 1);
    $30 = HEAP32[$car81 >> 2] | 0;
    $car84 = $30 | 0;
    $31 = HEAP32[$car84 >> 2] | 0;
    $32 = $31;
    $conv85 = $32 & 65535;
    $call86 = _lv_idx($call, $conv85) | 0;
    $33 = HEAP32[$sp >> 2] | 0;
    $dec = $33 - 1 | 0;
    HEAP32[$sp >> 2] = $dec;
    $shl88 = $call86 << 23;
    $and91 = $dec << 14;
    $shl92 = $and91 & 8372224;
    $or89 = $shl88 | $shl92;
    $or93 = $or89 | 1;
    _genop_peep($call, $or93, 0);
    $inc94 = $i_164 + 1 | 0;
    $cdr95 = $opt_065 + 4 | 0;
    $opt_0 = HEAP32[$cdr95 >> 2] | 0;
    $tobool77 = ($opt_0 | 0) == 0;
    if ($tobool77) {
      $i_1_lcssa = $inc94;
      label = 14;
      break;
    } else {
      $i_164 = $inc94;
      $opt_065 = $opt_0;
      label = 13;
      break;
    }
   case 14:
    if ($cmp6969) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    $add100 = $i_1_lcssa + $call66 | 0;
    _dispatch($call, $add100);
    label = 16;
    break;
   case 16:
    $cdr103 = $10 + 4 | 0;
    $34 = HEAP32[$cdr103 >> 2] | 0;
    $car104 = $34 | 0;
    $35 = HEAP32[$car104 >> 2] | 0;
    _codegen($call, $35, 1);
    $sp105 = $call + 56 | 0;
    $36 = HEAP32[$sp105 >> 2] | 0;
    $dec106 = $36 - 1 | 0;
    HEAP32[$sp105 >> 2] = $dec106;
    $pc = $call + 60 | 0;
    $37 = HEAP32[$pc >> 2] | 0;
    $cmp107 = ($37 | 0) > 0;
    if ($cmp107) {
      label = 17;
      break;
    } else {
      label = 22;
      break;
    }
   case 17:
    $sub = $37 - 1 | 0;
    $iseq = $call + 88 | 0;
    $38 = HEAP32[$iseq >> 2] | 0;
    $arrayidx = $38 + ($sub << 2) | 0;
    $39 = HEAP32[$arrayidx >> 2] | 0;
    $40 = $39 & 8372351;
    $41 = ($40 | 0) == 41;
    if ($41) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    $lastlabel = $call + 64 | 0;
    $42 = HEAP32[$lastlabel >> 2] | 0;
    $cmp119 = ($37 | 0) == ($42 | 0);
    if ($cmp119) {
      label = 19;
      break;
    } else {
      label = 22;
      break;
    }
   case 19:
    $nregs = $call + 116 | 0;
    $43 = HEAP32[$nregs >> 2] | 0;
    $cmp122 = ($43 | 0) == 0;
    if ($cmp122) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    _genop($call, 5);
    _genop($call, 41);
    label = 22;
    break;
   case 21:
    $44 = HEAP32[$sp105 >> 2] | 0;
    $shl127 = $44 << 23;
    $or128 = $shl127 | 41;
    _genop_peep($call, $or128, 0);
    label = 22;
    break;
   case 22:
    if ($tobool) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    _loop_pop($call, 0);
    label = 24;
    break;
   case 24:
    _scope_finish($call);
    $sub135 = $3 - $0 | 0;
    return $sub135 | 0;
  }
  return 0;
}
function _for_body($s, $tree) {
  $s = $s | 0;
  $tree = $tree | 0;
  var $idx1 = 0, $0 = 0, $cdr = 0, $1 = 0, $car = 0, $2 = 0, $mrb = 0, $3 = 0, $car2 = 0, $4 = 0, $call = 0, $idx3 = 0, $5 = 0, $call4 = 0, $call5 = 0, $pc1 = 0, $6 = 0, $car7 = 0, $7 = 0, $tobool = 0, $cdr9 = 0, $8 = 0, $tobool10 = 0, $cdr12 = 0, $9 = 0, $tobool13 = 0, $10 = 0, $car15 = 0, $11 = 0, $12 = 0, $cdr17 = 0, $13 = 0, $car18 = 0, $14 = 0, $sp = 0, $15 = 0, $dec = 0, $pc = 0, $16 = 0, $cmp = 0, $sub = 0, $iseq = 0, $17 = 0, $arrayidx = 0, $18 = 0, $19 = 0, $20 = 0, $lastlabel = 0, $21 = 0, $cmp26 = 0, $22 = 0, $shl = 0, $or = 0, $sp32 = 0, $23 = 0, $shl34 = 0, $sub36 = 0, $and37 = 0, $shl38 = 0, $or39 = 0, $or40 = 0, $24 = 0, $dec42 = 0, $25 = 0, $call44 = 0, $call45 = 0, $26 = 0, $shl48 = 0, $and50 = 0, $shl51 = 0, $or49 = 0, $or52 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $idx1 = $s + 124 | 0;
    $0 = HEAP32[$idx1 >> 2] | 0;
    $cdr = $tree + 4 | 0;
    $1 = HEAP32[$cdr >> 2] | 0;
    $car = $1 | 0;
    $2 = HEAP32[$car >> 2] | 0;
    _codegen($s, $2, 1);
    $mrb = $s | 0;
    $3 = HEAP32[$mrb >> 2] | 0;
    $car2 = $tree | 0;
    $4 = HEAP32[$car2 >> 2] | 0;
    $call = _scope_new($3, $s, $4) | 0;
    $idx3 = $call + 124 | 0;
    $5 = HEAP32[$idx3 >> 2] | 0;
    $call4 = _loop_push($call, 2) | 0;
    $call5 = _new_label($call) | 0;
    $pc1 = $call4 + 4 | 0;
    HEAP32[$pc1 >> 2] = $call5;
    $6 = HEAP32[$car2 >> 2] | 0;
    $car7 = $6 | 0;
    $7 = HEAP32[$car7 >> 2] | 0;
    $tobool = ($7 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $cdr9 = $7 + 4 | 0;
    $8 = HEAP32[$cdr9 >> 2] | 0;
    $tobool10 = ($8 | 0) == 0;
    if ($tobool10) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $cdr12 = $6 + 4 | 0;
    $9 = HEAP32[$cdr12 >> 2] | 0;
    $tobool13 = ($9 | 0) == 0;
    if ($tobool13) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _genop($call, 33554470);
    $10 = HEAP32[$car7 >> 2] | 0;
    $car15 = $10 | 0;
    $11 = HEAP32[$car15 >> 2] | 0;
    _gen_assignment($call, $11, 1, 0);
    label = 7;
    break;
   case 6:
    _genop($call, 33554470);
    _gen_vmassignment($call, $6, 1, 1);
    label = 7;
    break;
   case 7:
    $12 = HEAP32[$cdr >> 2] | 0;
    $cdr17 = $12 + 4 | 0;
    $13 = HEAP32[$cdr17 >> 2] | 0;
    $car18 = $13 | 0;
    $14 = HEAP32[$car18 >> 2] | 0;
    _codegen($call, $14, 1);
    $sp = $call + 56 | 0;
    $15 = HEAP32[$sp >> 2] | 0;
    $dec = $15 - 1 | 0;
    HEAP32[$sp >> 2] = $dec;
    $pc = $call + 60 | 0;
    $16 = HEAP32[$pc >> 2] | 0;
    $cmp = ($16 | 0) > 0;
    if ($cmp) {
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
   case 8:
    $sub = $16 - 1 | 0;
    $iseq = $call + 88 | 0;
    $17 = HEAP32[$iseq >> 2] | 0;
    $arrayidx = $17 + ($sub << 2) | 0;
    $18 = HEAP32[$arrayidx >> 2] | 0;
    $19 = $18 & 8372351;
    $20 = ($19 | 0) == 41;
    if ($20) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $lastlabel = $call + 64 | 0;
    $21 = HEAP32[$lastlabel >> 2] | 0;
    $cmp26 = ($16 | 0) == ($21 | 0);
    if ($cmp26) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $22 = HEAP32[$sp >> 2] | 0;
    $shl = $22 << 23;
    $or = $shl | 41;
    _genop_peep($call, $or, 0);
    label = 11;
    break;
   case 11:
    _loop_pop($call, 0);
    _scope_finish($call);
    $sp32 = $s + 56 | 0;
    $23 = HEAP32[$sp32 >> 2] | 0;
    $shl34 = $23 << 23;
    $sub36 = $5 - $0 | 0;
    $and37 = $sub36 << 9;
    $shl38 = $and37 & 8388096;
    $or39 = $shl38 | $shl34;
    $or40 = $or39 | 320;
    _genop($s, $or40);
    $24 = HEAP32[$sp32 >> 2] | 0;
    $dec42 = $24 - 1 | 0;
    HEAP32[$sp32 >> 2] = $dec42;
    $25 = HEAP32[$mrb >> 2] | 0;
    $call44 = _mrb_intern2($25, 106812, 4) | 0;
    $call45 = _new_msym($s, $call44) | 0;
    $26 = HEAP32[$sp32 >> 2] | 0;
    $shl48 = $26 << 23;
    $and50 = $call45 << 14;
    $shl51 = $and50 & 8372224;
    $or49 = $shl51 | $shl48;
    $or52 = $or49 | 33;
    _genop($s, $or52);
    return;
  }
}
function _gen_call($s, $tree, $name, $sp, $val) {
  $s = $s | 0;
  $tree = $tree | 0;
  $name = $name | 0;
  $sp = $sp | 0;
  $val = $val | 0;
  var $len = 0, $tobool = 0, $cdr = 0, $0 = 0, $car = 0, $1 = 0, $2 = 0, $conv2 = 0, $_sink = 0, $car5 = 0, $3 = 0, $call = 0, $cdr6 = 0, $4 = 0, $cdr7 = 0, $5 = 0, $car8 = 0, $6 = 0, $tobool9 = 0, $car10 = 0, $7 = 0, $call11 = 0, $cmp = 0, $n_0 = 0, $noop_0 = 0, $tobool15 = 0, $tobool17 = 0, $sp24 = 0, $8 = 0, $dec = 0, $shl = 0, $and21 = 0, $shl22 = 0, $or = 0, $or23 = 0, $shl26 = 0, $and28 = 0, $shl29 = 0, $or27 = 0, $or30 = 0, $inc = 0, $n_1 = 0, $cdr34 = 0, $9 = 0, $tobool35 = 0, $sp38 = 0, $10 = 0, $dec39 = 0, $sp41 = 0, $11 = 0, $noop_1 = 0, $blk_0 = 0, $sp43 = 0, $12 = 0, $add_neg = 0, $sub = 0, $mrb = 0, $13 = 0, $call45 = 0, $tobool46 = 0, $14 = 0, $cmp48 = 0, $15 = 0, $cmp52 = 0, $16 = 0, $shl57 = 0, $and59 = 0, $shl60 = 0, $and62 = 0, $shl63 = 0, $or58 = 0, $or61 = 0, $or64 = 0, $_pr = 0, $cmp68 = 0, $17 = 0, $cmp73 = 0, $18 = 0, $shl78 = 0, $and80 = 0, $shl81 = 0, $and83 = 0, $shl84 = 0, $or79 = 0, $or82 = 0, $or85 = 0, $_pr125_pr = 0, $cmp89 = 0, $19 = 0, $cmp94 = 0, $20 = 0, $shl99 = 0, $and101 = 0, $shl102 = 0, $and104 = 0, $shl105 = 0, $or100 = 0, $or103 = 0, $or106 = 0, $_pr121 = 0, $cmp110 = 0, $21 = 0, $cmp115 = 0, $22 = 0, $shl120 = 0, $and122 = 0, $shl123 = 0, $and125 = 0, $shl126 = 0, $or121 = 0, $or124 = 0, $or127 = 0, $_pr127_pr_pr = 0, $cmp131 = 0, $23 = 0, $cmp136 = 0, $24 = 0, $shl141 = 0, $and143 = 0, $shl144 = 0, $and146 = 0, $shl147 = 0, $or142 = 0, $or145 = 0, $or148 = 0, $_pr123 = 0, $25 = 0, $cmp152 = 0, $26 = 0, $cmp157 = 0, $arrayidx160 = 0, $27 = 0, $cmp162 = 0, $28 = 0, $shl167 = 0, $and169 = 0, $shl170 = 0, $and172 = 0, $shl173 = 0, $or168 = 0, $or171 = 0, $or174 = 0, $29 = 0, $cmp178 = 0, $30 = 0, $cmp183 = 0, $31 = 0, $shl188 = 0, $and190 = 0, $shl191 = 0, $and193 = 0, $shl194 = 0, $or189 = 0, $or192 = 0, $or195 = 0, $_pr124 = 0, $32 = 0, $cmp199 = 0, $33 = 0, $cmp204 = 0, $arrayidx207 = 0, $34 = 0, $cmp209 = 0, $35 = 0, $shl214 = 0, $and216 = 0, $shl217 = 0, $and219 = 0, $shl220 = 0, $or215 = 0, $or218 = 0, $or221 = 0, $36 = 0, $cmp225 = 0, $37 = 0, $cmp230 = 0, $arrayidx233 = 0, $38 = 0, $cmp235 = 0, $39 = 0, $shl240 = 0, $and242 = 0, $shl243 = 0, $and245 = 0, $shl246 = 0, $or241 = 0, $or244 = 0, $or247 = 0, $tobool249 = 0, $cmp252 = 0, $40 = 0, $shl257 = 0, $and259 = 0, $shl260 = 0, $n_1_op = 0, $n_1_op_op = 0, $shl263 = 0, $or258 = 0, $or261 = 0, $or264 = 0, $or275 = 0, $tobool286 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $len = __stackBase__ | 0;
    $tobool = $name << 16 >> 16 == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $_sink = $name;
      label = 4;
      break;
    }
   case 3:
    $cdr = $tree + 4 | 0;
    $0 = HEAP32[$cdr >> 2] | 0;
    $car = $0 | 0;
    $1 = HEAP32[$car >> 2] | 0;
    $2 = $1;
    $conv2 = $2 & 65535;
    $_sink = $conv2;
    label = 4;
    break;
   case 4:
    $car5 = $tree | 0;
    $3 = HEAP32[$car5 >> 2] | 0;
    _codegen($s, $3, 1);
    $call = _new_msym($s, $_sink) | 0;
    $cdr6 = $tree + 4 | 0;
    $4 = HEAP32[$cdr6 >> 2] | 0;
    $cdr7 = $4 + 4 | 0;
    $5 = HEAP32[$cdr7 >> 2] | 0;
    $car8 = $5 | 0;
    $6 = HEAP32[$car8 >> 2] | 0;
    $tobool9 = ($6 | 0) != 0;
    if ($tobool9) {
      label = 5;
      break;
    } else {
      $noop_0 = 0;
      $n_0 = 0;
      label = 7;
      break;
    }
   case 5:
    $car10 = $6 | 0;
    $7 = HEAP32[$car10 >> 2] | 0;
    $call11 = _gen_values($s, $7, 1) | 0;
    $cmp = ($call11 | 0) < 0;
    if ($cmp) {
      label = 6;
      break;
    } else {
      $noop_0 = 0;
      $n_0 = $call11;
      label = 7;
      break;
    }
   case 6:
    _push_($s);
    $noop_0 = 1;
    $n_0 = 1;
    label = 7;
    break;
   case 7:
    $tobool15 = ($sp | 0) == 0;
    if ($tobool15) {
      $n_1 = $n_0;
      label = 11;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $tobool17 = ($noop_0 | 0) == 0;
    $sp24 = $s + 56 | 0;
    $8 = HEAP32[$sp24 >> 2] | 0;
    if ($tobool17) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $dec = $8 - 1 | 0;
    HEAP32[$sp24 >> 2] = $dec;
    $shl = $dec << 23;
    $and21 = $sp << 14;
    $shl22 = $and21 & 8372224;
    $or = $shl22 | $shl;
    $or23 = $or | 57;
    _genop($s, $or23);
    _push_($s);
    $n_1 = $n_0;
    label = 11;
    break;
   case 10:
    $shl26 = $8 << 23;
    $and28 = $sp << 14;
    $shl29 = $and28 & 8372224;
    $or27 = $shl29 | $shl26;
    $or30 = $or27 | 1;
    _genop($s, $or30);
    _push_($s);
    $inc = $n_0 + 1 | 0;
    $n_1 = $inc;
    label = 11;
    break;
   case 11:
    if ($tobool9) {
      label = 12;
      break;
    } else {
      label = 14;
      break;
    }
   case 12:
    $cdr34 = $6 + 4 | 0;
    $9 = HEAP32[$cdr34 >> 2] | 0;
    $tobool35 = ($9 | 0) == 0;
    if ($tobool35) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    _codegen($s, $9, 1);
    $sp38 = $s + 56 | 0;
    $10 = HEAP32[$sp38 >> 2] | 0;
    $dec39 = $10 - 1 | 0;
    HEAP32[$sp38 >> 2] = $dec39;
    $blk_0 = 0;
    $noop_1 = 1;
    label = 15;
    break;
   case 14:
    $sp41 = $s + 56 | 0;
    $11 = HEAP32[$sp41 >> 2] | 0;
    $blk_0 = $11;
    $noop_1 = $noop_0;
    label = 15;
    break;
   case 15:
    $sp43 = $s + 56 | 0;
    $12 = HEAP32[$sp43 >> 2] | 0;
    $add_neg = $n_1 ^ -1;
    $sub = $12 + $add_neg | 0;
    HEAP32[$sp43 >> 2] = $sub;
    $mrb = $s | 0;
    $13 = HEAP32[$mrb >> 2] | 0;
    $call45 = _mrb_sym2name_len($13, $_sink, $len) | 0;
    $tobool46 = ($noop_1 | 0) != 0;
    if ($tobool46) {
      label = 56;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $14 = HEAP32[$len >> 2] | 0;
    $cmp48 = ($14 | 0) == 1;
    if ($cmp48) {
      label = 17;
      break;
    } else {
      $25 = $14;
      label = 37;
      break;
    }
   case 17:
    $15 = HEAP8[$call45] | 0;
    $cmp52 = $15 << 24 >> 24 == 43;
    if ($cmp52) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    $16 = HEAP32[$sp43 >> 2] | 0;
    $shl57 = $16 << 23;
    $and59 = $call << 14;
    $shl60 = $and59 & 8372224;
    $and62 = $n_1 << 7;
    $shl63 = $and62 & 16256;
    $or58 = $shl60 | $shl63;
    $or61 = $or58 | $shl57;
    $or64 = $or61 | 44;
    _genop_peep($s, $or64, $val);
    label = 59;
    break;
   case 19:
    if ($tobool46) {
      label = 56;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $_pr = HEAP32[$len >> 2] | 0;
    $cmp68 = ($_pr | 0) == 1;
    if ($cmp68) {
      label = 21;
      break;
    } else {
      $25 = $_pr;
      label = 37;
      break;
    }
   case 21:
    $17 = HEAP8[$call45] | 0;
    $cmp73 = $17 << 24 >> 24 == 45;
    if ($cmp73) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    $18 = HEAP32[$sp43 >> 2] | 0;
    $shl78 = $18 << 23;
    $and80 = $call << 14;
    $shl81 = $and80 & 8372224;
    $and83 = $n_1 << 7;
    $shl84 = $and83 & 16256;
    $or79 = $shl81 | $shl84;
    $or82 = $or79 | $shl78;
    $or85 = $or82 | 46;
    _genop_peep($s, $or85, $val);
    label = 59;
    break;
   case 23:
    if ($tobool46) {
      label = 56;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $_pr125_pr = HEAP32[$len >> 2] | 0;
    $cmp89 = ($_pr125_pr | 0) == 1;
    if ($cmp89) {
      label = 25;
      break;
    } else {
      $25 = $_pr125_pr;
      label = 37;
      break;
    }
   case 25:
    $19 = HEAP8[$call45] | 0;
    $cmp94 = $19 << 24 >> 24 == 42;
    if ($cmp94) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    $20 = HEAP32[$sp43 >> 2] | 0;
    $shl99 = $20 << 23;
    $and101 = $call << 14;
    $shl102 = $and101 & 8372224;
    $and104 = $n_1 << 7;
    $shl105 = $and104 & 16256;
    $or100 = $shl102 | $shl105;
    $or103 = $or100 | $shl99;
    $or106 = $or103 | 48;
    _genop($s, $or106);
    label = 59;
    break;
   case 27:
    if ($tobool46) {
      label = 56;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $_pr121 = HEAP32[$len >> 2] | 0;
    $cmp110 = ($_pr121 | 0) == 1;
    if ($cmp110) {
      label = 29;
      break;
    } else {
      $25 = $_pr121;
      label = 37;
      break;
    }
   case 29:
    $21 = HEAP8[$call45] | 0;
    $cmp115 = $21 << 24 >> 24 == 47;
    if ($cmp115) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    $22 = HEAP32[$sp43 >> 2] | 0;
    $shl120 = $22 << 23;
    $and122 = $call << 14;
    $shl123 = $and122 & 8372224;
    $and125 = $n_1 << 7;
    $shl126 = $and125 & 16256;
    $or121 = $shl123 | $shl126;
    $or124 = $or121 | $shl120;
    $or127 = $or124 | 49;
    _genop($s, $or127);
    label = 59;
    break;
   case 31:
    if ($tobool46) {
      label = 56;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $_pr127_pr_pr = HEAP32[$len >> 2] | 0;
    $cmp131 = ($_pr127_pr_pr | 0) == 1;
    if ($cmp131) {
      label = 33;
      break;
    } else {
      $25 = $_pr127_pr_pr;
      label = 37;
      break;
    }
   case 33:
    $23 = HEAP8[$call45] | 0;
    $cmp136 = $23 << 24 >> 24 == 60;
    if ($cmp136) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    $24 = HEAP32[$sp43 >> 2] | 0;
    $shl141 = $24 << 23;
    $and143 = $call << 14;
    $shl144 = $and143 & 8372224;
    $and146 = $n_1 << 7;
    $shl147 = $and146 & 16256;
    $or142 = $shl144 | $shl147;
    $or145 = $or142 | $shl141;
    $or148 = $or145 | 51;
    _genop($s, $or148);
    label = 59;
    break;
   case 35:
    if ($tobool46) {
      label = 56;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    $_pr123 = HEAP32[$len >> 2] | 0;
    $25 = $_pr123;
    label = 37;
    break;
   case 37:
    $cmp152 = ($25 | 0) == 2;
    if ($cmp152) {
      label = 38;
      break;
    } else {
      label = 41;
      break;
    }
   case 38:
    $26 = HEAP8[$call45] | 0;
    $cmp157 = $26 << 24 >> 24 == 60;
    if ($cmp157) {
      label = 39;
      break;
    } else {
      label = 41;
      break;
    }
   case 39:
    $arrayidx160 = $call45 + 1 | 0;
    $27 = HEAP8[$arrayidx160] | 0;
    $cmp162 = $27 << 24 >> 24 == 61;
    if ($cmp162) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    $28 = HEAP32[$sp43 >> 2] | 0;
    $shl167 = $28 << 23;
    $and169 = $call << 14;
    $shl170 = $and169 & 8372224;
    $and172 = $n_1 << 7;
    $shl173 = $and172 & 16256;
    $or168 = $shl170 | $shl173;
    $or171 = $or168 | $shl167;
    $or174 = $or171 | 52;
    _genop($s, $or174);
    label = 59;
    break;
   case 41:
    if ($tobool46) {
      label = 56;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    $29 = HEAP32[$len >> 2] | 0;
    $cmp178 = ($29 | 0) == 1;
    if ($cmp178) {
      label = 43;
      break;
    } else {
      $32 = $29;
      label = 47;
      break;
    }
   case 43:
    $30 = HEAP8[$call45] | 0;
    $cmp183 = $30 << 24 >> 24 == 62;
    if ($cmp183) {
      label = 44;
      break;
    } else {
      label = 45;
      break;
    }
   case 44:
    $31 = HEAP32[$sp43 >> 2] | 0;
    $shl188 = $31 << 23;
    $and190 = $call << 14;
    $shl191 = $and190 & 8372224;
    $and193 = $n_1 << 7;
    $shl194 = $and193 & 16256;
    $or189 = $shl191 | $shl194;
    $or192 = $or189 | $shl188;
    $or195 = $or192 | 53;
    _genop($s, $or195);
    label = 59;
    break;
   case 45:
    if ($tobool46) {
      label = 56;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    $_pr124 = HEAP32[$len >> 2] | 0;
    $32 = $_pr124;
    label = 47;
    break;
   case 47:
    $cmp199 = ($32 | 0) == 2;
    if ($cmp199) {
      label = 48;
      break;
    } else {
      label = 51;
      break;
    }
   case 48:
    $33 = HEAP8[$call45] | 0;
    $cmp204 = $33 << 24 >> 24 == 62;
    if ($cmp204) {
      label = 49;
      break;
    } else {
      label = 51;
      break;
    }
   case 49:
    $arrayidx207 = $call45 + 1 | 0;
    $34 = HEAP8[$arrayidx207] | 0;
    $cmp209 = $34 << 24 >> 24 == 61;
    if ($cmp209) {
      label = 50;
      break;
    } else {
      label = 51;
      break;
    }
   case 50:
    $35 = HEAP32[$sp43 >> 2] | 0;
    $shl214 = $35 << 23;
    $and216 = $call << 14;
    $shl217 = $and216 & 8372224;
    $and219 = $n_1 << 7;
    $shl220 = $and219 & 16256;
    $or215 = $shl217 | $shl220;
    $or218 = $or215 | $shl214;
    $or221 = $or218 | 54;
    _genop($s, $or221);
    label = 59;
    break;
   case 51:
    if ($tobool46) {
      label = 56;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    $36 = HEAP32[$len >> 2] | 0;
    $cmp225 = ($36 | 0) == 2;
    if ($cmp225) {
      label = 53;
      break;
    } else {
      label = 56;
      break;
    }
   case 53:
    $37 = HEAP8[$call45] | 0;
    $cmp230 = $37 << 24 >> 24 == 61;
    if ($cmp230) {
      label = 54;
      break;
    } else {
      label = 56;
      break;
    }
   case 54:
    $arrayidx233 = $call45 + 1 | 0;
    $38 = HEAP8[$arrayidx233] | 0;
    $cmp235 = $38 << 24 >> 24 == 61;
    if ($cmp235) {
      label = 55;
      break;
    } else {
      label = 56;
      break;
    }
   case 55:
    $39 = HEAP32[$sp43 >> 2] | 0;
    $shl240 = $39 << 23;
    $and242 = $call << 14;
    $shl243 = $and242 & 8372224;
    $and245 = $n_1 << 7;
    $shl246 = $and245 & 16256;
    $or241 = $shl243 | $shl246;
    $or244 = $or241 | $shl240;
    $or247 = $or244 | 50;
    _genop($s, $or247);
    label = 59;
    break;
   case 56:
    $tobool249 = ($noop_0 | 0) == 0;
    $cmp252 = ($blk_0 | 0) > 0;
    $40 = HEAP32[$sp43 >> 2] | 0;
    $shl257 = $40 << 23;
    $and259 = $call << 14;
    $shl260 = $and259 & 8372224;
    $n_1_op = $n_1 << 7;
    $n_1_op_op = $n_1_op & 16256;
    $shl263 = $tobool249 ? $n_1_op_op : 16256;
    $or258 = $shl263 | $shl260;
    $or261 = $or258 | $shl257;
    if ($cmp252) {
      label = 57;
      break;
    } else {
      label = 58;
      break;
    }
   case 57:
    $or264 = $or261 | 32;
    _genop($s, $or264);
    label = 59;
    break;
   case 58:
    $or275 = $or261 | 33;
    _genop($s, $or275);
    label = 59;
    break;
   case 59:
    $tobool286 = ($val | 0) == 0;
    if ($tobool286) {
      label = 61;
      break;
    } else {
      label = 60;
      break;
    }
   case 60:
    _push_($s);
    label = 61;
    break;
   case 61:
    STACKTOP = __stackBase__;
    return;
  }
}
function _new_sym900($s, $sym) {
  $s = $s | 0;
  $sym = $sym | 0;
  var $irep = 0, $0 = 0, $slen = 0, $1 = 0, $syms = 0, $i_0 = 0, $cmp = 0, $2 = 0, $arrayidx = 0, $3 = 0, $cmp3 = 0, $inc = 0, $_off = 0, $4 = 0, $syms15 = 0, $5 = 0, $6 = 0, $call = 0, $7 = 0, $8 = 0, $syms17 = 0, $9 = 0, $slen2020 = 0, $10 = 0, $cmp2122 = 0, $11 = 0, $12 = 0, $i_123 = 0, $add = 0, $syms27 = 0, $13 = 0, $arrayidx28 = 0, $inc30 = 0, $14 = 0, $slen20 = 0, $15 = 0, $sub = 0, $cmp21 = 0, $slen20_lcssa = 0, $16 = 0, $slen36 = 0, $17 = 0, $syms38 = 0, $18 = 0, $arrayidx39 = 0, $19 = 0, $slen41 = 0, $20 = 0, $inc42 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $irep = $s + 100 | 0;
    $0 = HEAP32[$irep >> 2] | 0;
    $slen = $0 + 40 | 0;
    $1 = HEAP32[$slen >> 2] | 0;
    $syms = $0 + 20 | 0;
    $i_0 = 0;
    label = 3;
    break;
   case 3:
    $cmp = $i_0 >>> 0 < $1 >>> 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $2 = HEAP32[$syms >> 2] | 0;
    $arrayidx = $2 + ($i_0 << 1) | 0;
    $3 = HEAP16[$arrayidx >> 1] | 0;
    $cmp3 = $3 << 16 >> 16 == $sym << 16 >> 16;
    $inc = $i_0 + 1 | 0;
    if ($cmp3) {
      $retval_0 = $i_0;
      label = 10;
      break;
    } else {
      $i_0 = $inc;
      label = 3;
      break;
    }
   case 5:
    $_off = $1 - 126 | 0;
    $4 = $_off >>> 0 < 130;
    if ($4) {
      label = 6;
      break;
    } else {
      label = 9;
      break;
    }
   case 6:
    $syms15 = $0 + 20 | 0;
    $5 = HEAP32[$syms15 >> 2] | 0;
    $6 = $5;
    $call = _codegen_realloc($s, $6, 131072) | 0;
    $7 = $call;
    $8 = HEAP32[$irep >> 2] | 0;
    $syms17 = $8 + 20 | 0;
    HEAP32[$syms17 >> 2] = $7;
    $9 = HEAP32[$irep >> 2] | 0;
    $slen2020 = $9 + 40 | 0;
    $10 = HEAP32[$slen2020 >> 2] | 0;
    $cmp2122 = ($10 | 0) == 256;
    if ($cmp2122) {
      $slen20_lcssa = $slen2020;
      label = 8;
      break;
    } else {
      $i_123 = 0;
      $12 = $9;
      $11 = $10;
      label = 7;
      break;
    }
   case 7:
    $add = $11 + $i_123 | 0;
    $syms27 = $12 + 20 | 0;
    $13 = HEAP32[$syms27 >> 2] | 0;
    $arrayidx28 = $13 + ($add << 1) | 0;
    HEAP16[$arrayidx28 >> 1] = 0;
    $inc30 = $i_123 + 1 | 0;
    $14 = HEAP32[$irep >> 2] | 0;
    $slen20 = $14 + 40 | 0;
    $15 = HEAP32[$slen20 >> 2] | 0;
    $sub = 256 - $15 | 0;
    $cmp21 = $inc30 >>> 0 < $sub >>> 0;
    if ($cmp21) {
      $i_123 = $inc30;
      $12 = $14;
      $11 = $15;
      label = 7;
      break;
    } else {
      $slen20_lcssa = $slen20;
      label = 8;
      break;
    }
   case 8:
    HEAP32[$slen20_lcssa >> 2] = 256;
    label = 9;
    break;
   case 9:
    $16 = HEAP32[$irep >> 2] | 0;
    $slen36 = $16 + 40 | 0;
    $17 = HEAP32[$slen36 >> 2] | 0;
    $syms38 = $16 + 20 | 0;
    $18 = HEAP32[$syms38 >> 2] | 0;
    $arrayidx39 = $18 + ($17 << 1) | 0;
    HEAP16[$arrayidx39 >> 1] = $sym;
    $19 = HEAP32[$irep >> 2] | 0;
    $slen41 = $19 + 40 | 0;
    $20 = HEAP32[$slen41 >> 2] | 0;
    $inc42 = $20 + 1 | 0;
    HEAP32[$slen41 >> 2] = $inc42;
    $retval_0 = $20;
    label = 10;
    break;
   case 10:
    return $retval_0 | 0;
  }
  return 0;
}
function _gen_values($s, $t, $val) {
  $s = $s | 0;
  $t = $t | 0;
  $val = $val | 0;
  var $tobool53 = 0, $n_055 = 0, $t_addr_054 = 0, $cmp = 0, $car = 0, $0 = 0, $car1 = 0, $1 = 0, $cmp2 = 0, $tobool3 = 0, $sp = 0, $2 = 0, $sub = 0, $shl = 0, $and = 0, $shl8 = 0, $and10 = 0, $shl11 = 0, $or = 0, $or9 = 0, $or12 = 0, $car13 = 0, $3 = 0, $4 = 0, $dec16 = 0, $shl19 = 0, $add = 0, $and22 = 0, $shl23 = 0, $or20 = 0, $or24 = 0, $t_addr_1_in46 = 0, $t_addr_147 = 0, $tobool2648 = 0, $t_addr_149 = 0, $car28 = 0, $5 = 0, $6 = 0, $dec32 = 0, $7 = 0, $car34 = 0, $8 = 0, $cmp35 = 0, $shl39 = 0, $add42 = 0, $and43 = 0, $shl44 = 0, $or40 = 0, $or45 = 0, $or54 = 0, $t_addr_1_in = 0, $t_addr_1 = 0, $tobool26 = 0, $car57 = 0, $9 = 0, $cdr58 = 0, $10 = 0, $t_addr_2_in41 = 0, $t_addr_242 = 0, $tobool6143 = 0, $t_addr_244 = 0, $car63 = 0, $11 = 0, $t_addr_2_in = 0, $t_addr_2 = 0, $tobool61 = 0, $inc = 0, $cdr69 = 0, $12 = 0, $tobool = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool53 = ($t | 0) == 0;
    if ($tobool53) {
      $retval_0 = 0;
      label = 14;
      break;
    } else {
      $t_addr_054 = $t;
      $n_055 = 0;
      label = 3;
      break;
    }
   case 3:
    $cmp = ($n_055 | 0) > 126;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $car = $t_addr_054 | 0;
    $0 = HEAP32[$car >> 2] | 0;
    $car1 = $0 | 0;
    $1 = HEAP32[$car1 >> 2] | 0;
    $cmp2 = ($1 | 0) == 66;
    if ($cmp2) {
      label = 5;
      break;
    } else {
      label = 13;
      break;
    }
   case 5:
    $tobool3 = ($val | 0) == 0;
    if ($tobool3) {
      label = 11;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $sp = $s + 56 | 0;
    $2 = HEAP32[$sp >> 2] | 0;
    $sub = $2 - $n_055 | 0;
    HEAP32[$sp >> 2] = $sub;
    $shl = $sub << 23;
    $and = $sub << 14;
    $shl8 = $and & 8372224;
    $and10 = $n_055 << 7;
    $shl11 = $and10 & 16256;
    $or = $shl11 | $shl;
    $or9 = $or | $shl8;
    $or12 = $or9 | 55;
    _genop($s, $or12);
    _push_($s);
    $car13 = $t_addr_054 | 0;
    $3 = HEAP32[$car13 >> 2] | 0;
    _codegen($s, $3, 1);
    $4 = HEAP32[$sp >> 2] | 0;
    $dec16 = $4 - 2 | 0;
    HEAP32[$sp >> 2] = $dec16;
    $shl19 = $dec16 << 23;
    $add = $4 << 14;
    $and22 = $add + 8372224 | 0;
    $shl23 = $and22 & 8372224;
    $or20 = $shl19 | $shl23;
    $or24 = $or20 | 56;
    _genop($s, $or24);
    $t_addr_1_in46 = $t_addr_054 + 4 | 0;
    $t_addr_147 = HEAP32[$t_addr_1_in46 >> 2] | 0;
    $tobool2648 = ($t_addr_147 | 0) == 0;
    if ($tobool2648) {
      $retval_0 = -1;
      label = 14;
      break;
    } else {
      $t_addr_149 = $t_addr_147;
      label = 7;
      break;
    }
   case 7:
    _push_($s);
    $car28 = $t_addr_149 | 0;
    $5 = HEAP32[$car28 >> 2] | 0;
    _codegen($s, $5, 1);
    $6 = HEAP32[$sp >> 2] | 0;
    $dec32 = $6 - 2 | 0;
    HEAP32[$sp >> 2] = $dec32;
    $7 = HEAP32[$car28 >> 2] | 0;
    $car34 = $7 | 0;
    $8 = HEAP32[$car34 >> 2] | 0;
    $cmp35 = ($8 | 0) == 66;
    $shl39 = $dec32 << 23;
    $add42 = $6 << 14;
    $and43 = $add42 + 8372224 | 0;
    $shl44 = $and43 & 8372224;
    $or40 = $shl44 | $shl39;
    if ($cmp35) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $or45 = $or40 | 56;
    _genop($s, $or45);
    label = 10;
    break;
   case 9:
    $or54 = $or40 | 57;
    _genop($s, $or54);
    label = 10;
    break;
   case 10:
    $t_addr_1_in = $t_addr_149 + 4 | 0;
    $t_addr_1 = HEAP32[$t_addr_1_in >> 2] | 0;
    $tobool26 = ($t_addr_1 | 0) == 0;
    if ($tobool26) {
      $retval_0 = -1;
      label = 14;
      break;
    } else {
      $t_addr_149 = $t_addr_1;
      label = 7;
      break;
    }
   case 11:
    $car57 = $t_addr_054 | 0;
    $9 = HEAP32[$car57 >> 2] | 0;
    $cdr58 = $9 + 4 | 0;
    $10 = HEAP32[$cdr58 >> 2] | 0;
    _codegen($s, $10, 0);
    $t_addr_2_in41 = $t_addr_054 + 4 | 0;
    $t_addr_242 = HEAP32[$t_addr_2_in41 >> 2] | 0;
    $tobool6143 = ($t_addr_242 | 0) == 0;
    if ($tobool6143) {
      $retval_0 = -1;
      label = 14;
      break;
    } else {
      $t_addr_244 = $t_addr_242;
      label = 12;
      break;
    }
   case 12:
    $car63 = $t_addr_244 | 0;
    $11 = HEAP32[$car63 >> 2] | 0;
    _codegen($s, $11, 0);
    $t_addr_2_in = $t_addr_244 + 4 | 0;
    $t_addr_2 = HEAP32[$t_addr_2_in >> 2] | 0;
    $tobool61 = ($t_addr_2 | 0) == 0;
    if ($tobool61) {
      $retval_0 = -1;
      label = 14;
      break;
    } else {
      $t_addr_244 = $t_addr_2;
      label = 12;
      break;
    }
   case 13:
    _codegen($s, $0, $val);
    $inc = $n_055 + 1 | 0;
    $cdr69 = $t_addr_054 + 4 | 0;
    $12 = HEAP32[$cdr69 >> 2] | 0;
    $tobool = ($12 | 0) == 0;
    if ($tobool) {
      $retval_0 = $inc;
      label = 14;
      break;
    } else {
      $t_addr_054 = $12;
      $n_055 = $inc;
      label = 3;
      break;
    }
   case 14:
    return $retval_0 | 0;
  }
  return 0;
}
function _lv_idx($s, $id) {
  $s = $s | 0;
  $id = $id | 0;
  var $lv1 = 0, $lv_03 = 0, $tobool4 = 0, $conv3 = 0, $lv_06 = 0, $n_05 = 0, $car = 0, $0 = 0, $1 = 0, $sext = 0, $conv2 = 0, $cmp = 0, $inc = 0, $cdr = 0, $lv_0 = 0, $tobool = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $lv1 = $s + 52 | 0;
    $lv_03 = HEAP32[$lv1 >> 2] | 0;
    $tobool4 = ($lv_03 | 0) == 0;
    if ($tobool4) {
      $retval_0 = 0;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $conv3 = $id << 16 >> 16;
    $n_05 = 1;
    $lv_06 = $lv_03;
    label = 4;
    break;
   case 4:
    $car = $lv_06 | 0;
    $0 = HEAP32[$car >> 2] | 0;
    $1 = $0;
    $sext = $1 << 16;
    $conv2 = $sext >> 16;
    $cmp = ($conv2 | 0) == ($conv3 | 0);
    if ($cmp) {
      $retval_0 = $n_05;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $inc = $n_05 + 1 | 0;
    $cdr = $lv_06 + 4 | 0;
    $lv_0 = HEAP32[$cdr >> 2] | 0;
    $tobool = ($lv_0 | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 6;
      break;
    } else {
      $n_05 = $inc;
      $lv_06 = $lv_0;
      label = 4;
      break;
    }
   case 6:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_fixnum_value901($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_float_value902($agg_result, $f) {
  $agg_result = $agg_result | 0;
  $f = +$f;
  var $v_sroa_0_0__idx = 0;
  $v_sroa_0_0__idx = $agg_result | 0;
  HEAPF64[tempDoublePtr >> 3] = $f, HEAP32[$v_sroa_0_0__idx >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$v_sroa_0_0__idx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  HEAP32[$agg_result + 8 >> 2] = 6;
  return;
}
function _node_len($tree) {
  $tree = $tree | 0;
  var $tobool2 = 0, $n_04 = 0, $tree_addr_03 = 0, $inc = 0, $cdr = 0, $0 = 0, $tobool = 0, $n_0_lcssa = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool2 = ($tree | 0) == 0;
    if ($tobool2) {
      $n_0_lcssa = 0;
      label = 4;
      break;
    } else {
      $tree_addr_03 = $tree;
      $n_04 = 0;
      label = 3;
      break;
    }
   case 3:
    $inc = $n_04 + 1 | 0;
    $cdr = $tree_addr_03 + 4 | 0;
    $0 = HEAP32[$cdr >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      $n_0_lcssa = $inc;
      label = 4;
      break;
    } else {
      $tree_addr_03 = $0;
      $n_04 = $inc;
      label = 3;
      break;
    }
   case 4:
    return $n_0_lcssa | 0;
  }
  return 0;
}
function _calc_crc_16_ccitt($src, $nbytes, $crc) {
  $src = $src | 0;
  $nbytes = $nbytes | 0;
  $crc = $crc | 0;
  var $conv = 0, $shl = 0, $cmp9 = 0, $crcwk_012 = 0, $ibyte_011 = 0, $src_addr_010 = 0, $0 = 0, $conv2 = 0, $or = 0, $shl7 = 0, $and = 0, $tobool = 0, $xor = 0, $shl7_xor = 0, $shl7_1 = 0, $and_1 = 0, $tobool_1 = 0, $xor_1 = 0, $shl7_xor_1 = 0, $shl7_2 = 0, $and_2 = 0, $tobool_2 = 0, $xor_2 = 0, $shl7_xor_2 = 0, $shl7_3 = 0, $and_3 = 0, $tobool_3 = 0, $xor_3 = 0, $shl7_xor_3 = 0, $shl7_4 = 0, $and_4 = 0, $tobool_4 = 0, $xor_4 = 0, $shl7_xor_4 = 0, $shl7_5 = 0, $and_5 = 0, $tobool_5 = 0, $xor_5 = 0, $shl7_xor_5 = 0, $shl7_6 = 0, $and_6 = 0, $tobool_6 = 0, $xor_6 = 0, $shl7_xor_6 = 0, $shl7_7 = 0, $and_7 = 0, $tobool_7 = 0, $xor_7 = 0, $shl7_xor_7 = 0, $incdec_ptr = 0, $inc9 = 0, $exitcond = 0, $crcwk_0_lcssa = 0, $shr = 0, $conv11 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $conv = $crc & 65535;
    $shl = $conv << 8;
    $cmp9 = ($nbytes | 0) == 0;
    if ($cmp9) {
      $crcwk_0_lcssa = $shl;
      label = 4;
      break;
    } else {
      $src_addr_010 = $src;
      $ibyte_011 = 0;
      $crcwk_012 = $shl;
      label = 3;
      break;
    }
   case 3:
    $0 = HEAP8[$src_addr_010] | 0;
    $conv2 = $0 & 255;
    $or = $conv2 | $crcwk_012;
    $shl7 = $or << 1;
    $and = $shl7 & 16777216;
    $tobool = ($and | 0) == 0;
    $xor = $shl7 ^ 17834240;
    $shl7_xor = $tobool ? $shl7 : $xor;
    $shl7_1 = $shl7_xor << 1;
    $and_1 = $shl7_1 & 16777216;
    $tobool_1 = ($and_1 | 0) == 0;
    $xor_1 = $shl7_1 ^ 17834240;
    $shl7_xor_1 = $tobool_1 ? $shl7_1 : $xor_1;
    $shl7_2 = $shl7_xor_1 << 1;
    $and_2 = $shl7_2 & 16777216;
    $tobool_2 = ($and_2 | 0) == 0;
    $xor_2 = $shl7_2 ^ 17834240;
    $shl7_xor_2 = $tobool_2 ? $shl7_2 : $xor_2;
    $shl7_3 = $shl7_xor_2 << 1;
    $and_3 = $shl7_3 & 16777216;
    $tobool_3 = ($and_3 | 0) == 0;
    $xor_3 = $shl7_3 ^ 17834240;
    $shl7_xor_3 = $tobool_3 ? $shl7_3 : $xor_3;
    $shl7_4 = $shl7_xor_3 << 1;
    $and_4 = $shl7_4 & 16777216;
    $tobool_4 = ($and_4 | 0) == 0;
    $xor_4 = $shl7_4 ^ 17834240;
    $shl7_xor_4 = $tobool_4 ? $shl7_4 : $xor_4;
    $shl7_5 = $shl7_xor_4 << 1;
    $and_5 = $shl7_5 & 16777216;
    $tobool_5 = ($and_5 | 0) == 0;
    $xor_5 = $shl7_5 ^ 17834240;
    $shl7_xor_5 = $tobool_5 ? $shl7_5 : $xor_5;
    $shl7_6 = $shl7_xor_5 << 1;
    $and_6 = $shl7_6 & 16777216;
    $tobool_6 = ($and_6 | 0) == 0;
    $xor_6 = $shl7_6 ^ 17834240;
    $shl7_xor_6 = $tobool_6 ? $shl7_6 : $xor_6;
    $shl7_7 = $shl7_xor_6 << 1;
    $and_7 = $shl7_7 & 16777216;
    $tobool_7 = ($and_7 | 0) == 0;
    $xor_7 = $shl7_7 ^ 17834240;
    $shl7_xor_7 = $tobool_7 ? $shl7_7 : $xor_7;
    $incdec_ptr = $src_addr_010 + 1 | 0;
    $inc9 = $ibyte_011 + 1 | 0;
    $exitcond = ($inc9 | 0) == ($nbytes | 0);
    if ($exitcond) {
      $crcwk_0_lcssa = $shl7_xor_7;
      label = 4;
      break;
    } else {
      $src_addr_010 = $incdec_ptr;
      $ibyte_011 = $inc9;
      $crcwk_012 = $shl7_xor_7;
      label = 3;
      break;
    }
   case 4:
    $shr = $crcwk_0_lcssa >>> 8;
    $conv11 = $shr & 65535;
    return $conv11 | 0;
  }
  return 0;
}
function _gen_vmassignment($s, $tree, $rhs, $val) {
  $s = $s | 0;
  $tree = $tree | 0;
  $rhs = $rhs | 0;
  $val = $val | 0;
  var $car = 0, $0 = 0, $tobool = 0, $sp = 0, $and3 = 0, $shl4 = 0, $t_045 = 0, $n_044 = 0, $1 = 0, $shl = 0, $and6 = 0, $shl7 = 0, $or = 0, $or5 = 0, $or8 = 0, $car9 = 0, $2 = 0, $3 = 0, $inc = 0, $cdr = 0, $4 = 0, $tobool2 = 0, $n_1 = 0, $cdr11 = 0, $5 = 0, $tobool12 = 0, $cdr14 = 0, $6 = 0, $tobool15 = 0, $car18 = 0, $p_039 = 0, $tobool2040 = 0, $p_042 = 0, $post_041 = 0, $inc22 = 0, $cdr23 = 0, $p_0 = 0, $tobool20 = 0, $post_1 = 0, $tobool26 = 0, $sp28 = 0, $7 = 0, $shl30 = 0, $and32 = 0, $shl33 = 0, $or31 = 0, $or34 = 0, $sp36 = 0, $8 = 0, $dec = 0, $shl39 = 0, $and41 = 0, $shl42 = 0, $and44 = 0, $shl45 = 0, $or40 = 0, $or43 = 0, $or46 = 0, $car47 = 0, $9 = 0, $tobool48 = 0, $10 = 0, $11 = 0, $tobool54 = 0, $car56 = 0, $12 = 0, $tobool57 = 0, $t_138 = 0, $n_237 = 0, $car64 = 0, $13 = 0, $14 = 0, $add = 0, $cdr66 = 0, $15 = 0, $inc67 = 0, $tobool62 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $car = $tree | 0;
    $0 = HEAP32[$car >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      $n_1 = 0;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $sp = $s + 56 | 0;
    $and3 = $rhs << 14;
    $shl4 = $and3 & 8372224;
    $n_044 = 0;
    $t_045 = $0;
    label = 4;
    break;
   case 4:
    $1 = HEAP32[$sp >> 2] | 0;
    $shl = $1 << 23;
    $and6 = $n_044 << 7;
    $shl7 = $and6 & 16256;
    $or = $shl4 | $shl7;
    $or5 = $or | $shl;
    $or8 = $or5 | 58;
    _genop($s, $or8);
    $car9 = $t_045 | 0;
    $2 = HEAP32[$car9 >> 2] | 0;
    $3 = HEAP32[$sp >> 2] | 0;
    _gen_assignment($s, $2, $3, 0);
    $inc = $n_044 + 1 | 0;
    $cdr = $t_045 + 4 | 0;
    $4 = HEAP32[$cdr >> 2] | 0;
    $tobool2 = ($4 | 0) == 0;
    if ($tobool2) {
      $n_1 = $inc;
      label = 5;
      break;
    } else {
      $n_044 = $inc;
      $t_045 = $4;
      label = 4;
      break;
    }
   case 5:
    $cdr11 = $tree + 4 | 0;
    $5 = HEAP32[$cdr11 >> 2] | 0;
    $tobool12 = ($5 | 0) == 0;
    if ($tobool12) {
      label = 16;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $cdr14 = $5 + 4 | 0;
    $6 = HEAP32[$cdr14 >> 2] | 0;
    $tobool15 = ($6 | 0) == 0;
    if ($tobool15) {
      $post_1 = 0;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $car18 = $6 | 0;
    $p_039 = HEAP32[$car18 >> 2] | 0;
    $tobool2040 = ($p_039 | 0) == 0;
    if ($tobool2040) {
      $post_1 = 0;
      label = 9;
      break;
    } else {
      $post_041 = 0;
      $p_042 = $p_039;
      label = 8;
      break;
    }
   case 8:
    $inc22 = $post_041 + 1 | 0;
    $cdr23 = $p_042 + 4 | 0;
    $p_0 = HEAP32[$cdr23 >> 2] | 0;
    $tobool20 = ($p_0 | 0) == 0;
    if ($tobool20) {
      $post_1 = $inc22;
      label = 9;
      break;
    } else {
      $post_041 = $inc22;
      $p_042 = $p_0;
      label = 8;
      break;
    }
   case 9:
    $tobool26 = ($val | 0) == 0;
    if ($tobool26) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $sp28 = $s + 56 | 0;
    $7 = HEAP32[$sp28 >> 2] | 0;
    $shl30 = $7 << 23;
    $and32 = $rhs << 14;
    $shl33 = $and32 & 8372224;
    $or31 = $shl33 | $shl30;
    $or34 = $or31 | 1;
    _genop($s, $or34);
    _push_($s);
    label = 11;
    break;
   case 11:
    $sp36 = $s + 56 | 0;
    $8 = HEAP32[$sp36 >> 2] | 0;
    $dec = $8 - 1 | 0;
    HEAP32[$sp36 >> 2] = $dec;
    $shl39 = $dec << 23;
    $and41 = $n_1 << 14;
    $shl42 = $and41 & 8372224;
    $and44 = $post_1 << 7;
    $shl45 = $and44 & 16256;
    $or40 = $shl42 | $shl45;
    $or43 = $or40 | $shl39;
    $or46 = $or43 | 60;
    _genop($s, $or46);
    $car47 = $5 | 0;
    $9 = HEAP32[$car47 >> 2] | 0;
    $tobool48 = ($9 | 0) == 0;
    if ($tobool48) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $10 = HEAP32[$sp36 >> 2] | 0;
    _gen_assignment($s, $9, $10, 0);
    label = 13;
    break;
   case 13:
    $11 = HEAP32[$cdr14 >> 2] | 0;
    $tobool54 = ($11 | 0) == 0;
    if ($tobool54) {
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $car56 = $11 | 0;
    $12 = HEAP32[$car56 >> 2] | 0;
    $tobool57 = ($12 | 0) == 0;
    if ($tobool57) {
      label = 16;
      break;
    } else {
      $n_237 = 1;
      $t_138 = $12;
      label = 15;
      break;
    }
   case 15:
    $car64 = $t_138 | 0;
    $13 = HEAP32[$car64 >> 2] | 0;
    $14 = HEAP32[$sp36 >> 2] | 0;
    $add = $14 + $n_237 | 0;
    _gen_assignment($s, $13, $add, 0);
    $cdr66 = $t_138 + 4 | 0;
    $15 = HEAP32[$cdr66 >> 2] | 0;
    $inc67 = $n_237 + 1 | 0;
    $tobool62 = ($15 | 0) == 0;
    if ($tobool62) {
      label = 16;
      break;
    } else {
      $n_237 = $inc67;
      $t_138 = $15;
      label = 15;
      break;
    }
   case 16:
    return;
  }
}
function _loop_break($s, $tree) {
  $s = $s | 0;
  $tree = $tree | 0;
  var $loop = 0, $0 = 0, $tobool = 0, $tobool2 = 0, $sp = 0, $1 = 0, $dec = 0, $loop1_027 = 0, $type28 = 0, $2 = 0, $cmp29 = 0, $loop1_030 = 0, $prev = 0, $loop1_0 = 0, $type = 0, $3 = 0, $cmp = 0, $loop1_1 = 0, $type6 = 0, $4 = 0, $prev9 = 0, $5 = 0, $ensure_level = 0, $6 = 0, $7 = 0, $ensure_level15 = 0, $8 = 0, $cmp16 = 0, $sub = 0, $shl = 0, $or = 0, $acc = 0, $9 = 0, $shl25 = 0, $sp27 = 0, $10 = 0, $and28 = 0, $shl29 = 0, $or26 = 0, $or30 = 0, $call = 0, $pc3 = 0, $11 = 0, $add = 0, $and32 = 0, $shl33 = 0, $or34 = 0, $sp37 = 0, $12 = 0, $shl39 = 0, $or41 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $loop = $s + 72 | 0;
    $0 = HEAP32[$loop >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _codegen($s, $tree, 0);
    _raise_error($s, 107392);
    label = 16;
    break;
   case 4:
    $tobool2 = ($tree | 0) != 0;
    if ($tobool2) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _codegen($s, $tree, 1);
    $sp = $s + 56 | 0;
    $1 = HEAP32[$sp >> 2] | 0;
    $dec = $1 - 1 | 0;
    HEAP32[$sp >> 2] = $dec;
    label = 6;
    break;
   case 6:
    $loop1_027 = HEAP32[$loop >> 2] | 0;
    $type28 = $loop1_027 | 0;
    $2 = HEAP32[$type28 >> 2] | 0;
    $cmp29 = ($2 | 0) == 3;
    if ($cmp29) {
      $loop1_030 = $loop1_027;
      label = 7;
      break;
    } else {
      $loop1_1 = $loop1_027;
      label = 8;
      break;
    }
   case 7:
    _genop_peep($s, 8388636, 0);
    $prev = $loop1_030 + 24 | 0;
    $loop1_0 = HEAP32[$prev >> 2] | 0;
    $type = $loop1_0 | 0;
    $3 = HEAP32[$type >> 2] | 0;
    $cmp = ($3 | 0) == 3;
    if ($cmp) {
      $loop1_030 = $loop1_0;
      label = 7;
      break;
    } else {
      $loop1_1 = $loop1_0;
      label = 8;
      break;
    }
   case 8:
    $type6 = $loop1_1 | 0;
    $4 = HEAP32[$type6 >> 2] | 0;
    if (($4 | 0) == 4) {
      label = 9;
      break;
    } else if (($4 | 0) == 0) {
      label = 10;
      break;
    } else {
      label = 15;
      break;
    }
   case 9:
    $prev9 = $loop1_1 + 24 | 0;
    $5 = HEAP32[$prev9 >> 2] | 0;
    $loop1_1 = $5;
    label = 8;
    break;
   case 10:
    $ensure_level = $s + 76 | 0;
    $6 = HEAP32[$ensure_level >> 2] | 0;
    $7 = HEAP32[$loop >> 2] | 0;
    $ensure_level15 = $7 + 20 | 0;
    $8 = HEAP32[$ensure_level15 >> 2] | 0;
    $cmp16 = ($6 | 0) > ($8 | 0);
    if ($cmp16) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $sub = $6 - $8 | 0;
    $shl = $sub << 23;
    $or = $shl | 31;
    _genop_peep($s, $or, 0);
    label = 12;
    break;
   case 12:
    if ($tobool2) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $acc = $loop1_1 + 16 | 0;
    $9 = HEAP32[$acc >> 2] | 0;
    $shl25 = $9 << 23;
    $sp27 = $s + 56 | 0;
    $10 = HEAP32[$sp27 >> 2] | 0;
    $and28 = $10 << 14;
    $shl29 = $and28 & 8372224;
    $or26 = $shl25 | $shl29;
    $or30 = $or26 | 1;
    _genop_peep($s, $or30, 0);
    label = 14;
    break;
   case 14:
    $call = _new_label($s) | 0;
    $pc3 = $loop1_1 + 12 | 0;
    $11 = HEAP32[$pc3 >> 2] | 0;
    $add = $11 << 7;
    $and32 = $add + 4194176 | 0;
    $shl33 = $and32 & 8388480;
    $or34 = $shl33 | 23;
    _genop($s, $or34);
    HEAP32[$pc3 >> 2] = $call;
    label = 16;
    break;
   case 15:
    $sp37 = $s + 56 | 0;
    $12 = HEAP32[$sp37 >> 2] | 0;
    $shl39 = $12 << 23;
    $or41 = $shl39 | 16425;
    _genop($s, $or41);
    label = 16;
    break;
   case 16:
    return;
  }
}
function _raise_error($s, $msg) {
  $s = $s | 0;
  $msg = $msg | 0;
  var $agg_tmp = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $agg_tmp = __stackBase__ | 0;
  _mrb_str_new_cstr($agg_tmp, HEAP32[$s >> 2] | 0, $msg);
  _genop($s, _new_lit($s, $agg_tmp) << 7 & 8388480 | 8388683);
  STACKTOP = __stackBase__;
  return;
}
function _readint_mrb_int($s, $p, $base, $neg, $overflow) {
  $s = $s | 0;
  $p = $p | 0;
  $base = $base | 0;
  $neg = $neg | 0;
  $overflow = $overflow | 0;
  var $call = 0, $add_ptr = 0, $0 = 0, $cmp = 0, $incdec_ptr = 0, $incdec_ptr_p = 0, $cmp229 = 0, $tobool = 0, $result_031 = 0, $p_addr_030 = 0, $1 = 0, $conv4 = 0, $call5 = 0, $sext = 0, $conv10 = 0, $n_0 = 0, $cmp7 = 0, $arrayidx = 0, $2 = 0, $conv9 = 0, $cmp11 = 0, $inc = 0, $cmp15 = 0, $add = 0, $div = 0, $cmp20 = 0, $mul = 0, $sub = 0, $sub24 = 0, $div25 = 0, $cmp26 = 0, $mul30 = 0, $add31 = 0, $result_1 = 0, $incdec_ptr33 = 0, $cmp2 = 0, $result_0_lcssa = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _strlen($p | 0) | 0;
    $add_ptr = $p + $call | 0;
    $0 = HEAP8[$p] | 0;
    $cmp = $0 << 24 >> 24 == 43;
    $incdec_ptr = $p + 1 | 0;
    $incdec_ptr_p = $cmp ? $incdec_ptr : $p;
    $cmp229 = $incdec_ptr_p >>> 0 < $add_ptr >>> 0;
    if ($cmp229) {
      label = 3;
      break;
    } else {
      $result_0_lcssa = 0;
      label = 17;
      break;
    }
   case 3:
    $tobool = ($neg | 0) == 0;
    $p_addr_030 = $incdec_ptr_p;
    $result_031 = 0;
    label = 4;
    break;
   case 4:
    $1 = HEAP8[$p_addr_030] | 0;
    $conv4 = $1 & 255;
    $call5 = _tolower($conv4 | 0) | 0;
    $sext = $call5 << 24;
    $conv10 = $sext >> 24;
    $n_0 = 0;
    label = 5;
    break;
   case 5:
    $cmp7 = ($n_0 | 0) < ($base | 0);
    if ($cmp7) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $arrayidx = $n_0 + 78888 | 0;
    $2 = HEAP8[$arrayidx] | 0;
    $conv9 = $2 << 24 >> 24;
    $cmp11 = ($conv9 | 0) == ($conv10 | 0);
    $inc = $n_0 + 1 | 0;
    if ($cmp11) {
      label = 7;
      break;
    } else {
      $n_0 = $inc;
      label = 5;
      break;
    }
   case 7:
    $cmp15 = ($n_0 | 0) == ($base | 0);
    if ($cmp15) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    _codegen_error($s, 107868);
    label = 9;
    break;
   case 9:
    if ($tobool) {
      label = 13;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $add = $n_0 ^ -2147483648;
    $div = ($add | 0) / ($base | 0) & -1;
    $cmp20 = ($div | 0) > ($result_031 | 0);
    if ($cmp20) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    HEAP32[$overflow >> 2] = 1;
    $retval_0 = 0;
    label = 18;
    break;
   case 12:
    $mul = Math_imul($result_031, $base);
    $sub = $mul - $n_0 | 0;
    $result_1 = $sub;
    label = 16;
    break;
   case 13:
    $sub24 = 2147483647 - $n_0 | 0;
    $div25 = ($sub24 | 0) / ($base | 0) & -1;
    $cmp26 = ($div25 | 0) < ($result_031 | 0);
    if ($cmp26) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    HEAP32[$overflow >> 2] = 1;
    $retval_0 = 0;
    label = 18;
    break;
   case 15:
    $mul30 = Math_imul($result_031, $base);
    $add31 = $n_0 + $mul30 | 0;
    $result_1 = $add31;
    label = 16;
    break;
   case 16:
    $incdec_ptr33 = $p_addr_030 + 1 | 0;
    $cmp2 = $incdec_ptr33 >>> 0 < $add_ptr >>> 0;
    if ($cmp2) {
      $p_addr_030 = $incdec_ptr33;
      $result_031 = $result_1;
      label = 4;
      break;
    } else {
      $result_0_lcssa = $result_1;
      label = 17;
      break;
    }
   case 17:
    HEAP32[$overflow >> 2] = 0;
    $retval_0 = $result_0_lcssa;
    label = 18;
    break;
   case 18:
    return $retval_0 | 0;
  }
  return 0;
}
function _readint_float($s, $p, $base) {
  $s = $s | 0;
  $p = $p | 0;
  $base = $base | 0;
  var $call = 0, $add_ptr = 0, $0 = 0, $cmp = 0, $incdec_ptr = 0, $incdec_ptr_p = 0, $cmp218 = 0, $conv14 = 0.0, $scevgep = 0, $f_020 = 0.0, $p_addr_019 = 0, $1 = 0, $conv4 = 0, $call5 = 0, $sext = 0, $conv10 = 0, $n_0 = 0, $cmp7 = 0, $arrayidx = 0, $2 = 0, $conv9 = 0, $cmp11 = 0, $inc = 0, $mul = 0.0, $conv15 = 0.0, $add = 0.0, $f_1 = 0.0, $cmp17 = 0, $incdec_ptr21 = 0, $exitcond = 0, $f_0_lcssa = 0.0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _strlen($p | 0) | 0;
    $add_ptr = $p + $call | 0;
    $0 = HEAP8[$p] | 0;
    $cmp = $0 << 24 >> 24 == 43;
    $incdec_ptr = $p + 1 | 0;
    $incdec_ptr_p = $cmp ? $incdec_ptr : $p;
    $cmp218 = $incdec_ptr_p >>> 0 < $add_ptr >>> 0;
    if ($cmp218) {
      label = 3;
      break;
    } else {
      $f_0_lcssa = 0.0;
      label = 11;
      break;
    }
   case 3:
    $conv14 = +($base | 0);
    $scevgep = $p + $call | 0;
    $p_addr_019 = $incdec_ptr_p;
    $f_020 = 0.0;
    label = 4;
    break;
   case 4:
    $1 = HEAP8[$p_addr_019] | 0;
    $conv4 = $1 & 255;
    $call5 = _tolower($conv4 | 0) | 0;
    $sext = $call5 << 24;
    $conv10 = $sext >> 24;
    $n_0 = 0;
    label = 5;
    break;
   case 5:
    $cmp7 = ($n_0 | 0) < ($base | 0);
    if ($cmp7) {
      label = 6;
      break;
    } else {
      $f_1 = $f_020;
      label = 8;
      break;
    }
   case 6:
    $arrayidx = $n_0 + 78888 | 0;
    $2 = HEAP8[$arrayidx] | 0;
    $conv9 = $2 << 24 >> 24;
    $cmp11 = ($conv9 | 0) == ($conv10 | 0);
    $inc = $n_0 + 1 | 0;
    if ($cmp11) {
      label = 7;
      break;
    } else {
      $n_0 = $inc;
      label = 5;
      break;
    }
   case 7:
    $mul = $conv14 * $f_020;
    $conv15 = +($n_0 | 0);
    $add = $mul + $conv15;
    $f_1 = $add;
    label = 8;
    break;
   case 8:
    $cmp17 = ($n_0 | 0) == ($base | 0);
    if ($cmp17) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _codegen_error($s, 107868);
    label = 10;
    break;
   case 10:
    $incdec_ptr21 = $p_addr_019 + 1 | 0;
    $exitcond = ($incdec_ptr21 | 0) == ($scevgep | 0);
    if ($exitcond) {
      $f_0_lcssa = $f_1;
      label = 11;
      break;
    } else {
      $p_addr_019 = $incdec_ptr21;
      $f_020 = $f_1;
      label = 4;
      break;
    }
   case 11:
    return +$f_0_lcssa;
  }
  return 0.0;
}
function _new_lit($s, $val) {
  $s = $s | 0;
  $val = $val | 0;
  var $tt = 0, $0 = 0, $cond = 0, $irep = 0, $1 = 0, $plen25 = 0, $2 = 0, $pool26 = 0, $cmp26 = 0, $p6 = 0, $3 = 0, $i_027 = 0, $pool = 0, $4 = 0, $pv_sroa_2_8__idx2 = 0, $pv_sroa_2_8_copyload = 0, $cmp3 = 0, $arrayidx = 0, $pv_sroa_0_0__cast = 0, $pv_sroa_0_0_copyload = 0, $len4 = 0, $5 = 0, $6 = 0, $7 = 0, $len7 = 0, $8 = 0, $9 = 0, $cmp8 = 0, $ptr = 0, $10 = 0, $11 = 0, $ptr15 = 0, $12 = 0, $13 = 0, $call = 0, $cmp16 = 0, $inc = 0, $14 = 0, $plen = 0, $15 = 0, $cmp = 0, $i_1 = 0, $cmp23 = 0, $16 = 0, $arrayidx27 = 0, $call28 = 0, $tobool = 0, $inc32 = 0, $irep34 = 0, $17 = 0, $plen35 = 0, $18 = 0, $pcapa = 0, $19 = 0, $cmp36 = 0, $mul = 0, $20 = 0, $pool40 = 0, $21 = 0, $22 = 0, $mul42 = 0, $call43 = 0, $23 = 0, $24 = 0, $pool45 = 0, $25 = 0, $plen48 = 0, $26 = 0, $pool50 = 0, $27 = 0, $arrayidx51 = 0, $28 = 0, $29 = 0, $30 = 0, $plen53 = 0, $31 = 0, $inc54 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $val + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cond = ($0 | 0) == 16;
    $irep = $s + 100 | 0;
    $1 = HEAP32[$irep >> 2] | 0;
    $plen25 = $1 + 36 | 0;
    $2 = HEAP32[$plen25 >> 2] | 0;
    if ($cond) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $pool26 = $1 + 16 | 0;
    $i_1 = 0;
    label = 10;
    break;
   case 4:
    $cmp26 = ($2 | 0) == 0;
    if ($cmp26) {
      label = 12;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $p6 = $val;
    $i_027 = 0;
    $3 = $1;
    label = 6;
    break;
   case 6:
    $pool = $3 + 16 | 0;
    $4 = HEAP32[$pool >> 2] | 0;
    $pv_sroa_2_8__idx2 = $4 + ($i_027 * 12 & -1) + 8 | 0;
    $pv_sroa_2_8_copyload = HEAP32[$pv_sroa_2_8__idx2 >> 2] | 0;
    $cmp3 = ($pv_sroa_2_8_copyload | 0) == 16;
    if ($cmp3) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    $arrayidx = $4 + ($i_027 * 12 & -1) | 0;
    $pv_sroa_0_0__cast = $arrayidx;
    $pv_sroa_0_0_copyload = HEAP32[$pv_sroa_0_0__cast >> 2] | 0;
    $len4 = $pv_sroa_0_0_copyload + 12 | 0;
    $5 = $len4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = HEAP32[$p6 >> 2] | 0;
    $len7 = $7 + 12 | 0;
    $8 = $len7;
    $9 = HEAP32[$8 >> 2] | 0;
    $cmp8 = ($6 | 0) == ($9 | 0);
    if ($cmp8) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $ptr = $pv_sroa_0_0_copyload + 20 | 0;
    $10 = $ptr;
    $11 = HEAP32[$10 >> 2] | 0;
    $ptr15 = $7 + 20 | 0;
    $12 = $ptr15;
    $13 = HEAP32[$12 >> 2] | 0;
    $call = _memcmp($11 | 0, $13 | 0, $6 | 0) | 0;
    $cmp16 = ($call | 0) == 0;
    if ($cmp16) {
      $retval_0 = $i_027;
      label = 15;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $inc = $i_027 + 1 | 0;
    $14 = HEAP32[$irep >> 2] | 0;
    $plen = $14 + 36 | 0;
    $15 = HEAP32[$plen >> 2] | 0;
    $cmp = $inc >>> 0 < $15 >>> 0;
    if ($cmp) {
      $i_027 = $inc;
      $3 = $14;
      label = 6;
      break;
    } else {
      label = 12;
      break;
    }
   case 10:
    $cmp23 = $i_1 >>> 0 < $2 >>> 0;
    if ($cmp23) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $16 = HEAP32[$pool26 >> 2] | 0;
    $arrayidx27 = $16 + ($i_1 * 12 & -1) | 0;
    $call28 = _mrb_obj_equal(0, $arrayidx27, $val) | 0;
    $tobool = ($call28 | 0) == 0;
    $inc32 = $i_1 + 1 | 0;
    if ($tobool) {
      $i_1 = $inc32;
      label = 10;
      break;
    } else {
      $retval_0 = $i_1;
      label = 15;
      break;
    }
   case 12:
    $irep34 = $s + 100 | 0;
    $17 = HEAP32[$irep34 >> 2] | 0;
    $plen35 = $17 + 36 | 0;
    $18 = HEAP32[$plen35 >> 2] | 0;
    $pcapa = $s + 104 | 0;
    $19 = HEAP32[$pcapa >> 2] | 0;
    $cmp36 = ($18 | 0) == ($19 | 0);
    if ($cmp36) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $mul = $19 << 1;
    HEAP32[$pcapa >> 2] = $mul;
    $20 = HEAP32[$irep34 >> 2] | 0;
    $pool40 = $20 + 16 | 0;
    $21 = HEAP32[$pool40 >> 2] | 0;
    $22 = $21;
    $mul42 = $19 * 24 & -1;
    $call43 = _codegen_realloc($s, $22, $mul42) | 0;
    $23 = $call43;
    $24 = HEAP32[$irep34 >> 2] | 0;
    $pool45 = $24 + 16 | 0;
    HEAP32[$pool45 >> 2] = $23;
    label = 14;
    break;
   case 14:
    $25 = HEAP32[$irep34 >> 2] | 0;
    $plen48 = $25 + 36 | 0;
    $26 = HEAP32[$plen48 >> 2] | 0;
    $pool50 = $25 + 16 | 0;
    $27 = HEAP32[$pool50 >> 2] | 0;
    $arrayidx51 = $27 + ($26 * 12 & -1) | 0;
    $28 = $arrayidx51;
    $29 = $val;
    HEAP32[$28 >> 2] = HEAP32[$29 >> 2] | 0;
    HEAP32[$28 + 4 >> 2] = HEAP32[$29 + 4 >> 2] | 0;
    HEAP32[$28 + 8 >> 2] = HEAP32[$29 + 8 >> 2] | 0;
    $30 = HEAP32[$irep34 >> 2] | 0;
    $plen53 = $30 + 36 | 0;
    $31 = HEAP32[$plen53 >> 2] | 0;
    $inc54 = $31 + 1 | 0;
    HEAP32[$plen53 >> 2] = $inc54;
    $retval_0 = $31;
    label = 15;
    break;
   case 15:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _gen_literal_array($s, $tree, $sym, $val) {
  $s = $s | 0;
  $tree = $tree | 0;
  $sym = $sym | 0;
  $val = $val | 0;
  var $tobool = 0, $tobool4933 = 0, $sp = 0, $tobool14 = 0, $j_038 = 0, $i_037 = 0, $tree_addr_036 = 0, $car = 0, $0 = 0, $car2 = 0, $1 = 0, $2 = 0, $cdr = 0, $3 = 0, $cmp = 0, $cdr4 = 0, $4 = 0, $cdr5 = 0, $5 = 0, $cmp6 = 0, $6 = 0, $inc = 0, $cmp11 = 0, $inc13 = 0, $j_1 = 0, $cmp18 = 0, $7 = 0, $dec21 = 0, $shl = 0, $add = 0, $and24 = 0, $shl25 = 0, $or = 0, $or26 = 0, $i_132 = 0, $j_2 = 0, $cdr28 = 0, $8 = 0, $tobool1 = 0, $cmp29 = 0, $inc31 = 0, $tobool32 = 0, $i_2 = 0, $sp36 = 0, $9 = 0, $sub = 0, $shl39 = 0, $and38 = 0, $shl43 = 0, $and45 = 0, $shl46 = 0, $or40 = 0, $or44 = 0, $or47 = 0, $tree_addr_134 = 0, $car51 = 0, $10 = 0, $car52 = 0, $11 = 0, $12 = 0, $13 = 0, $cdr56 = 0, $14 = 0, $tobool49 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($val | 0) == 0;
    $tobool4933 = ($tree | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    if ($tobool4933) {
      $i_2 = 0;
      label = 19;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $sp = $s + 56 | 0;
    $tobool14 = ($sym | 0) == 0;
    $tree_addr_036 = $tree;
    $i_037 = 0;
    $j_038 = 0;
    label = 6;
    break;
   case 5:
    if ($tobool4933) {
      label = 23;
      break;
    } else {
      $tree_addr_134 = $tree;
      label = 20;
      break;
    }
   case 6:
    $car = $tree_addr_036 | 0;
    $0 = HEAP32[$car >> 2] | 0;
    $car2 = $0 | 0;
    $1 = HEAP32[$car2 >> 2] | 0;
    $2 = $1;
    if (($2 | 0) == 55) {
      label = 7;
      break;
    } else if (($2 | 0) == 17) {
      label = 9;
      break;
    } else if (($2 | 0) == 100) {
      label = 10;
      break;
    } else {
      $j_1 = $j_038;
      label = 13;
      break;
    }
   case 7:
    $cdr = $tree_addr_036 + 4 | 0;
    $3 = HEAP32[$cdr >> 2] | 0;
    $cmp = ($3 | 0) == 0;
    if ($cmp) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $cdr4 = $0 + 4 | 0;
    $4 = HEAP32[$cdr4 >> 2] | 0;
    $cdr5 = $4 + 4 | 0;
    $5 = HEAP32[$cdr5 >> 2] | 0;
    $cmp6 = ($5 | 0) == 0;
    if ($cmp6) {
      $j_1 = $j_038;
      label = 13;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $6 = HEAP32[$car >> 2] | 0;
    _codegen($s, $6, 1);
    $inc = $j_038 + 1 | 0;
    $j_1 = $inc;
    label = 13;
    break;
   case 10:
    $cmp11 = ($j_038 | 0) > 0;
    if ($cmp11) {
      label = 11;
      break;
    } else {
      $j_2 = $j_038;
      $i_132 = $i_037;
      label = 15;
      break;
    }
   case 11:
    $inc13 = $i_037 + 1 | 0;
    if ($tobool14) {
      $j_2 = 0;
      $i_132 = $inc13;
      label = 15;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    _gen_send_intern($s);
    $j_2 = 0;
    $i_132 = $inc13;
    label = 15;
    break;
   case 13:
    $cmp18 = ($j_1 | 0) > 1;
    if ($cmp18) {
      label = 14;
      break;
    } else {
      $j_2 = $j_1;
      $i_132 = $i_037;
      label = 15;
      break;
    }
   case 14:
    $7 = HEAP32[$sp >> 2] | 0;
    $dec21 = $7 - 2 | 0;
    HEAP32[$sp >> 2] = $dec21;
    $shl = $dec21 << 23;
    $add = $7 << 14;
    $and24 = $add + 8372224 | 0;
    $shl25 = $and24 & 8372224;
    $or = $shl | $shl25;
    $or26 = $or | 62;
    _genop_peep($s, $or26, 1);
    _push_($s);
    $j_2 = 1;
    $i_132 = $i_037;
    label = 15;
    break;
   case 15:
    $cdr28 = $tree_addr_036 + 4 | 0;
    $8 = HEAP32[$cdr28 >> 2] | 0;
    $tobool1 = ($8 | 0) == 0;
    if ($tobool1) {
      label = 16;
      break;
    } else {
      $tree_addr_036 = $8;
      $i_037 = $i_132;
      $j_038 = $j_2;
      label = 6;
      break;
    }
   case 16:
    $cmp29 = ($j_2 | 0) > 0;
    if ($cmp29) {
      label = 17;
      break;
    } else {
      $i_2 = $i_132;
      label = 19;
      break;
    }
   case 17:
    $inc31 = $i_132 + 1 | 0;
    $tobool32 = ($sym | 0) == 0;
    if ($tobool32) {
      $i_2 = $inc31;
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    _gen_send_intern($s);
    $i_2 = $inc31;
    label = 19;
    break;
   case 19:
    $sp36 = $s + 56 | 0;
    $9 = HEAP32[$sp36 >> 2] | 0;
    $sub = $9 - $i_2 | 0;
    HEAP32[$sp36 >> 2] = $sub;
    $shl39 = $sub << 23;
    $and38 = $sub << 14;
    $shl43 = $and38 & 8372224;
    $and45 = $i_2 << 7;
    $shl46 = $and45 & 16256;
    $or40 = $shl46 | $shl39;
    $or44 = $or40 | $shl43;
    $or47 = $or44 | 55;
    _genop($s, $or47);
    _push_($s);
    label = 23;
    break;
   case 20:
    $car51 = $tree_addr_134 | 0;
    $10 = HEAP32[$car51 >> 2] | 0;
    $car52 = $10 | 0;
    $11 = HEAP32[$car52 >> 2] | 0;
    $12 = $11;
    if (($12 | 0) == 17 | ($12 | 0) == 4) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    $13 = HEAP32[$car51 >> 2] | 0;
    _codegen($s, $13, 0);
    label = 22;
    break;
   case 22:
    $cdr56 = $tree_addr_134 + 4 | 0;
    $14 = HEAP32[$cdr56 >> 2] | 0;
    $tobool49 = ($14 | 0) == 0;
    if ($tobool49) {
      label = 23;
      break;
    } else {
      $tree_addr_134 = $14;
      label = 20;
      break;
    }
   case 23:
    return;
  }
}
function _mrb_intern903($mrb) {
  $mrb = $mrb | 0;
  return _mrb_intern_cstr($mrb, 109916) | 0;
}
function _gen_send_intern($s) {
  $s = $s | 0;
  var $sp = 0, $dec = 0;
  $sp = $s + 56 | 0;
  $dec = (HEAP32[$sp >> 2] | 0) - 1 | 0;
  HEAP32[$sp >> 2] = $dec;
  _genop($s, $dec << 23 | _new_msym($s, _mrb_intern2(HEAP32[$s >> 2] | 0, 108232, 6) | 0) << 14 & 8372224 | 32);
  _push_($s);
  return;
}
function _scope_finish($s) {
  $s = $s | 0;
  var $mrb1 = 0, $0 = 0, $irep2 = 0, $1 = 0, $flags = 0, $iseq = 0, $2 = 0, $tobool = 0, $3 = 0, $pc = 0, $4 = 0, $mul = 0, $call = 0, $5 = 0, $iseq4 = 0, $6 = 0, $ilen = 0, $lines = 0, $7 = 0, $tobool6 = 0, $8 = 0, $9 = 0, $mul10 = 0, $call11 = 0, $10 = 0, $lines12 = 0, $lines13 = 0, $pool = 0, $11 = 0, $12 = 0, $plen = 0, $13 = 0, $mul15 = 0, $call16 = 0, $14 = 0, $syms = 0, $15 = 0, $16 = 0, $slen = 0, $17 = 0, $mul18 = 0, $call19 = 0, $18 = 0, $filename = 0, $19 = 0, $tobool21 = 0, $call24 = 0, $add = 0, $call25 = 0, $20 = 0, $arrayidx = 0, $filename27 = 0, $nlocals = 0, $21 = 0, $conv = 0, $nlocals29 = 0, $nregs = 0, $22 = 0, $conv30 = 0, $nregs31 = 0, $ai = 0, $23 = 0, $mpool = 0, $24 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $mrb1 = $s | 0;
    $0 = HEAP32[$mrb1 >> 2] | 0;
    $irep2 = $s + 100 | 0;
    $1 = HEAP32[$irep2 >> 2] | 0;
    $flags = $1 + 8 | 0;
    HEAP8[$flags] = 0;
    $iseq = $s + 88 | 0;
    $2 = HEAP32[$iseq >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $3 = $2;
    $pc = $s + 60 | 0;
    $4 = HEAP32[$pc >> 2] | 0;
    $mul = $4 << 2;
    $call = _codegen_realloc($s, $3, $mul) | 0;
    $5 = $call;
    $iseq4 = $1 + 12 | 0;
    HEAP32[$iseq4 >> 2] = $5;
    $6 = HEAP32[$pc >> 2] | 0;
    $ilen = $1 + 32 | 0;
    HEAP32[$ilen >> 2] = $6;
    $lines = $s + 92 | 0;
    $7 = HEAP32[$lines >> 2] | 0;
    $tobool6 = ($7 | 0) == 0;
    if ($tobool6) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $8 = $7;
    $9 = HEAP32[$pc >> 2] | 0;
    $mul10 = $9 << 1;
    $call11 = _codegen_realloc($s, $8, $mul10) | 0;
    $10 = $call11;
    $lines12 = $1 + 28 | 0;
    HEAP32[$lines12 >> 2] = $10;
    label = 6;
    break;
   case 5:
    $lines13 = $1 + 28 | 0;
    HEAP32[$lines13 >> 2] = 0;
    label = 6;
    break;
   case 6:
    $pool = $1 + 16 | 0;
    $11 = HEAP32[$pool >> 2] | 0;
    $12 = $11;
    $plen = $1 + 36 | 0;
    $13 = HEAP32[$plen >> 2] | 0;
    $mul15 = $13 * 12 & -1;
    $call16 = _codegen_realloc($s, $12, $mul15) | 0;
    $14 = $call16;
    HEAP32[$pool >> 2] = $14;
    $syms = $1 + 20 | 0;
    $15 = HEAP32[$syms >> 2] | 0;
    $16 = $15;
    $slen = $1 + 40 | 0;
    $17 = HEAP32[$slen >> 2] | 0;
    $mul18 = $17 << 1;
    $call19 = _codegen_realloc($s, $16, $mul18) | 0;
    $18 = $call19;
    HEAP32[$syms >> 2] = $18;
    $filename = $s + 80 | 0;
    $19 = HEAP32[$filename >> 2] | 0;
    $tobool21 = ($19 | 0) == 0;
    if ($tobool21) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $call24 = _strlen($19 | 0) | 0;
    $add = $call24 + 1 | 0;
    $call25 = _codegen_malloc($s, $add) | 0;
    $20 = HEAP32[$filename >> 2] | 0;
    _memcpy($call25 | 0, $20 | 0, $call24);
    $arrayidx = $call25 + $call24 | 0;
    HEAP8[$arrayidx] = 0;
    $filename27 = $1 + 24 | 0;
    HEAP32[$filename27 >> 2] = $call25;
    label = 8;
    break;
   case 8:
    $nlocals = $s + 112 | 0;
    $21 = HEAP32[$nlocals >> 2] | 0;
    $conv = $21 & 65535;
    $nlocals29 = $1 + 4 | 0;
    HEAP16[$nlocals29 >> 1] = $conv;
    $nregs = $s + 116 | 0;
    $22 = HEAP32[$nregs >> 2] | 0;
    $conv30 = $22 & 65535;
    $nregs31 = $1 + 6 | 0;
    HEAP16[$nregs31 >> 1] = $conv30;
    $ai = $s + 120 | 0;
    $23 = HEAP32[$ai >> 2] | 0;
    _mrb_gc_arena_restore($0, $23);
    $mpool = $s + 4 | 0;
    $24 = HEAP32[$mpool >> 2] | 0;
    _mrb_pool_close($24);
    return;
  }
}
function _attrsym($s, $a) {
  $s = $s | 0;
  $a = $a | 0;
  var $len = 0, $mrb = 0, $call = 0, $call1 = 0, $call6 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  $len = __stackBase__ | 0;
  $mrb = $s | 0;
  $call = _mrb_sym2name_len(HEAP32[$mrb >> 2] | 0, $a, $len) | 0;
  $call1 = _codegen_palloc($s, (HEAP32[$len >> 2] | 0) + 1 | 0) | 0;
  _memcpy($call1 | 0, $call | 0, HEAP32[$len >> 2] | 0);
  HEAP8[$call1 + (HEAP32[$len >> 2] | 0) | 0] = 61;
  HEAP8[$call1 + ((HEAP32[$len >> 2] | 0) + 1 | 0) | 0] = 0;
  $call6 = _mrb_intern2(HEAP32[$mrb >> 2] | 0, $call1, (HEAP32[$len >> 2] | 0) + 1 | 0) | 0;
  STACKTOP = __stackBase__;
  return $call6 | 0;
}
function _codegen_palloc($s, $len) {
  $s = $s | 0;
  $len = $len | 0;
  var $mpool = 0, $0 = 0, $call = 0, $tobool = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $mpool = $s + 4 | 0;
    $0 = HEAP32[$mpool >> 2] | 0;
    $call = _mrb_pool_alloc($0, $len) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _codegen_error($s, 105936);
    label = 4;
    break;
   case 4:
    return $call | 0;
  }
  return 0;
}
function _mrb_exc_new($agg_result, $mrb, $c, $ptr, $len) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $c = $c | 0;
  $ptr = $ptr | 0;
  $len = $len | 0;
  var $agg_tmp = 0, $agg_tmp1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $agg_tmp = __stackBase__ | 0;
  $agg_tmp1 = __stackBase__ + 12 | 0;
  _mrb_obj_value942($agg_tmp, $c | 0);
  _mrb_str_new($agg_tmp1, $mrb, $ptr, $len);
  _mrb_funcall($agg_result, $mrb, $agg_tmp, 92904, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp1 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp1 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp1 + 8 >> 2] | 0, tempInt) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _scope_error() {
  _exit(1);
}
function _mrb_obj_value942($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_nil_value958($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_fixnum_value959($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_false_value960($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_bool_value961($agg_result, $boolean) {
  $agg_result = $agg_result | 0;
  $boolean = $boolean | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = $boolean << 24 >> 24 != 0 ? 2 : 0;
  return;
}
function _mrb_exc_new3($agg_result, $mrb, $c, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $c = $c | 0;
  $str = $str | 0;
  var $tmp = 0, $agg_tmp = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $tmp = __stackBase__ | 0;
  $agg_tmp = __stackBase__ + 12 | 0;
  _mrb_str_to_str($tmp, $mrb, $str);
  $0 = $str;
  $1 = $tmp;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  _mrb_obj_value942($agg_tmp, $c | 0);
  _mrb_funcall($agg_result, $mrb, $agg_tmp, 92904, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$str >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$str + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$str + 8 >> 2] | 0, tempInt) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _exc_debug_info($mrb, $exc) {
  $mrb = $mrb | 0;
  $exc = $exc | 0;
  var $agg_tmp = 0, $agg_tmp20 = 0, $agg_tmp23 = 0, $c = 0, $0 = 0, $ci1 = 0, $1 = 0, $pc2 = 0, $2 = 0, $call = 0, $3 = 0, $cibase = 0, $4 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $sub_ptr_div = 0, $ci_030 = 0, $5 = 0, $cibase531 = 0, $6 = 0, $cmp32 = 0, $ci_035 = 0, $_pn34 = 0, $pc_033 = 0, $proc = 0, $7 = 0, $tobool = 0, $8 = 0, $9 = 0, $and = 0, $cmp7 = 0, $irep9 = 0, $10 = 0, $filename = 0, $11 = 0, $tobool10 = 0, $lines = 0, $12 = 0, $tobool12 = 0, $iseq = 0, $13 = 0, $cmp14 = 0, $ilen = 0, $14 = 0, $add_ptr = 0, $cmp17 = 0, $call19 = 0, $15 = 0, $call22 = 0, $16 = 0, $sub_ptr_lhs_cast25 = 0, $sub_ptr_rhs_cast26 = 0, $sub_ptr_sub27 = 0, $sub_ptr_div28 = 0, $sub = 0, $17 = 0, $arrayidx = 0, $18 = 0, $conv = 0, $pc31 = 0, $19 = 0, $ci_0 = 0, $20 = 0, $cibase5 = 0, $21 = 0, $cmp = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $agg_tmp20 = __stackBase__ + 12 | 0;
    $agg_tmp23 = __stackBase__ + 24 | 0;
    $c = $mrb + 8 | 0;
    $0 = HEAP32[$c >> 2] | 0;
    $ci1 = $0 + 16 | 0;
    $1 = HEAP32[$ci1 >> 2] | 0;
    $pc2 = $1 + 20 | 0;
    $2 = HEAP32[$pc2 >> 2] | 0;
    $call = _mrb_intern2($mrb, 101964, 5) | 0;
    $3 = HEAP32[$c >> 2] | 0;
    $cibase = $3 + 20 | 0;
    $4 = HEAP32[$cibase >> 2] | 0;
    $sub_ptr_lhs_cast = $1;
    $sub_ptr_rhs_cast = $4;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $sub_ptr_div = ($sub_ptr_sub | 0) / 44 & -1;
    _mrb_fixnum_value959($agg_tmp, $sub_ptr_div);
    _mrb_obj_iv_set($mrb, $exc, $call, $agg_tmp);
    $ci_030 = $1 - 44 | 0;
    $5 = HEAP32[$c >> 2] | 0;
    $cibase531 = $5 + 20 | 0;
    $6 = HEAP32[$cibase531 >> 2] | 0;
    $cmp32 = $ci_030 >>> 0 < $6 >>> 0;
    if ($cmp32) {
      label = 11;
      break;
    } else {
      $pc_033 = $2;
      $_pn34 = $1;
      $ci_035 = $ci_030;
      label = 3;
      break;
    }
   case 3:
    $proc = $_pn34 - 44 + 4 | 0;
    $7 = HEAP32[$proc >> 2] | 0;
    $tobool = ($7 | 0) == 0;
    if ($tobool) {
      label = 10;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $8 = $7;
    $9 = HEAP32[$8 >> 2] | 0;
    $and = $9 & 262144;
    $cmp7 = ($and | 0) == 0;
    if ($cmp7) {
      label = 5;
      break;
    } else {
      label = 10;
      break;
    }
   case 5:
    $irep9 = $7 + 12 | 0;
    $10 = HEAP32[$irep9 >> 2] | 0;
    $filename = $10 + 24 | 0;
    $11 = HEAP32[$filename >> 2] | 0;
    $tobool10 = ($11 | 0) == 0;
    if ($tobool10) {
      label = 10;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $lines = $10 + 28 | 0;
    $12 = HEAP32[$lines >> 2] | 0;
    $tobool12 = ($12 | 0) == 0;
    if ($tobool12) {
      label = 10;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $iseq = $10 + 12 | 0;
    $13 = HEAP32[$iseq >> 2] | 0;
    $cmp14 = $13 >>> 0 > $pc_033 >>> 0;
    if ($cmp14) {
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $ilen = $10 + 32 | 0;
    $14 = HEAP32[$ilen >> 2] | 0;
    $add_ptr = $13 + ($14 << 2) | 0;
    $cmp17 = $pc_033 >>> 0 < $add_ptr >>> 0;
    if ($cmp17) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $call19 = _mrb_intern2($mrb, 104820, 4) | 0;
    $15 = HEAP32[$filename >> 2] | 0;
    _mrb_str_new_cstr($agg_tmp20, $mrb, $15);
    _mrb_obj_iv_set($mrb, $exc, $call19, $agg_tmp20);
    $call22 = _mrb_intern2($mrb, 104420, 4) | 0;
    $16 = HEAP32[$iseq >> 2] | 0;
    $sub_ptr_lhs_cast25 = $pc_033;
    $sub_ptr_rhs_cast26 = $16;
    $sub_ptr_sub27 = $sub_ptr_lhs_cast25 - $sub_ptr_rhs_cast26 | 0;
    $sub_ptr_div28 = $sub_ptr_sub27 >> 2;
    $sub = $sub_ptr_div28 - 1 | 0;
    $17 = HEAP32[$lines >> 2] | 0;
    $arrayidx = $17 + ($sub << 1) | 0;
    $18 = HEAP16[$arrayidx >> 1] | 0;
    $conv = $18 & 65535;
    _mrb_fixnum_value959($agg_tmp23, $conv);
    _mrb_obj_iv_set($mrb, $exc, $call22, $agg_tmp23);
    label = 11;
    break;
   case 10:
    $pc31 = $_pn34 - 44 + 20 | 0;
    $19 = HEAP32[$pc31 >> 2] | 0;
    $ci_0 = $ci_035 - 44 | 0;
    $20 = HEAP32[$c >> 2] | 0;
    $cibase5 = $20 + 20 | 0;
    $21 = HEAP32[$cibase5 >> 2] | 0;
    $cmp = $ci_0 >>> 0 < $21 >>> 0;
    if ($cmp) {
      label = 11;
      break;
    } else {
      $pc_033 = $19;
      $_pn34 = $ci_035;
      $ci_035 = $ci_0;
      label = 3;
      break;
    }
   case 11:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_raise($mrb, $c, $msg) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  $msg = $msg | 0;
  var $mesg = 0, $agg_tmp = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $mesg = __stackBase__ | 0;
  $agg_tmp = __stackBase__ + 12 | 0;
  _mrb_str_new_cstr($mesg, $mrb, $msg);
  _mrb_exc_new3($agg_tmp, $mrb, $c, $mesg);
  _mrb_exc_raise($mrb, $agg_tmp);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_vformat($agg_result, $mrb, $format, $ap) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $format = $format | 0;
  $ap = $ap | 0;
  var $ary = 0, $agg_tmp = 0, $agg_tmp17 = 0, $agg_tmp18 = 0, $agg_tmp31 = 0, $agg_tmp32 = 0, $0 = 0, $tobool374859 = 0, $1 = 0, $ap_addr_0_ph_ph62 = 0, $b_0_ph_ph61 = 0, $p_0_ph_ph60 = 0, $2 = 0, $b_0_ph50 = 0, $p_0_ph49 = 0, $3 = 0, $p_038 = 0, $incdec_ptr = 0, $4 = 0, $cmp3 = 0, $_pr = 0, $5 = 0, $tobool = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $sub = 0, $ap_next = 0, $tmpcast = 0, $add_ptr = 0, $6 = 0, $tobool3748 = 0, $7 = 0, $tobool11 = 0, $sub_ptr_lhs_cast13 = 0, $sub_ptr_rhs_cast14 = 0, $sub_ptr_sub15 = 0, $sub16 = 0, $incdec_ptr19 = 0, $8 = 0, $tobool37 = 0, $b_0_ph46 = 0, $p_1 = 0, $cmp24 = 0, $sub_ptr_lhs_cast28 = 0, $sub_ptr_rhs_cast29 = 0, $sub_ptr_sub30 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 72 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ary = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $agg_tmp17 = __stackBase__ + 24 | 0;
    $agg_tmp18 = __stackBase__ + 36 | 0;
    $agg_tmp31 = __stackBase__ + 48 | 0;
    $agg_tmp32 = __stackBase__ + 60 | 0;
    _mrb_ary_new_capa($ary, $mrb, 4);
    $0 = HEAP8[$format] | 0;
    $tobool374859 = $0 << 24 >> 24 == 0;
    if ($tobool374859) {
      label = 13;
      break;
    } else {
      $p_0_ph_ph60 = $format;
      $b_0_ph_ph61 = $format;
      $ap_addr_0_ph_ph62 = $ap;
      $1 = $0;
      label = 3;
      break;
    }
   case 3:
    $p_0_ph49 = $p_0_ph_ph60;
    $b_0_ph50 = $b_0_ph_ph61;
    $2 = $1;
    label = 4;
    break;
   case 4:
    $p_038 = $p_0_ph49;
    $3 = $2;
    label = 5;
    break;
   case 5:
    $incdec_ptr = $p_038 + 1 | 0;
    if (($3 << 24 >> 24 | 0) == 37) {
      label = 6;
      break;
    } else if (($3 << 24 >> 24 | 0) == 92) {
      label = 10;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $4 = HEAP8[$incdec_ptr] | 0;
    $cmp3 = $4 << 24 >> 24 == 83;
    if ($cmp3) {
      label = 9;
      break;
    } else {
      $5 = $4;
      label = 8;
      break;
    }
   case 7:
    $_pr = HEAP8[$incdec_ptr] | 0;
    $5 = $_pr;
    label = 8;
    break;
   case 8:
    $tobool = $5 << 24 >> 24 == 0;
    if ($tobool) {
      $p_1 = $incdec_ptr;
      $b_0_ph46 = $b_0_ph50;
      label = 12;
      break;
    } else {
      $p_038 = $incdec_ptr;
      $3 = $5;
      label = 5;
      break;
    }
   case 9:
    $sub_ptr_lhs_cast = $incdec_ptr;
    $sub_ptr_rhs_cast = $b_0_ph50;
    $sub_ptr_sub = $sub_ptr_rhs_cast ^ -1;
    $sub = $sub_ptr_lhs_cast + $sub_ptr_sub | 0;
    _mrb_str_new($agg_tmp, $mrb, $b_0_ph50, $sub);
    _mrb_ary_push($mrb, $ary, $agg_tmp);
    $ap_next = $ap_addr_0_ph_ph62 + 12 | 0;
    $tmpcast = $ap_addr_0_ph_ph62;
    _mrb_ary_push($mrb, $ary, $tmpcast);
    $add_ptr = $p_038 + 2 | 0;
    $6 = HEAP8[$incdec_ptr] | 0;
    $tobool3748 = $6 << 24 >> 24 == 0;
    if ($tobool3748) {
      $p_1 = $incdec_ptr;
      $b_0_ph46 = $add_ptr;
      label = 12;
      break;
    } else {
      $p_0_ph_ph60 = $incdec_ptr;
      $b_0_ph_ph61 = $add_ptr;
      $ap_addr_0_ph_ph62 = $ap_next;
      $1 = $6;
      label = 3;
      break;
    }
   case 10:
    $7 = HEAP8[$incdec_ptr] | 0;
    $tobool11 = $7 << 24 >> 24 == 0;
    if ($tobool11) {
      $p_1 = $incdec_ptr;
      $b_0_ph46 = $b_0_ph50;
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $sub_ptr_lhs_cast13 = $incdec_ptr;
    $sub_ptr_rhs_cast14 = $b_0_ph50;
    $sub_ptr_sub15 = $sub_ptr_rhs_cast14 ^ -1;
    $sub16 = $sub_ptr_lhs_cast13 + $sub_ptr_sub15 | 0;
    _mrb_str_new($agg_tmp17, $mrb, $b_0_ph50, $sub16);
    _mrb_ary_push($mrb, $ary, $agg_tmp17);
    _mrb_str_new($agg_tmp18, $mrb, $incdec_ptr, 1);
    _mrb_ary_push($mrb, $ary, $agg_tmp18);
    $incdec_ptr19 = $p_038 + 2 | 0;
    $8 = HEAP8[$incdec_ptr19] | 0;
    $tobool37 = $8 << 24 >> 24 == 0;
    if ($tobool37) {
      $p_1 = $incdec_ptr19;
      $b_0_ph46 = $incdec_ptr19;
      label = 12;
      break;
    } else {
      $p_0_ph49 = $incdec_ptr19;
      $b_0_ph50 = $incdec_ptr19;
      $2 = $8;
      label = 4;
      break;
    }
   case 12:
    $cmp24 = ($b_0_ph46 | 0) == ($format | 0);
    if ($cmp24) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    _mrb_str_new_cstr($agg_result, $mrb, $format);
    label = 15;
    break;
   case 14:
    $sub_ptr_lhs_cast28 = $p_1;
    $sub_ptr_rhs_cast29 = $b_0_ph46;
    $sub_ptr_sub30 = $sub_ptr_lhs_cast28 - $sub_ptr_rhs_cast29 | 0;
    _mrb_str_new($agg_tmp31, $mrb, $b_0_ph46, $sub_ptr_sub30);
    _mrb_ary_push($mrb, $ary, $agg_tmp31);
    _mrb_str_new($agg_tmp32, $mrb, 0, 0);
    _mrb_ary_join($agg_result, $mrb, $ary, $agg_tmp32);
    label = 15;
    break;
   case 15:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_format($agg_result, $mrb, $format, varrp) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $format = $format | 0;
  varrp = varrp | 0;
  var $ap = 0, $str = 0, $1 = 0, $2 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $ap = __stackBase__ | 0;
  $str = __stackBase__ + 4 | 0;
  HEAP32[$ap >> 2] = varrp;
  _mrb_vformat($str, $mrb, $format, HEAP32[$ap >> 2] | 0);
  $1 = $str;
  $2 = $agg_result;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_raisef($mrb, $c, $fmt, varrp) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  $fmt = $fmt | 0;
  varrp = varrp | 0;
  var $args = 0, $mesg = 0, $tmp = 0, $agg_tmp = 0, $1 = 0, $2 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  $args = __stackBase__ | 0;
  $mesg = __stackBase__ + 4 | 0;
  $tmp = __stackBase__ + 16 | 0;
  $agg_tmp = __stackBase__ + 28 | 0;
  HEAP32[$args >> 2] = varrp;
  _mrb_vformat($tmp, $mrb, $fmt, HEAP32[$args >> 2] | 0);
  $1 = $mesg;
  $2 = $tmp;
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
  HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
  _mrb_exc_new3($agg_tmp, $mrb, $c, $mesg);
  _mrb_exc_raise($mrb, $agg_tmp);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_name_error($mrb, $id, $fmt, varrp) {
  $mrb = $mrb | 0;
  $id = $id | 0;
  $fmt = $fmt | 0;
  varrp = varrp | 0;
  var $exc = 0, $argv = 0, $args = 0, $tmp = 0, $tmp4 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  $exc = __stackBase__ | 0;
  $argv = __stackBase__ + 12 | 0;
  $args = __stackBase__ + 36 | 0;
  $tmp = __stackBase__ + 40 | 0;
  $tmp4 = __stackBase__ + 52 | 0;
  HEAP32[$args >> 2] = varrp;
  _mrb_vformat($tmp, $mrb, $fmt, HEAP32[$args >> 2] | 0);
  $1 = $argv;
  $2 = $tmp;
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
  HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
  _mrb_symbol_value953($tmp4, $id);
  $3 = $argv + 12 | 0;
  $4 = $tmp4;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
  HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
  _mrb_class_new_instance($exc, $mrb, 2, $argv | 0, _mrb_class_get($mrb, 107316) | 0);
  _mrb_exc_raise($mrb, $exc);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_symbol_value953($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  var $v_sroa_1_2__raw_idx = 0, $v_sroa_1_2_idx = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP16[$agg_result >> 1] = $i;
  $v_sroa_1_2__raw_idx = $agg_result + 2 | 0;
  $v_sroa_1_2_idx = __stackBase__ | 0;
  HEAP16[$v_sroa_1_2__raw_idx >> 1] = HEAP16[$v_sroa_1_2_idx >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 2 >> 1] = HEAP16[$v_sroa_1_2_idx + 2 >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 4 >> 1] = HEAP16[$v_sroa_1_2_idx + 4 >> 1] | 0;
  HEAP32[$agg_result + 8 >> 2] = 4;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_warn($mrb, $fmt, varrp) {
  $mrb = $mrb | 0;
  $fmt = $fmt | 0;
  varrp = varrp | 0;
  var $ap = 0, $tmp = 0, $str_sroa_0_0_copyload = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $ap = __stackBase__ | 0;
  $tmp = __stackBase__ + 4 | 0;
  HEAP32[$ap >> 2] = varrp;
  _mrb_vformat($tmp, $mrb, $fmt, HEAP32[$ap >> 2] | 0);
  $str_sroa_0_0_copyload = HEAP32[$tmp >> 2] | 0;
  _fwrite(103484, 9, 1, HEAP32[_stderr >> 2] | 0);
  _fwrite(HEAP32[$str_sroa_0_0_copyload + 20 >> 2] | 0, HEAP32[$str_sroa_0_0_copyload + 12 >> 2] | 0, 1, HEAP32[_stderr >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _make_exception($agg_result, $mrb, $argc, $argv, $isstr) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $argc = $argc | 0;
  $argv = $argv | 0;
  $isstr = $isstr | 0;
  var $mesg = 0, $tmp6 = 0, $tmp14 = 0, $tmp25 = 0, $agg_tmp = 0, $0 = 0, $tt = 0, $1 = 0, $cmp = 0, $i = 0, $2 = 0, $tobool = 0, $tobool3 = 0, $3 = 0, $tt7 = 0, $4 = 0, $cmp8 = 0, $i11 = 0, $5 = 0, $tobool12 = 0, $call = 0, $6 = 0, $n_0 = 0, $call19 = 0, $call21 = 0, $tobool22 = 0, $add_ptr = 0, $7 = 0, $call26 = 0, $call28 = 0, $cmp29 = 0, $eException_class = 0, $8 = 0, $call31 = 0, $tobool32 = 0, $call34 = 0, $cmp36 = 0, $arrayidx38 = 0, $9 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 60 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $mesg = __stackBase__ | 0;
    $tmp6 = __stackBase__ + 12 | 0;
    $tmp14 = __stackBase__ + 24 | 0;
    $tmp25 = __stackBase__ + 36 | 0;
    $agg_tmp = __stackBase__ + 48 | 0;
    _mrb_nil_value958($mesg);
    $0 = $mesg;
    if (($argc | 0) == 1) {
      label = 3;
      break;
    } else if (($argc | 0) == 2 | ($argc | 0) == 3) {
      $n_0 = 1;
      label = 9;
      break;
    } else if (($argc | 0) == 0) {
      label = 18;
      break;
    } else {
      label = 12;
      break;
    }
   case 3:
    $tt = $argv + 8 | 0;
    $1 = HEAP32[$tt >> 2] | 0;
    $cmp = ($1 | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $i = $argv;
    $2 = HEAP32[$i >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 13;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $tobool3 = ($isstr | 0) == 0;
    if ($tobool3) {
      $n_0 = 0;
      label = 9;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _mrb_check_string_type($tmp6, $mrb, $argv);
    $3 = $tmp6;
    HEAP32[$0 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    $tt7 = $mesg + 8 | 0;
    $4 = HEAP32[$tt7 >> 2] | 0;
    $cmp8 = ($4 | 0) == 0;
    if ($cmp8) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $i11 = $mesg;
    $5 = HEAP32[$i11 >> 2] | 0;
    $tobool12 = ($5 | 0) == 0;
    if ($tobool12) {
      $n_0 = 0;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $call = _mrb_class_get($mrb, 95720) | 0;
    _mrb_exc_new3($tmp14, $mrb, $call, $mesg);
    $6 = $tmp14;
    HEAP32[$0 >> 2] = HEAP32[$6 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
    label = 13;
    break;
   case 9:
    $call19 = _mrb_intern2($mrb, 94628, 9) | 0;
    $call21 = _mrb_respond_to($mrb, $argv, $call19) | 0;
    $tobool22 = ($call21 | 0) == 0;
    if ($tobool22) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $add_ptr = $argv + 12 | 0;
    _mrb_funcall_argv($tmp25, $mrb, $argv, $call19, $n_0, $add_ptr);
    $7 = $tmp25;
    HEAP32[$0 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    label = 13;
    break;
   case 11:
    $call26 = _mrb_class_get($mrb, 93700) | 0;
    _mrb_raise($mrb, $call26, 92972);
    label = 13;
    break;
   case 12:
    $call28 = _mrb_class_get($mrb, 92184) | 0;
    _mrb_fixnum_value959($agg_tmp, $argc);
    _mrb_raisef($mrb, $call28, 111080, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    label = 13;
    break;
   case 13:
    $cmp29 = ($argc | 0) > 0;
    if ($cmp29) {
      label = 14;
      break;
    } else {
      label = 18;
      break;
    }
   case 14:
    $eException_class = $mrb + 572 | 0;
    $8 = HEAP32[$eException_class >> 2] | 0;
    $call31 = _mrb_obj_is_kind_of($mrb, $mesg, $8) | 0;
    $tobool32 = ($call31 | 0) == 0;
    if ($tobool32) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    $call34 = _mrb_class_get($mrb, 93700) | 0;
    _mrb_raise($mrb, $call34, 110388);
    label = 16;
    break;
   case 16:
    $cmp36 = ($argc | 0) > 2;
    if ($cmp36) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $arrayidx38 = $argv + 24 | 0;
    _set_backtrace($mrb, $mesg, $arrayidx38);
    label = 18;
    break;
   case 18:
    $9 = $agg_result;
    HEAP32[$9 >> 2] = HEAP32[$0 >> 2] | 0;
    HEAP32[$9 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 0;
    HEAP32[$9 + 8 >> 2] = HEAP32[$0 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _set_backtrace($mrb, $info, $bt) {
  $mrb = $mrb | 0;
  $info = $info | 0;
  $bt = $bt | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $info;
  $info = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$info >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$info + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$info + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $bt;
  $bt = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$bt >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$bt + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$bt + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_funcall(__stackBase__ | 0, $mrb, $info, 102180, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$bt >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$bt + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$bt + 8 >> 2] | 0, tempInt) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_make_exception($agg_result, $mrb, $argc, $argv) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $argc = $argc | 0;
  $argv = $argv | 0;
  _make_exception($agg_result, $mrb, $argc, $argv, 1);
  return;
}
function _mrb_init_exception($mrb) {
  $mrb = $mrb | 0;
  var $call = 0, $eException_class = 0, $call2 = 0;
  $call = _mrb_define_class($mrb, 108924, HEAP32[$mrb + 44 >> 2] | 0) | 0;
  $eException_class = $mrb + 572 | 0;
  HEAP32[$eException_class >> 2] = $call;
  _mrb_define_class_method($mrb, $call, 94628, 734, 0);
  _mrb_define_method($mrb, $call, 94628, 676, 0);
  _mrb_define_method($mrb, $call, 108484, 706, 0);
  _mrb_define_method($mrb, $call, 108228, 270, 0);
  _mrb_define_method($mrb, $call, 107824, 154, 0);
  _mrb_define_method($mrb, $call, 107360, 428, 0);
  _mrb_define_method($mrb, $call, 106764, 344, 0);
  $call2 = _mrb_define_class($mrb, 106460, HEAP32[$eException_class >> 2] | 0) | 0;
  HEAP32[$mrb + 576 >> 2] = $call2;
  _mrb_define_class($mrb, 95720, $call2);
  _mrb_define_class($mrb, 105628, _mrb_define_class($mrb, 105900, HEAP32[$eException_class >> 2] | 0) | 0);
  return;
}
function _exc_exception($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $exc = 0, $a = 0, $call = 0, $cmp = 0, $0 = 0, $1 = 0, $call1 = 0, $tobool = 0, $2 = 0, $3 = 0, $4 = 0, $call4 = 0, $5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $exc = __stackBase__ | 0;
    $a = __stackBase__ + 12 | 0;
    $call = _mrb_get_args($mrb, 102440, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $a, tempInt) | 0) | 0;
    $cmp = ($call | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $0 = $agg_result;
    $1 = $self;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 7;
    break;
   case 4:
    $call1 = _mrb_obj_equal(0, $self, $a) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $2 = $agg_result;
    $3 = $self;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    label = 7;
    break;
   case 6:
    _mrb_obj_clone($exc, $mrb, $self);
    $4 = $exc;
    $call4 = _mrb_intern2($mrb, 105288, 4) | 0;
    _mrb_iv_set($mrb, $exc, $call4, $a);
    $5 = $agg_result;
    HEAP32[$5 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _exc_initialize($agg_result, $mrb, $exc) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $exc = $exc | 0;
  var $mesg = 0, $call = 0, $cmp = 0, $call1 = 0, $0 = 0, $1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $exc;
  $exc = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$exc >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$exc + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$exc + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $mesg = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 102440, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $mesg, tempInt) | 0) | 0;
    $cmp = ($call | 0) == 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call1 = _mrb_intern2($mrb, 105288, 4) | 0;
    _mrb_iv_set($mrb, $exc, $call1, $mesg);
    label = 4;
    break;
   case 4:
    $0 = $agg_result;
    $1 = $exc;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _exc_equal($agg_result, $mrb, $exc) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $exc = $exc | 0;
  var $obj = 0, $mesg = 0, $tmp = 0, $tmp12 = 0, $agg_tmp = 0, $call = 0, $call1 = 0, $call2 = 0, $tobool = 0, $call3 = 0, $call4 = 0, $cmp = 0, $call6 = 0, $call7 = 0, $tobool8 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call14 = 0, $conv = 0, $equal_p_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 60 | 0;
  tempParam = $exc;
  $exc = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$exc >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$exc + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$exc + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $obj = __stackBase__ | 0;
    $mesg = __stackBase__ + 12 | 0;
    $tmp = __stackBase__ + 24 | 0;
    $tmp12 = __stackBase__ + 36 | 0;
    $agg_tmp = __stackBase__ + 48 | 0;
    $call = _mrb_intern2($mrb, 105288, 4) | 0;
    $call1 = _mrb_get_args($mrb, 102988, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $obj, tempInt) | 0) | 0;
    $call2 = _mrb_obj_equal(0, $exc, $obj) | 0;
    $tobool = ($call2 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $equal_p_0 = 1;
      label = 9;
      break;
    }
   case 3:
    $call3 = _mrb_obj_class($mrb, $exc) | 0;
    $call4 = _mrb_obj_class($mrb, $obj) | 0;
    $cmp = ($call3 | 0) == ($call4 | 0);
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call6 = _mrb_intern2($mrb, 107360, 7) | 0;
    $call7 = _mrb_respond_to($mrb, $obj, $call6) | 0;
    $tobool8 = ($call7 | 0) == 0;
    if ($tobool8) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _mrb_funcall($tmp, $mrb, $obj, 107360, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    $0 = $mesg;
    $1 = $tmp;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 8;
    break;
   case 6:
    _mrb_false_value960($agg_result);
    label = 10;
    break;
   case 7:
    _mrb_attr_get($tmp12, 0, $obj, $call);
    $2 = $mesg;
    $3 = $tmp12;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    label = 8;
    break;
   case 8:
    _mrb_attr_get($agg_tmp, 0, $exc, $call);
    $call14 = _mrb_equal($mrb, $agg_tmp, $mesg) | 0;
    $conv = $call14 & 255;
    $equal_p_0 = $conv;
    label = 9;
    break;
   case 9:
    _mrb_bool_value961($agg_result, $equal_p_0);
    label = 10;
    break;
   case 10:
    STACKTOP = __stackBase__;
    return;
  }
}
function _exc_to_s($agg_result, $mrb, $exc) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $exc = $exc | 0;
  var $mesg = 0, $call = 0, $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $tobool = 0, $call1 = 0, $2 = 0, $3 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $exc;
  $exc = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$exc >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$exc + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$exc + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $mesg = __stackBase__ | 0;
    $call = _mrb_intern2($mrb, 105288, 4) | 0;
    _mrb_attr_get($mesg, 0, $exc, $call);
    $tt = $mesg + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $i = $mesg;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $call1 = _mrb_obj_classname($mrb, $exc) | 0;
    _mrb_str_new_cstr($agg_result, $mrb, $call1);
    label = 6;
    break;
   case 5:
    $2 = $agg_result;
    $3 = $mesg;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _exc_message($agg_result, $mrb, $exc) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $exc = $exc | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $exc;
  $exc = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$exc >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$exc + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$exc + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_funcall($agg_result, $mrb, $exc, 107824, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _exc_inspect($agg_result, $mrb, $exc) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $exc = $exc | 0;
  var $str = 0, $mesg = 0, $line = 0, $tmp2 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp25 = 0, $tmp26 = 0, $tmp28 = 0, $tmp41 = 0, $tmp44 = 0, $tmp57 = 0, $tmp58 = 0, $tmp60 = 0, $tmp62 = 0, $call = 0, $call1 = 0, $0 = 0, $file_sroa_0_0__cast1 = 0, $file_sroa_0_0_copyload2 = 0, $file_sroa_1_4__idx3 = 0, $file_sroa_1_4__cast4 = 0, $file_sroa_1_4_copyload5 = 0, $file_sroa_2_8__idx7 = 0, $file_sroa_2_8_copyload8 = 0, $call3 = 0, $1 = 0, $2 = 0, $tt6 = 0, $3 = 0, $cmp7 = 0, $i10 = 0, $4 = 0, $tobool11 = 0, $5 = 0, $file_sroa_0_0__cast = 0, $file_sroa_1_4__idx = 0, $file_sroa_1_4__cast = 0, $file_sroa_2_8__idx6 = 0, $tt15 = 0, $6 = 0, $cmp16 = 0, $i19 = 0, $7 = 0, $tobool20 = 0, $p = 0, $8 = 0, $len = 0, $9 = 0, $10 = 0, $cmp23 = 0, $call27 = 0, $11 = 0, $cmp30 = 0, $i33 = 0, $12 = 0, $tobool34 = 0, $p37 = 0, $13 = 0, $len38 = 0, $14 = 0, $15 = 0, $cmp39 = 0, $call43 = 0, $16 = 0, $17 = 0, $tt45 = 0, $18 = 0, $cmp46 = 0, $i49 = 0, $19 = 0, $tobool50 = 0, $p53 = 0, $20 = 0, $len54 = 0, $21 = 0, $22 = 0, $cmp55 = 0, $call61 = 0, $23 = 0, $24 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 192 | 0;
  tempParam = $exc;
  $exc = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$exc >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$exc + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$exc + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $str = __stackBase__ | 0;
    $mesg = __stackBase__ + 12 | 0;
    $line = __stackBase__ + 24 | 0;
    $tmp2 = __stackBase__ + 36 | 0;
    $tmp12 = __stackBase__ + 48 | 0;
    $tmp13 = __stackBase__ + 60 | 0;
    $tmp14 = __stackBase__ + 72 | 0;
    $tmp25 = __stackBase__ + 84 | 0;
    $tmp26 = __stackBase__ + 96 | 0;
    $tmp28 = __stackBase__ + 108 | 0;
    $tmp41 = __stackBase__ + 120 | 0;
    $tmp44 = __stackBase__ + 132 | 0;
    $tmp57 = __stackBase__ + 144 | 0;
    $tmp58 = __stackBase__ + 156 | 0;
    $tmp60 = __stackBase__ + 168 | 0;
    $tmp62 = __stackBase__ + 180 | 0;
    $call = _mrb_intern2($mrb, 105288, 4) | 0;
    _mrb_attr_get($mesg, 0, $exc, $call);
    $call1 = _mrb_intern2($mrb, 104820, 4) | 0;
    _mrb_attr_get($tmp2, 0, $exc, $call1);
    $0 = $tmp2;
    $file_sroa_0_0__cast1 = $tmp2;
    $file_sroa_0_0_copyload2 = HEAP32[$file_sroa_0_0__cast1 >> 2] | 0;
    $file_sroa_1_4__idx3 = $0 + 4 | 0;
    $file_sroa_1_4__cast4 = $file_sroa_1_4__idx3;
    $file_sroa_1_4_copyload5 = HEAP32[$file_sroa_1_4__cast4 >> 2] | 0;
    $file_sroa_2_8__idx7 = $tmp2 + 8 | 0;
    $file_sroa_2_8_copyload8 = HEAP32[$file_sroa_2_8__idx7 >> 2] | 0;
    $call3 = _mrb_intern2($mrb, 104420, 4) | 0;
    _mrb_attr_get($line, 0, $exc, $call3);
    $1 = $file_sroa_2_8_copyload8 | $file_sroa_0_0_copyload2;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 13;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $tt6 = $line + 8 | 0;
    $3 = HEAP32[$tt6 >> 2] | 0;
    $cmp7 = ($3 | 0) == 0;
    if ($cmp7) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $i10 = $line;
    $4 = HEAP32[$i10 >> 2] | 0;
    $tobool11 = ($4 | 0) == 0;
    if ($tobool11) {
      label = 13;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $5 = $str;
    $file_sroa_0_0__cast = $str;
    HEAP32[$file_sroa_0_0__cast >> 2] = $file_sroa_0_0_copyload2;
    $file_sroa_1_4__idx = $5 + 4 | 0;
    $file_sroa_1_4__cast = $file_sroa_1_4__idx;
    HEAP32[$file_sroa_1_4__cast >> 2] = $file_sroa_1_4_copyload5;
    $file_sroa_2_8__idx6 = $str + 8 | 0;
    HEAP32[$file_sroa_2_8__idx6 >> 2] = $file_sroa_2_8_copyload8;
    _mrb_str_cat($tmp12, $mrb, $str, 104084, 1);
    _mrb_str_append($tmp13, $mrb, $str, $line);
    _mrb_str_cat($tmp14, $mrb, $str, 103844, 2);
    $tt15 = $mesg + 8 | 0;
    $6 = HEAP32[$tt15 >> 2] | 0;
    $cmp16 = ($6 | 0) == 0;
    if ($cmp16) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $i19 = $mesg;
    $7 = HEAP32[$i19 >> 2] | 0;
    $tobool20 = ($7 | 0) == 0;
    if ($tobool20) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $p = $mesg;
    $8 = HEAP32[$p >> 2] | 0;
    $len = $8 + 12 | 0;
    $9 = $len;
    $10 = HEAP32[$9 >> 2] | 0;
    $cmp23 = ($10 | 0) > 0;
    if ($cmp23) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    _mrb_str_append($tmp25, $mrb, $str, $mesg);
    _mrb_str_cat($tmp26, $mrb, $str, 103516, 2);
    label = 9;
    break;
   case 9:
    $call27 = _mrb_obj_classname($mrb, $exc) | 0;
    _mrb_str_cat_cstr($tmp28, $mrb, $str, $call27);
    $11 = HEAP32[$tt15 >> 2] | 0;
    $cmp30 = ($11 | 0) == 0;
    if ($cmp30) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $i33 = $mesg;
    $12 = HEAP32[$i33 >> 2] | 0;
    $tobool34 = ($12 | 0) == 0;
    if ($tobool34) {
      label = 18;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $p37 = $mesg;
    $13 = HEAP32[$p37 >> 2] | 0;
    $len38 = $13 + 12 | 0;
    $14 = $len38;
    $15 = HEAP32[$14 >> 2] | 0;
    $cmp39 = ($15 | 0) > 0;
    if ($cmp39) {
      label = 12;
      break;
    } else {
      label = 18;
      break;
    }
   case 12:
    _mrb_str_cat($tmp41, $mrb, $str, 103252, 1);
    label = 18;
    break;
   case 13:
    $call43 = _mrb_obj_classname($mrb, $exc) | 0;
    _mrb_str_new_cstr($tmp44, $mrb, $call43);
    $16 = $str;
    $17 = $tmp44;
    HEAP32[$16 >> 2] = HEAP32[$17 >> 2] | 0;
    HEAP32[$16 + 4 >> 2] = HEAP32[$17 + 4 >> 2] | 0;
    HEAP32[$16 + 8 >> 2] = HEAP32[$17 + 8 >> 2] | 0;
    $tt45 = $mesg + 8 | 0;
    $18 = HEAP32[$tt45 >> 2] | 0;
    $cmp46 = ($18 | 0) == 0;
    if ($cmp46) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $i49 = $mesg;
    $19 = HEAP32[$i49 >> 2] | 0;
    $tobool50 = ($19 | 0) == 0;
    if ($tobool50) {
      label = 17;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $p53 = $mesg;
    $20 = HEAP32[$p53 >> 2] | 0;
    $len54 = $20 + 12 | 0;
    $21 = $len54;
    $22 = HEAP32[$21 >> 2] | 0;
    $cmp55 = ($22 | 0) > 0;
    if ($cmp55) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    _mrb_str_cat($tmp57, $mrb, $str, 103844, 2);
    _mrb_str_append($tmp58, $mrb, $str, $mesg);
    label = 18;
    break;
   case 17:
    _mrb_str_cat($tmp60, $mrb, $str, 103844, 2);
    $call61 = _mrb_obj_classname($mrb, $exc) | 0;
    _mrb_str_cat_cstr($tmp62, $mrb, $str, $call61);
    label = 18;
    break;
   case 18:
    $23 = $agg_result;
    $24 = $str;
    HEAP32[$23 >> 2] = HEAP32[$24 >> 2] | 0;
    HEAP32[$23 + 4 >> 2] = HEAP32[$24 + 4 >> 2] | 0;
    HEAP32[$23 + 8 >> 2] = HEAP32[$24 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_realloc($mrb, $p, $len) {
  $mrb = $mrb | 0;
  $p = $p | 0;
  $len = $len | 0;
  var $allocf = 0, $0 = 0, $ud = 0, $1 = 0, $call = 0, $tobool = 0, $cmp = 0, $or_cond = 0, $heaps = 0, $2 = 0, $tobool2 = 0, $3 = 0, $4 = 0, $call5 = 0, $p2_0 = 0, $tobool6 = 0, $or_cond19 = 0, $5 = 0, $6 = 0, $bf_clear = 0, $tobool10 = 0, $7 = 0, $call13 = 0, $8 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $allocf = $mrb + 4 | 0;
    $0 = HEAP32[$allocf >> 2] | 0;
    $ud = $mrb + 580 | 0;
    $1 = HEAP32[$ud >> 2] | 0;
    $call = FUNCTION_TABLE_iiiii[$0 & 1023]($mrb, $p, $len, $1) | 0;
    $tobool = ($call | 0) != 0;
    $cmp = ($len | 0) == 0;
    $or_cond = $tobool | $cmp;
    if ($or_cond) {
      $p2_0 = $call;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $heaps = $mrb + 100 | 0;
    $2 = HEAP32[$heaps >> 2] | 0;
    $tobool2 = ($2 | 0) == 0;
    if ($tobool2) {
      $p2_0 = $call;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _mrb_garbage_collect($mrb);
    $3 = HEAP32[$allocf >> 2] | 0;
    $4 = HEAP32[$ud >> 2] | 0;
    $call5 = FUNCTION_TABLE_iiiii[$3 & 1023]($mrb, $p, $len, $4) | 0;
    $p2_0 = $call5;
    label = 5;
    break;
   case 5:
    $tobool6 = ($p2_0 | 0) != 0;
    $or_cond19 = $tobool6 | $cmp;
    $5 = $mrb + 552 | 0;
    $6 = HEAP8[$5] | 0;
    if ($or_cond19) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $bf_clear = $6 & 8;
    $tobool10 = $bf_clear << 24 >> 24 == 0;
    if ($tobool10) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    $7 = $6 | 8;
    HEAP8[$5] = $7;
    $call13 = _mrb_class_get($mrb, 92328) | 0;
    _mrb_raise($mrb, $call13, 106884);
    label = 9;
    break;
   case 8:
    $8 = $6 & -9;
    HEAP8[$5] = $8;
    label = 9;
    break;
   case 9:
    return $p2_0 | 0;
  }
  return 0;
}
function _mrb_garbage_collect($mrb) {
  $mrb = $mrb | 0;
  var $0 = 0, $1 = 0, $bf_clear = 0, $tobool = 0, $gc_state = 0, $2 = 0, $cmp = 0, $call = 0, $_pr = 0, $phitmp = 0, $3 = 0, $bf_clear6 = 0, $tobool7 = 0, $4 = 0, $5 = 0, $call11 = 0, $6 = 0, $cmp13 = 0, $gc_live_after_mark = 0, $7 = 0, $div = 0, $gc_interval_ratio = 0, $8 = 0, $mul = 0, $gc_threshold = 0, $9 = 0, $bf_clear15 = 0, $tobool16 = 0, $10 = 0, $div19 = 0, $mul20 = 0, $majorgc_old_threshold = 0, $11 = 0, $12 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $mrb + 552 | 0;
    $1 = HEAP8[$0] | 0;
    $bf_clear = $1 & 1;
    $tobool = $bf_clear << 24 >> 24 == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 10;
      break;
    }
   case 3:
    $gc_state = $mrb + 520 | 0;
    $2 = HEAP32[$gc_state >> 2] | 0;
    $cmp = ($2 | 0) == 2;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $call = _incremental_gc($mrb, -1) | 0;
    $_pr = HEAP32[$gc_state >> 2] | 0;
    $phitmp = ($_pr | 0) == 0;
    if ($phitmp) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 5:
    $3 = HEAP8[$0] | 0;
    $bf_clear6 = $3 & 4;
    $tobool7 = $bf_clear6 << 24 >> 24 == 0;
    if ($tobool7) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _clear_all_old($mrb);
    $4 = HEAP8[$0] | 0;
    $5 = $4 | 2;
    HEAP8[$0] = $5;
    label = 7;
    break;
   case 7:
    $call11 = _incremental_gc($mrb, -1) | 0;
    $6 = HEAP32[$gc_state >> 2] | 0;
    $cmp13 = ($6 | 0) == 0;
    if ($cmp13) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 8:
    $gc_live_after_mark = $mrb + 536 | 0;
    $7 = HEAP32[$gc_live_after_mark >> 2] | 0;
    $div = ($7 >>> 0) / 100 >>> 0;
    $gc_interval_ratio = $mrb + 544 | 0;
    $8 = HEAP32[$gc_interval_ratio >> 2] | 0;
    $mul = Math_imul($8, $div);
    $gc_threshold = $mrb + 540 | 0;
    HEAP32[$gc_threshold >> 2] = $mul;
    $9 = HEAP8[$0] | 0;
    $bf_clear15 = $9 & 4;
    $tobool16 = $bf_clear15 << 24 >> 24 == 0;
    if ($tobool16) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $10 = HEAP32[$gc_live_after_mark >> 2] | 0;
    $div19 = ($10 >>> 0) / 100 >>> 0;
    $mul20 = $div19 * 200 & -1;
    $majorgc_old_threshold = $mrb + 556 | 0;
    HEAP32[$majorgc_old_threshold >> 2] = $mul20;
    $11 = HEAP8[$0] | 0;
    $12 = $11 & -3;
    HEAP8[$0] = $12;
    label = 10;
    break;
   case 10:
    return;
  }
}
function _mrb_malloc($mrb, $len) {
  $mrb = $mrb | 0;
  $len = $len | 0;
  return _mrb_realloc($mrb, 0, $len) | 0;
}
function _mrb_exc_raise($mrb, $exc) {
  $mrb = $mrb | 0;
  $exc = $exc | 0;
  var $p = 0, $0 = 0, $1 = 0, $exc1 = 0, $jmp = 0, $2 = 0, $tobool = 0, $arraydecay = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $exc;
  $exc = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$exc >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$exc + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$exc + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $exc;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    $exc1 = $mrb + 16 | 0;
    HEAP32[$exc1 >> 2] = $1;
    _exc_debug_info($mrb, $1);
    $jmp = $mrb | 0;
    $2 = HEAP32[$jmp >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_p($mrb, $exc);
    _abort();
   case 4:
    $arraydecay = $2;
    _longjmp($arraydecay | 0, 1);
  }
}
function _mrb_bug($mrb, $fmt, varrp) {
  $mrb = $mrb | 0;
  $fmt = $fmt | 0;
  varrp = varrp | 0;
  var $ap = 0, $tmp = 0, $str_sroa_0_0_copyload = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $ap = __stackBase__ | 0;
  $tmp = __stackBase__ + 4 | 0;
  HEAP32[$ap >> 2] = varrp;
  _mrb_vformat($tmp, $mrb, $fmt, HEAP32[$ap >> 2] | 0);
  $str_sroa_0_0_copyload = HEAP32[$tmp >> 2] | 0;
  _fwrite(100780, 5, 1, HEAP32[_stderr >> 2] | 0);
  _fwrite(HEAP32[$str_sroa_0_0_copyload + 20 >> 2] | 0, HEAP32[$str_sroa_0_0_copyload + 12 >> 2] | 0, 1, HEAP32[_stderr >> 2] | 0);
  _exit(1);
}
function _unlink_free_heap_page($mrb, $page) {
  $mrb = $mrb | 0;
  $page = $page | 0;
  var $free_prev = 0, $0 = 0, $tobool = 0, $free_next = 0, $1 = 0, $free_next2 = 0, $free_next3 = 0, $2 = 0, $tobool4 = 0, $3 = 0, $free_prev8 = 0, $free_heaps = 0, $4 = 0, $cmp = 0, $5 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $free_prev = $page + 16 | 0;
    $0 = HEAP32[$free_prev >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $free_next = $page + 12 | 0;
    $1 = HEAP32[$free_next >> 2] | 0;
    $free_next2 = $0 + 12 | 0;
    HEAP32[$free_next2 >> 2] = $1;
    label = 4;
    break;
   case 4:
    $free_next3 = $page + 12 | 0;
    $2 = HEAP32[$free_next3 >> 2] | 0;
    $tobool4 = ($2 | 0) == 0;
    if ($tobool4) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $3 = HEAP32[$free_prev >> 2] | 0;
    $free_prev8 = $2 + 16 | 0;
    HEAP32[$free_prev8 >> 2] = $3;
    label = 6;
    break;
   case 6:
    $free_heaps = $mrb + 108 | 0;
    $4 = HEAP32[$free_heaps >> 2] | 0;
    $cmp = ($4 | 0) == ($page | 0);
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $5 = HEAP32[$free_next3 >> 2] | 0;
    HEAP32[$free_heaps >> 2] = $5;
    label = 8;
    break;
   case 8:
    HEAP32[$free_prev >> 2] = 0;
    HEAP32[$free_next3 >> 2] = 0;
    return;
  }
}
function _add_gray_list($mrb, $obj) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $0 = 0, $gray_list = 0;
  $0 = $obj;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -1793;
  $gray_list = $mrb + 528 | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[$gray_list >> 2] | 0;
  HEAP32[$gray_list >> 2] = $obj;
  return;
}
function _mrb_gc_arena_save($mrb) {
  $mrb = $mrb | 0;
  return HEAP32[$mrb + 516 >> 2] | 0;
}
function _mrb_gc_arena_restore($mrb, $idx) {
  $mrb = $mrb | 0;
  $idx = $idx | 0;
  HEAP32[$mrb + 516 >> 2] = $idx;
  return;
}
function _mrb_write_barrier($mrb, $obj) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $0 = 0, $1 = 0, $and = 0, $tobool = 0, $2 = 0, $variable_gray_list = 0, $3 = 0, $gcnext = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $obj;
    $1 = HEAP32[$0 >> 2] | 0;
    $and = $1 & 1024;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $2 = $1 & -1793;
    HEAP32[$0 >> 2] = $2;
    $variable_gray_list = $mrb + 532 | 0;
    $3 = HEAP32[$variable_gray_list >> 2] | 0;
    $gcnext = $obj + 8 | 0;
    HEAP32[$gcnext >> 2] = $3;
    HEAP32[$variable_gray_list >> 2] = $obj;
    label = 4;
    break;
   case 4:
    return;
  }
}
function _mrb_bool_value1003($agg_result, $boolean) {
  $agg_result = $agg_result | 0;
  $boolean = $boolean | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = $boolean << 24 >> 24 != 0 ? 2 : 0;
  return;
}
function _mrb_nil_value1004($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_fixnum_value1005($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _prepare_incremental_sweep($mrb) {
  $mrb = $mrb | 0;
  HEAP32[$mrb + 520 >> 2] = 2;
  HEAP32[$mrb + 104 >> 2] = HEAP32[$mrb + 100 >> 2] | 0;
  HEAP32[$mrb + 536 >> 2] = HEAP32[$mrb + 112 >> 2] | 0;
  return;
}
function _mrb_calloc($mrb, $nelem, $len) {
  $mrb = $mrb | 0;
  $nelem = $nelem | 0;
  $len = $len | 0;
  var $div = 0, $cmp = 0, $mul = 0, $call = 0, $tobool = 0, $cmp1 = 0, $or_cond = 0, $p_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $div = 4294967295 / ($len >>> 0) >>> 0;
    $cmp = $div >>> 0 < $nelem >>> 0;
    if ($cmp) {
      $p_0 = 0;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $mul = Math_imul($len, $nelem);
    $call = _mrb_realloc($mrb, 0, $mul) | 0;
    $tobool = ($call | 0) == 0;
    $cmp1 = ($mul | 0) == 0;
    $or_cond = $tobool | $cmp1;
    if ($or_cond) {
      $p_0 = $call;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _memset($call | 0, 0, $mul | 0);
    $p_0 = $call;
    label = 5;
    break;
   case 5:
    return $p_0 | 0;
  }
  return 0;
}
function _mrb_free($mrb, $p) {
  $mrb = $mrb | 0;
  $p = $p | 0;
  FUNCTION_TABLE_iiiii[HEAP32[$mrb + 4 >> 2] & 1023]($mrb, $p, 0, HEAP32[$mrb + 580 >> 2] | 0);
  return;
}
function _mrb_init_heap($mrb) {
  $mrb = $mrb | 0;
  var $0 = 0;
  HEAP32[$mrb + 100 >> 2] = 0;
  HEAP32[$mrb + 108 >> 2] = 0;
  _add_heap($mrb);
  HEAP32[$mrb + 544 >> 2] = 200;
  HEAP32[$mrb + 548 >> 2] = 200;
  $0 = $mrb + 552 | 0;
  HEAP8[$0] = HEAP8[$0] | 6;
  return;
}
function _add_heap($mrb) {
  $mrb = $mrb | 0;
  var $call = 0, $0 = 0, $add_ptr = 0, $1 = 0, $objects = 0, $arraydecay = 0, $prev_014 = 0, $p_013 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $next = 0, $prev_0_c = 0, $basic = 0, $incdec_ptr = 0, $cmp = 0, $freelist = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_calloc($mrb, 1, 24600) | 0;
    $0 = $call;
    $add_ptr = $call + 24600 | 0;
    $1 = $add_ptr;
    $objects = $call + 24 | 0;
    $arraydecay = $objects;
    $p_013 = $arraydecay;
    $prev_014 = 0;
    label = 3;
    break;
   case 3:
    $2 = $p_013;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $3 & -256;
    $5 = $4 | 1;
    HEAP32[$2 >> 2] = $5;
    $next = $p_013 + 12 | 0;
    $prev_0_c = $prev_014;
    HEAP32[$next >> 2] = $prev_0_c;
    $basic = $p_013;
    $incdec_ptr = $p_013 + 24 | 0;
    $cmp = $incdec_ptr >>> 0 < $1 >>> 0;
    if ($cmp) {
      $p_013 = $incdec_ptr;
      $prev_014 = $basic;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $freelist = $call;
    HEAP32[$freelist >> 2] = $basic;
    _link_heap_page($mrb, $0);
    _link_free_heap_page($mrb, $0);
    return;
  }
}
function _mrb_free_heap($mrb) {
  $mrb = $mrb | 0;
  var $heaps = 0, $0 = 0, $tobool12 = 0, $page_013 = 0, $next = 0, $1 = 0, $add_ptr = 0, $arraydecay = 0, $p_011 = 0, $2 = 0, $3 = 0, $bf_clear = 0, $cmp3 = 0, $basic = 0, $incdec_ptr = 0, $cmp = 0, $4 = 0, $tobool = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $heaps = $mrb + 100 | 0;
    $0 = HEAP32[$heaps >> 2] | 0;
    $tobool12 = ($0 | 0) == 0;
    if ($tobool12) {
      label = 8;
      break;
    } else {
      $page_013 = $0;
      label = 3;
      break;
    }
   case 3:
    $next = $page_013 + 8 | 0;
    $1 = HEAP32[$next >> 2] | 0;
    $add_ptr = $page_013 + 24600 | 0;
    $arraydecay = $page_013 + 24 | 0;
    $p_011 = $arraydecay;
    label = 4;
    break;
   case 4:
    $2 = $p_011;
    $3 = HEAP32[$2 >> 2] | 0;
    $bf_clear = $3 & 255;
    $cmp3 = ($bf_clear | 0) == 1;
    if ($cmp3) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $basic = $p_011;
    _obj_free($mrb, $basic);
    label = 6;
    break;
   case 6:
    $incdec_ptr = $p_011 + 24 | 0;
    $cmp = $incdec_ptr >>> 0 < $add_ptr >>> 0;
    if ($cmp) {
      $p_011 = $incdec_ptr;
      label = 4;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $4 = $page_013;
    _mrb_free($mrb, $4);
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      $page_013 = $1;
      label = 3;
      break;
    }
   case 8:
    return;
  }
}
function _obj_free($mrb, $obj) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $0 = 0, $1 = 0, $bf_clear = 0, $2 = 0, $3 = 0, $4 = 0, $cioff = 0, $5 = 0, $6 = 0, $cmp = 0, $stack = 0, $7 = 0, $8 = 0, $9 = 0, $cxt = 0, $10 = 0, $11 = 0, $and = 0, $tobool = 0, $aux = 0, $shared30 = 0, $12 = 0, $ptr = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $edges = 0, $18 = 0, $19 = 0, $20 = 0, $type = 0, $21 = 0, $dfree = 0, $22 = 0, $tobool14 = 0, $23 = 0, $data = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $obj;
    $1 = HEAP32[$0 >> 2] | 0;
    $bf_clear = $1 & 255;
    if (($bf_clear | 0) == 8) {
      label = 3;
      break;
    } else if (($bf_clear | 0) == 9 | ($bf_clear | 0) == 10 | ($bf_clear | 0) == 12) {
      label = 4;
      break;
    } else if (($bf_clear | 0) == 20) {
      label = 5;
      break;
    } else if (($bf_clear | 0) == 22) {
      label = 7;
      break;
    } else if (($bf_clear | 0) == 14) {
      label = 8;
      break;
    } else if (($bf_clear | 0) == 15) {
      label = 11;
      break;
    } else if (($bf_clear | 0) == 16) {
      label = 12;
      break;
    } else if (($bf_clear | 0) == 17) {
      label = 13;
      break;
    } else if (($bf_clear | 0) == 21) {
      label = 14;
      break;
    } else if (($bf_clear | 0) == 2 | ($bf_clear | 0) == 3 | ($bf_clear | 0) == 4 | ($bf_clear | 0) == 6) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 3:
    $2 = $obj;
    _mrb_gc_free_iv(0, $2);
    label = 17;
    break;
   case 4:
    $3 = $obj;
    _mrb_gc_free_mt(0, $3);
    $4 = $obj;
    _mrb_gc_free_iv(0, $4);
    label = 17;
    break;
   case 5:
    $cioff = $obj + 20 | 0;
    $5 = $cioff;
    $6 = HEAP32[$5 >> 2] | 0;
    $cmp = ($6 | 0) < 0;
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 17;
      break;
    }
   case 6:
    $stack = $obj + 12 | 0;
    $7 = $stack;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $8;
    _mrb_free($mrb, $9);
    HEAP32[$7 >> 2] = 0;
    label = 17;
    break;
   case 7:
    $cxt = $obj + 12 | 0;
    $10 = $cxt;
    $11 = HEAP32[$10 >> 2] | 0;
    _mrb_free_context($mrb, $11);
    label = 17;
    break;
   case 8:
    $and = $1 & 524288;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $aux = $obj + 16 | 0;
    $shared30 = HEAP32[$aux >> 2] | 0;
    $12 = $shared30;
    _mrb_ary_decref($mrb, $12);
    label = 17;
    break;
   case 10:
    $ptr = $obj + 20 | 0;
    $13 = HEAP32[$ptr >> 2] | 0;
    $14 = $13 | 0;
    _mrb_free($mrb, $14);
    label = 17;
    break;
   case 11:
    $15 = $obj;
    _mrb_gc_free_iv(0, $15);
    $16 = $obj;
    _mrb_gc_free_hash(0, $16);
    label = 17;
    break;
   case 12:
    $17 = $obj;
    _mrb_gc_free_str($mrb, $17);
    label = 17;
    break;
   case 13:
    $edges = $obj + 12 | 0;
    $18 = $edges;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $19;
    _mrb_free($mrb, $20);
    label = 17;
    break;
   case 14:
    $type = $obj + 16 | 0;
    $21 = HEAP32[$type >> 2] | 0;
    $dfree = $21 + 4 | 0;
    $22 = HEAP32[$dfree >> 2] | 0;
    $tobool14 = ($22 | 0) == 0;
    if ($tobool14) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $23 = $22;
    $data = $obj + 20 | 0;
    $24 = HEAP32[$data >> 2] | 0;
    $25 = $24 | 0;
    FUNCTION_TABLE_vii[$23 & 1023]($mrb, $25);
    label = 16;
    break;
   case 16:
    $26 = $obj;
    _mrb_gc_free_iv(0, $26);
    label = 17;
    break;
   case 17:
    $27 = HEAP32[$0 >> 2] | 0;
    $28 = $27 & -256;
    $29 = $28 | 1;
    HEAP32[$0 >> 2] = $29;
    label = 18;
    break;
   case 18:
    return;
  }
}
function _mrb_gc_protect($mrb, $obj) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $tt = 0, $0 = 0, $cmp = 0, $p = 0, $1 = 0, $2 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $obj + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = $0 >>> 0 < 8;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $p = $obj;
    $1 = HEAP32[$p >> 2] | 0;
    $2 = $1;
    _gc_protect($mrb, $2);
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return;
  }
}
function _gc_protect($mrb, $p) {
  $mrb = $mrb | 0;
  $p = $p | 0;
  var $arena_idx = 0, $0 = 0, $cmp = 0, $call = 0, $1 = 0, $inc = 0, $arrayidx = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $arena_idx = $mrb + 516 | 0;
    $0 = HEAP32[$arena_idx >> 2] | 0;
    $cmp = ($0 | 0) > 99;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[$arena_idx >> 2] = 96;
    $call = _mrb_class_get($mrb, 92328) | 0;
    _mrb_raise($mrb, $call, 108888);
    label = 4;
    break;
   case 4:
    $1 = HEAP32[$arena_idx >> 2] | 0;
    $inc = $1 + 1 | 0;
    HEAP32[$arena_idx >> 2] = $inc;
    $arrayidx = $mrb + 116 + ($1 << 2) | 0;
    HEAP32[$arrayidx >> 2] = $p;
    return;
  }
}
function _mrb_obj_alloc($mrb, $ttype, $cls) {
  $mrb = $mrb | 0;
  $ttype = $ttype | 0;
  $cls = $cls | 0;
  var $gc_threshold = 0, $0 = 0, $live = 0, $1 = 0, $cmp = 0, $free_heaps = 0, $2 = 0, $cmp1 = 0, $3 = 0, $freelist = 0, $4 = 0, $next = 0, $5 = 0, $6 = 0, $7 = 0, $freelist8 = 0, $8 = 0, $cmp9 = 0, $9 = 0, $inc = 0, $10 = 0, $bf_value = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $c = 0, $current_white_part = 0, $15 = 0, $bf_value14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $gc_threshold = $mrb + 540 | 0;
    $0 = HEAP32[$gc_threshold >> 2] | 0;
    $live = $mrb + 112 | 0;
    $1 = HEAP32[$live >> 2] | 0;
    $cmp = $0 >>> 0 < $1 >>> 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_incremental_gc($mrb);
    label = 4;
    break;
   case 4:
    $free_heaps = $mrb + 108 | 0;
    $2 = HEAP32[$free_heaps >> 2] | 0;
    $cmp1 = ($2 | 0) == 0;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _add_heap($mrb);
    label = 6;
    break;
   case 6:
    $3 = HEAP32[$free_heaps >> 2] | 0;
    $freelist = $3 | 0;
    $4 = HEAP32[$freelist >> 2] | 0;
    $next = $4 + 12 | 0;
    $5 = $next;
    $6 = HEAP32[$5 >> 2] | 0;
    HEAP32[$freelist >> 2] = $6;
    $7 = HEAP32[$free_heaps >> 2] | 0;
    $freelist8 = $7 | 0;
    $8 = HEAP32[$freelist8 >> 2] | 0;
    $cmp9 = ($8 | 0) == 0;
    if ($cmp9) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _unlink_free_heap_page($mrb, $7);
    label = 8;
    break;
   case 8:
    $9 = HEAP32[$live >> 2] | 0;
    $inc = $9 + 1 | 0;
    HEAP32[$live >> 2] = $inc;
    _gc_protect($mrb, $4);
    $10 = $4 | 0;
    HEAP32[$10 >> 2] = HEAP32[19716] | 0;
    HEAP32[$10 + 4 >> 2] = HEAP32[78868 >> 2] | 0;
    HEAP32[$10 + 8 >> 2] = HEAP32[78872 >> 2] | 0;
    HEAP32[$10 + 12 >> 2] = HEAP32[78876 >> 2] | 0;
    HEAP32[$10 + 16 >> 2] = HEAP32[78880 >> 2] | 0;
    HEAP32[$10 + 20 >> 2] = HEAP32[78884 >> 2] | 0;
    $bf_value = $ttype & 255;
    $11 = $4;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12 & -256;
    $14 = $13 | $bf_value;
    HEAP32[$11 >> 2] = $14;
    $c = $4 + 4 | 0;
    HEAP32[$c >> 2] = $cls;
    $current_white_part = $mrb + 524 | 0;
    $15 = HEAP32[$current_white_part >> 2] | 0;
    $bf_value14 = $15 << 8;
    $16 = $bf_value14 & 1792;
    $17 = HEAP32[$11 >> 2] | 0;
    $18 = $17 & -1793;
    $19 = $18 | $16;
    HEAP32[$11 >> 2] = $19;
    return $4 | 0;
  }
  return 0;
}
function _mrb_incremental_gc($mrb) {
  $mrb = $mrb | 0;
  var $0 = 0, $1 = 0, $bf_clear = 0, $tobool = 0, $2 = 0, $3 = 0, $gc_state = 0, $call = 0, $4 = 0, $cmp = 0, $gc_step_ratio = 0, $5 = 0, $mul = 0, $gc_state12 = 0, $result_0 = 0, $cmp9 = 0, $call11 = 0, $add = 0, $6 = 0, $cmp13 = 0, $gc_state18 = 0, $7 = 0, $cmp19 = 0, $gc_live_after_mark = 0, $8 = 0, $div = 0, $gc_interval_ratio = 0, $9 = 0, $mul22 = 0, $gc_threshold = 0, $cmp24 = 0, $_mul22 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $div40 = 0, $mul41 = 0, $majorgc_old_threshold = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $live = 0, $18 = 0, $majorgc_old_threshold53 = 0, $19 = 0, $cmp54 = 0, $20 = 0, $21 = 0, $live62 = 0, $22 = 0, $add63 = 0, $gc_threshold64 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $mrb + 552 | 0;
    $1 = HEAP8[$0] | 0;
    $bf_clear = $1 & 1;
    $tobool = $bf_clear << 24 >> 24 == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 16;
      break;
    }
   case 3:
    $2 = $1 & 6;
    $3 = $2 << 24 >> 24 == 4;
    if ($3) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $gc_state = $mrb + 520 | 0;
    label = 5;
    break;
   case 5:
    $call = _incremental_gc($mrb, -1) | 0;
    $4 = HEAP32[$gc_state >> 2] | 0;
    $cmp = ($4 | 0) == 0;
    if ($cmp) {
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 6:
    $gc_step_ratio = $mrb + 548 | 0;
    $5 = HEAP32[$gc_step_ratio >> 2] | 0;
    $mul = $5 * 10 & -1;
    $gc_state12 = $mrb + 520 | 0;
    $result_0 = 0;
    label = 7;
    break;
   case 7:
    $cmp9 = $result_0 >>> 0 < $mul >>> 0;
    if ($cmp9) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $call11 = _incremental_gc($mrb, $mul) | 0;
    $add = $call11 + $result_0 | 0;
    $6 = HEAP32[$gc_state12 >> 2] | 0;
    $cmp13 = ($6 | 0) == 0;
    if ($cmp13) {
      label = 9;
      break;
    } else {
      $result_0 = $add;
      label = 7;
      break;
    }
   case 9:
    $gc_state18 = $mrb + 520 | 0;
    $7 = HEAP32[$gc_state18 >> 2] | 0;
    $cmp19 = ($7 | 0) == 0;
    if ($cmp19) {
      label = 10;
      break;
    } else {
      label = 15;
      break;
    }
   case 10:
    $gc_live_after_mark = $mrb + 536 | 0;
    $8 = HEAP32[$gc_live_after_mark >> 2] | 0;
    $div = ($8 >>> 0) / 100 >>> 0;
    $gc_interval_ratio = $mrb + 544 | 0;
    $9 = HEAP32[$gc_interval_ratio >> 2] | 0;
    $mul22 = Math_imul($9, $div);
    $gc_threshold = $mrb + 540 | 0;
    $cmp24 = $mul22 >>> 0 < 1024;
    $_mul22 = $cmp24 ? 1024 : $mul22;
    HEAP32[$gc_threshold >> 2] = $_mul22;
    $10 = HEAP8[$0] | 0;
    $11 = $10 & 6;
    $12 = $11 << 24 >> 24 == 6;
    if ($12) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $13 = HEAP32[$gc_live_after_mark >> 2] | 0;
    $div40 = ($13 >>> 0) / 100 >>> 0;
    $mul41 = $div40 * 200 & -1;
    $majorgc_old_threshold = $mrb + 556 | 0;
    HEAP32[$majorgc_old_threshold >> 2] = $mul41;
    $14 = HEAP8[$0] | 0;
    $15 = $14 & -3;
    HEAP8[$0] = $15;
    label = 16;
    break;
   case 12:
    $16 = $10 & 6;
    $17 = $16 << 24 >> 24 == 4;
    if ($17) {
      label = 13;
      break;
    } else {
      label = 16;
      break;
    }
   case 13:
    $live = $mrb + 112 | 0;
    $18 = HEAP32[$live >> 2] | 0;
    $majorgc_old_threshold53 = $mrb + 556 | 0;
    $19 = HEAP32[$majorgc_old_threshold53 >> 2] | 0;
    $cmp54 = $18 >>> 0 > $19 >>> 0;
    if ($cmp54) {
      label = 14;
      break;
    } else {
      label = 16;
      break;
    }
   case 14:
    _clear_all_old($mrb);
    $20 = HEAP8[$0] | 0;
    $21 = $20 | 2;
    HEAP8[$0] = $21;
    label = 16;
    break;
   case 15:
    $live62 = $mrb + 112 | 0;
    $22 = HEAP32[$live62 >> 2] | 0;
    $add63 = $22 + 1024 | 0;
    $gc_threshold64 = $mrb + 540 | 0;
    HEAP32[$gc_threshold64 >> 2] = $add63;
    label = 16;
    break;
   case 16:
    return;
  }
}
function _mrb_gc_mark($mrb, $obj) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $cmp = 0, $0 = 0, $1 = 0, $and = 0, $tobool = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = ($obj | 0) == 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $0 = $obj;
    $1 = HEAP32[$0 >> 2] | 0;
    $and = $1 & 768;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _add_gray_list($mrb, $obj);
    label = 5;
    break;
   case 5:
    return;
  }
}
function _incremental_gc($mrb, $limit) {
  $mrb = $mrb | 0;
  $limit = $limit | 0;
  var $gc_state = 0, $0 = 0, $current_white_part = 0, $1 = 0, $xor = 0, $gray_list = 0, $2 = 0, $tobool = 0, $call = 0, $call5 = 0, $cmp = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $gc_state = $mrb + 520 | 0;
    $0 = HEAP32[$gc_state >> 2] | 0;
    if (($0 | 0) == 0) {
      label = 3;
      break;
    } else if (($0 | 0) == 1) {
      label = 4;
      break;
    } else if (($0 | 0) == 2) {
      label = 7;
      break;
    } else {
      $retval_0 = 0;
      label = 9;
      break;
    }
   case 3:
    _root_scan_phase($mrb);
    HEAP32[$gc_state >> 2] = 1;
    $current_white_part = $mrb + 524 | 0;
    $1 = HEAP32[$current_white_part >> 2] | 0;
    $xor = $1 ^ 3;
    HEAP32[$current_white_part >> 2] = $xor;
    $retval_0 = 0;
    label = 9;
    break;
   case 4:
    $gray_list = $mrb + 528 | 0;
    $2 = HEAP32[$gray_list >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $call = _incremental_marking_phase($mrb, $limit) | 0;
    $retval_0 = $call;
    label = 9;
    break;
   case 6:
    _final_marking_phase($mrb);
    _prepare_incremental_sweep($mrb);
    $retval_0 = 0;
    label = 9;
    break;
   case 7:
    $call5 = _incremental_sweep_phase($mrb, $limit) | 0;
    $cmp = ($call5 | 0) == 0;
    if ($cmp) {
      label = 8;
      break;
    } else {
      $retval_0 = $call5;
      label = 9;
      break;
    }
   case 8:
    HEAP32[$gc_state >> 2] = 0;
    $retval_0 = 0;
    label = 9;
    break;
   case 9:
    return $retval_0 | 0;
  }
  return 0;
}
function _clear_all_old($mrb) {
  $mrb = $mrb | 0;
  var $0 = 0, $1 = 0, $2 = 0, $bf_clear = 0, $tobool = 0, $bf_clear5 = 0, $tobool7 = 0, $or_cond = 0, $3 = 0, $4 = 0, $gray_list = 0, $variable_gray_list = 0, $bf_value = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $mrb + 552 | 0;
    $1 = HEAP8[$0] | 0;
    $2 = ($1 & 255) >>> 2;
    $bf_clear = $2 & 1;
    $tobool = $bf_clear << 24 >> 24 == 0;
    $bf_clear5 = $1 & 2;
    $tobool7 = $bf_clear5 << 24 >> 24 == 0;
    $or_cond = $tobool | $tobool7;
    if ($or_cond) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _advance_phase($mrb);
    label = 4;
    break;
   case 4:
    $3 = HEAP8[$0] | 0;
    $4 = $3 & -5;
    HEAP8[$0] = $4;
    _prepare_incremental_sweep($mrb);
    _advance_phase($mrb);
    $gray_list = $mrb + 528 | 0;
    HEAP32[$gray_list >> 2] = 0;
    $variable_gray_list = $mrb + 532 | 0;
    HEAP32[$variable_gray_list >> 2] = 0;
    $bf_value = $2 << 2;
    $5 = $bf_value & 4;
    $6 = HEAP8[$0] | 0;
    $7 = $6 & -5;
    $8 = $7 | $5;
    HEAP8[$0] = $8;
    return;
  }
}
function _mrb_field_write_barrier($mrb, $obj, $value) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $value = $value | 0;
  var $0 = 0, $1 = 0, $and = 0, $tobool = 0, $2 = 0, $3 = 0, $and2 = 0, $tobool3 = 0, $4 = 0, $5 = 0, $bf_clear6 = 0, $tobool7 = 0, $gc_state = 0, $6 = 0, $cmp = 0, $current_white_part = 0, $7 = 0, $bf_value = 0, $8 = 0, $9 = 0, $10 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $obj;
    $1 = HEAP32[$0 >> 2] | 0;
    $and = $1 & 1024;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $2 = $value;
    $3 = HEAP32[$2 >> 2] | 0;
    $and2 = $3 & 768;
    $tobool3 = ($and2 | 0) == 0;
    if ($tobool3) {
      label = 8;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $4 = $mrb + 552 | 0;
    $5 = HEAP8[$4] | 0;
    $bf_clear6 = $5 & 4;
    $tobool7 = $bf_clear6 << 24 >> 24 == 0;
    if ($tobool7) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $gc_state = $mrb + 520 | 0;
    $6 = HEAP32[$gc_state >> 2] | 0;
    $cmp = ($6 | 0) == 1;
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _add_gray_list($mrb, $value);
    label = 8;
    break;
   case 7:
    $current_white_part = $mrb + 524 | 0;
    $7 = HEAP32[$current_white_part >> 2] | 0;
    $bf_value = $7 << 8;
    $8 = $bf_value & 1792;
    $9 = $1 & -1793;
    $10 = $8 | $9;
    HEAP32[$0 >> 2] = $10;
    label = 8;
    break;
   case 8:
    return;
  }
}
function _mrb_objspace_each_objects($mrb, $callback, $data) {
  $mrb = $mrb | 0;
  $callback = $callback | 0;
  $data = $data | 0;
  var $heaps = 0, $page_09 = 0, $cmp10 = 0, $page_011 = 0, $add_ptr = 0, $arraydecay = 0, $p_08 = 0, $basic = 0, $incdec_ptr = 0, $cmp1 = 0, $next = 0, $page_0 = 0, $cmp = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $heaps = $mrb + 100 | 0;
    $page_09 = HEAP32[$heaps >> 2] | 0;
    $cmp10 = ($page_09 | 0) == 0;
    if ($cmp10) {
      label = 6;
      break;
    } else {
      $page_011 = $page_09;
      label = 3;
      break;
    }
   case 3:
    $add_ptr = $page_011 + 24600 | 0;
    $arraydecay = $page_011 + 24 | 0;
    $p_08 = $arraydecay;
    label = 4;
    break;
   case 4:
    $basic = $p_08;
    FUNCTION_TABLE_viii[$callback & 1023]($mrb, $basic, $data);
    $incdec_ptr = $p_08 + 24 | 0;
    $cmp1 = $incdec_ptr >>> 0 < $add_ptr >>> 0;
    if ($cmp1) {
      $p_08 = $incdec_ptr;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $next = $page_011 + 8 | 0;
    $page_0 = HEAP32[$next >> 2] | 0;
    $cmp = ($page_0 | 0) == 0;
    if ($cmp) {
      label = 6;
      break;
    } else {
      $page_011 = $page_0;
      label = 3;
      break;
    }
   case 6:
    return;
  }
}
function _mrb_init_gc($mrb) {
  $mrb = $mrb | 0;
  var $call = 0;
  $call = _mrb_define_module($mrb, 103340) | 0;
  _mrb_define_class_method($mrb, $call, 100544, 322, 0);
  _mrb_define_class_method($mrb, $call, 97996, 772, 0);
  _mrb_define_class_method($mrb, $call, 95684, 124, 0);
  _mrb_define_class_method($mrb, $call, 94608, 130, 0);
  _mrb_define_class_method($mrb, $call, 93672, 320, 0);
  _mrb_define_class_method($mrb, $call, 92960, 486, 0);
  _mrb_define_class_method($mrb, $call, 92172, 786, 0);
  _mrb_define_class_method($mrb, $call, 111060, 436, 0);
  _mrb_define_class_method($mrb, $call, 110328, 230, 0);
  return;
}
function _gc_start($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_garbage_collect($mrb);
  _mrb_nil_value1004($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _gc_enable($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $0 = $mrb + 552 | 0;
  $1 = HEAP8[$0] | 0;
  HEAP8[$0] = $1 & -2;
  _mrb_bool_value1003($agg_result, $1 & 1);
  STACKTOP = __stackBase__;
  return;
}
function _gc_disable($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $0 = $mrb + 552 | 0;
  $1 = HEAP8[$0] | 0;
  HEAP8[$0] = $1 | 1;
  _mrb_bool_value1003($agg_result, $1 & 1);
  STACKTOP = __stackBase__;
  return;
}
function _gc_interval_ratio_get($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_fixnum_value1005($agg_result, HEAP32[$mrb + 544 >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _gc_interval_ratio_set($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $ratio = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $ratio = __stackBase__ | 0;
  _mrb_get_args($mrb, 109336, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $ratio, tempInt) | 0);
  HEAP32[$mrb + 544 >> 2] = HEAP32[$ratio >> 2] | 0;
  _mrb_nil_value1004($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _gc_step_ratio_get($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_fixnum_value1005($agg_result, HEAP32[$mrb + 548 >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _gc_step_ratio_set($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $ratio = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $ratio = __stackBase__ | 0;
  _mrb_get_args($mrb, 109336, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $ratio, tempInt) | 0);
  HEAP32[$mrb + 548 >> 2] = HEAP32[$ratio >> 2] | 0;
  _mrb_nil_value1004($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _gc_generational_mode_set($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $enable = 0, $call = 0, $0 = 0, $1 = 0, $2 = 0, $bf_clear = 0, $3 = 0, $cmp = 0, $conv1 = 0, $4 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $enable = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 109912, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $enable, tempInt) | 0) | 0;
    $0 = $mrb + 552 | 0;
    $1 = HEAP8[$0] | 0;
    $2 = ($1 & 255) >>> 2;
    $bf_clear = $2 & 1;
    $3 = HEAP8[$enable] | 0;
    $cmp = $bf_clear << 24 >> 24 == $3 << 24 >> 24;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $conv1 = $3 & 255;
    _change_gen_gc_mode($mrb, $conv1);
    label = 4;
    break;
   case 4:
    $4 = HEAP8[$enable] | 0;
    _mrb_bool_value1003($agg_result, $4);
    STACKTOP = __stackBase__;
    return;
  }
}
function _gc_generational_mode_get($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_bool_value1003($agg_result, (HEAPU8[$mrb + 552 | 0] | 0) >>> 2 & 1);
  STACKTOP = __stackBase__;
  return;
}
function _change_gen_gc_mode($mrb, $enable) {
  $mrb = $mrb | 0;
  $enable = $enable | 0;
  var $0 = 0, $1 = 0, $bf_clear = 0, $tobool = 0, $tobool1 = 0, $or_cond = 0, $2 = 0, $3 = 0, $or_cond11 = 0, $gc_live_after_mark = 0, $4 = 0, $div = 0, $mul = 0, $majorgc_old_threshold = 0, $5 = 0, $6 = 0, $conv11 = 0, $bf_value = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $mrb + 552 | 0;
    $1 = HEAP8[$0] | 0;
    $bf_clear = $1 & 4;
    $tobool = $bf_clear << 24 >> 24 != 0;
    $tobool1 = ($enable | 0) == 0;
    $or_cond = $tobool & $tobool1;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _clear_all_old($mrb);
    $2 = HEAP8[$0] | 0;
    $3 = $2 & -3;
    HEAP8[$0] = $3;
    label = 6;
    break;
   case 4:
    $or_cond11 = $tobool | $tobool1;
    if ($or_cond11) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _advance_phase($mrb);
    $gc_live_after_mark = $mrb + 536 | 0;
    $4 = HEAP32[$gc_live_after_mark >> 2] | 0;
    $div = ($4 >>> 0) / 100 >>> 0;
    $mul = $div * 200 & -1;
    $majorgc_old_threshold = $mrb + 556 | 0;
    HEAP32[$majorgc_old_threshold >> 2] = $mul;
    $5 = HEAP8[$0] | 0;
    $6 = $5 & -3;
    HEAP8[$0] = $6;
    label = 6;
    break;
   case 6:
    $conv11 = $enable & 255;
    $bf_value = $conv11 << 2;
    $7 = $bf_value & 4;
    $8 = HEAP8[$0] | 0;
    $9 = $8 & -5;
    $10 = $9 | $7;
    HEAP8[$0] = $10;
    return;
  }
}
function _advance_phase($mrb) {
  $mrb = $mrb | 0;
  var $gc_state = 0, $0 = 0, $cmp1 = 0, $call = 0, $1 = 0, $cmp = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $gc_state = $mrb + 520 | 0;
    $0 = HEAP32[$gc_state >> 2] | 0;
    $cmp1 = ($0 | 0) == 0;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _incremental_gc($mrb, -1) | 0;
    $1 = HEAP32[$gc_state >> 2] | 0;
    $cmp = ($1 | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _unlink_heap_page($mrb, $page) {
  $mrb = $mrb | 0;
  $page = $page | 0;
  var $prev = 0, $0 = 0, $tobool = 0, $next = 0, $1 = 0, $next2 = 0, $next3 = 0, $2 = 0, $tobool4 = 0, $3 = 0, $prev8 = 0, $heaps = 0, $4 = 0, $cmp = 0, $5 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $prev = $page + 4 | 0;
    $0 = HEAP32[$prev >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $next = $page + 8 | 0;
    $1 = HEAP32[$next >> 2] | 0;
    $next2 = $0 + 8 | 0;
    HEAP32[$next2 >> 2] = $1;
    label = 4;
    break;
   case 4:
    $next3 = $page + 8 | 0;
    $2 = HEAP32[$next3 >> 2] | 0;
    $tobool4 = ($2 | 0) == 0;
    if ($tobool4) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $3 = HEAP32[$prev >> 2] | 0;
    $prev8 = $2 + 4 | 0;
    HEAP32[$prev8 >> 2] = $3;
    label = 6;
    break;
   case 6:
    $heaps = $mrb + 100 | 0;
    $4 = HEAP32[$heaps >> 2] | 0;
    $cmp = ($4 | 0) == ($page | 0);
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $5 = HEAP32[$next3 >> 2] | 0;
    HEAP32[$heaps >> 2] = $5;
    label = 8;
    break;
   case 8:
    HEAP32[$prev >> 2] = 0;
    HEAP32[$next3 >> 2] = 0;
    return;
  }
}
function _link_free_heap_page($mrb, $page) {
  $mrb = $mrb | 0;
  $page = $page | 0;
  var $free_heaps = 0, $0 = 0, $free_next = 0, $1 = 0, $tobool = 0, $free_prev = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $free_heaps = $mrb + 108 | 0;
    $0 = HEAP32[$free_heaps >> 2] | 0;
    $free_next = $page + 12 | 0;
    HEAP32[$free_next >> 2] = $0;
    $1 = HEAP32[$free_heaps >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $free_prev = $1 + 16 | 0;
    HEAP32[$free_prev >> 2] = $page;
    label = 4;
    break;
   case 4:
    HEAP32[$free_heaps >> 2] = $page;
    return;
  }
}
function _link_heap_page($mrb, $page) {
  $mrb = $mrb | 0;
  $page = $page | 0;
  var $heaps = 0, $0 = 0, $next = 0, $1 = 0, $tobool = 0, $prev = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $heaps = $mrb + 100 | 0;
    $0 = HEAP32[$heaps >> 2] | 0;
    $next = $page + 8 | 0;
    HEAP32[$next >> 2] = $0;
    $1 = HEAP32[$heaps >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $prev = $1 + 4 | 0;
    HEAP32[$prev >> 2] = $page;
    label = 4;
    break;
   case 4:
    HEAP32[$heaps >> 2] = $page;
    return;
  }
}
function _root_scan_phase($mrb) {
  $mrb = $mrb | 0;
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $gray_list = 0, $variable_gray_list = 0, $arena_idx = 0, $4 = 0, $cmp37 = 0, $i_038 = 0, $arrayidx = 0, $5 = 0, $inc = 0, $exitcond39 = 0, $object_class = 0, $6 = 0, $7 = 0, $top_self = 0, $8 = 0, $9 = 0, $exc = 0, $10 = 0, $11 = 0, $root_c = 0, $12 = 0, $irep = 0, $13 = 0, $tobool5 = 0, $irep_len = 0, $14 = 0, $irep_capa = 0, $15 = 0, $cmp7 = 0, $_ = 0, $cmp1335 = 0, $16 = 0, $17 = 0, $18 = 0, $umax = 0, $19 = 0, $i_136 = 0, $20 = 0, $arrayidx18 = 0, $21 = 0, $tobool19 = 0, $plen = 0, $22 = 0, $cmp2333 = 0, $pool = 0, $j_034 = 0, $23 = 0, $tt = 0, $24 = 0, $cmp27 = 0, $value = 0, $p = 0, $25 = 0, $26 = 0, $inc34 = 0, $27 = 0, $cmp23 = 0, $inc37 = 0, $exitcond = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $mrb + 552 | 0;
    $1 = HEAP8[$0] | 0;
    $2 = $1 & 6;
    $3 = $2 << 24 >> 24 == 4;
    if ($3) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $gray_list = $mrb + 528 | 0;
    HEAP32[$gray_list >> 2] = 0;
    $variable_gray_list = $mrb + 532 | 0;
    HEAP32[$variable_gray_list >> 2] = 0;
    label = 4;
    break;
   case 4:
    _mrb_gc_mark_gv($mrb);
    $arena_idx = $mrb + 516 | 0;
    $4 = HEAP32[$arena_idx >> 2] | 0;
    $cmp37 = ($4 | 0) == 0;
    if ($cmp37) {
      label = 6;
      break;
    } else {
      $i_038 = 0;
      label = 5;
      break;
    }
   case 5:
    $arrayidx = $mrb + 116 + ($i_038 << 2) | 0;
    $5 = HEAP32[$arrayidx >> 2] | 0;
    _mrb_gc_mark($mrb, $5);
    $inc = $i_038 + 1 | 0;
    $exitcond39 = ($inc | 0) == ($4 | 0);
    if ($exitcond39) {
      label = 6;
      break;
    } else {
      $i_038 = $inc;
      label = 5;
      break;
    }
   case 6:
    $object_class = $mrb + 44 | 0;
    $6 = HEAP32[$object_class >> 2] | 0;
    $7 = $6;
    _mrb_gc_mark($mrb, $7);
    $top_self = $mrb + 40 | 0;
    $8 = HEAP32[$top_self >> 2] | 0;
    $9 = $8;
    _mrb_gc_mark($mrb, $9);
    $exc = $mrb + 16 | 0;
    $10 = HEAP32[$exc >> 2] | 0;
    $11 = $10;
    _mrb_gc_mark($mrb, $11);
    $root_c = $mrb + 12 | 0;
    $12 = HEAP32[$root_c >> 2] | 0;
    _mark_context($mrb, $12);
    $irep = $mrb + 24 | 0;
    $13 = HEAP32[$irep >> 2] | 0;
    $tobool5 = ($13 | 0) == 0;
    if ($tobool5) {
      label = 16;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $irep_len = $mrb + 28 | 0;
    $14 = HEAP32[$irep_len >> 2] | 0;
    $irep_capa = $mrb + 32 | 0;
    $15 = HEAP32[$irep_capa >> 2] | 0;
    $cmp7 = $14 >>> 0 > $15 >>> 0;
    $_ = $cmp7 ? $15 : $14;
    $cmp1335 = ($_ | 0) == 0;
    if ($cmp1335) {
      label = 16;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $16 = $15 ^ -1;
    $17 = $14 ^ -1;
    $18 = $16 >>> 0 > $17 >>> 0;
    $umax = $18 ? $16 : $17;
    $19 = $umax ^ -1;
    $i_136 = 0;
    label = 9;
    break;
   case 9:
    $20 = HEAP32[$irep >> 2] | 0;
    $arrayidx18 = $20 + ($i_136 << 2) | 0;
    $21 = HEAP32[$arrayidx18 >> 2] | 0;
    $tobool19 = ($21 | 0) == 0;
    if ($tobool19) {
      label = 15;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $plen = $21 + 36 | 0;
    $22 = HEAP32[$plen >> 2] | 0;
    $cmp2333 = ($22 | 0) == 0;
    if ($cmp2333) {
      label = 15;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $pool = $21 + 16 | 0;
    $j_034 = 0;
    label = 12;
    break;
   case 12:
    $23 = HEAP32[$pool >> 2] | 0;
    $tt = $23 + ($j_034 * 12 & -1) + 8 | 0;
    $24 = HEAP32[$tt >> 2] | 0;
    $cmp27 = $24 >>> 0 > 7;
    if ($cmp27) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $value = $23 + ($j_034 * 12 & -1) | 0;
    $p = $value;
    $25 = HEAP32[$p >> 2] | 0;
    $26 = $25;
    _mrb_gc_mark($mrb, $26);
    label = 14;
    break;
   case 14:
    $inc34 = $j_034 + 1 | 0;
    $27 = HEAP32[$plen >> 2] | 0;
    $cmp23 = $inc34 >>> 0 < $27 >>> 0;
    if ($cmp23) {
      $j_034 = $inc34;
      label = 12;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $inc37 = $i_136 + 1 | 0;
    $exitcond = ($inc37 | 0) == ($19 | 0);
    if ($exitcond) {
      label = 16;
      break;
    } else {
      $i_136 = $inc37;
      label = 9;
      break;
    }
   case 16:
    return;
  }
}
function _incremental_marking_phase($mrb, $limit) {
  $mrb = $mrb | 0;
  $limit = $limit | 0;
  var $gray_list = 0, $0 = 0, $tobool5 = 0, $cmp6 = 0, $or_cond7 = 0, $1 = 0, $tried_marks_08 = 0, $call = 0, $add = 0, $2 = 0, $tobool = 0, $cmp = 0, $or_cond = 0, $tried_marks_0_lcssa = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $gray_list = $mrb + 528 | 0;
    $0 = HEAP32[$gray_list >> 2] | 0;
    $tobool5 = ($0 | 0) != 0;
    $cmp6 = ($limit | 0) != 0;
    $or_cond7 = $tobool5 & $cmp6;
    if ($or_cond7) {
      $tried_marks_08 = 0;
      $1 = $0;
      label = 3;
      break;
    } else {
      $tried_marks_0_lcssa = 0;
      label = 4;
      break;
    }
   case 3:
    $call = _gc_gray_mark($mrb, $1) | 0;
    $add = $call + $tried_marks_08 | 0;
    $2 = HEAP32[$gray_list >> 2] | 0;
    $tobool = ($2 | 0) != 0;
    $cmp = $add >>> 0 < $limit >>> 0;
    $or_cond = $tobool & $cmp;
    if ($or_cond) {
      $tried_marks_08 = $add;
      $1 = $2;
      label = 3;
      break;
    } else {
      $tried_marks_0_lcssa = $add;
      label = 4;
      break;
    }
   case 4:
    return $tried_marks_0_lcssa | 0;
  }
  return 0;
}
function _final_marking_phase($mrb) {
  $mrb = $mrb | 0;
  var $gray_list = 0, $0 = 0, $tobool17 = 0, $1 = 0, $2 = 0, $3 = 0, $bf_clear = 0, $cmp = 0, $_pr19 = 0, $gcnext = 0, $4 = 0, $5 = 0, $tobool = 0, $variable_gray_list = 0, $6 = 0, $_pr14 = 0, $tobool91315 = 0, $7 = 0, $8 = 0, $9 = 0, $bf_clear12 = 0, $cmp13 = 0, $_pr = 0, $tobool913 = 0, $gcnext18 = 0, $10 = 0, $tobool9 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $gray_list = $mrb + 528 | 0;
    $0 = HEAP32[$gray_list >> 2] | 0;
    $tobool17 = ($0 | 0) == 0;
    if ($tobool17) {
      label = 7;
      break;
    } else {
      $1 = $0;
      label = 3;
      break;
    }
   case 3:
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $bf_clear = $3 & 1792;
    $cmp = ($bf_clear | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _gc_mark_children($mrb, $1);
    $_pr19 = HEAP32[$gray_list >> 2] | 0;
    $5 = $_pr19;
    label = 6;
    break;
   case 5:
    $gcnext = $1 + 8 | 0;
    $4 = HEAP32[$gcnext >> 2] | 0;
    HEAP32[$gray_list >> 2] = $4;
    $5 = $4;
    label = 6;
    break;
   case 6:
    $tobool = ($5 | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      $1 = $5;
      label = 3;
      break;
    }
   case 7:
    $variable_gray_list = $mrb + 532 | 0;
    $6 = HEAP32[$variable_gray_list >> 2] | 0;
    HEAP32[$gray_list >> 2] = $6;
    HEAP32[$variable_gray_list >> 2] = 0;
    $_pr14 = HEAP32[$gray_list >> 2] | 0;
    $tobool91315 = ($_pr14 | 0) == 0;
    if ($tobool91315) {
      label = 11;
      break;
    } else {
      $7 = $_pr14;
      label = 8;
      break;
    }
   case 8:
    $8 = $7;
    $9 = HEAP32[$8 >> 2] | 0;
    $bf_clear12 = $9 & 1792;
    $cmp13 = ($bf_clear12 | 0) == 0;
    if ($cmp13) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _gc_mark_children($mrb, $7);
    $_pr = HEAP32[$gray_list >> 2] | 0;
    $tobool913 = ($_pr | 0) == 0;
    if ($tobool913) {
      label = 11;
      break;
    } else {
      $7 = $_pr;
      label = 8;
      break;
    }
   case 10:
    $gcnext18 = $7 + 8 | 0;
    $10 = HEAP32[$gcnext18 >> 2] | 0;
    HEAP32[$gray_list >> 2] = $10;
    $tobool9 = ($10 | 0) == 0;
    if ($tobool9) {
      label = 11;
      break;
    } else {
      $7 = $10;
      label = 8;
      break;
    }
   case 11:
    return;
  }
}
function _incremental_sweep_phase($mrb, $limit) {
  $mrb = $mrb | 0;
  $limit = $limit | 0;
  var $sweeps = 0, $0 = 0, $cmp55 = 0, $not_tobool56 = 0, $1 = 0, $2 = 0, $live = 0, $gc_live_after_mark = 0, $current_white_part = 0, $page_058 = 0, $tried_sweep_057 = 0, $arraydecay = 0, $add_ptr = 0, $freelist = 0, $3 = 0, $cmp1 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $bf_clear9 = 0, $tobool11 = 0, $arraydecay_add_ptr = 0, $9 = 0, $_ = 0, $dead_slot_053 = 0, $freed_052 = 0, $p_050 = 0, $basic = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $xor = 0, $and = 0, $and17 = 0, $tobool18 = 0, $bf_clear21 = 0, $cmp22 = 0, $14 = 0, $bf_clear27 = 0, $cmp28 = 0, $15 = 0, $next = 0, $_c = 0, $inc = 0, $16 = 0, $bf_clear38 = 0, $tobool39 = 0, $bf_value = 0, $17 = 0, $18 = 0, $19 = 0, $freed_1 = 0, $dead_slot_1 = 0, $incdec_ptr = 0, $cmp13 = 0, $dead_slot_0_lcssa = 0, $freed_0_lcssa = 0, $tobool46 = 0, $cmp48 = 0, $or_cond46 = 0, $next52 = 0, $20 = 0, $21 = 0, $cmp56 = 0, $or_cond47 = 0, $22 = 0, $cmp61 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $next77 = 0, $32 = 0, $page_1 = 0, $add = 0, $33 = 0, $sub = 0, $34 = 0, $sub79 = 0, $cmp = 0, $not_tobool = 0, $35 = 0, $page_0_lcssa = 0, $tried_sweep_0_lcssa = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $sweeps = $mrb + 104 | 0;
    $0 = HEAP32[$sweeps >> 2] | 0;
    $cmp55 = ($limit | 0) != 0;
    $not_tobool56 = ($0 | 0) != 0;
    $1 = $cmp55 & $not_tobool56;
    if ($1) {
      label = 3;
      break;
    } else {
      $tried_sweep_0_lcssa = 0;
      $page_0_lcssa = $0;
      label = 23;
      break;
    }
   case 3:
    $2 = $mrb + 552 | 0;
    $live = $mrb + 112 | 0;
    $gc_live_after_mark = $mrb + 536 | 0;
    $current_white_part = $mrb + 524 | 0;
    $tried_sweep_057 = 0;
    $page_058 = $0;
    label = 4;
    break;
   case 4:
    $arraydecay = $page_058 + 24 | 0;
    $add_ptr = $page_058 + 24600 | 0;
    $freelist = $page_058 | 0;
    $3 = HEAP32[$freelist >> 2] | 0;
    $cmp1 = ($3 | 0) != 0;
    $4 = HEAP8[$2] | 0;
    $5 = $4 & 6;
    $6 = $5 << 24 >> 24 == 4;
    if ($6) {
      label = 5;
      break;
    } else {
      $p_050 = $arraydecay;
      $freed_052 = 0;
      $dead_slot_053 = 1;
      label = 6;
      break;
    }
   case 5:
    $7 = $page_058 + 20 | 0;
    $8 = HEAP8[$7] | 0;
    $bf_clear9 = $8 & 1;
    $tobool11 = $bf_clear9 << 24 >> 24 == 0;
    $arraydecay_add_ptr = $tobool11 ? $arraydecay : $add_ptr;
    $9 = $bf_clear9 ^ 1;
    $_ = $9 & 255;
    if ($tobool11) {
      $p_050 = $arraydecay_add_ptr;
      $freed_052 = 0;
      $dead_slot_053 = $_;
      label = 6;
      break;
    } else {
      $freed_0_lcssa = 0;
      $dead_slot_0_lcssa = $_;
      label = 13;
      break;
    }
   case 6:
    $basic = $p_050;
    $10 = $p_050;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $11 >>> 8;
    $13 = HEAP32[$current_white_part >> 2] | 0;
    $xor = $13 ^ 3;
    $and = $12 & 3;
    $and17 = $and & $xor;
    $tobool18 = ($and17 | 0) == 0;
    if ($tobool18) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $bf_clear21 = $11 & 255;
    $cmp22 = ($bf_clear21 | 0) == 1;
    if ($cmp22) {
      label = 8;
      break;
    } else {
      label = 10;
      break;
    }
   case 8:
    $14 = HEAP32[$10 >> 2] | 0;
    $bf_clear27 = $14 & 255;
    $cmp28 = ($bf_clear27 | 0) == 1;
    if ($cmp28) {
      $dead_slot_1 = $dead_slot_053;
      $freed_1 = $freed_052;
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    _obj_free($mrb, $basic);
    $15 = HEAP32[$freelist >> 2] | 0;
    $next = $p_050 + 12 | 0;
    $_c = $15;
    HEAP32[$next >> 2] = $_c;
    HEAP32[$freelist >> 2] = $basic;
    $inc = $freed_052 + 1 | 0;
    $dead_slot_1 = $dead_slot_053;
    $freed_1 = $inc;
    label = 12;
    break;
   case 10:
    $16 = HEAP8[$2] | 0;
    $bf_clear38 = $16 & 4;
    $tobool39 = $bf_clear38 << 24 >> 24 == 0;
    if ($tobool39) {
      label = 11;
      break;
    } else {
      $dead_slot_1 = 0;
      $freed_1 = $freed_052;
      label = 12;
      break;
    }
   case 11:
    $bf_value = $13 << 8;
    $17 = $bf_value & 1792;
    $18 = $11 & -1793;
    $19 = $17 | $18;
    HEAP32[$10 >> 2] = $19;
    $dead_slot_1 = 0;
    $freed_1 = $freed_052;
    label = 12;
    break;
   case 12:
    $incdec_ptr = $p_050 + 24 | 0;
    $cmp13 = $incdec_ptr >>> 0 < $add_ptr >>> 0;
    if ($cmp13) {
      $p_050 = $incdec_ptr;
      $freed_052 = $freed_1;
      $dead_slot_053 = $dead_slot_1;
      label = 6;
      break;
    } else {
      $freed_0_lcssa = $freed_1;
      $dead_slot_0_lcssa = $dead_slot_1;
      label = 13;
      break;
    }
   case 13:
    $tobool46 = ($dead_slot_0_lcssa | 0) != 0;
    $cmp48 = $freed_0_lcssa >>> 0 < 1024;
    $or_cond46 = $tobool46 & $cmp48;
    if ($or_cond46) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $next52 = $page_058 + 8 | 0;
    $20 = HEAP32[$next52 >> 2] | 0;
    _unlink_heap_page($mrb, $page_058);
    _unlink_free_heap_page($mrb, $page_058);
    $21 = $page_058;
    _mrb_free($mrb, $21);
    $page_1 = $20;
    label = 22;
    break;
   case 15:
    $cmp56 = ($freed_0_lcssa | 0) == 0;
    $or_cond47 = $cmp1 | $cmp56;
    if ($or_cond47) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    _link_free_heap_page($mrb, $page_058);
    label = 17;
    break;
   case 17:
    $22 = HEAP32[$freelist >> 2] | 0;
    $cmp61 = ($22 | 0) == 0;
    if ($cmp61) {
      label = 18;
      break;
    } else {
      label = 20;
      break;
    }
   case 18:
    $23 = HEAP8[$2] | 0;
    $24 = $23 & 6;
    $25 = $24 << 24 >> 24 == 4;
    if ($25) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    $26 = $page_058 + 20 | 0;
    $27 = HEAP8[$26] | 0;
    $28 = $27 | 1;
    HEAP8[$26] = $28;
    label = 21;
    break;
   case 20:
    $29 = $page_058 + 20 | 0;
    $30 = HEAP8[$29] | 0;
    $31 = $30 & -2;
    HEAP8[$29] = $31;
    label = 21;
    break;
   case 21:
    $next77 = $page_058 + 8 | 0;
    $32 = HEAP32[$next77 >> 2] | 0;
    $page_1 = $32;
    label = 22;
    break;
   case 22:
    $add = $tried_sweep_057 + 1024 | 0;
    $33 = HEAP32[$live >> 2] | 0;
    $sub = $33 - $freed_0_lcssa | 0;
    HEAP32[$live >> 2] = $sub;
    $34 = HEAP32[$gc_live_after_mark >> 2] | 0;
    $sub79 = $34 - $freed_0_lcssa | 0;
    HEAP32[$gc_live_after_mark >> 2] = $sub79;
    $cmp = $add >>> 0 < $limit >>> 0;
    $not_tobool = ($page_1 | 0) != 0;
    $35 = $cmp & $not_tobool;
    if ($35) {
      $tried_sweep_057 = $add;
      $page_058 = $page_1;
      label = 4;
      break;
    } else {
      $tried_sweep_0_lcssa = $add;
      $page_0_lcssa = $page_1;
      label = 23;
      break;
    }
   case 23:
    HEAP32[$sweeps >> 2] = $page_0_lcssa;
    return $tried_sweep_0_lcssa | 0;
  }
  return 0;
}
function _gc_mark_children($mrb, $obj) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $gcnext = 0, $4 = 0, $gray_list = 0, $c = 0, $5 = 0, $6 = 0, $7 = 0, $bf_clear = 0, $super = 0, $8 = 0, $9 = 0, $super3 = 0, $10 = 0, $11 = 0, $env = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $cioff = 0, $16 = 0, $17 = 0, $cmp = 0, $18 = 0, $cmp846 = 0, $stack = 0, $19 = 0, $i_047 = 0, $20 = 0, $tt = 0, $21 = 0, $cmp9 = 0, $value = 0, $p13 = 0, $22 = 0, $23 = 0, $inc = 0, $cmp8 = 0, $cxt = 0, $24 = 0, $25 = 0, $len20 = 0, $26 = 0, $27 = 0, $cmp2249 = 0, $ptr = 0, $i18_050 = 0, $28 = 0, $tt26 = 0, $29 = 0, $30 = 0, $cmp27 = 0, $arrayidx2545 = 0, $p32 = 0, $31 = 0, $32 = 0, $inc36 = 0, $exitcond = 0, $33 = 0, $34 = 0, $edges = 0, $35 = 0, $36 = 0, $tobool = 0, $tt44 = 0, $37 = 0, $cmp45 = 0, $p50 = 0, $38 = 0, $39 = 0, $40 = 0, $tt55 = 0, $41 = 0, $cmp56 = 0, $value60 = 0, $p61 = 0, $42 = 0, $43 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $obj;
    $1 = HEAP32[$0 >> 2] | 0;
    $2 = $1 & -1793;
    $3 = $2 | 1024;
    HEAP32[$0 >> 2] = $3;
    $gcnext = $obj + 8 | 0;
    $4 = HEAP32[$gcnext >> 2] | 0;
    $gray_list = $mrb + 528 | 0;
    HEAP32[$gray_list >> 2] = $4;
    $c = $obj + 4 | 0;
    $5 = HEAP32[$c >> 2] | 0;
    $6 = $5;
    _mrb_gc_mark($mrb, $6);
    $7 = HEAP32[$0 >> 2] | 0;
    $bf_clear = $7 & 255;
    if (($bf_clear | 0) == 11) {
      label = 3;
      break;
    } else if (($bf_clear | 0) == 9 | ($bf_clear | 0) == 10 | ($bf_clear | 0) == 12) {
      label = 4;
      break;
    } else if (($bf_clear | 0) == 8 | ($bf_clear | 0) == 21) {
      label = 5;
      break;
    } else if (($bf_clear | 0) == 13) {
      label = 6;
      break;
    } else if (($bf_clear | 0) == 20) {
      label = 7;
      break;
    } else if (($bf_clear | 0) == 22) {
      label = 13;
      break;
    } else if (($bf_clear | 0) == 14) {
      label = 14;
      break;
    } else if (($bf_clear | 0) == 15) {
      label = 19;
      break;
    } else if (($bf_clear | 0) == 17) {
      label = 20;
      break;
    } else {
      label = 25;
      break;
    }
   case 3:
    $super = $obj + 20 | 0;
    $8 = HEAP32[$super >> 2] | 0;
    _mrb_gc_mark($mrb, $8);
    label = 25;
    break;
   case 4:
    $9 = $obj;
    _mrb_gc_mark_mt($mrb, $9);
    $super3 = $obj + 20 | 0;
    $10 = HEAP32[$super3 >> 2] | 0;
    _mrb_gc_mark($mrb, $10);
    label = 5;
    break;
   case 5:
    $11 = $obj;
    _mrb_gc_mark_iv($mrb, $11);
    label = 25;
    break;
   case 6:
    $env = $obj + 20 | 0;
    $12 = HEAP32[$env >> 2] | 0;
    _mrb_gc_mark($mrb, $12);
    $13 = $obj + 16 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $14;
    _mrb_gc_mark($mrb, $15);
    label = 25;
    break;
   case 7:
    $cioff = $obj + 20 | 0;
    $16 = $cioff;
    $17 = HEAP32[$16 >> 2] | 0;
    $cmp = ($17 | 0) < 0;
    if ($cmp) {
      label = 8;
      break;
    } else {
      label = 25;
      break;
    }
   case 8:
    $18 = $7 >>> 11;
    $cmp846 = ($18 | 0) == 0;
    if ($cmp846) {
      label = 25;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $stack = $obj + 12 | 0;
    $19 = $stack;
    $i_047 = 0;
    label = 10;
    break;
   case 10:
    $20 = HEAP32[$19 >> 2] | 0;
    $tt = $20 + ($i_047 * 12 & -1) + 8 | 0;
    $21 = HEAP32[$tt >> 2] | 0;
    $cmp9 = $21 >>> 0 > 7;
    if ($cmp9) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $value = $20 + ($i_047 * 12 & -1) | 0;
    $p13 = $value;
    $22 = HEAP32[$p13 >> 2] | 0;
    $23 = $22;
    _mrb_gc_mark($mrb, $23);
    label = 12;
    break;
   case 12:
    $inc = $i_047 + 1 | 0;
    $cmp8 = ($inc | 0) < ($18 | 0);
    if ($cmp8) {
      $i_047 = $inc;
      label = 10;
      break;
    } else {
      label = 25;
      break;
    }
   case 13:
    $cxt = $obj + 12 | 0;
    $24 = $cxt;
    $25 = HEAP32[$24 >> 2] | 0;
    _mark_context($mrb, $25);
    label = 25;
    break;
   case 14:
    $len20 = $obj + 12 | 0;
    $26 = $len20;
    $27 = HEAP32[$26 >> 2] | 0;
    $cmp2249 = ($27 | 0) == 0;
    if ($cmp2249) {
      label = 25;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $ptr = $obj + 20 | 0;
    $i18_050 = 0;
    label = 16;
    break;
   case 16:
    $28 = HEAP32[$ptr >> 2] | 0;
    $tt26 = $28 + ($i18_050 * 12 & -1) + 8 | 0;
    $29 = $tt26;
    $30 = HEAP32[$29 >> 2] | 0;
    $cmp27 = $30 >>> 0 > 7;
    if ($cmp27) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $arrayidx2545 = $28 + ($i18_050 * 12 & -1) | 0;
    $p32 = $arrayidx2545;
    $31 = HEAP32[$p32 >> 2] | 0;
    $32 = $31;
    _mrb_gc_mark($mrb, $32);
    label = 18;
    break;
   case 18:
    $inc36 = $i18_050 + 1 | 0;
    $exitcond = ($inc36 | 0) == ($27 | 0);
    if ($exitcond) {
      label = 25;
      break;
    } else {
      $i18_050 = $inc36;
      label = 16;
      break;
    }
   case 19:
    $33 = $obj;
    _mrb_gc_mark_iv($mrb, $33);
    $34 = $obj;
    _mrb_gc_mark_hash($mrb, $34);
    label = 25;
    break;
   case 20:
    $edges = $obj + 12 | 0;
    $35 = $edges;
    $36 = HEAP32[$35 >> 2] | 0;
    $tobool = ($36 | 0) == 0;
    if ($tobool) {
      label = 25;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $tt44 = $36 + 8 | 0;
    $37 = HEAP32[$tt44 >> 2] | 0;
    $cmp45 = $37 >>> 0 > 7;
    if ($cmp45) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    $p50 = $36;
    $38 = HEAP32[$p50 >> 2] | 0;
    $39 = $38;
    _mrb_gc_mark($mrb, $39);
    label = 23;
    break;
   case 23:
    $40 = HEAP32[$35 >> 2] | 0;
    $tt55 = $40 + 20 | 0;
    $41 = HEAP32[$tt55 >> 2] | 0;
    $cmp56 = $41 >>> 0 > 7;
    if ($cmp56) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    $value60 = $40 + 12 | 0;
    $p61 = $value60;
    $42 = HEAP32[$p61 >> 2] | 0;
    $43 = $42;
    _mrb_gc_mark($mrb, $43);
    label = 25;
    break;
   case 25:
    return;
  }
}
function _mark_context($mrb, $c) {
  $mrb = $mrb | 0;
  $c = $c | 0;
  var $stack = 0, $0 = 0, $stbase = 0, $1 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $sub_ptr_div = 0, $ci1 = 0, $2 = 0, $tobool = 0, $nregs = 0, $3 = 0, $add = 0, $e_0 = 0, $4 = 0, $add_ptr = 0, $stend = 0, $5 = 0, $cmp = 0, $sub_ptr_lhs_cast7 = 0, $sub_ptr_rhs_cast8 = 0, $sub_ptr_sub9 = 0, $sub_ptr_div10 = 0, $e_1 = 0, $cmp1241 = 0, $i_042 = 0, $6 = 0, $tt = 0, $7 = 0, $cmp14 = 0, $value = 0, $p = 0, $8 = 0, $9 = 0, $inc = 0, $exitcond43 = 0, $10 = 0, $tobool20 = 0, $eidx = 0, $11 = 0, $cmp2339 = 0, $ensure = 0, $i_140 = 0, $12 = 0, $arrayidx25 = 0, $13 = 0, $14 = 0, $inc27 = 0, $exitcond = 0, $cibase = 0, $15 = 0, $16 = 0, $cmp3137 = 0, $ci_038 = 0, $tobool33 = 0, $env = 0, $17 = 0, $18 = 0, $proc = 0, $19 = 0, $20 = 0, $target_class = 0, $21 = 0, $22 = 0, $incdec_ptr = 0, $23 = 0, $cmp31 = 0, $prev = 0, $24 = 0, $tobool38 = 0, $fib = 0, $25 = 0, $tobool40 = 0, $26 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $stack = $c + 4 | 0;
    $0 = HEAP32[$stack >> 2] | 0;
    $stbase = $c + 8 | 0;
    $1 = HEAP32[$stbase >> 2] | 0;
    $sub_ptr_lhs_cast = $0;
    $sub_ptr_rhs_cast = $1;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $sub_ptr_div = ($sub_ptr_sub | 0) / 12 & -1;
    $ci1 = $c + 16 | 0;
    $2 = HEAP32[$ci1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      $e_0 = $sub_ptr_div;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $nregs = $2 + 12 | 0;
    $3 = HEAP32[$nregs >> 2] | 0;
    $add = $3 + $sub_ptr_div | 0;
    $e_0 = $add;
    label = 4;
    break;
   case 4:
    $4 = HEAP32[$stbase >> 2] | 0;
    $add_ptr = $4 + ($e_0 * 12 & -1) | 0;
    $stend = $c + 12 | 0;
    $5 = HEAP32[$stend >> 2] | 0;
    $cmp = $add_ptr >>> 0 > $5 >>> 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      $e_1 = $e_0;
      label = 6;
      break;
    }
   case 5:
    $sub_ptr_lhs_cast7 = $5;
    $sub_ptr_rhs_cast8 = $4;
    $sub_ptr_sub9 = $sub_ptr_lhs_cast7 - $sub_ptr_rhs_cast8 | 0;
    $sub_ptr_div10 = ($sub_ptr_sub9 | 0) / 12 & -1;
    $e_1 = $sub_ptr_div10;
    label = 6;
    break;
   case 6:
    $cmp1241 = ($e_1 | 0) == 0;
    if ($cmp1241) {
      label = 10;
      break;
    } else {
      $i_042 = 0;
      label = 7;
      break;
    }
   case 7:
    $6 = HEAP32[$stbase >> 2] | 0;
    $tt = $6 + ($i_042 * 12 & -1) + 8 | 0;
    $7 = HEAP32[$tt >> 2] | 0;
    $cmp14 = $7 >>> 0 > 7;
    if ($cmp14) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $value = $6 + ($i_042 * 12 & -1) | 0;
    $p = $value;
    $8 = HEAP32[$p >> 2] | 0;
    $9 = $8;
    _mrb_gc_mark($mrb, $9);
    label = 9;
    break;
   case 9:
    $inc = $i_042 + 1 | 0;
    $exitcond43 = ($inc | 0) == ($e_1 | 0);
    if ($exitcond43) {
      label = 10;
      break;
    } else {
      $i_042 = $inc;
      label = 7;
      break;
    }
   case 10:
    $10 = HEAP32[$ci1 >> 2] | 0;
    $tobool20 = ($10 | 0) == 0;
    if ($tobool20) {
      label = 14;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $eidx = $10 + 36 | 0;
    $11 = HEAP32[$eidx >> 2] | 0;
    $cmp2339 = ($11 | 0) == 0;
    if ($cmp2339) {
      label = 14;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $ensure = $c + 36 | 0;
    $i_140 = 0;
    label = 13;
    break;
   case 13:
    $12 = HEAP32[$ensure >> 2] | 0;
    $arrayidx25 = $12 + ($i_140 << 2) | 0;
    $13 = HEAP32[$arrayidx25 >> 2] | 0;
    $14 = $13;
    _mrb_gc_mark($mrb, $14);
    $inc27 = $i_140 + 1 | 0;
    $exitcond = ($inc27 | 0) == ($11 | 0);
    if ($exitcond) {
      label = 14;
      break;
    } else {
      $i_140 = $inc27;
      label = 13;
      break;
    }
   case 14:
    $cibase = $c + 20 | 0;
    $15 = HEAP32[$cibase >> 2] | 0;
    $16 = HEAP32[$ci1 >> 2] | 0;
    $cmp3137 = $15 >>> 0 > $16 >>> 0;
    if ($cmp3137) {
      label = 18;
      break;
    } else {
      $ci_038 = $15;
      label = 15;
      break;
    }
   case 15:
    $tobool33 = ($ci_038 | 0) == 0;
    if ($tobool33) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $env = $ci_038 + 40 | 0;
    $17 = HEAP32[$env >> 2] | 0;
    $18 = $17;
    _mrb_gc_mark($mrb, $18);
    $proc = $ci_038 + 4 | 0;
    $19 = HEAP32[$proc >> 2] | 0;
    $20 = $19;
    _mrb_gc_mark($mrb, $20);
    $target_class = $ci_038 + 28 | 0;
    $21 = HEAP32[$target_class >> 2] | 0;
    $22 = $21;
    _mrb_gc_mark($mrb, $22);
    label = 17;
    break;
   case 17:
    $incdec_ptr = $ci_038 + 44 | 0;
    $23 = HEAP32[$ci1 >> 2] | 0;
    $cmp31 = $incdec_ptr >>> 0 > $23 >>> 0;
    if ($cmp31) {
      label = 18;
      break;
    } else {
      $ci_038 = $incdec_ptr;
      label = 15;
      break;
    }
   case 18:
    $prev = $c | 0;
    $24 = HEAP32[$prev >> 2] | 0;
    $tobool38 = ($24 | 0) == 0;
    if ($tobool38) {
      label = 21;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $fib = $24 + 48 | 0;
    $25 = HEAP32[$fib >> 2] | 0;
    $tobool40 = ($25 | 0) == 0;
    if ($tobool40) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $26 = $25;
    _mrb_gc_mark($mrb, $26);
    label = 21;
    break;
   case 21:
    return;
  }
}
function _gc_gray_mark($mrb, $obj) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $0 = 0, $1 = 0, $bf_clear = 0, $2 = 0, $3 = 0, $call = 0, $call2 = 0, $add3 = 0, $inc4 = 0, $4 = 0, $call6 = 0, $5 = 0, $cxt = 0, $6 = 0, $7 = 0, $stack = 0, $8 = 0, $stbase = 0, $9 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $sub_ptr_div = 0, $ci13 = 0, $10 = 0, $tobool = 0, $nregs = 0, $11 = 0, $add15 = 0, $i_0 = 0, $12 = 0, $add_ptr = 0, $stend = 0, $13 = 0, $cmp = 0, $sub_ptr_lhs_cast20 = 0, $sub_ptr_rhs_cast21 = 0, $sub_ptr_sub22 = 0, $sub_ptr_div23 = 0, $i_1 = 0, $14 = 0, $tobool27 = 0, $eidx = 0, $15 = 0, $cond = 0, $add29 = 0, $cibase = 0, $16 = 0, $tobool30 = 0, $17 = 0, $cmp3445 = 0, $18 = 0, $ci_047 = 0, $i_246 = 0, $inc35 = 0, $incdec_ptr = 0, $cmp34 = 0, $i_3 = 0, $add37 = 0, $len = 0, $19 = 0, $20 = 0, $21 = 0, $call41 = 0, $22 = 0, $call43 = 0, $add44 = 0, $children_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    _gc_mark_children($mrb, $obj);
    $0 = $obj;
    $1 = HEAP32[$0 >> 2] | 0;
    $bf_clear = $1 & 255;
    if (($bf_clear | 0) == 11) {
      label = 3;
      break;
    } else if (($bf_clear | 0) == 9 | ($bf_clear | 0) == 12 | ($bf_clear | 0) == 10) {
      label = 4;
      break;
    } else if (($bf_clear | 0) == 8 | ($bf_clear | 0) == 21) {
      label = 5;
      break;
    } else if (($bf_clear | 0) == 20) {
      label = 6;
      break;
    } else if (($bf_clear | 0) == 22) {
      label = 7;
      break;
    } else if (($bf_clear | 0) == 14) {
      label = 18;
      break;
    } else if (($bf_clear | 0) == 15) {
      label = 19;
      break;
    } else if (($bf_clear | 0) == 13 | ($bf_clear | 0) == 17) {
      label = 20;
      break;
    } else {
      $children_0 = 0;
      label = 21;
      break;
    }
   case 3:
    $children_0 = 1;
    label = 21;
    break;
   case 4:
    $2 = $obj;
    $3 = $obj;
    $call = _mrb_gc_mark_iv_size(0, $3) | 0;
    $call2 = _mrb_gc_mark_mt_size(0, $2) | 0;
    $add3 = $call + 1 | 0;
    $inc4 = $add3 + $call2 | 0;
    $children_0 = $inc4;
    label = 21;
    break;
   case 5:
    $4 = $obj;
    $call6 = _mrb_gc_mark_iv_size(0, $4) | 0;
    $children_0 = $call6;
    label = 21;
    break;
   case 6:
    $5 = $1 >>> 11;
    $children_0 = $5;
    label = 21;
    break;
   case 7:
    $cxt = $obj + 12 | 0;
    $6 = $cxt;
    $7 = HEAP32[$6 >> 2] | 0;
    $stack = $7 + 4 | 0;
    $8 = HEAP32[$stack >> 2] | 0;
    $stbase = $7 + 8 | 0;
    $9 = HEAP32[$stbase >> 2] | 0;
    $sub_ptr_lhs_cast = $8;
    $sub_ptr_rhs_cast = $9;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $sub_ptr_div = ($sub_ptr_sub | 0) / 12 & -1;
    $ci13 = $7 + 16 | 0;
    $10 = HEAP32[$ci13 >> 2] | 0;
    $tobool = ($10 | 0) == 0;
    if ($tobool) {
      $i_0 = $sub_ptr_div;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $nregs = $10 + 12 | 0;
    $11 = HEAP32[$nregs >> 2] | 0;
    $add15 = $11 + $sub_ptr_div | 0;
    $i_0 = $add15;
    label = 9;
    break;
   case 9:
    $12 = HEAP32[$stbase >> 2] | 0;
    $add_ptr = $12 + ($i_0 * 12 & -1) | 0;
    $stend = $7 + 12 | 0;
    $13 = HEAP32[$stend >> 2] | 0;
    $cmp = $add_ptr >>> 0 > $13 >>> 0;
    if ($cmp) {
      label = 10;
      break;
    } else {
      $i_1 = $i_0;
      label = 11;
      break;
    }
   case 10:
    $sub_ptr_lhs_cast20 = $13;
    $sub_ptr_rhs_cast21 = $12;
    $sub_ptr_sub22 = $sub_ptr_lhs_cast20 - $sub_ptr_rhs_cast21 | 0;
    $sub_ptr_div23 = ($sub_ptr_sub22 | 0) / 12 & -1;
    $i_1 = $sub_ptr_div23;
    label = 11;
    break;
   case 11:
    $14 = HEAP32[$ci13 >> 2] | 0;
    $tobool27 = ($14 | 0) == 0;
    if ($tobool27) {
      $cond = 0;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $eidx = $14 + 36 | 0;
    $15 = HEAP32[$eidx >> 2] | 0;
    $cond = $15;
    label = 13;
    break;
   case 13:
    $add29 = $cond + $i_1 | 0;
    $cibase = $7 + 20 | 0;
    $16 = HEAP32[$cibase >> 2] | 0;
    $tobool30 = ($16 | 0) == 0;
    if ($tobool30) {
      $i_3 = $i_1;
      label = 17;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $17 = HEAP32[$ci13 >> 2] | 0;
    $cmp3445 = $16 >>> 0 > $17 >>> 0;
    if ($cmp3445) {
      $i_3 = 0;
      label = 17;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $18 = HEAP32[$ci13 >> 2] | 0;
    $i_246 = 0;
    $ci_047 = $16;
    label = 16;
    break;
   case 16:
    $inc35 = $i_246 + 1 | 0;
    $incdec_ptr = $ci_047 + 44 | 0;
    $cmp34 = $incdec_ptr >>> 0 > $18 >>> 0;
    if ($cmp34) {
      $i_3 = $inc35;
      label = 17;
      break;
    } else {
      $i_246 = $inc35;
      $ci_047 = $incdec_ptr;
      label = 16;
      break;
    }
   case 17:
    $add37 = $add29 + $i_3 | 0;
    $children_0 = $add37;
    label = 21;
    break;
   case 18:
    $len = $obj + 12 | 0;
    $19 = $len;
    $20 = HEAP32[$19 >> 2] | 0;
    $children_0 = $20;
    label = 21;
    break;
   case 19:
    $21 = $obj;
    $call41 = _mrb_gc_mark_iv_size(0, $21) | 0;
    $22 = $obj;
    $call43 = _mrb_gc_mark_hash_size(0, $22) | 0;
    $add44 = $call43 + $call41 | 0;
    $children_0 = $add44;
    label = 21;
    break;
   case 20:
    $children_0 = 2;
    label = 21;
    break;
   case 21:
    return $children_0 | 0;
  }
  return 0;
}
function _kh_alloc_ht($h) {
  $h = $h | 0;
  var $0 = 0, $shr = 0, $shr1 = 0, $mrb = 0, $call = 0, $e_flags = 0, $div3 = 0, $d_flags = 0, $mul9 = 0;
  $0 = HEAP32[$h >> 2] | 0;
  HEAP32[$h + 8 >> 2] = 0;
  HEAP32[$h + 4 >> 2] = 0;
  $shr = $0 >>> 2;
  $shr1 = $0 >>> 1;
  HEAP32[$h + 12 >> 2] = $shr | $shr1;
  $mrb = $h + 40 | 0;
  $call = _mrb_malloc(HEAP32[$mrb >> 2] | 0, $shr) | 0;
  $e_flags = $h + 16 | 0;
  HEAP32[$e_flags >> 2] = $call;
  $div3 = $0 >>> 3;
  $d_flags = $h + 20 | 0;
  HEAP32[$d_flags >> 2] = $call + $div3 | 0;
  _kh_fill_flags1053(HEAP32[$e_flags >> 2] | 0, -1, $div3);
  _kh_fill_flags1053(HEAP32[$d_flags >> 2] | 0, 0, $div3);
  $mul9 = $0 * 12 & -1;
  HEAP32[$h + 24 >> 2] = _mrb_malloc(HEAP32[$mrb >> 2] | 0, $mul9) | 0;
  HEAP32[$h + 28 >> 2] = _mrb_malloc(HEAP32[$mrb >> 2] | 0, $mul9) | 0;
  HEAP32[$h + 32 >> 2] = $0 - 1 | 0;
  HEAP32[$h + 36 >> 2] = $shr1 - 1 | 0;
  return;
}
function _kh_fill_flags1053($p, $c, $len) {
  $p = $p | 0;
  $c = $c | 0;
  $len = $len | 0;
  var $cmp1 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp1 = ($len | 0) == 0;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _memset($p | 0, $c | 0, $len | 0);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _kh_del_ht($h, $x) {
  $h = $h | 0;
  $x = $x | 0;
  var $arrayidx1 = 0, $size = 0;
  $arrayidx1 = (HEAP32[$h + 20 >> 2] | 0) + ($x >>> 3) | 0;
  HEAP8[$arrayidx1] = HEAP8[$arrayidx1] | HEAP8[112172 + ($x & 7) | 0];
  $size = $h + 4 | 0;
  HEAP32[$size >> 2] = (HEAP32[$size >> 2] | 0) - 1 | 0;
  return;
}
function _mrb_gc_mark_hash_size($mrb, $hash) {
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $ht = 0, $0 = 0, $tobool = 0, $size = 0, $1 = 0, $mul = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ht = $hash + 16 | 0;
    $0 = HEAP32[$ht >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $size = $0 + 4 | 0;
    $1 = HEAP32[$size >> 2] | 0;
    $mul = $1 << 1;
    $retval_0 = $mul;
    label = 4;
    break;
   case 4:
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_obj_value1062($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_nil_value1065($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_bool_value1066($agg_result, $boolean) {
  $agg_result = $agg_result | 0;
  $boolean = $boolean | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = $boolean << 24 >> 24 != 0 ? 2 : 0;
  return;
}
function _kh_init_ht_size($mrb, $size) {
  $mrb = $mrb | 0;
  $size = $size | 0;
  var $call = 0, $0 = 0, $dec = 0, $or = 0, $or2 = 0, $or4 = 0, $or6 = 0;
  $call = _mrb_calloc($mrb, 1, 44) | 0;
  $0 = $call;
  $dec = $size >>> 0 < 8 ? 7 : $size - 1 | 0;
  $or = $dec >>> 1 | $dec;
  $or2 = $or >>> 2 | $or;
  $or4 = $or2 >>> 4 | $or2;
  $or6 = $or4 >>> 8 | $or4;
  HEAP32[$call >> 2] = ($or6 >>> 16 | $or6) + 1 | 0;
  HEAP32[$call + 40 >> 2] = $mrb;
  _kh_alloc_ht($0);
  return $0 | 0;
}
function _kh_init_ht($mrb) {
  $mrb = $mrb | 0;
  return _kh_init_ht_size($mrb, 32) | 0;
}
function _kh_destroy_ht($h) {
  $h = $h | 0;
  var $tobool = 0, $mrb = 0, $0 = 0, $keys = 0, $1 = 0, $2 = 0, $3 = 0, $vals = 0, $4 = 0, $5 = 0, $6 = 0, $e_flags = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($h | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $mrb = $h + 40 | 0;
    $0 = HEAP32[$mrb >> 2] | 0;
    $keys = $h + 24 | 0;
    $1 = HEAP32[$keys >> 2] | 0;
    $2 = $1;
    _mrb_free($0, $2);
    $3 = HEAP32[$mrb >> 2] | 0;
    $vals = $h + 28 | 0;
    $4 = HEAP32[$vals >> 2] | 0;
    $5 = $4;
    _mrb_free($3, $5);
    $6 = HEAP32[$mrb >> 2] | 0;
    $e_flags = $h + 16 | 0;
    $7 = HEAP32[$e_flags >> 2] | 0;
    _mrb_free($6, $7);
    $8 = HEAP32[$mrb >> 2] | 0;
    $9 = $h;
    _mrb_free($8, $9);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _kh_clear_ht($h) {
  $h = $h | 0;
  var $tobool = 0, $e_flags = 0, $0 = 0, $tobool1 = 0, $n_buckets = 0, $1 = 0, $div = 0, $d_flags = 0, $2 = 0, $3 = 0, $div4 = 0, $n_occupied = 0, $size = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($h | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $e_flags = $h + 16 | 0;
    $0 = HEAP32[$e_flags >> 2] | 0;
    $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $n_buckets = $h | 0;
    $1 = HEAP32[$n_buckets >> 2] | 0;
    $div = $1 >>> 3;
    _kh_fill_flags1053($0, -1, $div);
    $d_flags = $h + 20 | 0;
    $2 = HEAP32[$d_flags >> 2] | 0;
    $3 = HEAP32[$n_buckets >> 2] | 0;
    $div4 = $3 >>> 3;
    _kh_fill_flags1053($2, 0, $div4);
    $n_occupied = $h + 8 | 0;
    HEAP32[$n_occupied >> 2] = 0;
    $size = $h + 4 | 0;
    HEAP32[$size >> 2] = 0;
    label = 5;
    break;
   case 5:
    return;
  }
}
function _kh_get_ht($h, $key) {
  $h = $h | 0;
  $key = $key | 0;
  var $mrb = 0, $0 = 0, $call = 0, $mask = 0, $1 = 0, $and = 0, $div18 = 0, $e_flags = 0, $2 = 0, $arrayidx19 = 0, $3 = 0, $rem20 = 0, $arrayidx121 = 0, $4 = 0, $and31522 = 0, $lnot23 = 0, $d_flags = 0, $keys = 0, $inc = 0, $5 = 0, $div25 = 0, $k_024 = 0, $6 = 0, $arrayidx5 = 0, $7 = 0, $and1016 = 0, $tobool11 = 0, $8 = 0, $9 = 0, $arrayidx13 = 0, $call14 = 0, $tobool15 = 0, $10 = 0, $add = 0, $11 = 0, $and19 = 0, $div = 0, $12 = 0, $arrayidx = 0, $13 = 0, $rem = 0, $arrayidx1 = 0, $14 = 0, $and315 = 0, $lnot = 0, $n_buckets = 0, $15 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $key;
  $key = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$key >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$key + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$key + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $mrb = $h + 40 | 0;
    $0 = HEAP32[$mrb >> 2] | 0;
    $call = _mrb_hash_ht_hash_func($0, $key) | 0;
    $mask = $h + 32 | 0;
    $1 = HEAP32[$mask >> 2] | 0;
    $and = $1 & $call;
    $div18 = $and >>> 3;
    $e_flags = $h + 16 | 0;
    $2 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx19 = $2 + $div18 | 0;
    $3 = HEAP8[$arrayidx19] | 0;
    $rem20 = $and & 7;
    $arrayidx121 = $rem20 + 112172 | 0;
    $4 = HEAP8[$arrayidx121] | 0;
    $and31522 = $4 & $3;
    $lnot23 = $and31522 << 24 >> 24 == 0;
    if ($lnot23) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    $d_flags = $h + 20 | 0;
    $keys = $h + 24 | 0;
    $inc = $h + 36 | 0;
    $k_024 = $and;
    $div25 = $div18;
    $5 = $4;
    label = 4;
    break;
   case 4:
    $6 = HEAP32[$d_flags >> 2] | 0;
    $arrayidx5 = $6 + $div25 | 0;
    $7 = HEAP8[$arrayidx5] | 0;
    $and1016 = $7 & $5;
    $tobool11 = $and1016 << 24 >> 24 == 0;
    if ($tobool11) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $8 = HEAP32[$mrb >> 2] | 0;
    $9 = HEAP32[$keys >> 2] | 0;
    $arrayidx13 = $9 + ($k_024 * 12 & -1) | 0;
    $call14 = _mrb_hash_ht_hash_equal($8, $arrayidx13, $key) | 0;
    $tobool15 = ($call14 | 0) == 0;
    if ($tobool15) {
      label = 6;
      break;
    } else {
      $retval_0 = $k_024;
      label = 8;
      break;
    }
   case 6:
    $10 = HEAP32[$inc >> 2] | 0;
    $add = $10 + $k_024 | 0;
    $11 = HEAP32[$mask >> 2] | 0;
    $and19 = $add & $11;
    $div = $and19 >>> 3;
    $12 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $12 + $div | 0;
    $13 = HEAP8[$arrayidx] | 0;
    $rem = $and19 & 7;
    $arrayidx1 = $rem + 112172 | 0;
    $14 = HEAP8[$arrayidx1] | 0;
    $and315 = $14 & $13;
    $lnot = $and315 << 24 >> 24 == 0;
    if ($lnot) {
      $k_024 = $and19;
      $div25 = $div;
      $5 = $14;
      label = 4;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $n_buckets = $h | 0;
    $15 = HEAP32[$n_buckets >> 2] | 0;
    $retval_0 = $15;
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_hash_ht_hash_func($mrb, $key) {
  $mrb = $mrb | 0;
  $key = $key | 0;
  var $tmp = 0, $shl = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $key;
  $key = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$key >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$key + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$key + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $tmp = __stackBase__ | 0;
  $shl = HEAP32[$key + 8 >> 2] << 24;
  _mrb_funcall($tmp, $mrb, $key, 98908, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
  STACKTOP = __stackBase__;
  return HEAP32[$tmp >> 2] ^ $shl | 0;
}
function _mrb_hash_ht_hash_equal($mrb, $a, $b) {
  $mrb = $mrb | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $call = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $a;
  $a = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$a >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$a + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$a + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $b;
  $b = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$b >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$b + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$b + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $call = _mrb_eql($mrb, $a, $b) | 0;
  STACKTOP = __stackBase__;
  return $call | 0;
}
function _kh_resize_ht($h, $new_n_buckets) {
  $h = $h | 0;
  $new_n_buckets = $new_n_buckets | 0;
  var $cmp = 0, $new_n_buckets_op = 0, $dec = 0, $shr = 0, $or = 0, $shr1 = 0, $or2 = 0, $shr3 = 0, $or4 = 0, $shr5 = 0, $or6 = 0, $shr7 = 0, $or8 = 0, $inc = 0, $e_flags = 0, $0 = 0, $keys = 0, $1 = 0, $vals = 0, $2 = 0, $n_buckets = 0, $3 = 0, $cmp1033 = 0, $i_034 = 0, $div = 0, $arrayidx = 0, $4 = 0, $rem = 0, $arrayidx11 = 0, $5 = 0, $and32 = 0, $tobool = 0, $arrayidx14 = 0, $call = 0, $6 = 0, $arrayidx16 = 0, $arrayidx17 = 0, $7 = 0, $8 = 0, $inc19 = 0, $exitcond = 0, $mrb = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = $new_n_buckets >>> 0 < 8;
    $new_n_buckets_op = $new_n_buckets - 1 | 0;
    $dec = $cmp ? 7 : $new_n_buckets_op;
    $shr = $dec >>> 1;
    $or = $shr | $dec;
    $shr1 = $or >>> 2;
    $or2 = $shr1 | $or;
    $shr3 = $or2 >>> 4;
    $or4 = $shr3 | $or2;
    $shr5 = $or4 >>> 8;
    $or6 = $shr5 | $or4;
    $shr7 = $or6 >>> 16;
    $or8 = $shr7 | $or6;
    $inc = $or8 + 1 | 0;
    $e_flags = $h + 16 | 0;
    $0 = HEAP32[$e_flags >> 2] | 0;
    $keys = $h + 24 | 0;
    $1 = HEAP32[$keys >> 2] | 0;
    $vals = $h + 28 | 0;
    $2 = HEAP32[$vals >> 2] | 0;
    $n_buckets = $h | 0;
    $3 = HEAP32[$n_buckets >> 2] | 0;
    HEAP32[$n_buckets >> 2] = $inc;
    _kh_alloc_ht($h);
    $cmp1033 = ($3 | 0) == 0;
    if ($cmp1033) {
      label = 6;
      break;
    } else {
      $i_034 = 0;
      label = 3;
      break;
    }
   case 3:
    $div = $i_034 >>> 3;
    $arrayidx = $0 + $div | 0;
    $4 = HEAP8[$arrayidx] | 0;
    $rem = $i_034 & 7;
    $arrayidx11 = $rem + 112172 | 0;
    $5 = HEAP8[$arrayidx11] | 0;
    $and32 = $5 & $4;
    $tobool = $and32 << 24 >> 24 == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $arrayidx14 = $1 + ($i_034 * 12 & -1) | 0;
    $call = _kh_put_ht($h, $arrayidx14) | 0;
    $6 = HEAP32[$vals >> 2] | 0;
    $arrayidx16 = $6 + ($call * 12 & -1) | 0;
    $arrayidx17 = $2 + ($i_034 * 12 & -1) | 0;
    $7 = $arrayidx16;
    $8 = $arrayidx17;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    label = 5;
    break;
   case 5:
    $inc19 = $i_034 + 1 | 0;
    $exitcond = ($inc19 | 0) == ($3 | 0);
    if ($exitcond) {
      label = 6;
      break;
    } else {
      $i_034 = $inc19;
      label = 3;
      break;
    }
   case 6:
    $mrb = $h + 40 | 0;
    $9 = HEAP32[$mrb >> 2] | 0;
    _mrb_free($9, $0);
    $10 = HEAP32[$mrb >> 2] | 0;
    $11 = $1;
    _mrb_free($10, $11);
    $12 = HEAP32[$mrb >> 2] | 0;
    $13 = $2;
    _mrb_free($12, $13);
    return;
  }
}
function _kh_put_ht($h, $key) {
  $h = $h | 0;
  $key = $key | 0;
  var $n_occupied = 0, $0 = 0, $upper_bound = 0, $1 = 0, $cmp = 0, $n_buckets = 0, $2 = 0, $mul = 0, $mrb = 0, $3 = 0, $call = 0, $mask = 0, $4 = 0, $and = 0, $d_flags = 0, $div40 = 0, $e_flags = 0, $5 = 0, $arrayidx41 = 0, $6 = 0, $rem42 = 0, $arrayidx143 = 0, $7 = 0, $and33644 = 0, $tobool45 = 0, $keys = 0, $inc = 0, $8 = 0, $arrayidx148 = 0, $div47 = 0, $k_046 = 0, $9 = 0, $arrayidx5 = 0, $10 = 0, $and1037 = 0, $phitmp = 0, $11 = 0, $12 = 0, $arrayidx13 = 0, $call14 = 0, $tobool15 = 0, $13 = 0, $add = 0, $14 = 0, $and19 = 0, $div = 0, $15 = 0, $arrayidx = 0, $16 = 0, $rem = 0, $arrayidx1 = 0, $17 = 0, $and336 = 0, $tobool = 0, $arrayidx1_lcssa = 0, $div_lcssa = 0, $k_0_lcssa = 0, $18 = 0, $arrayidx22 = 0, $19 = 0, $20 = 0, $and2738 = 0, $tobool28 = 0, $keys30 = 0, $21 = 0, $arrayidx31 = 0, $22 = 0, $23 = 0, $24 = 0, $neg = 0, $25 = 0, $arrayidx37 = 0, $26 = 0, $and39 = 0, $size = 0, $27 = 0, $inc41 = 0, $28 = 0, $inc43 = 0, $d_flags45 = 0, $29 = 0, $arrayidx46 = 0, $30 = 0, $and5139 = 0, $tobool52 = 0, $keys54 = 0, $31 = 0, $arrayidx55 = 0, $32 = 0, $33 = 0, $34 = 0, $neg59 = 0, $35 = 0, $arrayidx62 = 0, $36 = 0, $and64 = 0, $size66 = 0, $37 = 0, $inc67 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $key;
  $key = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$key >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$key + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$key + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $n_occupied = $h + 8 | 0;
    $0 = HEAP32[$n_occupied >> 2] | 0;
    $upper_bound = $h + 12 | 0;
    $1 = HEAP32[$upper_bound >> 2] | 0;
    $cmp = $0 >>> 0 < $1 >>> 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $n_buckets = $h | 0;
    $2 = HEAP32[$n_buckets >> 2] | 0;
    $mul = $2 << 1;
    _kh_resize_ht($h, $mul);
    label = 4;
    break;
   case 4:
    $mrb = $h + 40 | 0;
    $3 = HEAP32[$mrb >> 2] | 0;
    $call = _mrb_hash_ht_hash_func($3, $key) | 0;
    $mask = $h + 32 | 0;
    $4 = HEAP32[$mask >> 2] | 0;
    $and = $4 & $call;
    $d_flags = $h + 20 | 0;
    $div40 = $and >>> 3;
    $e_flags = $h + 16 | 0;
    $5 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx41 = $5 + $div40 | 0;
    $6 = HEAP8[$arrayidx41] | 0;
    $rem42 = $and & 7;
    $arrayidx143 = $rem42 + 112172 | 0;
    $7 = HEAP8[$arrayidx143] | 0;
    $and33644 = $7 & $6;
    $tobool45 = $and33644 << 24 >> 24 == 0;
    if ($tobool45) {
      label = 5;
      break;
    } else {
      $k_0_lcssa = $and;
      $div_lcssa = $div40;
      $arrayidx1_lcssa = $arrayidx143;
      label = 9;
      break;
    }
   case 5:
    $keys = $h + 24 | 0;
    $inc = $h + 36 | 0;
    $k_046 = $and;
    $div47 = $div40;
    $arrayidx148 = $arrayidx143;
    $8 = $7;
    label = 6;
    break;
   case 6:
    $9 = HEAP32[$d_flags >> 2] | 0;
    $arrayidx5 = $9 + $div47 | 0;
    $10 = HEAP8[$arrayidx5] | 0;
    $and1037 = $10 & $8;
    $phitmp = $and1037 << 24 >> 24 == 0;
    if ($phitmp) {
      label = 7;
      break;
    } else {
      $k_0_lcssa = $k_046;
      $div_lcssa = $div47;
      $arrayidx1_lcssa = $arrayidx148;
      label = 9;
      break;
    }
   case 7:
    $11 = HEAP32[$mrb >> 2] | 0;
    $12 = HEAP32[$keys >> 2] | 0;
    $arrayidx13 = $12 + ($k_046 * 12 & -1) | 0;
    $call14 = _mrb_hash_ht_hash_equal($11, $arrayidx13, $key) | 0;
    $tobool15 = ($call14 | 0) == 0;
    if ($tobool15) {
      label = 8;
      break;
    } else {
      $k_0_lcssa = $k_046;
      $div_lcssa = $div47;
      $arrayidx1_lcssa = $arrayidx148;
      label = 9;
      break;
    }
   case 8:
    $13 = HEAP32[$inc >> 2] | 0;
    $add = $13 + $k_046 | 0;
    $14 = HEAP32[$mask >> 2] | 0;
    $and19 = $add & $14;
    $div = $and19 >>> 3;
    $15 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $15 + $div | 0;
    $16 = HEAP8[$arrayidx] | 0;
    $rem = $and19 & 7;
    $arrayidx1 = $rem + 112172 | 0;
    $17 = HEAP8[$arrayidx1] | 0;
    $and336 = $17 & $16;
    $tobool = $and336 << 24 >> 24 == 0;
    if ($tobool) {
      $k_046 = $and19;
      $div47 = $div;
      $arrayidx148 = $arrayidx1;
      $8 = $17;
      label = 6;
      break;
    } else {
      $k_0_lcssa = $and19;
      $div_lcssa = $div;
      $arrayidx1_lcssa = $arrayidx1;
      label = 9;
      break;
    }
   case 9:
    $18 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx22 = $18 + $div_lcssa | 0;
    $19 = HEAP8[$arrayidx22] | 0;
    $20 = HEAP8[$arrayidx1_lcssa] | 0;
    $and2738 = $20 & $19;
    $tobool28 = $and2738 << 24 >> 24 == 0;
    if ($tobool28) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $keys30 = $h + 24 | 0;
    $21 = HEAP32[$keys30 >> 2] | 0;
    $arrayidx31 = $21 + ($k_0_lcssa * 12 & -1) | 0;
    $22 = $arrayidx31;
    $23 = $key;
    HEAP32[$22 >> 2] = HEAP32[$23 >> 2] | 0;
    HEAP32[$22 + 4 >> 2] = HEAP32[$23 + 4 >> 2] | 0;
    HEAP32[$22 + 8 >> 2] = HEAP32[$23 + 8 >> 2] | 0;
    $24 = HEAP8[$arrayidx1_lcssa] | 0;
    $neg = $24 ^ -1;
    $25 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx37 = $25 + $div_lcssa | 0;
    $26 = HEAP8[$arrayidx37] | 0;
    $and39 = $26 & $neg;
    HEAP8[$arrayidx37] = $and39;
    $size = $h + 4 | 0;
    $27 = HEAP32[$size >> 2] | 0;
    $inc41 = $27 + 1 | 0;
    HEAP32[$size >> 2] = $inc41;
    $28 = HEAP32[$n_occupied >> 2] | 0;
    $inc43 = $28 + 1 | 0;
    HEAP32[$n_occupied >> 2] = $inc43;
    label = 13;
    break;
   case 11:
    $d_flags45 = $h + 20 | 0;
    $29 = HEAP32[$d_flags45 >> 2] | 0;
    $arrayidx46 = $29 + $div_lcssa | 0;
    $30 = HEAP8[$arrayidx46] | 0;
    $and5139 = $30 & $20;
    $tobool52 = $and5139 << 24 >> 24 == 0;
    if ($tobool52) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $keys54 = $h + 24 | 0;
    $31 = HEAP32[$keys54 >> 2] | 0;
    $arrayidx55 = $31 + ($k_0_lcssa * 12 & -1) | 0;
    $32 = $arrayidx55;
    $33 = $key;
    HEAP32[$32 >> 2] = HEAP32[$33 >> 2] | 0;
    HEAP32[$32 + 4 >> 2] = HEAP32[$33 + 4 >> 2] | 0;
    HEAP32[$32 + 8 >> 2] = HEAP32[$33 + 8 >> 2] | 0;
    $34 = HEAP8[$arrayidx1_lcssa] | 0;
    $neg59 = $34 ^ -1;
    $35 = HEAP32[$d_flags45 >> 2] | 0;
    $arrayidx62 = $35 + $div_lcssa | 0;
    $36 = HEAP8[$arrayidx62] | 0;
    $and64 = $36 & $neg59;
    HEAP8[$arrayidx62] = $and64;
    $size66 = $h + 4 | 0;
    $37 = HEAP32[$size66 >> 2] | 0;
    $inc67 = $37 + 1 | 0;
    HEAP32[$size66 >> 2] = $inc67;
    label = 13;
    break;
   case 13:
    STACKTOP = __stackBase__;
    return $k_0_lcssa | 0;
  }
  return 0;
}
function _mrb_gc_mark_hash($mrb, $hash) {
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $ht = 0, $0 = 0, $tobool = 0, $n_buckets = 0, $1 = 0, $cmp18 = 0, $e_flags = 0, $d_flags = 0, $keys = 0, $vals = 0, $k_019 = 0, $div = 0, $2 = 0, $arrayidx = 0, $3 = 0, $rem = 0, $arrayidx1 = 0, $4 = 0, $and16 = 0, $tobool3 = 0, $5 = 0, $arrayidx5 = 0, $6 = 0, $and1017 = 0, $tobool11 = 0, $7 = 0, $key_sroa_2_8__idx2 = 0, $key_sroa_2_8_copyload = 0, $8 = 0, $arrayidx14 = 0, $val_sroa_0_0__cast = 0, $val_sroa_0_0_copyload = 0, $val_sroa_2_8__idx1 = 0, $val_sroa_2_8_copyload = 0, $cmp15 = 0, $arrayidx13 = 0, $key_sroa_0_0__cast = 0, $key_sroa_0_0_copyload = 0, $9 = 0, $cmp21 = 0, $10 = 0, $inc = 0, $11 = 0, $cmp = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ht = $hash + 16 | 0;
    $0 = HEAP32[$ht >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 12;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $n_buckets = $0 | 0;
    $1 = HEAP32[$n_buckets >> 2] | 0;
    $cmp18 = ($1 | 0) == 0;
    if ($cmp18) {
      label = 12;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $e_flags = $0 + 16 | 0;
    $d_flags = $0 + 20 | 0;
    $keys = $0 + 24 | 0;
    $vals = $0 + 28 | 0;
    $k_019 = 0;
    label = 5;
    break;
   case 5:
    $div = $k_019 >>> 3;
    $2 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $2 + $div | 0;
    $3 = HEAP8[$arrayidx] | 0;
    $rem = $k_019 & 7;
    $arrayidx1 = $rem + 112172 | 0;
    $4 = HEAP8[$arrayidx1] | 0;
    $and16 = $4 & $3;
    $tobool3 = $and16 << 24 >> 24 == 0;
    if ($tobool3) {
      label = 6;
      break;
    } else {
      label = 11;
      break;
    }
   case 6:
    $5 = HEAP32[$d_flags >> 2] | 0;
    $arrayidx5 = $5 + $div | 0;
    $6 = HEAP8[$arrayidx5] | 0;
    $and1017 = $6 & $4;
    $tobool11 = $and1017 << 24 >> 24 == 0;
    if ($tobool11) {
      label = 7;
      break;
    } else {
      label = 11;
      break;
    }
   case 7:
    $7 = HEAP32[$keys >> 2] | 0;
    $key_sroa_2_8__idx2 = $7 + ($k_019 * 12 & -1) + 8 | 0;
    $key_sroa_2_8_copyload = HEAP32[$key_sroa_2_8__idx2 >> 2] | 0;
    $8 = HEAP32[$vals >> 2] | 0;
    $arrayidx14 = $8 + ($k_019 * 12 & -1) | 0;
    $val_sroa_0_0__cast = $arrayidx14;
    $val_sroa_0_0_copyload = HEAP32[$val_sroa_0_0__cast >> 2] | 0;
    $val_sroa_2_8__idx1 = $8 + ($k_019 * 12 & -1) + 8 | 0;
    $val_sroa_2_8_copyload = HEAP32[$val_sroa_2_8__idx1 >> 2] | 0;
    $cmp15 = $key_sroa_2_8_copyload >>> 0 > 7;
    if ($cmp15) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $arrayidx13 = $7 + ($k_019 * 12 & -1) | 0;
    $key_sroa_0_0__cast = $arrayidx13;
    $key_sroa_0_0_copyload = HEAP32[$key_sroa_0_0__cast >> 2] | 0;
    $9 = $key_sroa_0_0_copyload;
    _mrb_gc_mark($mrb, $9);
    label = 9;
    break;
   case 9:
    $cmp21 = $val_sroa_2_8_copyload >>> 0 > 7;
    if ($cmp21) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $10 = $val_sroa_0_0_copyload;
    _mrb_gc_mark($mrb, $10);
    label = 11;
    break;
   case 11:
    $inc = $k_019 + 1 | 0;
    $11 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($inc | 0) == ($11 | 0);
    if ($cmp) {
      label = 12;
      break;
    } else {
      $k_019 = $inc;
      label = 5;
      break;
    }
   case 12:
    return;
  }
}
function _mrb_gc_free_hash($mrb, $hash) {
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $ht = 0, $0 = 0, $tobool = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ht = $hash + 16 | 0;
    $0 = HEAP32[$ht >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _kh_destroy_ht($0);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _mrb_hash_new_capa($agg_result, $mrb, $capa) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $capa = $capa | 0;
  var $hash_class = 0, $0 = 0, $call = 0, $call1 = 0, $ht = 0, $call1_c = 0, $cmp = 0, $iv = 0, $1 = 0, $2 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $hash_class = $mrb + 68 | 0;
    $0 = HEAP32[$hash_class >> 2] | 0;
    $call = _mrb_obj_alloc($mrb, 15, $0) | 0;
    $call1 = _kh_init_ht($mrb) | 0;
    $ht = $call + 16 | 0;
    $call1_c = $call1;
    HEAP32[$ht >> 2] = $call1_c;
    $cmp = ($capa | 0) > 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _kh_resize_ht($call1, $capa);
    label = 4;
    break;
   case 4:
    $iv = $call + 12 | 0;
    $1 = $iv;
    HEAP32[$1 >> 2] = 0;
    $2 = $call | 0;
    _mrb_obj_value1062($agg_result, $2);
    return;
  }
}
function _mrb_hash_new($agg_result, $mrb) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  _mrb_hash_new_capa($agg_result, $mrb, 0);
  return;
}
function _mrb_hash_get($agg_result, $mrb, $hash, $key) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  $key = $key | 0;
  var $agg_tmp = 0, $p = 0, $0 = 0, $ht = 0, $1 = 0, $2 = 0, $tobool = 0, $call = 0, $n_buckets = 0, $3 = 0, $cmp = 0, $vals = 0, $4 = 0, $arrayidx = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $tobool5 = 0, $call9 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $key;
  $key = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$key >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$key + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$key + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $p = $hash;
    $0 = HEAP32[$p >> 2] | 0;
    $ht = $0 + 16 | 0;
    $1 = $ht;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _kh_get_ht($2, $key) | 0;
    $n_buckets = $2 | 0;
    $3 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($call | 0) == ($3 | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $vals = $2 + 28 | 0;
    $4 = HEAP32[$vals >> 2] | 0;
    $arrayidx = $4 + ($call * 12 & -1) | 0;
    $5 = $agg_result;
    $6 = $arrayidx;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2] | 0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
    label = 8;
    break;
   case 5:
    $7 = HEAP32[$p >> 2] | 0;
    $8 = $7;
    $9 = HEAP32[$8 >> 2] | 0;
    $and = $9 & 524288;
    $tobool5 = ($and | 0) == 0;
    $call9 = _mrb_intern2($mrb, 111640, 6) | 0;
    if ($tobool5) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _mrb_iv_get($agg_tmp, 0, $hash, $call9);
    _mrb_funcall($agg_result, $mrb, $agg_tmp, 111028, 2, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$hash >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$hash + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$hash + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$key >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$key + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$key + 8 >> 2] | 0, tempInt) | 0);
    label = 8;
    break;
   case 7:
    _mrb_iv_get($agg_result, 0, $hash, $call9);
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_hash_fetch($agg_result, $mrb, $hash, $key, $def) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  $key = $key | 0;
  $def = $def | 0;
  var $p = 0, $0 = 0, $ht = 0, $1 = 0, $2 = 0, $tobool = 0, $call = 0, $n_buckets = 0, $3 = 0, $cmp = 0, $vals = 0, $4 = 0, $arrayidx = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $key;
  $key = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$key >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$key + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$key + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $def;
  $def = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$def >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$def + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$def + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $hash;
    $0 = HEAP32[$p >> 2] | 0;
    $ht = $0 + 16 | 0;
    $1 = $ht;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _kh_get_ht($2, $key) | 0;
    $n_buckets = $2 | 0;
    $3 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($call | 0) == ($3 | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $vals = $2 + 28 | 0;
    $4 = HEAP32[$vals >> 2] | 0;
    $arrayidx = $4 + ($call * 12 & -1) | 0;
    $5 = $agg_result;
    $6 = $arrayidx;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2] | 0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
    label = 6;
    break;
   case 5:
    $7 = $agg_result;
    $8 = $def;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_hash_set($mrb, $hash, $key, $val) {
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  $key = $key | 0;
  $val = $val | 0;
  var $agg_tmp = 0, $p = 0, $0 = 0, $ht = 0, $1 = 0, $2 = 0, $tobool = 0, $call = 0, $3 = 0, $ht3 = 0, $4 = 0, $h_0 = 0, $call4 = 0, $n_buckets = 0, $5 = 0, $cmp = 0, $call6 = 0, $k_0 = 0, $vals = 0, $6 = 0, $arrayidx = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $key;
  $key = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$key >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$key + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$key + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    _mrb_hash_modify($mrb, $hash);
    $p = $hash;
    $0 = HEAP32[$p >> 2] | 0;
    $ht = $0 + 16 | 0;
    $1 = $ht;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $h_0 = $2;
      label = 4;
      break;
    }
   case 3:
    $call = _kh_init_ht($mrb) | 0;
    $3 = HEAP32[$p >> 2] | 0;
    $ht3 = $3 + 16 | 0;
    $4 = $ht3;
    HEAP32[$4 >> 2] = $call;
    $h_0 = $call;
    label = 4;
    break;
   case 4:
    $call4 = _kh_get_ht($h_0, $key) | 0;
    $n_buckets = $h_0 | 0;
    $5 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($call4 | 0) == ($5 | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      $k_0 = $call4;
      label = 6;
      break;
    }
   case 5:
    _mrb_hash_ht_key($agg_tmp, $mrb, $key);
    $call6 = _kh_put_ht($h_0, $agg_tmp) | 0;
    $k_0 = $call6;
    label = 6;
    break;
   case 6:
    $vals = $h_0 + 28 | 0;
    $6 = HEAP32[$vals >> 2] | 0;
    $arrayidx = $6 + ($k_0 * 12 & -1) | 0;
    $7 = $arrayidx;
    $8 = $val;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    $9 = HEAP32[$p >> 2] | 0;
    $10 = $9;
    _mrb_write_barrier($mrb, $10);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_hash_modify($mrb, $hash) {
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_hash_tbl($mrb, $hash);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_ht_key($agg_result, $mrb, $key) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $key = $key | 0;
  var $tt = 0, $0 = 0, $cmp = 0, $1 = 0, $2 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $key;
  $key = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$key >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$key + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$key + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $key + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 16;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_str_dup($agg_result, $mrb, $key);
    label = 5;
    break;
   case 4:
    $1 = $agg_result;
    $2 = $key;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_hash_tbl($mrb, $hash) {
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $p = 0, $0 = 0, $ht = 0, $1 = 0, $2 = 0, $tobool = 0, $call = 0, $3 = 0, $ht3 = 0, $4 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $hash;
    $0 = HEAP32[$p >> 2] | 0;
    $ht = $0 + 16 | 0;
    $1 = $ht;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _kh_init_ht($mrb) | 0;
    $3 = HEAP32[$p >> 2] | 0;
    $ht3 = $3 + 16 | 0;
    $4 = $ht3;
    HEAP32[$4 >> 2] = $call;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return $2 | 0;
  }
  return 0;
}
function _mrb_hash_aget($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $key = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $key = __stackBase__ | 0;
  _mrb_get_args($mrb, 100228, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $key, tempInt) | 0);
  _mrb_hash_get($agg_result, $mrb, $self, $key);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_delete_key($agg_result, $mrb, $hash, $key) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  $key = $key | 0;
  var $p = 0, $0 = 0, $ht = 0, $1 = 0, $2 = 0, $tobool = 0, $call = 0, $n_buckets = 0, $3 = 0, $cmp = 0, $vals = 0, $4 = 0, $arrayidx = 0, $5 = 0, $agg_result7 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $key;
  $key = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$key >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$key + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$key + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $hash;
    $0 = HEAP32[$p >> 2] | 0;
    $ht = $0 + 16 | 0;
    $1 = $ht;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _kh_get_ht($2, $key) | 0;
    $n_buckets = $2 | 0;
    $3 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($call | 0) == ($3 | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $vals = $2 + 28 | 0;
    $4 = HEAP32[$vals >> 2] | 0;
    $arrayidx = $4 + ($call * 12 & -1) | 0;
    $5 = $arrayidx;
    $agg_result7 = $agg_result;
    HEAP32[$agg_result7 >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$agg_result7 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$agg_result7 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    _kh_del_ht($2, $call);
    label = 6;
    break;
   case 5:
    _mrb_nil_value1065($agg_result);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_hash_delete($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $key = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $key = __stackBase__ | 0;
  _mrb_get_args($mrb, 100228, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $key, tempInt) | 0);
  _mrb_hash_delete_key($agg_result, 0, $self, $key);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_clear($agg_result, $mrb, $hash) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $p = 0, $0 = 0, $ht = 0, $1 = 0, $2 = 0, $tobool = 0, $3 = 0, $4 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $hash;
    $0 = HEAP32[$p >> 2] | 0;
    $ht = $0 + 16 | 0;
    $1 = $ht;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _kh_clear_ht($2);
    label = 4;
    break;
   case 4:
    $3 = $agg_result;
    $4 = $hash;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_hash_aset($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $key = 0, $val = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $key = __stackBase__ | 0;
  $val = __stackBase__ + 12 | 0;
  _mrb_get_args($mrb, 97680, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $key, HEAP32[tempInt + 4 >> 2] = $val, tempInt) | 0);
  _mrb_hash_set($mrb, $self, $key, $val);
  $0 = $agg_result;
  $1 = $val;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_empty_p($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $p = 0, $0 = 0, $ht = 0, $1 = 0, $2 = 0, $tobool = 0, $size = 0, $3 = 0, $cmp = 0, $conv1 = 0, $empty_p_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $ht = $0 + 16 | 0;
    $1 = $ht;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      $empty_p_0 = 1;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $size = $2 + 4 | 0;
    $3 = HEAP32[$size >> 2] | 0;
    $cmp = ($3 | 0) == 0;
    $conv1 = $cmp & 1;
    $empty_p_0 = $conv1;
    label = 4;
    break;
   case 4:
    _mrb_bool_value1066($agg_result, $empty_p_0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_hash_keys($agg_result, $mrb, $hash) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $ary = 0, $p = 0, $0 = 0, $ht = 0, $1 = 0, $2 = 0, $tobool = 0, $size = 0, $3 = 0, $4 = 0, $n_buckets = 0, $5 = 0, $cmp15 = 0, $e_flags = 0, $d_flags = 0, $keys = 0, $k_016 = 0, $div = 0, $6 = 0, $arrayidx = 0, $7 = 0, $rem = 0, $arrayidx1 = 0, $8 = 0, $and13 = 0, $tobool3 = 0, $9 = 0, $arrayidx5 = 0, $10 = 0, $and1014 = 0, $tobool11 = 0, $11 = 0, $arrayidx14 = 0, $inc = 0, $12 = 0, $cmp = 0, $13 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ary = __stackBase__ | 0;
    $p = $hash;
    $0 = HEAP32[$p >> 2] | 0;
    $ht = $0 + 16 | 0;
    $1 = $ht;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_ary_new($agg_result, $mrb);
    label = 11;
    break;
   case 4:
    $size = $2 + 4 | 0;
    $3 = HEAP32[$size >> 2] | 0;
    _mrb_ary_new_capa($ary, $mrb, $3);
    $4 = $ary;
    $n_buckets = $2 | 0;
    $5 = HEAP32[$n_buckets >> 2] | 0;
    $cmp15 = ($5 | 0) == 0;
    if ($cmp15) {
      label = 10;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $e_flags = $2 + 16 | 0;
    $d_flags = $2 + 20 | 0;
    $keys = $2 + 24 | 0;
    $k_016 = 0;
    label = 6;
    break;
   case 6:
    $div = $k_016 >>> 3;
    $6 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $6 + $div | 0;
    $7 = HEAP8[$arrayidx] | 0;
    $rem = $k_016 & 7;
    $arrayidx1 = $rem + 112172 | 0;
    $8 = HEAP8[$arrayidx1] | 0;
    $and13 = $8 & $7;
    $tobool3 = $and13 << 24 >> 24 == 0;
    if ($tobool3) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    $9 = HEAP32[$d_flags >> 2] | 0;
    $arrayidx5 = $9 + $div | 0;
    $10 = HEAP8[$arrayidx5] | 0;
    $and1014 = $10 & $8;
    $tobool11 = $and1014 << 24 >> 24 == 0;
    if ($tobool11) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $11 = HEAP32[$keys >> 2] | 0;
    $arrayidx14 = $11 + ($k_016 * 12 & -1) | 0;
    _mrb_ary_push($mrb, $ary, $arrayidx14);
    label = 9;
    break;
   case 9:
    $inc = $k_016 + 1 | 0;
    $12 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($inc | 0) == ($12 | 0);
    if ($cmp) {
      label = 10;
      break;
    } else {
      $k_016 = $inc;
      label = 6;
      break;
    }
   case 10:
    $13 = $agg_result;
    HEAP32[$13 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$13 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$13 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    label = 11;
    break;
   case 11:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_hash_has_keyWithKey($agg_result, $hash, $key) {
  $agg_result = $agg_result | 0;
  $hash = $hash | 0;
  $key = $key | 0;
  var $p = 0, $0 = 0, $ht = 0, $1 = 0, $2 = 0, $tobool = 0, $call = 0, $n_buckets = 0, $3 = 0, $cmp = 0, $conv1 = 0, $result_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $key;
  $key = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$key >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$key + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$key + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $hash;
    $0 = HEAP32[$p >> 2] | 0;
    $ht = $0 + 16 | 0;
    $1 = $ht;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      $result_0 = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _kh_get_ht($2, $key) | 0;
    $n_buckets = $2 | 0;
    $3 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($call | 0) != ($3 | 0);
    $conv1 = $cmp & 1;
    $result_0 = $conv1;
    label = 4;
    break;
   case 4:
    _mrb_bool_value1066($agg_result, $result_0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_init_hash($mrb) {
  $mrb = $mrb | 0;
  var $call = 0, $1 = 0;
  $call = _mrb_define_class($mrb, 106436, HEAP32[$mrb + 44 >> 2] | 0) | 0;
  HEAP32[$mrb + 68 >> 2] = $call;
  $1 = $call;
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -522241 | 30720;
  _mrb_include_module($mrb, $call, _mrb_class_get($mrb, 93564) | 0);
  _mrb_define_method($mrb, $call, 92864, 52, 0);
  _mrb_define_method($mrb, $call, 111580, 820, 0);
  _mrb_define_method($mrb, $call, 111008, 24, 0);
  _mrb_define_method($mrb, $call, 110276, 496, 0);
  _mrb_define_method($mrb, $call, 109828, 126, 0);
  _mrb_define_method($mrb, $call, 109280, 46, 0);
  _mrb_define_method($mrb, $call, 108832, 340, 0);
  _mrb_define_method($mrb, $call, 108456, 546, 0);
  _mrb_define_method($mrb, $call, 108164, 848, 0);
  _mrb_define_method($mrb, $call, 107744, 704, 0);
  _mrb_define_method($mrb, $call, 107256, 502, 0);
  _mrb_define_method($mrb, $call, 106724, 572, 0);
  _mrb_define_method($mrb, $call, 106396, 502, 0);
  _mrb_define_method($mrb, $call, 105876, 568, 0);
  _mrb_define_method($mrb, $call, 105588, 286, 0);
  _mrb_define_method($mrb, $call, 105216, 502, 0);
  _mrb_define_method($mrb, $call, 104752, 140, 0);
  _mrb_define_method($mrb, $call, 104372, 822, 0);
  _mrb_define_method($mrb, $call, 104036, 502, 0);
  _mrb_define_method($mrb, $call, 103784, 286, 0);
  _mrb_define_method($mrb, $call, 103460, 552, 0);
  _mrb_define_method($mrb, $call, 103184, 822, 0);
  _mrb_define_method($mrb, $call, 102920, 24, 0);
  _mrb_define_method($mrb, $call, 102392, 572, 0);
  _mrb_define_method($mrb, $call, 102148, 112, 0);
  _mrb_define_method($mrb, $call, 102956, 34, 0);
  _mrb_define_method($mrb, $call, 101932, 258, 0);
  _mrb_define_alias($mrb, $call, 101724, 101932);
  _mrb_define_method($mrb, $call, 101524, 844, 0);
  return;
}
function _mrb_hash_equal($agg_result, $mrb, $hash1) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash1 = $hash1 | 0;
  var $hash2 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $hash1;
  $hash1 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash1 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash1 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash1 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $hash2 = __stackBase__ | 0;
  _mrb_get_args($mrb, 100228, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $hash2, tempInt) | 0);
  _hash_equal($agg_result, $mrb, $hash1, $hash2, 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_true_value1067($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = 2;
  return;
}
function _mrb_false_value1068($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_fixnum_value1069($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_hash_default($agg_result, $mrb, $hash) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $argv = 0, $argc = 0, $key = 0, $agg_tmp = 0, $call = 0, $p = 0, $0 = 0, $1 = 0, $2 = 0, $and = 0, $tobool = 0, $3 = 0, $cmp = 0, $4 = 0, $5 = 0, $6 = 0, $call2 = 0, $call3 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $argv = __stackBase__ | 0;
    $argc = __stackBase__ + 4 | 0;
    $key = __stackBase__ + 8 | 0;
    $agg_tmp = __stackBase__ + 20 | 0;
    $call = _mrb_get_args($mrb, 99168, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $argv, HEAP32[tempInt + 4 >> 2] = $argc, tempInt) | 0) | 0;
    $p = $hash;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $and = $2 & 524288;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $3 = HEAP32[$argc >> 2] | 0;
    $cmp = ($3 | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _mrb_nil_value1065($agg_result);
    label = 7;
    break;
   case 5:
    $4 = HEAP32[$argv >> 2] | 0;
    $5 = $key;
    $6 = $4;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2] | 0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
    $call2 = _mrb_intern2($mrb, 111640, 6) | 0;
    _mrb_iv_get($agg_tmp, 0, $hash, $call2);
    _mrb_funcall($agg_result, $mrb, $agg_tmp, 111028, 2, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$hash >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$hash + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$hash + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$key >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$key + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$key + 8 >> 2] | 0, tempInt) | 0);
    label = 7;
    break;
   case 6:
    $call3 = _mrb_intern2($mrb, 111640, 6) | 0;
    _mrb_iv_get($agg_result, 0, $hash, $call3);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_hash_set_default($agg_result, $mrb, $hash) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $ifnone = 0, $1 = 0, $4 = 0, $5 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $ifnone = __stackBase__ | 0;
  _mrb_get_args($mrb, 100228, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $ifnone, tempInt) | 0);
  _mrb_hash_modify($mrb, $hash);
  _mrb_iv_set($mrb, $hash, _mrb_intern2($mrb, 111640, 6) | 0, $ifnone);
  $1 = HEAP32[$hash >> 2] | 0;
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -524289;
  $4 = $agg_result;
  $5 = $ifnone;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
  HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
  HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_default_proc($agg_result, $mrb, $hash) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $p = 0, $0 = 0, $1 = 0, $2 = 0, $and = 0, $tobool = 0, $call = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $hash;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $and = $2 & 524288;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _mrb_intern2($mrb, 111640, 6) | 0;
    _mrb_iv_get($agg_result, 0, $hash, $call);
    label = 5;
    break;
   case 4:
    _mrb_nil_value1065($agg_result);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_hash_set_default_proc($agg_result, $mrb, $hash) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $ifnone = 0, $1 = 0, $4 = 0, $5 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $ifnone = __stackBase__ | 0;
  _mrb_get_args($mrb, 100228, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $ifnone, tempInt) | 0);
  _mrb_hash_modify($mrb, $hash);
  _mrb_iv_set($mrb, $hash, _mrb_intern2($mrb, 111640, 6) | 0, $ifnone);
  $1 = HEAP32[$hash >> 2] | 0;
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 524288;
  $4 = $agg_result;
  $5 = $ifnone;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
  HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
  HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_has_key($agg_result, $mrb, $hash) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $key = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $key = __stackBase__ | 0;
  _mrb_get_args($mrb, 100228, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $key, tempInt) | 0);
  _mrb_hash_has_keyWithKey($agg_result, $hash, $key);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_has_value($agg_result, $mrb, $hash) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $val = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $val = __stackBase__ | 0;
  _mrb_get_args($mrb, 100228, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $val, tempInt) | 0);
  _mrb_hash_has_valueWithvalue($agg_result, $mrb, $hash, $val);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_init_core($agg_result, $mrb, $hash) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $block = 0, $ifnone = 0, $argv = 0, $argc = 0, $tmp = 0, $call = 0, $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $tobool = 0, $2 = 0, $cmp1 = 0, $cmp3 = 0, $call5 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $cmp8 = 0, $call10 = 0, $p = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $call14 = 0, $15 = 0, $16 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $block = __stackBase__ | 0;
    $ifnone = __stackBase__ + 12 | 0;
    $argv = __stackBase__ + 24 | 0;
    $argc = __stackBase__ + 28 | 0;
    $tmp = __stackBase__ + 32 | 0;
    $call = _mrb_get_args($mrb, 99436, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $block, HEAP32[tempInt + 4 >> 2] = $argv, HEAP32[tempInt + 8 >> 2] = $argc, tempInt) | 0) | 0;
    _mrb_hash_modify($mrb, $hash);
    $tt = $block + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 9;
      break;
    }
   case 3:
    $i = $block;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 9;
      break;
    }
   case 4:
    $2 = HEAP32[$argc >> 2] | 0;
    $cmp1 = ($2 | 0) > 0;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 8;
      break;
    }
   case 5:
    $cmp3 = ($2 | 0) == 1;
    if ($cmp3) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $call5 = _mrb_class_get($mrb, 95520) | 0;
    _mrb_raise($mrb, $call5, 94496);
    label = 7;
    break;
   case 7:
    $3 = HEAP32[$argv >> 2] | 0;
    $4 = $ifnone;
    $5 = $3;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    label = 12;
    break;
   case 8:
    _mrb_nil_value1065($tmp);
    $6 = $ifnone;
    $7 = $tmp;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    label = 12;
    break;
   case 9:
    $8 = HEAP32[$argc >> 2] | 0;
    $cmp8 = ($8 | 0) > 0;
    if ($cmp8) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $call10 = _mrb_class_get($mrb, 95520) | 0;
    _mrb_raise($mrb, $call10, 94496);
    label = 11;
    break;
   case 11:
    $p = $hash;
    $9 = HEAP32[$p >> 2] | 0;
    $10 = $9;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $11 | 524288;
    HEAP32[$10 >> 2] = $12;
    $13 = $ifnone;
    $14 = $block;
    HEAP32[$13 >> 2] = HEAP32[$14 >> 2] | 0;
    HEAP32[$13 + 4 >> 2] = HEAP32[$14 + 4 >> 2] | 0;
    HEAP32[$13 + 8 >> 2] = HEAP32[$14 + 8 >> 2] | 0;
    label = 12;
    break;
   case 12:
    $call14 = _mrb_intern2($mrb, 111640, 6) | 0;
    _mrb_iv_set($mrb, $hash, $call14, $ifnone);
    $15 = $agg_result;
    $16 = $hash;
    HEAP32[$15 >> 2] = HEAP32[$16 >> 2] | 0;
    HEAP32[$15 + 4 >> 2] = HEAP32[$16 + 4 >> 2] | 0;
    HEAP32[$15 + 8 >> 2] = HEAP32[$16 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_hash_replace($agg_result, $mrb, $hash) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $hash2 = 0, $ifnone = 0, $tmp = 0, $tmp2 = 0, $tmp30 = 0, $tmp32 = 0, $call = 0, $0 = 0, $1 = 0, $call1 = 0, $tobool = 0, $2 = 0, $3 = 0, $p = 0, $4 = 0, $ht = 0, $5 = 0, $6 = 0, $tobool3 = 0, $n_buckets = 0, $7 = 0, $cmp26 = 0, $e_flags = 0, $d_flags = 0, $keys = 0, $vals = 0, $k_027 = 0, $div = 0, $8 = 0, $arrayidx = 0, $9 = 0, $rem = 0, $arrayidx5 = 0, $10 = 0, $and24 = 0, $tobool7 = 0, $11 = 0, $arrayidx9 = 0, $12 = 0, $and1425 = 0, $tobool15 = 0, $13 = 0, $arrayidx17 = 0, $14 = 0, $arrayidx18 = 0, $inc = 0, $15 = 0, $cmp = 0, $16 = 0, $17 = 0, $18 = 0, $and23 = 0, $tobool24 = 0, $p27 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $call29 = 0, $23 = 0, $24 = 0, $call31 = 0, $25 = 0, $26 = 0, $call34 = 0, $27 = 0, $28 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 72 | 0;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $hash2 = __stackBase__ | 0;
    $ifnone = __stackBase__ + 12 | 0;
    $tmp = __stackBase__ + 24 | 0;
    $tmp2 = __stackBase__ + 36 | 0;
    $tmp30 = __stackBase__ + 48 | 0;
    $tmp32 = __stackBase__ + 60 | 0;
    $call = _mrb_get_args($mrb, 100228, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $hash2, tempInt) | 0) | 0;
    _to_hash1070($tmp, $mrb, $hash2);
    $0 = $hash2;
    $1 = $tmp;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    $call1 = _mrb_obj_equal(0, $hash, $tmp) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $2 = $agg_result;
    $3 = $hash;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    label = 15;
    break;
   case 4:
    _mrb_hash_clear($tmp2, 0, $hash);
    $p = $hash2;
    $4 = HEAP32[$p >> 2] | 0;
    $ht = $4 + 16 | 0;
    $5 = $ht;
    $6 = HEAP32[$5 >> 2] | 0;
    $tobool3 = ($6 | 0) == 0;
    if ($tobool3) {
      label = 11;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $n_buckets = $6 | 0;
    $7 = HEAP32[$n_buckets >> 2] | 0;
    $cmp26 = ($7 | 0) == 0;
    if ($cmp26) {
      label = 11;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $e_flags = $6 + 16 | 0;
    $d_flags = $6 + 20 | 0;
    $keys = $6 + 24 | 0;
    $vals = $6 + 28 | 0;
    $k_027 = 0;
    label = 7;
    break;
   case 7:
    $div = $k_027 >>> 3;
    $8 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $8 + $div | 0;
    $9 = HEAP8[$arrayidx] | 0;
    $rem = $k_027 & 7;
    $arrayidx5 = $rem + 112172 | 0;
    $10 = HEAP8[$arrayidx5] | 0;
    $and24 = $10 & $9;
    $tobool7 = $and24 << 24 >> 24 == 0;
    if ($tobool7) {
      label = 8;
      break;
    } else {
      label = 10;
      break;
    }
   case 8:
    $11 = HEAP32[$d_flags >> 2] | 0;
    $arrayidx9 = $11 + $div | 0;
    $12 = HEAP8[$arrayidx9] | 0;
    $and1425 = $12 & $10;
    $tobool15 = $and1425 << 24 >> 24 == 0;
    if ($tobool15) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $13 = HEAP32[$keys >> 2] | 0;
    $arrayidx17 = $13 + ($k_027 * 12 & -1) | 0;
    $14 = HEAP32[$vals >> 2] | 0;
    $arrayidx18 = $14 + ($k_027 * 12 & -1) | 0;
    _mrb_hash_set($mrb, $hash, $arrayidx17, $arrayidx18);
    label = 10;
    break;
   case 10:
    $inc = $k_027 + 1 | 0;
    $15 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($inc | 0) == ($15 | 0);
    if ($cmp) {
      label = 11;
      break;
    } else {
      $k_027 = $inc;
      label = 7;
      break;
    }
   case 11:
    $16 = HEAP32[$p >> 2] | 0;
    $17 = $16;
    $18 = HEAP32[$17 >> 2] | 0;
    $and23 = $18 & 524288;
    $tobool24 = ($and23 | 0) == 0;
    if ($tobool24) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $p27 = $hash;
    $19 = HEAP32[$p27 >> 2] | 0;
    $20 = $19;
    $21 = HEAP32[$20 >> 2] | 0;
    $22 = $21 | 524288;
    HEAP32[$20 >> 2] = $22;
    $call29 = _mrb_intern2($mrb, 111640, 6) | 0;
    _mrb_iv_get($tmp30, 0, $hash2, $call29);
    $23 = $ifnone;
    $24 = $tmp30;
    HEAP32[$23 >> 2] = HEAP32[$24 >> 2] | 0;
    HEAP32[$23 + 4 >> 2] = HEAP32[$24 + 4 >> 2] | 0;
    HEAP32[$23 + 8 >> 2] = HEAP32[$24 + 8 >> 2] | 0;
    label = 14;
    break;
   case 13:
    $call31 = _mrb_intern2($mrb, 111640, 6) | 0;
    _mrb_iv_get($tmp32, 0, $hash2, $call31);
    $25 = $ifnone;
    $26 = $tmp32;
    HEAP32[$25 >> 2] = HEAP32[$26 >> 2] | 0;
    HEAP32[$25 + 4 >> 2] = HEAP32[$26 + 4 >> 2] | 0;
    HEAP32[$25 + 8 >> 2] = HEAP32[$26 + 8 >> 2] | 0;
    label = 14;
    break;
   case 14:
    $call34 = _mrb_intern2($mrb, 111640, 6) | 0;
    _mrb_iv_set($mrb, $hash, $call34, $ifnone);
    $27 = $agg_result;
    $28 = $hash;
    HEAP32[$27 >> 2] = HEAP32[$28 >> 2] | 0;
    HEAP32[$27 + 4 >> 2] = HEAP32[$28 + 4 >> 2] | 0;
    HEAP32[$27 + 8 >> 2] = HEAP32[$28 + 8 >> 2] | 0;
    label = 15;
    break;
   case 15:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_hash_size_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $p = 0, $0 = 0, $ht = 0, $1 = 0, $2 = 0, $tobool = 0, $size = 0, $3 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $ht = $0 + 16 | 0;
    $1 = $ht;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_fixnum_value1069($agg_result, 0);
    label = 5;
    break;
   case 4:
    $size = $2 + 4 | 0;
    $3 = HEAP32[$size >> 2] | 0;
    _mrb_fixnum_value1069($agg_result, $3);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_hash_shift($agg_result, $mrb, $hash) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $delKey = 0, $delVal = 0, $agg_tmp = 0, $agg_tmp23 = 0, $p = 0, $0 = 0, $ht = 0, $1 = 0, $2 = 0, $tobool = 0, $size = 0, $3 = 0, $cmp = 0, $n_buckets = 0, $4 = 0, $cmp222 = 0, $e_flags = 0, $5 = 0, $d_flags = 0, $k_023 = 0, $div = 0, $arrayidx = 0, $6 = 0, $rem = 0, $arrayidx3 = 0, $7 = 0, $and19 = 0, $tobool5 = 0, $8 = 0, $arrayidx7 = 0, $9 = 0, $and1220 = 0, $tobool13 = 0, $keys = 0, $10 = 0, $arrayidx15 = 0, $11 = 0, $12 = 0, $inc = 0, $13 = 0, $cmp2 = 0, $14 = 0, $15 = 0, $16 = 0, $and20 = 0, $tobool21 = 0, $call24 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $delKey = __stackBase__ | 0;
    $delVal = __stackBase__ + 12 | 0;
    $agg_tmp = __stackBase__ + 24 | 0;
    $agg_tmp23 = __stackBase__ + 36 | 0;
    $p = $hash;
    $0 = HEAP32[$p >> 2] | 0;
    $ht = $0 + 16 | 0;
    $1 = $ht;
    $2 = HEAP32[$1 >> 2] | 0;
    _mrb_hash_modify($mrb, $hash);
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $size = $2 + 4 | 0;
    $3 = HEAP32[$size >> 2] | 0;
    $cmp = ($3 | 0) == 0;
    if ($cmp) {
      label = 10;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $n_buckets = $2 | 0;
    $4 = HEAP32[$n_buckets >> 2] | 0;
    $cmp222 = ($4 | 0) == 0;
    if ($cmp222) {
      label = 10;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $e_flags = $2 + 16 | 0;
    $5 = HEAP32[$e_flags >> 2] | 0;
    $d_flags = $2 + 20 | 0;
    $k_023 = 0;
    label = 6;
    break;
   case 6:
    $div = $k_023 >>> 3;
    $arrayidx = $5 + $div | 0;
    $6 = HEAP8[$arrayidx] | 0;
    $rem = $k_023 & 7;
    $arrayidx3 = $rem + 112172 | 0;
    $7 = HEAP8[$arrayidx3] | 0;
    $and19 = $7 & $6;
    $tobool5 = $and19 << 24 >> 24 == 0;
    if ($tobool5) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    $8 = HEAP32[$d_flags >> 2] | 0;
    $arrayidx7 = $8 + $div | 0;
    $9 = HEAP8[$arrayidx7] | 0;
    $and1220 = $9 & $7;
    $tobool13 = $and1220 << 24 >> 24 == 0;
    if ($tobool13) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $keys = $2 + 24 | 0;
    $10 = HEAP32[$keys >> 2] | 0;
    $arrayidx15 = $10 + ($k_023 * 12 & -1) | 0;
    $11 = $delKey;
    $12 = $arrayidx15;
    HEAP32[$11 >> 2] = HEAP32[$12 >> 2] | 0;
    HEAP32[$11 + 4 >> 2] = HEAP32[$12 + 4 >> 2] | 0;
    HEAP32[$11 + 8 >> 2] = HEAP32[$12 + 8 >> 2] | 0;
    _mrb_gc_protect($mrb, $arrayidx15);
    _mrb_hash_delete_key($delVal, 0, $hash, $delKey);
    _mrb_gc_protect($mrb, $delVal);
    _mrb_assoc_new($agg_result, $mrb, $delKey, $delVal);
    label = 13;
    break;
   case 9:
    $inc = $k_023 + 1 | 0;
    $13 = HEAP32[$n_buckets >> 2] | 0;
    $cmp2 = ($inc | 0) == ($13 | 0);
    if ($cmp2) {
      label = 10;
      break;
    } else {
      $k_023 = $inc;
      label = 6;
      break;
    }
   case 10:
    $14 = HEAP32[$p >> 2] | 0;
    $15 = $14;
    $16 = HEAP32[$15 >> 2] | 0;
    $and20 = $16 & 524288;
    $tobool21 = ($and20 | 0) == 0;
    $call24 = _mrb_intern2($mrb, 111640, 6) | 0;
    if ($tobool21) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    _mrb_iv_get($agg_tmp, 0, $hash, $call24);
    _mrb_nil_value1065($agg_tmp23);
    _mrb_funcall($agg_result, $mrb, $agg_tmp, 111028, 2, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$hash >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$hash + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$hash + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp23 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp23 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp23 + 8 >> 2] | 0, tempInt) | 0);
    label = 13;
    break;
   case 12:
    _mrb_iv_get($agg_result, 0, $hash, $call24);
    label = 13;
    break;
   case 13:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_hash_values($agg_result, $mrb, $hash) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $ary = 0, $p = 0, $0 = 0, $ht = 0, $1 = 0, $2 = 0, $tobool = 0, $size = 0, $3 = 0, $4 = 0, $n_buckets = 0, $5 = 0, $cmp15 = 0, $e_flags = 0, $d_flags = 0, $vals = 0, $k_016 = 0, $div = 0, $6 = 0, $arrayidx = 0, $7 = 0, $rem = 0, $arrayidx1 = 0, $8 = 0, $and13 = 0, $tobool3 = 0, $9 = 0, $arrayidx5 = 0, $10 = 0, $and1014 = 0, $tobool11 = 0, $11 = 0, $arrayidx14 = 0, $inc = 0, $12 = 0, $cmp = 0, $13 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ary = __stackBase__ | 0;
    $p = $hash;
    $0 = HEAP32[$p >> 2] | 0;
    $ht = $0 + 16 | 0;
    $1 = $ht;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_ary_new($agg_result, $mrb);
    label = 11;
    break;
   case 4:
    $size = $2 + 4 | 0;
    $3 = HEAP32[$size >> 2] | 0;
    _mrb_ary_new_capa($ary, $mrb, $3);
    $4 = $ary;
    $n_buckets = $2 | 0;
    $5 = HEAP32[$n_buckets >> 2] | 0;
    $cmp15 = ($5 | 0) == 0;
    if ($cmp15) {
      label = 10;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $e_flags = $2 + 16 | 0;
    $d_flags = $2 + 20 | 0;
    $vals = $2 + 28 | 0;
    $k_016 = 0;
    label = 6;
    break;
   case 6:
    $div = $k_016 >>> 3;
    $6 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $6 + $div | 0;
    $7 = HEAP8[$arrayidx] | 0;
    $rem = $k_016 & 7;
    $arrayidx1 = $rem + 112172 | 0;
    $8 = HEAP8[$arrayidx1] | 0;
    $and13 = $8 & $7;
    $tobool3 = $and13 << 24 >> 24 == 0;
    if ($tobool3) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    $9 = HEAP32[$d_flags >> 2] | 0;
    $arrayidx5 = $9 + $div | 0;
    $10 = HEAP8[$arrayidx5] | 0;
    $and1014 = $10 & $8;
    $tobool11 = $and1014 << 24 >> 24 == 0;
    if ($tobool11) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $11 = HEAP32[$vals >> 2] | 0;
    $arrayidx14 = $11 + ($k_016 * 12 & -1) | 0;
    _mrb_ary_push($mrb, $ary, $arrayidx14);
    label = 9;
    break;
   case 9:
    $inc = $k_016 + 1 | 0;
    $12 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($inc | 0) == ($12 | 0);
    if ($cmp) {
      label = 10;
      break;
    } else {
      $k_016 = $inc;
      label = 6;
      break;
    }
   case 10:
    $13 = $agg_result;
    HEAP32[$13 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$13 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$13 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    label = 11;
    break;
   case 11:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_hash_to_hash($agg_result, $mrb, $hash) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $0 = $agg_result;
  $1 = $hash;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_inspect($agg_result, $mrb, $hash) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $p = 0, $0 = 0, $ht = 0, $1 = 0, $2 = 0, $tobool = 0, $size = 0, $3 = 0, $cmp = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $hash;
    $0 = HEAP32[$p >> 2] | 0;
    $ht = $0 + 16 | 0;
    $1 = $ht;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $size = $2 + 4 | 0;
    $3 = HEAP32[$size >> 2] | 0;
    $cmp = ($3 | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _mrb_str_new($agg_result, $mrb, 101240, 2);
    label = 6;
    break;
   case 5:
    _inspect_hash($agg_result, $mrb, $hash);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_hash_eql($agg_result, $mrb, $hash1) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash1 = $hash1 | 0;
  var $hash2 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $hash1;
  $hash1 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash1 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash1 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash1 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $hash2 = __stackBase__ | 0;
  _mrb_get_args($mrb, 100228, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $hash2, tempInt) | 0);
  _hash_equal($agg_result, $mrb, $hash1, $hash2, 1);
  STACKTOP = __stackBase__;
  return;
}
function _hash_equal($agg_result, $mrb, $hash1, $hash2, $eql) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash1 = $hash1 | 0;
  $hash2 = $hash2 | 0;
  $eql = $eql | 0;
  var $call = 0, $tobool = 0, $tt = 0, $0 = 0, $cmp = 0, $call2 = 0, $call3 = 0, $tobool4 = 0, $tobool7 = 0, $call9 = 0, $call10 = 0, $p = 0, $1 = 0, $ht = 0, $2 = 0, $3 = 0, $p13 = 0, $4 = 0, $ht14 = 0, $5 = 0, $6 = 0, $tobool15 = 0, $tobool19 = 0, $7 = 0, $conv = 0, $size = 0, $8 = 0, $size22 = 0, $9 = 0, $cmp23 = 0, $n_buckets = 0, $10 = 0, $cmp2725 = 0, $e_flags = 0, $d_flags = 0, $keys = 0, $n_buckets45 = 0, $vals = 0, $vals50 = 0, $k1_026 = 0, $div = 0, $11 = 0, $arrayidx = 0, $12 = 0, $rem = 0, $arrayidx30 = 0, $13 = 0, $and23 = 0, $tobool32 = 0, $14 = 0, $arrayidx34 = 0, $15 = 0, $and3924 = 0, $tobool40 = 0, $16 = 0, $arrayidx43 = 0, $call44 = 0, $17 = 0, $cmp46 = 0, $18 = 0, $arrayidx49 = 0, $19 = 0, $arrayidx51 = 0, $call52 = 0, $tobool53 = 0, $inc = 0, $20 = 0, $cmp27 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $hash1;
  $hash1 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash1 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash1 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash1 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $hash2;
  $hash2 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash2 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash2 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash2 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_obj_equal(0, $hash1, $hash2) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_true_value1067($agg_result);
    label = 25;
    break;
   case 4:
    $tt = $hash2 + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 15;
    if ($cmp) {
      label = 10;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $call2 = _mrb_intern2($mrb, 102956, 7) | 0;
    $call3 = _mrb_respond_to($mrb, $hash2, $call2) | 0;
    $tobool4 = ($call3 | 0) == 0;
    if ($tobool4) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _mrb_false_value1068($agg_result);
    label = 25;
    break;
   case 7:
    $tobool7 = ($eql | 0) == 0;
    if ($tobool7) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $call9 = _mrb_eql($mrb, $hash2, $hash1) | 0;
    _mrb_fixnum_value1069($agg_result, $call9);
    label = 25;
    break;
   case 9:
    $call10 = _mrb_equal($mrb, $hash2, $hash1) | 0;
    _mrb_fixnum_value1069($agg_result, $call10);
    label = 25;
    break;
   case 10:
    $p = $hash1;
    $1 = HEAP32[$p >> 2] | 0;
    $ht = $1 + 16 | 0;
    $2 = $ht;
    $3 = HEAP32[$2 >> 2] | 0;
    $p13 = $hash2;
    $4 = HEAP32[$p13 >> 2] | 0;
    $ht14 = $4 + 16 | 0;
    $5 = $ht14;
    $6 = HEAP32[$5 >> 2] | 0;
    $tobool15 = ($3 | 0) == 0;
    $tobool19 = ($6 | 0) != 0;
    if ($tobool15) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $7 = $tobool19 & 1;
    $conv = $7 ^ 1;
    _mrb_bool_value1066($agg_result, $conv);
    label = 25;
    break;
   case 12:
    if ($tobool19) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    _mrb_false_value1068($agg_result);
    label = 25;
    break;
   case 14:
    $size = $3 + 4 | 0;
    $8 = HEAP32[$size >> 2] | 0;
    $size22 = $6 + 4 | 0;
    $9 = HEAP32[$size22 >> 2] | 0;
    $cmp23 = ($8 | 0) == ($9 | 0);
    if ($cmp23) {
      label = 15;
      break;
    } else {
      label = 17;
      break;
    }
   case 15:
    $n_buckets = $3 | 0;
    $10 = HEAP32[$n_buckets >> 2] | 0;
    $cmp2725 = ($10 | 0) == 0;
    if ($cmp2725) {
      label = 24;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $e_flags = $3 + 16 | 0;
    $d_flags = $3 + 20 | 0;
    $keys = $3 + 24 | 0;
    $n_buckets45 = $6 | 0;
    $vals = $3 + 28 | 0;
    $vals50 = $6 + 28 | 0;
    $k1_026 = 0;
    label = 18;
    break;
   case 17:
    _mrb_false_value1068($agg_result);
    label = 25;
    break;
   case 18:
    $div = $k1_026 >>> 3;
    $11 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $11 + $div | 0;
    $12 = HEAP8[$arrayidx] | 0;
    $rem = $k1_026 & 7;
    $arrayidx30 = $rem + 112172 | 0;
    $13 = HEAP8[$arrayidx30] | 0;
    $and23 = $13 & $12;
    $tobool32 = $and23 << 24 >> 24 == 0;
    if ($tobool32) {
      label = 19;
      break;
    } else {
      label = 23;
      break;
    }
   case 19:
    $14 = HEAP32[$d_flags >> 2] | 0;
    $arrayidx34 = $14 + $div | 0;
    $15 = HEAP8[$arrayidx34] | 0;
    $and3924 = $15 & $13;
    $tobool40 = $and3924 << 24 >> 24 == 0;
    if ($tobool40) {
      label = 20;
      break;
    } else {
      label = 23;
      break;
    }
   case 20:
    $16 = HEAP32[$keys >> 2] | 0;
    $arrayidx43 = $16 + ($k1_026 * 12 & -1) | 0;
    $call44 = _kh_get_ht($6, $arrayidx43) | 0;
    $17 = HEAP32[$n_buckets45 >> 2] | 0;
    $cmp46 = ($call44 | 0) == ($17 | 0);
    if ($cmp46) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $18 = HEAP32[$vals >> 2] | 0;
    $arrayidx49 = $18 + ($k1_026 * 12 & -1) | 0;
    $19 = HEAP32[$vals50 >> 2] | 0;
    $arrayidx51 = $19 + ($call44 * 12 & -1) | 0;
    $call52 = _mrb_equal($mrb, $arrayidx49, $arrayidx51) | 0;
    $tobool53 = ($call52 | 0) == 0;
    if ($tobool53) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    _mrb_false_value1068($agg_result);
    label = 25;
    break;
   case 23:
    $inc = $k1_026 + 1 | 0;
    $20 = HEAP32[$n_buckets >> 2] | 0;
    $cmp27 = ($inc | 0) == ($20 | 0);
    if ($cmp27) {
      label = 24;
      break;
    } else {
      $k1_026 = $inc;
      label = 18;
      break;
    }
   case 24:
    _mrb_true_value1067($agg_result);
    label = 25;
    break;
   case 25:
    STACKTOP = __stackBase__;
    return;
  }
}
function _inspect_hash($agg_result, $mrb, $hash) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $str = 0, $tmp23 = 0, $tmp26 = 0, $tmp27 = 0, $tmp28 = 0, $tmp30 = 0, $tmp31 = 0, $tmp33 = 0, $p = 0, $0 = 0, $ht = 0, $1 = 0, $2 = 0, $3 = 0, $tobool1 = 0, $size = 0, $4 = 0, $cmp = 0, $n_buckets = 0, $5 = 0, $cmp33 = 0, $e_flags = 0, $d_flags = 0, $p19 = 0, $keys = 0, $vals = 0, $k_04 = 0, $div = 0, $6 = 0, $arrayidx = 0, $7 = 0, $rem = 0, $arrayidx5 = 0, $8 = 0, $and1 = 0, $tobool7 = 0, $9 = 0, $arrayidx9 = 0, $10 = 0, $and142 = 0, $tobool15 = 0, $call = 0, $11 = 0, $len = 0, $12 = 0, $13 = 0, $cmp20 = 0, $14 = 0, $arrayidx25 = 0, $15 = 0, $arrayidx29 = 0, $inc = 0, $16 = 0, $cmp3 = 0, $17 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $str = __stackBase__ | 0;
    $tmp23 = __stackBase__ + 12 | 0;
    $tmp26 = __stackBase__ + 24 | 0;
    $tmp27 = __stackBase__ + 36 | 0;
    $tmp28 = __stackBase__ + 48 | 0;
    $tmp30 = __stackBase__ + 60 | 0;
    $tmp31 = __stackBase__ + 72 | 0;
    $tmp33 = __stackBase__ + 84 | 0;
    $p = $hash;
    $0 = HEAP32[$p >> 2] | 0;
    $ht = $0 + 16 | 0;
    $1 = $ht;
    $2 = HEAP32[$1 >> 2] | 0;
    _mrb_str_new($str, $mrb, 100752, 1);
    $3 = $str;
    $tobool1 = ($2 | 0) == 0;
    if ($tobool1) {
      label = 12;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $size = $2 + 4 | 0;
    $4 = HEAP32[$size >> 2] | 0;
    $cmp = ($4 | 0) == 0;
    if ($cmp) {
      label = 12;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $n_buckets = $2 | 0;
    $5 = HEAP32[$n_buckets >> 2] | 0;
    $cmp33 = ($5 | 0) == 0;
    if ($cmp33) {
      label = 12;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $e_flags = $2 + 16 | 0;
    $d_flags = $2 + 20 | 0;
    $p19 = $str;
    $keys = $2 + 24 | 0;
    $vals = $2 + 28 | 0;
    $k_04 = 0;
    label = 6;
    break;
   case 6:
    $div = $k_04 >>> 3;
    $6 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $6 + $div | 0;
    $7 = HEAP8[$arrayidx] | 0;
    $rem = $k_04 & 7;
    $arrayidx5 = $rem + 112172 | 0;
    $8 = HEAP8[$arrayidx5] | 0;
    $and1 = $8 & $7;
    $tobool7 = $and1 << 24 >> 24 == 0;
    if ($tobool7) {
      label = 7;
      break;
    } else {
      label = 11;
      break;
    }
   case 7:
    $9 = HEAP32[$d_flags >> 2] | 0;
    $arrayidx9 = $9 + $div | 0;
    $10 = HEAP8[$arrayidx9] | 0;
    $and142 = $10 & $8;
    $tobool15 = $and142 << 24 >> 24 == 0;
    if ($tobool15) {
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
   case 8:
    $call = _mrb_gc_arena_save($mrb) | 0;
    $11 = HEAP32[$p19 >> 2] | 0;
    $len = $11 + 12 | 0;
    $12 = $len;
    $13 = HEAP32[$12 >> 2] | 0;
    $cmp20 = ($13 | 0) > 1;
    if ($cmp20) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _mrb_str_cat($tmp23, $mrb, $str, 100436, 2);
    label = 10;
    break;
   case 10:
    $14 = HEAP32[$keys >> 2] | 0;
    $arrayidx25 = $14 + ($k_04 * 12 & -1) | 0;
    _mrb_inspect($tmp26, $mrb, $arrayidx25);
    _mrb_str_append($tmp27, $mrb, $str, $tmp26);
    _mrb_str_buf_cat($tmp28, $mrb, $str, 100192, 2);
    $15 = HEAP32[$vals >> 2] | 0;
    $arrayidx29 = $15 + ($k_04 * 12 & -1) | 0;
    _mrb_inspect($tmp30, $mrb, $arrayidx29);
    _mrb_str_append($tmp31, $mrb, $str, $tmp30);
    _mrb_gc_arena_restore($mrb, $call);
    label = 11;
    break;
   case 11:
    $inc = $k_04 + 1 | 0;
    $16 = HEAP32[$n_buckets >> 2] | 0;
    $cmp3 = ($inc | 0) == ($16 | 0);
    if ($cmp3) {
      label = 12;
      break;
    } else {
      $k_04 = $inc;
      label = 6;
      break;
    }
   case 12:
    _mrb_str_buf_cat($tmp33, $mrb, $str, 99740, 1);
    $17 = $agg_result;
    HEAP32[$17 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$17 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$17 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _to_hash1070($agg_result, $mrb, $hash) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_convert_type($agg_result, $mrb, $hash, 15, 106436, 102956);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_has_valueWithvalue($agg_result, $mrb, $hash, $value) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  $value = $value | 0;
  var $p = 0, $0 = 0, $ht = 0, $1 = 0, $2 = 0, $tobool = 0, $n_buckets = 0, $3 = 0, $cmp14 = 0, $e_flags = 0, $d_flags = 0, $vals = 0, $k_015 = 0, $div = 0, $4 = 0, $arrayidx = 0, $5 = 0, $rem = 0, $arrayidx2 = 0, $6 = 0, $and12 = 0, $tobool4 = 0, $7 = 0, $arrayidx6 = 0, $8 = 0, $and1113 = 0, $tobool12 = 0, $9 = 0, $arrayidx14 = 0, $call = 0, $tobool15 = 0, $inc = 0, $10 = 0, $cmp = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $value;
  $value = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$value >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$value + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$value + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $hash;
    $0 = HEAP32[$p >> 2] | 0;
    $ht = $0 + 16 | 0;
    $1 = $ht;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $n_buckets = $2 | 0;
    $3 = HEAP32[$n_buckets >> 2] | 0;
    $cmp14 = ($3 | 0) == 0;
    if ($cmp14) {
      label = 10;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $e_flags = $2 + 16 | 0;
    $d_flags = $2 + 20 | 0;
    $vals = $2 + 28 | 0;
    $k_015 = 0;
    label = 5;
    break;
   case 5:
    $div = $k_015 >>> 3;
    $4 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $4 + $div | 0;
    $5 = HEAP8[$arrayidx] | 0;
    $rem = $k_015 & 7;
    $arrayidx2 = $rem + 112172 | 0;
    $6 = HEAP8[$arrayidx2] | 0;
    $and12 = $6 & $5;
    $tobool4 = $and12 << 24 >> 24 == 0;
    if ($tobool4) {
      label = 6;
      break;
    } else {
      label = 9;
      break;
    }
   case 6:
    $7 = HEAP32[$d_flags >> 2] | 0;
    $arrayidx6 = $7 + $div | 0;
    $8 = HEAP8[$arrayidx6] | 0;
    $and1113 = $8 & $6;
    $tobool12 = $and1113 << 24 >> 24 == 0;
    if ($tobool12) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    $9 = HEAP32[$vals >> 2] | 0;
    $arrayidx14 = $9 + ($k_015 * 12 & -1) | 0;
    $call = _mrb_equal($mrb, $arrayidx14, $value) | 0;
    $tobool15 = ($call | 0) == 0;
    if ($tobool15) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _mrb_true_value1067($agg_result);
    label = 11;
    break;
   case 9:
    $inc = $k_015 + 1 | 0;
    $10 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($inc | 0) == ($10 | 0);
    if ($cmp) {
      label = 10;
      break;
    } else {
      $k_015 = $inc;
      label = 5;
      break;
    }
   case 10:
    _mrb_false_value1068($agg_result);
    label = 11;
    break;
   case 11:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_init_core($mrb) {
  $mrb = $mrb | 0;
  _mrb_init_symtbl($mrb);
  _mrb_gc_arena_restore($mrb, 0);
  _mrb_init_class($mrb);
  _mrb_gc_arena_restore($mrb, 0);
  _mrb_init_object($mrb);
  _mrb_gc_arena_restore($mrb, 0);
  _mrb_init_kernel($mrb);
  _mrb_gc_arena_restore($mrb, 0);
  _mrb_init_comparable($mrb);
  _mrb_gc_arena_restore($mrb, 0);
  _mrb_init_enumerable($mrb);
  _mrb_gc_arena_restore($mrb, 0);
  _mrb_init_symbol($mrb);
  _mrb_gc_arena_restore($mrb, 0);
  _mrb_init_exception($mrb);
  _mrb_gc_arena_restore($mrb, 0);
  _mrb_init_proc($mrb);
  _mrb_gc_arena_restore($mrb, 0);
  _mrb_init_string($mrb);
  _mrb_gc_arena_restore($mrb, 0);
  _mrb_init_array($mrb);
  _mrb_gc_arena_restore($mrb, 0);
  _mrb_init_hash($mrb);
  _mrb_gc_arena_restore($mrb, 0);
  _mrb_init_numeric($mrb);
  _mrb_gc_arena_restore($mrb, 0);
  _mrb_init_range($mrb);
  _mrb_gc_arena_restore($mrb, 0);
  _mrb_init_gc($mrb);
  _mrb_gc_arena_restore($mrb, 0);
  _mrb_init_mrblib($mrb);
  _mrb_gc_arena_restore($mrb, 0);
  _mrb_init_mrbgems($mrb);
  _mrb_gc_arena_restore($mrb, 0);
  return;
}
function _mrb_final_core($mrb) {
  $mrb = $mrb | 0;
  _mrb_gc_arena_restore($mrb, 0);
  return;
}
function _mrb_obj_basic_to_s_p($mrb, $obj) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $call = 0, $call1 = 0, $call2 = 0, $tobool = 0, $0 = 0, $1 = 0, $and = 0, $cmp = 0, $body = 0, $func = 0, $2 = 0, $cmp4 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_class1141($mrb, $obj) | 0;
    $call1 = _mrb_intern2($mrb, 111128, 4) | 0;
    $call2 = _mrb_method_search($mrb, $call, $call1) | 0;
    $tobool = ($call2 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $0 = $call2;
    $1 = HEAP32[$0 >> 2] | 0;
    $and = $1 & 262144;
    $cmp = ($and | 0) == 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $body = $call2 + 12 | 0;
    $func = $body;
    $2 = HEAP32[$func >> 2] | 0;
    $cmp4 = ($2 | 0) == 482;
    if ($cmp4) {
      $retval_0 = 1;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $retval_0 = 0;
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_class1141($mrb, $v) {
  $mrb = $mrb | 0;
  $v = $v | 0;
  var $tt = 0, $0 = 0, $i = 0, $1 = 0, $tobool = 0, $false_class = 0, $nil_class = 0, $true_class = 0, $symbol_class = 0, $fixnum_class = 0, $float_class = 0, $p = 0, $2 = 0, $c = 0, $3 = 0, $retval_0_in = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $v + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    if (($0 | 0) == 0) {
      label = 3;
      break;
    } else if (($0 | 0) == 2) {
      label = 6;
      break;
    } else if (($0 | 0) == 4) {
      label = 7;
      break;
    } else if (($0 | 0) == 3) {
      label = 8;
      break;
    } else if (($0 | 0) == 6) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 3:
    $i = $v;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $false_class = $mrb + 84 | 0;
    $retval_0_in = $false_class;
    label = 11;
    break;
   case 5:
    $nil_class = $mrb + 88 | 0;
    $retval_0_in = $nil_class;
    label = 11;
    break;
   case 6:
    $true_class = $mrb + 80 | 0;
    $retval_0_in = $true_class;
    label = 11;
    break;
   case 7:
    $symbol_class = $mrb + 92 | 0;
    $retval_0_in = $symbol_class;
    label = 11;
    break;
   case 8:
    $fixnum_class = $mrb + 76 | 0;
    $retval_0_in = $fixnum_class;
    label = 11;
    break;
   case 9:
    $float_class = $mrb + 72 | 0;
    $retval_0_in = $float_class;
    label = 11;
    break;
   case 10:
    $p = $v;
    $2 = HEAP32[$p >> 2] | 0;
    $c = $2 + 4 | 0;
    $3 = $c;
    $retval_0_in = $3;
    label = 11;
    break;
   case 11:
    $retval_0 = HEAP32[$retval_0_in >> 2] | 0;
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_obj_value1142($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_fixnum_value1145($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_bool_value1146($agg_result, $boolean) {
  $agg_result = $agg_result | 0;
  $boolean = $boolean | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = $boolean << 24 >> 24 != 0 ? 2 : 0;
  return;
}
function _mrb_false_value1149($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_voidp_value1150($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = 7;
  return;
}
function _mrb_nil_value1151($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_obj_inspect($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $tt = 0, $0 = 0, $cmp = 0, $call = 0, $tobool = 0, $p = 0, $1 = 0, $2 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $obj + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 8;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $call = _mrb_obj_basic_to_s_p($mrb, $obj) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $p = $obj;
    $1 = HEAP32[$p >> 2] | 0;
    $2 = $1;
    _mrb_obj_iv_inspect($agg_result, $mrb, $2);
    label = 6;
    break;
   case 5:
    _mrb_any_to_s($agg_result, $mrb, $obj);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_singleton_class_clone($mrb, $obj) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $agg_tmp = 0, $agg_tmp12 = 0, $agg_tmp13 = 0, $p = 0, $0 = 0, $c = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $bf_clear = 0, $cmp = 0, $class_class = 0, $5 = 0, $call = 0, $6 = 0, $tt = 0, $7 = 0, $8 = 0, $9 = 0, $call8 = 0, $10 = 0, $super = 0, $11 = 0, $super10 = 0, $_c = 0, $iv = 0, $12 = 0, $tobool = 0, $13 = 0, $14 = 0, $15 = 0, $call14 = 0, $mt = 0, $16 = 0, $tobool16 = 0, $call19 = 0, $mt20 = 0, $call19_c = 0, $call22 = 0, $mt23 = 0, $call22_c = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $agg_tmp12 = __stackBase__ + 12 | 0;
    $agg_tmp13 = __stackBase__ + 24 | 0;
    $p = $obj;
    $0 = HEAP32[$p >> 2] | 0;
    $c = $0 + 4 | 0;
    $1 = $c;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = HEAP32[$3 >> 2] | 0;
    $bf_clear = $4 & 255;
    $cmp = ($bf_clear | 0) == 12;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $retval_0 = $2;
      label = 12;
      break;
    }
   case 3:
    $class_class = $mrb + 48 | 0;
    $5 = HEAP32[$class_class >> 2] | 0;
    $call = _mrb_obj_alloc($mrb, $bf_clear, $5) | 0;
    $6 = $call;
    $tt = $obj + 8 | 0;
    $7 = HEAP32[$tt >> 2] | 0;
    if (($7 | 0) == 9 | ($7 | 0) == 12) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $8 = $call + 4 | 0;
    HEAP32[$8 >> 2] = $6;
    label = 6;
    break;
   case 5:
    $9 = $2 | 0;
    _mrb_obj_value1142($agg_tmp, $9);
    $call8 = _mrb_singleton_class_clone($mrb, $agg_tmp) | 0;
    $10 = $call + 4 | 0;
    HEAP32[$10 >> 2] = $call8;
    label = 6;
    break;
   case 6:
    $super = $2 + 20 | 0;
    $11 = HEAP32[$super >> 2] | 0;
    $super10 = $call + 20 | 0;
    $_c = $11;
    HEAP32[$super10 >> 2] = $_c;
    $iv = $2 + 12 | 0;
    $12 = HEAP32[$iv >> 2] | 0;
    $tobool = ($12 | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $13 = $call | 0;
    _mrb_obj_value1142($agg_tmp12, $13);
    $14 = $2 | 0;
    _mrb_obj_value1142($agg_tmp13, $14);
    _mrb_iv_copy($mrb, $agg_tmp12, $agg_tmp13);
    $15 = $call;
    $call14 = _mrb_intern2($mrb, 111012, 12) | 0;
    _mrb_obj_iv_set($mrb, $15, $call14, $obj);
    label = 8;
    break;
   case 8:
    $mt = $2 + 16 | 0;
    $16 = HEAP32[$mt >> 2] | 0;
    $tobool16 = ($16 | 0) == 0;
    if ($tobool16) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $call19 = _kh_copy_mt($mrb, $16) | 0;
    $mt20 = $call + 16 | 0;
    $call19_c = $call19;
    HEAP32[$mt20 >> 2] = $call19_c;
    label = 11;
    break;
   case 10:
    $call22 = _kh_init_mt($mrb) | 0;
    $mt23 = $call + 16 | 0;
    $call22_c = $call22;
    HEAP32[$mt23 >> 2] = $call22_c;
    label = 11;
    break;
   case 11:
    $17 = $call;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $18 & -256;
    $20 = $19 | 12;
    HEAP32[$17 >> 2] = $20;
    $retval_0 = $6;
    label = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_obj_clone($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $clone = 0, $tt = 0, $0 = 0, $cmp = 0, $call = 0, $1 = 0, $call2 = 0, $call3 = 0, $call4 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $clone = __stackBase__ | 0;
    $tt = $self + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = $0 >>> 0 < 8;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 106424) | 0;
    _mrb_raisef($mrb, $call, 102940, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$self >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$self + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$self + 8 >> 2] | 0, tempInt) | 0);
    label = 4;
    break;
   case 4:
    $1 = HEAP32[$tt >> 2] | 0;
    $call2 = _mrb_obj_class($mrb, $self) | 0;
    $call3 = _mrb_obj_alloc($mrb, $1, $call2) | 0;
    $call4 = _mrb_singleton_class_clone($mrb, $self) | 0;
    $2 = $call3 + 4 | 0;
    HEAP32[$2 >> 2] = $call4;
    $3 = $call3 | 0;
    _mrb_obj_value1142($clone, $3);
    $4 = $clone;
    _init_copy($mrb, $clone, $self);
    $5 = $agg_result;
    HEAP32[$5 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _init_copy($mrb, $dest, $obj) {
  $mrb = $mrb | 0;
  $dest = $dest | 0;
  $obj = $obj | 0;
  var $tmp = 0, $tt = 0, $0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $dest;
  $dest = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$dest >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$dest + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$dest + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $tt = $obj + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    if (($0 | 0) == 8 | ($0 | 0) == 9 | ($0 | 0) == 10 | ($0 | 0) == 12 | ($0 | 0) == 15 | ($0 | 0) == 21) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_iv_copy($mrb, $dest, $obj);
    label = 4;
    break;
   case 4:
    _mrb_funcall($tmp, $mrb, $dest, 100736, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$obj >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$obj + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$obj + 8 >> 2] | 0, tempInt) | 0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_obj_dup($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $dup = 0, $tt = 0, $0 = 0, $cmp = 0, $call = 0, $1 = 0, $call2 = 0, $call3 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $dup = __stackBase__ | 0;
    $tt = $obj + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = $0 >>> 0 < 8;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 106424) | 0;
    _mrb_raisef($mrb, $call, 100208, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$obj >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$obj + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$obj + 8 >> 2] | 0, tempInt) | 0);
    label = 4;
    break;
   case 4:
    $1 = HEAP32[$tt >> 2] | 0;
    $call2 = _mrb_obj_class($mrb, $obj) | 0;
    $call3 = _mrb_obj_alloc($mrb, $1, $call2) | 0;
    $2 = $call3 | 0;
    _mrb_obj_value1142($dup, $2);
    $3 = $dup;
    _init_copy($mrb, $dup, $obj);
    $4 = $agg_result;
    HEAP32[$4 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_obj_extend_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $argv = 0, $argc = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $argv = __stackBase__ | 0;
  $argc = __stackBase__ + 4 | 0;
  _mrb_get_args($mrb, 97636, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $argv, HEAP32[tempInt + 4 >> 2] = $argc, tempInt) | 0);
  _mrb_obj_extend($agg_result, $mrb, HEAP32[$argc >> 2] | 0, HEAP32[$argv >> 2] | 0, $self);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_extend($agg_result, $mrb, $argc, $argv, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $argc = $argc | 0;
  $argv = $argv | 0;
  $obj = $obj | 0;
  var $tmp = 0, $tmp4 = 0, $cmp = 0, $call = 0, $cmp116 = 0, $tobool14 = 0, $i_017 = 0, $arrayidx = 0, $inc = 0, $exitcond = 0, $dec15_in = 0, $dec15 = 0, $arrayidx2 = 0, $tobool = 0, $0 = 0, $1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $tmp4 = __stackBase__ + 12 | 0;
    $cmp = ($argc | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 95488) | 0;
    _mrb_raise($mrb, $call, 95180);
    label = 8;
    break;
   case 4:
    $cmp116 = ($argc | 0) > 0;
    if ($cmp116) {
      $i_017 = 0;
      label = 6;
      break;
    } else {
      $dec15_in = $argc;
      label = 7;
      break;
    }
   case 5:
    $tobool14 = ($argc | 0) == 0;
    if ($tobool14) {
      label = 8;
      break;
    } else {
      $dec15_in = $argc;
      label = 7;
      break;
    }
   case 6:
    $arrayidx = $argv + ($i_017 * 12 & -1) | 0;
    _mrb_check_type($mrb, $arrayidx, 10);
    $inc = $i_017 + 1 | 0;
    $exitcond = ($inc | 0) == ($argc | 0);
    if ($exitcond) {
      label = 5;
      break;
    } else {
      $i_017 = $inc;
      label = 6;
      break;
    }
   case 7:
    $dec15 = $dec15_in - 1 | 0;
    $arrayidx2 = $argv + ($dec15 * 12 & -1) | 0;
    _mrb_funcall($tmp, $mrb, $arrayidx2, 95084, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$obj >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$obj + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$obj + 8 >> 2] | 0, tempInt) | 0);
    _mrb_funcall($tmp4, $mrb, $arrayidx2, 95012, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$obj >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$obj + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$obj + 8 >> 2] | 0, tempInt) | 0);
    $tobool = ($dec15 | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      $dec15_in = $dec15;
      label = 7;
      break;
    }
   case 8:
    $0 = $agg_result;
    $1 = $obj;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_obj_hash($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_fixnum_value1145($agg_result, _mrb_obj_id($self) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_init_copy($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $orig = 0, $call = 0, $call1 = 0, $tobool = 0, $0 = 0, $1 = 0, $tt = 0, $2 = 0, $tt2 = 0, $3 = 0, $cmp = 0, $call3 = 0, $call4 = 0, $cmp5 = 0, $call7 = 0, $4 = 0, $5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $orig = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 95504, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $orig, tempInt) | 0) | 0;
    $call1 = _mrb_obj_equal(0, $self, $orig) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $0 = $agg_result;
    $1 = $self;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 8;
    break;
   case 4:
    $tt = $self + 8 | 0;
    $2 = HEAP32[$tt >> 2] | 0;
    $tt2 = $orig + 8 | 0;
    $3 = HEAP32[$tt2 >> 2] | 0;
    $cmp = ($2 | 0) == ($3 | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $call3 = _mrb_obj_class($mrb, $self) | 0;
    $call4 = _mrb_obj_class($mrb, $orig) | 0;
    $cmp5 = ($call3 | 0) == ($call4 | 0);
    if ($cmp5) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $call7 = _mrb_class_get($mrb, 106424) | 0;
    _mrb_raise($mrb, $call7, 94432);
    label = 7;
    break;
   case 7:
    $4 = $agg_result;
    $5 = $self;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_obj_instance_eval($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $a = 0, $b = 0, $tmp = 0, $call = 0, $cmp = 0, $call1 = 0, $tt = 0, $0 = 0, $cv_sroa_0_0__cast = 0, $cv_sroa_0_0_copyload = 0, $1 = 0, $c_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $a = __stackBase__ | 0;
    $b = __stackBase__ + 12 | 0;
    $tmp = __stackBase__ + 24 | 0;
    $call = _mrb_get_args($mrb, 93532, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $a, HEAP32[tempInt + 4 >> 2] = $b, tempInt) | 0) | 0;
    $cmp = ($call | 0) == 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call1 = _mrb_class_get($mrb, 92832) | 0;
    _mrb_raise($mrb, $call1, 111496);
    label = 4;
    break;
   case 4:
    $tt = $self + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    if (($0 | 0) == 4 | ($0 | 0) == 3 | ($0 | 0) == 6) {
      $c_0 = 0;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _mrb_singleton_class($tmp, $mrb, $self);
    $cv_sroa_0_0__cast = $tmp;
    $cv_sroa_0_0_copyload = HEAP32[$cv_sroa_0_0__cast >> 2] | 0;
    $1 = $cv_sroa_0_0_copyload;
    $c_0 = $1;
    label = 6;
    break;
   case 6:
    _mrb_yield_internal($agg_result, $mrb, $b, 0, 0, $self, $c_0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_obj_is_instance_of($mrb, $obj, $c) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $c = $c | 0;
  var $_ = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $_ = (_mrb_obj_class($mrb, $obj) | 0) == ($c | 0) & 1;
  STACKTOP = __stackBase__;
  return $_ | 0;
}
function _mrb_obj_ivar_defined($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $mid = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $mid = __stackBase__ | 0;
  _mrb_get_args($mrb, 111004, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $mid, tempInt) | 0);
  _check_iv_name($mrb, HEAP16[$mid >> 1] | 0);
  _mrb_bool_value1146($agg_result, _mrb_obj_iv_defined(0, HEAP32[$self >> 2] | 0, HEAP16[$mid >> 1] | 0) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _check_iv_name($mrb, $id) {
  $mrb = $mrb | 0;
  $id = $id | 0;
  var $len = 0, $agg_tmp = 0, $call = 0, $0 = 0, $cmp = 0, $1 = 0, $cmp1 = 0, $arrayidx3 = 0, $2 = 0, $cmp5 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $len = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 4 | 0;
    $call = _mrb_sym2name_len($mrb, $id, $len) | 0;
    $0 = HEAP32[$len >> 2] | 0;
    $cmp = $0 >>> 0 < 2;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $1 = HEAP8[$call] | 0;
    $cmp1 = $1 << 24 >> 24 == 64;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $arrayidx3 = $call + 1 | 0;
    $2 = HEAP8[$arrayidx3] | 0;
    $cmp5 = $2 << 24 >> 24 == 64;
    if ($cmp5) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _mrb_sym2str($agg_tmp, $mrb, $id);
    _mrb_name_error($mrb, $id, 95608, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_obj_ivar_get($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $id = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $id = __stackBase__ | 0;
  _mrb_get_args($mrb, 111004, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $id, tempInt) | 0);
  _check_iv_name($mrb, HEAP16[$id >> 1] | 0);
  _mrb_iv_get($agg_result, 0, $self, HEAP16[$id >> 1] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_ivar_set($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $id = 0, $val = 0, $2 = 0, $3 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $id = __stackBase__ | 0;
  $val = __stackBase__ + 4 | 0;
  _mrb_get_args($mrb, 110272, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $id, HEAP32[tempInt + 4 >> 2] = $val, tempInt) | 0);
  _check_iv_name($mrb, HEAP16[$id >> 1] | 0);
  _mrb_iv_set($mrb, $self, HEAP16[$id >> 1] | 0, $val);
  $2 = $agg_result;
  $3 = $val;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
  HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
  HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_is_kind_of_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $arg = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $arg = __stackBase__ | 0;
  _mrb_get_args($mrb, 95504, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $arg, tempInt) | 0);
  _mrb_bool_value1146($agg_result, _mrb_obj_is_kind_of($mrb, $self, HEAP32[$arg >> 2] | 0) & 255);
  STACKTOP = __stackBase__;
  return;
}
function _class_instance_method_list($agg_result, $mrb, $recur, $klass, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $recur = $recur | 0;
  $klass = $klass | 0;
  $obj = $obj | 0;
  var $ary = 0, $0 = 0, $1 = 0, $tobool4 = 0, $klass_addr_012 = 0, $2 = 0, $3 = 0, $bf_clear = 0, $bf_clear_off = 0, $switch = 0, $or_cond8 = 0, $super = 0, $4 = 0, $tobool = 0, $cmp = 0, $or_cond = 0, $5 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ary = __stackBase__ | 0;
    _mrb_ary_new($ary, $mrb);
    $0 = $ary;
    $1 = ($klass | 0) == 0;
    if ($1) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $tobool4 = $recur << 24 >> 24 == 0;
    $klass_addr_012 = $klass;
    label = 4;
    break;
   case 4:
    _method_entry_loop($mrb, $klass_addr_012, $ary);
    $2 = $klass_addr_012;
    $3 = HEAP32[$2 >> 2] | 0;
    $bf_clear = $3 & 255;
    $bf_clear_off = $bf_clear - 11 | 0;
    $switch = $bf_clear_off >>> 0 > 1;
    $or_cond8 = $switch & $tobool4;
    if ($or_cond8) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $super = $klass_addr_012 + 20 | 0;
    $4 = HEAP32[$super >> 2] | 0;
    $tobool = ($4 | 0) == 0;
    $cmp = ($4 | 0) == ($klass_addr_012 | 0);
    $or_cond = $tobool | $cmp;
    if ($or_cond) {
      label = 6;
      break;
    } else {
      $klass_addr_012 = $4;
      label = 4;
      break;
    }
   case 6:
    $5 = $agg_result;
    HEAP32[$5 >> 2] = HEAP32[$0 >> 2] | 0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$0 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _method_entry_loop($mrb, $klass, $ary) {
  $mrb = $mrb | 0;
  $klass = $klass | 0;
  $ary = $ary | 0;
  var $agg_tmp = 0, $mt = 0, $0 = 0, $tobool = 0, $n_buckets = 0, $1 = 0, $cmp13 = 0, $e_flags = 0, $d_flags = 0, $keys = 0, $i_014 = 0, $div = 0, $2 = 0, $arrayidx = 0, $3 = 0, $rem = 0, $arrayidx1 = 0, $4 = 0, $and11 = 0, $tobool3 = 0, $5 = 0, $arrayidx5 = 0, $6 = 0, $and1012 = 0, $tobool11 = 0, $7 = 0, $arrayidx13 = 0, $8 = 0, $inc = 0, $9 = 0, $cmp = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $ary;
  $ary = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $mt = $klass + 16 | 0;
    $0 = HEAP32[$mt >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $n_buckets = $0 | 0;
    $1 = HEAP32[$n_buckets >> 2] | 0;
    $cmp13 = ($1 | 0) == 0;
    if ($cmp13) {
      label = 9;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $e_flags = $0 + 16 | 0;
    $d_flags = $0 + 20 | 0;
    $keys = $0 + 24 | 0;
    $i_014 = 0;
    label = 5;
    break;
   case 5:
    $div = $i_014 >>> 3;
    $2 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $2 + $div | 0;
    $3 = HEAP8[$arrayidx] | 0;
    $rem = $i_014 & 7;
    $arrayidx1 = $rem + 112164 | 0;
    $4 = HEAP8[$arrayidx1] | 0;
    $and11 = $4 & $3;
    $tobool3 = $and11 << 24 >> 24 == 0;
    if ($tobool3) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    $5 = HEAP32[$d_flags >> 2] | 0;
    $arrayidx5 = $5 + $div | 0;
    $6 = HEAP8[$arrayidx5] | 0;
    $and1012 = $6 & $4;
    $tobool11 = $and1012 << 24 >> 24 == 0;
    if ($tobool11) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $7 = HEAP32[$keys >> 2] | 0;
    $arrayidx13 = $7 + ($i_014 << 1) | 0;
    $8 = HEAP16[$arrayidx13 >> 1] | 0;
    _mrb_symbol_value1155($agg_tmp, $8);
    _mrb_ary_push($mrb, $ary, $agg_tmp);
    label = 8;
    break;
   case 8:
    $inc = $i_014 + 1 | 0;
    $9 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = $inc >>> 0 < $9 >>> 0;
    if ($cmp) {
      $i_014 = $inc;
      label = 5;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_obj_singleton_methods($agg_result, $mrb, $recur, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $recur = $recur | 0;
  $obj = $obj | 0;
  var $ary = 0, $call = 0, $0 = 0, $tobool = 0, $1 = 0, $2 = 0, $bf_clear = 0, $cmp = 0, $super = 0, $3 = 0, $klass_0 = 0, $tobool1 = 0, $tobool312 = 0, $or_cond = 0, $klass_113 = 0, $4 = 0, $5 = 0, $bf_clear4 = 0, $bf_clear4_off = 0, $switch = 0, $super8 = 0, $6 = 0, $tobool3 = 0, $7 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ary = __stackBase__ | 0;
    $call = _mrb_class1141($mrb, $obj) | 0;
    _mrb_ary_new($ary, $mrb);
    $0 = $ary;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      $klass_0 = 0;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $1 = $call;
    $2 = HEAP32[$1 >> 2] | 0;
    $bf_clear = $2 & 255;
    $cmp = ($bf_clear | 0) == 12;
    if ($cmp) {
      label = 4;
      break;
    } else {
      $klass_0 = $call;
      label = 5;
      break;
    }
   case 4:
    _method_entry_loop($mrb, $call, $ary);
    $super = $call + 20 | 0;
    $3 = HEAP32[$super >> 2] | 0;
    $klass_0 = $3;
    label = 5;
    break;
   case 5:
    $tobool1 = $recur << 24 >> 24 == 0;
    $tobool312 = ($klass_0 | 0) == 0;
    $or_cond = $tobool1 | $tobool312;
    if ($or_cond) {
      label = 8;
      break;
    } else {
      $klass_113 = $klass_0;
      label = 6;
      break;
    }
   case 6:
    $4 = $klass_113;
    $5 = HEAP32[$4 >> 2] | 0;
    $bf_clear4 = $5 & 255;
    $bf_clear4_off = $bf_clear4 - 11 | 0;
    $switch = $bf_clear4_off >>> 0 < 2;
    if ($switch) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _method_entry_loop($mrb, $klass_113, $ary);
    $super8 = $klass_113 + 20 | 0;
    $6 = HEAP32[$super8 >> 2] | 0;
    $tobool3 = ($6 | 0) == 0;
    if ($tobool3) {
      label = 8;
      break;
    } else {
      $klass_113 = $6;
      label = 6;
      break;
    }
   case 8:
    $7 = $agg_result;
    HEAP32[$7 >> 2] = HEAP32[$0 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$0 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_obj_methods($agg_result, $mrb, $recur, $obj, $flag) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $recur = $recur | 0;
  $obj = $obj | 0;
  $flag = $flag | 0;
  var $tobool = 0, $call = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = $recur << 24 >> 24 == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _mrb_class1141($mrb, $obj) | 0;
    _class_instance_method_list($agg_result, $mrb, $recur, $call, 0);
    label = 5;
    break;
   case 4:
    _mrb_obj_singleton_methods($agg_result, $mrb, $recur, $obj);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_obj_methods_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $recur = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $recur = __stackBase__ | 0;
  HEAP8[$recur] = 1;
  _mrb_get_args($mrb, 109824, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $recur, tempInt) | 0);
  _mrb_obj_methods($agg_result, $mrb, HEAP8[$recur] | 0, $self, 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_false($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_false_value1149($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_private_methods($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $recur = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $recur = __stackBase__ | 0;
  HEAP8[$recur] = 1;
  _mrb_get_args($mrb, 109824, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $recur, tempInt) | 0);
  _mrb_obj_methods($agg_result, $mrb, HEAP8[$recur] | 0, $self, 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_protected_methods($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $recur = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $recur = __stackBase__ | 0;
  HEAP8[$recur] = 1;
  _mrb_get_args($mrb, 109824, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $recur, tempInt) | 0);
  _mrb_obj_methods($agg_result, $mrb, HEAP8[$recur] | 0, $self, 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_public_methods($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $recur = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $recur = __stackBase__ | 0;
  HEAP8[$recur] = 1;
  _mrb_get_args($mrb, 109824, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $recur, tempInt) | 0);
  _mrb_obj_methods($agg_result, $mrb, HEAP8[$recur] | 0, $self, 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_f_raise($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $a = 0, $exc = 0, $tmp = 0, $tmp10 = 0, $agg_tmp = 0, $arrayidx = 0, $arrayidx1 = 0, $call = 0, $call2 = 0, $0 = 0, $1 = 0, $tt = 0, $2 = 0, $cmp = 0, $i = 0, $3 = 0, $tobool = 0, $call9 = 0, $4 = 0, $5 = 0, $6 = 0, $argc_0 = 0, $p = 0, $7 = 0, $8 = 0, $call13 = 0, $c = 0, $9 = 0, $ci = 0, $10 = 0, $pc = 0, $11 = 0, $12 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 72 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $a = __stackBase__ | 0;
    $exc = __stackBase__ + 24 | 0;
    $tmp = __stackBase__ + 36 | 0;
    $tmp10 = __stackBase__ + 48 | 0;
    $agg_tmp = __stackBase__ + 60 | 0;
    $arrayidx = $a | 0;
    $arrayidx1 = $a + 12 | 0;
    $call = _mrb_get_args($mrb, 109276, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $arrayidx, HEAP32[tempInt + 4 >> 2] = $arrayidx1, tempInt) | 0) | 0;
    if (($call | 0) == 0) {
      label = 3;
      break;
    } else if (($call | 0) == 1) {
      label = 4;
      break;
    } else {
      $argc_0 = $call;
      label = 7;
      break;
    }
   case 3:
    $call2 = _mrb_class_get($mrb, 108816) | 0;
    _mrb_raise($mrb, $call2, 108452);
    label = 8;
    break;
   case 4:
    _mrb_check_string_type($tmp, $mrb, $arrayidx);
    $0 = $arrayidx1;
    $1 = $tmp;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    $tt = $a + 20 | 0;
    $2 = HEAP32[$tt >> 2] | 0;
    $cmp = ($2 | 0) == 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $i = $arrayidx1;
    $3 = HEAP32[$i >> 2] | 0;
    $tobool = ($3 | 0) == 0;
    if ($tobool) {
      $argc_0 = $call;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $call9 = _mrb_class_get($mrb, 108816) | 0;
    $4 = $call9 | 0;
    _mrb_obj_value1142($tmp10, $4);
    $5 = $a;
    $6 = $tmp10;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2] | 0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
    $argc_0 = 2;
    label = 7;
    break;
   case 7:
    _mrb_make_exception($exc, $mrb, $argc_0, $arrayidx);
    $p = $exc;
    $7 = HEAP32[$p >> 2] | 0;
    $8 = $7;
    $call13 = _mrb_intern2($mrb, 108156, 6) | 0;
    $c = $mrb + 8 | 0;
    $9 = HEAP32[$c >> 2] | 0;
    $ci = $9 + 16 | 0;
    $10 = HEAP32[$ci >> 2] | 0;
    $pc = $10 + 20 | 0;
    $11 = HEAP32[$pc >> 2] | 0;
    $12 = $11;
    _mrb_voidp_value1150($agg_tmp, $12);
    _mrb_obj_iv_set($mrb, $8, $call13, $agg_tmp);
    _mrb_exc_raise($mrb, $exc);
    label = 8;
    break;
   case 8:
    _mrb_nil_value1151($agg_result);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_obj_remove_instance_variable($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $sym = 0, $tmp = 0, $agg_tmp = 0, $call = 0, $0 = 0, $1 = 0, $val_sroa_0_0__idx1 = 0, $val_sroa_0_0_copyload2 = 0.0, $val_sroa_1_8__idx4 = 0, $val_sroa_1_8_copyload5 = 0, $cmp = 0, $2 = 0, $val_sroa_0_0__idx = 0, $val_sroa_1_8__idx3 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $sym = __stackBase__ | 0;
    $tmp = __stackBase__ + 4 | 0;
    $agg_tmp = __stackBase__ + 16 | 0;
    $call = _mrb_get_args($mrb, 111004, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $sym, tempInt) | 0) | 0;
    $0 = HEAP16[$sym >> 1] | 0;
    _check_iv_name($mrb, $0);
    $1 = HEAP16[$sym >> 1] | 0;
    _mrb_iv_remove($tmp, 0, $self, $1);
    $val_sroa_0_0__idx1 = $tmp | 0;
    $val_sroa_0_0_copyload2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$val_sroa_0_0__idx1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$val_sroa_0_0__idx1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $val_sroa_1_8__idx4 = $tmp + 8 | 0;
    $val_sroa_1_8_copyload5 = HEAP32[$val_sroa_1_8__idx4 >> 2] | 0;
    $cmp = ($val_sroa_1_8_copyload5 | 0) == 5;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $2 = HEAP16[$sym >> 1] | 0;
    _mrb_sym2str($agg_tmp, $mrb, $2);
    _mrb_name_error($mrb, $2, 107708, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    label = 4;
    break;
   case 4:
    $val_sroa_0_0__idx = $agg_result | 0;
    HEAPF64[tempDoublePtr >> 3] = $val_sroa_0_0_copyload2, HEAP32[$val_sroa_0_0__idx >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$val_sroa_0_0__idx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $val_sroa_1_8__idx3 = $agg_result + 8 | 0;
    HEAP32[$val_sroa_1_8__idx3 >> 2] = $val_sroa_1_8_copyload5;
    STACKTOP = __stackBase__;
    return;
  }
}
function _obj_respond_to($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $argv = 0, $argc = 0, $mid = 0, $tmp = 0, $tmp6 = 0, $tmp15 = 0, $tmp19 = 0, $call = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $tt = 0, $4 = 0, $5 = 0, $tt11 = 0, $6 = 0, $cmp12 = 0, $i = 0, $7 = 0, $tobool = 0, $8 = 0, $call16 = 0, $9 = 0, $10 = 0, $tt20 = 0, $11 = 0, $cmp21 = 0, $i24 = 0, $12 = 0, $tobool25 = 0, $id_0_ph_in_in = 0, $id_0_ph_in = 0, $id_0_ph = 0, $call36 = 0, $conv = 0, $tobool38 = 0, $call40 = 0, $call46 = 0, $tobool47 = 0, $13 = 0, $14 = 0, $respond_to_p_124 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 68 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $argv = __stackBase__ | 0;
    $argc = __stackBase__ + 4 | 0;
    $mid = __stackBase__ + 8 | 0;
    $tmp = __stackBase__ + 20 | 0;
    $tmp6 = __stackBase__ + 32 | 0;
    $tmp15 = __stackBase__ + 44 | 0;
    $tmp19 = __stackBase__ + 56 | 0;
    $call = _mrb_get_args($mrb, 97636, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $argv, HEAP32[tempInt + 4 >> 2] = $argc, tempInt) | 0) | 0;
    $0 = HEAP32[$argv >> 2] | 0;
    $1 = $mid;
    $2 = $0;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    $3 = HEAP32[$argc >> 2] | 0;
    $cmp = ($3 | 0) > 1;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_nil_value1151($tmp);
    label = 4;
    break;
   case 4:
    $tt = $mid + 8 | 0;
    $4 = HEAP32[$tt >> 2] | 0;
    if (($4 | 0) == 16) {
      label = 8;
      break;
    } else if (($4 | 0) == 4) {
      $id_0_ph_in_in = $mid;
      label = 10;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _mrb_check_string_type($tmp6, $mrb, $mid);
    $5 = $tmp6;
    $tt11 = $tmp6 + 8 | 0;
    $6 = HEAP32[$tt11 >> 2] | 0;
    $cmp12 = ($6 | 0) == 0;
    if ($cmp12) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    $i = $tmp6;
    $7 = HEAP32[$i >> 2] | 0;
    $tobool = ($7 | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _mrb_inspect($tmp15, $mrb, $mid);
    $8 = $tmp15;
    HEAP32[$5 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    $call16 = _mrb_class_get($mrb, 106424) | 0;
    _mrb_raisef($mrb, $call16, 107236, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$tmp6 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$tmp6 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$tmp6 + 8 >> 2] | 0, tempInt) | 0);
    label = 8;
    break;
   case 8:
    _mrb_check_intern_str($tmp19, $mrb, $mid);
    $9 = $tmp6;
    $10 = $tmp19;
    HEAP32[$9 >> 2] = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 + 4 >> 2] = HEAP32[$10 + 4 >> 2] | 0;
    HEAP32[$9 + 8 >> 2] = HEAP32[$10 + 8 >> 2] | 0;
    $tt20 = $tmp6 + 8 | 0;
    $11 = HEAP32[$tt20 >> 2] | 0;
    $cmp21 = ($11 | 0) == 0;
    if ($cmp21) {
      label = 9;
      break;
    } else {
      $id_0_ph_in_in = $tmp6;
      label = 10;
      break;
    }
   case 9:
    $i24 = $tmp6;
    $12 = HEAP32[$i24 >> 2] | 0;
    $tobool25 = ($12 | 0) == 0;
    if ($tobool25) {
      label = 11;
      break;
    } else {
      $id_0_ph_in_in = $tmp6;
      label = 10;
      break;
    }
   case 10:
    $id_0_ph_in = $id_0_ph_in_in;
    $id_0_ph = HEAP16[$id_0_ph_in >> 1] | 0;
    $call36 = _basic_obj_respond_to($mrb, $self, $id_0_ph) | 0;
    $conv = $call36 & 255;
    $tobool38 = $conv << 24 >> 24 == 0;
    if ($tobool38) {
      label = 11;
      break;
    } else {
      $respond_to_p_124 = $conv;
      label = 13;
      break;
    }
   case 11:
    $call40 = _mrb_intern2($mrb, 106704, 19) | 0;
    $call46 = _basic_obj_respond_to($mrb, $self, $call40) | 0;
    $tobool47 = ($call46 | 0) == 0;
    if ($tobool47) {
      $respond_to_p_124 = 0;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $13 = HEAP32[$argc >> 2] | 0;
    $14 = HEAP32[$argv >> 2] | 0;
    _mrb_funcall_argv($agg_result, $mrb, $self, $call40, $13, $14);
    label = 14;
    break;
   case 13:
    _mrb_bool_value1146($agg_result, $respond_to_p_124);
    label = 14;
    break;
   case 14:
    STACKTOP = __stackBase__;
    return;
  }
}
function _basic_obj_respond_to($mrb, $obj, $id) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $id = $id | 0;
  var $call = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $call = _mrb_respond_to($mrb, $obj, $id) | 0;
  STACKTOP = __stackBase__;
  return $call | 0;
}
function _mrb_obj_singleton_methods_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $recur = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $recur = __stackBase__ | 0;
  HEAP8[$recur] = 1;
  _mrb_get_args($mrb, 109824, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $recur, tempInt) | 0);
  _mrb_obj_singleton_methods($agg_result, $mrb, HEAP8[$recur] | 0, $self);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_init_kernel($mrb) {
  $mrb = $mrb | 0;
  var $call = 0, $kernel_module = 0, $2 = 0, $call2 = 0;
  $call = _mrb_define_module($mrb, 106388) | 0;
  $kernel_module = $mrb + 96 | 0;
  HEAP32[$kernel_module >> 2] = $call;
  _mrb_define_class_method($mrb, $call, 105860, 150, 0);
  _mrb_define_class_method($mrb, $call, 105568, 20, 0);
  _mrb_define_class_method($mrb, $call, 105204, 150, 0);
  _mrb_define_class_method($mrb, $call, 104744, 68, 0);
  _mrb_define_method($mrb, $call, 104356, 698, 0);
  _mrb_define_method($mrb, $call, 104032, 232, 0);
  _mrb_define_method($mrb, $call, 103780, 136, 0);
  _mrb_define_method($mrb, $call, 103456, 758, 0);
  _mrb_define_method($mrb, $call, 103176, 688, 0);
  _mrb_define_method($mrb, $call, 102908, 672, 0);
  _mrb_define_method($mrb, $call, 105860, 150, 0);
  _mrb_define_method($mrb, $call, 102384, 730, 0);
  _mrb_define_method($mrb, $call, 102140, 64, 0);
  _mrb_define_method($mrb, $call, 101928, 558, 0);
  _mrb_define_method($mrb, $call, 101716, 232, 0);
  _mrb_define_method($mrb, $call, 101516, 232, 0);
  _mrb_define_method($mrb, $call, 101232, 582, 0);
  _mrb_define_method($mrb, $call, 105568, 20, 0);
  _mrb_define_method($mrb, $call, 101064, 210, 0);
  _mrb_define_method($mrb, $call, 100736, 650, 0);
  _mrb_define_method($mrb, $call, 100428, 652, 0);
  _mrb_define_method($mrb, $call, 100176, 566, 0);
  _mrb_define_method($mrb, $call, 99724, 358, 0);
  _mrb_define_method($mrb, $call, 99408, 446, 0);
  _mrb_define_method($mrb, $call, 99144, 92, 0);
  _mrb_define_method($mrb, $call, 98884, 284, 0);
  _mrb_define_method($mrb, $call, 98684, 610, 0);
  _mrb_define_method($mrb, $call, 98532, 814, 0);
  _mrb_define_method($mrb, $call, 105204, 150, 0);
  _mrb_define_method($mrb, $call, 98320, 814, 0);
  _mrb_define_method($mrb, $call, 98136, 368, 0);
  _mrb_define_method($mrb, $call, 97884, 570, 0);
  _mrb_define_method($mrb, $call, 97608, 688, 0);
  _mrb_define_method($mrb, $call, 97120, 840, 0);
  _mrb_define_method($mrb, $call, 96872, 744, 0);
  _mrb_define_method($mrb, $call, 96608, 606, 0);
  _mrb_define_method($mrb, $call, 104744, 68, 0);
  _mrb_define_method($mrb, $call, 96360, 648, 0);
  _mrb_define_method($mrb, $call, 96176, 838, 0);
  _mrb_define_method($mrb, $call, 95964, 672, 0);
  _mrb_define_method($mrb, $call, 95816, 252, 0);
  _mrb_define_method($mrb, $call, 111128, 482, 0);
  _mrb_include_module($mrb, HEAP32[$mrb + 44 >> 2] | 0, HEAP32[$kernel_module >> 2] | 0);
  $2 = HEAP32[$mrb + 52 >> 2] | 0;
  $call2 = _mrb_intern1154($mrb, 101928) | 0;
  _mrb_alias_method($mrb, $2, $call2, _mrb_intern1154($mrb, 102140) | 0);
  return;
}
function _mrb_float_value1215($agg_result, $f) {
  $agg_result = $agg_result | 0;
  $f = +$f;
  var $v_sroa_0_0__idx = 0;
  $v_sroa_0_0__idx = $agg_result | 0;
  HEAPF64[tempDoublePtr >> 3] = $f, HEAP32[$v_sroa_0_0__idx >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$v_sroa_0_0__idx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  HEAP32[$agg_result + 8 >> 2] = 6;
  return;
}
function _mrb_fixnum_value1216($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_f_block_given_p_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $c = 0, $0 = 0, $ci1 = 0, $1 = 0, $stbase = 0, $2 = 0, $stackidx = 0, $3 = 0, $add_ptr_sum = 0, $incdec_ptr = 0, $cibase = 0, $4 = 0, $cmp = 0, $proc = 0, $5 = 0, $env = 0, $6 = 0, $tobool = 0, $stack = 0, $7 = 0, $tobool7 = 0, $cmp14 = 0, $tt = 0, $8 = 0, $cmp18 = 0, $value = 0, $i = 0, $9 = 0, $tobool23 = 0, $10 = 0, $conv = 0, $argc = 0, $11 = 0, $cmp26 = 0, $add_ptr3_sum = 0, $add_ptr3_sum_add_ptr_sum = 0, $tt31 = 0, $12 = 0, $cmp32 = 0, $bp_0 = 0, $i36 = 0, $13 = 0, $tobool37 = 0, $14 = 0, $conv43 = 0, $given_p_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $c = $mrb + 8 | 0;
    $0 = HEAP32[$c >> 2] | 0;
    $ci1 = $0 + 16 | 0;
    $1 = HEAP32[$ci1 >> 2] | 0;
    $stbase = $0 + 8 | 0;
    $2 = HEAP32[$stbase >> 2] | 0;
    $stackidx = $1 + 8 | 0;
    $3 = HEAP32[$stackidx >> 2] | 0;
    $add_ptr_sum = $3 + 1 | 0;
    $incdec_ptr = $1 - 44 | 0;
    $cibase = $0 + 20 | 0;
    $4 = HEAP32[$cibase >> 2] | 0;
    $cmp = $incdec_ptr >>> 0 > $4 >>> 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $given_p_0 = 0;
      label = 12;
      break;
    }
   case 3:
    $proc = $1 - 44 + 4 | 0;
    $5 = HEAP32[$proc >> 2] | 0;
    $env = $5 + 20 | 0;
    $6 = HEAP32[$env >> 2] | 0;
    $tobool = ($6 | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $stack = $6 + 12 | 0;
    $7 = HEAP32[$stack >> 2] | 0;
    $tobool7 = ($7 | 0) == 0;
    if ($tobool7) {
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $cmp14 = ($7 | 0) == ($2 | 0);
    if ($cmp14) {
      $10 = 0;
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $tt = $7 + 20 | 0;
    $8 = HEAP32[$tt >> 2] | 0;
    $cmp18 = ($8 | 0) == 0;
    if ($cmp18) {
      label = 7;
      break;
    } else {
      $10 = 1;
      label = 8;
      break;
    }
   case 7:
    $value = $7 + 12 | 0;
    $i = $value;
    $9 = HEAP32[$i >> 2] | 0;
    $tobool23 = ($9 | 0) != 0;
    $10 = $tobool23;
    label = 8;
    break;
   case 8:
    $conv = $10 & 1;
    $given_p_0 = $conv;
    label = 12;
    break;
   case 9:
    $argc = $1 - 44 + 16 | 0;
    $11 = HEAP32[$argc >> 2] | 0;
    $cmp26 = ($11 | 0) > 0;
    $add_ptr3_sum = $cmp26 ? $11 : 0;
    $add_ptr3_sum_add_ptr_sum = $add_ptr_sum + $add_ptr3_sum | 0;
    $tt31 = $2 + ($add_ptr3_sum_add_ptr_sum * 12 & -1) + 8 | 0;
    $12 = HEAP32[$tt31 >> 2] | 0;
    $cmp32 = ($12 | 0) == 0;
    if ($cmp32) {
      label = 10;
      break;
    } else {
      $14 = 1;
      label = 11;
      break;
    }
   case 10:
    $bp_0 = $2 + ($add_ptr3_sum_add_ptr_sum * 12 & -1) | 0;
    $i36 = $bp_0;
    $13 = HEAP32[$i36 >> 2] | 0;
    $tobool37 = ($13 | 0) != 0;
    $14 = $tobool37;
    label = 11;
    break;
   case 11:
    $conv43 = $14 & 1;
    $given_p_0 = $conv43;
    label = 12;
    break;
   case 12:
    _mrb_bool_value1146($agg_result, $given_p_0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_obj_equal_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $arg = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $arg = __stackBase__ | 0;
  _mrb_get_args($mrb, 95504, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $arg, tempInt) | 0);
  _mrb_bool_value1146($agg_result, _mrb_obj_equal(0, $self, $arg) & 255);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_not_equal_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $arg = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $arg = __stackBase__ | 0;
  _mrb_get_args($mrb, 95504, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $arg, tempInt) | 0);
  _mrb_bool_value1146($agg_result, (_mrb_equal($mrb, $self, $arg) & 255) << 24 >> 24 == 0 & 1);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_equal_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $arg = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $arg = __stackBase__ | 0;
  _mrb_get_args($mrb, 95504, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $arg, tempInt) | 0);
  _mrb_bool_value1146($agg_result, _mrb_equal($mrb, $self, $arg) & 255);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_id_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_fixnum_value1145($agg_result, _mrb_obj_id($self) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_f_send($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $name = 0, $block = 0, $argv = 0, $argc = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $name = __stackBase__ | 0;
  $block = __stackBase__ + 4 | 0;
  $argv = __stackBase__ + 16 | 0;
  $argc = __stackBase__ + 20 | 0;
  _mrb_get_args($mrb, 95716, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $name, HEAP32[tempInt + 4 >> 2] = $argv, HEAP32[tempInt + 8 >> 2] = $argc, HEAP32[tempInt + 12 >> 2] = $block, tempInt) | 0);
  _mrb_funcall_with_block($agg_result, $mrb, $self, HEAP16[$name >> 1] | 0, HEAP32[$argc >> 2] | 0, HEAP32[$argv >> 2] | 0, $block);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_class_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_obj_value1142($agg_result, _mrb_obj_class($mrb, $self) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _obj_is_instance_of($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $arg = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $arg = __stackBase__ | 0;
  _mrb_get_args($mrb, 95504, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $arg, tempInt) | 0);
  _mrb_bool_value1146($agg_result, _mrb_obj_is_instance_of($mrb, $self, HEAP32[$arg >> 2] | 0) & 255);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_intern1154($mrb, $cstr) {
  $mrb = $mrb | 0;
  $cstr = $cstr | 0;
  return _mrb_intern_cstr($mrb, $cstr) | 0;
}
function _mrb_symbol_value1155($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  var $v_sroa_1_2__raw_idx = 0, $v_sroa_1_2_idx = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP16[$agg_result >> 1] = $i;
  $v_sroa_1_2__raw_idx = $agg_result + 2 | 0;
  $v_sroa_1_2_idx = __stackBase__ | 0;
  HEAP16[$v_sroa_1_2__raw_idx >> 1] = HEAP16[$v_sroa_1_2_idx >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 2 >> 1] = HEAP16[$v_sroa_1_2_idx + 2 >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 4 >> 1] = HEAP16[$v_sroa_1_2_idx + 4 >> 1] | 0;
  HEAP32[$agg_result + 8 >> 2] = 4;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_to_flo($mrb, $val) {
  $mrb = $mrb | 0;
  $val = $val | 0;
  var $tt = 0, $0 = 0, $i = 0, $1 = 0, $conv = 0.0, $call = 0, $f = 0, $2 = 0.0, $retval_0 = 0.0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $val + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    if (($0 | 0) == 3) {
      label = 3;
      break;
    } else if (($0 | 0) == 6) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $i = $val;
    $1 = HEAP32[$i >> 2] | 0;
    $conv = +($1 | 0);
    $retval_0 = $conv;
    label = 6;
    break;
   case 4:
    $call = _mrb_class_get($mrb, 106304) | 0;
    _mrb_raise($mrb, $call, 102872);
    label = 5;
    break;
   case 5:
    $f = $val | 0;
    $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $retval_0 = $2;
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return +$retval_0;
  }
  return 0.0;
}
function _mrb_flo_to_str($agg_result, $mrb, $flo, $max_digit) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $flo = $flo | 0;
  $max_digit = $max_digit | 0;
  var $result = 0, $s = 0, $cmp = 0, $call = 0, $tt = 0, $0 = 0, $cmp1 = 0, $call3 = 0, $f = 0, $1 = 0.0, $call5 = 0, $cmp6 = 0, $call9 = 0, $cmp10 = 0, $cmp12 = 0, $arrayidx = 0, $cmp25 = 0, $sub = 0.0, $incdec_ptr = 0, $n_0 = 0.0, $c_0 = 0, $call28 = 0.0, $conv = 0, $cmp29 = 0, $sub31 = 0, $cond = 0, $cmp32 = 0, $conv_lobit = 0, $sub38_conv = 0, $conv40 = 0.0, $2 = 0.0, $div = 0.0, $_conv = 0, $n_1_ph = 0.0, $m_1_ph = 0, $e_0_ph = 0, $cmp4745 = 0, $max_digit_addr_049 = 0, $c_148 = 0, $m_147 = 0, $n_146 = 0.0, $conv50 = 0.0, $3 = 0.0, $div51 = 0.0, $add = 0.0, $call52 = 0.0, $conv53 = 0, $add54 = 0, $conv55 = 0, $incdec_ptr56 = 0, $conv57 = 0.0, $mul = 0.0, $sub58 = 0.0, $dec = 0, $dec59 = 0, $cmp60 = 0, $incdec_ptr63 = 0, $cmp65 = 0, $cmp67 = 0, $or_cond = 0, $c_1_be = 0, $cmp47 = 0, $c_2 = 0, $tobool = 0, $incdec_ptr73 = 0, $cmp74 = 0, $incdec_ptr77 = 0, $_ = 0, $conv_sub31 = 0, $cmp82 = 0, $call85 = 0, $div87 = 0, $add88 = 0, $conv89 = 0, $incdec_ptr90 = 0, $rem = 0, $add91 = 0, $conv92 = 0, $incdec_ptr93 = 0, $c_3 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $4 = 0, $5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 60 | 0;
  tempParam = $flo;
  $flo = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$flo >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$flo + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$flo + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $result = __stackBase__ | 0;
    $s = __stackBase__ + 12 | 0;
    $cmp = ($max_digit | 0) > 40;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 110572) | 0;
    _mrb_raise($mrb, $call, 110884);
    label = 6;
    break;
   case 4:
    $tt = $flo + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp1 = ($0 | 0) == 6;
    if ($cmp1) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $call3 = _mrb_class_get($mrb, 106304) | 0;
    _mrb_raise($mrb, $call3, 102872);
    label = 6;
    break;
   case 6:
    $f = $flo | 0;
    $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $call5 = ___fpclassifyf(+$1) | 0;
    $cmp6 = ($call5 | 0) == 0;
    if ($cmp6) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _mrb_str_new($result, $mrb, 100144, 3);
    label = 27;
    break;
   case 8:
    $call9 = ___fpclassifyf(+$1) | 0;
    $cmp10 = ($call9 | 0) == 1;
    if ($cmp10) {
      label = 9;
      break;
    } else {
      label = 12;
      break;
    }
   case 9:
    $cmp12 = $1 < 0.0;
    if ($cmp12) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    _mrb_str_new($result, $mrb, 97592, 4);
    label = 27;
    break;
   case 11:
    _mrb_str_new($result, $mrb, 95484, 3);
    label = 27;
    break;
   case 12:
    $arrayidx = $s | 0;
    $cmp25 = $1 < 0.0;
    if ($cmp25) {
      label = 13;
      break;
    } else {
      $c_0 = $arrayidx;
      $n_0 = $1;
      label = 14;
      break;
    }
   case 13:
    $sub = -0.0 - $1;
    $incdec_ptr = $s + 1 | 0;
    HEAP8[$arrayidx] = 45;
    $c_0 = $incdec_ptr;
    $n_0 = $sub;
    label = 14;
    break;
   case 14:
    $call28 = +_log10(+$n_0);
    $conv = ~~$call28;
    $cmp29 = ($conv | 0) < 0;
    $sub31 = -$conv | 0;
    $cond = $cmp29 ? $sub31 : $conv;
    $cmp32 = ($cond | 0) > ($max_digit | 0);
    if ($cmp32) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    $conv_lobit = $conv >> 31;
    $sub38_conv = $conv_lobit + $conv | 0;
    $conv40 = +($sub38_conv | 0);
    $2 = +Math_pow(10.0, +$conv40);
    $div = $n_0 / $2;
    $e_0_ph = 1;
    $m_1_ph = 0;
    $n_1_ph = $div;
    label = 17;
    break;
   case 16:
    $_conv = $cmp29 ? 0 : $conv;
    $e_0_ph = 0;
    $m_1_ph = $_conv;
    $n_1_ph = $n_0;
    label = 17;
    break;
   case 17:
    $cmp4745 = ($max_digit | 0) > -1;
    if ($cmp4745) {
      $n_146 = $n_1_ph;
      $m_147 = $m_1_ph;
      $c_148 = $c_0;
      $max_digit_addr_049 = $max_digit;
      label = 18;
      break;
    } else {
      $c_2 = $c_0;
      label = 22;
      break;
    }
   case 18:
    $conv50 = +($m_147 | 0);
    $3 = +Math_pow(10.0, +$conv50);
    $div51 = $n_146 / $3;
    $add = $div51 + 1.1920928955078125e-7;
    $call52 = +Math_floor(+$add);
    $conv53 = ~~$call52;
    $add54 = $conv53 + 48 | 0;
    $conv55 = $add54 & 255;
    $incdec_ptr56 = $c_148 + 1 | 0;
    HEAP8[$c_148] = $conv55;
    $conv57 = +($conv53 | 0);
    $mul = $3 * $conv57;
    $sub58 = $n_146 - $mul;
    $dec = $max_digit_addr_049 - 1 | 0;
    $dec59 = $m_147 - 1 | 0;
    $cmp60 = ($m_147 | 0) == 0;
    if ($cmp60) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    $incdec_ptr63 = $c_148 + 2 | 0;
    HEAP8[$incdec_ptr56] = 46;
    $c_1_be = $incdec_ptr63;
    label = 21;
    break;
   case 20:
    $cmp65 = ($m_147 | 0) < 0;
    $cmp67 = $sub58 < 1.1920928955078125e-7;
    $or_cond = $cmp65 & $cmp67;
    if ($or_cond) {
      $c_2 = $incdec_ptr56;
      label = 22;
      break;
    } else {
      $c_1_be = $incdec_ptr56;
      label = 21;
      break;
    }
   case 21:
    $cmp47 = ($max_digit_addr_049 | 0) > 0;
    if ($cmp47) {
      $n_146 = $sub58;
      $m_147 = $dec59;
      $c_148 = $c_1_be;
      $max_digit_addr_049 = $dec;
      label = 18;
      break;
    } else {
      $c_2 = $c_1_be;
      label = 22;
      break;
    }
   case 22:
    $tobool = ($e_0_ph | 0) == 0;
    if ($tobool) {
      $c_3 = $c_2;
      label = 26;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $incdec_ptr73 = $c_2 + 1 | 0;
    HEAP8[$c_2] = 101;
    $cmp74 = ($conv | 0) > 0;
    $incdec_ptr77 = $c_2 + 2 | 0;
    $_ = $cmp74 ? 43 : 45;
    $conv_sub31 = $cmp74 ? $conv : $sub31;
    HEAP8[$incdec_ptr73] = $_;
    $cmp82 = ($conv_sub31 | 0) > 99;
    if ($cmp82) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    $call85 = _mrb_class_get($mrb, 110572) | 0;
    _mrb_raise($mrb, $call85, 94408);
    label = 25;
    break;
   case 25:
    $div87 = ($conv_sub31 | 0) / 10 & -1;
    $add88 = $div87 + 48 | 0;
    $conv89 = $add88 & 255;
    $incdec_ptr90 = $c_2 + 3 | 0;
    HEAP8[$incdec_ptr77] = $conv89;
    $rem = ($conv_sub31 | 0) % 10;
    $add91 = $rem + 48 | 0;
    $conv92 = $add91 & 255;
    $incdec_ptr93 = $c_2 + 4 | 0;
    HEAP8[$incdec_ptr90] = $conv92;
    $c_3 = $incdec_ptr93;
    label = 26;
    break;
   case 26:
    HEAP8[$c_3] = 0;
    $sub_ptr_lhs_cast = $c_3;
    $sub_ptr_rhs_cast = $s;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    _mrb_str_new($result, $mrb, $arrayidx, $sub_ptr_sub);
    label = 27;
    break;
   case 27:
    $4 = $agg_result;
    $5 = $result;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_fixnum_mul($agg_result, $mrb, $x, $y) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  $y = $y | 0;
  var $i = 0, $0 = 0, $cmp = 0, $1 = 0, $2 = 0, $tt = 0, $3 = 0, $cmp1 = 0, $i4 = 0, $4 = 0, $_off = 0, $5 = 0, $_off16 = 0, $6 = 0, $mul = 0, $mul13 = 0, $conv22 = 0.0, $call = 0.0, $mul23 = 0.0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $y;
  $y = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$y >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$y + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$y + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $i = $x;
    $0 = HEAP32[$i >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $1 = $agg_result;
    $2 = $x;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    label = 10;
    break;
   case 4:
    $tt = $y + 8 | 0;
    $3 = HEAP32[$tt >> 2] | 0;
    $cmp1 = ($3 | 0) == 3;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 9;
      break;
    }
   case 5:
    $i4 = $y;
    $4 = HEAP32[$i4 >> 2] | 0;
    $_off = $0 + 32768 | 0;
    $5 = $_off >>> 0 < 65536;
    if ($5) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    $_off16 = $4 + 32768 | 0;
    $6 = $_off16 >>> 0 < 65536;
    if ($6) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $mul = Math_imul($4, $0);
    _mrb_fixnum_value1216($agg_result, $mul);
    label = 10;
    break;
   case 8:
    $mul13 = Math_imul($4, $0);
    _mrb_fixnum_value1216($agg_result, $mul13);
    label = 10;
    break;
   case 9:
    $conv22 = +($0 | 0);
    $call = +_mrb_to_flo($mrb, $y);
    $mul23 = $conv22 * $call;
    _mrb_float_value1215($agg_result, $mul23);
    label = 10;
    break;
   case 10:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_flo_to_fixnum($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $tt = 0, $0 = 0, $cmp = 0, $call = 0, $f = 0, $1 = 0.0, $call1 = 0, $cmp2 = 0, $call4 = 0, $cmp5 = 0, $cond = 0, $call6 = 0, $cmp7 = 0, $call9 = 0, $conv = 0, $z_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $x + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 6;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 106304) | 0;
    _mrb_raise($mrb, $call, 102872);
    $z_0 = 0;
    label = 9;
    break;
   case 4:
    $f = $x | 0;
    $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $call1 = ___fpclassifyf(+$1) | 0;
    $cmp2 = ($call1 | 0) == 1;
    if ($cmp2) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $call4 = _mrb_class_get($mrb, 93512) | 0;
    $cmp5 = $1 < 0.0;
    $cond = $cmp5 ? 92820 : 111484;
    _mrb_raise($mrb, $call4, $cond);
    label = 6;
    break;
   case 6:
    $call6 = ___fpclassifyf(+$1) | 0;
    $cmp7 = ($call6 | 0) == 0;
    if ($cmp7) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $call9 = _mrb_class_get($mrb, 93512) | 0;
    _mrb_raise($mrb, $call9, 100144);
    label = 8;
    break;
   case 8:
    $conv = ~~$1;
    $z_0 = $conv;
    label = 9;
    break;
   case 9:
    _mrb_fixnum_value1216($agg_result, $z_0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_fixnum_plus($agg_result, $mrb, $x, $y) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  $y = $y | 0;
  var $i = 0, $0 = 0, $cmp = 0, $1 = 0, $2 = 0, $tt = 0, $3 = 0, $cmp1 = 0, $i4 = 0, $4 = 0, $add = 0, $_lobit10 = 0, $cmp8 = 0, $_lobit = 0, $add_lobit = 0, $cmp14 = 0, $conv17 = 0.0, $conv18 = 0.0, $add19 = 0.0, $conv22 = 0.0, $call = 0.0, $add23 = 0.0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $y;
  $y = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$y >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$y + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$y + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $i = $x;
    $0 = HEAP32[$i >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $1 = $agg_result;
    $2 = $y;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    label = 10;
    break;
   case 4:
    $tt = $y + 8 | 0;
    $3 = HEAP32[$tt >> 2] | 0;
    $cmp1 = ($3 | 0) == 3;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 9;
      break;
    }
   case 5:
    $i4 = $y;
    $4 = HEAP32[$i4 >> 2] | 0;
    $add = $4 + $0 | 0;
    $_lobit10 = $4 ^ $0;
    $cmp8 = ($_lobit10 | 0) > -1;
    if ($cmp8) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    $_lobit = $0 >>> 31;
    $add_lobit = $add >>> 31;
    $cmp14 = ($_lobit | 0) == ($add_lobit | 0);
    if ($cmp14) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $conv17 = +($0 | 0);
    $conv18 = +($4 | 0);
    $add19 = $conv17 + $conv18;
    _mrb_float_value1215($agg_result, $add19);
    label = 10;
    break;
   case 8:
    _mrb_fixnum_value1216($agg_result, $add);
    label = 10;
    break;
   case 9:
    $conv22 = +($0 | 0);
    $call = +_mrb_to_flo($mrb, $y);
    $add23 = $conv22 + $call;
    _mrb_float_value1215($agg_result, $add23);
    label = 10;
    break;
   case 10:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_fixnum_minus($agg_result, $mrb, $x, $y) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  $y = $y | 0;
  var $i = 0, $0 = 0, $tt = 0, $1 = 0, $cmp = 0, $i2 = 0, $2 = 0, $sub = 0, $_lobit9 = 0, $cmp6 = 0, $_lobit = 0, $sub_lobit = 0, $cmp12 = 0, $conv15 = 0.0, $conv16 = 0.0, $sub17 = 0.0, $conv19 = 0.0, $call = 0.0, $sub20 = 0.0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $y;
  $y = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$y >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$y + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$y + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $i = $x;
    $0 = HEAP32[$i >> 2] | 0;
    $tt = $y + 8 | 0;
    $1 = HEAP32[$tt >> 2] | 0;
    $cmp = ($1 | 0) == 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    $i2 = $y;
    $2 = HEAP32[$i2 >> 2] | 0;
    $sub = $0 - $2 | 0;
    $_lobit9 = $2 ^ $0;
    $cmp6 = ($_lobit9 | 0) < 0;
    if ($cmp6) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $_lobit = $0 >>> 31;
    $sub_lobit = $sub >>> 31;
    $cmp12 = ($_lobit | 0) == ($sub_lobit | 0);
    if ($cmp12) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $conv15 = +($0 | 0);
    $conv16 = +($2 | 0);
    $sub17 = $conv15 - $conv16;
    _mrb_float_value1215($agg_result, $sub17);
    label = 8;
    break;
   case 6:
    _mrb_fixnum_value1216($agg_result, $sub);
    label = 8;
    break;
   case 7:
    $conv19 = +($0 | 0);
    $call = +_mrb_to_flo($mrb, $y);
    $sub20 = $conv19 - $call;
    _mrb_float_value1215($agg_result, $sub20);
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_fixnum_to_str($agg_result, $mrb, $x, $base) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  $base = $base | 0;
  var $buf = 0, $agg_tmp = 0, $add_ptr = 0, $i = 0, $0 = 0, $base_off = 0, $1 = 0, $call = 0, $cmp2 = 0, $incdec_ptr = 0, $cmp4 = 0, $b_0 = 0, $val_0 = 0, $rem = 0, $sub = 0, $arrayidx = 0, $2 = 0, $incdec_ptr6 = 0, $div = 0, $tobool = 0, $incdec_ptr7 = 0, $b_1 = 0, $val_1 = 0, $rem10 = 0, $arrayidx11 = 0, $3 = 0, $incdec_ptr12 = 0, $div14 = 0, $tobool15 = 0, $b_2 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $buf = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 36 | 0;
    $add_ptr = $buf + 33 | 0;
    $i = $x;
    $0 = HEAP32[$i >> 2] | 0;
    $base_off = $base - 2 | 0;
    $1 = $base_off >>> 0 > 34;
    if ($1) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 110984) | 0;
    _mrb_fixnum_value1216($agg_tmp, $base);
    _mrb_raisef($mrb, $call, 110248, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    label = 4;
    break;
   case 4:
    $cmp2 = ($0 | 0) == 0;
    if ($cmp2) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $incdec_ptr = $buf + 32 | 0;
    HEAP8[$incdec_ptr] = 48;
    $b_2 = $incdec_ptr;
    label = 10;
    break;
   case 6:
    $cmp4 = ($0 | 0) < 0;
    if ($cmp4) {
      $val_0 = $0;
      $b_0 = $add_ptr;
      label = 7;
      break;
    } else {
      $val_1 = $0;
      $b_1 = $add_ptr;
      label = 9;
      break;
    }
   case 7:
    $rem = ($val_0 | 0) % ($base | 0);
    $sub = -$rem | 0;
    $arrayidx = $sub + 78888 | 0;
    $2 = HEAP8[$arrayidx] | 0;
    $incdec_ptr6 = $b_0 - 1 | 0;
    HEAP8[$incdec_ptr6] = $2;
    $div = ($val_0 | 0) / ($base | 0) & -1;
    $tobool = ($div | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      $val_0 = $div;
      $b_0 = $incdec_ptr6;
      label = 7;
      break;
    }
   case 8:
    $incdec_ptr7 = $b_0 - 2 | 0;
    HEAP8[$incdec_ptr7] = 45;
    $b_2 = $incdec_ptr7;
    label = 10;
    break;
   case 9:
    $rem10 = ($val_1 | 0) % ($base | 0);
    $arrayidx11 = $rem10 + 78888 | 0;
    $3 = HEAP8[$arrayidx11] | 0;
    $incdec_ptr12 = $b_1 - 1 | 0;
    HEAP8[$incdec_ptr12] = $3;
    $div14 = ($val_1 | 0) / ($base | 0) & -1;
    $tobool15 = ($div14 | 0) == 0;
    if ($tobool15) {
      $b_2 = $incdec_ptr12;
      label = 10;
      break;
    } else {
      $val_1 = $div14;
      $b_1 = $incdec_ptr12;
      label = 9;
      break;
    }
   case 10:
    $sub_ptr_lhs_cast = $add_ptr;
    $sub_ptr_rhs_cast = $b_2;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    _mrb_str_new($agg_result, $mrb, $b_2, $sub_ptr_sub);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_init_numeric($mrb) {
  $mrb = $mrb | 0;
  var $call = 0, $call2 = 0, $call3 = 0, $call4 = 0;
  $call = _mrb_define_class($mrb, 109812, HEAP32[$mrb + 44 >> 2] | 0) | 0;
  _mrb_include_module($mrb, $call, _mrb_class_get($mrb, 109264) | 0);
  _mrb_define_method($mrb, $call, 108812, 78, 0);
  _mrb_define_method($mrb, $call, 108448, 598, 0);
  _mrb_define_method($mrb, $call, 108152, 66, 0);
  _mrb_define_method($mrb, $call, 107704, 498, 0);
  _mrb_define_method($mrb, $call, 107232, 498, 0);
  _mrb_define_method($mrb, $call, 106700, 88, 0);
  _mrb_define_method($mrb, $call, 106384, 376, 0);
  $call2 = _mrb_define_class($mrb, 105852, $call) | 0;
  _mrb_undef_class_method($mrb, $call2, 105564);
  _mrb_define_method($mrb, $call2, 105196, 532, 0);
  _mrb_define_method($mrb, $call2, 104736, 532, 0);
  $call3 = _mrb_define_class($mrb, 104348, $call2) | 0;
  HEAP32[$mrb + 76 >> 2] = $call3;
  _mrb_undef_class_method($mrb, $call3, 105564);
  _mrb_define_method($mrb, $call3, 104028, 800, 0);
  _mrb_define_method($mrb, $call3, 103776, 466, 0);
  _mrb_define_method($mrb, $call3, 108448, 426, 0);
  _mrb_define_method($mrb, $call3, 103452, 26, 0);
  _mrb_define_method($mrb, $call3, 103172, 294, 0);
  _mrb_define_method($mrb, $call3, 102904, 382, 0);
  _mrb_define_method($mrb, $call3, 102380, 158, 0);
  _mrb_define_method($mrb, $call3, 102136, 48, 0);
  _mrb_define_method($mrb, $call3, 101924, 248, 0);
  _mrb_define_method($mrb, $call3, 101712, 384, 0);
  _mrb_define_method($mrb, $call3, 101512, 724, 0);
  _mrb_define_method($mrb, $call3, 101228, 700, 0);
  _mrb_define_method($mrb, $call3, 101056, 142, 0);
  _mrb_define_method($mrb, $call3, 100728, 332, 0);
  _mrb_define_method($mrb, $call3, 100420, 636, 0);
  _mrb_define_method($mrb, $call3, 100168, 782, 0);
  _mrb_define_method($mrb, $call3, 99716, 478, 0);
  _mrb_define_method($mrb, $call3, 99400, 464, 0);
  _mrb_define_method($mrb, $call3, 99136, 464, 0);
  _mrb_define_method($mrb, $call3, 98876, 450, 0);
  $call4 = _mrb_define_class($mrb, 98676, $call) | 0;
  HEAP32[$mrb + 72 >> 2] = $call4;
  _mrb_undef_class_method($mrb, $call4, 105564);
  _mrb_define_method($mrb, $call4, 104028, 250, 0);
  _mrb_define_method($mrb, $call4, 103776, 624, 0);
  _mrb_define_method($mrb, $call4, 103452, 40, 0);
  _mrb_define_method($mrb, $call4, 103172, 750, 0);
  _mrb_define_method($mrb, $call4, 102904, 194, 0);
  _mrb_define_method($mrb, $call4, 98524, 718, 0);
  _mrb_define_method($mrb, $call4, 98312, 586, 0);
  _mrb_define_method($mrb, $call4, 98128, 580, 0);
  _mrb_define_method($mrb, $call4, 97872, 280, 0);
  _mrb_define_method($mrb, $call4, 97600, 678, 0);
  _mrb_define_method($mrb, $call4, 99716, 656, 0);
  _mrb_define_method($mrb, $call4, 105196, 686, 0);
  _mrb_define_method($mrb, $call4, 104736, 686, 0);
  _mrb_define_method($mrb, $call4, 97108, 686, 0);
  _mrb_define_method($mrb, $call4, 99400, 660, 0);
  _mrb_define_method($mrb, $call4, 99136, 660, 0);
  return;
}
function _num_uplus($agg_result, $mrb, $num) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $num = $num | 0;
  var $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $num;
  $num = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$num >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$num + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$num + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $0 = $agg_result;
  $1 = $num;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _num_uminus($agg_result, $mrb, $num) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $num = $num | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $num;
  $num = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$num >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$num + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$num + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_float_value1215($agg_result, 0.0 - +_mrb_to_flo($mrb, $num));
  STACKTOP = __stackBase__;
  return;
}
function _num_pow($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $y = 0, $call = 0, $tt = 0, $0 = 0, $cmp = 0, $tt1 = 0, $1 = 0, $cmp2 = 0, $both_int_0 = 0, $call3 = 0.0, $call4 = 0.0, $2 = 0.0, $cmp6 = 0, $cmp8 = 0, $or_cond = 0, $conv = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $y = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 96604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $y, tempInt) | 0) | 0;
    $tt = $x + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $both_int_0 = 0;
      label = 4;
      break;
    }
   case 3:
    $tt1 = $y + 8 | 0;
    $1 = HEAP32[$tt1 >> 2] | 0;
    $cmp2 = ($1 | 0) == 3;
    $both_int_0 = $cmp2;
    label = 4;
    break;
   case 4:
    $call3 = +_mrb_to_flo($mrb, $x);
    $call4 = +_mrb_to_flo($mrb, $y);
    $2 = +Math_pow(+$call3, +$call4);
    if ($both_int_0) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    $cmp6 = $2 <= 2147483647.0;
    $cmp8 = $2 >= -2147483648.0;
    $or_cond = $cmp6 & $cmp8;
    if ($or_cond) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $conv = ~~$2;
    _mrb_fixnum_value1216($agg_result, $conv);
    label = 8;
    break;
   case 7:
    _mrb_float_value1215($agg_result, $2);
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return;
  }
}
function _num_div($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $y = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $y = __stackBase__ | 0;
  _mrb_get_args($mrb, 96172, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $y, tempInt) | 0);
  $call1 = +_mrb_to_flo($mrb, $x);
  _mrb_float_value1215($agg_result, $call1 / (HEAP32[tempDoublePtr >> 2] = HEAP32[$y >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$y + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  STACKTOP = __stackBase__;
  return;
}
function _num_abs($agg_result, $mrb, $num) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $num = $num | 0;
  var $call = 0.0, $cmp = 0, $0 = 0, $1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $num;
  $num = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$num >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$num + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$num + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = +_mrb_to_flo($mrb, $num);
    $cmp = $call < 0.0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _num_uminus($agg_result, $mrb, $num);
    label = 5;
    break;
   case 4:
    $0 = $agg_result;
    $1 = $num;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _num_cmp($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $other = 0, $call = 0, $call1 = 0.0, $tt = 0, $0 = 0, $i = 0, $1 = 0, $conv = 0.0, $f = 0, $2 = 0.0, $y_0 = 0.0, $cmp = 0, $cmp5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $other = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 96604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $other, tempInt) | 0) | 0;
    $call1 = +_mrb_to_flo($mrb, $self);
    $tt = $other + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    if (($0 | 0) == 3) {
      label = 3;
      break;
    } else if (($0 | 0) == 6) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $i = $other;
    $1 = HEAP32[$i >> 2] | 0;
    $conv = +($1 | 0);
    $y_0 = $conv;
    label = 6;
    break;
   case 4:
    $f = $other | 0;
    $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $y_0 = $2;
    label = 6;
    break;
   case 5:
    _mrb_nil_value1221($agg_result);
    label = 11;
    break;
   case 6:
    $cmp = $call1 > $y_0;
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _mrb_fixnum_value1216($agg_result, 1);
    label = 11;
    break;
   case 8:
    $cmp5 = $call1 < $y_0;
    if ($cmp5) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _mrb_fixnum_value1216($agg_result, -1);
    label = 11;
    break;
   case 10:
    _mrb_fixnum_value1216($agg_result, 0);
    label = 11;
    break;
   case 11:
    STACKTOP = __stackBase__;
    return;
  }
}
function _int_to_i($agg_result, $mrb, $num) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $num = $num | 0;
  var $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $num;
  $num = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$num >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$num + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$num + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $0 = $agg_result;
  $1 = $num;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _fix_plus($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $other = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $other = __stackBase__ | 0;
  _mrb_get_args($mrb, 96604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $other, tempInt) | 0);
  _mrb_fixnum_plus($agg_result, $mrb, $self, $other);
  STACKTOP = __stackBase__;
  return;
}
function _fix_minus($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $other = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $other = __stackBase__ | 0;
  _mrb_get_args($mrb, 96604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $other, tempInt) | 0);
  _mrb_fixnum_minus($agg_result, $mrb, $self, $other);
  STACKTOP = __stackBase__;
  return;
}
function _fix_uminus($agg_result, $mrb, $num) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $num = $num | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $num;
  $num = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$num >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$num + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$num + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_fixnum_value1216($agg_result, -(HEAP32[$num >> 2] | 0) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _fix_mul($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $y = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $y = __stackBase__ | 0;
  _mrb_get_args($mrb, 96604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $y, tempInt) | 0);
  _mrb_fixnum_mul($agg_result, $mrb, $x, $y);
  STACKTOP = __stackBase__;
  return;
}
function _fix_mod($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $y = 0, $mod = 0, $mod11 = 0, $call = 0, $i = 0, $0 = 0, $tt = 0, $1 = 0, $cmp = 0, $i2 = 0, $2 = 0, $cmp3 = 0, $3 = 0, $conv = 0.0, $call12 = 0.0, $4 = 0.0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $y = __stackBase__ | 0;
    $mod = __stackBase__ + 12 | 0;
    $mod11 = __stackBase__ + 16 | 0;
    $call = _mrb_get_args($mrb, 96604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $y, tempInt) | 0) | 0;
    $i = $x;
    $0 = HEAP32[$i >> 2] | 0;
    $tt = $y + 8 | 0;
    $1 = HEAP32[$tt >> 2] | 0;
    $cmp = ($1 | 0) == 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $i2 = $y;
    $2 = HEAP32[$i2 >> 2] | 0;
    $cmp3 = ($2 | 0) == 0;
    if ($cmp3) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _fixdivmod($0, $2, 0, $mod);
    $3 = HEAP32[$mod >> 2] | 0;
    _mrb_fixnum_value1216($agg_result, $3);
    label = 6;
    break;
   case 5:
    $conv = +($0 | 0);
    $call12 = +_mrb_to_flo($mrb, $y);
    _flodivmod($conv, $call12, 0, $mod11);
    $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$mod11 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$mod11 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    _mrb_float_value1215($agg_result, $4);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _fix_equal($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $y = 0, $call = 0, $call1 = 0, $tobool = 0, $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $conv = 0.0, $f = 0, $2 = 0.0, $cmp3 = 0, $3 = 0, $conv5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $y = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 96604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $y, tempInt) | 0) | 0;
    $call1 = _mrb_obj_equal(0, $x, $y) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $3 = 1;
      label = 5;
      break;
    }
   case 3:
    $tt = $y + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 6;
    if ($cmp) {
      label = 4;
      break;
    } else {
      $3 = 0;
      label = 5;
      break;
    }
   case 4:
    $i = $x;
    $1 = HEAP32[$i >> 2] | 0;
    $conv = +($1 | 0);
    $f = $y | 0;
    $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $cmp3 = $conv == $2;
    $3 = $cmp3;
    label = 5;
    break;
   case 5:
    $conv5 = $3 & 1;
    _mrb_bool_value1222($agg_result, $conv5);
    STACKTOP = __stackBase__;
    return;
  }
}
function _fix_rev($agg_result, $mrb, $num) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $num = $num | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $num;
  $num = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$num >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$num + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$num + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_fixnum_value1216($agg_result, HEAP32[$num >> 2] ^ -1);
  STACKTOP = __stackBase__;
  return;
}
function _fix_and($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $y = 0, $tmp = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $y = __stackBase__ | 0;
  $tmp = __stackBase__ + 12 | 0;
  _mrb_get_args($mrb, 96604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $y, tempInt) | 0);
  _bit_coerce($tmp, $mrb, $y);
  $0 = $y;
  $1 = $tmp;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  _mrb_fixnum_value1216($agg_result, HEAP32[$y >> 2] & HEAP32[$x >> 2]);
  STACKTOP = __stackBase__;
  return;
}
function _fix_or($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $y = 0, $tmp = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $y = __stackBase__ | 0;
  $tmp = __stackBase__ + 12 | 0;
  _mrb_get_args($mrb, 96604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $y, tempInt) | 0);
  _bit_coerce($tmp, $mrb, $y);
  $0 = $y;
  $1 = $tmp;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  _mrb_fixnum_value1216($agg_result, HEAP32[$y >> 2] | HEAP32[$x >> 2]);
  STACKTOP = __stackBase__;
  return;
}
function _fixdivmod($x, $y, $divp, $modp) {
  $x = $x | 0;
  $y = $y | 0;
  $divp = $divp | 0;
  $modp = $modp | 0;
  var $cmp = 0, $cmp1 = 0, $sub = 0, $sub3 = 0, $div4 = 0, $sub5 = 0, $div6 = 0, $sub7 = 0, $0 = 0, $sub182 = 0, $sub11 = 0, $div12 = 0, $sub13 = 0, $div15 = 0, $div_0 = 0, $mul = 0, $sub18 = 0, $cmp19 = 0, $cmp20 = 0, $or_cond = 0, $sub188 = 0, $div_06 = 0, $cmp21_not = 0, $cmp_not = 0, $brmerge = 0, $sub189 = 0, $div_07 = 0, $add = 0, $sub25 = 0, $div_1 = 0, $mod_0 = 0, $tobool = 0, $tobool29 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = ($y | 0) < 0;
    $cmp1 = ($x | 0) < 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $sub = -$x | 0;
    $sub3 = -$y | 0;
    $div4 = ($sub | 0) / ($sub3 | 0) & -1;
    $div_0 = $div4;
    label = 9;
    break;
   case 5:
    $sub5 = -$y | 0;
    $div6 = ($x | 0) / ($sub5 | 0) & -1;
    $sub7 = -$div6 | 0;
    $0 = Math_imul($div6, $y);
    $sub182 = $0 + $x | 0;
    $div_06 = $sub7;
    $sub188 = $sub182;
    label = 10;
    break;
   case 6:
    if ($cmp1) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $sub11 = -$x | 0;
    $div12 = ($sub11 | 0) / ($y | 0) & -1;
    $sub13 = -$div12 | 0;
    $div_0 = $sub13;
    label = 9;
    break;
   case 8:
    $div15 = ($x | 0) / ($y | 0) & -1;
    $div_0 = $div15;
    label = 9;
    break;
   case 9:
    $mul = Math_imul($div_0, $y);
    $sub18 = $x - $mul | 0;
    $cmp19 = ($sub18 | 0) < 0;
    $cmp20 = ($y | 0) > 0;
    $or_cond = $cmp19 & $cmp20;
    if ($or_cond) {
      $div_07 = $div_0;
      $sub189 = $sub18;
      label = 11;
      break;
    } else {
      $div_06 = $div_0;
      $sub188 = $sub18;
      label = 10;
      break;
    }
   case 10:
    $cmp21_not = ($sub188 | 0) < 1;
    $cmp_not = $cmp ^ 1;
    $brmerge = $cmp21_not | $cmp_not;
    if ($brmerge) {
      $mod_0 = $sub188;
      $div_1 = $div_06;
      label = 12;
      break;
    } else {
      $div_07 = $div_06;
      $sub189 = $sub188;
      label = 11;
      break;
    }
   case 11:
    $add = $sub189 + $y | 0;
    $sub25 = $div_07 - 1 | 0;
    $mod_0 = $add;
    $div_1 = $sub25;
    label = 12;
    break;
   case 12:
    $tobool = ($divp | 0) == 0;
    if ($tobool) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    HEAP32[$divp >> 2] = $div_1;
    label = 14;
    break;
   case 14:
    $tobool29 = ($modp | 0) == 0;
    if ($tobool29) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    HEAP32[$modp >> 2] = $mod_0;
    label = 16;
    break;
   case 16:
    return;
  }
}
function _mrb_nil_value1221($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_bool_value1222($agg_result, $boolean) {
  $agg_result = $agg_result | 0;
  $boolean = $boolean | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = $boolean << 24 >> 24 != 0 ? 2 : 0;
  return;
}
function _mrb_true_value1223($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = 2;
  return;
}
function _mrb_obj_eq($mrb, $v1, $v2) {
  $mrb = $mrb | 0;
  $v1 = $v1 | 0;
  $v2 = $v2 | 0;
  var $tt = 0, $0 = 0, $tt1 = 0, $1 = 0, $cmp = 0, $i = 0, $2 = 0, $i5 = 0, $3 = 0, $cmp6 = 0, $conv = 0, $sym = 0, $4 = 0, $sym11 = 0, $5 = 0, $cmp13 = 0, $conv14 = 0, $f = 0, $6 = 0.0, $f18 = 0, $7 = 0.0, $cmp19 = 0, $conv20 = 0, $p = 0, $8 = 0, $p23 = 0, $9 = 0, $cmp24 = 0, $conv25 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $v1;
  $v1 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v1 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v1 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v1 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $v2;
  $v2 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v2 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v2 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v2 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $v1 + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $tt1 = $v2 + 8 | 0;
    $1 = HEAP32[$tt1 >> 2] | 0;
    $cmp = ($0 | 0) == ($1 | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      $retval_0 = 0;
      label = 8;
      break;
    }
   case 3:
    if (($0 | 0) == 0 | ($0 | 0) == 3) {
      label = 4;
      break;
    } else if (($0 | 0) == 4) {
      label = 5;
      break;
    } else if (($0 | 0) == 6) {
      label = 6;
      break;
    } else if (($0 | 0) == 2) {
      $retval_0 = 1;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 4:
    $i = $v1;
    $2 = HEAP32[$i >> 2] | 0;
    $i5 = $v2;
    $3 = HEAP32[$i5 >> 2] | 0;
    $cmp6 = ($2 | 0) == ($3 | 0);
    $conv = $cmp6 & 1;
    $retval_0 = $conv;
    label = 8;
    break;
   case 5:
    $sym = $v1;
    $4 = HEAP16[$sym >> 1] | 0;
    $sym11 = $v2;
    $5 = HEAP16[$sym11 >> 1] | 0;
    $cmp13 = $4 << 16 >> 16 == $5 << 16 >> 16;
    $conv14 = $cmp13 & 1;
    $retval_0 = $conv14;
    label = 8;
    break;
   case 6:
    $f = $v1 | 0;
    $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $f18 = $v2 | 0;
    $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f18 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f18 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $cmp19 = $6 == $7;
    $conv20 = $cmp19 & 1;
    $retval_0 = $conv20;
    label = 8;
    break;
   case 7:
    $p = $v1;
    $8 = HEAP32[$p >> 2] | 0;
    $p23 = $v2;
    $9 = HEAP32[$p23 >> 2] | 0;
    $cmp24 = ($8 | 0) == ($9 | 0);
    $conv25 = $cmp24 & 1;
    $retval_0 = $conv25;
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _fix_xor($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $y = 0, $tmp = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $y = __stackBase__ | 0;
  $tmp = __stackBase__ + 12 | 0;
  _mrb_get_args($mrb, 96604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $y, tempInt) | 0);
  _bit_coerce($tmp, $mrb, $y);
  $0 = $y;
  $1 = $tmp;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  _mrb_fixnum_value1216($agg_result, HEAP32[$y >> 2] ^ HEAP32[$x >> 2]);
  STACKTOP = __stackBase__;
  return;
}
function _fix_lshift($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $width = 0, $result = 0, $0 = 0, $cmp = 0, $1 = 0, $2 = 0, $i = 0, $3 = 0, $cmp1 = 0, $sub = 0, $4 = 0, $5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $width = __stackBase__ | 0;
    $result = __stackBase__ + 4 | 0;
    _fix_shift_get_width($mrb, $width);
    $0 = HEAP32[$width >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $1 = $result;
    $2 = $x;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    label = 7;
    break;
   case 4:
    $i = $x;
    $3 = HEAP32[$i >> 2] | 0;
    $cmp1 = ($0 | 0) < 0;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $sub = -$0 | 0;
    _rshift($result, $3, $sub);
    label = 7;
    break;
   case 6:
    _lshift($result, $mrb, $3, $0);
    label = 7;
    break;
   case 7:
    $4 = $agg_result;
    $5 = $result;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _fix_rshift($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $width = 0, $result = 0, $0 = 0, $cmp = 0, $1 = 0, $2 = 0, $i = 0, $3 = 0, $cmp1 = 0, $sub = 0, $4 = 0, $5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $width = __stackBase__ | 0;
    $result = __stackBase__ + 4 | 0;
    _fix_shift_get_width($mrb, $width);
    $0 = HEAP32[$width >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $1 = $result;
    $2 = $x;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    label = 7;
    break;
   case 4:
    $i = $x;
    $3 = HEAP32[$i >> 2] | 0;
    $cmp1 = ($0 | 0) < 0;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $sub = -$0 | 0;
    _lshift($result, $mrb, $3, $sub);
    label = 7;
    break;
   case 6:
    _rshift($result, $3, $0);
    label = 7;
    break;
   case 7:
    $4 = $agg_result;
    $5 = $result;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _num_eql($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $y = 0, $call = 0, $tt = 0, $0 = 0, $tt1 = 0, $1 = 0, $cmp = 0, $call2 = 0, $conv = 0, $eql_p_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $y = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 96604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $y, tempInt) | 0) | 0;
    $tt = $x + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $tt1 = $y + 8 | 0;
    $1 = HEAP32[$tt1 >> 2] | 0;
    $cmp = ($0 | 0) == ($1 | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      $eql_p_0 = 0;
      label = 4;
      break;
    }
   case 3:
    $call2 = _mrb_equal($mrb, $x, $y) | 0;
    $conv = $call2 & 255;
    $eql_p_0 = $conv;
    label = 4;
    break;
   case 4:
    _mrb_bool_value1222($agg_result, $eql_p_0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _flo_hash($agg_result, $mrb, $num) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $num = $num | 0;
  var $d = 0, $conv = 0.0, $1 = 0, $xor_7 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $num;
  $num = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$num >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$num + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$num + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $d = __stackBase__ | 0;
  $conv = +(HEAP32[$num >> 2] | 0);
  HEAPF64[tempDoublePtr >> 3] = $conv, HEAP32[$d >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$d + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  $1 = $d;
  $xor_7 = (HEAPU8[$1 + 7 | 0] | 0) ^ ((HEAPU8[$1 + 6 | 0] | 0) ^ ((HEAPU8[$1 + 5 | 0] | 0) ^ ((HEAPU8[$1 + 4 | 0] | 0) ^ ((HEAPU8[$1 + 3 | 0] | 0) ^ ((HEAPU8[$1 + 2 | 0] | 0) ^ ((HEAPU8[$1 + 1 | 0] | 0) ^ (HEAPU8[$1] | 0) * 971 & -1) * 971 & -1) * 971 & -1) * 971 & -1) * 971 & -1) * 971 & -1) * 971 & -1;
  _mrb_fixnum_value1216($agg_result, ($xor_7 | 0) < 0 ? -$xor_7 | 0 : $xor_7);
  STACKTOP = __stackBase__;
  return;
}
function _int_succ($agg_result, $mrb, $num) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $num = $num | 0;
  var $agg_tmp = 0, $tt = 0, $0 = 0, $cmp = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $num;
  $num = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$num >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$num + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$num + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $tt = $num + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _fix_succ($agg_result, $mrb, $num);
    label = 5;
    break;
   case 4:
    _mrb_fixnum_value1216($agg_tmp, 1);
    _mrb_funcall($agg_result, $mrb, $num, 104028, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _fix_succ($agg_result, $mrb, $num) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $num = $num | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $num;
  $num = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$num >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$num + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$num + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_fixnum_value1216($agg_result, (HEAP32[$num >> 2] | 0) + 1 | 0);
  STACKTOP = __stackBase__;
  return;
}
function _fix_to_f($agg_result, $mrb, $num) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $num = $num | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $num;
  $num = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$num >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$num + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$num + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_float_value1215($agg_result, +(HEAP32[$num >> 2] | 0));
  STACKTOP = __stackBase__;
  return;
}
function _fix_to_s($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $base = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $base = __stackBase__ | 0;
  HEAP32[$base >> 2] = 10;
  _mrb_get_args($mrb, 96868, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $base, tempInt) | 0);
  _mrb_fixnum_to_str($agg_result, $mrb, $self, HEAP32[$base >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _fix_divmod($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $y = 0, $div = 0, $mod = 0, $agg_tmp = 0, $agg_tmp4 = 0, $agg_tmp10 = 0, $agg_tmp11 = 0, $div12 = 0, $mod13 = 0, $a = 0, $b = 0, $call = 0, $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $cmp1 = 0, $call3 = 0.0, $call5 = 0.0, $i7 = 0, $2 = 0, $3 = 0, $4 = 0, $i15 = 0, $5 = 0, $conv = 0.0, $call16 = 0.0, $6 = 0.0, $conv17 = 0, $conv18 = 0.0, $7 = 0.0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 108 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $y = __stackBase__ | 0;
    $div = __stackBase__ + 12 | 0;
    $mod = __stackBase__ + 16 | 0;
    $agg_tmp = __stackBase__ + 20 | 0;
    $agg_tmp4 = __stackBase__ + 32 | 0;
    $agg_tmp10 = __stackBase__ + 44 | 0;
    $agg_tmp11 = __stackBase__ + 56 | 0;
    $div12 = __stackBase__ + 68 | 0;
    $mod13 = __stackBase__ + 76 | 0;
    $a = __stackBase__ + 84 | 0;
    $b = __stackBase__ + 96 | 0;
    $call = _mrb_get_args($mrb, 96604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $y, tempInt) | 0) | 0;
    $tt = $y + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $i = $y;
    $1 = HEAP32[$i >> 2] | 0;
    $cmp1 = ($1 | 0) == 0;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $call3 = +_strtod(95484, 0);
    _mrb_float_value1215($agg_tmp, $call3);
    $call5 = +_strtod(96356, 0);
    _mrb_float_value1215($agg_tmp4, $call5);
    _mrb_assoc_new($agg_result, $mrb, $agg_tmp, $agg_tmp4);
    label = 7;
    break;
   case 5:
    $i7 = $x;
    $2 = HEAP32[$i7 >> 2] | 0;
    _fixdivmod($2, $1, $div, $mod);
    $3 = HEAP32[$div >> 2] | 0;
    _mrb_fixnum_value1216($agg_tmp10, $3);
    $4 = HEAP32[$mod >> 2] | 0;
    _mrb_fixnum_value1216($agg_tmp11, $4);
    _mrb_assoc_new($agg_result, $mrb, $agg_tmp10, $agg_tmp11);
    label = 7;
    break;
   case 6:
    $i15 = $x;
    $5 = HEAP32[$i15 >> 2] | 0;
    $conv = +($5 | 0);
    $call16 = +_mrb_to_flo($mrb, $y);
    _flodivmod($conv, $call16, $div12, $mod13);
    $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$div12 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$div12 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $conv17 = ~~$6;
    $conv18 = +($conv17 | 0);
    _mrb_float_value1215($a, $conv18);
    $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$mod13 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$mod13 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    _mrb_float_value1215($b, $7);
    _mrb_assoc_new($agg_result, $mrb, $a, $b);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _flo_plus($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $y = 0, $f = 0, $0 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $y = __stackBase__ | 0;
  $f = $self | 0;
  $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  _mrb_get_args($mrb, 96172, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $y, tempInt) | 0);
  _mrb_float_value1215($agg_result, $0 + (HEAP32[tempDoublePtr >> 2] = HEAP32[$y >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$y + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  STACKTOP = __stackBase__;
  return;
}
function _flo_minus($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $y = 0, $f = 0, $0 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $y = __stackBase__ | 0;
  _mrb_get_args($mrb, 96604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $y, tempInt) | 0);
  $f = $x | 0;
  $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  _mrb_float_value1215($agg_result, $0 - +_mrb_to_flo($mrb, $y));
  STACKTOP = __stackBase__;
  return;
}
function _flo_mul($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $y = 0, $f = 0, $0 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $y = __stackBase__ | 0;
  _mrb_get_args($mrb, 96604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $y, tempInt) | 0);
  $f = $x | 0;
  $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  _mrb_float_value1215($agg_result, $0 * +_mrb_to_flo($mrb, $y));
  STACKTOP = __stackBase__;
  return;
}
function _flo_mod($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $y = 0, $mod = 0, $call1 = 0.0, $f = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $y = __stackBase__ | 0;
  $mod = __stackBase__ + 12 | 0;
  _mrb_get_args($mrb, 96604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $y, tempInt) | 0);
  $call1 = +_mrb_to_flo($mrb, $y);
  $f = $x | 0;
  _flodivmod((HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]), $call1, 0, $mod);
  _mrb_float_value1215($agg_result, (HEAP32[tempDoublePtr >> 2] = HEAP32[$mod >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$mod + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  STACKTOP = __stackBase__;
  return;
}
function _flo_eq($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $y = 0, $a = 0.0, $b = 0.0, $call = 0, $tt = 0, $0 = 0, $i = 0, $1 = 0, $conv = 0.0, $f = 0, $2 = 0.0, $f4 = 0, $3 = 0.0, $a_0_load3 = 0.0, $b_0_load2 = 0.0, $cmp = 0, $conv6 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $y = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 96604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $y, tempInt) | 0) | 0;
    $tt = $y + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    if (($0 | 0) == 3) {
      label = 3;
      break;
    } else if (($0 | 0) == 6) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $i = $y;
    $1 = HEAP32[$i >> 2] | 0;
    $conv = +($1 | 0);
    $b = $conv;
    label = 6;
    break;
   case 4:
    $f = $y | 0;
    $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $b = $2;
    label = 6;
    break;
   case 5:
    _num_equal($agg_result, $mrb, $x, $y);
    label = 7;
    break;
   case 6:
    $f4 = $x | 0;
    $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f4 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f4 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $a = $3;
    $a_0_load3 = $a;
    $b_0_load2 = $b;
    $cmp = $a_0_load3 == $b_0_load2;
    $conv6 = $cmp & 1;
    _mrb_bool_value1222($agg_result, $conv6);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _flo_ceil($agg_result, $mrb, $num) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $num = $num | 0;
  var $f1 = 0, $0 = 0.0, $call = 0.0, $cmp = 0, $cmp2 = 0, $or_cond = 0, $conv = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $num;
  $num = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$num >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$num + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$num + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $f1 = $num | 0;
    $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $call = +Math_ceil(+$0);
    $cmp = $call <= 2147483647.0;
    $cmp2 = $call >= -2147483648.0;
    $or_cond = $cmp & $cmp2;
    if ($or_cond) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_float_value1215($agg_result, $call);
    label = 5;
    break;
   case 4:
    $conv = ~~$call;
    _mrb_fixnum_value1216($agg_result, $conv);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _flo_finite_p($agg_result, $mrb, $num) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $num = $num | 0;
  var $f = 0, $0 = 0.0, $call = 0, $cmp = 0, $call2 = 0, $phitmp = 0, $1 = 0, $conv = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $num;
  $num = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$num >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$num + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$num + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $f = $num | 0;
    $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $call = ___fpclassifyf(+$0) | 0;
    $cmp = ($call | 0) == 1;
    if ($cmp) {
      $1 = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call2 = ___fpclassifyf(+$0) | 0;
    $phitmp = ($call2 | 0) != 0;
    $1 = $phitmp;
    label = 4;
    break;
   case 4:
    $conv = $1 & 1;
    _mrb_bool_value1222($agg_result, $conv);
    STACKTOP = __stackBase__;
    return;
  }
}
function _flo_floor($agg_result, $mrb, $num) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $num = $num | 0;
  var $f1 = 0, $0 = 0.0, $call = 0.0, $cmp = 0, $cmp2 = 0, $or_cond = 0, $conv = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $num;
  $num = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$num >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$num + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$num + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $f1 = $num | 0;
    $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $call = +Math_floor(+$0);
    $cmp = $call <= 2147483647.0;
    $cmp2 = $call >= -2147483648.0;
    $or_cond = $cmp & $cmp2;
    if ($or_cond) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_float_value1215($agg_result, $call);
    label = 5;
    break;
   case 4:
    $conv = ~~$call;
    _mrb_fixnum_value1216($agg_result, $conv);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _flo_infinite_p($agg_result, $mrb, $num) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $num = $num | 0;
  var $f = 0, $0 = 0.0, $call = 0, $cmp = 0, $cmp2 = 0, $cond = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $num;
  $num = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$num >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$num + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$num + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $f = $num | 0;
    $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $call = ___fpclassifyf(+$0) | 0;
    $cmp = ($call | 0) == 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $cmp2 = $0 < 0.0;
    $cond = $cmp2 ? -1 : 1;
    _mrb_fixnum_value1216($agg_result, $cond);
    label = 5;
    break;
   case 4:
    _mrb_nil_value1221($agg_result);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _flo_round($agg_result, $mrb, $num) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $num = $num | 0;
  var $ndigits = 0, $call = 0, $f1 = 0, $0 = 0.0, $1 = 0, $ispos = 0, $neg = 0, $call2 = 0, $cmp13 = 0, $i_015 = 0, $f_014 = 0.0, $dec = 0, $mul = 0.0, $cmp = 0, $f_0_lcssa = 0.0, $call3 = 0, $cmp4 = 0, $2 = 0, $cmp5 = 0, $_ = 0.0, $div = 0.0, $mul10 = 0.0, $number_0 = 0.0, $cmp12 = 0, $call14 = 0.0, $sub = 0.0, $cmp15 = 0, $conv = 0, $conv16 = 0.0, $add = 0.0, $cmp18 = 0, $call21 = 0.0, $sub22 = 0.0, $cmp23 = 0, $conv24 = 0, $conv25 = 0.0, $sub26 = 0.0, $number_1 = 0.0, $3 = 0, $cmp29 = 0, $mul32 = 0.0, $div34 = 0.0, $number_2 = 0.0, $4 = 0, $cmp37 = 0, $conv41 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $num;
  $num = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$num >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$num + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$num + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ndigits = __stackBase__ | 0;
    HEAP32[$ndigits >> 2] = 0;
    $call = _mrb_get_args($mrb, 96868, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $ndigits, tempInt) | 0) | 0;
    $f1 = $num | 0;
    $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $1 = HEAP32[$ndigits >> 2] | 0;
    $ispos = ($1 | 0) > -1;
    $neg = -$1 | 0;
    $call2 = $ispos ? $1 : $neg;
    $cmp13 = ($call2 | 0) > 0;
    if ($cmp13) {
      $f_014 = 1.0;
      $i_015 = $call2;
      label = 3;
      break;
    } else {
      $f_0_lcssa = 1.0;
      label = 4;
      break;
    }
   case 3:
    $dec = $i_015 - 1 | 0;
    $mul = $f_014 * 10.0;
    $cmp = ($dec | 0) > 0;
    if ($cmp) {
      $f_014 = $mul;
      $i_015 = $dec;
      label = 3;
      break;
    } else {
      $f_0_lcssa = $mul;
      label = 4;
      break;
    }
   case 4:
    $call3 = ___fpclassifyf(+$f_0_lcssa) | 0;
    $cmp4 = ($call3 | 0) == 1;
    $2 = HEAP32[$ndigits >> 2] | 0;
    $cmp5 = ($2 | 0) < 0;
    if ($cmp4) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $_ = $cmp5 ? 0.0 : $0;
    $number_2 = $_;
    label = 16;
    break;
   case 6:
    if ($cmp5) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $div = $0 / $f_0_lcssa;
    $number_0 = $div;
    label = 9;
    break;
   case 8:
    $mul10 = $0 * $f_0_lcssa;
    $number_0 = $mul10;
    label = 9;
    break;
   case 9:
    $cmp12 = $number_0 > 0.0;
    if ($cmp12) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $call14 = +Math_floor(+$number_0);
    $sub = $number_0 - $call14;
    $cmp15 = $sub >= .5;
    $conv = $cmp15 & 1;
    $conv16 = +($conv | 0);
    $add = $call14 + $conv16;
    $number_1 = $add;
    label = 13;
    break;
   case 11:
    $cmp18 = $number_0 < 0.0;
    if ($cmp18) {
      label = 12;
      break;
    } else {
      $number_1 = $number_0;
      label = 13;
      break;
    }
   case 12:
    $call21 = +Math_ceil(+$number_0);
    $sub22 = $call21 - $number_0;
    $cmp23 = $sub22 >= .5;
    $conv24 = $cmp23 & 1;
    $conv25 = +($conv24 | 0);
    $sub26 = $call21 - $conv25;
    $number_1 = $sub26;
    label = 13;
    break;
   case 13:
    $3 = HEAP32[$ndigits >> 2] | 0;
    $cmp29 = ($3 | 0) < 0;
    if ($cmp29) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $mul32 = $f_0_lcssa * $number_1;
    $number_2 = $mul32;
    label = 16;
    break;
   case 15:
    $div34 = $number_1 / $f_0_lcssa;
    $number_2 = $div34;
    label = 16;
    break;
   case 16:
    $4 = HEAP32[$ndigits >> 2] | 0;
    $cmp37 = ($4 | 0) > 0;
    if ($cmp37) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    _mrb_float_value1215($agg_result, $number_2);
    label = 19;
    break;
   case 18:
    $conv41 = ~~$number_2;
    _mrb_fixnum_value1216($agg_result, $conv41);
    label = 19;
    break;
   case 19:
    STACKTOP = __stackBase__;
    return;
  }
}
function _flo_to_f($agg_result, $mrb, $num) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $num = $num | 0;
  var $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $num;
  $num = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$num >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$num + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$num + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $0 = $agg_result;
  $1 = $num;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _flo_truncate($agg_result, $mrb, $num) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $num = $num | 0;
  var $f1 = 0, $0 = 0.0, $cmp = 0, $call = 0.0, $f_0 = 0.0, $cmp2 = 0, $call4 = 0.0, $f_1 = 0.0, $cmp6 = 0, $cmp7 = 0, $or_cond = 0, $conv = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $num;
  $num = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$num >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$num + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$num + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $f1 = $num | 0;
    $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $cmp = $0 > 0.0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $f_0 = $0;
      label = 4;
      break;
    }
   case 3:
    $call = +Math_floor(+$0);
    $f_0 = $call;
    label = 4;
    break;
   case 4:
    $cmp2 = $f_0 < 0.0;
    if ($cmp2) {
      label = 5;
      break;
    } else {
      $f_1 = $f_0;
      label = 6;
      break;
    }
   case 5:
    $call4 = +Math_ceil(+$f_0);
    $f_1 = $call4;
    label = 6;
    break;
   case 6:
    $cmp6 = $f_1 <= 2147483647.0;
    $cmp7 = $f_1 >= -2147483648.0;
    $or_cond = $cmp6 & $cmp7;
    if ($or_cond) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _mrb_float_value1215($agg_result, $f_1);
    label = 9;
    break;
   case 8:
    $conv = ~~$f_1;
    _mrb_fixnum_value1216($agg_result, $conv);
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _flo_to_s($agg_result, $mrb, $flt) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $flt = $flt | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $flt;
  $flt = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$flt >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$flt + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$flt + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_flo_to_str($agg_result, $mrb, $flt, 14);
  STACKTOP = __stackBase__;
  return;
}
function _num_equal($agg_result, $mrb, $x, $y) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  $y = $y | 0;
  var $call = 0, $tobool = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $y;
  $y = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$y >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$y + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$y + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_obj_equal(0, $x, $y) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_true_value1223($agg_result);
    label = 5;
    break;
   case 4:
    _mrb_funcall($agg_result, $mrb, $y, 102904, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$x + 8 >> 2] | 0, tempInt) | 0);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _flodivmod($x, $y, $divp, $modp) {
  $x = +$x;
  $y = +$y;
  $divp = $divp | 0;
  $modp = $modp | 0;
  var $cmp = 0, $call = 0.0, $call1 = 0.0, $call2 = 0.0, $call3 = 0, $cmp4 = 0, $call5 = 0, $cmp6 = 0, $call8 = 0, $cmp9 = 0, $sub = 0.0, $div12 = 0.0, $div_0 = 0.0, $mul = 0.0, $cmp13 = 0, $add = 0.0, $sub15 = 0.0, $div_1 = 0.0, $mod_0 = 0.0, $tobool = 0, $tobool20 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = $y == 0.0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = +_strtod(95484, 0);
    $call1 = +_strtod(96356, 0);
    $mod_0 = $call1;
    $div_1 = $call;
    label = 10;
    break;
   case 4:
    $call2 = +_fmod(+$x, +$y);
    $call3 = ___fpclassifyf(+$x) | 0;
    $cmp4 = ($call3 | 0) == 1;
    if ($cmp4) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    $call5 = ___fpclassifyf(+$y) | 0;
    $cmp6 = ($call5 | 0) == 1;
    if ($cmp6) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $call8 = ___fpclassifyf(+$y) | 0;
    $cmp9 = ($call8 | 0) == 0;
    if ($cmp9) {
      label = 7;
      break;
    } else {
      $div_0 = $x;
      label = 8;
      break;
    }
   case 7:
    $sub = $x - $call2;
    $div12 = $sub / $y;
    $div_0 = $div12;
    label = 8;
    break;
   case 8:
    $mul = $call2 * $y;
    $cmp13 = $mul < 0.0;
    if ($cmp13) {
      label = 9;
      break;
    } else {
      $mod_0 = $call2;
      $div_1 = $div_0;
      label = 10;
      break;
    }
   case 9:
    $add = $call2 + $y;
    $sub15 = $div_0 + -1.0;
    $mod_0 = $add;
    $div_1 = $sub15;
    label = 10;
    break;
   case 10:
    $tobool = ($modp | 0) == 0;
    if ($tobool) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    HEAPF64[tempDoublePtr >> 3] = $mod_0, HEAP32[$modp >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$modp + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 12;
    break;
   case 12:
    $tobool20 = ($divp | 0) == 0;
    if ($tobool20) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    HEAPF64[tempDoublePtr >> 3] = $div_1, HEAP32[$divp >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$divp + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 14;
    break;
   case 14:
    return;
  }
}
function _fix_shift_get_width($mrb, $width) {
  $mrb = $mrb | 0;
  $width = $width | 0;
  var $y = 0, $tmp = 0, $0 = 0, $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $y = __stackBase__ | 0;
  $tmp = __stackBase__ + 12 | 0;
  _mrb_get_args($mrb, 96604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $y, tempInt) | 0);
  _bit_coerce($tmp, $mrb, $y);
  $0 = $y;
  $1 = $tmp;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  HEAP32[$width >> 2] = HEAP32[$y >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _lshift($agg_result, $mrb, $val, $width) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $val = $val | 0;
  $width = $width | 0;
  var $agg_tmp = 0, $agg_tmp1 = 0, $cmp = 0, $call = 0, $shl = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $agg_tmp1 = __stackBase__ + 12 | 0;
    $cmp = $width >>> 0 > 31;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 110572) | 0;
    _mrb_fixnum_value1216($agg_tmp, $width);
    _mrb_fixnum_value1216($agg_tmp1, 31);
    _mrb_raisef($mrb, $call, 95920, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp1 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp1 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp1 + 8 >> 2] | 0, tempInt) | 0);
    label = 4;
    break;
   case 4:
    $shl = $val << $width;
    _mrb_fixnum_value1216($agg_result, $shl);
    STACKTOP = __stackBase__;
    return;
  }
}
function _rshift($agg_result, $val, $width) {
  $agg_result = $agg_result | 0;
  $val = $val | 0;
  $width = $width | 0;
  _mrb_fixnum_value1216($agg_result, $val >> ($width >>> 0 < 31 ? $width : 31));
  return;
}
function _bit_coerce($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $tmp = 0, $tt = 0, $0 = 0, $1 = 0, $2 = 0, $call = 0, $3 = 0, $4 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $tt = $x + 8 | 0;
    $0 = $x;
    $1 = $tmp;
    label = 3;
    break;
   case 3:
    $2 = HEAP32[$tt >> 2] | 0;
    if (($2 | 0) == 6) {
      label = 4;
      break;
    } else if (($2 | 0) == 3) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $call = _mrb_class_get($mrb, 106304) | 0;
    _mrb_raise($mrb, $call, 95780);
    label = 5;
    break;
   case 5:
    _mrb_to_int($tmp, $mrb, $x);
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 3;
    break;
   case 6:
    $3 = $agg_result;
    $4 = $x;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_obj_equal($mrb, $v1, $v2) {
  $mrb = $mrb | 0;
  $v1 = $v1 | 0;
  $v2 = $v2 | 0;
  var $call = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $v1;
  $v1 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v1 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v1 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v1 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $v2;
  $v2 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v2 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v2 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v2 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $call = _mrb_obj_eq(0, $v1, $v2) | 0;
  STACKTOP = __stackBase__;
  return $call | 0;
}
function _mrb_equal($mrb, $obj1, $obj2) {
  $mrb = $mrb | 0;
  $obj1 = $obj1 | 0;
  $obj2 = $obj2 | 0;
  var $tmp = 0, $call = 0, $tobool = 0, $result_sroa_1_8__idx1 = 0, $result_sroa_1_8_copyload = 0, $not_cmp = 0, $_ = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $obj1;
  $obj1 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj1 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj1 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj1 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $obj2;
  $obj2 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj2 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj2 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj2 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $call = _mrb_obj_eq(0, $obj1, $obj2) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $retval_0 = 1;
      label = 4;
      break;
    }
   case 3:
    _mrb_funcall($tmp, $mrb, $obj1, 109944, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$obj2 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$obj2 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$obj2 + 8 >> 2] | 0, tempInt) | 0);
    $result_sroa_1_8__idx1 = $tmp + 8 | 0;
    $result_sroa_1_8_copyload = HEAP32[$result_sroa_1_8__idx1 >> 2] | 0;
    $not_cmp = ($result_sroa_1_8_copyload | 0) != 0;
    $_ = $not_cmp & 1;
    $retval_0 = $_;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_init_object($mrb) {
  $mrb = $mrb | 0;
  var $object_class = 0, $call = 0, $call2 = 0, $call4 = 0;
  $object_class = $mrb + 44 | 0;
  $call = _mrb_define_class($mrb, 110780, HEAP32[$object_class >> 2] | 0) | 0;
  HEAP32[$mrb + 88 >> 2] = $call;
  _mrb_undef_class_method($mrb, $call, 106232);
  _mrb_define_method($mrb, $call, 102832, 780, 0);
  _mrb_define_method($mrb, $call, 100108, 350, 0);
  _mrb_define_method($mrb, $call, 97524, 796, 0);
  _mrb_define_method($mrb, $call, 95452, 618, 0);
  _mrb_define_method($mrb, $call, 94396, 594, 0);
  _mrb_define_method($mrb, $call, 93504, 84, 0);
  $call2 = _mrb_define_class($mrb, 92808, HEAP32[$object_class >> 2] | 0) | 0;
  HEAP32[$mrb + 80 >> 2] = $call2;
  _mrb_undef_class_method($mrb, $call2, 106232);
  _mrb_define_method($mrb, $call2, 102832, 784, 0);
  _mrb_define_method($mrb, $call2, 100108, 420, 0);
  _mrb_define_method($mrb, $call2, 94396, 692, 0);
  _mrb_define_method($mrb, $call2, 97524, 738, 0);
  _mrb_define_method($mrb, $call2, 93504, 692, 0);
  $call4 = _mrb_define_class($mrb, 111472, HEAP32[$object_class >> 2] | 0) | 0;
  HEAP32[$mrb + 84 >> 2] = $call4;
  _mrb_undef_class_method($mrb, $call4, 106232);
  _mrb_define_method($mrb, $call4, 102832, 780, 0);
  _mrb_define_method($mrb, $call4, 100108, 350, 0);
  _mrb_define_method($mrb, $call4, 94396, 228, 0);
  _mrb_define_method($mrb, $call4, 97524, 796, 0);
  _mrb_define_method($mrb, $call4, 93504, 228, 0);
  return;
}
function _false_and($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_get_args($mrb, 98308, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = __stackBase__ | 0, tempInt) | 0);
  _mrb_false_value1305($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _false_xor($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $obj2 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $obj2 = __stackBase__ | 0;
  _mrb_get_args($mrb, 98308, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $obj2, tempInt) | 0);
  _mrb_bool_value1304($agg_result, HEAP8[$obj2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _false_or($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $obj2 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $obj2 = __stackBase__ | 0;
  _mrb_get_args($mrb, 98308, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $obj2, tempInt) | 0);
  _mrb_bool_value1304($agg_result, HEAP8[$obj2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_true($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_true_value1303($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_nil_value1281($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_fixnum_value1288($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_class1294($mrb, $v) {
  $mrb = $mrb | 0;
  $v = $v | 0;
  var $tt = 0, $0 = 0, $i = 0, $1 = 0, $tobool = 0, $false_class = 0, $nil_class = 0, $true_class = 0, $symbol_class = 0, $fixnum_class = 0, $float_class = 0, $p = 0, $2 = 0, $c = 0, $3 = 0, $retval_0_in = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $v;
  $v = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$v >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$v + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$v + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $v + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    if (($0 | 0) == 0) {
      label = 3;
      break;
    } else if (($0 | 0) == 2) {
      label = 6;
      break;
    } else if (($0 | 0) == 4) {
      label = 7;
      break;
    } else if (($0 | 0) == 3) {
      label = 8;
      break;
    } else if (($0 | 0) == 6) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 3:
    $i = $v;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $false_class = $mrb + 84 | 0;
    $retval_0_in = $false_class;
    label = 11;
    break;
   case 5:
    $nil_class = $mrb + 88 | 0;
    $retval_0_in = $nil_class;
    label = 11;
    break;
   case 6:
    $true_class = $mrb + 80 | 0;
    $retval_0_in = $true_class;
    label = 11;
    break;
   case 7:
    $symbol_class = $mrb + 92 | 0;
    $retval_0_in = $symbol_class;
    label = 11;
    break;
   case 8:
    $fixnum_class = $mrb + 76 | 0;
    $retval_0_in = $fixnum_class;
    label = 11;
    break;
   case 9:
    $float_class = $mrb + 72 | 0;
    $retval_0_in = $float_class;
    label = 11;
    break;
   case 10:
    $p = $v;
    $2 = HEAP32[$p >> 2] | 0;
    $c = $2 + 4 | 0;
    $3 = $c;
    $retval_0_in = $3;
    label = 11;
    break;
   case 11:
    $retval_0 = HEAP32[$retval_0_in >> 2] | 0;
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_float_value1297($agg_result, $f) {
  $agg_result = $agg_result | 0;
  $f = +$f;
  var $v_sroa_0_0__idx = 0;
  $v_sroa_0_0__idx = $agg_result | 0;
  HEAPF64[tempDoublePtr >> 3] = $f, HEAP32[$v_sroa_0_0__idx >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$v_sroa_0_0__idx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  HEAP32[$agg_result + 8 >> 2] = 6;
  return;
}
function _mrb_true_value1303($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = 2;
  return;
}
function _mrb_bool_value1304($agg_result, $boolean) {
  $agg_result = $agg_result | 0;
  $boolean = $boolean | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = $boolean << 24 >> 24 != 0 ? 2 : 0;
  return;
}
function _mrb_false_value1305($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_obj_value1340($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_bool_value1341($agg_result, $boolean) {
  $agg_result = $agg_result | 0;
  $boolean = $boolean | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = $boolean << 24 >> 24 != 0 ? 2 : 0;
  return;
}
function _nil_to_s($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_str_new($agg_result, $mrb, 0, 0);
  STACKTOP = __stackBase__;
  return;
}
function _nil_inspect($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_str_new($agg_result, $mrb, 109260, 3);
  STACKTOP = __stackBase__;
  return;
}
function _true_and($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $obj2 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $obj2 = __stackBase__ | 0;
  _mrb_get_args($mrb, 98308, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $obj2, tempInt) | 0);
  _mrb_bool_value1304($agg_result, HEAP8[$obj2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _true_xor($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $obj2 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $obj2 = __stackBase__ | 0;
  _mrb_get_args($mrb, 98308, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $obj2, tempInt) | 0);
  _mrb_bool_value1304($agg_result, (HEAP8[$obj2] | 0) == 0 & 1);
  STACKTOP = __stackBase__;
  return;
}
function _true_to_s($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_str_new($agg_result, $mrb, 101916, 4);
  STACKTOP = __stackBase__;
  return;
}
function _true_or($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_get_args($mrb, 98308, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = __stackBase__ | 0, tempInt) | 0);
  _mrb_true_value1303($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _false_to_s($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_str_new($agg_result, $mrb, 102128, 5);
  STACKTOP = __stackBase__;
  return;
}
function _convert_type($agg_result, $mrb, $val, $tname, $method, $raise) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $val = $val | 0;
  $tname = $tname | 0;
  $method = $method | 0;
  $raise = $raise | 0;
  var $agg_tmp = 0, $call = 0, $call1 = 0, $tobool = 0, $tobool2 = 0, $call4 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $call = _mrb_intern1302($mrb, $method) | 0;
    $call1 = _mrb_respond_to($mrb, $val, $call) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $tobool2 = ($raise | 0) == 0;
    if ($tobool2) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call4 = _mrb_class_get($mrb, 110220) | 0;
    _mrb_str_new_cstr($agg_tmp, $mrb, $tname);
    _mrb_raisef($mrb, $call4, 98496, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$val >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$val + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$val + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    _mrb_nil_value1281($agg_result);
    label = 7;
    break;
   case 5:
    _mrb_nil_value1281($agg_result);
    label = 7;
    break;
   case 6:
    _mrb_funcall_argv($agg_result, $mrb, $val, $call, 0, 0);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_convert_type($agg_result, $mrb, $val, $type, $tname, $method) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $val = $val | 0;
  $type = $type | 0;
  $tname = $tname | 0;
  $method = $method | 0;
  var $tmp = 0, $agg_tmp = 0, $agg_tmp4 = 0, $tt = 0, $0 = 0, $cmp = 0, $1 = 0, $2 = 0, $v_sroa_0_0__idx1 = 0, $v_sroa_0_0_copyload2 = 0.0, $v_sroa_1_8__idx4 = 0, $v_sroa_1_8_copyload5 = 0, $cmp2 = 0, $call = 0, $v_sroa_0_0__idx = 0, $v_sroa_1_8__idx3 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $agg_tmp4 = __stackBase__ + 24 | 0;
    $tt = $val + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == ($type | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $1 = $agg_result;
    $2 = $val;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    label = 7;
    break;
   case 4:
    _convert_type($tmp, $mrb, $val, $tname, $method, 1);
    $v_sroa_0_0__idx1 = $tmp | 0;
    $v_sroa_0_0_copyload2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$v_sroa_0_0__idx1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$v_sroa_0_0__idx1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $v_sroa_1_8__idx4 = $tmp + 8 | 0;
    $v_sroa_1_8_copyload5 = HEAP32[$v_sroa_1_8__idx4 >> 2] | 0;
    $cmp2 = ($v_sroa_1_8_copyload5 | 0) == ($type | 0);
    if ($cmp2) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $call = _mrb_class_get($mrb, 110220) | 0;
    _mrb_str_new_cstr($agg_tmp, $mrb, $tname);
    _mrb_str_new_cstr($agg_tmp4, $mrb, $method);
    _mrb_raisef($mrb, $call, 109752, (tempInt = STACKTOP, STACKTOP = STACKTOP + 36 | 0, HEAP32[tempInt >> 2] = HEAP32[$val >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$val + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$val + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, HEAP32[tempInt + 24 >> 2] = HEAP32[$agg_tmp4 >> 2] | 0, HEAP32[tempInt + 28 >> 2] = HEAP32[$agg_tmp4 + 4 >> 2] | 0, HEAP32[tempInt + 32 >> 2] = HEAP32[$agg_tmp4 + 8 >> 2] | 0, tempInt) | 0);
    label = 6;
    break;
   case 6:
    $v_sroa_0_0__idx = $agg_result | 0;
    HEAPF64[tempDoublePtr >> 3] = $v_sroa_0_0_copyload2, HEAP32[$v_sroa_0_0__idx >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$v_sroa_0_0__idx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $v_sroa_1_8__idx3 = $agg_result + 8 | 0;
    HEAP32[$v_sroa_1_8__idx3 >> 2] = $v_sroa_1_8_copyload5;
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_check_convert_type($agg_result, $mrb, $val, $type, $tname, $method) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $val = $val | 0;
  $type = $type | 0;
  $tname = $tname | 0;
  $method = $method | 0;
  var $tmp = 0, $tt = 0, $0 = 0, $cmp = 0, $cmp1 = 0, $or_cond = 0, $1 = 0, $2 = 0, $v_sroa_0_0__cast1 = 0, $v_sroa_0_0_copyload2 = 0, $v_sroa_2_8__idx8 = 0, $v_sroa_2_8_copyload9 = 0, $3 = 0, $or_cond12_not = 0, $cmp6 = 0, $or_cond13 = 0, $4 = 0, $v_sroa_1_4__idx3 = 0, $v_sroa_1_4__cast4 = 0, $v_sroa_1_4_copyload5 = 0, $5 = 0, $v_sroa_0_0__cast = 0, $v_sroa_1_4__idx = 0, $v_sroa_1_4__cast = 0, $v_sroa_2_8__idx6 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $tt = $val + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == ($type | 0);
    $cmp1 = ($type | 0) != 21;
    $or_cond = $cmp & $cmp1;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $1 = $agg_result;
    $2 = $val;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    label = 7;
    break;
   case 4:
    _convert_type($tmp, $mrb, $val, $tname, $method, 0);
    $v_sroa_0_0__cast1 = $tmp;
    $v_sroa_0_0_copyload2 = HEAP32[$v_sroa_0_0__cast1 >> 2] | 0;
    $v_sroa_2_8__idx8 = $tmp + 8 | 0;
    $v_sroa_2_8_copyload9 = HEAP32[$v_sroa_2_8__idx8 >> 2] | 0;
    $3 = $v_sroa_2_8_copyload9 | $v_sroa_0_0_copyload2;
    $or_cond12_not = ($3 | 0) != 0;
    $cmp6 = ($v_sroa_2_8_copyload9 | 0) == ($type | 0);
    $or_cond13 = $or_cond12_not & $cmp6;
    if ($or_cond13) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _mrb_nil_value1281($agg_result);
    label = 7;
    break;
   case 6:
    $4 = $tmp;
    $v_sroa_1_4__idx3 = $4 + 4 | 0;
    $v_sroa_1_4__cast4 = $v_sroa_1_4__idx3;
    $v_sroa_1_4_copyload5 = HEAP32[$v_sroa_1_4__cast4 >> 2] | 0;
    $5 = $agg_result;
    $v_sroa_0_0__cast = $agg_result;
    HEAP32[$v_sroa_0_0__cast >> 2] = $v_sroa_0_0_copyload2;
    $v_sroa_1_4__idx = $5 + 4 | 0;
    $v_sroa_1_4__cast = $v_sroa_1_4__idx;
    HEAP32[$v_sroa_1_4__cast >> 2] = $v_sroa_1_4_copyload5;
    $v_sroa_2_8__idx6 = $agg_result + 8 | 0;
    HEAP32[$v_sroa_2_8__idx6 >> 2] = $v_sroa_2_8_copyload9;
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_check_type($mrb, $x, $t) {
  $mrb = $mrb | 0;
  $x = $x | 0;
  $t = $t | 0;
  var $tmp = 0, $agg_tmp = 0, $agg_tmp34 = 0, $agg_tmp37 = 0, $agg_tmp38 = 0, $tt = 0, $0 = 0, $cmp = 0, $cmp1 = 0, $or_cond = 0, $i = 0, $p = 0, $1 = 0, $type_013 = 0, $conv = 0, $cmp7 = 0, $2 = 0, $cmp11 = 0, $3 = 0, $tobool = 0, $_pr = 0, $4 = 0, $cmp25 = 0, $5 = 0, $ptr = 0, $6 = 0, $7 = 0, $call = 0, $etype_0 = 0, $call33 = 0, $name = 0, $8 = 0, $incdec_ptr = 0, $type2 = 0, $9 = 0, $cmp3 = 0, $call36 = 0, $10 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 60 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $agg_tmp34 = __stackBase__ + 24 | 0;
    $agg_tmp37 = __stackBase__ + 36 | 0;
    $agg_tmp38 = __stackBase__ + 48 | 0;
    $tt = $x + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) != ($t | 0);
    $cmp1 = ($0 | 0) == 21;
    $or_cond = $cmp | $cmp1;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 16;
      break;
    }
   case 3:
    $i = $x;
    $p = $tmp;
    $type_013 = 91844;
    $1 = 0;
    label = 4;
    break;
   case 4:
    $conv = $1 & 255;
    $cmp7 = ($conv | 0) == ($t | 0);
    if ($cmp7) {
      label = 5;
      break;
    } else {
      label = 14;
      break;
    }
   case 5:
    $2 = HEAP32[$tt >> 2] | 0;
    $cmp11 = ($2 | 0) == 0;
    if ($cmp11) {
      label = 6;
      break;
    } else {
      $4 = $2;
      label = 8;
      break;
    }
   case 6:
    $3 = HEAP32[$i >> 2] | 0;
    $tobool = ($3 | 0) == 0;
    if ($tobool) {
      $etype_0 = 109260;
      label = 13;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $_pr = HEAP32[$tt >> 2] | 0;
    $4 = $_pr;
    label = 8;
    break;
   case 8:
    if (($4 | 0) == 4) {
      label = 9;
      break;
    } else if (($4 | 0) == 3) {
      $etype_0 = 108804;
      label = 13;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $etype_0 = 108440;
    label = 13;
    break;
   case 10:
    $cmp25 = $4 >>> 0 < 8;
    if ($cmp25) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    _mrb_obj_as_string($tmp, $mrb, $x);
    $5 = HEAP32[$p >> 2] | 0;
    $ptr = $5 + 20 | 0;
    $6 = $ptr;
    $7 = HEAP32[$6 >> 2] | 0;
    $etype_0 = $7;
    label = 13;
    break;
   case 12:
    $call = _mrb_obj_classname($mrb, $x) | 0;
    $etype_0 = $call;
    label = 13;
    break;
   case 13:
    $call33 = _mrb_class_get($mrb, 110220) | 0;
    _mrb_str_new_cstr($agg_tmp, $mrb, $etype_0);
    $name = $type_013 + 4 | 0;
    $8 = HEAP32[$name >> 2] | 0;
    _mrb_str_new_cstr($agg_tmp34, $mrb, $8);
    _mrb_raisef($mrb, $call33, 108112, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp34 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp34 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp34 + 8 >> 2] | 0, tempInt) | 0);
    label = 14;
    break;
   case 14:
    $incdec_ptr = $type_013 + 8 | 0;
    $type2 = $incdec_ptr | 0;
    $9 = HEAP8[$type2] | 0;
    $cmp3 = ($9 & 255) < 23;
    if ($cmp3) {
      $type_013 = $incdec_ptr;
      $1 = $9;
      label = 4;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $call36 = _mrb_class_get($mrb, 110220) | 0;
    _mrb_fixnum_value1288($agg_tmp37, $t);
    $10 = HEAP32[$tt >> 2] | 0;
    _mrb_fixnum_value1288($agg_tmp38, $10);
    _mrb_raisef($mrb, $call36, 107676, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp37 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp37 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp37 + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp38 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp38 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp38 + 8 >> 2] | 0, tempInt) | 0);
    label = 16;
    break;
   case 16:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_any_to_s($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $str = 0, $agg_tmp = 0, $call = 0, $1 = 0, $2 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 72 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $str = __stackBase__ | 0;
  $agg_tmp = __stackBase__ + 48 | 0;
  _mrb_str_buf_new($str, $mrb, 20);
  $call = _mrb_obj_classname($mrb, $obj) | 0;
  _mrb_str_buf_cat(__stackBase__ + 12 | 0, $mrb, $str, 107228, 2);
  _mrb_str_cat21291(__stackBase__ + 24 | 0, $mrb, $str, $call);
  _mrb_str_cat(__stackBase__ + 36 | 0, $mrb, $str, 106696, 1);
  _mrb_ptr_to_str($agg_tmp, $mrb, HEAP32[$obj >> 2] | 0);
  _mrb_str_concat($mrb, $str, $agg_tmp);
  _mrb_str_buf_cat(__stackBase__ + 60 | 0, $mrb, $str, 106372, 1);
  $1 = $agg_result;
  $2 = $str;
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
  HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_cat21291($agg_result, $mrb, $str, $ptr) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  $ptr = $ptr | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_str_cat_cstr($agg_result, $mrb, $str, $ptr);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_is_kind_of($mrb, $obj, $c) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $c = $c | 0;
  var $call = 0, $0 = 0, $1 = 0, $bf_clear = 0, $bf_clear_off = 0, $switch = 0, $call1 = 0, $tobool8 = 0, $mt2 = 0, $cl_09 = 0, $cmp = 0, $mt = 0, $2 = 0, $3 = 0, $cmp3 = 0, $super = 0, $4 = 0, $tobool = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_class1294($mrb, $obj) | 0;
    $0 = $c;
    $1 = HEAP32[$0 >> 2] | 0;
    $bf_clear = $1 & 255;
    $bf_clear_off = $bf_clear - 9 | 0;
    $switch = $bf_clear_off >>> 0 < 3;
    if ($switch) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call1 = _mrb_class_get($mrb, 110220) | 0;
    _mrb_raise($mrb, $call1, 105824);
    label = 4;
    break;
   case 4:
    $tobool8 = ($call | 0) == 0;
    if ($tobool8) {
      $retval_0 = 0;
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $mt2 = $c + 16 | 0;
    $cl_09 = $call;
    label = 6;
    break;
   case 6:
    $cmp = ($cl_09 | 0) == ($c | 0);
    if ($cmp) {
      $retval_0 = 1;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $mt = $cl_09 + 16 | 0;
    $2 = HEAP32[$mt >> 2] | 0;
    $3 = HEAP32[$mt2 >> 2] | 0;
    $cmp3 = ($2 | 0) == ($3 | 0);
    if ($cmp3) {
      $retval_0 = 1;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $super = $cl_09 + 20 | 0;
    $4 = HEAP32[$super >> 2] | 0;
    $tobool = ($4 | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 9;
      break;
    } else {
      $cl_09 = $4;
      label = 6;
      break;
    }
   case 9:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_to_int($agg_result, $mrb, $val) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $val = $val | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_to_integer($agg_result, $mrb, $val, 105556);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_to_integer($agg_result, $mrb, $val, $method) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $val = $val | 0;
  $method = $method | 0;
  var $v = 0, $agg_tmp = 0, $tt = 0, $0 = 0, $cmp = 0, $1 = 0, $2 = 0, $3 = 0, $fixnum_class = 0, $4 = 0, $call = 0, $tobool = 0, $call2 = 0, $5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $v = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $tt = $val + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $1 = $agg_result;
    $2 = $val;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    label = 7;
    break;
   case 4:
    _convert_type($v, $mrb, $val, 110976, $method, 1);
    $3 = $v;
    $fixnum_class = $mrb + 76 | 0;
    $4 = HEAP32[$fixnum_class >> 2] | 0;
    $call = _mrb_obj_is_kind_of($mrb, $v, $4) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $call2 = _mrb_class_get($mrb, 110220) | 0;
    _mrb_str_new_cstr($agg_tmp, $mrb, $method);
    _mrb_raisef($mrb, $call2, 102332, (tempInt = STACKTOP, STACKTOP = STACKTOP + 48 | 0, HEAP32[tempInt >> 2] = HEAP32[$val >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$val + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$val + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$val >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$val + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$val + 8 >> 2] | 0, HEAP32[tempInt + 24 >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 28 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 32 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, HEAP32[tempInt + 36 >> 2] = HEAP32[$v >> 2] | 0, HEAP32[tempInt + 40 >> 2] = HEAP32[$v + 4 >> 2] | 0, HEAP32[tempInt + 44 >> 2] = HEAP32[$v + 8 >> 2] | 0, tempInt) | 0);
    label = 6;
    break;
   case 6:
    $5 = $agg_result;
    HEAP32[$5 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_Integer($agg_result, $mrb, $val) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $val = $val | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_convert_to_integer($agg_result, $mrb, $val);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_convert_to_integer($agg_result, $mrb, $val) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $val = $val | 0;
  var $tmp34 = 0, $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $tobool = 0, $call = 0, $_pr = 0, $2 = 0, $f = 0, $3 = 0.0, $cmp9 = 0, $cmp13 = 0, $or_cond = 0, $4 = 0, $5 = 0, $tmp_sroa_0_0__cast1 = 0, $tmp_sroa_0_0_copyload2 = 0, $tmp_sroa_2_8__idx13 = 0, $tmp_sroa_2_8_copyload14 = 0, $6 = 0, $7 = 0, $8 = 0, $tmp_sroa_1_4__idx6 = 0, $tmp_sroa_1_4__cast7 = 0, $tmp_sroa_1_4_copyload8 = 0, $9 = 0, $tmp_sroa_0_0__cast = 0, $tmp_sroa_1_4__idx = 0, $tmp_sroa_1_4__cast = 0, $tmp_sroa_2_8__idx12 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp34 = __stackBase__ | 0;
    $tt = $val + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $2 = $0;
      label = 6;
      break;
    }
   case 3:
    $i = $val;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $call = _mrb_class_get($mrb, 110220) | 0;
    _mrb_raise($mrb, $call, 103744);
    label = 5;
    break;
   case 5:
    $_pr = HEAP32[$tt >> 2] | 0;
    $2 = $_pr;
    label = 6;
    break;
   case 6:
    if (($2 | 0) == 6) {
      label = 7;
      break;
    } else if (($2 | 0) == 3) {
      label = 9;
      break;
    } else if (($2 | 0) == 16) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 7:
    $f = $val | 0;
    $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $cmp9 = $3 > 2147483647.0;
    $cmp13 = $3 < -2147483648.0;
    $or_cond = $cmp9 | $cmp13;
    if ($or_cond) {
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
   case 8:
    _mrb_flo_to_fixnum($agg_result, $mrb, $val);
    label = 14;
    break;
   case 9:
    $4 = $agg_result;
    $5 = $val;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    label = 14;
    break;
   case 10:
    _mrb_str_to_inum($agg_result, $mrb, $val, 0, 1);
    label = 14;
    break;
   case 11:
    _convert_type($tmp34, $mrb, $val, 110976, 105556, 0);
    $tmp_sroa_0_0__cast1 = $tmp34;
    $tmp_sroa_0_0_copyload2 = HEAP32[$tmp_sroa_0_0__cast1 >> 2] | 0;
    $tmp_sroa_2_8__idx13 = $tmp34 + 8 | 0;
    $tmp_sroa_2_8_copyload14 = HEAP32[$tmp_sroa_2_8__idx13 >> 2] | 0;
    $6 = $tmp_sroa_2_8_copyload14 | $tmp_sroa_0_0_copyload2;
    $7 = ($6 | 0) == 0;
    if ($7) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    _mrb_to_integer($agg_result, $mrb, $val, 102896);
    label = 14;
    break;
   case 13:
    $8 = $tmp34;
    $tmp_sroa_1_4__idx6 = $8 + 4 | 0;
    $tmp_sroa_1_4__cast7 = $tmp_sroa_1_4__idx6;
    $tmp_sroa_1_4_copyload8 = HEAP32[$tmp_sroa_1_4__cast7 >> 2] | 0;
    $9 = $agg_result;
    $tmp_sroa_0_0__cast = $agg_result;
    HEAP32[$tmp_sroa_0_0__cast >> 2] = $tmp_sroa_0_0_copyload2;
    $tmp_sroa_1_4__idx = $9 + 4 | 0;
    $tmp_sroa_1_4__cast = $tmp_sroa_1_4__idx;
    HEAP32[$tmp_sroa_1_4__cast >> 2] = $tmp_sroa_1_4_copyload8;
    $tmp_sroa_2_8__idx12 = $agg_result + 8 | 0;
    HEAP32[$tmp_sroa_2_8__idx12 >> 2] = $tmp_sroa_2_8_copyload14;
    label = 14;
    break;
   case 14:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_Float($agg_result, $mrb, $val) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $val = $val | 0;
  var $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $tobool = 0, $call = 0, $_pr = 0, $2 = 0, $i3 = 0, $3 = 0, $conv = 0.0, $4 = 0, $5 = 0, $call6 = 0.0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $val + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $2 = $0;
      label = 6;
      break;
    }
   case 3:
    $i = $val;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $call = _mrb_class_get($mrb, 110220) | 0;
    _mrb_raise($mrb, $call, 105164);
    label = 5;
    break;
   case 5:
    $_pr = HEAP32[$tt >> 2] | 0;
    $2 = $_pr;
    label = 6;
    break;
   case 6:
    if (($2 | 0) == 3) {
      label = 7;
      break;
    } else if (($2 | 0) == 6) {
      label = 8;
      break;
    } else if (($2 | 0) == 16) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 7:
    $i3 = $val;
    $3 = HEAP32[$i3 >> 2] | 0;
    $conv = +($3 | 0);
    _mrb_float_value1297($agg_result, $conv);
    label = 11;
    break;
   case 8:
    $4 = $agg_result;
    $5 = $val;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    label = 11;
    break;
   case 9:
    $call6 = +_mrb_str_to_dbl($mrb, $val, 1);
    _mrb_float_value1297($agg_result, $call6);
    label = 11;
    break;
   case 10:
    _mrb_convert_type($agg_result, $mrb, $val, 6, 104728, 104340);
    label = 11;
    break;
   case 11:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_inspect($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $agg_tmp = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $agg_tmp = __stackBase__ | 0;
  _mrb_funcall($agg_tmp, $mrb, $obj, 93504, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
  _mrb_obj_as_string($agg_result, $mrb, $agg_tmp);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_eql($mrb, $obj1, $obj2) {
  $mrb = $mrb | 0;
  $obj1 = $obj1 | 0;
  $obj2 = $obj2 | 0;
  var $tmp = 0, $call = 0, $tobool = 0, $tt = 0, $0 = 0, $cmp = 0, $conv = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $obj1;
  $obj1 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj1 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj1 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj1 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $obj2;
  $obj2 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj2 >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj2 + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj2 + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $call = _mrb_obj_eq(0, $obj1, $obj2) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $retval_0 = 1;
      label = 4;
      break;
    }
   case 3:
    _mrb_funcall($tmp, $mrb, $obj1, 104020, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$obj2 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$obj2 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$obj2 + 8 >> 2] | 0, tempInt) | 0);
    $tt = $tmp + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) != 0;
    $conv = $cmp & 1;
    $retval_0 = $conv;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_intern1302($mrb, $cstr) {
  $mrb = $mrb | 0;
  $cstr = $cstr | 0;
  return _mrb_intern_cstr($mrb, $cstr) | 0;
}
function _mrb_pool_open($mrb) {
  $mrb = $mrb | 0;
  var $call = 0, $0 = 0, $tobool = 0, $mrb1 = 0, $pages = 0, $1 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_malloc($mrb, 8) | 0;
    $0 = $call;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $mrb1 = $call;
    HEAP32[$mrb1 >> 2] = $mrb;
    $pages = $call + 4 | 0;
    $1 = $pages;
    HEAP32[$1 >> 2] = 0;
    label = 4;
    break;
   case 4:
    return $0 | 0;
  }
  return 0;
}
function _mrb_pool_close($pool) {
  $pool = $pool | 0;
  var $tobool = 0, $pages = 0, $0 = 0, $tobool17 = 0, $mrb = 0, $page_08 = 0, $next = 0, $1 = 0, $2 = 0, $3 = 0, $tobool1 = 0, $mrb2 = 0, $4 = 0, $5 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($pool | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $pages = $pool + 4 | 0;
    $0 = HEAP32[$pages >> 2] | 0;
    $tobool17 = ($0 | 0) == 0;
    if ($tobool17) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $mrb = $pool | 0;
    $page_08 = $0;
    label = 5;
    break;
   case 5:
    $next = $page_08 | 0;
    $1 = HEAP32[$next >> 2] | 0;
    $2 = HEAP32[$mrb >> 2] | 0;
    $3 = $page_08;
    _mrb_free($2, $3);
    $tobool1 = ($1 | 0) == 0;
    if ($tobool1) {
      label = 6;
      break;
    } else {
      $page_08 = $1;
      label = 5;
      break;
    }
   case 6:
    $mrb2 = $pool | 0;
    $4 = HEAP32[$mrb2 >> 2] | 0;
    $5 = $pool;
    _mrb_free($4, $5);
    label = 7;
    break;
   case 7:
    return;
  }
}
function _mrb_pool_alloc($pool, $len) {
  $pool = $pool | 0;
  $len = $len | 0;
  var $tobool = 0, $sub = 0, $and = 0, $add = 0, $pages = 0, $page_0_in = 0, $page_0 = 0, $tobool1 = 0, $offset = 0, $0 = 0, $add2 = 0, $len3 = 0, $1 = 0, $cmp = 0, $next = 0, $add_ptr = 0, $last = 0, $call = 0, $tobool11 = 0, $offset14 = 0, $2 = 0, $next16 = 0, $arraydecay19 = 0, $last20 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($pool | 0) == 0;
    if ($tobool) {
      $retval_0 = 0;
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $sub = -$len | 0;
    $and = $sub & 3;
    $add = $and + $len | 0;
    $pages = $pool + 4 | 0;
    $page_0_in = $pages;
    label = 4;
    break;
   case 4:
    $page_0 = HEAP32[$page_0_in >> 2] | 0;
    $tobool1 = ($page_0 | 0) == 0;
    if ($tobool1) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $offset = $page_0 + 4 | 0;
    $0 = HEAP32[$offset >> 2] | 0;
    $add2 = $0 + $add | 0;
    $len3 = $page_0 + 8 | 0;
    $1 = HEAP32[$len3 >> 2] | 0;
    $cmp = $add2 >>> 0 > $1 >>> 0;
    $next = $page_0 | 0;
    if ($cmp) {
      $page_0_in = $next;
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    HEAP32[$offset >> 2] = $add2;
    $add_ptr = $0 + ($page_0 + 16) | 0;
    $last = $page_0 + 12 | 0;
    HEAP32[$last >> 2] = $add_ptr;
    $retval_0 = $add_ptr;
    label = 9;
    break;
   case 7:
    $call = _page_alloc($pool, $add) | 0;
    $tobool11 = ($call | 0) == 0;
    if ($tobool11) {
      $retval_0 = 0;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $offset14 = $call + 4 | 0;
    HEAP32[$offset14 >> 2] = $add;
    $2 = HEAP32[$pages >> 2] | 0;
    $next16 = $call | 0;
    HEAP32[$next16 >> 2] = $2;
    HEAP32[$pages >> 2] = $call;
    $arraydecay19 = $call + 16 | 0;
    $last20 = $call + 12 | 0;
    HEAP32[$last20 >> 2] = $arraydecay19;
    $retval_0 = $arraydecay19;
    label = 9;
    break;
   case 9:
    return $retval_0 | 0;
  }
  return 0;
}
function _page_alloc($pool, $len) {
  $pool = $pool | 0;
  $len = $len | 0;
  var $cmp = 0, $_len = 0, $mrb = 0, $0 = 0, $add = 0, $call = 0, $1 = 0, $tobool = 0, $offset = 0, $2 = 0, $len2 = 0, $3 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = $len >>> 0 < 16e3;
    $_len = $cmp ? 16e3 : $len;
    $mrb = $pool | 0;
    $0 = HEAP32[$mrb >> 2] | 0;
    $add = $_len + 16 | 0;
    $call = _mrb_malloc($0, $add) | 0;
    $1 = $call;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $offset = $call + 4 | 0;
    $2 = $offset;
    HEAP32[$2 >> 2] = 0;
    $len2 = $call + 8 | 0;
    $3 = $len2;
    HEAP32[$3 >> 2] = $_len;
    label = 4;
    break;
   case 4:
    return $1 | 0;
  }
  return 0;
}
function _mrb_range_new($agg_result, $mrb, $beg, $end, $excl) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $beg = $beg | 0;
  $end = $end | 0;
  $excl = $excl | 0;
  var $call1 = 0, $call2 = 0, $1 = 0, $2 = 0, $4 = 0, $5 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $beg;
  $beg = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$beg >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$beg + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$beg + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $end;
  $end = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$end >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$end + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$end + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $call1 = _mrb_obj_alloc($mrb, 17, _mrb_class_get($mrb, 109804) | 0) | 0;
  _range_check($mrb, $beg, $end);
  $call2 = _mrb_malloc($mrb, 24) | 0;
  $1 = $call1 + 12 | 0;
  HEAP32[$1 >> 2] = $call2;
  $2 = $beg;
  HEAP32[$call2 >> 2] = HEAP32[$2 >> 2] | 0;
  HEAP32[$call2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
  HEAP32[$call2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
  $4 = (HEAP32[$1 >> 2] | 0) + 12 | 0;
  $5 = $end;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
  HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
  HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
  HEAP32[$call1 + 16 >> 2] = $excl;
  _mrb_obj_value1340($agg_result, $call1 | 0);
  STACKTOP = __stackBase__;
  return;
}
function _range_check($mrb, $a, $b) {
  $mrb = $mrb | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $tmp = 0, $tt = 0, $0 = 0, $tt1 = 0, $1 = 0, $ans_sroa_2_8__idx4 = 0, $ans_sroa_2_8_copyload = 0, $cmp7 = 0, $ans_sroa_0_0__cast = 0, $ans_sroa_0_0_copyload = 0, $tobool = 0, $call = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $a;
  $a = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$a >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$a + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$a + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $b;
  $b = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$b >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$b + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$b + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $tt = $a + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $tt1 = $b + 8 | 0;
    $1 = HEAP32[$tt1 >> 2] | 0;
    if (($0 | 0) == 6 | ($0 | 0) == 3) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    if (($1 | 0) == 6 | ($1 | 0) == 3) {
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _mrb_funcall($tmp, $mrb, $a, 105552, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$b >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$b + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$b + 8 >> 2] | 0, tempInt) | 0);
    $ans_sroa_2_8__idx4 = $tmp + 8 | 0;
    $ans_sroa_2_8_copyload = HEAP32[$ans_sroa_2_8__idx4 >> 2] | 0;
    $cmp7 = ($ans_sroa_2_8_copyload | 0) == 0;
    if ($cmp7) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    $ans_sroa_0_0__cast = $tmp;
    $ans_sroa_0_0_copyload = HEAP32[$ans_sroa_0_0__cast >> 2] | 0;
    $tobool = ($ans_sroa_0_0_copyload | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $call = _mrb_class_get($mrb, 105148) | 0;
    _mrb_raise($mrb, $call, 104708);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_range_beg($agg_result, $mrb, $range) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $range = $range | 0;
  var $3 = 0, $4 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $range;
  $range = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$range >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$range + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$range + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $3 = $agg_result;
  $4 = HEAP32[(HEAP32[$range >> 2] | 0) + 12 >> 2] | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
  HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_range_end($agg_result, $mrb, $range) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $range = $range | 0;
  var $3 = 0, $4 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $range;
  $range = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$range >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$range + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$range + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $3 = $agg_result;
  $4 = (HEAP32[(HEAP32[$range >> 2] | 0) + 12 >> 2] | 0) + 12 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
  HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_range_excl($agg_result, $mrb, $range) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $range = $range | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $range;
  $range = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$range >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$range + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$range + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_bool_value1341($agg_result, HEAP32[(HEAP32[$range >> 2] | 0) + 16 >> 2] & 255);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_range_initialize($agg_result, $mrb, $range) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $range = $range | 0;
  var $beg = 0, $end = 0, $exclusive = 0, $call = 0, $cmp = 0, $0 = 0, $conv = 0, $1 = 0, $2 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  tempParam = $range;
  $range = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$range >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$range + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$range + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $beg = __stackBase__ | 0;
    $end = __stackBase__ + 12 | 0;
    $exclusive = __stackBase__ + 24 | 0;
    $call = _mrb_get_args($mrb, 110740, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $beg, HEAP32[tempInt + 4 >> 2] = $end, HEAP32[tempInt + 8 >> 2] = $exclusive, tempInt) | 0) | 0;
    $cmp = ($call | 0) == 3;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    HEAP8[$exclusive] = 0;
    label = 4;
    break;
   case 4:
    $0 = HEAP8[$exclusive] | 0;
    $conv = $0 & 255;
    _range_init($mrb, $range, $beg, $end, $conv);
    $1 = $agg_result;
    $2 = $range;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _range_init($mrb, $range, $beg, $end, $exclude_end) {
  $mrb = $mrb | 0;
  $range = $range | 0;
  $beg = $beg | 0;
  $end = $end | 0;
  $exclude_end = $exclude_end | 0;
  var $p = 0, $0 = 0, $excl = 0, $1 = 0, $edges = 0, $2 = 0, $3 = 0, $tobool = 0, $call = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $end5 = 0, $9 = 0, $10 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $range;
  $range = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$range >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$range + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$range + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $beg;
  $beg = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$beg >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$beg + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$beg + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $end;
  $end = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$end >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$end + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$end + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $range;
    $0 = HEAP32[$p >> 2] | 0;
    _range_check($mrb, $beg, $end);
    $excl = $0 + 16 | 0;
    $1 = $excl;
    HEAP32[$1 >> 2] = $exclude_end;
    $edges = $0 + 12 | 0;
    $2 = $edges;
    $3 = HEAP32[$2 >> 2] | 0;
    $tobool = ($3 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _mrb_malloc($mrb, 24) | 0;
    $4 = $call;
    HEAP32[$2 >> 2] = $4;
    label = 4;
    break;
   case 4:
    $5 = HEAP32[$2 >> 2] | 0;
    $6 = $5;
    $7 = $beg;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    $8 = HEAP32[$2 >> 2] | 0;
    $end5 = $8 + 12 | 0;
    $9 = $end5;
    $10 = $end;
    HEAP32[$9 >> 2] = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 + 4 >> 2] = HEAP32[$10 + 4 >> 2] | 0;
    HEAP32[$9 + 8 >> 2] = HEAP32[$10 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_obj_value1352($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_nil_value1365($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_obj_value1376($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_range_eq($agg_result, $mrb, $range) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $range = $range | 0;
  var $obj = 0, $call = 0, $call1 = 0, $tobool = 0, $call2 = 0, $call3 = 0, $tobool4 = 0, $p = 0, $0 = 0, $p8 = 0, $1 = 0, $edges = 0, $2 = 0, $3 = 0, $beg = 0, $edges9 = 0, $4 = 0, $5 = 0, $beg10 = 0, $call11 = 0, $tobool12 = 0, $end = 0, $end15 = 0, $call16 = 0, $tobool17 = 0, $excl = 0, $6 = 0, $7 = 0, $excl19 = 0, $8 = 0, $9 = 0, $cmp = 0, $_ = 0, $eq_p_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $range;
  $range = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$range >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$range + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$range + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $obj = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 106188, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $obj, tempInt) | 0) | 0;
    $call1 = _mrb_obj_equal(0, $range, $obj) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $eq_p_0 = 1;
      label = 7;
      break;
    }
   case 3:
    $call2 = _mrb_obj_class($mrb, $range) | 0;
    $call3 = _mrb_obj_is_instance_of($mrb, $obj, $call2) | 0;
    $tobool4 = ($call3 | 0) == 0;
    if ($tobool4) {
      $eq_p_0 = 0;
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $p = $range;
    $0 = HEAP32[$p >> 2] | 0;
    $p8 = $obj;
    $1 = HEAP32[$p8 >> 2] | 0;
    $edges = $0 + 12 | 0;
    $2 = $edges;
    $3 = HEAP32[$2 >> 2] | 0;
    $beg = $3 | 0;
    $edges9 = $1 + 12 | 0;
    $4 = $edges9;
    $5 = HEAP32[$4 >> 2] | 0;
    $beg10 = $5 | 0;
    $call11 = _mrb_obj_equal(0, $beg, $beg10) | 0;
    $tobool12 = ($call11 | 0) == 0;
    if ($tobool12) {
      $eq_p_0 = 0;
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $end = $3 + 12 | 0;
    $end15 = $5 + 12 | 0;
    $call16 = _mrb_obj_equal(0, $end, $end15) | 0;
    $tobool17 = ($call16 | 0) == 0;
    if ($tobool17) {
      $eq_p_0 = 0;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $excl = $0 + 16 | 0;
    $6 = $excl;
    $7 = HEAP32[$6 >> 2] | 0;
    $excl19 = $1 + 16 | 0;
    $8 = $excl19;
    $9 = HEAP32[$8 >> 2] | 0;
    $cmp = ($7 | 0) == ($9 | 0);
    $_ = $cmp & 1;
    $eq_p_0 = $_;
    label = 7;
    break;
   case 7:
    _mrb_bool_value1341($agg_result, $eq_p_0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_range_include($agg_result, $mrb, $range) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $range = $range | 0;
  var $val = 0, $beg = 0, $end = 0, $p = 0, $0 = 0, $call = 0, $edges = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $end3 = 0, $6 = 0, $7 = 0, $call4 = 0, $tobool = 0, $excl = 0, $8 = 0, $9 = 0, $tobool5 = 0, $call6 = 0, $tobool7 = 0, $call8 = 0, $tobool9 = 0, $10 = 0, $conv = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  tempParam = $range;
  $range = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$range >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$range + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$range + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $val = __stackBase__ | 0;
    $beg = __stackBase__ + 12 | 0;
    $end = __stackBase__ + 24 | 0;
    $p = $range;
    $0 = HEAP32[$p >> 2] | 0;
    $call = _mrb_get_args($mrb, 106188, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $val, tempInt) | 0) | 0;
    $edges = $0 + 12 | 0;
    $1 = $edges;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $beg;
    $4 = $2;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    $5 = HEAP32[$1 >> 2] | 0;
    $end3 = $5 + 12 | 0;
    $6 = $end;
    $7 = $end3;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    $call4 = _r_le($mrb, $beg, $val) | 0;
    $tobool = ($call4 | 0) == 0;
    if ($tobool) {
      $10 = 0;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $excl = $0 + 16 | 0;
    $8 = $excl;
    $9 = HEAP32[$8 >> 2] | 0;
    $tobool5 = ($9 | 0) == 0;
    if ($tobool5) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call6 = _r_gt($mrb, $end, $val) | 0;
    $tobool7 = ($call6 | 0) == 0;
    if ($tobool7) {
      label = 5;
      break;
    } else {
      $10 = 1;
      label = 6;
      break;
    }
   case 5:
    $call8 = _r_ge($mrb, $end, $val) | 0;
    $tobool9 = ($call8 | 0) != 0;
    $10 = $tobool9;
    label = 6;
    break;
   case 6:
    $conv = $10 & 1;
    _mrb_bool_value1341($agg_result, $conv);
    STACKTOP = __stackBase__;
    return;
  }
}
function _r_le($mrb, $a, $b) {
  $mrb = $mrb | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $r = 0, $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $a;
  $a = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$a >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$a + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$a + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $b;
  $b = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$b >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$b + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$b + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $r = __stackBase__ | 0;
    _mrb_funcall($r, $mrb, $a, 105552, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$b >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$b + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$b + 8 >> 2] | 0, tempInt) | 0);
    $tt = $r + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $i = $r;
    $1 = HEAP32[$i >> 2] | 0;
    if (($1 | 0) == (-1 | 0) | ($1 | 0) == 0) {
      $retval_0 = 1;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $retval_0 = 0;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _r_gt($mrb, $a, $b) {
  $mrb = $mrb | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $r = 0, $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $cmp1 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $a;
  $a = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$a >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$a + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$a + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $b;
  $b = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$b >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$b + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$b + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $r = __stackBase__ | 0;
    _mrb_funcall($r, $mrb, $a, 105552, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$b >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$b + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$b + 8 >> 2] | 0, tempInt) | 0);
    $tt = $r + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $i = $r;
    $1 = HEAP32[$i >> 2] | 0;
    $cmp1 = ($1 | 0) == 1;
    if ($cmp1) {
      $retval_0 = 1;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $retval_0 = 0;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _r_ge($mrb, $a, $b) {
  $mrb = $mrb | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $r = 0, $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $2 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $a;
  $a = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$a >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$a + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$a + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $b;
  $b = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$b >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$b + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$b + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $r = __stackBase__ | 0;
    _mrb_funcall($r, $mrb, $a, 105552, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$b >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$b + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$b + 8 >> 2] | 0, tempInt) | 0);
    $tt = $r + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $i = $r;
    $1 = HEAP32[$i >> 2] | 0;
    $2 = $1 >>> 0 < 2;
    if ($2) {
      $retval_0 = 1;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $retval_0 = 0;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_range_each($agg_result, $mrb, $range) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $range = $range | 0;
  var $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $range;
  $range = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$range >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$range + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$range + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $0 = $agg_result;
  $1 = $range;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_range_beg_len($mrb, $range, $begp, $lenp, $len) {
  $mrb = $mrb | 0;
  $range = $range | 0;
  $begp = $begp | 0;
  $lenp = $lenp | 0;
  $len = $len | 0;
  var $p = 0, $0 = 0, $tt = 0, $1 = 0, $cmp = 0, $call = 0, $edges = 0, $2 = 0, $3 = 0, $i = 0, $4 = 0, $value5 = 0, $i6 = 0, $5 = 0, $cmp7 = 0, $add = 0, $cmp9 = 0, $beg_0 = 0, $cmp13 = 0, $cmp16 = 0, $len_ = 0, $cmp19 = 0, $add21 = 0, $end_1 = 0, $excl = 0, $6 = 0, $7 = 0, $tobool = 0, $cmp23 = 0, $or_cond = 0, $inc = 0, $end_2 = 0, $sub = 0, $cmp26 = 0, $_sub = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $range;
  $range = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$range >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$range + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$range + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $range;
    $0 = HEAP32[$p >> 2] | 0;
    $tt = $range + 8 | 0;
    $1 = HEAP32[$tt >> 2] | 0;
    $cmp = ($1 | 0) == 17;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 102796) | 0;
    _mrb_raise($mrb, $call, 100068);
    label = 4;
    break;
   case 4:
    $edges = $0 + 12 | 0;
    $2 = $edges;
    $3 = HEAP32[$2 >> 2] | 0;
    $i = $3;
    $4 = HEAP32[$i >> 2] | 0;
    $value5 = $3 + 12 | 0;
    $i6 = $value5;
    $5 = HEAP32[$i6 >> 2] | 0;
    $cmp7 = ($4 | 0) < 0;
    if ($cmp7) {
      label = 5;
      break;
    } else {
      $beg_0 = $4;
      label = 6;
      break;
    }
   case 5:
    $add = $4 + $len | 0;
    $cmp9 = ($add | 0) < 0;
    if ($cmp9) {
      $retval_0 = 0;
      label = 8;
      break;
    } else {
      $beg_0 = $add;
      label = 6;
      break;
    }
   case 6:
    $cmp13 = ($beg_0 | 0) > ($len | 0);
    if ($cmp13) {
      $retval_0 = 0;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $cmp16 = ($5 | 0) > ($len | 0);
    $len_ = $cmp16 ? $len : $5;
    $cmp19 = ($len_ | 0) < 0;
    $add21 = $cmp19 ? $len : 0;
    $end_1 = $add21 + $len_ | 0;
    $excl = $0 + 16 | 0;
    $6 = $excl;
    $7 = HEAP32[$6 >> 2] | 0;
    $tobool = ($7 | 0) == 0;
    $cmp23 = ($end_1 | 0) < ($len | 0);
    $or_cond = $tobool & $cmp23;
    $inc = $or_cond & 1;
    $end_2 = $end_1 - $beg_0 | 0;
    $sub = $end_2 + $inc | 0;
    $cmp26 = ($sub | 0) < 0;
    $_sub = $cmp26 ? 0 : $sub;
    HEAP32[$begp >> 2] = $beg_0;
    HEAP32[$lenp >> 2] = $_sub;
    $retval_0 = 1;
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _range_initialize_copy($agg_result, $mrb, $copy) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $copy = $copy | 0;
  var $src = 0, $call = 0, $call1 = 0, $tobool = 0, $0 = 0, $1 = 0, $call2 = 0, $call3 = 0, $tobool4 = 0, $call6 = 0, $p = 0, $2 = 0, $edges = 0, $3 = 0, $4 = 0, $beg = 0, $end = 0, $excl = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $copy;
  $copy = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$copy >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$copy + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$copy + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $src = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 106188, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $src, tempInt) | 0) | 0;
    $call1 = _mrb_obj_equal(0, $copy, $src) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $0 = $agg_result;
    $1 = $copy;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 7;
    break;
   case 4:
    $call2 = _mrb_obj_class($mrb, $copy) | 0;
    $call3 = _mrb_obj_is_instance_of($mrb, $src, $call2) | 0;
    $tobool4 = ($call3 | 0) == 0;
    if ($tobool4) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $call6 = _mrb_class_get($mrb, 102796) | 0;
    _mrb_raise($mrb, $call6, 97476);
    label = 6;
    break;
   case 6:
    $p = $src;
    $2 = HEAP32[$p >> 2] | 0;
    $edges = $2 + 12 | 0;
    $3 = $edges;
    $4 = HEAP32[$3 >> 2] | 0;
    $beg = $4 | 0;
    $end = $4 + 12 | 0;
    $excl = $2 + 16 | 0;
    $5 = $excl;
    $6 = HEAP32[$5 >> 2] | 0;
    _range_init($mrb, $copy, $beg, $end, $6);
    $7 = $agg_result;
    $8 = $copy;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_init_range($mrb) {
  $mrb = $mrb | 0;
  var $call = 0, $1 = 0;
  $call = _mrb_define_class($mrb, 109804, HEAP32[$mrb + 44 >> 2] | 0) | 0;
  $1 = $call;
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -522241 | 34816;
  _mrb_include_module($mrb, $call, _mrb_class_get($mrb, 95432) | 0);
  _mrb_define_method($mrb, $call, 94380, 122, 0);
  _mrb_define_method($mrb, $call, 93484, 732, 0);
  _mrb_define_method($mrb, $call, 92788, 794, 0);
  _mrb_define_method($mrb, $call, 111456, 214, 0);
  _mrb_define_method($mrb, $call, 110968, 80, 0);
  _mrb_define_method($mrb, $call, 110204, 144, 0);
  _mrb_define_method($mrb, $call, 109744, 122, 0);
  _mrb_define_method($mrb, $call, 109248, 214, 0);
  _mrb_define_method($mrb, $call, 108792, 470, 0);
  _mrb_define_method($mrb, $call, 108432, 732, 0);
  _mrb_define_method($mrb, $call, 108104, 214, 0);
  _mrb_define_method($mrb, $call, 107668, 240, 0);
  _mrb_define_method($mrb, $call, 107220, 306, 0);
  _mrb_define_method($mrb, $call, 106688, 106, 0);
  _mrb_define_method($mrb, $call, 106356, 858, 0);
  return;
}
function _range_to_s($agg_result, $mrb, $range) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $range = $range | 0;
  var $str = 0, $tmp2 = 0, $tmp3 = 0, $0 = 0, $1 = 0, $3 = 0, $5 = 0, $8 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 60 | 0;
  tempParam = $range;
  $range = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$range >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$range + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$range + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $str = __stackBase__ | 0;
  $tmp2 = __stackBase__ + 12 | 0;
  $tmp3 = __stackBase__ + 24 | 0;
  $0 = HEAP32[$range >> 2] | 0;
  $1 = $0 + 12 | 0;
  _mrb_obj_as_string($str, $mrb, HEAP32[$1 >> 2] | 0);
  $3 = $str;
  _mrb_obj_as_string($tmp2, $mrb, (HEAP32[$1 >> 2] | 0) + 12 | 0);
  _mrb_str_dup($tmp3, $mrb, $str);
  $5 = $tmp3;
  HEAP32[$3 >> 2] = HEAP32[$5 >> 2] | 0;
  HEAP32[$3 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
  HEAP32[$3 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
  _mrb_str_cat(__stackBase__ + 36 | 0, $mrb, $str, 105820, (HEAP32[$0 + 16 >> 2] | 0) != 0 ? 3 : 2);
  _mrb_str_append(__stackBase__ + 48 | 0, $mrb, $str, $tmp2);
  $8 = $agg_result;
  HEAP32[$8 >> 2] = HEAP32[$3 >> 2] | 0;
  HEAP32[$8 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
  HEAP32[$8 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _range_inspect($agg_result, $mrb, $range) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $range = $range | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $range;
  $range = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$range >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$range + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$range + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _inspect_range($agg_result, $mrb, $range);
  STACKTOP = __stackBase__;
  return;
}
function _range_eql($agg_result, $mrb, $range) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $range = $range | 0;
  var $obj = 0, $call = 0, $call1 = 0, $tobool = 0, $call2 = 0, $call3 = 0, $tobool4 = 0, $p = 0, $0 = 0, $tt = 0, $1 = 0, $cmp = 0, $p10 = 0, $2 = 0, $edges = 0, $3 = 0, $4 = 0, $beg = 0, $edges11 = 0, $5 = 0, $6 = 0, $beg12 = 0, $call13 = 0, $tobool14 = 0, $7 = 0, $end = 0, $8 = 0, $end17 = 0, $call18 = 0, $tobool19 = 0, $excl = 0, $9 = 0, $10 = 0, $excl21 = 0, $11 = 0, $12 = 0, $cmp22 = 0, $_ = 0, $eql_p_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $range;
  $range = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$range >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$range + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$range + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $obj = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 106188, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $obj, tempInt) | 0) | 0;
    $call1 = _mrb_obj_equal(0, $range, $obj) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $eql_p_0 = 1;
      label = 8;
      break;
    }
   case 3:
    $call2 = _mrb_class_get($mrb, 109804) | 0;
    $call3 = _mrb_obj_is_kind_of($mrb, $obj, $call2) | 0;
    $tobool4 = ($call3 | 0) == 0;
    if ($tobool4) {
      $eql_p_0 = 0;
      label = 8;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $p = $range;
    $0 = HEAP32[$p >> 2] | 0;
    $tt = $obj + 8 | 0;
    $1 = HEAP32[$tt >> 2] | 0;
    $cmp = ($1 | 0) == 17;
    if ($cmp) {
      label = 5;
      break;
    } else {
      $eql_p_0 = 0;
      label = 8;
      break;
    }
   case 5:
    $p10 = $obj;
    $2 = HEAP32[$p10 >> 2] | 0;
    $edges = $0 + 12 | 0;
    $3 = $edges;
    $4 = HEAP32[$3 >> 2] | 0;
    $beg = $4 | 0;
    $edges11 = $2 + 12 | 0;
    $5 = $edges11;
    $6 = HEAP32[$5 >> 2] | 0;
    $beg12 = $6 | 0;
    $call13 = _mrb_eql($mrb, $beg, $beg12) | 0;
    $tobool14 = ($call13 | 0) == 0;
    if ($tobool14) {
      $eql_p_0 = 0;
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $7 = HEAP32[$3 >> 2] | 0;
    $end = $7 + 12 | 0;
    $8 = HEAP32[$5 >> 2] | 0;
    $end17 = $8 + 12 | 0;
    $call18 = _mrb_eql($mrb, $end, $end17) | 0;
    $tobool19 = ($call18 | 0) == 0;
    if ($tobool19) {
      $eql_p_0 = 0;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $excl = $0 + 16 | 0;
    $9 = $excl;
    $10 = HEAP32[$9 >> 2] | 0;
    $excl21 = $2 + 16 | 0;
    $11 = $excl21;
    $12 = HEAP32[$11 >> 2] | 0;
    $cmp22 = ($10 | 0) == ($12 | 0);
    $_ = $cmp22 & 1;
    $eql_p_0 = $_;
    label = 8;
    break;
   case 8:
    _mrb_bool_value1341($agg_result, $eql_p_0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _inspect_range($agg_result, $mrb, $range) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $range = $range | 0;
  var $str = 0, $tmp4 = 0, $tmp5 = 0, $0 = 0, $1 = 0, $3 = 0, $5 = 0, $8 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 60 | 0;
  tempParam = $range;
  $range = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$range >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$range + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$range + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $str = __stackBase__ | 0;
  $tmp4 = __stackBase__ + 12 | 0;
  $tmp5 = __stackBase__ + 24 | 0;
  $0 = HEAP32[$range >> 2] | 0;
  $1 = $0 + 12 | 0;
  _mrb_inspect($str, $mrb, HEAP32[$1 >> 2] | 0);
  $3 = $str;
  _mrb_inspect($tmp4, $mrb, (HEAP32[$1 >> 2] | 0) + 12 | 0);
  _mrb_str_dup($tmp5, $mrb, $str);
  $5 = $tmp5;
  HEAP32[$3 >> 2] = HEAP32[$5 >> 2] | 0;
  HEAP32[$3 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
  HEAP32[$3 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
  _mrb_str_cat(__stackBase__ + 36 | 0, $mrb, $str, 105820, (HEAP32[$0 + 16 >> 2] | 0) != 0 ? 3 : 2);
  _mrb_str_append(__stackBase__ + 48 | 0, $mrb, $str, $tmp4);
  $8 = $agg_result;
  HEAP32[$8 >> 2] = HEAP32[$3 >> 2] | 0;
  HEAP32[$8 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
  HEAP32[$8 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_init_mrbgems($mrb) {
  $mrb = $mrb | 0;
  _GENERATED_TMP_mrb_mruby_sprintf_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_print_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_array_ext_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_bin_mirb_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_bin_mruby_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_enum_ext_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_eval_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_fiber_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_hash_ext_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_math_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_numeric_ext_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_objectspace_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_proc_ext_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_random_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_range_ext_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_string_ext_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_struct_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_symbol_ext_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_time_gem_init($mrb);
  _GENERATED_TMP_mrb_mruby_js_gem_init($mrb);
  return;
}
function _mrb_mruby_array_ext_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $0 = 0;
  $0 = HEAP32[$mrb + 64 >> 2] | 0;
  _mrb_define_class_method($mrb, $0, 109444, 356, 0);
  _mrb_define_method($mrb, $0, 110732, 22, 0);
  _mrb_define_method($mrb, $0, 106184, 576, 0);
  _mrb_define_method($mrb, $0, 102788, 634, 0);
  return;
}
function _mrb_ary_s_try_convert($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $ary = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $ary = __stackBase__ | 0;
  _mrb_get_args($mrb, 100060, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $ary, tempInt) | 0);
  _mrb_check_array_type($agg_result, $mrb, $ary);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_assoc($agg_result, $mrb, $ary) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $ary = $ary | 0;
  var $k = 0, $tmp = 0, $call = 0, $p = 0, $0 = 0, $len15 = 0, $1 = 0, $2 = 0, $cmp16 = 0, $3 = 0, $v_sroa_0_0__cast1 = 0, $v_sroa_1_4__idx5 = 0, $v_sroa_1_4__cast6 = 0, $v_sroa_2_8__idx9 = 0, $4 = 0, $i_017 = 0, $ptr = 0, $5 = 0, $6 = 0, $arrayidx = 0, $v_sroa_0_0_copyload2 = 0, $v_sroa_1_4_copyload7 = 0, $v_sroa_2_8_copyload10 = 0, $7 = 0, $8 = 0, $9 = 0, $len9 = 0, $10 = 0, $cmp10 = 0, $ptr14 = 0, $11 = 0, $call16 = 0, $tobool17 = 0, $12 = 0, $v_sroa_0_0__cast = 0, $v_sroa_1_4__idx = 0, $v_sroa_1_4__cast = 0, $v_sroa_2_8__idx8 = 0, $inc = 0, $13 = 0, $len = 0, $14 = 0, $15 = 0, $cmp = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $ary;
  $ary = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $k = __stackBase__ | 0;
    $tmp = __stackBase__ + 12 | 0;
    $call = _mrb_get_args($mrb, 100060, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $k, tempInt) | 0) | 0;
    $p = $ary;
    $0 = HEAP32[$p >> 2] | 0;
    $len15 = $0 + 12 | 0;
    $1 = $len15;
    $2 = HEAP32[$1 >> 2] | 0;
    $cmp16 = ($2 | 0) > 0;
    if ($cmp16) {
      label = 3;
      break;
    } else {
      label = 9;
      break;
    }
   case 3:
    $3 = $tmp;
    $v_sroa_0_0__cast1 = $tmp;
    $v_sroa_1_4__idx5 = $3 + 4 | 0;
    $v_sroa_1_4__cast6 = $v_sroa_1_4__idx5;
    $v_sroa_2_8__idx9 = $tmp + 8 | 0;
    $i_017 = 0;
    $4 = $0;
    label = 4;
    break;
   case 4:
    $ptr = $4 + 20 | 0;
    $5 = $ptr;
    $6 = HEAP32[$5 >> 2] | 0;
    $arrayidx = $6 + ($i_017 * 12 & -1) | 0;
    _mrb_check_array_type($tmp, $mrb, $arrayidx);
    $v_sroa_0_0_copyload2 = HEAP32[$v_sroa_0_0__cast1 >> 2] | 0;
    $v_sroa_1_4_copyload7 = HEAP32[$v_sroa_1_4__cast6 >> 2] | 0;
    $v_sroa_2_8_copyload10 = HEAP32[$v_sroa_2_8__idx9 >> 2] | 0;
    $7 = $v_sroa_2_8_copyload10 | $v_sroa_0_0_copyload2;
    $8 = ($7 | 0) == 0;
    if ($8) {
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $9 = $v_sroa_0_0_copyload2;
    $len9 = $9 + 12 | 0;
    $10 = HEAP32[$len9 >> 2] | 0;
    $cmp10 = ($10 | 0) > 0;
    if ($cmp10) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    $ptr14 = $9 + 20 | 0;
    $11 = HEAP32[$ptr14 >> 2] | 0;
    $call16 = _mrb_equal($mrb, $11, $k) | 0;
    $tobool17 = ($call16 | 0) == 0;
    if ($tobool17) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $12 = $agg_result;
    $v_sroa_0_0__cast = $agg_result;
    HEAP32[$v_sroa_0_0__cast >> 2] = $v_sroa_0_0_copyload2;
    $v_sroa_1_4__idx = $12 + 4 | 0;
    $v_sroa_1_4__cast = $v_sroa_1_4__idx;
    HEAP32[$v_sroa_1_4__cast >> 2] = $v_sroa_1_4_copyload7;
    $v_sroa_2_8__idx8 = $agg_result + 8 | 0;
    HEAP32[$v_sroa_2_8__idx8 >> 2] = $v_sroa_2_8_copyload10;
    label = 10;
    break;
   case 8:
    $inc = $i_017 + 1 | 0;
    $13 = HEAP32[$p >> 2] | 0;
    $len = $13 + 12 | 0;
    $14 = $len;
    $15 = HEAP32[$14 >> 2] | 0;
    $cmp = ($inc | 0) < ($15 | 0);
    if ($cmp) {
      $i_017 = $inc;
      $4 = $13;
      label = 4;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    _mrb_nil_value1365($agg_result);
    label = 10;
    break;
   case 10:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_ary_at($agg_result, $mrb, $ary) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $ary = $ary | 0;
  var $pos = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $ary;
  $ary = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $pos = __stackBase__ | 0;
  _mrb_get_args($mrb, 97472, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $pos, tempInt) | 0);
  _mrb_ary_entry($agg_result, $ary, HEAP32[$pos >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_rassoc($agg_result, $mrb, $ary) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $ary = $ary | 0;
  var $value = 0, $call = 0, $p = 0, $0 = 0, $len13 = 0, $1 = 0, $2 = 0, $cmp14 = 0, $3 = 0, $i_015 = 0, $ptr = 0, $4 = 0, $5 = 0, $arrayidx = 0, $6 = 0, $v_sroa_0_0__cast1 = 0, $v_sroa_0_0_copyload2 = 0, $v_sroa_1_4__idx4 = 0, $v_sroa_1_4__cast5 = 0, $v_sroa_1_4_copyload6 = 0, $v_sroa_2_8__idx8 = 0, $v_sroa_2_8_copyload9 = 0, $cmp4 = 0, $len7 = 0, $7 = 0, $8 = 0, $cmp8 = 0, $ptr12 = 0, $9 = 0, $10 = 0, $arrayidx13 = 0, $call14 = 0, $tobool = 0, $11 = 0, $v_sroa_0_0__cast = 0, $v_sroa_1_4__idx = 0, $v_sroa_1_4__cast = 0, $v_sroa_2_8__idx7 = 0, $inc = 0, $12 = 0, $len = 0, $13 = 0, $14 = 0, $cmp = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $ary;
  $ary = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$ary >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$ary + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$ary + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $value = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 100060, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $value, tempInt) | 0) | 0;
    $p = $ary;
    $0 = HEAP32[$p >> 2] | 0;
    $len13 = $0 + 12 | 0;
    $1 = $len13;
    $2 = HEAP32[$1 >> 2] | 0;
    $cmp14 = ($2 | 0) > 0;
    if ($cmp14) {
      $i_015 = 0;
      $3 = $0;
      label = 3;
      break;
    } else {
      label = 8;
      break;
    }
   case 3:
    $ptr = $3 + 20 | 0;
    $4 = $ptr;
    $5 = HEAP32[$4 >> 2] | 0;
    $arrayidx = $5 + ($i_015 * 12 & -1) | 0;
    $6 = $arrayidx;
    $v_sroa_0_0__cast1 = $arrayidx;
    $v_sroa_0_0_copyload2 = HEAP32[$v_sroa_0_0__cast1 >> 2] | 0;
    $v_sroa_1_4__idx4 = $6 + 4 | 0;
    $v_sroa_1_4__cast5 = $v_sroa_1_4__idx4;
    $v_sroa_1_4_copyload6 = HEAP32[$v_sroa_1_4__cast5 >> 2] | 0;
    $v_sroa_2_8__idx8 = $5 + ($i_015 * 12 & -1) + 8 | 0;
    $v_sroa_2_8_copyload9 = HEAP32[$v_sroa_2_8__idx8 >> 2] | 0;
    $cmp4 = ($v_sroa_2_8_copyload9 | 0) == 14;
    if ($cmp4) {
      label = 4;
      break;
    } else {
      label = 7;
      break;
    }
   case 4:
    $len7 = $v_sroa_0_0_copyload2 + 12 | 0;
    $7 = $len7;
    $8 = HEAP32[$7 >> 2] | 0;
    $cmp8 = ($8 | 0) > 1;
    if ($cmp8) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    $ptr12 = $v_sroa_0_0_copyload2 + 20 | 0;
    $9 = $ptr12;
    $10 = HEAP32[$9 >> 2] | 0;
    $arrayidx13 = $10 + 12 | 0;
    $call14 = _mrb_equal($mrb, $arrayidx13, $value) | 0;
    $tobool = ($call14 | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $11 = $agg_result;
    $v_sroa_0_0__cast = $agg_result;
    HEAP32[$v_sroa_0_0__cast >> 2] = $v_sroa_0_0_copyload2;
    $v_sroa_1_4__idx = $11 + 4 | 0;
    $v_sroa_1_4__cast = $v_sroa_1_4__idx;
    HEAP32[$v_sroa_1_4__cast >> 2] = $v_sroa_1_4_copyload6;
    $v_sroa_2_8__idx7 = $agg_result + 8 | 0;
    HEAP32[$v_sroa_2_8__idx7 >> 2] = $v_sroa_2_8_copyload9;
    label = 9;
    break;
   case 7:
    $inc = $i_015 + 1 | 0;
    $12 = HEAP32[$p >> 2] | 0;
    $len = $12 + 12 | 0;
    $13 = $len;
    $14 = HEAP32[$13 >> 2] | 0;
    $cmp = ($inc | 0) < ($14 | 0);
    if ($cmp) {
      $i_015 = $inc;
      $3 = $12;
      label = 3;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _mrb_nil_value1365($agg_result);
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _GENERATED_TMP_mrb_mruby_bin_mirb_gem_init($mrb) {
  $mrb = $mrb | 0;
  _mrb_gc_arena_restore($mrb, _mrb_gc_arena_save($mrb) | 0);
  return;
}
function _GENERATED_TMP_mrb_mruby_bin_mruby_gem_init($mrb) {
  $mrb = $mrb | 0;
  _mrb_gc_arena_restore($mrb, _mrb_gc_arena_save($mrb) | 0);
  return;
}
function _GENERATED_TMP_mrb_mruby_eval_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $call = 0;
  $call = _mrb_gc_arena_save($mrb) | 0;
  _mrb_mruby_eval_gem_init($mrb);
  _mrb_gc_arena_restore($mrb, $call);
  return;
}
function _mrb_mruby_eval_gem_init($mrb) {
  $mrb = $mrb | 0;
  _mrb_define_class_method($mrb, HEAP32[$mrb + 96 >> 2] | 0, 109348, 522, 0);
  return;
}
function _f_eval($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $s = 0, $len = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $s = __stackBase__ | 0;
  $len = __stackBase__ + 4 | 0;
  _mrb_get_args($mrb, 110728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $s, HEAP32[tempInt + 4 >> 2] = $len, tempInt) | 0);
  _mrb_load_nstring($agg_result, $mrb, HEAP32[$s >> 2] | 0, HEAP32[$len >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _GENERATED_TMP_mrb_mruby_fiber_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $call = 0;
  $call = _mrb_gc_arena_save($mrb) | 0;
  _mrb_mruby_fiber_gem_init($mrb);
  _mrb_gc_arena_restore($mrb, $call);
  return;
}
function _mrb_mruby_fiber_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $call = 0, $1 = 0;
  $call = _mrb_define_class($mrb, 109340, HEAP32[$mrb + 44 >> 2] | 0) | 0;
  $1 = $call;
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -522241 | 45056;
  _mrb_define_method($mrb, $call, 110716, 302, 0);
  _mrb_define_method($mrb, $call, 106176, 276, 0);
  _mrb_define_class_method($mrb, $call, 102780, 90, 0);
  return;
}
function _fiber_init($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $blk = 0, $p = 0, $0 = 0, $1 = 0, $call = 0, $tt = 0, $2 = 0, $cmp = 0, $i = 0, $3 = 0, $tobool = 0, $call3 = 0, $p5 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $and = 0, $cmp6 = 0, $call8 = 0, $call10 = 0, $8 = 0, $cxt = 0, $9 = 0, $10 = 0, $call13 = 0, $11 = 0, $stbase = 0, $add_ptr = 0, $12 = 0, $stend = 0, $13 = 0, $stack = 0, $c17 = 0, $14 = 0, $stack18 = 0, $15 = 0, $16 = 0, $17 = 0, $call20 = 0, $18 = 0, $cibase = 0, $add_ptr22 = 0, $19 = 0, $ciend = 0, $20 = 0, $ci24 = 0, $target_class = 0, $21 = 0, $22 = 0, $target_class26 = 0, $proc = 0, $body = 0, $irep = 0, $23 = 0, $iseq = 0, $24 = 0, $pc = 0, $25 = 0, $nregs = 0, $26 = 0, $conv = 0, $nregs29 = 0, $arrayidx30 = 0, $27 = 0, $28 = 0, $29 = 0, $incdec_ptr = 0, $fib = 0, $status = 0, $30 = 0, $31 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $blk = __stackBase__ | 0;
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $1 = $0;
    $call = _mrb_get_args($mrb, 110944, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $blk, tempInt) | 0) | 0;
    $tt = $blk + 8 | 0;
    $2 = HEAP32[$tt >> 2] | 0;
    $cmp = ($2 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $i = $blk;
    $3 = HEAP32[$i >> 2] | 0;
    $tobool = ($3 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $call3 = _mrb_class_get($mrb, 100044) | 0;
    _mrb_raise($mrb, $call3, 110140);
    label = 5;
    break;
   case 5:
    $p5 = $blk;
    $4 = HEAP32[$p5 >> 2] | 0;
    $5 = $4;
    $6 = $4;
    $7 = HEAP32[$6 >> 2] | 0;
    $and = $7 & 262144;
    $cmp6 = ($and | 0) == 0;
    if ($cmp6) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $call8 = _mrb_class_get($mrb, 100044) | 0;
    _mrb_raise($mrb, $call8, 109656);
    label = 7;
    break;
   case 7:
    $call10 = _mrb_malloc($mrb, 52) | 0;
    $8 = $call10;
    $cxt = $0 + 12 | 0;
    $9 = $cxt;
    HEAP32[$9 >> 2] = $8;
    _memset($call10 | 0, 0, 52);
    $10 = HEAP32[$9 >> 2] | 0;
    $call13 = _mrb_calloc($mrb, 64, 12) | 0;
    $11 = $call13;
    $stbase = $10 + 8 | 0;
    HEAP32[$stbase >> 2] = $11;
    $add_ptr = $call13 + 768 | 0;
    $12 = $add_ptr;
    $stend = $10 + 12 | 0;
    HEAP32[$stend >> 2] = $12;
    $13 = HEAP32[$stbase >> 2] | 0;
    $stack = $10 + 4 | 0;
    HEAP32[$stack >> 2] = $13;
    $c17 = $mrb + 8 | 0;
    $14 = HEAP32[$c17 >> 2] | 0;
    $stack18 = $14 + 4 | 0;
    $15 = HEAP32[$stack18 >> 2] | 0;
    $16 = $13;
    $17 = $15;
    HEAP32[$16 >> 2] = HEAP32[$17 >> 2] | 0;
    HEAP32[$16 + 4 >> 2] = HEAP32[$17 + 4 >> 2] | 0;
    HEAP32[$16 + 8 >> 2] = HEAP32[$17 + 8 >> 2] | 0;
    $call20 = _mrb_calloc($mrb, 8, 44) | 0;
    $18 = $call20;
    $cibase = $10 + 20 | 0;
    HEAP32[$cibase >> 2] = $18;
    $add_ptr22 = $call20 + 352 | 0;
    $19 = $add_ptr22;
    $ciend = $10 + 24 | 0;
    HEAP32[$ciend >> 2] = $19;
    $20 = HEAP32[$cibase >> 2] | 0;
    $ci24 = $10 + 16 | 0;
    HEAP32[$ci24 >> 2] = $20;
    $target_class = $4 + 16 | 0;
    $21 = $target_class;
    $22 = HEAP32[$21 >> 2] | 0;
    $target_class26 = $20 + 28 | 0;
    HEAP32[$target_class26 >> 2] = $22;
    $proc = $20 + 4 | 0;
    HEAP32[$proc >> 2] = $5;
    $body = $4 + 12 | 0;
    $irep = $body;
    $23 = HEAP32[$irep >> 2] | 0;
    $iseq = $23 + 12 | 0;
    $24 = HEAP32[$iseq >> 2] | 0;
    $pc = $20 + 20 | 0;
    HEAP32[$pc >> 2] = $24;
    $25 = HEAP32[$irep >> 2] | 0;
    $nregs = $25 + 6 | 0;
    $26 = HEAP16[$nregs >> 1] | 0;
    $conv = $26 & 65535;
    $nregs29 = $20 + 12 | 0;
    HEAP32[$nregs29 >> 2] = $conv;
    $arrayidx30 = $20 + 44 | 0;
    $27 = $arrayidx30;
    $28 = $20;
    _memcpy($27 | 0, $28 | 0, 44);
    $29 = HEAP32[$ci24 >> 2] | 0;
    $incdec_ptr = $29 + 44 | 0;
    HEAP32[$ci24 >> 2] = $incdec_ptr;
    $fib = $10 + 48 | 0;
    HEAP32[$fib >> 2] = $1;
    $status = $10 + 44 | 0;
    HEAP8[$status] = 0;
    $30 = $agg_result;
    $31 = $self;
    HEAP32[$30 >> 2] = HEAP32[$31 >> 2] | 0;
    HEAP32[$30 + 4 >> 2] = HEAP32[$31 + 4 >> 2] | 0;
    HEAP32[$30 + 8 >> 2] = HEAP32[$31 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _GENERATED_TMP_mrb_mruby_array_ext_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $tmp = 0, $agg_tmp = 0, $call = 0, $exc = 0, $0 = 0, $tobool = 0, $1 = 0, $2 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $call = _mrb_gc_arena_save($mrb) | 0;
    _mrb_mruby_array_ext_gem_init($mrb);
    _mrb_load_irep($tmp, $mrb, 89616);
    $exc = $mrb + 16 | 0;
    $0 = HEAP32[$exc >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_print_backtrace($mrb);
    $1 = HEAP32[$exc >> 2] | 0;
    $2 = $1 | 0;
    _mrb_obj_value1352($agg_tmp, $2);
    _mrb_p($mrb, $agg_tmp);
    _exit(1);
   case 4:
    _mrb_gc_arena_restore($mrb, $call);
    STACKTOP = __stackBase__;
    return;
  }
}
function _GENERATED_TMP_mrb_mruby_enum_ext_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $tmp = 0, $agg_tmp = 0, $call = 0, $exc = 0, $0 = 0, $tobool = 0, $1 = 0, $2 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $call = _mrb_gc_arena_save($mrb) | 0;
    _mrb_load_irep($tmp, $mrb, 87392);
    $exc = $mrb + 16 | 0;
    $0 = HEAP32[$exc >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_print_backtrace($mrb);
    $1 = HEAP32[$exc >> 2] | 0;
    $2 = $1 | 0;
    _mrb_obj_value1376($agg_tmp, $2);
    _mrb_p($mrb, $agg_tmp);
    _exit(1);
   case 4:
    _mrb_gc_arena_restore($mrb, $call);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_nil_value1411($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_obj_value1414($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_obj_value1425($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mruby_js_get_string_len($mrb, $argv, $idx) {
  $mrb = $mrb | 0;
  $argv = $argv | 0;
  $idx = $idx | 0;
  return HEAP32[(HEAP32[$argv + ($idx * 12 & -1) >> 2] | 0) + 12 >> 2] | 0;
}
function _mrb_obj_value1471($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mruby_js_invoke_fetch_argp($mrb, $argv, $idx) {
  $mrb = $mrb | 0;
  $argv = $argv | 0;
  $idx = $idx | 0;
  return $argv + ($idx * 12 & -1) | 0;
}
function _mrb_fixnum_value1473($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_float_value1474($agg_result, $f) {
  $agg_result = $agg_result | 0;
  $f = +$f;
  var $v_sroa_0_0__idx = 0;
  $v_sroa_0_0__idx = $agg_result | 0;
  HEAPF64[tempDoublePtr >> 3] = $f, HEAP32[$v_sroa_0_0__idx >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$v_sroa_0_0__idx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  HEAP32[$agg_result + 8 >> 2] = 6;
  return;
}
function _mrb_true_value1475($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = 2;
  return;
}
function _mrb_false_value1476($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_nil_value1477($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _fiber_resume($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $a = 0, $len = 0, $call = 0, $status = 0, $0 = 0, $cmp = 0, $call2 = 0, $_pr = 0, $1 = 0, $cmp5 = 0, $call8 = 0, $call10 = 0, $c11 = 0, $2 = 0, $status12 = 0, $3 = 0, $cmp15 = 0, $stack = 0, $4 = 0, $5 = 0, $add_ptr_sum = 0, $add_ptr18 = 0, $cmp1935 = 0, $b_034 = 0, $a_promoted = 0, $incdec_ptr2137 = 0, $b_036 = 0, $incdec_ptr21 = 0, $6 = 0, $7 = 0, $b_0 = 0, $cmp19 = 0, $8 = 0, $cibase = 0, $9 = 0, $argc = 0, $10 = 0, $prev = 0, $fib = 0, $11 = 0, $tobool = 0, $fib25 = 0, $12 = 0, $13 = 0, $14 = 0, $ci = 0, $15 = 0, $target_class = 0, $16 = 0, $proc = 0, $17 = 0, $env = 0, $18 = 0, $stack32 = 0, $19 = 0, $20 = 0, $21 = 0, $ci34 = 0, $22 = 0, $target_class35 = 0, $23 = 0, $prev37 = 0, $fib39 = 0, $24 = 0, $tobool40 = 0, $fib42 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $a = __stackBase__ | 0;
    $len = __stackBase__ + 4 | 0;
    $call = _fiber_check($mrb, $self) | 0;
    $status = $call + 44 | 0;
    $0 = HEAP8[$status] | 0;
    $cmp = $0 << 24 >> 24 == 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $1 = $0;
      label = 4;
      break;
    }
   case 3:
    $call2 = _mrb_class_get($mrb, 94364) | 0;
    _mrb_raise($mrb, $call2, 93468);
    $_pr = HEAP8[$status] | 0;
    $1 = $_pr;
    label = 4;
    break;
   case 4:
    $cmp5 = $1 << 24 >> 24 == 3;
    if ($cmp5) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $call8 = _mrb_class_get($mrb, 94364) | 0;
    _mrb_raise($mrb, $call8, 92768);
    label = 6;
    break;
   case 6:
    $call10 = _mrb_get_args($mrb, 95428, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $a, HEAP32[tempInt + 4 >> 2] = $len, tempInt) | 0) | 0;
    $c11 = $mrb + 8 | 0;
    $2 = HEAP32[$c11 >> 2] | 0;
    $status12 = $2 + 44 | 0;
    HEAP8[$status12] = 2;
    $3 = HEAP8[$status] | 0;
    $cmp15 = $3 << 24 >> 24 == 0;
    if ($cmp15) {
      label = 7;
      break;
    } else {
      label = 14;
      break;
    }
   case 7:
    $stack = $call + 4 | 0;
    $4 = HEAP32[$stack >> 2] | 0;
    $5 = HEAP32[$len >> 2] | 0;
    $add_ptr_sum = $5 + 1 | 0;
    $add_ptr18 = $4 + ($add_ptr_sum * 12 & -1) | 0;
    $cmp1935 = ($add_ptr_sum | 0) > 1;
    if ($cmp1935) {
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
   case 8:
    $b_034 = $4 + 12 | 0;
    $a_promoted = HEAP32[$a >> 2] | 0;
    $b_036 = $b_034;
    $incdec_ptr2137 = $a_promoted;
    label = 9;
    break;
   case 9:
    $incdec_ptr21 = $incdec_ptr2137 + 12 | 0;
    $6 = $b_036;
    $7 = $incdec_ptr2137;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    $b_0 = $b_036 + 12 | 0;
    $cmp19 = $b_0 >>> 0 < $add_ptr18 >>> 0;
    if ($cmp19) {
      $b_036 = $b_0;
      $incdec_ptr2137 = $incdec_ptr21;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    HEAP32[$a >> 2] = $incdec_ptr21;
    label = 11;
    break;
   case 11:
    $8 = HEAP32[$len >> 2] | 0;
    $cibase = $call + 20 | 0;
    $9 = HEAP32[$cibase >> 2] | 0;
    $argc = $9 + 16 | 0;
    HEAP32[$argc >> 2] = $8;
    $10 = HEAP32[$c11 >> 2] | 0;
    $prev = $call | 0;
    HEAP32[$prev >> 2] = $10;
    $fib = $10 + 48 | 0;
    $11 = HEAP32[$fib >> 2] | 0;
    $tobool = ($11 | 0) == 0;
    if ($tobool) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $fib25 = $call + 48 | 0;
    $12 = HEAP32[$fib25 >> 2] | 0;
    $13 = $12;
    $14 = $11;
    _mrb_field_write_barrier($mrb, $13, $14);
    label = 13;
    break;
   case 13:
    HEAP8[$status] = 1;
    HEAP32[$c11 >> 2] = $call;
    $ci = $call + 16 | 0;
    $15 = HEAP32[$ci >> 2] | 0;
    $target_class = $15 + 28 | 0;
    HEAP32[$target_class >> 2] = 0;
    $16 = HEAP32[$ci >> 2] | 0;
    $proc = $16 + 4 | 0;
    $17 = HEAP32[$proc >> 2] | 0;
    $env = $17 + 20 | 0;
    $18 = HEAP32[$env >> 2] | 0;
    $stack32 = $18 + 12 | 0;
    $19 = HEAP32[$stack32 >> 2] | 0;
    $20 = $agg_result;
    $21 = $19;
    HEAP32[$20 >> 2] = HEAP32[$21 >> 2] | 0;
    HEAP32[$20 + 4 >> 2] = HEAP32[$21 + 4 >> 2] | 0;
    HEAP32[$20 + 8 >> 2] = HEAP32[$21 + 8 >> 2] | 0;
    label = 17;
    break;
   case 14:
    $ci34 = $call + 16 | 0;
    $22 = HEAP32[$ci34 >> 2] | 0;
    $target_class35 = $22 + 28 | 0;
    HEAP32[$target_class35 >> 2] = 0;
    $23 = HEAP32[$c11 >> 2] | 0;
    $prev37 = $call | 0;
    HEAP32[$prev37 >> 2] = $23;
    $fib39 = $23 + 48 | 0;
    $24 = HEAP32[$fib39 >> 2] | 0;
    $tobool40 = ($24 | 0) == 0;
    if ($tobool40) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $fib42 = $call + 48 | 0;
    $25 = HEAP32[$fib42 >> 2] | 0;
    $26 = $25;
    $27 = $24;
    _mrb_field_write_barrier($mrb, $26, $27);
    label = 16;
    break;
   case 16:
    HEAP8[$status] = 1;
    HEAP32[$c11 >> 2] = $call;
    $28 = HEAP32[$a >> 2] | 0;
    $29 = HEAP32[$len >> 2] | 0;
    _fiber_result($agg_result, $mrb, $28, $29);
    label = 17;
    break;
   case 17:
    STACKTOP = __stackBase__;
    return;
  }
}
function _fiber_yield($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $a = 0, $len = 0, $c1 = 0, $0 = 0, $prev = 0, $1 = 0, $tobool = 0, $call = 0, $call2 = 0, $2 = 0, $status = 0, $3 = 0, $4 = 0, $ci = 0, $5 = 0, $target_class = 0, $6 = 0, $7 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $a = __stackBase__ | 0;
    $len = __stackBase__ + 4 | 0;
    $c1 = $mrb + 8 | 0;
    $0 = HEAP32[$c1 >> 2] | 0;
    $prev = $0 | 0;
    $1 = HEAP32[$prev >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 100044) | 0;
    _mrb_raise($mrb, $call, 97444);
    label = 4;
    break;
   case 4:
    $call2 = _mrb_get_args($mrb, 95428, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $a, HEAP32[tempInt + 4 >> 2] = $len, tempInt) | 0) | 0;
    $2 = HEAP32[$prev >> 2] | 0;
    $status = $2 + 44 | 0;
    HEAP8[$status] = 1;
    $3 = HEAP32[$prev >> 2] | 0;
    HEAP32[$c1 >> 2] = $3;
    HEAP32[$prev >> 2] = 0;
    $4 = HEAP32[$c1 >> 2] | 0;
    $ci = $4 + 16 | 0;
    $5 = HEAP32[$ci >> 2] | 0;
    $target_class = $5 + 28 | 0;
    HEAP32[$target_class >> 2] = 0;
    $6 = HEAP32[$a >> 2] | 0;
    $7 = HEAP32[$len >> 2] | 0;
    _fiber_result($agg_result, $mrb, $6, $7);
    STACKTOP = __stackBase__;
    return;
  }
}
function _fiber_result($agg_result, $mrb, $a, $len) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $a = $a | 0;
  $len = $len | 0;
  var $0 = 0, $1 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    if (($len | 0) == 0) {
      label = 3;
      break;
    } else if (($len | 0) == 1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    _mrb_nil_value1411($agg_result);
    label = 6;
    break;
   case 4:
    $0 = $agg_result;
    $1 = $a;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 6;
    break;
   case 5:
    _mrb_ary_new_from_values($agg_result, $mrb, $len, $a);
    label = 6;
    break;
   case 6:
    return;
  }
}
function _fiber_check($mrb, $fib) {
  $mrb = $mrb | 0;
  $fib = $fib | 0;
  var $p = 0, $0 = 0, $cxt = 0, $1 = 0, $2 = 0, $tobool = 0, $call = 0, $3 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $fib;
  $fib = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$fib >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$fib + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$fib + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = $fib;
    $0 = HEAP32[$p >> 2] | 0;
    $cxt = $0 + 12 | 0;
    $1 = $cxt;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 100044) | 0;
    _mrb_raise($mrb, $call, 111436);
    label = 4;
    break;
   case 4:
    $3 = HEAP32[$1 >> 2] | 0;
    STACKTOP = __stackBase__;
    return $3 | 0;
  }
  return 0;
}
function _mrb_hash_values_at($agg_result, $mrb, $argc, $argv, $hash) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $argc = $argc | 0;
  $argv = $argv | 0;
  $hash = $hash | 0;
  var $result = 0, $agg_tmp = 0, $cmp6 = 0, $i_07 = 0, $arrayidx = 0, $inc = 0, $exitcond = 0, $0 = 0, $1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $result = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    _mrb_ary_new_capa($result, $mrb, $argc);
    $cmp6 = ($argc | 0) > 0;
    if ($cmp6) {
      $i_07 = 0;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $arrayidx = $argv + ($i_07 * 12 & -1) | 0;
    _mrb_hash_get($agg_tmp, $mrb, $hash, $arrayidx);
    _mrb_ary_push($mrb, $result, $agg_tmp);
    $inc = $i_07 + 1 | 0;
    $exitcond = ($inc | 0) == ($argc | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $i_07 = $inc;
      label = 3;
      break;
    }
   case 4:
    $0 = $agg_result;
    $1 = $result;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_mruby_hash_ext_gem_init($mrb) {
  $mrb = $mrb | 0;
  _mrb_define_method($mrb, HEAP32[$mrb + 68 >> 2] | 0, 109112, 790, 0);
  return;
}
function _hash_values_at($agg_result, $mrb, $hash) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  var $argv = 0, $argc = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $hash;
  $hash = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$hash >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$hash + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$hash + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $argv = __stackBase__ | 0;
  $argc = __stackBase__ + 4 | 0;
  _mrb_get_args($mrb, 110680, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $argv, HEAP32[tempInt + 4 >> 2] = $argc, tempInt) | 0);
  _mrb_hash_values_at($agg_result, $mrb, HEAP32[$argc >> 2] | 0, HEAP32[$argv >> 2] | 0, $hash);
  STACKTOP = __stackBase__;
  return;
}
function _mruby_js_argument_type($mrb, $argv, $idx) {
  $mrb = $mrb | 0;
  $argv = $argv | 0;
  $idx = $idx | 0;
  var $tt = 0, $0 = 0, $value = 0, $i = 0, $1 = 0, $tobool = 0, $_ = 0, $call = 0, $retval_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $argv + ($idx * 12 & -1) + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    if (($0 | 0) == 0) {
      label = 3;
      break;
    } else if (($0 | 0) == 3) {
      label = 4;
      break;
    } else if (($0 | 0) == 6) {
      label = 5;
      break;
    } else if (($0 | 0) == 8) {
      label = 6;
      break;
    } else if (($0 | 0) == 16) {
      label = 7;
      break;
    } else if (($0 | 0) == 13) {
      label = 8;
      break;
    } else if (($0 | 0) == 14) {
      label = 9;
      break;
    } else if (($0 | 0) == 15) {
      label = 10;
      break;
    } else if (($0 | 0) == 4) {
      label = 11;
      break;
    } else if (($0 | 0) == 2) {
      $retval_0 = 1;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 3:
    $value = $argv + ($idx * 12 & -1) | 0;
    $i = $value;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    $_ = $tobool ? 6 : 0;
    $retval_0 = $_;
    label = 13;
    break;
   case 4:
    $retval_0 = 2;
    label = 13;
    break;
   case 5:
    $retval_0 = 3;
    label = 13;
    break;
   case 6:
    $retval_0 = 4;
    label = 13;
    break;
   case 7:
    $retval_0 = 5;
    label = 13;
    break;
   case 8:
    $retval_0 = 7;
    label = 13;
    break;
   case 9:
    $retval_0 = 8;
    label = 13;
    break;
   case 10:
    $retval_0 = 9;
    label = 13;
    break;
   case 11:
    $retval_0 = 10;
    label = 13;
    break;
   case 12:
    $call = _mrb_class_get($mrb, 109084) | 0;
    _mrb_raisef($mrb, $call, 110632, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $0, tempInt) | 0);
    $retval_0 = -1;
    label = 13;
    break;
   case 13:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mruby_js_get_string_ptr($mrb, $argv, $idx) {
  $mrb = $mrb | 0;
  $argv = $argv | 0;
  $idx = $idx | 0;
  var $tt = 0, $0 = 0, $cmp = 0, $call = 0, $value = 0, $p = 0, $1 = 0, $ptr = 0, $2 = 0, $3 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $argv + ($idx * 12 & -1) + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 16;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 109084) | 0;
    _mrb_raise($mrb, $call, 106140);
    label = 4;
    break;
   case 4:
    $value = $argv + ($idx * 12 & -1) | 0;
    $p = $value;
    $1 = HEAP32[$p >> 2] | 0;
    $ptr = $1 + 20 | 0;
    $2 = $ptr;
    $3 = HEAP32[$2 >> 2] | 0;
    return $3 | 0;
  }
  return 0;
}
function _mruby_js_get_integer($mrb, $argv, $idx) {
  $mrb = $mrb | 0;
  $argv = $argv | 0;
  $idx = $idx | 0;
  var $tt = 0, $0 = 0, $cmp = 0, $call = 0, $value = 0, $i = 0, $1 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $argv + ($idx * 12 & -1) + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 3;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 109084) | 0;
    _mrb_raise($mrb, $call, 102732);
    label = 4;
    break;
   case 4:
    $value = $argv + ($idx * 12 & -1) | 0;
    $i = $value;
    $1 = HEAP32[$i >> 2] | 0;
    return $1 | 0;
  }
  return 0;
}
function _mruby_js_get_float($mrb, $argv, $idx) {
  $mrb = $mrb | 0;
  $argv = $argv | 0;
  $idx = $idx | 0;
  var $tt = 0, $0 = 0, $cmp = 0, $call = 0, $f = 0, $1 = 0.0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $argv + ($idx * 12 & -1) + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 6;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 109084) | 0;
    _mrb_raise($mrb, $call, 1e5);
    label = 4;
    break;
   case 4:
    $f = $argv + ($idx * 12 & -1) | 0;
    $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    return +$1;
  }
  return 0.0;
}
function _mruby_js_get_object_handle($mrb, $argv, $idx) {
  $mrb = $mrb | 0;
  $argv = $argv | 0;
  $idx = $idx | 0;
  var $arrayidx = 0, $tt = 0, $0 = 0, $cmp = 0, $call = 0, $call2 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $arrayidx = $argv + ($idx * 12 & -1) | 0;
    $tt = $argv + ($idx * 12 & -1) + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 8;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 109084) | 0;
    _mrb_raise($mrb, $call, 97396);
    label = 4;
    break;
   case 4:
    $call2 = _mruby_js_get_object_handle_value($mrb, $arrayidx) | 0;
    return $call2 | 0;
  }
  return 0;
}
function _mruby_js_get_object_handle_value($mrb, $js_obj) {
  $mrb = $mrb | 0;
  $js_obj = $js_obj | 0;
  var $value_handle = 0, $call = 0, $call1 = 0, $0 = 0, $cmp = 0, $call2 = 0, $1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $js_obj;
  $js_obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$js_obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$js_obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$js_obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $value_handle = __stackBase__ | 0;
    $call = _mrb_intern1472($mrb, 100712) | 0;
    _mrb_iv_get($value_handle, 0, $js_obj, $call);
    $call1 = _mrb_data_check_and_get($mrb, $value_handle, 63708) | 0;
    $0 = $call1;
    $cmp = ($call1 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call2 = _mrb_class_get($mrb, 109084) | 0;
    _mrb_raise($mrb, $call2, 99680);
    label = 4;
    break;
   case 4:
    $1 = HEAP32[$0 >> 2] | 0;
    STACKTOP = __stackBase__;
    return $1 | 0;
  }
  return 0;
}
function _mruby_js_get_proc($mrb, $argv, $idx) {
  $mrb = $mrb | 0;
  $argv = $argv | 0;
  $idx = $idx | 0;
  var $agg_tmp = 0, $tmp = 0, $arrayidx = 0, $tt = 0, $0 = 0, $cmp = 0, $call = 0, $1 = 0, $2 = 0, $call1 = 0, $p = 0, $3 = 0, $4 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $tmp = __stackBase__ + 12 | 0;
    $arrayidx = $argv + ($idx * 12 & -1) | 0;
    $tt = $argv + ($idx * 12 & -1) + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 13;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 109084) | 0;
    _mrb_raise($mrb, $call, 95396);
    label = 4;
    break;
   case 4:
    $1 = HEAP32[19750] | 0;
    $2 = $1 | 0;
    _mrb_obj_value1471($agg_tmp, $2);
    $call1 = _mrb_intern1472($mrb, 94352) | 0;
    _mrb_funcall_argv($tmp, $mrb, $agg_tmp, $call1, 1, $arrayidx);
    $p = $arrayidx;
    $3 = HEAP32[$p >> 2] | 0;
    $4 = $3;
    STACKTOP = __stackBase__;
    return $4 | 0;
  }
  return 0;
}
function _mrb_intern1472($mrb, $cstr) {
  $mrb = $mrb | 0;
  $cstr = $cstr | 0;
  return _mrb_intern_cstr($mrb, $cstr) | 0;
}
function _mruby_js_get_array_handle($mrb, $argv, $idx) {
  $mrb = $mrb | 0;
  $argv = $argv | 0;
  $idx = $idx | 0;
  var $js_array = 0, $arrayidx = 0, $tt = 0, $0 = 0, $cmp = 0, $call = 0, $call2 = 0, $call3 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $js_array = __stackBase__ | 0;
    $arrayidx = $argv + ($idx * 12 & -1) | 0;
    $tt = $argv + ($idx * 12 & -1) + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 14;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 109084) | 0;
    _mrb_raise($mrb, $call, 93436);
    label = 4;
    break;
   case 4:
    $call2 = _mrb_intern1472($mrb, 92756) | 0;
    _mrb_funcall_argv($js_array, $mrb, $arrayidx, $call2, 0, 0);
    $call3 = _mruby_js_get_object_handle($mrb, $js_array, 0) | 0;
    STACKTOP = __stackBase__;
    return $call3 | 0;
  }
  return 0;
}
function _mruby_js_get_hash_handle($mrb, $argv, $idx) {
  $mrb = $mrb | 0;
  $argv = $argv | 0;
  $idx = $idx | 0;
  var $js_object = 0, $arrayidx = 0, $tt = 0, $0 = 0, $cmp = 0, $call = 0, $call2 = 0, $call3 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $js_object = __stackBase__ | 0;
    $arrayidx = $argv + ($idx * 12 & -1) | 0;
    $tt = $argv + ($idx * 12 & -1) + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 15;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 109084) | 0;
    _mrb_raise($mrb, $call, 111404);
    label = 4;
    break;
   case 4:
    $call2 = _mrb_intern1472($mrb, 110932) | 0;
    _mrb_funcall_argv($js_object, $mrb, $arrayidx, $call2, 0, 0);
    $call3 = _mruby_js_get_object_handle($mrb, $js_object, 0) | 0;
    STACKTOP = __stackBase__;
    return $call3 | 0;
  }
  return 0;
}
function _mruby_js_convert_symbol_to_string($mrb, $argv, $idx) {
  $mrb = $mrb | 0;
  $argv = $argv | 0;
  $idx = $idx | 0;
  var $tmp = 0, $arrayidx = 0, $tt = 0, $0 = 0, $cmp = 0, $call = 0, $call2 = 0, $str_sroa_0_0__idx1 = 0, $str_sroa_0_0_copyload2 = 0.0, $str_sroa_1_8__idx4 = 0, $str_sroa_1_8_copyload5 = 0, $cmp4 = 0, $call6 = 0, $str_sroa_0_0__idx = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $arrayidx = $argv + ($idx * 12 & -1) | 0;
    $tt = $argv + ($idx * 12 & -1) + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 4;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 109084) | 0;
    _mrb_raise($mrb, $call, 110108);
    label = 4;
    break;
   case 4:
    $call2 = _mrb_intern1472($mrb, 109648) | 0;
    _mrb_funcall_argv($tmp, $mrb, $arrayidx, $call2, 0, 0);
    $str_sroa_0_0__idx1 = $tmp | 0;
    $str_sroa_0_0_copyload2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$str_sroa_0_0__idx1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$str_sroa_0_0__idx1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $str_sroa_1_8__idx4 = $tmp + 8 | 0;
    $str_sroa_1_8_copyload5 = HEAP32[$str_sroa_1_8__idx4 >> 2] | 0;
    $cmp4 = ($str_sroa_1_8_copyload5 | 0) == 16;
    if ($cmp4) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $call6 = _mrb_class_get($mrb, 109084) | 0;
    _mrb_raise($mrb, $call6, 109172);
    label = 6;
    break;
   case 6:
    $str_sroa_0_0__idx = $arrayidx | 0;
    HEAPF64[tempDoublePtr >> 3] = $str_sroa_0_0_copyload2, HEAP32[$str_sroa_0_0__idx >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$str_sroa_0_0__idx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    HEAP32[$tt >> 2] = $str_sroa_1_8_copyload5;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mruby_js_invoke_alloc_argv($mrb, $argc) {
  $mrb = $mrb | 0;
  $argc = $argc | 0;
  return _malloc($argc * 12 & -1) | 0;
}
function _mruby_js_invoke_release_argv($mrb, $argv) {
  $mrb = $mrb | 0;
  $argv = $argv | 0;
  _free($argv);
  return;
}
function _mruby_js_invoke_proc($mrb, $proc, $argc, $argv) {
  $mrb = $mrb | 0;
  $proc = $proc | 0;
  $argc = $argc | 0;
  $argv = $argv | 0;
  var $p = 0, $tmp = 0, $agg_tmp = 0, $agg_tmp2 = 0, $tmp3 = 0, $0 = 0, $exc = 0, $1 = 0, $tobool = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 60 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p = __stackBase__ | 0;
    $tmp = __stackBase__ + 12 | 0;
    $agg_tmp = __stackBase__ + 24 | 0;
    $agg_tmp2 = __stackBase__ + 36 | 0;
    $tmp3 = __stackBase__ + 48 | 0;
    $0 = $proc | 0;
    _mrb_obj_value1471($p, $0);
    _mrb_yield_argv($tmp, $mrb, $p, $argc, $argv);
    $exc = $mrb + 16 | 0;
    $1 = HEAP32[$exc >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $2 = $1 | 0;
    _mrb_obj_value1471($agg_tmp, $2);
    _mrb_p($mrb, $agg_tmp);
    label = 4;
    break;
   case 4:
    $3 = HEAP32[19750] | 0;
    $4 = $3 | 0;
    _mrb_obj_value1471($agg_tmp2, $4);
    $call = _mrb_intern1472($mrb, 108732) | 0;
    _mrb_funcall_argv($tmp3, $mrb, $agg_tmp2, $call, 1, $p);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mruby_js_name_error($mrb) {
  $mrb = $mrb | 0;
  _mrb_raise($mrb, _mrb_class_get($mrb, 109084) | 0, 108380);
  return;
}
function _mruby_js_set_integer($mrb, $arg, $val) {
  $mrb = $mrb | 0;
  $arg = $arg | 0;
  $val = $val | 0;
  var $tmp = 0, $0 = 0, $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $tmp = __stackBase__ | 0;
  _mrb_fixnum_value1473($tmp, $val);
  $0 = $arg;
  $1 = $tmp;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mruby_js_set_float($mrb, $arg, $val) {
  $mrb = $mrb | 0;
  $arg = $arg | 0;
  $val = +$val;
  var $tmp = 0, $0 = 0, $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $tmp = __stackBase__ | 0;
  _mrb_float_value1474($tmp, $val);
  $0 = $arg;
  $1 = $tmp;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mruby_js_set_boolean($mrb, $arg, $val) {
  $mrb = $mrb | 0;
  $arg = $arg | 0;
  $val = $val | 0;
  var $tmp = 0, $tmp1 = 0, $cmp = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $tmp1 = __stackBase__ + 12 | 0;
    $cmp = ($val | 0) == 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_true_value1475($tmp);
    $0 = $arg;
    $1 = $tmp;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 5;
    break;
   case 4:
    _mrb_false_value1476($tmp1);
    $2 = $arg;
    $3 = $tmp1;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mruby_js_set_nil($mrb, $arg) {
  $mrb = $mrb | 0;
  $arg = $arg | 0;
  var $tmp = 0, $0 = 0, $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $tmp = __stackBase__ | 0;
  _mrb_nil_value1477($tmp);
  $0 = $arg;
  $1 = $tmp;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mruby_js_set_string($mrb, $arg, $val) {
  $mrb = $mrb | 0;
  $arg = $arg | 0;
  $val = $val | 0;
  var $tmp = 0, $0 = 0, $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $tmp = __stackBase__ | 0;
  _mrb_str_new_cstr($tmp, $mrb, $val);
  $0 = $arg;
  $1 = $tmp;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mruby_js_set_object_handle($mrb, $arg, $handle) {
  $mrb = $mrb | 0;
  $arg = $arg | 0;
  $handle = $handle | 0;
  var $argv = 0, $tmp = 0, $0 = 0, $and = 0, $5 = 0, $6 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  $argv = __stackBase__ | 0;
  $tmp = __stackBase__ + 12 | 0;
  $0 = HEAP32[19769] | 0;
  $and = (HEAP32[$0 >> 2] | 0) >>> 11 & 255;
  _mrb_obj_value1471($tmp, _mrb_obj_alloc($mrb, ($and | 0) == 0 ? 8 : $and, $0) | 0);
  $5 = $arg;
  $6 = $tmp;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2] | 0;
  HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
  HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
  _mrb_fixnum_value1473($argv, $handle);
  _mrb_funcall_argv(__stackBase__ + 24 | 0, $mrb, $arg, HEAP16[$mrb + 36 >> 1] | 0, 1, $argv);
  STACKTOP = __stackBase__;
  return;
}
function _mruby_js_set_array_handle($mrb, $arg, $handle) {
  $mrb = $mrb | 0;
  $arg = $arg | 0;
  $handle = $handle | 0;
  var $argv = 0, $tmp = 0, $0 = 0, $and = 0, $5 = 0, $6 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  $argv = __stackBase__ | 0;
  $tmp = __stackBase__ + 12 | 0;
  $0 = HEAP32[19771] | 0;
  $and = (HEAP32[$0 >> 2] | 0) >>> 11 & 255;
  _mrb_obj_value1471($tmp, _mrb_obj_alloc($mrb, ($and | 0) == 0 ? 8 : $and, $0) | 0);
  $5 = $arg;
  $6 = $tmp;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2] | 0;
  HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
  HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
  _mrb_fixnum_value1473($argv, $handle);
  _mrb_funcall_argv(__stackBase__ + 24 | 0, $mrb, $arg, HEAP16[$mrb + 36 >> 1] | 0, 1, $argv);
  STACKTOP = __stackBase__;
  return;
}
function _mruby_js_set_function_handle($mrb, $arg, $handle, $parent) {
  $mrb = $mrb | 0;
  $arg = $arg | 0;
  $handle = $handle | 0;
  $parent = $parent | 0;
  var $argv = 0, $tmp = 0, $tmp6 = 0, $tmp8 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $and = 0, $cmp = 0, $_and = 0, $call = 0, $4 = 0, $5 = 0, $6 = 0, $arrayidx = 0, $argv6 = 0, $cmp2 = 0, $arrayidx4 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $init_sym = 0, $11 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 60 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $argv = __stackBase__ | 0;
    $tmp = __stackBase__ + 24 | 0;
    $tmp6 = __stackBase__ + 36 | 0;
    $tmp8 = __stackBase__ + 48 | 0;
    $0 = HEAP32[19770] | 0;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 >>> 11;
    $and = $3 & 255;
    $cmp = ($and | 0) == 0;
    $_and = $cmp ? 8 : $and;
    $call = _mrb_obj_alloc($mrb, $_and, $0) | 0;
    $4 = $call | 0;
    _mrb_obj_value1471($tmp, $4);
    $5 = $arg;
    $6 = $tmp;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2] | 0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
    $arrayidx = $argv | 0;
    $argv6 = $argv | 0;
    _mrb_fixnum_value1473($argv6, $handle);
    $cmp2 = ($parent | 0) == 0;
    $arrayidx4 = $argv + 12 | 0;
    if ($cmp2) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $7 = $arrayidx4;
    $8 = $parent;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    label = 5;
    break;
   case 4:
    _mrb_nil_value1477($tmp6);
    $9 = $arrayidx4;
    $10 = $tmp6;
    HEAP32[$9 >> 2] = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 + 4 >> 2] = HEAP32[$10 + 4 >> 2] | 0;
    HEAP32[$9 + 8 >> 2] = HEAP32[$10 + 8 >> 2] | 0;
    label = 5;
    break;
   case 5:
    $init_sym = $mrb + 36 | 0;
    $11 = HEAP16[$init_sym >> 1] | 0;
    _mrb_funcall_argv($tmp8, $mrb, $arg, $11, 2, $arrayidx);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_mruby_js_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $call = 0, $call1 = 0, $call2 = 0, $call3 = 0;
  $call = _mrb_define_module($mrb, 108096) | 0;
  HEAP32[19750] = $call;
  _mrb_define_class_method($mrb, $call, 107652, 514, 0);
  _mrb_define_class_method($mrb, HEAP32[19750] | 0, 107212, 514, 0);
  _mrb_define_class_method($mrb, HEAP32[19750] | 0, 106680, 514, 0);
  $call1 = _mrb_define_class_under($mrb, HEAP32[19750] | 0, 106344, HEAP32[$mrb + 44 >> 2] | 0) | 0;
  HEAP32[19769] = $call1;
  _mrb_define_method($mrb, $call1, 105808, 716, 0);
  _mrb_define_method($mrb, HEAP32[19769] | 0, 105548, 120, 0);
  _mrb_define_method($mrb, HEAP32[19769] | 0, 105144, 836, 0);
  _mrb_define_method($mrb, HEAP32[19769] | 0, 104704, 120, 0);
  _mrb_define_method($mrb, HEAP32[19769] | 0, 104336, 836, 0);
  _mrb_define_class_method($mrb, HEAP32[19769] | 0, 104012, 456, 0);
  $call2 = _mrb_define_class_under($mrb, HEAP32[19750] | 0, 103732, HEAP32[19769] | 0) | 0;
  HEAP32[19770] = $call2;
  _mrb_define_method($mrb, $call2, 103436, 604, 0);
  $call3 = _mrb_define_class_under($mrb, HEAP32[19750] | 0, 103164, HEAP32[19769] | 0) | 0;
  HEAP32[19771] = $call3;
  _mrb_define_class_method($mrb, $call3, 104012, 710, 0);
  _mrb_define_method($mrb, HEAP32[$mrb + 64 >> 2] | 0, 92756, 42, 0);
  return;
}
function _mrb_js_get_root_object($agg_result, $mrb, $mod) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $mod = $mod | 0;
  var $ret = 0, $call = 0, $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $tobool = 0, $2 = 0, $3 = 0, $4 = 0, $cmp2 = 0, $5 = 0, $tobool6 = 0, $6 = 0, $7 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $mod;
  $mod = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$mod >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$mod + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$mod + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ret = __stackBase__ | 0;
    $call = _mrb_intern1472($mrb, 100148) | 0;
    _mrb_iv_get($ret, 0, $mod, $call);
    $tt = $ret + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $i = $ret;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $2 = $agg_result;
    $3 = $ret;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    label = 9;
    break;
   case 5:
    _js_get_root_object($mrb | 0, $ret | 0);
    $4 = HEAP32[$tt >> 2] | 0;
    $cmp2 = ($4 | 0) == 0;
    if ($cmp2) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $5 = HEAP32[$i >> 2] | 0;
    $tobool6 = ($5 | 0) == 0;
    if ($tobool6) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _mrb_iv_set($mrb, $mod, $call, $ret);
    label = 8;
    break;
   case 8:
    $6 = $agg_result;
    $7 = $ret;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_js_obj_initialize($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $handle = 0, $agg_tmp = 0, $call = 0, $0 = 0, $cmp = 0, $call1 = 0, $call2 = 0, $1 = 0, $cmp3 = 0, $call5 = 0, $2 = 0, $call7 = 0, $object_class = 0, $3 = 0, $call8 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $handle = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 4 | 0;
    HEAP32[$handle >> 2] = -1;
    $call = _mrb_get_args($mrb, 101700, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $handle, tempInt) | 0) | 0;
    $0 = HEAP32[$handle >> 2] | 0;
    $cmp = ($0 | 0) < 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call1 = _mrb_class_get($mrb, 109084) | 0;
    _mrb_raise($mrb, $call1, 101472);
    label = 4;
    break;
   case 4:
    $call2 = _malloc(4) | 0;
    $1 = $call2;
    $cmp3 = ($call2 | 0) == 0;
    if ($cmp3) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $call5 = _mrb_class_get($mrb, 101204) | 0;
    _mrb_raise($mrb, $call5, 101024);
    label = 6;
    break;
   case 6:
    $2 = HEAP32[$handle >> 2] | 0;
    HEAP32[$1 >> 2] = $2;
    $call7 = _mrb_intern1472($mrb, 100712) | 0;
    $object_class = $mrb + 44 | 0;
    $3 = HEAP32[$object_class >> 2] | 0;
    $call8 = _mrb_data_object_alloc($mrb, $3, $call2, 63708) | 0;
    $4 = $call8 | 0;
    _mrb_obj_value1471($agg_tmp, $4);
    _mrb_iv_set($mrb, $self, $call7, $agg_tmp);
    $5 = $agg_result;
    $6 = $self;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2] | 0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_js_obj_get($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $field = 0, $ret = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $field = __stackBase__ | 0;
  $ret = __stackBase__ + 12 | 0;
  _mrb_nil_value1477($ret);
  _mrb_get_args($mrb, 101912, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $field, tempInt) | 0);
  _js_get_field($mrb | 0, $self | 0, $field | 0, $ret | 0);
  $0 = $agg_result;
  $1 = $ret;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _GENERATED_TMP_mrb_mruby_hash_ext_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $tmp = 0, $agg_tmp = 0, $call = 0, $exc = 0, $0 = 0, $tobool = 0, $1 = 0, $2 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $call = _mrb_gc_arena_save($mrb) | 0;
    _mrb_mruby_hash_ext_gem_init($mrb);
    _mrb_load_irep($tmp, $mrb, 86864);
    $exc = $mrb + 16 | 0;
    $0 = HEAP32[$exc >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_print_backtrace($mrb);
    $1 = HEAP32[$exc >> 2] | 0;
    $2 = $1 | 0;
    _mrb_obj_value1414($agg_tmp, $2);
    _mrb_p($mrb, $agg_tmp);
    _exit(1);
   case 4:
    _mrb_gc_arena_restore($mrb, $call);
    STACKTOP = __stackBase__;
    return;
  }
}
function _GENERATED_TMP_mrb_mruby_js_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $tmp = 0, $agg_tmp = 0, $call = 0, $exc = 0, $0 = 0, $tobool = 0, $1 = 0, $2 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $call = _mrb_gc_arena_save($mrb) | 0;
    _mrb_mruby_js_gem_init($mrb);
    _mrb_load_irep($tmp, $mrb, 84012);
    $exc = $mrb + 16 | 0;
    $0 = HEAP32[$exc >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_print_backtrace($mrb);
    $1 = HEAP32[$exc >> 2] | 0;
    $2 = $1 | 0;
    _mrb_obj_value1425($agg_tmp, $2);
    _mrb_p($mrb, $agg_tmp);
    _exit(1);
   case 4:
    _mrb_gc_arena_restore($mrb, $call);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_float_value1520($agg_result, $f) {
  $agg_result = $agg_result | 0;
  $f = +$f;
  var $v_sroa_0_0__idx = 0;
  $v_sroa_0_0__idx = $agg_result | 0;
  HEAPF64[tempDoublePtr >> 3] = $f, HEAP32[$v_sroa_0_0__idx >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$v_sroa_0_0__idx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  HEAP32[$agg_result + 8 >> 2] = 6;
  return;
}
function _mrb_fixnum_value1523($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _os_count_object_type($mrb, $obj, $data) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $data = $data | 0;
  var $0 = 0, $1 = 0, $2 = 0, $current_white_part = 0, $3 = 0, $xor = 0, $and = 0, $and1 = 0, $tobool = 0, $bf_clear2 = 0, $cmp = 0, $freed = 0, $4 = 0, $5 = 0, $inc = 0, $counts = 0, $6 = 0, $arrayidx = 0, $7 = 0, $inc4 = 0, $total = 0, $8 = 0, $inc5 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $obj;
    $1 = HEAP32[$0 >> 2] | 0;
    $2 = $1 >>> 8;
    $current_white_part = $mrb + 524 | 0;
    $3 = HEAP32[$current_white_part >> 2] | 0;
    $xor = $3 ^ 3;
    $and = $2 & 3;
    $and1 = $and & $xor;
    $tobool = ($and1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $bf_clear2 = $1 & 255;
    $cmp = ($bf_clear2 | 0) == 1;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $freed = $data + 4 | 0;
    $4 = $freed;
    $5 = HEAP32[$4 >> 2] | 0;
    $inc = $5 + 1 | 0;
    HEAP32[$4 >> 2] = $inc;
    label = 6;
    break;
   case 5:
    $counts = $data + 8 | 0;
    $6 = $counts;
    $arrayidx = $6 + ($bf_clear2 << 2) | 0;
    $7 = HEAP32[$arrayidx >> 2] | 0;
    $inc4 = $7 + 1 | 0;
    HEAP32[$arrayidx >> 2] = $inc4;
    $total = $data;
    $8 = HEAP32[$total >> 2] | 0;
    $inc5 = $8 + 1 | 0;
    HEAP32[$total >> 2] = $inc5;
    label = 6;
    break;
   case 6:
    return;
  }
}
function _mrb_fixnum_value1568($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_obj_value1575($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_obj_value1588($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_js_obj_set($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $field = 0, $val = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $field = __stackBase__ | 0;
  $val = __stackBase__ + 12 | 0;
  _mrb_get_args($mrb, 102124, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $field, HEAP32[tempInt + 4 >> 2] = $val, tempInt) | 0);
  _js_set_field($mrb | 0, $self | 0, $field | 0, $val | 0);
  _mrb_nil_value1477($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_js_obj_create($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $ret = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $ret = __stackBase__ | 0;
  _mrb_nil_value1477($ret);
  _js_create_empty_object($mrb | 0, $ret | 0);
  $0 = $agg_result;
  $1 = $ret;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_js_func_invoke_internal($agg_result, $mrb, $func) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $func = $func | 0;
  var $argv = 0, $ret = 0, $this_value = 0, $argc = 0, $type = 0, $tmp = 0, $call = 0, $0 = 0, $cmp = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $incdec_ptr = 0, $5 = 0, $dec = 0, $call1 = 0, $6 = 0, $7 = 0, $call2 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  tempParam = $func;
  $func = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$func >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$func + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$func + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $argv = __stackBase__ | 0;
    $ret = __stackBase__ + 4 | 0;
    $this_value = __stackBase__ + 16 | 0;
    $argc = __stackBase__ + 28 | 0;
    $type = __stackBase__ + 32 | 0;
    $tmp = __stackBase__ + 36 | 0;
    HEAP32[$argv >> 2] = 0;
    _mrb_nil_value1477($ret);
    HEAP32[$argc >> 2] = 0;
    HEAP32[$type >> 2] = -1;
    $call = _mrb_get_args($mrb, 102892, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $type, HEAP32[tempInt + 4 >> 2] = $argv, HEAP32[tempInt + 8 >> 2] = $argc, tempInt) | 0) | 0;
    $0 = HEAP32[$type >> 2] | 0;
    $cmp = ($0 | 0) == 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $1 = HEAP32[$argv >> 2] | 0;
    $2 = $this_value;
    $3 = $1;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    $4 = HEAP32[$argv >> 2] | 0;
    $incdec_ptr = $4 + 12 | 0;
    HEAP32[$argv >> 2] = $incdec_ptr;
    $5 = HEAP32[$argc >> 2] | 0;
    $dec = $5 - 1 | 0;
    HEAP32[$argc >> 2] = $dec;
    label = 5;
    break;
   case 4:
    $call1 = _mrb_intern1472($mrb, 102316) | 0;
    _mrb_funcall_argv($tmp, $mrb, $func, $call1, 0, 0);
    $6 = $this_value;
    $7 = $tmp;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    label = 5;
    break;
   case 5:
    $call2 = _mruby_js_get_object_handle_value($mrb, $func) | 0;
    $8 = HEAP32[$argv >> 2] | 0;
    $9 = HEAP32[$argc >> 2] | 0;
    $10 = HEAP32[$type >> 2] | 0;
    _js_invoke($mrb | 0, $this_value | 0, $call2 | 0, $8 | 0, $9 | 0, $ret | 0, $10 | 0);
    $11 = $agg_result;
    $12 = $ret;
    HEAP32[$11 >> 2] = HEAP32[$12 >> 2] | 0;
    HEAP32[$11 + 4 >> 2] = HEAP32[$12 + 4 >> 2] | 0;
    HEAP32[$11 + 8 >> 2] = HEAP32[$12 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_js_array_create($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $ret = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $ret = __stackBase__ | 0;
  _mrb_nil_value1477($ret);
  _js_create_array($mrb | 0, 0, -1 | 0, $ret | 0);
  $0 = $agg_result;
  $1 = $ret;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_array_tojs($agg_result, $mrb, $arr) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $arr = $arr | 0;
  var $ret = 0, $0 = 0, $5 = 0, $6 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $arr;
  $arr = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$arr >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$arr + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$arr + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $ret = __stackBase__ | 0;
  _mrb_nil_value1477($ret);
  $0 = HEAP32[$arr >> 2] | 0;
  _js_create_array($mrb | 0, HEAP32[$0 + 20 >> 2] | 0, HEAP32[$0 + 12 >> 2] | 0, $ret | 0);
  $5 = $agg_result;
  $6 = $ret;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2] | 0;
  HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
  HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mruby_js_object_handle_free($mrb, $p) {
  $mrb = $mrb | 0;
  $p = $p | 0;
  var $tobool = 0, $0 = 0, $1 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tobool = ($p | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $0 = $p;
    $1 = HEAP32[$0 >> 2] | 0;
    _js_release_object($mrb | 0, $1 | 0);
    label = 4;
    break;
   case 4:
    _free($p);
    return;
  }
}
function _GENERATED_TMP_mrb_mruby_math_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $call = 0;
  $call = _mrb_gc_arena_save($mrb) | 0;
  _mrb_mruby_math_gem_init($mrb);
  _mrb_gc_arena_restore($mrb, $call);
  return;
}
function _mrb_mruby_math_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $agg_tmp = 0, $agg_tmp1 = 0, $agg_tmp2 = 0, $call = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  $agg_tmp = __stackBase__ | 0;
  $agg_tmp1 = __stackBase__ + 12 | 0;
  $agg_tmp2 = __stackBase__ + 24 | 0;
  $call = _mrb_define_module($mrb, 108952) | 0;
  _mrb_float_value1520($agg_tmp, 3.141592653589793);
  _mrb_define_const($mrb, $call, 110628, $agg_tmp);
  _mrb_float_value1520($agg_tmp1, 2.718281828459045);
  _mrb_define_const($mrb, $call, 106136, $agg_tmp1);
  _mrb_float_value1520($agg_tmp2, 1.0e-12);
  _mrb_define_const($mrb, $call, 102720, $agg_tmp2);
  _mrb_define_module_function($mrb, $call, 99996, 188, 0);
  _mrb_define_module_function($mrb, $call, 97392, 308, 0);
  _mrb_define_module_function($mrb, $call, 95392, 246, 0);
  _mrb_define_module_function($mrb, $call, 94344, 748, 0);
  _mrb_define_module_function($mrb, $call, 93428, 596, 0);
  _mrb_define_module_function($mrb, $call, 92748, 458, 0);
  _mrb_define_module_function($mrb, $call, 111396, 196, 0);
  _mrb_define_module_function($mrb, $call, 110924, 664, 0);
  _mrb_define_module_function($mrb, $call, 110100, 206, 0);
  _mrb_define_module_function($mrb, $call, 109640, 346, 0);
  _mrb_define_module_function($mrb, $call, 109164, 192, 0);
  _mrb_define_module_function($mrb, $call, 108724, 212, 0);
  _mrb_define_module_function($mrb, $call, 108372, 736, 0);
  _mrb_define_module_function($mrb, $call, 108092, 288, 0);
  _mrb_define_module_function($mrb, $call, 107648, 170, 0);
  _mrb_define_module_function($mrb, $call, 107192, 846, 0);
  _mrb_define_module_function($mrb, $call, 106672, 16, 0);
  _mrb_define_module_function($mrb, $call, 106336, 336, 0);
  _mrb_define_module_function($mrb, $call, 105800, 292, 0);
  _mrb_define_module_function($mrb, $call, 105540, 138, 0);
  _mrb_define_module_function($mrb, $call, 105136, 168, 0);
  _mrb_define_module_function($mrb, $call, 104696, 36, 0);
  _mrb_define_module_function($mrb, $call, 104332, 462, 0);
  _mrb_define_module_function($mrb, $call, 104004, 102, 0);
  STACKTOP = __stackBase__;
  return;
}
function _math_sin($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +Math_sin(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_cos($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +Math_cos(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_tan($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +Math_tan(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_asin($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +Math_asin(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_acos($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +Math_acos(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_atan($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +Math_atan(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_atan2($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $y = 0, $0 = 0.0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  $y = __stackBase__ + 8 | 0;
  _mrb_get_args($mrb, 103432, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $x, HEAP32[tempInt + 4 >> 2] = $y, tempInt) | 0);
  $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  $call1 = +Math_atan2(+$0, +(HEAP32[tempDoublePtr >> 2] = HEAP32[$y >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$y + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_sinh($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +_sinh(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_cosh($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +_cosh(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_tanh($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +_tanh(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_asinh($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +_asinh(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_acosh($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +_acosh(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_atanh($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +_atanh(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_exp($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +Math_exp(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_log($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $base = 0, $call = 0, $0 = 0.0, $call1 = 0.0, $cmp = 0, $1 = 0.0, $call2 = 0.0, $div = 0.0, $2 = 0.0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $x = __stackBase__ | 0;
    $base = __stackBase__ + 8 | 0;
    $call = _mrb_get_args($mrb, 102888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $x, HEAP32[tempInt + 4 >> 2] = $base, tempInt) | 0) | 0;
    $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $call1 = +Math_log(+$0);
    HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $cmp = ($call | 0) == 2;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$base >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$base + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $call2 = +Math_log(+$1);
    $div = $call1 / $call2;
    HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    label = 4;
    break;
   case 4:
    $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    _mrb_float_value1520($agg_result, $2);
    STACKTOP = __stackBase__;
    return;
  }
}
function _math_log2($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $div = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $div = +Math_log(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3])) / .6931471805599453;
  HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $div);
  STACKTOP = __stackBase__;
  return;
}
function _math_log10($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +_log10(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_sqrt($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +Math_sqrt(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_cbrt($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +_cbrt(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_frexp($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $exp = 0, $agg_tmp = 0, $agg_tmp2 = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  $exp = __stackBase__ + 8 | 0;
  $agg_tmp = __stackBase__ + 12 | 0;
  $agg_tmp2 = __stackBase__ + 24 | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +_frexp(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]), $exp | 0);
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_tmp, $call1);
  _mrb_fixnum_value1523($agg_tmp2, HEAP32[$exp >> 2] | 0);
  _mrb_assoc_new($agg_result, $mrb, $agg_tmp, $agg_tmp2);
  STACKTOP = __stackBase__;
  return;
}
function _math_ldexp($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $i = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  $i = __stackBase__ + 8 | 0;
  _mrb_get_args($mrb, 103160, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $x, HEAP32[tempInt + 4 >> 2] = $i, tempInt) | 0);
  $call1 = +_ldexp(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]), HEAP32[$i >> 2] | 0);
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_hypot($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $y = 0, $0 = 0.0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  $y = __stackBase__ + 8 | 0;
  _mrb_get_args($mrb, 103432, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $x, HEAP32[tempInt + 4 >> 2] = $y, tempInt) | 0);
  $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  $call1 = +_hypot(+$0, +(HEAP32[tempDoublePtr >> 2] = HEAP32[$y >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$y + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_erf($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +_erf(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _math_erfc($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $x = 0, $call1 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $x = __stackBase__ | 0;
  _mrb_get_args($mrb, 103728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $x, tempInt) | 0);
  $call1 = +_erfc(+(HEAP32[tempDoublePtr >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]));
  HEAPF64[tempDoublePtr >> 3] = $call1, HEAP32[$x >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$x + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_float_value1520($agg_result, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _GENERATED_TMP_mrb_mruby_numeric_ext_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $call = 0;
  $call = _mrb_gc_arena_save($mrb) | 0;
  _mrb_mruby_numeric_ext_gem_init($mrb);
  _mrb_gc_arena_restore($mrb, $call);
  return;
}
function _mrb_mruby_numeric_ext_gem_init($mrb) {
  $mrb = $mrb | 0;
  _mrb_define_method($mrb, _mrb_class_get($mrb, 108628) | 0, 110592, 628, 0);
  return;
}
function _mrb_int_chr($agg_result, $mrb, $x) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  var $c = 0, $i = 0, $0 = 0, $cmp = 0, $call = 0, $conv = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $c = __stackBase__ | 0;
    $i = $x;
    $0 = HEAP32[$i >> 2] | 0;
    $cmp = ($0 | 0) > 255;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 106100) | 0;
    _mrb_raisef($mrb, $call, 102668, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$x >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$x + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$x + 8 >> 2] | 0, tempInt) | 0);
    label = 4;
    break;
   case 4:
    $conv = $0 & 255;
    HEAP8[$c] = $conv;
    _mrb_str_new($agg_result, $mrb, $c, 1);
    STACKTOP = __stackBase__;
    return;
  }
}
function _GENERATED_TMP_mrb_mruby_objectspace_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $call = 0;
  $call = _mrb_gc_arena_save($mrb) | 0;
  _mrb_mruby_objectspace_gem_init($mrb);
  _mrb_gc_arena_restore($mrb, $call);
  return;
}
function _os_count_objects($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $obj_count = 0, $hash = 0, $tmp = 0, $tmp1 = 0, $tmp4 = 0, $agg_tmp = 0, $agg_tmp8 = 0, $agg_tmp10 = 0, $agg_tmp12 = 0, $type = 0, $tmp19 = 0, $tmp22 = 0, $tmp25 = 0, $tmp28 = 0, $tmp31 = 0, $tmp34 = 0, $tmp37 = 0, $tmp40 = 0, $tmp43 = 0, $tmp46 = 0, $tmp49 = 0, $tmp52 = 0, $tmp55 = 0, $tmp58 = 0, $tmp61 = 0, $tmp64 = 0, $tmp67 = 0, $tmp70 = 0, $tmp73 = 0, $tmp76 = 0, $tmp79 = 0, $tmp82 = 0, $tmp83 = 0, $agg_tmp87 = 0, $call = 0, $cmp = 0, $0 = 0, $1 = 0, $tt = 0, $2 = 0, $cmp2 = 0, $scevgep = 0, $scevgep43 = 0, $total = 0, $freed = 0, $3 = 0, $call7 = 0, $4 = 0, $call11 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $i_140 = 0, $call18 = 0, $call21 = 0, $call24 = 0, $call27 = 0, $call30 = 0, $call33 = 0, $call36 = 0, $call39 = 0, $call42 = 0, $call45 = 0, $call48 = 0, $call51 = 0, $call54 = 0, $call57 = 0, $call60 = 0, $call63 = 0, $call66 = 0, $call69 = 0, $call72 = 0, $call75 = 0, $call78 = 0, $call81 = 0, $arrayidx85 = 0, $52 = 0, $tobool = 0, $inc92 = 0, $exitcond = 0, $53 = 0, $54 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 500 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $obj_count = __stackBase__ | 0;
    $hash = __stackBase__ + 104 | 0;
    $tmp = __stackBase__ + 116 | 0;
    $tmp1 = __stackBase__ + 128 | 0;
    $tmp4 = __stackBase__ + 140 | 0;
    $agg_tmp = __stackBase__ + 152 | 0;
    $agg_tmp8 = __stackBase__ + 164 | 0;
    $agg_tmp10 = __stackBase__ + 176 | 0;
    $agg_tmp12 = __stackBase__ + 188 | 0;
    $type = __stackBase__ + 200 | 0;
    $tmp19 = __stackBase__ + 212 | 0;
    $tmp22 = __stackBase__ + 224 | 0;
    $tmp25 = __stackBase__ + 236 | 0;
    $tmp28 = __stackBase__ + 248 | 0;
    $tmp31 = __stackBase__ + 260 | 0;
    $tmp34 = __stackBase__ + 272 | 0;
    $tmp37 = __stackBase__ + 284 | 0;
    $tmp40 = __stackBase__ + 296 | 0;
    $tmp43 = __stackBase__ + 308 | 0;
    $tmp46 = __stackBase__ + 320 | 0;
    $tmp49 = __stackBase__ + 332 | 0;
    $tmp52 = __stackBase__ + 344 | 0;
    $tmp55 = __stackBase__ + 356 | 0;
    $tmp58 = __stackBase__ + 368 | 0;
    $tmp61 = __stackBase__ + 380 | 0;
    $tmp64 = __stackBase__ + 392 | 0;
    $tmp67 = __stackBase__ + 404 | 0;
    $tmp70 = __stackBase__ + 416 | 0;
    $tmp73 = __stackBase__ + 428 | 0;
    $tmp76 = __stackBase__ + 440 | 0;
    $tmp79 = __stackBase__ + 452 | 0;
    $tmp82 = __stackBase__ + 464 | 0;
    $tmp83 = __stackBase__ + 476 | 0;
    $agg_tmp87 = __stackBase__ + 488 | 0;
    $call = _mrb_get_args($mrb, 108624, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $hash, tempInt) | 0) | 0;
    $cmp = ($call | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_hash_new($tmp, $mrb);
    $0 = $hash;
    $1 = $tmp;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 4;
    break;
   case 4:
    _mrb_hash_empty_p($tmp1, 0, $hash);
    $tt = $tmp1 + 8 | 0;
    $2 = HEAP32[$tt >> 2] | 0;
    $cmp2 = ($2 | 0) == 0;
    if ($cmp2) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _mrb_hash_clear($tmp4, 0, $hash);
    label = 6;
    break;
   case 6:
    $scevgep = $obj_count + 8 | 0;
    $scevgep43 = $scevgep;
    _memset($scevgep43 | 0, 0, 96);
    $total = $obj_count | 0;
    HEAP32[$total >> 2] = 0;
    $freed = $obj_count + 4 | 0;
    HEAP32[$freed >> 2] = 0;
    $3 = $obj_count;
    _mrb_objspace_each_objects($mrb, 792, $3);
    $call7 = _mrb_intern_cstr($mrb, 110584) | 0;
    _mrb_symbol_value1567($agg_tmp, $call7);
    $4 = HEAP32[$total >> 2] | 0;
    _mrb_fixnum_value1568($agg_tmp8, $4);
    _mrb_hash_set($mrb, $hash, $agg_tmp, $agg_tmp8);
    $call11 = _mrb_intern_cstr($mrb, 106092) | 0;
    _mrb_symbol_value1567($agg_tmp10, $call11);
    $5 = HEAP32[$freed >> 2] | 0;
    _mrb_fixnum_value1568($agg_tmp12, $5);
    _mrb_hash_set($mrb, $hash, $agg_tmp10, $agg_tmp12);
    $6 = $type;
    $7 = $tmp83;
    $8 = $type;
    $9 = $tmp19;
    $10 = $type;
    $11 = $tmp22;
    $12 = $type;
    $13 = $tmp25;
    $14 = $type;
    $15 = $tmp28;
    $16 = $type;
    $17 = $tmp31;
    $18 = $type;
    $19 = $tmp34;
    $20 = $type;
    $21 = $tmp37;
    $22 = $type;
    $23 = $tmp40;
    $24 = $type;
    $25 = $tmp43;
    $26 = $type;
    $27 = $tmp46;
    $28 = $type;
    $29 = $tmp49;
    $30 = $type;
    $31 = $tmp52;
    $32 = $type;
    $33 = $tmp55;
    $34 = $type;
    $35 = $tmp58;
    $36 = $type;
    $37 = $tmp61;
    $38 = $type;
    $39 = $tmp64;
    $40 = $type;
    $41 = $tmp67;
    $42 = $type;
    $43 = $tmp70;
    $44 = $type;
    $45 = $tmp73;
    $46 = $type;
    $47 = $tmp76;
    $48 = $type;
    $49 = $tmp79;
    $50 = $type;
    $51 = $tmp82;
    $i_140 = 0;
    label = 7;
    break;
   case 7:
    if (($i_140 | 0) == 0) {
      label = 8;
      break;
    } else if (($i_140 | 0) == 1) {
      label = 9;
      break;
    } else if (($i_140 | 0) == 2) {
      label = 10;
      break;
    } else if (($i_140 | 0) == 3) {
      label = 11;
      break;
    } else if (($i_140 | 0) == 4) {
      label = 12;
      break;
    } else if (($i_140 | 0) == 5) {
      label = 13;
      break;
    } else if (($i_140 | 0) == 6) {
      label = 14;
      break;
    } else if (($i_140 | 0) == 7) {
      label = 15;
      break;
    } else if (($i_140 | 0) == 8) {
      label = 16;
      break;
    } else if (($i_140 | 0) == 9) {
      label = 17;
      break;
    } else if (($i_140 | 0) == 10) {
      label = 18;
      break;
    } else if (($i_140 | 0) == 11) {
      label = 19;
      break;
    } else if (($i_140 | 0) == 12) {
      label = 20;
      break;
    } else if (($i_140 | 0) == 13) {
      label = 21;
      break;
    } else if (($i_140 | 0) == 14) {
      label = 22;
      break;
    } else if (($i_140 | 0) == 15) {
      label = 23;
      break;
    } else if (($i_140 | 0) == 16) {
      label = 24;
      break;
    } else if (($i_140 | 0) == 17) {
      label = 25;
      break;
    } else if (($i_140 | 0) == 18) {
      label = 26;
      break;
    } else if (($i_140 | 0) == 19) {
      label = 27;
      break;
    } else if (($i_140 | 0) == 20) {
      label = 28;
      break;
    } else if (($i_140 | 0) == 21) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 8:
    $call18 = _mrb_intern_cstr($mrb, 102652) | 0;
    _mrb_symbol_value1567($tmp19, $call18);
    HEAP32[$8 >> 2] = HEAP32[$9 >> 2] | 0;
    HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2] | 0;
    HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2] | 0;
    label = 31;
    break;
   case 9:
    $call21 = _mrb_intern_cstr($mrb, 99948) | 0;
    _mrb_symbol_value1567($tmp22, $call21);
    HEAP32[$10 >> 2] = HEAP32[$11 >> 2] | 0;
    HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2] | 0;
    HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2] | 0;
    label = 31;
    break;
   case 10:
    $call24 = _mrb_intern_cstr($mrb, 97360) | 0;
    _mrb_symbol_value1567($tmp25, $call24);
    HEAP32[$12 >> 2] = HEAP32[$13 >> 2] | 0;
    HEAP32[$12 + 4 >> 2] = HEAP32[$13 + 4 >> 2] | 0;
    HEAP32[$12 + 8 >> 2] = HEAP32[$13 + 8 >> 2] | 0;
    label = 31;
    break;
   case 11:
    $call27 = _mrb_intern_cstr($mrb, 95368) | 0;
    _mrb_symbol_value1567($tmp28, $call27);
    HEAP32[$14 >> 2] = HEAP32[$15 >> 2] | 0;
    HEAP32[$14 + 4 >> 2] = HEAP32[$15 + 4 >> 2] | 0;
    HEAP32[$14 + 8 >> 2] = HEAP32[$15 + 8 >> 2] | 0;
    label = 31;
    break;
   case 12:
    $call30 = _mrb_intern_cstr($mrb, 94328) | 0;
    _mrb_symbol_value1567($tmp31, $call30);
    HEAP32[$16 >> 2] = HEAP32[$17 >> 2] | 0;
    HEAP32[$16 + 4 >> 2] = HEAP32[$17 + 4 >> 2] | 0;
    HEAP32[$16 + 8 >> 2] = HEAP32[$17 + 8 >> 2] | 0;
    label = 31;
    break;
   case 13:
    $call33 = _mrb_intern_cstr($mrb, 93412) | 0;
    _mrb_symbol_value1567($tmp34, $call33);
    HEAP32[$18 >> 2] = HEAP32[$19 >> 2] | 0;
    HEAP32[$18 + 4 >> 2] = HEAP32[$19 + 4 >> 2] | 0;
    HEAP32[$18 + 8 >> 2] = HEAP32[$19 + 8 >> 2] | 0;
    label = 31;
    break;
   case 14:
    $call36 = _mrb_intern_cstr($mrb, 92732) | 0;
    _mrb_symbol_value1567($tmp37, $call36);
    HEAP32[$20 >> 2] = HEAP32[$21 >> 2] | 0;
    HEAP32[$20 + 4 >> 2] = HEAP32[$21 + 4 >> 2] | 0;
    HEAP32[$20 + 8 >> 2] = HEAP32[$21 + 8 >> 2] | 0;
    label = 31;
    break;
   case 15:
    $call39 = _mrb_intern_cstr($mrb, 111380) | 0;
    _mrb_symbol_value1567($tmp40, $call39);
    HEAP32[$22 >> 2] = HEAP32[$23 >> 2] | 0;
    HEAP32[$22 + 4 >> 2] = HEAP32[$23 + 4 >> 2] | 0;
    HEAP32[$22 + 8 >> 2] = HEAP32[$23 + 8 >> 2] | 0;
    label = 31;
    break;
   case 16:
    $call42 = _mrb_intern_cstr($mrb, 110908) | 0;
    _mrb_symbol_value1567($tmp43, $call42);
    HEAP32[$24 >> 2] = HEAP32[$25 >> 2] | 0;
    HEAP32[$24 + 4 >> 2] = HEAP32[$25 + 4 >> 2] | 0;
    HEAP32[$24 + 8 >> 2] = HEAP32[$25 + 8 >> 2] | 0;
    label = 31;
    break;
   case 17:
    $call45 = _mrb_intern_cstr($mrb, 110084) | 0;
    _mrb_symbol_value1567($tmp46, $call45);
    HEAP32[$26 >> 2] = HEAP32[$27 >> 2] | 0;
    HEAP32[$26 + 4 >> 2] = HEAP32[$27 + 4 >> 2] | 0;
    HEAP32[$26 + 8 >> 2] = HEAP32[$27 + 8 >> 2] | 0;
    label = 31;
    break;
   case 18:
    $call48 = _mrb_intern_cstr($mrb, 109624) | 0;
    _mrb_symbol_value1567($tmp49, $call48);
    HEAP32[$28 >> 2] = HEAP32[$29 >> 2] | 0;
    HEAP32[$28 + 4 >> 2] = HEAP32[$29 + 4 >> 2] | 0;
    HEAP32[$28 + 8 >> 2] = HEAP32[$29 + 8 >> 2] | 0;
    label = 31;
    break;
   case 19:
    $call51 = _mrb_intern_cstr($mrb, 109148) | 0;
    _mrb_symbol_value1567($tmp52, $call51);
    HEAP32[$30 >> 2] = HEAP32[$31 >> 2] | 0;
    HEAP32[$30 + 4 >> 2] = HEAP32[$31 + 4 >> 2] | 0;
    HEAP32[$30 + 8 >> 2] = HEAP32[$31 + 8 >> 2] | 0;
    label = 31;
    break;
   case 20:
    $call54 = _mrb_intern_cstr($mrb, 108708) | 0;
    _mrb_symbol_value1567($tmp55, $call54);
    HEAP32[$32 >> 2] = HEAP32[$33 >> 2] | 0;
    HEAP32[$32 + 4 >> 2] = HEAP32[$33 + 4 >> 2] | 0;
    HEAP32[$32 + 8 >> 2] = HEAP32[$33 + 8 >> 2] | 0;
    label = 31;
    break;
   case 21:
    $call57 = _mrb_intern_cstr($mrb, 108360) | 0;
    _mrb_symbol_value1567($tmp58, $call57);
    HEAP32[$34 >> 2] = HEAP32[$35 >> 2] | 0;
    HEAP32[$34 + 4 >> 2] = HEAP32[$35 + 4 >> 2] | 0;
    HEAP32[$34 + 8 >> 2] = HEAP32[$35 + 8 >> 2] | 0;
    label = 31;
    break;
   case 22:
    $call60 = _mrb_intern_cstr($mrb, 108076) | 0;
    _mrb_symbol_value1567($tmp61, $call60);
    HEAP32[$36 >> 2] = HEAP32[$37 >> 2] | 0;
    HEAP32[$36 + 4 >> 2] = HEAP32[$37 + 4 >> 2] | 0;
    HEAP32[$36 + 8 >> 2] = HEAP32[$37 + 8 >> 2] | 0;
    label = 31;
    break;
   case 23:
    $call63 = _mrb_intern_cstr($mrb, 107636) | 0;
    _mrb_symbol_value1567($tmp64, $call63);
    HEAP32[$38 >> 2] = HEAP32[$39 >> 2] | 0;
    HEAP32[$38 + 4 >> 2] = HEAP32[$39 + 4 >> 2] | 0;
    HEAP32[$38 + 8 >> 2] = HEAP32[$39 + 8 >> 2] | 0;
    label = 31;
    break;
   case 24:
    $call66 = _mrb_intern_cstr($mrb, 107176) | 0;
    _mrb_symbol_value1567($tmp67, $call66);
    HEAP32[$40 >> 2] = HEAP32[$41 >> 2] | 0;
    HEAP32[$40 + 4 >> 2] = HEAP32[$41 + 4 >> 2] | 0;
    HEAP32[$40 + 8 >> 2] = HEAP32[$41 + 8 >> 2] | 0;
    label = 31;
    break;
   case 25:
    $call69 = _mrb_intern_cstr($mrb, 106656) | 0;
    _mrb_symbol_value1567($tmp70, $call69);
    HEAP32[$42 >> 2] = HEAP32[$43 >> 2] | 0;
    HEAP32[$42 + 4 >> 2] = HEAP32[$43 + 4 >> 2] | 0;
    HEAP32[$42 + 8 >> 2] = HEAP32[$43 + 8 >> 2] | 0;
    label = 31;
    break;
   case 26:
    $call72 = _mrb_intern_cstr($mrb, 106316) | 0;
    _mrb_symbol_value1567($tmp73, $call72);
    HEAP32[$44 >> 2] = HEAP32[$45 >> 2] | 0;
    HEAP32[$44 + 4 >> 2] = HEAP32[$45 + 4 >> 2] | 0;
    HEAP32[$44 + 8 >> 2] = HEAP32[$45 + 8 >> 2] | 0;
    label = 31;
    break;
   case 27:
    $call75 = _mrb_intern_cstr($mrb, 105788) | 0;
    _mrb_symbol_value1567($tmp76, $call75);
    HEAP32[$46 >> 2] = HEAP32[$47 >> 2] | 0;
    HEAP32[$46 + 4 >> 2] = HEAP32[$47 + 4 >> 2] | 0;
    HEAP32[$46 + 8 >> 2] = HEAP32[$47 + 8 >> 2] | 0;
    label = 31;
    break;
   case 28:
    $call78 = _mrb_intern_cstr($mrb, 105528) | 0;
    _mrb_symbol_value1567($tmp79, $call78);
    HEAP32[$48 >> 2] = HEAP32[$49 >> 2] | 0;
    HEAP32[$48 + 4 >> 2] = HEAP32[$49 + 4 >> 2] | 0;
    HEAP32[$48 + 8 >> 2] = HEAP32[$49 + 8 >> 2] | 0;
    label = 31;
    break;
   case 29:
    $call81 = _mrb_intern_cstr($mrb, 105124) | 0;
    _mrb_symbol_value1567($tmp82, $call81);
    HEAP32[$50 >> 2] = HEAP32[$51 >> 2] | 0;
    HEAP32[$50 + 4 >> 2] = HEAP32[$51 + 4 >> 2] | 0;
    HEAP32[$50 + 8 >> 2] = HEAP32[$51 + 8 >> 2] | 0;
    label = 31;
    break;
   case 30:
    _mrb_fixnum_value1568($tmp83, $i_140);
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    label = 31;
    break;
   case 31:
    $arrayidx85 = $obj_count + 8 + ($i_140 << 2) | 0;
    $52 = HEAP32[$arrayidx85 >> 2] | 0;
    $tobool = ($52 | 0) == 0;
    if ($tobool) {
      label = 33;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    _mrb_fixnum_value1568($agg_tmp87, $52);
    _mrb_hash_set($mrb, $hash, $type, $agg_tmp87);
    label = 33;
    break;
   case 33:
    $inc92 = $i_140 + 1 | 0;
    $exitcond = ($inc92 | 0) == 23;
    if ($exitcond) {
      label = 34;
      break;
    } else {
      $i_140 = $inc92;
      label = 7;
      break;
    }
   case 34:
    $53 = $agg_result;
    $54 = $hash;
    HEAP32[$53 >> 2] = HEAP32[$54 >> 2] | 0;
    HEAP32[$53 + 4 >> 2] = HEAP32[$54 + 4 >> 2] | 0;
    HEAP32[$53 + 8 >> 2] = HEAP32[$54 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_symbol_value1567($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  var $v_sroa_1_2__raw_idx = 0, $v_sroa_1_2_idx = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP16[$agg_result >> 1] = $i;
  $v_sroa_1_2__raw_idx = $agg_result + 2 | 0;
  $v_sroa_1_2_idx = __stackBase__ | 0;
  HEAP16[$v_sroa_1_2__raw_idx >> 1] = HEAP16[$v_sroa_1_2_idx >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 2 >> 1] = HEAP16[$v_sroa_1_2_idx + 2 >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 4 >> 1] = HEAP16[$v_sroa_1_2_idx + 4 >> 1] | 0;
  HEAP32[$agg_result + 8 >> 2] = 4;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mruby_objectspace_gem_init($mrb) {
  $mrb = $mrb | 0;
  _mrb_define_class_method($mrb, _mrb_define_module($mrb, 104684) | 0, 104316, 776, 0);
  return;
}
function _mrb_printstr($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $argv = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $argv = __stackBase__ | 0;
  _mrb_get_args($mrb, 108524, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $argv, tempInt) | 0);
  _printstr1581($argv);
  $0 = $agg_result;
  $1 = $argv;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _printstr1581($obj) {
  $obj = $obj | 0;
  var $tt = 0, $0 = 0, $cmp = 0, $p = 0, $1 = 0, $ptr = 0, $2 = 0, $3 = 0, $len1 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $obj + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 16;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $p = $obj;
    $1 = HEAP32[$p >> 2] | 0;
    $ptr = $1 + 20 | 0;
    $2 = $ptr;
    $3 = HEAP32[$2 >> 2] | 0;
    $len1 = $1 + 12 | 0;
    $4 = $len1;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = HEAP32[_stdout >> 2] | 0;
    $call = _fwrite($3 | 0, $5 | 0, 1, $6 | 0) | 0;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_mruby_print_gem_init($mrb) {
  $mrb = $mrb | 0;
  _mrb_define_method($mrb, HEAP32[$mrb + 96 >> 2] | 0, 110552, 76, 0);
  return;
}
function _mrb_mruby_proc_ext_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $0 = 0, $kernel_module = 0;
  $0 = HEAP32[$mrb + 56 >> 2] | 0;
  _mrb_define_method($mrb, $0, 108496, 110, 0);
  _mrb_define_method($mrb, $0, 110536, 490, 0);
  _mrb_define_method($mrb, $0, 106080, 526, 0);
  _mrb_define_method($mrb, $0, 102644, 526, 0);
  $kernel_module = $mrb + 96 | 0;
  _mrb_define_class_method($mrb, HEAP32[$kernel_module >> 2] | 0, 99940, 148, 0);
  _mrb_define_method($mrb, HEAP32[$kernel_module >> 2] | 0, 99940, 148, 0);
  return;
}
function _mrb_proc_lambda($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_bool_value1611($agg_result, (HEAP32[HEAP32[$self >> 2] >> 2] | 0) >>> 19 & 1);
  STACKTOP = __stackBase__;
  return;
}
function _GENERATED_TMP_mrb_mruby_print_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $tmp = 0, $agg_tmp = 0, $call = 0, $exc = 0, $0 = 0, $tobool = 0, $1 = 0, $2 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $call = _mrb_gc_arena_save($mrb) | 0;
    _mrb_mruby_print_gem_init($mrb);
    _mrb_load_irep($tmp, $mrb, 82884);
    $exc = $mrb + 16 | 0;
    $0 = HEAP32[$exc >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_print_backtrace($mrb);
    $1 = HEAP32[$exc >> 2] | 0;
    $2 = $1 | 0;
    _mrb_obj_value1575($agg_tmp, $2);
    _mrb_p($mrb, $agg_tmp);
    _exit(1);
   case 4:
    _mrb_gc_arena_restore($mrb, $call);
    STACKTOP = __stackBase__;
    return;
  }
}
function _GENERATED_TMP_mrb_mruby_proc_ext_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $tmp = 0, $agg_tmp = 0, $call = 0, $exc = 0, $0 = 0, $tobool = 0, $1 = 0, $2 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $call = _mrb_gc_arena_save($mrb) | 0;
    _mrb_mruby_proc_ext_gem_init($mrb);
    _mrb_load_irep($tmp, $mrb, 81892);
    $exc = $mrb + 16 | 0;
    $0 = HEAP32[$exc >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_print_backtrace($mrb);
    $1 = HEAP32[$exc >> 2] | 0;
    $2 = $1 | 0;
    _mrb_obj_value1588($agg_tmp, $2);
    _mrb_p($mrb, $agg_tmp);
    _exit(1);
   case 4:
    _mrb_gc_arena_restore($mrb, $call);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_fixnum_value1609($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_nil_value1610($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_bool_value1611($agg_result, $boolean) {
  $agg_result = $agg_result | 0;
  $boolean = $boolean | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = $boolean << 24 >> 24 != 0 ? 2 : 0;
  return;
}
function _mrb_fixnum_value1635($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_nil_value1636($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_float_value1637($agg_result, $f) {
  $agg_result = $agg_result | 0;
  $f = +$f;
  var $v_sroa_0_0__idx = 0;
  $v_sroa_0_0__idx = $agg_result | 0;
  HEAPF64[tempDoublePtr >> 3] = $f, HEAP32[$v_sroa_0_0__idx >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$v_sroa_0_0__idx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  HEAP32[$agg_result + 8 >> 2] = 6;
  return;
}
function _mrb_obj_value1638($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_true_value1656($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = 2;
  return;
}
function _mrb_false_value1657($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_nil_value1717($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_proc_source_location($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $filename = 0, $lines = 0, $p1 = 0, $0 = 0, $1 = 0, $2 = 0, $and = 0, $cmp = 0, $body = 0, $irep2 = 0, $3 = 0, $filename3 = 0, $4 = 0, $tobool = 0, $lines6 = 0, $5 = 0, $tobool7 = 0, $6 = 0, $conv = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $filename = __stackBase__ | 0;
    $lines = __stackBase__ + 12 | 0;
    $p1 = $self;
    $0 = HEAP32[$p1 >> 2] | 0;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $and = $2 & 262144;
    $cmp = ($and | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_nil_value1610($agg_result);
    label = 9;
    break;
   case 4:
    $body = $0 + 12 | 0;
    $irep2 = $body;
    $3 = HEAP32[$irep2 >> 2] | 0;
    _mrb_nil_value1610($filename);
    _mrb_nil_value1610($lines);
    $filename3 = $3 + 24 | 0;
    $4 = HEAP32[$filename3 >> 2] | 0;
    $tobool = ($4 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _mrb_str_new_cstr($filename, $mrb, $4);
    label = 6;
    break;
   case 6:
    $lines6 = $3 + 28 | 0;
    $5 = HEAP32[$lines6 >> 2] | 0;
    $tobool7 = ($5 | 0) == 0;
    if ($tobool7) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $6 = HEAP16[$5 >> 1] | 0;
    $conv = $6 & 65535;
    _mrb_fixnum_value1609($lines, $conv);
    label = 8;
    break;
   case 8:
    _mrb_assoc_new($agg_result, $mrb, $filename, $lines);
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_proc_inspect($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $str = 0, $agg_tmp = 0, $tmp = 0, $tmp7 = 0, $tmp8 = 0, $tmp9 = 0, $agg_tmp12 = 0, $tmp14 = 0, $tmp16 = 0, $tmp24 = 0, $tmp26 = 0, $p1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $and = 0, $cmp = 0, $body = 0, $irep4 = 0, $4 = 0, $filename = 0, $5 = 0, $tobool = 0, $lines = 0, $6 = 0, $tobool10 = 0, $7 = 0, $conv = 0, $8 = 0, $and20 = 0, $cmp21 = 0, $9 = 0, $10 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 132 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $str = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $tmp = __stackBase__ + 24 | 0;
    $tmp7 = __stackBase__ + 36 | 0;
    $tmp8 = __stackBase__ + 48 | 0;
    $tmp9 = __stackBase__ + 60 | 0;
    $agg_tmp12 = __stackBase__ + 72 | 0;
    $tmp14 = __stackBase__ + 84 | 0;
    $tmp16 = __stackBase__ + 96 | 0;
    $tmp24 = __stackBase__ + 108 | 0;
    $tmp26 = __stackBase__ + 120 | 0;
    $p1 = $self;
    $0 = HEAP32[$p1 >> 2] | 0;
    _mrb_str_new_cstr($str, $mrb, 93392);
    $1 = HEAP32[$p1 >> 2] | 0;
    _mrb_ptr_to_str($agg_tmp, $mrb, $1);
    _mrb_str_concat($mrb, $str, $agg_tmp);
    $2 = $0;
    $3 = HEAP32[$2 >> 2] | 0;
    $and = $3 & 262144;
    $cmp = ($and | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 9;
      break;
    }
   case 3:
    $body = $0 + 12 | 0;
    $irep4 = $body;
    $4 = HEAP32[$irep4 >> 2] | 0;
    _mrb_str_cat_cstr($tmp, $mrb, $str, 92664);
    $filename = $4 + 24 | 0;
    $5 = HEAP32[$filename >> 2] | 0;
    $tobool = ($5 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _mrb_str_cat_cstr($tmp7, $mrb, $str, $5);
    label = 6;
    break;
   case 5:
    _mrb_str_cat_cstr($tmp8, $mrb, $str, 111344);
    label = 6;
    break;
   case 6:
    _mrb_str_cat_cstr($tmp9, $mrb, $str, 110860);
    $lines = $4 + 28 | 0;
    $6 = HEAP32[$lines >> 2] | 0;
    $tobool10 = ($6 | 0) == 0;
    if ($tobool10) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $7 = HEAP16[$6 >> 1] | 0;
    $conv = $7 & 65535;
    _mrb_fixnum_value1609($agg_tmp12, $conv);
    _mrb_str_append($tmp14, $mrb, $str, $agg_tmp12);
    label = 9;
    break;
   case 8:
    _mrb_str_cat_cstr($tmp16, $mrb, $str, 111344);
    label = 9;
    break;
   case 9:
    $8 = HEAP32[$2 >> 2] | 0;
    $and20 = $8 & 524288;
    $cmp21 = ($and20 | 0) == 0;
    if ($cmp21) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _mrb_str_cat_cstr($tmp24, $mrb, $str, 110072);
    label = 11;
    break;
   case 11:
    _mrb_str_cat_cstr($tmp26, $mrb, $str, 109620);
    $9 = $agg_result;
    $10 = $str;
    HEAP32[$9 >> 2] = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 + 4 >> 2] = HEAP32[$10 + 4 >> 2] | 0;
    HEAP32[$9 + 8 >> 2] = HEAP32[$10 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_kernel_proc($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $blk = 0, $call = 0, $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $tobool = 0, $call1 = 0, $2 = 0, $3 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $blk = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 97356, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $blk, tempInt) | 0) | 0;
    $tt = $blk + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $i = $blk;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $call1 = _mrb_class_get($mrb, 95336) | 0;
    _mrb_raise($mrb, $call1, 94284);
    label = 5;
    break;
   case 5:
    $2 = $agg_result;
    $3 = $blk;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _GENERATED_TMP_mrb_mruby_random_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $call = 0;
  $call = _mrb_gc_arena_save($mrb) | 0;
  _mrb_mruby_random_gem_init($mrb);
  _mrb_gc_arena_restore($mrb, $call);
  return;
}
function _mrb_mruby_random_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $kernel_module = 0, $call = 0;
  $kernel_module = $mrb + 96 | 0;
  _mrb_define_method($mrb, HEAP32[$kernel_module >> 2] | 0, 108352, 366, 0);
  _mrb_define_method($mrb, HEAP32[$kernel_module >> 2] | 0, 110528, 524, 0);
  $call = _mrb_define_class($mrb, 106068, HEAP32[$mrb + 44 >> 2] | 0) | 0;
  _mrb_define_class_method($mrb, $call, 108352, 366, 0);
  _mrb_define_class_method($mrb, $call, 110528, 524, 0);
  _mrb_define_method($mrb, $call, 102608, 554, 0);
  _mrb_define_method($mrb, $call, 108352, 416, 0);
  _mrb_define_method($mrb, $call, 110528, 342, 0);
  return;
}
function _mrb_random_g_rand($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $max = 0, $tmp1 = 0, $agg_tmp = 0, $tmp2 = 0, $call = 0, $seed_sroa_2_8__idx1 = 0, $seed_sroa_2_8_copyload = 0, $cmp = 0, $seed_sroa_0_0__cast = 0, $seed_sroa_0_0_copyload = 0, $tobool = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $max = __stackBase__ | 0;
    $tmp1 = __stackBase__ + 12 | 0;
    $agg_tmp = __stackBase__ + 24 | 0;
    $tmp2 = __stackBase__ + 36 | 0;
    _get_opt($max, $mrb);
    $call = _mrb_intern1634($mrb, 109576) | 0;
    _mrb_gv_get($tmp1, $mrb, $call);
    $seed_sroa_2_8__idx1 = $tmp1 + 8 | 0;
    $seed_sroa_2_8_copyload = HEAP32[$seed_sroa_2_8__idx1 >> 2] | 0;
    $cmp = ($seed_sroa_2_8_copyload | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $seed_sroa_0_0__cast = $tmp1;
    $seed_sroa_0_0_copyload = HEAP32[$seed_sroa_0_0__cast >> 2] | 0;
    $tobool = ($seed_sroa_0_0_copyload | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _mrb_nil_value1636($agg_tmp);
    _mrb_random_mt_g_srand($tmp2, $agg_tmp);
    label = 5;
    break;
   case 5:
    _mrb_random_mt_g_rand($agg_result, $max);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_random_g_srand($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $seed = 0, $tmp1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $seed = __stackBase__ | 0;
  $tmp1 = __stackBase__ + 12 | 0;
  _get_opt($seed, $mrb);
  _mrb_random_mt_g_srand($tmp1, $seed);
  _mrb_gv_get($agg_result, $mrb, _mrb_intern1634($mrb, 109576) | 0);
  _mrb_gv_set($mrb, _mrb_intern1634($mrb, 109576) | 0, $tmp1);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_random_init($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $seed = 0, $tmp1 = 0, $agg_tmp = 0, $call = 0, $call3 = 0, $4 = 0, $5 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $seed = __stackBase__ | 0;
  $tmp1 = __stackBase__ + 12 | 0;
  $agg_tmp = __stackBase__ + 24 | 0;
  $call = _mrb_malloc($mrb, 2508) | 0;
  HEAP32[$call + 2496 >> 2] = 625;
  _get_opt($seed, $mrb);
  _mrb_random_mt_srand($tmp1, $call, $seed);
  _mrb_iv_set($mrb, $self, _mrb_intern1634($mrb, 99904) | 0, $tmp1);
  $call3 = _mrb_intern1634($mrb, 111328) | 0;
  _mrb_obj_value1638($agg_tmp, _mrb_data_object_alloc($mrb, HEAP32[$mrb + 44 >> 2] | 0, $call, 61204) | 0);
  _mrb_iv_set($mrb, $self, $call3, $agg_tmp);
  $4 = $agg_result;
  $5 = $self;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
  HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
  HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_random_rand($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $max = 0, $tmp2 = 0, $agg_tmp = 0, $tmp3 = 0, $call = 0, $call1 = 0, $seed_sroa_2_8__idx2 = 0, $seed_sroa_2_8_copyload = 0, $cmp = 0, $seed_sroa_0_0__cast = 0, $seed_sroa_0_0_copyload = 0, $tobool = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $max = __stackBase__ | 0;
    $tmp2 = __stackBase__ + 12 | 0;
    $agg_tmp = __stackBase__ + 24 | 0;
    $tmp3 = __stackBase__ + 36 | 0;
    $call = _mrb_mt_get_context($mrb, $self) | 0;
    _get_opt($max, $mrb);
    $call1 = _mrb_intern1634($mrb, 99904) | 0;
    _mrb_iv_get($tmp2, 0, $self, $call1);
    $seed_sroa_2_8__idx2 = $tmp2 + 8 | 0;
    $seed_sroa_2_8_copyload = HEAP32[$seed_sroa_2_8__idx2 >> 2] | 0;
    $cmp = ($seed_sroa_2_8_copyload | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $seed_sroa_0_0__cast = $tmp2;
    $seed_sroa_0_0_copyload = HEAP32[$seed_sroa_0_0__cast >> 2] | 0;
    $tobool = ($seed_sroa_0_0_copyload | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _mrb_nil_value1636($agg_tmp);
    _mrb_random_mt_srand($tmp3, $call, $agg_tmp);
    label = 5;
    break;
   case 5:
    _mrb_random_mt_rand($agg_result, $call, $max);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_random_srand($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $seed = 0, $tmp1 = 0, $call = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $seed = __stackBase__ | 0;
  $tmp1 = __stackBase__ + 12 | 0;
  $call = _mrb_mt_get_context($mrb, $self) | 0;
  _get_opt($seed, $mrb);
  _mrb_random_mt_srand($tmp1, $call, $seed);
  _mrb_iv_get($agg_result, 0, $self, _mrb_intern1634($mrb, 99904) | 0);
  _mrb_iv_set($mrb, $self, _mrb_intern1634($mrb, 99904) | 0, $tmp1);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mt_get_context($mrb, $self) {
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $context = 0, $call = 0, $call1 = 0, $0 = 0, $tobool = 0, $call2 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $context = __stackBase__ | 0;
    $call = _mrb_intern1634($mrb, 111328) | 0;
    _mrb_iv_get($context, 0, $self, $call);
    $call1 = _mrb_data_get_ptr(0, $context, 61204) | 0;
    $0 = $call1;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call2 = _mrb_class_get($mrb, 110844) | 0;
    _mrb_raise($mrb, $call2, 110032);
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return $0 | 0;
  }
  return 0;
}
function _get_opt($agg_result, $mrb) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  var $arg = 0, $tmp5 = 0, $tmp12 = 0, $0 = 0, $call = 0, $tt = 0, $1 = 0, $cmp = 0, $i = 0, $2 = 0, $tobool = 0, $_pr = 0, $3 = 0, $cmp2 = 0, $call4 = 0, $4 = 0, $i7 = 0, $5 = 0, $cmp8 = 0, $sub = 0, $6 = 0, $7 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $arg = __stackBase__ | 0;
    $tmp5 = __stackBase__ + 12 | 0;
    $tmp12 = __stackBase__ + 24 | 0;
    _mrb_fixnum_value1635($arg, 0);
    $0 = $arg;
    $call = _mrb_get_args($mrb, 97324, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $arg, tempInt) | 0) | 0;
    $tt = $arg + 8 | 0;
    $1 = HEAP32[$tt >> 2] | 0;
    $cmp = ($1 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $3 = $1;
      label = 5;
      break;
    }
   case 3:
    $i = $arg;
    $2 = HEAP32[$i >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $_pr = HEAP32[$tt >> 2] | 0;
    $3 = $_pr;
    label = 5;
    break;
   case 5:
    $cmp2 = ($3 | 0) == 3;
    if ($cmp2) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $call4 = _mrb_class_get($mrb, 95320) | 0;
    _mrb_raise($mrb, $call4, 94260);
    label = 7;
    break;
   case 7:
    _mrb_check_convert_type($tmp5, $mrb, $arg, 3, 93384, 92656);
    $4 = $tmp5;
    HEAP32[$0 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    $i7 = $arg;
    $5 = HEAP32[$i7 >> 2] | 0;
    $cmp8 = ($5 | 0) < 0;
    if ($cmp8) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $sub = -$5 | 0;
    _mrb_fixnum_value1635($tmp12, $sub);
    $6 = $tmp12;
    HEAP32[$0 >> 2] = HEAP32[$6 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
    label = 9;
    break;
   case 9:
    $7 = $agg_result;
    HEAP32[$7 >> 2] = HEAP32[$0 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$0 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_random_mt_srand($agg_result, $t, $seed) {
  $agg_result = $agg_result | 0;
  $t = $t | 0;
  $seed = $seed | 0;
  var $tmp = 0, $tmp8 = 0, $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $tobool = 0, $call = 0, $call1 = 0, $add = 0, $2 = 0, $3 = 0, $4 = 0, $cmp4 = 0, $sub = 0, $5 = 0, $i11 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $seed;
  $seed = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$seed >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$seed + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$seed + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $tmp8 = __stackBase__ + 12 | 0;
    $tt = $seed + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $i = $seed;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $call = _time(0) | 0;
    $call1 = _mt_rand($t) | 0;
    $add = $call1 + $call | 0;
    _mrb_fixnum_value1635($tmp, $add);
    $2 = $seed;
    $3 = $tmp;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    $4 = HEAP32[$i >> 2] | 0;
    $cmp4 = ($4 | 0) < 0;
    if ($cmp4) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $sub = -$4 | 0;
    _mrb_fixnum_value1635($tmp8, $sub);
    $5 = $tmp8;
    HEAP32[$2 >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    label = 6;
    break;
   case 6:
    $i11 = $seed;
    $6 = HEAP32[$i11 >> 2] | 0;
    _mt_srand($t, $6);
    $7 = $agg_result;
    $8 = $seed;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_intern1634($mrb, $cstr) {
  $mrb = $mrb | 0;
  $cstr = $cstr | 0;
  return _mrb_intern_cstr($mrb, $cstr) | 0;
}
function _mt_rand($t) {
  $t = $t | 0;
  return _mrb_random_genrand_int32($t) | 0;
}
function _mt_srand($t, $seed) {
  $t = $t | 0;
  $seed = $seed | 0;
  _mrb_random_init_genrand($t, $seed);
  return;
}
function _mrb_random_mt_rand($agg_result, $t, $max) {
  $agg_result = $agg_result | 0;
  $t = $t | 0;
  $max = $max | 0;
  var $value = 0, $i = 0, $0 = 0, $cmp = 0, $call = 0.0, $call2 = 0, $1 = 0, $rem = 0, $2 = 0, $3 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $max;
  $max = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$max >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$max + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$max + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $value = __stackBase__ | 0;
    $i = $max;
    $0 = HEAP32[$i >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = +_mt_rand_real($t);
    _mrb_float_value1637($value, $call);
    label = 5;
    break;
   case 4:
    $call2 = _mt_rand($t) | 0;
    $1 = HEAP32[$i >> 2] | 0;
    $rem = ($call2 >>> 0) % ($1 >>> 0);
    _mrb_fixnum_value1635($value, $rem);
    label = 5;
    break;
   case 5:
    $2 = $agg_result;
    $3 = $value;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mt_rand_real($t) {
  $t = $t | 0;
  return +(+_mrb_random_genrand_real1($t));
}
function _mrb_random_mt_g_srand($agg_result, $seed) {
  $agg_result = $agg_result | 0;
  $seed = $seed | 0;
  var $tmp = 0, $tmp8 = 0, $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $tobool = 0, $call = 0, $call1 = 0, $add = 0, $2 = 0, $3 = 0, $4 = 0, $cmp4 = 0, $sub = 0, $5 = 0, $i11 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $seed;
  $seed = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$seed >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$seed + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$seed + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $tmp8 = __stackBase__ + 12 | 0;
    $tt = $seed + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $i = $seed;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $call = _time(0) | 0;
    $call1 = _mt_g_rand() | 0;
    $add = $call1 + $call | 0;
    _mrb_fixnum_value1635($tmp, $add);
    $2 = $seed;
    $3 = $tmp;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    $4 = HEAP32[$i >> 2] | 0;
    $cmp4 = ($4 | 0) < 0;
    if ($cmp4) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $sub = -$4 | 0;
    _mrb_fixnum_value1635($tmp8, $sub);
    $5 = $tmp8;
    HEAP32[$2 >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    label = 6;
    break;
   case 6:
    $i11 = $seed;
    $6 = HEAP32[$i11 >> 2] | 0;
    _mt_g_srand($6);
    $7 = $agg_result;
    $8 = $seed;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mt_g_srand($seed) {
  $seed = $seed | 0;
  _init_genrand($seed);
  return;
}
function _mt_g_rand() {
  return _genrand_int32() | 0;
}
function _mrb_random_mt_g_rand($agg_result, $max) {
  $agg_result = $agg_result | 0;
  $max = $max | 0;
  var $value = 0, $i = 0, $0 = 0, $cmp = 0, $call = 0.0, $call2 = 0, $1 = 0, $rem = 0, $2 = 0, $3 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $max;
  $max = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$max >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$max + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$max + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $value = __stackBase__ | 0;
    $i = $max;
    $0 = HEAP32[$i >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = +_mt_g_rand_real();
    _mrb_float_value1637($value, $call);
    label = 5;
    break;
   case 4:
    $call2 = _mt_g_rand() | 0;
    $1 = HEAP32[$i >> 2] | 0;
    $rem = ($call2 >>> 0) % ($1 >>> 0);
    _mrb_fixnum_value1635($value, $rem);
    label = 5;
    break;
   case 5:
    $2 = $agg_result;
    $3 = $value;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mt_g_rand_real() {
  return +(+_genrand_real1());
}
function _GENERATED_TMP_mrb_mruby_range_ext_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $call = 0;
  $call = _mrb_gc_arena_save($mrb) | 0;
  _mrb_mruby_range_ext_gem_init($mrb);
  _mrb_gc_arena_restore($mrb, $call);
  return;
}
function _mrb_mruby_range_ext_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $call = 0;
  $call = _mrb_class_get($mrb, 108276) | 0;
  _mrb_define_method($mrb, $call, 110520, 50, 0);
  _mrb_define_method($mrb, $call, 106060, 226, 0);
  _mrb_define_method($mrb, $call, 102600, 324, 0);
  return;
}
function _mrb_range_cover($agg_result, $mrb, $range) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $range = $range | 0;
  var $val = 0, $beg = 0, $end = 0, $p = 0, $0 = 0, $call = 0, $edges = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $end3 = 0, $6 = 0, $7 = 0, $call4 = 0, $tobool = 0, $excl = 0, $8 = 0, $9 = 0, $tobool5 = 0, $call7 = 0, $tobool8 = 0, $call10 = 0, $tobool11 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  tempParam = $range;
  $range = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$range >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$range + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$range + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $val = __stackBase__ | 0;
    $beg = __stackBase__ + 12 | 0;
    $end = __stackBase__ + 24 | 0;
    $p = $range;
    $0 = HEAP32[$p >> 2] | 0;
    $call = _mrb_get_args($mrb, 95316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $val, tempInt) | 0) | 0;
    $edges = $0 + 12 | 0;
    $1 = $edges;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $beg;
    $4 = $2;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    $5 = HEAP32[$1 >> 2] | 0;
    $end3 = $5 + 12 | 0;
    $6 = $end;
    $7 = $end3;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    $call4 = _r_le1655($mrb, $beg, $val) | 0;
    $tobool = ($call4 | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $excl = $0 + 16 | 0;
    $8 = $excl;
    $9 = HEAP32[$8 >> 2] | 0;
    $tobool5 = ($9 | 0) == 0;
    if ($tobool5) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call7 = _r_lt($mrb, $val, $end) | 0;
    $tobool8 = ($call7 | 0) == 0;
    if ($tobool8) {
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _mrb_true_value1656($agg_result);
    label = 9;
    break;
   case 6:
    $call10 = _r_le1655($mrb, $val, $end) | 0;
    $tobool11 = ($call10 | 0) == 0;
    if ($tobool11) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _mrb_true_value1656($agg_result);
    label = 9;
    break;
   case 8:
    _mrb_false_value1657($agg_result);
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_range_first($agg_result, $mrb, $range) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $range = $range | 0;
  var $num = 0, $array = 0, $agg_tmp = 0, $p = 0, $0 = 0, $call = 0, $cmp = 0, $edges = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  tempParam = $range;
  $range = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$range >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$range + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$range + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $num = __stackBase__ | 0;
    $array = __stackBase__ + 12 | 0;
    $agg_tmp = __stackBase__ + 24 | 0;
    $p = $range;
    $0 = HEAP32[$p >> 2] | 0;
    $call = _mrb_get_args($mrb, 99900, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $num, tempInt) | 0) | 0;
    $cmp = ($call | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $edges = $0 + 12 | 0;
    $1 = $edges;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $agg_result;
    $4 = $2;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    label = 5;
    break;
   case 4:
    _mrb_funcall($array, $mrb, $range, 97316, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    _mrb_to_int($agg_tmp, $mrb, $num);
    _mrb_funcall($agg_result, $mrb, $array, 106060, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_range_last($agg_result, $mrb, $range) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $range = $range | 0;
  var $num = 0, $array = 0, $agg_tmp = 0, $p = 0, $0 = 0, $call = 0, $cmp = 0, $edges = 0, $1 = 0, $2 = 0, $end = 0, $3 = 0, $4 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  tempParam = $range;
  $range = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$range >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$range + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$range + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $num = __stackBase__ | 0;
    $array = __stackBase__ + 12 | 0;
    $agg_tmp = __stackBase__ + 24 | 0;
    $p = $range;
    $0 = HEAP32[$p >> 2] | 0;
    $call = _mrb_get_args($mrb, 99900, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $num, tempInt) | 0) | 0;
    $cmp = ($call | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $edges = $0 + 12 | 0;
    $1 = $edges;
    $2 = HEAP32[$1 >> 2] | 0;
    $end = $2 + 12 | 0;
    $3 = $agg_result;
    $4 = $end;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    label = 5;
    break;
   case 4:
    _mrb_funcall($array, $mrb, $range, 97316, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    _mrb_to_int($agg_tmp, $mrb, $num);
    _mrb_funcall($agg_result, $mrb, $array, 102600, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _r_le1655($mrb, $a, $b) {
  $mrb = $mrb | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $r = 0, $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $a;
  $a = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$a >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$a + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$a + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $b;
  $b = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$b >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$b + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$b + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $r = __stackBase__ | 0;
    _mrb_funcall($r, $mrb, $a, 94256, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$b >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$b + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$b + 8 >> 2] | 0, tempInt) | 0);
    $tt = $r + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $i = $r;
    $1 = HEAP32[$i >> 2] | 0;
    if (($1 | 0) == (-1 | 0) | ($1 | 0) == 0) {
      $retval_0 = 1;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $retval_0 = 0;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _r_lt($mrb, $a, $b) {
  $mrb = $mrb | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $r = 0, $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $cmp1 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $a;
  $a = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$a >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$a + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$a + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $b;
  $b = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$b >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$b + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$b + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $r = __stackBase__ | 0;
    _mrb_funcall($r, $mrb, $a, 94256, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$b >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$b + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$b + 8 >> 2] | 0, tempInt) | 0);
    $tt = $r + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $i = $r;
    $1 = HEAP32[$i >> 2] | 0;
    $cmp1 = ($1 | 0) == -1;
    if ($cmp1) {
      $retval_0 = 1;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $retval_0 = 0;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _GENERATED_TMP_mrb_mruby_sprintf_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $call = 0;
  $call = _mrb_gc_arena_save($mrb) | 0;
  _mrb_mruby_sprintf_gem_init($mrb);
  _mrb_gc_arena_restore($mrb, $call);
  return;
}
function _mrb_mruby_sprintf_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $kernel_module = 0, $0 = 0, $cmp = 0, $call = 0, $1 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $kernel_module = $mrb + 96 | 0;
    $0 = HEAP32[$kernel_module >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _mrb_define_module($mrb, 108252) | 0;
    HEAP32[$kernel_module >> 2] = $call;
    label = 4;
    break;
   case 4:
    $1 = HEAP32[$kernel_module >> 2] | 0;
    _mrb_define_method($mrb, $1, 110476, 274, 0);
    _mrb_define_method($mrb, $1, 106052, 274, 0);
    return;
  }
}
function _mrb_f_sprintf($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $argc = 0, $argv = 0, $call = 0, $0 = 0, $cmp = 0, $call1 = 0, $sub = 0, $1 = 0, $add_ptr = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $argc = __stackBase__ | 0;
    $argv = __stackBase__ + 4 | 0;
    $call = _mrb_get_args($mrb, 108240, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $argv, HEAP32[tempInt + 4 >> 2] = $argc, tempInt) | 0) | 0;
    $0 = HEAP32[$argc >> 2] | 0;
    $cmp = ($0 | 0) < 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call1 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call1, 106008);
    _mrb_nil_value1717($agg_result);
    label = 5;
    break;
   case 4:
    $sub = $0 - 1 | 0;
    $1 = HEAP32[$argv >> 2] | 0;
    $add_ptr = $1 + 12 | 0;
    _mrb_str_format($agg_result, $mrb, $sub, $add_ptr, $1);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_format($agg_result, $mrb, $argc, $argv, $fmt) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $argc = $argc | 0;
  $argv = $argv | 0;
  $fmt = $fmt | 0;
  var $result = 0, $hash = 0, $tmp3 = 0, $tmp7 = 0, $tmp22 = 0, $tmp37 = 0, $agg_tmp = 0, $agg_tmp135 = 0, $agg_tmp140 = 0, $agg_tmp141 = 0, $tmp142 = 0, $agg_tmp147 = 0, $tmp148 = 0, $agg_tmp154 = 0, $tmp155 = 0, $tmp161 = 0, $symname = 0, $agg_tmp203 = 0, $agg_tmp208 = 0, $agg_tmp221 = 0, $agg_tmp226 = 0, $tmp227 = 0, $agg_tmp233 = 0, $tmp238 = 0, $agg_tmp240 = 0, $agg_tmp241 = 0, $agg_tmp242 = 0, $tmp243 = 0, $agg_tmp251 = 0, $agg_tmp314 = 0, $agg_tmp315 = 0, $tmp316 = 0, $agg_tmp322 = 0, $tmp323 = 0, $agg_tmp329 = 0, $tmp330 = 0, $tmp336 = 0, $agg_tmp352 = 0, $tmp353 = 0, $agg_tmp359 = 0, $tmp360 = 0, $tmp367 = 0, $agg_tmp435 = 0, $agg_tmp436 = 0, $tmp437 = 0, $agg_tmp443 = 0, $tmp444 = 0, $agg_tmp450 = 0, $tmp451 = 0, $tmp457 = 0, $agg_tmp474 = 0, $tmp475 = 0, $agg_tmp481 = 0, $tmp482 = 0, $tmp489 = 0, $tmp553 = 0, $val = 0, $agg_tmp572 = 0, $agg_tmp578 = 0, $tmp594 = 0, $tmp635 = 0, $tmp655 = 0, $tmp673 = 0, $tmp694 = 0, $tmp712 = 0, $arg = 0, $agg_tmp733 = 0, $agg_tmp739 = 0, $tmp759 = 0, $tmp761 = 0, $tmp816 = 0, $tmp836 = 0, $tmp857 = 0, $tmp881 = 0, $val894 = 0, $agg_tmp904 = 0, $agg_tmp910 = 0, $fbuf = 0, $nbuf = 0, $tmp969 = 0, $tmp971 = 0, $tmp978 = 0, $tmp983 = 0, $agg_tmp1000 = 0, $tmp1001 = 0, $agg_tmp1003 = 0, $tmp1004 = 0, $tmp1006 = 0, $tmp1198 = 0, $tmp1223 = 0, $tmp1245 = 0, $tmp1263 = 0, $tmp1279 = 0, $tmp1333 = 0, $tmp1349 = 0, $val1364 = 0, $agg_tmp1374 = 0, $agg_tmp1380 = 0, $i1395 = 0, $fbuf1398 = 0, $tmp1399 = 0, $tmp1446 = 0, $tmp1562 = 0, $tmp1575 = 0, $inc = 0, $incdec_ptr = 0, $0 = 0, $1 = 0, $p4 = 0, $2 = 0, $ptr = 0, $3 = 0, $4 = 0, $len = 0, $5 = 0, $6 = 0, $add_ptr = 0, $7 = 0, $8 = 0, $p9 = 0, $9 = 0, $ptr10 = 0, $10 = 0, $11 = 0, $cmp1145 = 0, $12 = 0, $nextvalue_sroa_0_0__cast242 = 0, $nextvalue_sroa_1_4__idx278 = 0, $nextvalue_sroa_1_4__cast279 = 0, $nextvalue_sroa_2_8__idx313 = 0, $13 = 0, $nextvalue_sroa_1_4__idx260 = 0, $nextvalue_sroa_2_8__idx300 = 0, $14 = 0, $nextvalue_sroa_1_4__idx257 = 0, $nextvalue_sroa_2_8__idx298 = 0, $15 = 0, $nextvalue_sroa_1_4__idx254 = 0, $nextvalue_sroa_2_8__idx296 = 0, $tmp_sroa_0_0__cast160 = 0, $tmp_sroa_0_0__cast158 = 0, $tmp_sroa_0_0__cast156 = 0, $tmp_sroa_0_0__cast154 = 0, $tmp_sroa_0_0__cast144 = 0, $tmp_sroa_0_0__cast148 = 0, $tmp_sroa_0_0__cast146 = 0, $tmp_sroa_0_0__cast140 = 0, $tmp_sroa_0_0__cast138 = 0, $tmp_sroa_0_0__cast136 = 0, $tmp_sroa_0_0__cast134 = 0, $tmp_sroa_0_0__cast124 = 0, $tmp_sroa_0_0__cast128 = 0, $tmp_sroa_0_0__cast126 = 0, $16 = 0, $nextvalue_sroa_1_4__idx275 = 0, $nextvalue_sroa_2_8__idx310 = 0, $17 = 0, $nextvalue_sroa_1_4__idx272 = 0, $nextvalue_sroa_2_8__idx308 = 0, $18 = 0, $nextvalue_sroa_1_4__idx269 = 0, $nextvalue_sroa_2_8__idx306 = 0, $19 = 0, $nextvalue_sroa_1_4__idx266 = 0, $nextvalue_sroa_2_8__idx304 = 0, $20 = 0, $21 = 0, $22 = 0, $str_sroa_0_0__cast = 0, $23 = 0, $nextvalue_sroa_0_0__cast222 = 0, $nextvalue_sroa_1_4__idx248 = 0, $nextvalue_sroa_1_4__cast249 = 0, $nextvalue_sroa_2_8__idx287 = 0, $24 = 0, $tmp592_sroa_0_0__cast = 0, $tmp592_sroa_2_8__idx93 = 0, $i617 = 0, $25 = 0, $nextvalue_sroa_0_0__cast224 = 0, $nextvalue_sroa_1_4__idx251 = 0, $nextvalue_sroa_1_4__cast252 = 0, $nextvalue_sroa_2_8__idx290 = 0, $26 = 0, $tt955 = 0, $27 = 0, $28 = 0, $f = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $arraydecay1064 = 0, $incdec_ptr1067 = 0, $arraydecay = 0, $arraydecay1043 = 0, $35 = 0, $36 = 0, $i1008 = 0, $37 = 0, $38 = 0, $i981 = 0, $39 = 0, $nextvalue_sroa_0_0__cast220 = 0, $nextvalue_sroa_1_4__idx245 = 0, $nextvalue_sroa_1_4__cast246 = 0, $nextvalue_sroa_2_8__idx284 = 0, $40 = 0, $f1401 = 0, $arraydecay1520 = 0, $41 = 0, $nextvalue_sroa_0_0__cast = 0, $nextvalue_sroa_1_4__idx = 0, $nextvalue_sroa_1_4__cast = 0, $nextvalue_sroa_2_8__idx283 = 0, $p_01150 = 0, $blen_01149 = 0, $bsiz_01148 = 0, $nextarg_01147 = 0, $posarg_01146 = 0, $t_0 = 0, $cmp14 = 0, $42 = 0, $cmp15 = 0, $incdec_ptr18 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $add = 0, $bsiz_1 = 0, $cmp20 = 0, $mul = 0, $43 = 0, $ptr25 = 0, $44 = 0, $45 = 0, $arrayidx = 0, $add_ptr36 = 0, $nextvalue_sroa_0_0_copyload243 = 0, $nextvalue_sroa_1_4_copyload280 = 0, $nextvalue_sroa_2_8_copyload314 = 0, $id_0 = 0, $nextvalue_sroa_0_0 = 0, $nextvalue_sroa_1_0 = 0, $nextvalue_sroa_2_0 = 0, $posarg_1 = 0, $nextarg_1 = 0, $flags_1 = 0, $prec_0 = 0, $width_0 = 0, $p_1 = 0, $46 = 0, $conv38 = 0, $cmp1021049 = 0, $call = 0, $and = 0, $tobool = 0, $call40 = 0, $and42 = 0, $tobool43 = 0, $call45 = 0, $or = 0, $incdec_ptr47 = 0, $and49 = 0, $tobool50 = 0, $call52 = 0, $and54 = 0, $tobool55 = 0, $call57 = 0, $or59 = 0, $incdec_ptr60 = 0, $and62 = 0, $tobool63 = 0, $call65 = 0, $and67 = 0, $tobool68 = 0, $call70 = 0, $or72 = 0, $incdec_ptr73 = 0, $and75 = 0, $tobool76 = 0, $call78 = 0, $and80 = 0, $tobool81 = 0, $call83 = 0, $or85 = 0, $incdec_ptr86 = 0, $and88 = 0, $tobool89 = 0, $call91 = 0, $and93 = 0, $tobool94 = 0, $call96 = 0, $or98 = 0, $incdec_ptr99 = 0, $p_21051 = 0, $n_01050 = 0, $47 = 0, $conv105 = 0, $isdigittmp = 0, $isdigit = 0, $mul111 = 0, $48 = 0, $conv112 = 0, $sub = 0, $add113 = 0, $div = 0, $cmp114 = 0, $call117 = 0, $incdec_ptr120 = 0, $cmp102 = 0, $p_2_lcssa = 0, $n_0_lcssa = 0, $call125 = 0, $p_21048 = 0, $n_01046 = 0, $49 = 0, $cmp128 = 0, $cmp131 = 0, $call134 = 0, $cmp137 = 0, $call139 = 0, $nextvalue_sroa_2_8_copyload311 = 0, $cmp143 = 0, $call146 = 0, $nextvalue_sroa_2_8_copyload309 = 0, $cmp150 = 0, $call153 = 0, $nextvalue_sroa_2_8_copyload307 = 0, $cmp157 = 0, $call160 = 0, $nextvalue_sroa_2_8_copyload305 = 0, $incdec_ptr_sum980 = 0, $arrayidx163 = 0, $50 = 0, $nextvalue_sroa_1_4__idx263 = 0, $nextvalue_sroa_2_8__idx302 = 0, $nextvalue_sroa_2_8_copyload303 = 0, $nextvalue_sroa_0_1_in_in = 0, $nextvalue_sroa_1_1_in_in = 0, $nextvalue_sroa_2_1 = 0, $posarg_2 = 0, $nextvalue_sroa_1_1_in = 0, $nextvalue_sroa_0_1_in = 0, $nextvalue_sroa_1_1 = 0, $nextvalue_sroa_0_1 = 0, $incdec_ptr167 = 0, $and169 = 0, $tobool170 = 0, $call172 = 0, $and174 = 0, $tobool175 = 0, $call177 = 0, $or179 = 0, $cmp184 = 0, $conv193 = 0, $p_3 = 0, $cmp189 = 0, $51 = 0, $conv192 = 0, $cmp194 = 0, $incdec_ptr198 = 0, $tobool200 = 0, $call202 = 0, $sub_ptr_lhs_cast204 = 0, $sub_ptr_rhs_cast205 = 0, $sub_ptr_sub206 = 0, $add207 = 0, $add_ptr210 = 0, $sub_ptr_lhs_cast211 = 0, $sub_ptr_rhs_cast212 = 0, $sub_ptr_sub213 = 0, $sub214 = 0, $call216 = 0, $cmp217 = 0, $call220 = 0, $add225 = 0, $nextvalue_sroa_2_8_copyload301 = 0, $cmp229 = 0, $call232 = 0, $add237 = 0, $nextvalue_sroa_2_8_copyload299 = 0, $nextvalue_sroa_2_8_copyload297 = 0, $nextvalue_sroa_0_2_in_in = 0, $nextvalue_sroa_1_2_in_in = 0, $nextvalue_sroa_2_2 = 0, $posarg_3 = 0, $nextvalue_sroa_1_2_in = 0, $nextvalue_sroa_0_2_in = 0, $nextvalue_sroa_1_2 = 0, $nextvalue_sroa_0_2 = 0, $cmp247 = 0, $call250 = 0, $add255 = 0, $incdec_ptr262 = 0, $and264 = 0, $tobool265 = 0, $call267 = 0, $and269 = 0, $tobool270 = 0, $call272 = 0, $or274 = 0, $p_41039 = 0, $cmp2781040 = 0, $p_41042 = 0, $n_11041 = 0, $52 = 0, $conv281 = 0, $isdigittmp998 = 0, $isdigit999 = 0, $mul288 = 0, $53 = 0, $conv289 = 0, $sub290 = 0, $add291 = 0, $div292 = 0, $cmp293 = 0, $p_4 = 0, $cmp278 = 0, $call296 = 0, $p_4_lcssa = 0, $n_1_lcssa = 0, $call304 = 0, $p_41038 = 0, $n_11036 = 0, $54 = 0, $cmp307 = 0, $cmp310 = 0, $call313 = 0, $tmp_sroa_0_0_copyload161 = 0, $cmp318 = 0, $call321 = 0, $tmp_sroa_0_0_copyload159 = 0, $cmp325 = 0, $call328 = 0, $tmp_sroa_0_0_copyload157 = 0, $cmp332 = 0, $call335 = 0, $tmp_sroa_0_0_copyload155 = 0, $incdec_ptr_sum978 = 0, $arrayidx338 = 0, $tmp_sroa_0_0__cast152 = 0, $tmp_sroa_0_0_copyload153 = 0, $cmp344 = 0, $call351 = 0, $tmp_sroa_0_0_copyload149 = 0, $call358 = 0, $tmp_sroa_0_0_copyload147 = 0, $inc362 = 0, $cmp363 = 0, $call366 = 0, $tmp_sroa_0_0_copyload145 = 0, $incdec_ptr_sum977 = 0, $arrayidx369 = 0, $tmp_sroa_0_0__cast142 = 0, $tmp_sroa_0_0_copyload143 = 0, $tmp_sroa_0_1 = 0, $posarg_5 = 0, $nextarg_3 = 0, $p_5 = 0, $cmp377 = 0, $or380 = 0, $sub381 = 0, $flags_2 = 0, $width_1 = 0, $incdec_ptr383 = 0, $and385 = 0, $tobool386 = 0, $call388 = 0, $or390 = 0, $incdec_ptr391 = 0, $55 = 0, $cmp393 = 0, $cmp5081022 = 0, $incdec_ptr397 = 0, $cmp3991030 = 0, $p_61032 = 0, $n_21031 = 0, $56 = 0, $conv402 = 0, $isdigittmp1000 = 0, $isdigit1001 = 0, $mul409 = 0, $57 = 0, $conv410 = 0, $sub411 = 0, $add412 = 0, $div413 = 0, $cmp414 = 0, $call417 = 0, $incdec_ptr420 = 0, $cmp399 = 0, $p_6_lcssa = 0, $n_2_lcssa = 0, $call425 = 0, $p_61029 = 0, $n_21027 = 0, $58 = 0, $cmp428 = 0, $cmp431 = 0, $call434 = 0, $tmp_sroa_0_0_copyload141 = 0, $cmp439 = 0, $call442 = 0, $tmp_sroa_0_0_copyload139 = 0, $cmp446 = 0, $call449 = 0, $tmp_sroa_0_0_copyload137 = 0, $cmp453 = 0, $call456 = 0, $tmp_sroa_0_0_copyload135 = 0, $incdec_ptr_sum976 = 0, $arrayidx459 = 0, $tmp_sroa_0_0__cast132 = 0, $tmp_sroa_0_0_copyload133 = 0, $cmp466 = 0, $call473 = 0, $tmp_sroa_0_0_copyload129 = 0, $call480 = 0, $tmp_sroa_0_0_copyload127 = 0, $inc484 = 0, $cmp485 = 0, $call488 = 0, $tmp_sroa_0_0_copyload125 = 0, $incdec_ptr_sum975 = 0, $arrayidx491 = 0, $tmp_sroa_0_0__cast = 0, $tmp_sroa_0_0_copyload = 0, $tmp_sroa_0_3 = 0, $posarg_7 = 0, $nextarg_5 = 0, $p_7 = 0, $cmp500 = 0, $and503 = 0, $and503_or390 = 0, $incdec_ptr505 = 0, $p_81024 = 0, $prec_11023 = 0, $59 = 0, $conv511 = 0, $isdigittmp1002 = 0, $isdigit1003 = 0, $mul518 = 0, $60 = 0, $conv519 = 0, $sub520 = 0, $add521 = 0, $div522 = 0, $cmp523 = 0, $call526 = 0, $incdec_ptr529 = 0, $cmp508 = 0, $p_8_lcssa = 0, $prec_1_lcssa = 0, $call534 = 0, $incdec_ptr537 = 0, $p_9 = 0, $cmp539 = 0, $call542 = 0, $add547 = 0, $bsiz_2 = 0, $cmp548 = 0, $mul551 = 0, $61 = 0, $ptr556 = 0, $62 = 0, $63 = 0, $arrayidx558 = 0, $cmp564 = 0, $call571 = 0, $call577 = 0, $inc580 = 0, $cmp581 = 0, $call584 = 0, $incdec_ptr_sum974 = 0, $arrayidx586 = 0, $64 = 0, $posarg_8 = 0, $nextarg_6 = 0, $tmp592_sroa_0_0_copyload = 0, $tmp592_sroa_2_8_copyload = 0, $65 = 0, $66 = 0, $67 = 0, $len604 = 0, $68 = 0, $cmp605 = 0, $call608 = 0, $ptr612 = 0, $69 = 0, $70 = 0, $conv614 = 0, $71 = 0, $c_0 = 0, $and624 = 0, $tobool625 = 0, $add629 = 0, $bsiz_3 = 0, $cmp630 = 0, $mul633 = 0, $72 = 0, $ptr638 = 0, $73 = 0, $74 = 0, $conv640 = 0, $arrayidx641 = 0, $and644 = 0, $tobool645 = 0, $sub687 = 0, $add688 = 0, $add649 = 0, $bsiz_4 = 0, $cmp650 = 0, $mul653 = 0, $75 = 0, $ptr658 = 0, $76 = 0, $77 = 0, $conv660 = 0, $arrayidx661 = 0, $add667 = 0, $bsiz_5 = 0, $cmp668 = 0, $mul671 = 0, $sub666 = 0, $78 = 0, $ptr676 = 0, $79 = 0, $80 = 0, $arrayidx678 = 0, $bsiz_6 = 0, $cmp689 = 0, $mul692 = 0, $81 = 0, $ptr697 = 0, $82 = 0, $83 = 0, $arrayidx699 = 0, $add706 = 0, $bsiz_7 = 0, $cmp707 = 0, $mul710 = 0, $84 = 0, $ptr715 = 0, $85 = 0, $86 = 0, $conv717 = 0, $arrayidx718 = 0, $nextvalue_sroa_0_3 = 0, $nextvalue_sroa_1_3 = 0, $nextvalue_sroa_2_3 = 0, $posarg_9 = 0, $p_10 = 0, $cmp725 = 0, $call732 = 0, $call738 = 0, $inc741 = 0, $cmp742 = 0, $call745 = 0, $incdec_ptr_sum973 = 0, $arrayidx747 = 0, $87 = 0, $posarg_10 = 0, $nextarg_7 = 0, $88 = 0, $cmp756 = 0, $str_sroa_0_0_copyload = 0, $len764 = 0, $89 = 0, $90 = 0, $91 = 0, $len767 = 0, $92 = 0, $and768 = 0, $tobool769 = 0, $93 = 0, $cmp774 = 0, $call777 = 0, $and779 = 0, $tobool780 = 0, $cmp782 = 0, $or_cond982 = 0, $len753_0 = 0, $slen_0 = 0, $and798 = 0, $tobool799 = 0, $cmp801 = 0, $or_cond983 = 0, $len753_1_ph = 0, $add875 = 0, $sub804 = 0, $and805 = 0, $tobool806 = 0, $add810 = 0, $bsiz_8 = 0, $cmp811 = 0, $mul814 = 0, $dec1134 = 0, $tobool8221135 = 0, $94 = 0, $ptr819 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $scevgep1225 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $width_3_ph = 0, $bsiz_9_ph = 0, $blen_2_ph = 0, $add830 = 0, $bsiz_9 = 0, $cmp831 = 0, $mul834 = 0, $104 = 0, $ptr839 = 0, $105 = 0, $106 = 0, $arrayidx841 = 0, $ptr844 = 0, $107 = 0, $108 = 0, $add851 = 0, $bsiz_10 = 0, $cmp852 = 0, $mul855 = 0, $tobool8641141 = 0, $bsiz_11 = 0, $cmp876 = 0, $mul879 = 0, $109 = 0, $ptr884 = 0, $110 = 0, $111 = 0, $arrayidx886 = 0, $ptr889 = 0, $112 = 0, $113 = 0, $cmp896 = 0, $call903 = 0, $call909 = 0, $inc912 = 0, $cmp913 = 0, $call916 = 0, $incdec_ptr_sum972 = 0, $arrayidx918 = 0, $114 = 0, $posarg_11 = 0, $nextarg_8 = 0, $115 = 0, $conv935 = 0, $and938 = 0, $not_tobool939 = 0, $_ = 0, $sign_0 = 0, $and943 = 0, $tobool944 = 0, $116 = 0, $conv946 = 0, $prefix_0_ph = 0, $_pr = 0, $117 = 0, $118 = 0.0, $cmp958 = 0, $cmp963 = 0, $or_cond984 = 0, $conv968 = 0, $119 = 0, $cmp973 = 0, $120 = 0, $v_0 = 0, $121 = 0, $conv985 = 0, $cmp995 = 0, $tobool998 = 0, $or_cond985 = 0, $dots_0 = 0, $122 = 0, $cmp9921010 = 0, $base_01009 = 0, $dots_1 = 0, $v_1 = 0, $org_v_0 = 0, $tobool1010 = 0, $123 = 0, $cmp1015 = 0, $cmp1023 = 0, $sub1026 = 0, $dec1027 = 0, $and1029 = 0, $tobool1030 = 0, $dec1032 = 0, $and1034 = 0, $tobool1035 = 0, $_987 = 0, $not_tobool1035 = 0, $dec1037 = 0, $width_0_dec1037 = 0, $sc_0 = 0, $v_2 = 0, $width_5 = 0, $124 = 0, $125 = 0, $conv1041 = 0, $call1042 = 0, $call1045 = 0, $cmp1051 = 0, $cmp1060 = 0, $_dots_1 = 0, $126 = 0, $127 = 0, $conv1065 = 0, $call1066 = 0, $call1069 = 0, $call1074 = 0, $d_0_ph = 0, $conv1080971 = 0, $128 = 0, $conv1083 = 0, $cmp1085 = 0, $incdec_ptr1088 = 0, $s_0 = 0, $dots_3 = 0, $sc_1 = 0, $v_3 = 0, $width_6 = 0, $call1093 = 0, $tobool1094 = 0, $sub1096 = 0, $sub1097 = 0, $prec_2 = 0, $width_7 = 0, $129 = 0, $cmp1100 = 0, $130 = 0, $cmp11081113 = 0, $131 = 0, $pp_01114 = 0, $conv1107 = 0, $call1111 = 0, $conv1112 = 0, $incdec_ptr1113 = 0, $132 = 0, $cmp1108 = 0, $tobool1116 = 0, $arrayidx1118 = 0, $133 = 0, $tobool1119 = 0, $cmp1124 = 0, $134 = 0, $cmp1128 = 0, $135 = 0, $sext = 0, $prec_2_dec1134 = 0, $and1137 = 0, $tobool1138 = 0, $cmp1140 = 0, $or_cond989 = 0, $_prefix_0997 = 0, $cmp1147 = 0, $136 = 0, $cmp1151 = 0, $_prefix_0 = 0, $prec_3 = 0, $prefix_1 = 0, $len934_0 = 0, $tobool1156 = 0, $call1160 = 0, $sub1161 = 0, $tobool11561017 = 0, $len934_01016 = 0, $prefix_11015 = 0, $prec_31014 = 0, $width_8 = 0, $and1163 = 0, $cmp1164 = 0, $cmp1168 = 0, $tobool1156_not = 0, $cmp1173 = 0, $or_cond990 = 0, $cmp1176 = 0, $or_cond991 = 0, $137 = 0, $cmp1180 = 0, $_len934_0 = 0, $prec_4 = 0, $len934_2 = 0, $sub1185 = 0, $prec_5 = 0, $len934_3 = 0, $width_9 = 0, $and1187 = 0, $tobool1188 = 0, $add1192 = 0, $bsiz_12 = 0, $cmp1193 = 0, $mul1196 = 0, $dec12041115 = 0, $cmp12051116 = 0, $138 = 0, $ptr1201 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $scevgep = 0, $143 = 0, $144 = 0, $145 = 0, $width_11 = 0, $bsiz_13 = 0, $blen_5 = 0, $tobool1212 = 0, $add1217 = 0, $bsiz_14 = 0, $cmp1218 = 0, $mul1221 = 0, $146 = 0, $ptr1226 = 0, $147 = 0, $148 = 0, $arrayidx1228 = 0, $bsiz_15 = 0, $blen_6 = 0, $call1235 = 0, $add1239 = 0, $bsiz_16 = 0, $cmp1240 = 0, $mul1243 = 0, $149 = 0, $ptr1248 = 0, $150 = 0, $151 = 0, $arrayidx1250 = 0, $bsiz_17_ph = 0, $blen_7_ph = 0, $sub1256 = 0, $add1257 = 0, $bsiz_17 = 0, $cmp1258 = 0, $mul1261 = 0, $152 = 0, $ptr1266 = 0, $153 = 0, $154 = 0, $add1273 = 0, $bsiz_18 = 0, $cmp1274 = 0, $mul1277 = 0, $155 = 0, $ptr1282 = 0, $156 = 0, $157 = 0, $arrayidx1284 = 0, $158 = 0, $bsiz_19 = 0, $blen_8 = 0, $buf_0 = 0, $cmp1288 = 0, $cmp1293 = 0, $or_cond992 = 0, $cmp13011126 = 0, $and1308 = 0, $cmp1309 = 0, $cmp13161121 = 0, $or_cond1228 = 0, $scevgep1221 = 0, $159 = 0, $160 = 0, $161 = 0, $call1298 = 0, $scevgep1222 = 0, $162 = 0, $163 = 0, $164 = 0, $blen_11_ph = 0, $add1327 = 0, $bsiz_20 = 0, $cmp1328 = 0, $mul1331 = 0, $165 = 0, $ptr1336 = 0, $166 = 0, $167 = 0, $arrayidx1338 = 0, $add1343 = 0, $bsiz_21 = 0, $cmp1344 = 0, $mul1347 = 0, $cmp13561130 = 0, $cmp1366 = 0, $call1373 = 0, $call1379 = 0, $inc1382 = 0, $cmp1383 = 0, $call1386 = 0, $incdec_ptr_sum = 0, $arrayidx1388 = 0, $168 = 0, $posarg_12 = 0, $nextarg_9 = 0, $169 = 0.0, $call1402 = 0, $cmp1403 = 0, $call1406 = 0, $cmp1407 = 0, $call1412 = 0, $cmp1413 = 0, $_993 = 0, $call1418 = 0, $cmp1419 = 0, $cmp1422 = 0, $or_cond = 0, $and1425 = 0, $tobool1426 = 0, $need_0 = 0, $and1430 = 0, $tobool1431 = 0, $cmp1433 = 0, $or_cond994 = 0, $width_0_need_0 = 0, $add1439 = 0, $add1440 = 0, $bsiz_22 = 0, $cmp1441 = 0, $mul1444 = 0, $170 = 0, $ptr1449 = 0, $171 = 0, $172 = 0, $arrayidx1451 = 0, $call1453 = 0, $and1454 = 0, $tobool1455 = 0, $call1457 = 0, $cmp1458 = 0, $or_cond1 = 0, $inc1464 = 0, $and1467 = 0, $tobool1468 = 0, $inc1470 = 0, $and1473 = 0, $and1473_lobit = 0, $add_inc1476 = 0, $blen_13 = 0, $arrayidx1480 = 0, $add1489 = 0, $sub1491 = 0, $arrayidx1492 = 0, $and1494 = 0, $tobool1495 = 0, $add1497 = 0, $sub1499 = 0, $arrayidx1500 = 0, $and1502 = 0, $tobool1503 = 0, $cmp1505 = 0, $or_cond995 = 0, $inc1508 = 0, $inc1508_add = 0, $blen_14 = 0, $add1512 = 0, $sub1513 = 0, $arrayidx1514 = 0, $blen_15 = 0, $arrayidx1516 = 0, $call1517 = 0, $add1518 = 0, $173 = 0, $conv1521 = 0, $174 = 0, $call1530 = 0.0, $175 = 0, $cmp1531 = 0, $mul1534 = 0, $div1535 = 0, $add1536 = 0, $need_2 = 0, $and1539 = 0, $tobool1540 = 0, $cond1544 = 0, $add1545 = 0, $and1546 = 0, $tobool1547 = 0, $cmp1549 = 0, $or_cond996 = 0, $need_3 = 0, $add1553 = 0, $add1556 = 0, $bsiz_23 = 0, $cmp1557 = 0, $mul1560 = 0, $176 = 0, $ptr1565 = 0, $177 = 0, $178 = 0, $arrayidx1567 = 0, $call1569 = 0, $add1570 = 0, $179 = 0, $ptr1352 = 0, $180 = 0, $181 = 0, $182 = 0, $scevgep1223 = 0, $183 = 0, $184 = 0, $185 = 0, $ptr860 = 0, $186 = 0, $187 = 0, $188 = 0, $scevgep1226 = 0, $189 = 0, $190 = 0, $posarg_13 = 0, $nextarg_10 = 0, $bsiz_24 = 0, $blen_16 = 0, $p_11 = 0, $incdec_ptr1573 = 0, $cmp = 0, $blen_17 = 0, $191 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1332 | 0;
  tempParam = $fmt;
  $fmt = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$fmt >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$fmt + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$fmt + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $result = __stackBase__ | 0;
    $hash = __stackBase__ + 12 | 0;
    $tmp3 = __stackBase__ + 24 | 0;
    $tmp7 = __stackBase__ + 36 | 0;
    $tmp22 = __stackBase__ + 48 | 0;
    $tmp37 = __stackBase__ + 60 | 0;
    $agg_tmp = __stackBase__ + 72 | 0;
    $agg_tmp135 = __stackBase__ + 84 | 0;
    $agg_tmp140 = __stackBase__ + 96 | 0;
    $agg_tmp141 = __stackBase__ + 108 | 0;
    $tmp142 = __stackBase__ + 120 | 0;
    $agg_tmp147 = __stackBase__ + 132 | 0;
    $tmp148 = __stackBase__ + 144 | 0;
    $agg_tmp154 = __stackBase__ + 156 | 0;
    $tmp155 = __stackBase__ + 168 | 0;
    $tmp161 = __stackBase__ + 180 | 0;
    $symname = __stackBase__ + 192 | 0;
    $agg_tmp203 = __stackBase__ + 204 | 0;
    $agg_tmp208 = __stackBase__ + 216 | 0;
    $agg_tmp221 = __stackBase__ + 228 | 0;
    $agg_tmp226 = __stackBase__ + 240 | 0;
    $tmp227 = __stackBase__ + 252 | 0;
    $agg_tmp233 = __stackBase__ + 264 | 0;
    $tmp238 = __stackBase__ + 276 | 0;
    $agg_tmp240 = __stackBase__ + 288 | 0;
    $agg_tmp241 = __stackBase__ + 300 | 0;
    $agg_tmp242 = __stackBase__ + 312 | 0;
    $tmp243 = __stackBase__ + 324 | 0;
    $agg_tmp251 = __stackBase__ + 336 | 0;
    $agg_tmp314 = __stackBase__ + 348 | 0;
    $agg_tmp315 = __stackBase__ + 360 | 0;
    $tmp316 = __stackBase__ + 372 | 0;
    $agg_tmp322 = __stackBase__ + 384 | 0;
    $tmp323 = __stackBase__ + 396 | 0;
    $agg_tmp329 = __stackBase__ + 408 | 0;
    $tmp330 = __stackBase__ + 420 | 0;
    $tmp336 = __stackBase__ + 432 | 0;
    $agg_tmp352 = __stackBase__ + 444 | 0;
    $tmp353 = __stackBase__ + 456 | 0;
    $agg_tmp359 = __stackBase__ + 468 | 0;
    $tmp360 = __stackBase__ + 480 | 0;
    $tmp367 = __stackBase__ + 492 | 0;
    $agg_tmp435 = __stackBase__ + 504 | 0;
    $agg_tmp436 = __stackBase__ + 516 | 0;
    $tmp437 = __stackBase__ + 528 | 0;
    $agg_tmp443 = __stackBase__ + 540 | 0;
    $tmp444 = __stackBase__ + 552 | 0;
    $agg_tmp450 = __stackBase__ + 564 | 0;
    $tmp451 = __stackBase__ + 576 | 0;
    $tmp457 = __stackBase__ + 588 | 0;
    $agg_tmp474 = __stackBase__ + 600 | 0;
    $tmp475 = __stackBase__ + 612 | 0;
    $agg_tmp481 = __stackBase__ + 624 | 0;
    $tmp482 = __stackBase__ + 636 | 0;
    $tmp489 = __stackBase__ + 648 | 0;
    $tmp553 = __stackBase__ + 660 | 0;
    $val = __stackBase__ + 672 | 0;
    $agg_tmp572 = __stackBase__ + 684 | 0;
    $agg_tmp578 = __stackBase__ + 696 | 0;
    $tmp594 = __stackBase__ + 708 | 0;
    $tmp635 = __stackBase__ + 720 | 0;
    $tmp655 = __stackBase__ + 732 | 0;
    $tmp673 = __stackBase__ + 744 | 0;
    $tmp694 = __stackBase__ + 756 | 0;
    $tmp712 = __stackBase__ + 768 | 0;
    $arg = __stackBase__ + 780 | 0;
    $agg_tmp733 = __stackBase__ + 792 | 0;
    $agg_tmp739 = __stackBase__ + 804 | 0;
    $tmp759 = __stackBase__ + 816 | 0;
    $tmp761 = __stackBase__ + 828 | 0;
    $tmp816 = __stackBase__ + 840 | 0;
    $tmp836 = __stackBase__ + 852 | 0;
    $tmp857 = __stackBase__ + 864 | 0;
    $tmp881 = __stackBase__ + 876 | 0;
    $val894 = __stackBase__ + 888 | 0;
    $agg_tmp904 = __stackBase__ + 900 | 0;
    $agg_tmp910 = __stackBase__ + 912 | 0;
    $fbuf = __stackBase__ + 924 | 0;
    $nbuf = __stackBase__ + 956 | 0;
    $tmp969 = __stackBase__ + 1020 | 0;
    $tmp971 = __stackBase__ + 1032 | 0;
    $tmp978 = __stackBase__ + 1044 | 0;
    $tmp983 = __stackBase__ + 1056 | 0;
    $agg_tmp1000 = __stackBase__ + 1068 | 0;
    $tmp1001 = __stackBase__ + 1080 | 0;
    $agg_tmp1003 = __stackBase__ + 1092 | 0;
    $tmp1004 = __stackBase__ + 1104 | 0;
    $tmp1006 = __stackBase__ + 1116 | 0;
    $tmp1198 = __stackBase__ + 1128 | 0;
    $tmp1223 = __stackBase__ + 1140 | 0;
    $tmp1245 = __stackBase__ + 1152 | 0;
    $tmp1263 = __stackBase__ + 1164 | 0;
    $tmp1279 = __stackBase__ + 1176 | 0;
    $tmp1333 = __stackBase__ + 1188 | 0;
    $tmp1349 = __stackBase__ + 1200 | 0;
    $val1364 = __stackBase__ + 1212 | 0;
    $agg_tmp1374 = __stackBase__ + 1224 | 0;
    $agg_tmp1380 = __stackBase__ + 1236 | 0;
    $i1395 = __stackBase__ + 1248 | 0;
    $fbuf1398 = __stackBase__ + 1252 | 0;
    $tmp1399 = __stackBase__ + 1284 | 0;
    $tmp1446 = __stackBase__ + 1296 | 0;
    $tmp1562 = __stackBase__ + 1308 | 0;
    $tmp1575 = __stackBase__ + 1320 | 0;
    _mrb_undef_value1718($hash);
    $inc = $argc + 1 | 0;
    $incdec_ptr = $argv - 12 | 0;
    _mrb_str_to_str($tmp3, $mrb, $fmt);
    $0 = $fmt;
    $1 = $tmp3;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    $p4 = $fmt;
    $2 = HEAP32[$p4 >> 2] | 0;
    $ptr = $2 + 20 | 0;
    $3 = $ptr;
    $4 = HEAP32[$3 >> 2] | 0;
    $len = $2 + 12 | 0;
    $5 = $len;
    $6 = HEAP32[$5 >> 2] | 0;
    $add_ptr = $4 + $6 | 0;
    _mrb_str_buf_new($tmp7, $mrb, 120);
    $7 = $result;
    $8 = $tmp7;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    $p9 = $result;
    $9 = HEAP32[$p9 >> 2] | 0;
    $ptr10 = $9 + 20 | 0;
    $10 = $ptr10;
    $11 = HEAP32[$10 >> 2] | 0;
    _memset($11 | 0, 0, 120);
    $cmp1145 = ($6 | 0) > 0;
    if ($cmp1145) {
      label = 3;
      break;
    } else {
      $blen_17 = 0;
      label = 337;
      break;
    }
   case 3:
    $12 = $tmp37;
    $nextvalue_sroa_0_0__cast242 = $tmp37;
    $nextvalue_sroa_1_4__idx278 = $12 + 4 | 0;
    $nextvalue_sroa_1_4__cast279 = $nextvalue_sroa_1_4__idx278;
    $nextvalue_sroa_2_8__idx313 = $tmp37 + 8 | 0;
    $13 = $tmp227;
    $nextvalue_sroa_1_4__idx260 = $13 + 4 | 0;
    $nextvalue_sroa_2_8__idx300 = $tmp227 + 8 | 0;
    $14 = $tmp238;
    $nextvalue_sroa_1_4__idx257 = $14 + 4 | 0;
    $nextvalue_sroa_2_8__idx298 = $tmp238 + 8 | 0;
    $15 = $tmp243;
    $nextvalue_sroa_1_4__idx254 = $15 + 4 | 0;
    $nextvalue_sroa_2_8__idx296 = $tmp243 + 8 | 0;
    $tmp_sroa_0_0__cast160 = $tmp316;
    $tmp_sroa_0_0__cast158 = $tmp323;
    $tmp_sroa_0_0__cast156 = $tmp330;
    $tmp_sroa_0_0__cast154 = $tmp336;
    $tmp_sroa_0_0__cast144 = $tmp367;
    $tmp_sroa_0_0__cast148 = $tmp353;
    $tmp_sroa_0_0__cast146 = $tmp360;
    $tmp_sroa_0_0__cast140 = $tmp437;
    $tmp_sroa_0_0__cast138 = $tmp444;
    $tmp_sroa_0_0__cast136 = $tmp451;
    $tmp_sroa_0_0__cast134 = $tmp457;
    $tmp_sroa_0_0__cast124 = $tmp489;
    $tmp_sroa_0_0__cast128 = $tmp475;
    $tmp_sroa_0_0__cast126 = $tmp482;
    $16 = $tmp142;
    $nextvalue_sroa_1_4__idx275 = $16 + 4 | 0;
    $nextvalue_sroa_2_8__idx310 = $tmp142 + 8 | 0;
    $17 = $tmp148;
    $nextvalue_sroa_1_4__idx272 = $17 + 4 | 0;
    $nextvalue_sroa_2_8__idx308 = $tmp148 + 8 | 0;
    $18 = $tmp155;
    $nextvalue_sroa_1_4__idx269 = $18 + 4 | 0;
    $nextvalue_sroa_2_8__idx306 = $tmp155 + 8 | 0;
    $19 = $tmp161;
    $nextvalue_sroa_1_4__idx266 = $19 + 4 | 0;
    $nextvalue_sroa_2_8__idx304 = $tmp161 + 8 | 0;
    $20 = $arg;
    $21 = $arg;
    $22 = $tmp759;
    $str_sroa_0_0__cast = $tmp761;
    $23 = $arg;
    $nextvalue_sroa_0_0__cast222 = $arg;
    $nextvalue_sroa_1_4__idx248 = $23 + 4 | 0;
    $nextvalue_sroa_1_4__cast249 = $nextvalue_sroa_1_4__idx248;
    $nextvalue_sroa_2_8__idx287 = $arg + 8 | 0;
    $24 = $val;
    $tmp592_sroa_0_0__cast = $tmp594;
    $tmp592_sroa_2_8__idx93 = $tmp594 + 8 | 0;
    $i617 = $val;
    $25 = $val;
    $nextvalue_sroa_0_0__cast224 = $val;
    $nextvalue_sroa_1_4__idx251 = $25 + 4 | 0;
    $nextvalue_sroa_1_4__cast252 = $nextvalue_sroa_1_4__idx251;
    $nextvalue_sroa_2_8__idx290 = $val + 8 | 0;
    $26 = $val894;
    $tt955 = $val894 + 8 | 0;
    $27 = $val894;
    $28 = $tmp983;
    $f = $val894 | 0;
    $29 = $val894;
    $30 = $tmp971;
    $31 = $val894;
    $32 = $tmp969;
    $33 = $val894;
    $34 = $tmp978;
    $arraydecay1064 = $fbuf | 0;
    $incdec_ptr1067 = $nbuf + 1 | 0;
    $arraydecay = $fbuf | 0;
    $arraydecay1043 = $nbuf | 0;
    $35 = $val894;
    $36 = $tmp1001;
    $i1008 = $tmp1006;
    $37 = $val894;
    $38 = $tmp1004;
    $i981 = $val894;
    $39 = $val894;
    $nextvalue_sroa_0_0__cast220 = $val894;
    $nextvalue_sroa_1_4__idx245 = $39 + 4 | 0;
    $nextvalue_sroa_1_4__cast246 = $nextvalue_sroa_1_4__idx245;
    $nextvalue_sroa_2_8__idx284 = $val894 + 8 | 0;
    $40 = $val1364;
    $f1401 = $tmp1399 | 0;
    $arraydecay1520 = $fbuf1398 | 0;
    $41 = $val1364;
    $nextvalue_sroa_0_0__cast = $val1364;
    $nextvalue_sroa_1_4__idx = $41 + 4 | 0;
    $nextvalue_sroa_1_4__cast = $nextvalue_sroa_1_4__idx;
    $nextvalue_sroa_2_8__idx283 = $val1364 + 8 | 0;
    $posarg_01146 = 0;
    $nextarg_01147 = 1;
    $bsiz_01148 = 120;
    $blen_01149 = 0;
    $p_01150 = $4;
    label = 4;
    break;
   case 4:
    $t_0 = $p_01150;
    label = 5;
    break;
   case 5:
    $cmp14 = $t_0 >>> 0 < $add_ptr >>> 0;
    if ($cmp14) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $42 = HEAP8[$t_0] | 0;
    $cmp15 = $42 << 24 >> 24 == 37;
    $incdec_ptr18 = $t_0 + 1 | 0;
    if ($cmp15) {
      label = 7;
      break;
    } else {
      $t_0 = $incdec_ptr18;
      label = 5;
      break;
    }
   case 7:
    $sub_ptr_lhs_cast = $t_0;
    $sub_ptr_rhs_cast = $p_01150;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $add = $sub_ptr_sub + $blen_01149 | 0;
    $bsiz_1 = $bsiz_01148;
    label = 8;
    break;
   case 8:
    $cmp20 = ($add | 0) < ($bsiz_1 | 0);
    $mul = $bsiz_1 << 1;
    if ($cmp20) {
      label = 9;
      break;
    } else {
      $bsiz_1 = $mul;
      label = 8;
      break;
    }
   case 9:
    _mrb_str_resize($tmp22, $mrb, $result, $bsiz_1);
    $43 = HEAP32[$p9 >> 2] | 0;
    $ptr25 = $43 + 20 | 0;
    $44 = $ptr25;
    $45 = HEAP32[$44 >> 2] | 0;
    $arrayidx = $45 + $blen_01149 | 0;
    _memcpy($arrayidx | 0, $p_01150 | 0, $sub_ptr_sub);
    if ($cmp14) {
      label = 10;
      break;
    } else {
      $blen_17 = $add;
      label = 337;
      break;
    }
   case 10:
    $add_ptr36 = $t_0 + 1 | 0;
    _mrb_undef_value1718($tmp37);
    $nextvalue_sroa_0_0_copyload243 = HEAP32[$nextvalue_sroa_0_0__cast242 >> 2] | 0;
    $nextvalue_sroa_1_4_copyload280 = HEAP32[$nextvalue_sroa_1_4__cast279 >> 2] | 0;
    $nextvalue_sroa_2_8_copyload314 = HEAP32[$nextvalue_sroa_2_8__idx313 >> 2] | 0;
    $p_1 = $add_ptr36;
    $width_0 = -1;
    $prec_0 = -1;
    $flags_1 = 0;
    $nextarg_1 = $nextarg_01147;
    $posarg_1 = $posarg_01146;
    $nextvalue_sroa_2_0 = $nextvalue_sroa_2_8_copyload314;
    $nextvalue_sroa_1_0 = $nextvalue_sroa_1_4_copyload280;
    $nextvalue_sroa_0_0 = $nextvalue_sroa_0_0_copyload243;
    $id_0 = 0;
    label = 11;
    break;
   case 11:
    $46 = HEAP8[$p_1] | 0;
    $conv38 = $46 << 24 >> 24;
    if (($conv38 | 0) == 49 | ($conv38 | 0) == 50 | ($conv38 | 0) == 51 | ($conv38 | 0) == 52 | ($conv38 | 0) == 53 | ($conv38 | 0) == 54 | ($conv38 | 0) == 55 | ($conv38 | 0) == 56 | ($conv38 | 0) == 57) {
      label = 12;
      break;
    } else if (($conv38 | 0) == 32) {
      label = 14;
      break;
    } else if (($conv38 | 0) == 35) {
      label = 19;
      break;
    } else if (($conv38 | 0) == 43) {
      label = 24;
      break;
    } else if (($conv38 | 0) == 45) {
      label = 29;
      break;
    } else if (($conv38 | 0) == 48) {
      label = 34;
      break;
    } else if (($conv38 | 0) == 60 | ($conv38 | 0) == 123) {
      label = 62;
      break;
    } else if (($conv38 | 0) == 42) {
      label = 76;
      break;
    } else if (($conv38 | 0) == 46) {
      label = 106;
      break;
    } else if (($conv38 | 0) == 10 | ($conv38 | 0) == 0) {
      label = 139;
      break;
    } else if (($conv38 | 0) == 37) {
      $p_9 = $p_1;
      label = 140;
      break;
    } else if (($conv38 | 0) == 99) {
      label = 145;
      break;
    } else if (($conv38 | 0) == 115 | ($conv38 | 0) == 112) {
      $p_10 = $p_1;
      $posarg_9 = $posarg_1;
      $nextvalue_sroa_2_3 = $nextvalue_sroa_2_0;
      $nextvalue_sroa_1_3 = $nextvalue_sroa_1_0;
      $nextvalue_sroa_0_3 = $nextvalue_sroa_0_0;
      label = 173;
      break;
    } else if (($conv38 | 0) == 100 | ($conv38 | 0) == 105 | ($conv38 | 0) == 111 | ($conv38 | 0) == 120 | ($conv38 | 0) == 88 | ($conv38 | 0) == 98 | ($conv38 | 0) == 66 | ($conv38 | 0) == 117) {
      label = 201;
      break;
    } else if (($conv38 | 0) == 102 | ($conv38 | 0) == 103 | ($conv38 | 0) == 71 | ($conv38 | 0) == 101 | ($conv38 | 0) == 69 | ($conv38 | 0) == 97 | ($conv38 | 0) == 65) {
      label = 299;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $cmp1021049 = $p_1 >>> 0 < $add_ptr >>> 0;
    if ($cmp1021049) {
      $n_01050 = 0;
      $p_21051 = $p_1;
      label = 39;
      break;
    } else {
      $n_0_lcssa = 0;
      $p_2_lcssa = $p_1;
      label = 43;
      break;
    }
   case 13:
    $call = _mrb_class_get($mrb, 110460) | 0;
    _mrb_str_new($agg_tmp, $mrb, $p_1, 1);
    _mrb_raisef($mrb, $call, 102568, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    $p_11 = $p_1;
    $blen_16 = $add;
    $bsiz_24 = $bsiz_1;
    $nextarg_10 = $nextarg_1;
    $posarg_13 = $posarg_1;
    label = 336;
    break;
   case 14:
    $and = $flags_1 & 32;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $call40 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call40, 99880);
    label = 16;
    break;
   case 16:
    $and42 = $flags_1 & 128;
    $tobool43 = ($and42 | 0) == 0;
    if ($tobool43) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $call45 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call45, 97292);
    label = 18;
    break;
   case 18:
    $or = $flags_1 | 16;
    $incdec_ptr47 = $p_1 + 1 | 0;
    $p_1 = $incdec_ptr47;
    $width_0 = $width_0;
    $prec_0 = $prec_0;
    $flags_1 = $or;
    $nextarg_1 = $nextarg_1;
    $posarg_1 = $posarg_1;
    $nextvalue_sroa_2_0 = $nextvalue_sroa_2_0;
    $nextvalue_sroa_1_0 = $nextvalue_sroa_1_0;
    $nextvalue_sroa_0_0 = $nextvalue_sroa_0_0;
    $id_0 = $id_0;
    label = 11;
    break;
   case 19:
    $and49 = $flags_1 & 32;
    $tobool50 = ($and49 | 0) == 0;
    if ($tobool50) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $call52 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call52, 99880);
    label = 21;
    break;
   case 21:
    $and54 = $flags_1 & 128;
    $tobool55 = ($and54 | 0) == 0;
    if ($tobool55) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $call57 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call57, 97292);
    label = 23;
    break;
   case 23:
    $or59 = $flags_1 | 1;
    $incdec_ptr60 = $p_1 + 1 | 0;
    $p_1 = $incdec_ptr60;
    $width_0 = $width_0;
    $prec_0 = $prec_0;
    $flags_1 = $or59;
    $nextarg_1 = $nextarg_1;
    $posarg_1 = $posarg_1;
    $nextvalue_sroa_2_0 = $nextvalue_sroa_2_0;
    $nextvalue_sroa_1_0 = $nextvalue_sroa_1_0;
    $nextvalue_sroa_0_0 = $nextvalue_sroa_0_0;
    $id_0 = $id_0;
    label = 11;
    break;
   case 24:
    $and62 = $flags_1 & 32;
    $tobool63 = ($and62 | 0) == 0;
    if ($tobool63) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $call65 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call65, 99880);
    label = 26;
    break;
   case 26:
    $and67 = $flags_1 & 128;
    $tobool68 = ($and67 | 0) == 0;
    if ($tobool68) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $call70 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call70, 97292);
    label = 28;
    break;
   case 28:
    $or72 = $flags_1 | 4;
    $incdec_ptr73 = $p_1 + 1 | 0;
    $p_1 = $incdec_ptr73;
    $width_0 = $width_0;
    $prec_0 = $prec_0;
    $flags_1 = $or72;
    $nextarg_1 = $nextarg_1;
    $posarg_1 = $posarg_1;
    $nextvalue_sroa_2_0 = $nextvalue_sroa_2_0;
    $nextvalue_sroa_1_0 = $nextvalue_sroa_1_0;
    $nextvalue_sroa_0_0 = $nextvalue_sroa_0_0;
    $id_0 = $id_0;
    label = 11;
    break;
   case 29:
    $and75 = $flags_1 & 32;
    $tobool76 = ($and75 | 0) == 0;
    if ($tobool76) {
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    $call78 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call78, 99880);
    label = 31;
    break;
   case 31:
    $and80 = $flags_1 & 128;
    $tobool81 = ($and80 | 0) == 0;
    if ($tobool81) {
      label = 33;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $call83 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call83, 97292);
    label = 33;
    break;
   case 33:
    $or85 = $flags_1 | 2;
    $incdec_ptr86 = $p_1 + 1 | 0;
    $p_1 = $incdec_ptr86;
    $width_0 = $width_0;
    $prec_0 = $prec_0;
    $flags_1 = $or85;
    $nextarg_1 = $nextarg_1;
    $posarg_1 = $posarg_1;
    $nextvalue_sroa_2_0 = $nextvalue_sroa_2_0;
    $nextvalue_sroa_1_0 = $nextvalue_sroa_1_0;
    $nextvalue_sroa_0_0 = $nextvalue_sroa_0_0;
    $id_0 = $id_0;
    label = 11;
    break;
   case 34:
    $and88 = $flags_1 & 32;
    $tobool89 = ($and88 | 0) == 0;
    if ($tobool89) {
      label = 36;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $call91 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call91, 99880);
    label = 36;
    break;
   case 36:
    $and93 = $flags_1 & 128;
    $tobool94 = ($and93 | 0) == 0;
    if ($tobool94) {
      label = 38;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    $call96 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call96, 97292);
    label = 38;
    break;
   case 38:
    $or98 = $flags_1 | 8;
    $incdec_ptr99 = $p_1 + 1 | 0;
    $p_1 = $incdec_ptr99;
    $width_0 = $width_0;
    $prec_0 = $prec_0;
    $flags_1 = $or98;
    $nextarg_1 = $nextarg_1;
    $posarg_1 = $posarg_1;
    $nextvalue_sroa_2_0 = $nextvalue_sroa_2_0;
    $nextvalue_sroa_1_0 = $nextvalue_sroa_1_0;
    $nextvalue_sroa_0_0 = $nextvalue_sroa_0_0;
    $id_0 = $id_0;
    label = 11;
    break;
   case 39:
    $47 = HEAP8[$p_21051] | 0;
    $conv105 = $47 & 255;
    $isdigittmp = $conv105 - 48 | 0;
    $isdigit = $isdigittmp >>> 0 < 10;
    if ($isdigit) {
      label = 40;
      break;
    } else {
      $n_01046 = $n_01050;
      $p_21048 = $p_21051;
      label = 44;
      break;
    }
   case 40:
    $mul111 = $n_01050 * 10 & -1;
    $48 = HEAP8[$p_21051] | 0;
    $conv112 = $48 << 24 >> 24;
    $sub = $mul111 - 48 | 0;
    $add113 = $sub + $conv112 | 0;
    $div = ($add113 | 0) / 10 & -1;
    $cmp114 = ($div | 0) == ($n_01050 | 0);
    if ($cmp114) {
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    $call117 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call117, 95300);
    label = 42;
    break;
   case 42:
    $incdec_ptr120 = $p_21051 + 1 | 0;
    $cmp102 = $incdec_ptr120 >>> 0 < $add_ptr >>> 0;
    if ($cmp102) {
      $n_01050 = $add113;
      $p_21051 = $incdec_ptr120;
      label = 39;
      break;
    } else {
      $n_0_lcssa = $add113;
      $p_2_lcssa = $incdec_ptr120;
      label = 43;
      break;
    }
   case 43:
    $call125 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call125, 94220);
    $n_01046 = $n_0_lcssa;
    $p_21048 = $p_2_lcssa;
    label = 44;
    break;
   case 44:
    $49 = HEAP8[$p_21048] | 0;
    $cmp128 = $49 << 24 >> 24 == 36;
    if ($cmp128) {
      label = 45;
      break;
    } else {
      label = 57;
      break;
    }
   case 45:
    $cmp131 = ($nextvalue_sroa_2_0 | 0) == 5;
    if ($cmp131) {
      label = 47;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    $call134 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp135, $n_01046);
    _mrb_raisef($mrb, $call134, 93360, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp135 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp135 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp135 + 8 >> 2] | 0, tempInt) | 0);
    label = 47;
    break;
   case 47:
    $cmp137 = ($posarg_1 | 0) > 0;
    if ($cmp137) {
      label = 48;
      break;
    } else {
      label = 49;
      break;
    }
   case 48:
    $call139 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp140, $n_01046);
    _mrb_fixnum_value1719($agg_tmp141, $posarg_1);
    _mrb_raisef($mrb, $call139, 92620, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp140 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp140 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp140 + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp141 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp141 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp141 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($tmp142);
    $nextvalue_sroa_2_8_copyload311 = HEAP32[$nextvalue_sroa_2_8__idx310 >> 2] | 0;
    $posarg_2 = $posarg_1;
    $nextvalue_sroa_2_1 = $nextvalue_sroa_2_8_copyload311;
    $nextvalue_sroa_1_1_in_in = $nextvalue_sroa_1_4__idx275;
    $nextvalue_sroa_0_1_in_in = $tmp142;
    label = 56;
    break;
   case 49:
    $cmp143 = ($posarg_1 | 0) == -2;
    if ($cmp143) {
      label = 50;
      break;
    } else {
      label = 51;
      break;
    }
   case 50:
    $call146 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp147, $n_01046);
    _mrb_raisef($mrb, $call146, 111300, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp147 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp147 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp147 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($tmp148);
    $nextvalue_sroa_2_8_copyload309 = HEAP32[$nextvalue_sroa_2_8__idx308 >> 2] | 0;
    $posarg_2 = -2;
    $nextvalue_sroa_2_1 = $nextvalue_sroa_2_8_copyload309;
    $nextvalue_sroa_1_1_in_in = $nextvalue_sroa_1_4__idx272;
    $nextvalue_sroa_0_1_in_in = $tmp148;
    label = 56;
    break;
   case 51:
    $cmp150 = ($n_01046 | 0) < 1;
    if ($cmp150) {
      label = 52;
      break;
    } else {
      label = 53;
      break;
    }
   case 52:
    $call153 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp154, $n_01046);
    _mrb_raisef($mrb, $call153, 110824, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp154 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp154 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp154 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($tmp155);
    $nextvalue_sroa_2_8_copyload307 = HEAP32[$nextvalue_sroa_2_8__idx306 >> 2] | 0;
    $posarg_2 = $posarg_1;
    $nextvalue_sroa_2_1 = $nextvalue_sroa_2_8_copyload307;
    $nextvalue_sroa_1_1_in_in = $nextvalue_sroa_1_4__idx269;
    $nextvalue_sroa_0_1_in_in = $tmp155;
    label = 56;
    break;
   case 53:
    $cmp157 = ($n_01046 | 0) < ($inc | 0);
    if ($cmp157) {
      label = 55;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    $call160 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call160, 106008);
    _mrb_undef_value1718($tmp161);
    $nextvalue_sroa_2_8_copyload305 = HEAP32[$nextvalue_sroa_2_8__idx304 >> 2] | 0;
    $posarg_2 = -1;
    $nextvalue_sroa_2_1 = $nextvalue_sroa_2_8_copyload305;
    $nextvalue_sroa_1_1_in_in = $nextvalue_sroa_1_4__idx266;
    $nextvalue_sroa_0_1_in_in = $tmp161;
    label = 56;
    break;
   case 55:
    $incdec_ptr_sum980 = $n_01046 - 1 | 0;
    $arrayidx163 = $argv + ($incdec_ptr_sum980 * 12 & -1) | 0;
    $50 = $arrayidx163;
    $nextvalue_sroa_1_4__idx263 = $50 + 4 | 0;
    $nextvalue_sroa_2_8__idx302 = $argv + ($incdec_ptr_sum980 * 12 & -1) + 8 | 0;
    $nextvalue_sroa_2_8_copyload303 = HEAP32[$nextvalue_sroa_2_8__idx302 >> 2] | 0;
    $posarg_2 = -1;
    $nextvalue_sroa_2_1 = $nextvalue_sroa_2_8_copyload303;
    $nextvalue_sroa_1_1_in_in = $nextvalue_sroa_1_4__idx263;
    $nextvalue_sroa_0_1_in_in = $arrayidx163;
    label = 56;
    break;
   case 56:
    $nextvalue_sroa_1_1_in = $nextvalue_sroa_1_1_in_in;
    $nextvalue_sroa_0_1_in = $nextvalue_sroa_0_1_in_in;
    $nextvalue_sroa_1_1 = HEAP32[$nextvalue_sroa_1_1_in >> 2] | 0;
    $nextvalue_sroa_0_1 = HEAP32[$nextvalue_sroa_0_1_in >> 2] | 0;
    $incdec_ptr167 = $p_21048 + 1 | 0;
    $p_1 = $incdec_ptr167;
    $width_0 = $width_0;
    $prec_0 = $prec_0;
    $flags_1 = $flags_1;
    $nextarg_1 = $nextarg_1;
    $posarg_1 = $posarg_2;
    $nextvalue_sroa_2_0 = $nextvalue_sroa_2_1;
    $nextvalue_sroa_1_0 = $nextvalue_sroa_1_1;
    $nextvalue_sroa_0_0 = $nextvalue_sroa_0_1;
    $id_0 = $id_0;
    label = 11;
    break;
   case 57:
    $and169 = $flags_1 & 32;
    $tobool170 = ($and169 | 0) == 0;
    if ($tobool170) {
      label = 59;
      break;
    } else {
      label = 58;
      break;
    }
   case 58:
    $call172 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call172, 110012);
    label = 59;
    break;
   case 59:
    $and174 = $flags_1 & 128;
    $tobool175 = ($and174 | 0) == 0;
    if ($tobool175) {
      label = 61;
      break;
    } else {
      label = 60;
      break;
    }
   case 60:
    $call177 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call177, 109552);
    label = 61;
    break;
   case 61:
    $or179 = $flags_1 | 32;
    $p_1 = $p_21048;
    $width_0 = $n_01046;
    $prec_0 = $prec_0;
    $flags_1 = $or179;
    $nextarg_1 = $nextarg_1;
    $posarg_1 = $posarg_1;
    $nextvalue_sroa_2_0 = $nextvalue_sroa_2_0;
    $nextvalue_sroa_1_0 = $nextvalue_sroa_1_0;
    $nextvalue_sroa_0_0 = $nextvalue_sroa_0_0;
    $id_0 = $id_0;
    label = 11;
    break;
   case 62:
    $cmp184 = $46 << 24 >> 24 == 60;
    $conv193 = $cmp184 ? 62 : 125;
    $p_3 = $p_1;
    label = 63;
    break;
   case 63:
    $cmp189 = $p_3 >>> 0 < $add_ptr >>> 0;
    if ($cmp189) {
      label = 64;
      break;
    } else {
      label = 65;
      break;
    }
   case 64:
    $51 = HEAP8[$p_3] | 0;
    $conv192 = $51 << 24 >> 24;
    $cmp194 = ($conv192 | 0) == ($conv193 | 0);
    $incdec_ptr198 = $p_3 + 1 | 0;
    if ($cmp194) {
      label = 65;
      break;
    } else {
      $p_3 = $incdec_ptr198;
      label = 63;
      break;
    }
   case 65:
    $tobool200 = $id_0 << 16 >> 16 == 0;
    if ($tobool200) {
      label = 67;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    $call202 = _mrb_class_get($mrb, 110460) | 0;
    $sub_ptr_lhs_cast204 = $p_3;
    $sub_ptr_rhs_cast205 = $p_1;
    $sub_ptr_sub206 = 1 - $sub_ptr_rhs_cast205 | 0;
    $add207 = $sub_ptr_sub206 + $sub_ptr_lhs_cast204 | 0;
    _mrb_str_new($agg_tmp203, $mrb, $p_1, $add207);
    _mrb_sym2str($agg_tmp208, $mrb, $id_0);
    _mrb_raisef($mrb, $call202, 109124, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp203 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp203 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp203 + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp208 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp208 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp208 + 8 >> 2] | 0, tempInt) | 0);
    label = 67;
    break;
   case 67:
    $add_ptr210 = $p_1 + 1 | 0;
    $sub_ptr_lhs_cast211 = $p_3;
    $sub_ptr_rhs_cast212 = $p_1;
    $sub_ptr_sub213 = $sub_ptr_lhs_cast211 - $sub_ptr_rhs_cast212 | 0;
    $sub214 = $sub_ptr_sub213 - 1 | 0;
    _mrb_str_new($symname, $mrb, $add_ptr210, $sub214);
    $call216 = _mrb_intern_str($mrb, $symname) | 0;
    $cmp217 = ($posarg_1 | 0) > 0;
    if ($cmp217) {
      label = 68;
      break;
    } else {
      label = 69;
      break;
    }
   case 68:
    $call220 = _mrb_class_get($mrb, 110460) | 0;
    $add225 = $sub_ptr_sub213 + 1 | 0;
    _mrb_str_new($agg_tmp221, $mrb, $p_1, $add225);
    _mrb_fixnum_value1719($agg_tmp226, $posarg_1);
    _mrb_raisef($mrb, $call220, 108648, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp221 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp221 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp221 + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp226 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp226 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp226 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($tmp227);
    $nextvalue_sroa_2_8_copyload301 = HEAP32[$nextvalue_sroa_2_8__idx300 >> 2] | 0;
    $posarg_3 = $posarg_1;
    $nextvalue_sroa_2_2 = $nextvalue_sroa_2_8_copyload301;
    $nextvalue_sroa_1_2_in_in = $nextvalue_sroa_1_4__idx260;
    $nextvalue_sroa_0_2_in_in = $tmp227;
    label = 72;
    break;
   case 69:
    $cmp229 = ($posarg_1 | 0) == -1;
    if ($cmp229) {
      label = 70;
      break;
    } else {
      label = 71;
      break;
    }
   case 70:
    $call232 = _mrb_class_get($mrb, 110460) | 0;
    $add237 = $sub_ptr_sub213 + 1 | 0;
    _mrb_str_new($agg_tmp233, $mrb, $p_1, $add237);
    _mrb_raisef($mrb, $call232, 108292, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp233 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp233 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp233 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($tmp238);
    $nextvalue_sroa_2_8_copyload299 = HEAP32[$nextvalue_sroa_2_8__idx298 >> 2] | 0;
    $posarg_3 = -1;
    $nextvalue_sroa_2_2 = $nextvalue_sroa_2_8_copyload299;
    $nextvalue_sroa_1_2_in_in = $nextvalue_sroa_1_4__idx257;
    $nextvalue_sroa_0_2_in_in = $tmp238;
    label = 72;
    break;
   case 71:
    _get_hash($agg_tmp240, $mrb, $hash, $inc, $incdec_ptr);
    _mrb_symbol_value1720($agg_tmp241, $call216);
    _mrb_undef_value1718($agg_tmp242);
    _mrb_hash_fetch($tmp243, 0, $agg_tmp240, $agg_tmp241, $agg_tmp242);
    $nextvalue_sroa_2_8_copyload297 = HEAP32[$nextvalue_sroa_2_8__idx296 >> 2] | 0;
    $posarg_3 = -2;
    $nextvalue_sroa_2_2 = $nextvalue_sroa_2_8_copyload297;
    $nextvalue_sroa_1_2_in_in = $nextvalue_sroa_1_4__idx254;
    $nextvalue_sroa_0_2_in_in = $tmp243;
    label = 72;
    break;
   case 72:
    $nextvalue_sroa_1_2_in = $nextvalue_sroa_1_2_in_in;
    $nextvalue_sroa_0_2_in = $nextvalue_sroa_0_2_in_in;
    $nextvalue_sroa_1_2 = HEAP32[$nextvalue_sroa_1_2_in >> 2] | 0;
    $nextvalue_sroa_0_2 = HEAP32[$nextvalue_sroa_0_2_in >> 2] | 0;
    $cmp247 = ($nextvalue_sroa_2_2 | 0) == 5;
    if ($cmp247) {
      label = 73;
      break;
    } else {
      label = 74;
      break;
    }
   case 73:
    $call250 = _mrb_class_get($mrb, 108060) | 0;
    $add255 = $sub_ptr_sub213 + 1 | 0;
    _mrb_str_new($agg_tmp251, $mrb, $p_1, $add255);
    _mrb_raisef($mrb, $call250, 107616, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp251 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp251 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp251 + 8 >> 2] | 0, tempInt) | 0);
    label = 74;
    break;
   case 74:
    if ($cmp184) {
      label = 75;
      break;
    } else {
      $p_10 = $p_3;
      $posarg_9 = $posarg_3;
      $nextvalue_sroa_2_3 = $nextvalue_sroa_2_2;
      $nextvalue_sroa_1_3 = $nextvalue_sroa_1_2;
      $nextvalue_sroa_0_3 = $nextvalue_sroa_0_2;
      label = 173;
      break;
    }
   case 75:
    $incdec_ptr262 = $p_3 + 1 | 0;
    $p_1 = $incdec_ptr262;
    $width_0 = $width_0;
    $prec_0 = $prec_0;
    $flags_1 = $flags_1;
    $nextarg_1 = $nextarg_1;
    $posarg_1 = $posarg_3;
    $nextvalue_sroa_2_0 = $nextvalue_sroa_2_2;
    $nextvalue_sroa_1_0 = $nextvalue_sroa_1_2;
    $nextvalue_sroa_0_0 = $nextvalue_sroa_0_2;
    $id_0 = $call216;
    label = 11;
    break;
   case 76:
    $and264 = $flags_1 & 32;
    $tobool265 = ($and264 | 0) == 0;
    if ($tobool265) {
      label = 78;
      break;
    } else {
      label = 77;
      break;
    }
   case 77:
    $call267 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call267, 110012);
    label = 78;
    break;
   case 78:
    $and269 = $flags_1 & 128;
    $tobool270 = ($and269 | 0) == 0;
    if ($tobool270) {
      label = 80;
      break;
    } else {
      label = 79;
      break;
    }
   case 79:
    $call272 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call272, 109552);
    label = 80;
    break;
   case 80:
    $or274 = $flags_1 | 32;
    $p_41039 = $p_1 + 1 | 0;
    $cmp2781040 = $p_41039 >>> 0 < $add_ptr >>> 0;
    if ($cmp2781040) {
      $n_11041 = 0;
      $p_41042 = $p_41039;
      label = 81;
      break;
    } else {
      $n_1_lcssa = 0;
      $p_4_lcssa = $p_41039;
      label = 85;
      break;
    }
   case 81:
    $52 = HEAP8[$p_41042] | 0;
    $conv281 = $52 & 255;
    $isdigittmp998 = $conv281 - 48 | 0;
    $isdigit999 = $isdigittmp998 >>> 0 < 10;
    if ($isdigit999) {
      label = 82;
      break;
    } else {
      $n_11036 = $n_11041;
      $p_41038 = $p_41042;
      label = 86;
      break;
    }
   case 82:
    $mul288 = $n_11041 * 10 & -1;
    $53 = HEAP8[$p_41042] | 0;
    $conv289 = $53 << 24 >> 24;
    $sub290 = $mul288 - 48 | 0;
    $add291 = $sub290 + $conv289 | 0;
    $div292 = ($add291 | 0) / 10 & -1;
    $cmp293 = ($div292 | 0) == ($n_11041 | 0);
    if ($cmp293) {
      label = 83;
      break;
    } else {
      label = 84;
      break;
    }
   case 83:
    $p_4 = $p_41042 + 1 | 0;
    $cmp278 = $p_4 >>> 0 < $add_ptr >>> 0;
    if ($cmp278) {
      $n_11041 = $add291;
      $p_41042 = $p_4;
      label = 81;
      break;
    } else {
      $n_1_lcssa = $add291;
      $p_4_lcssa = $p_4;
      label = 85;
      break;
    }
   case 84:
    $call296 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call296, 107160);
    label = 83;
    break;
   case 85:
    $call304 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call304, 94220);
    $n_11036 = $n_1_lcssa;
    $p_41038 = $p_4_lcssa;
    label = 86;
    break;
   case 86:
    $54 = HEAP8[$p_41038] | 0;
    $cmp307 = $54 << 24 >> 24 == 36;
    if ($cmp307) {
      label = 87;
      break;
    } else {
      label = 96;
      break;
    }
   case 87:
    $cmp310 = ($posarg_1 | 0) > 0;
    if ($cmp310) {
      label = 88;
      break;
    } else {
      label = 89;
      break;
    }
   case 88:
    $call313 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp314, $n_11036);
    _mrb_fixnum_value1719($agg_tmp315, $posarg_1);
    _mrb_raisef($mrb, $call313, 92620, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp314 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp314 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp314 + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp315 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp315 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp315 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($tmp316);
    $tmp_sroa_0_0_copyload161 = HEAP32[$tmp_sroa_0_0__cast160 >> 2] | 0;
    $p_5 = $p_41038;
    $nextarg_3 = $nextarg_1;
    $posarg_5 = $posarg_1;
    $tmp_sroa_0_1 = $tmp_sroa_0_0_copyload161;
    label = 103;
    break;
   case 89:
    $cmp318 = ($posarg_1 | 0) == -2;
    if ($cmp318) {
      label = 90;
      break;
    } else {
      label = 91;
      break;
    }
   case 90:
    $call321 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp322, $n_11036);
    _mrb_raisef($mrb, $call321, 111300, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp322 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp322 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp322 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($tmp323);
    $tmp_sroa_0_0_copyload159 = HEAP32[$tmp_sroa_0_0__cast158 >> 2] | 0;
    $p_5 = $p_41038;
    $nextarg_3 = $nextarg_1;
    $posarg_5 = -2;
    $tmp_sroa_0_1 = $tmp_sroa_0_0_copyload159;
    label = 103;
    break;
   case 91:
    $cmp325 = ($n_11036 | 0) < 1;
    if ($cmp325) {
      label = 92;
      break;
    } else {
      label = 93;
      break;
    }
   case 92:
    $call328 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp329, $n_11036);
    _mrb_raisef($mrb, $call328, 110824, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp329 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp329 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp329 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($tmp330);
    $tmp_sroa_0_0_copyload157 = HEAP32[$tmp_sroa_0_0__cast156 >> 2] | 0;
    $p_5 = $p_41038;
    $nextarg_3 = $nextarg_1;
    $posarg_5 = $posarg_1;
    $tmp_sroa_0_1 = $tmp_sroa_0_0_copyload157;
    label = 103;
    break;
   case 93:
    $cmp332 = ($n_11036 | 0) < ($inc | 0);
    if ($cmp332) {
      label = 95;
      break;
    } else {
      label = 94;
      break;
    }
   case 94:
    $call335 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call335, 106008);
    _mrb_undef_value1718($tmp336);
    $tmp_sroa_0_0_copyload155 = HEAP32[$tmp_sroa_0_0__cast154 >> 2] | 0;
    $p_5 = $p_41038;
    $nextarg_3 = $nextarg_1;
    $posarg_5 = -1;
    $tmp_sroa_0_1 = $tmp_sroa_0_0_copyload155;
    label = 103;
    break;
   case 95:
    $incdec_ptr_sum978 = $n_11036 - 1 | 0;
    $arrayidx338 = $argv + ($incdec_ptr_sum978 * 12 & -1) | 0;
    $tmp_sroa_0_0__cast152 = $arrayidx338;
    $tmp_sroa_0_0_copyload153 = HEAP32[$tmp_sroa_0_0__cast152 >> 2] | 0;
    $p_5 = $p_41038;
    $nextarg_3 = $nextarg_1;
    $posarg_5 = -1;
    $tmp_sroa_0_1 = $tmp_sroa_0_0_copyload153;
    label = 103;
    break;
   case 96:
    $cmp344 = ($nextvalue_sroa_2_0 | 0) == 5;
    if ($cmp344) {
      label = 97;
      break;
    } else {
      $p_5 = $p_1;
      $nextarg_3 = $nextarg_1;
      $posarg_5 = $posarg_1;
      $tmp_sroa_0_1 = $nextvalue_sroa_0_0;
      label = 103;
      break;
    }
   case 97:
    if (($posarg_1 | 0) == (-1 | 0)) {
      label = 98;
      break;
    } else if (($posarg_1 | 0) == (-2 | 0)) {
      label = 99;
      break;
    } else {
      label = 100;
      break;
    }
   case 98:
    $call351 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp352, $nextarg_1);
    _mrb_raisef($mrb, $call351, 106620, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp352 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp352 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp352 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($tmp353);
    $tmp_sroa_0_0_copyload149 = HEAP32[$tmp_sroa_0_0__cast148 >> 2] | 0;
    $p_5 = $p_1;
    $nextarg_3 = $nextarg_1;
    $posarg_5 = -1;
    $tmp_sroa_0_1 = $tmp_sroa_0_0_copyload149;
    label = 103;
    break;
   case 99:
    $call358 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp359, $nextarg_1);
    _mrb_raisef($mrb, $call358, 106272, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp359 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp359 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp359 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($tmp360);
    $tmp_sroa_0_0_copyload147 = HEAP32[$tmp_sroa_0_0__cast146 >> 2] | 0;
    $p_5 = $p_1;
    $nextarg_3 = $nextarg_1;
    $posarg_5 = -2;
    $tmp_sroa_0_1 = $tmp_sroa_0_0_copyload147;
    label = 103;
    break;
   case 100:
    $inc362 = $nextarg_1 + 1 | 0;
    $cmp363 = ($nextarg_1 | 0) < ($inc | 0);
    if ($cmp363) {
      label = 102;
      break;
    } else {
      label = 101;
      break;
    }
   case 101:
    $call366 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call366, 106008);
    _mrb_undef_value1718($tmp367);
    $tmp_sroa_0_0_copyload145 = HEAP32[$tmp_sroa_0_0__cast144 >> 2] | 0;
    $p_5 = $p_1;
    $nextarg_3 = $inc362;
    $posarg_5 = $nextarg_1;
    $tmp_sroa_0_1 = $tmp_sroa_0_0_copyload145;
    label = 103;
    break;
   case 102:
    $incdec_ptr_sum977 = $nextarg_1 - 1 | 0;
    $arrayidx369 = $argv + ($incdec_ptr_sum977 * 12 & -1) | 0;
    $tmp_sroa_0_0__cast142 = $arrayidx369;
    $tmp_sroa_0_0_copyload143 = HEAP32[$tmp_sroa_0_0__cast142 >> 2] | 0;
    $p_5 = $p_1;
    $nextarg_3 = $inc362;
    $posarg_5 = $nextarg_1;
    $tmp_sroa_0_1 = $tmp_sroa_0_0_copyload143;
    label = 103;
    break;
   case 103:
    $cmp377 = ($tmp_sroa_0_1 | 0) < 0;
    if ($cmp377) {
      label = 104;
      break;
    } else {
      $width_1 = $tmp_sroa_0_1;
      $flags_2 = $or274;
      label = 105;
      break;
    }
   case 104:
    $or380 = $flags_1 | 34;
    $sub381 = -$tmp_sroa_0_1 | 0;
    $width_1 = $sub381;
    $flags_2 = $or380;
    label = 105;
    break;
   case 105:
    $incdec_ptr383 = $p_5 + 1 | 0;
    $p_1 = $incdec_ptr383;
    $width_0 = $width_1;
    $prec_0 = $prec_0;
    $flags_1 = $flags_2;
    $nextarg_1 = $nextarg_3;
    $posarg_1 = $posarg_5;
    $nextvalue_sroa_2_0 = $nextvalue_sroa_2_0;
    $nextvalue_sroa_1_0 = $nextvalue_sroa_1_0;
    $nextvalue_sroa_0_0 = $nextvalue_sroa_0_0;
    $id_0 = $id_0;
    label = 11;
    break;
   case 106:
    $and385 = $flags_1 & 128;
    $tobool386 = ($and385 | 0) == 0;
    if ($tobool386) {
      label = 108;
      break;
    } else {
      label = 107;
      break;
    }
   case 107:
    $call388 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call388, 105764);
    label = 108;
    break;
   case 108:
    $or390 = $flags_1 | 192;
    $incdec_ptr391 = $p_1 + 1 | 0;
    $55 = HEAP8[$incdec_ptr391] | 0;
    $cmp393 = $55 << 24 >> 24 == 42;
    if ($cmp393) {
      label = 110;
      break;
    } else {
      label = 109;
      break;
    }
   case 109:
    $cmp5081022 = $incdec_ptr391 >>> 0 < $add_ptr >>> 0;
    if ($cmp5081022) {
      $prec_11023 = 0;
      $p_81024 = $incdec_ptr391;
      label = 134;
      break;
    } else {
      $prec_1_lcssa = 0;
      $p_8_lcssa = $incdec_ptr391;
      label = 138;
      break;
    }
   case 110:
    $incdec_ptr397 = $p_1 + 2 | 0;
    $cmp3991030 = $incdec_ptr397 >>> 0 < $add_ptr >>> 0;
    if ($cmp3991030) {
      $n_21031 = 0;
      $p_61032 = $incdec_ptr397;
      label = 111;
      break;
    } else {
      $n_2_lcssa = 0;
      $p_6_lcssa = $incdec_ptr397;
      label = 115;
      break;
    }
   case 111:
    $56 = HEAP8[$p_61032] | 0;
    $conv402 = $56 & 255;
    $isdigittmp1000 = $conv402 - 48 | 0;
    $isdigit1001 = $isdigittmp1000 >>> 0 < 10;
    if ($isdigit1001) {
      label = 112;
      break;
    } else {
      $n_21027 = $n_21031;
      $p_61029 = $p_61032;
      label = 116;
      break;
    }
   case 112:
    $mul409 = $n_21031 * 10 & -1;
    $57 = HEAP8[$p_61032] | 0;
    $conv410 = $57 << 24 >> 24;
    $sub411 = $mul409 - 48 | 0;
    $add412 = $sub411 + $conv410 | 0;
    $div413 = ($add412 | 0) / 10 & -1;
    $cmp414 = ($div413 | 0) == ($n_21031 | 0);
    if ($cmp414) {
      label = 114;
      break;
    } else {
      label = 113;
      break;
    }
   case 113:
    $call417 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call417, 107160);
    label = 114;
    break;
   case 114:
    $incdec_ptr420 = $p_61032 + 1 | 0;
    $cmp399 = $incdec_ptr420 >>> 0 < $add_ptr >>> 0;
    if ($cmp399) {
      $n_21031 = $add412;
      $p_61032 = $incdec_ptr420;
      label = 111;
      break;
    } else {
      $n_2_lcssa = $add412;
      $p_6_lcssa = $incdec_ptr420;
      label = 115;
      break;
    }
   case 115:
    $call425 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call425, 94220);
    $n_21027 = $n_2_lcssa;
    $p_61029 = $p_6_lcssa;
    label = 116;
    break;
   case 116:
    $58 = HEAP8[$p_61029] | 0;
    $cmp428 = $58 << 24 >> 24 == 36;
    if ($cmp428) {
      label = 117;
      break;
    } else {
      label = 126;
      break;
    }
   case 117:
    $cmp431 = ($posarg_1 | 0) > 0;
    if ($cmp431) {
      label = 118;
      break;
    } else {
      label = 119;
      break;
    }
   case 118:
    $call434 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp435, $n_21027);
    _mrb_fixnum_value1719($agg_tmp436, $posarg_1);
    _mrb_raisef($mrb, $call434, 92620, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp435 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp435 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp435 + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp436 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp436 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp436 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($tmp437);
    $tmp_sroa_0_0_copyload141 = HEAP32[$tmp_sroa_0_0__cast140 >> 2] | 0;
    $p_7 = $p_61029;
    $nextarg_5 = $nextarg_1;
    $posarg_7 = $posarg_1;
    $tmp_sroa_0_3 = $tmp_sroa_0_0_copyload141;
    label = 133;
    break;
   case 119:
    $cmp439 = ($posarg_1 | 0) == -2;
    if ($cmp439) {
      label = 120;
      break;
    } else {
      label = 121;
      break;
    }
   case 120:
    $call442 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp443, $n_21027);
    _mrb_raisef($mrb, $call442, 111300, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp443 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp443 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp443 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($tmp444);
    $tmp_sroa_0_0_copyload139 = HEAP32[$tmp_sroa_0_0__cast138 >> 2] | 0;
    $p_7 = $p_61029;
    $nextarg_5 = $nextarg_1;
    $posarg_7 = -2;
    $tmp_sroa_0_3 = $tmp_sroa_0_0_copyload139;
    label = 133;
    break;
   case 121:
    $cmp446 = ($n_21027 | 0) < 1;
    if ($cmp446) {
      label = 122;
      break;
    } else {
      label = 123;
      break;
    }
   case 122:
    $call449 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp450, $n_21027);
    _mrb_raisef($mrb, $call449, 110824, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp450 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp450 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp450 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($tmp451);
    $tmp_sroa_0_0_copyload137 = HEAP32[$tmp_sroa_0_0__cast136 >> 2] | 0;
    $p_7 = $p_61029;
    $nextarg_5 = $nextarg_1;
    $posarg_7 = $posarg_1;
    $tmp_sroa_0_3 = $tmp_sroa_0_0_copyload137;
    label = 133;
    break;
   case 123:
    $cmp453 = ($n_21027 | 0) < ($inc | 0);
    if ($cmp453) {
      label = 125;
      break;
    } else {
      label = 124;
      break;
    }
   case 124:
    $call456 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call456, 106008);
    _mrb_undef_value1718($tmp457);
    $tmp_sroa_0_0_copyload135 = HEAP32[$tmp_sroa_0_0__cast134 >> 2] | 0;
    $p_7 = $p_61029;
    $nextarg_5 = $nextarg_1;
    $posarg_7 = -1;
    $tmp_sroa_0_3 = $tmp_sroa_0_0_copyload135;
    label = 133;
    break;
   case 125:
    $incdec_ptr_sum976 = $n_21027 - 1 | 0;
    $arrayidx459 = $argv + ($incdec_ptr_sum976 * 12 & -1) | 0;
    $tmp_sroa_0_0__cast132 = $arrayidx459;
    $tmp_sroa_0_0_copyload133 = HEAP32[$tmp_sroa_0_0__cast132 >> 2] | 0;
    $p_7 = $p_61029;
    $nextarg_5 = $nextarg_1;
    $posarg_7 = -1;
    $tmp_sroa_0_3 = $tmp_sroa_0_0_copyload133;
    label = 133;
    break;
   case 126:
    $cmp466 = ($nextvalue_sroa_2_0 | 0) == 5;
    if ($cmp466) {
      label = 127;
      break;
    } else {
      $p_7 = $incdec_ptr391;
      $nextarg_5 = $nextarg_1;
      $posarg_7 = $posarg_1;
      $tmp_sroa_0_3 = $nextvalue_sroa_0_0;
      label = 133;
      break;
    }
   case 127:
    if (($posarg_1 | 0) == (-1 | 0)) {
      label = 128;
      break;
    } else if (($posarg_1 | 0) == (-2 | 0)) {
      label = 129;
      break;
    } else {
      label = 130;
      break;
    }
   case 128:
    $call473 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp474, $nextarg_1);
    _mrb_raisef($mrb, $call473, 106620, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp474 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp474 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp474 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($tmp475);
    $tmp_sroa_0_0_copyload129 = HEAP32[$tmp_sroa_0_0__cast128 >> 2] | 0;
    $p_7 = $incdec_ptr391;
    $nextarg_5 = $nextarg_1;
    $posarg_7 = -1;
    $tmp_sroa_0_3 = $tmp_sroa_0_0_copyload129;
    label = 133;
    break;
   case 129:
    $call480 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp481, $nextarg_1);
    _mrb_raisef($mrb, $call480, 106272, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp481 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp481 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp481 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($tmp482);
    $tmp_sroa_0_0_copyload127 = HEAP32[$tmp_sroa_0_0__cast126 >> 2] | 0;
    $p_7 = $incdec_ptr391;
    $nextarg_5 = $nextarg_1;
    $posarg_7 = -2;
    $tmp_sroa_0_3 = $tmp_sroa_0_0_copyload127;
    label = 133;
    break;
   case 130:
    $inc484 = $nextarg_1 + 1 | 0;
    $cmp485 = ($nextarg_1 | 0) < ($inc | 0);
    if ($cmp485) {
      label = 132;
      break;
    } else {
      label = 131;
      break;
    }
   case 131:
    $call488 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call488, 106008);
    _mrb_undef_value1718($tmp489);
    $tmp_sroa_0_0_copyload125 = HEAP32[$tmp_sroa_0_0__cast124 >> 2] | 0;
    $p_7 = $incdec_ptr391;
    $nextarg_5 = $inc484;
    $posarg_7 = $nextarg_1;
    $tmp_sroa_0_3 = $tmp_sroa_0_0_copyload125;
    label = 133;
    break;
   case 132:
    $incdec_ptr_sum975 = $nextarg_1 - 1 | 0;
    $arrayidx491 = $argv + ($incdec_ptr_sum975 * 12 & -1) | 0;
    $tmp_sroa_0_0__cast = $arrayidx491;
    $tmp_sroa_0_0_copyload = HEAP32[$tmp_sroa_0_0__cast >> 2] | 0;
    $p_7 = $incdec_ptr391;
    $nextarg_5 = $inc484;
    $posarg_7 = $nextarg_1;
    $tmp_sroa_0_3 = $tmp_sroa_0_0_copyload;
    label = 133;
    break;
   case 133:
    $cmp500 = ($tmp_sroa_0_3 | 0) < 0;
    $and503 = $or390 & -65;
    $and503_or390 = $cmp500 ? $and503 : $or390;
    $incdec_ptr505 = $p_7 + 1 | 0;
    $p_1 = $incdec_ptr505;
    $width_0 = $width_0;
    $prec_0 = $tmp_sroa_0_3;
    $flags_1 = $and503_or390;
    $nextarg_1 = $nextarg_5;
    $posarg_1 = $posarg_7;
    $nextvalue_sroa_2_0 = $nextvalue_sroa_2_0;
    $nextvalue_sroa_1_0 = $nextvalue_sroa_1_0;
    $nextvalue_sroa_0_0 = $nextvalue_sroa_0_0;
    $id_0 = $id_0;
    label = 11;
    break;
   case 134:
    $59 = HEAP8[$p_81024] | 0;
    $conv511 = $59 & 255;
    $isdigittmp1002 = $conv511 - 48 | 0;
    $isdigit1003 = $isdigittmp1002 >>> 0 < 10;
    if ($isdigit1003) {
      label = 135;
      break;
    } else {
      $p_1 = $p_81024;
      $width_0 = $width_0;
      $prec_0 = $prec_11023;
      $flags_1 = $or390;
      $nextarg_1 = $nextarg_1;
      $posarg_1 = $posarg_1;
      $nextvalue_sroa_2_0 = $nextvalue_sroa_2_0;
      $nextvalue_sroa_1_0 = $nextvalue_sroa_1_0;
      $nextvalue_sroa_0_0 = $nextvalue_sroa_0_0;
      $id_0 = $id_0;
      label = 11;
      break;
    }
   case 135:
    $mul518 = $prec_11023 * 10 & -1;
    $60 = HEAP8[$p_81024] | 0;
    $conv519 = $60 << 24 >> 24;
    $sub520 = $mul518 - 48 | 0;
    $add521 = $sub520 + $conv519 | 0;
    $div522 = ($add521 | 0) / 10 & -1;
    $cmp523 = ($div522 | 0) == ($prec_11023 | 0);
    if ($cmp523) {
      label = 137;
      break;
    } else {
      label = 136;
      break;
    }
   case 136:
    $call526 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call526, 105508);
    label = 137;
    break;
   case 137:
    $incdec_ptr529 = $p_81024 + 1 | 0;
    $cmp508 = $incdec_ptr529 >>> 0 < $add_ptr >>> 0;
    if ($cmp508) {
      $prec_11023 = $add521;
      $p_81024 = $incdec_ptr529;
      label = 134;
      break;
    } else {
      $prec_1_lcssa = $add521;
      $p_8_lcssa = $incdec_ptr529;
      label = 138;
      break;
    }
   case 138:
    $call534 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call534, 94220);
    $p_1 = $p_8_lcssa;
    $width_0 = $width_0;
    $prec_0 = $prec_1_lcssa;
    $flags_1 = $or390;
    $nextarg_1 = $nextarg_1;
    $posarg_1 = $posarg_1;
    $nextvalue_sroa_2_0 = $nextvalue_sroa_2_0;
    $nextvalue_sroa_1_0 = $nextvalue_sroa_1_0;
    $nextvalue_sroa_0_0 = $nextvalue_sroa_0_0;
    $id_0 = $id_0;
    label = 11;
    break;
   case 139:
    $incdec_ptr537 = $p_1 - 1 | 0;
    $p_9 = $incdec_ptr537;
    label = 140;
    break;
   case 140:
    $cmp539 = ($flags_1 | 0) == 0;
    if ($cmp539) {
      label = 142;
      break;
    } else {
      label = 141;
      break;
    }
   case 141:
    $call542 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call542, 105092);
    label = 142;
    break;
   case 142:
    $add547 = $add + 1 | 0;
    $bsiz_2 = $bsiz_1;
    label = 143;
    break;
   case 143:
    $cmp548 = ($add547 | 0) < ($bsiz_2 | 0);
    $mul551 = $bsiz_2 << 1;
    if ($cmp548) {
      label = 144;
      break;
    } else {
      $bsiz_2 = $mul551;
      label = 143;
      break;
    }
   case 144:
    _mrb_str_resize($tmp553, $mrb, $result, $bsiz_2);
    $61 = HEAP32[$p9 >> 2] | 0;
    $ptr556 = $61 + 20 | 0;
    $62 = $ptr556;
    $63 = HEAP32[$62 >> 2] | 0;
    $arrayidx558 = $63 + $add | 0;
    HEAP8[$arrayidx558] = 37;
    $p_11 = $p_9;
    $blen_16 = $add547;
    $bsiz_24 = $bsiz_2;
    $nextarg_10 = $nextarg_1;
    $posarg_13 = $posarg_1;
    label = 336;
    break;
   case 145:
    $cmp564 = ($nextvalue_sroa_2_0 | 0) == 5;
    if ($cmp564) {
      label = 147;
      break;
    } else {
      label = 146;
      break;
    }
   case 146:
    HEAP32[$nextvalue_sroa_0_0__cast224 >> 2] = $nextvalue_sroa_0_0;
    HEAP32[$nextvalue_sroa_1_4__cast252 >> 2] = $nextvalue_sroa_1_0;
    HEAP32[$nextvalue_sroa_2_8__idx290 >> 2] = $nextvalue_sroa_2_0;
    $nextarg_6 = $nextarg_1;
    $posarg_8 = $posarg_1;
    label = 153;
    break;
   case 147:
    if (($posarg_1 | 0) == (-1 | 0)) {
      label = 148;
      break;
    } else if (($posarg_1 | 0) == (-2 | 0)) {
      label = 149;
      break;
    } else {
      label = 150;
      break;
    }
   case 148:
    $call571 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp572, $nextarg_1);
    _mrb_raisef($mrb, $call571, 106620, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp572 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp572 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp572 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($val);
    $nextarg_6 = $nextarg_1;
    $posarg_8 = -1;
    label = 153;
    break;
   case 149:
    $call577 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp578, $nextarg_1);
    _mrb_raisef($mrb, $call577, 106272, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp578 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp578 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp578 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($val);
    $nextarg_6 = $nextarg_1;
    $posarg_8 = -2;
    label = 153;
    break;
   case 150:
    $inc580 = $nextarg_1 + 1 | 0;
    $cmp581 = ($nextarg_1 | 0) < ($inc | 0);
    if ($cmp581) {
      label = 152;
      break;
    } else {
      label = 151;
      break;
    }
   case 151:
    $call584 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call584, 106008);
    _mrb_undef_value1718($val);
    $nextarg_6 = $inc580;
    $posarg_8 = $nextarg_1;
    label = 153;
    break;
   case 152:
    $incdec_ptr_sum974 = $nextarg_1 - 1 | 0;
    $arrayidx586 = $argv + ($incdec_ptr_sum974 * 12 & -1) | 0;
    $64 = $arrayidx586;
    HEAP32[$24 >> 2] = HEAP32[$64 >> 2] | 0;
    HEAP32[$24 + 4 >> 2] = HEAP32[$64 + 4 >> 2] | 0;
    HEAP32[$24 + 8 >> 2] = HEAP32[$64 + 8 >> 2] | 0;
    $nextarg_6 = $inc580;
    $posarg_8 = $nextarg_1;
    label = 153;
    break;
   case 153:
    _mrb_check_string_type($tmp594, $mrb, $val);
    $tmp592_sroa_0_0_copyload = HEAP32[$tmp592_sroa_0_0__cast >> 2] | 0;
    $tmp592_sroa_2_8_copyload = HEAP32[$tmp592_sroa_2_8__idx93 >> 2] | 0;
    $65 = $tmp592_sroa_2_8_copyload | $tmp592_sroa_0_0_copyload;
    $66 = ($65 | 0) == 0;
    if ($66) {
      label = 157;
      break;
    } else {
      label = 154;
      break;
    }
   case 154:
    $67 = $tmp592_sroa_0_0_copyload;
    $len604 = $67 + 12 | 0;
    $68 = HEAP32[$len604 >> 2] | 0;
    $cmp605 = ($68 | 0) == 1;
    if ($cmp605) {
      label = 156;
      break;
    } else {
      label = 155;
      break;
    }
   case 155:
    $call608 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call608, 104292);
    label = 156;
    break;
   case 156:
    $ptr612 = $67 + 20 | 0;
    $69 = HEAP32[$ptr612 >> 2] | 0;
    $70 = HEAP8[$69] | 0;
    $conv614 = $70 << 24 >> 24;
    $c_0 = $conv614;
    label = 158;
    break;
   case 157:
    $71 = HEAP32[$i617 >> 2] | 0;
    $c_0 = $71;
    label = 158;
    break;
   case 158:
    $and624 = $flags_1 & 32;
    $tobool625 = ($and624 | 0) == 0;
    if ($tobool625) {
      label = 159;
      break;
    } else {
      label = 162;
      break;
    }
   case 159:
    $add629 = $add + 1 | 0;
    $bsiz_3 = $bsiz_1;
    label = 160;
    break;
   case 160:
    $cmp630 = ($add629 | 0) < ($bsiz_3 | 0);
    $mul633 = $bsiz_3 << 1;
    if ($cmp630) {
      label = 161;
      break;
    } else {
      $bsiz_3 = $mul633;
      label = 160;
      break;
    }
   case 161:
    _mrb_str_resize($tmp635, $mrb, $result, $bsiz_3);
    $72 = HEAP32[$p9 >> 2] | 0;
    $ptr638 = $72 + 20 | 0;
    $73 = $ptr638;
    $74 = HEAP32[$73 >> 2] | 0;
    $conv640 = $c_0 & 255;
    $arrayidx641 = $74 + $add | 0;
    HEAP8[$arrayidx641] = $conv640;
    $p_11 = $p_1;
    $blen_16 = $add629;
    $bsiz_24 = $bsiz_3;
    $nextarg_10 = $nextarg_6;
    $posarg_13 = $posarg_8;
    label = 336;
    break;
   case 162:
    $and644 = $flags_1 & 2;
    $tobool645 = ($and644 | 0) == 0;
    if ($tobool645) {
      label = 163;
      break;
    } else {
      label = 164;
      break;
    }
   case 163:
    $sub687 = $width_0 - 1 | 0;
    $add688 = $sub687 + $add | 0;
    $bsiz_6 = $bsiz_1;
    label = 169;
    break;
   case 164:
    $add649 = $add + 1 | 0;
    $bsiz_4 = $bsiz_1;
    label = 165;
    break;
   case 165:
    $cmp650 = ($add649 | 0) < ($bsiz_4 | 0);
    $mul653 = $bsiz_4 << 1;
    if ($cmp650) {
      label = 166;
      break;
    } else {
      $bsiz_4 = $mul653;
      label = 165;
      break;
    }
   case 166:
    _mrb_str_resize($tmp655, $mrb, $result, $bsiz_4);
    $75 = HEAP32[$p9 >> 2] | 0;
    $ptr658 = $75 + 20 | 0;
    $76 = $ptr658;
    $77 = HEAP32[$76 >> 2] | 0;
    $conv660 = $c_0 & 255;
    $arrayidx661 = $77 + $add | 0;
    HEAP8[$arrayidx661] = $conv660;
    $add667 = $width_0 + $add | 0;
    $bsiz_5 = $bsiz_4;
    label = 167;
    break;
   case 167:
    $cmp668 = ($add667 | 0) < ($bsiz_5 | 0);
    $mul671 = $bsiz_5 << 1;
    if ($cmp668) {
      label = 168;
      break;
    } else {
      $bsiz_5 = $mul671;
      label = 167;
      break;
    }
   case 168:
    $sub666 = $width_0 - 1 | 0;
    _mrb_str_resize($tmp673, $mrb, $result, $bsiz_5);
    $78 = HEAP32[$p9 >> 2] | 0;
    $ptr676 = $78 + 20 | 0;
    $79 = $ptr676;
    $80 = HEAP32[$79 >> 2] | 0;
    $arrayidx678 = $80 + $add649 | 0;
    _memset($arrayidx678 | 0, 32, $sub666 | 0);
    $p_11 = $p_1;
    $blen_16 = $add667;
    $bsiz_24 = $bsiz_5;
    $nextarg_10 = $nextarg_6;
    $posarg_13 = $posarg_8;
    label = 336;
    break;
   case 169:
    $cmp689 = ($add688 | 0) < ($bsiz_6 | 0);
    $mul692 = $bsiz_6 << 1;
    if ($cmp689) {
      label = 170;
      break;
    } else {
      $bsiz_6 = $mul692;
      label = 169;
      break;
    }
   case 170:
    _mrb_str_resize($tmp694, $mrb, $result, $bsiz_6);
    $81 = HEAP32[$p9 >> 2] | 0;
    $ptr697 = $81 + 20 | 0;
    $82 = $ptr697;
    $83 = HEAP32[$82 >> 2] | 0;
    $arrayidx699 = $83 + $add | 0;
    _memset($arrayidx699 | 0, 32, $sub687 | 0);
    $add706 = $width_0 + $add | 0;
    $bsiz_7 = $bsiz_6;
    label = 171;
    break;
   case 171:
    $cmp707 = ($add706 | 0) < ($bsiz_7 | 0);
    $mul710 = $bsiz_7 << 1;
    if ($cmp707) {
      label = 172;
      break;
    } else {
      $bsiz_7 = $mul710;
      label = 171;
      break;
    }
   case 172:
    _mrb_str_resize($tmp712, $mrb, $result, $bsiz_7);
    $84 = HEAP32[$p9 >> 2] | 0;
    $ptr715 = $84 + 20 | 0;
    $85 = $ptr715;
    $86 = HEAP32[$85 >> 2] | 0;
    $conv717 = $c_0 & 255;
    $arrayidx718 = $86 + $add688 | 0;
    HEAP8[$arrayidx718] = $conv717;
    $p_11 = $p_1;
    $blen_16 = $add706;
    $bsiz_24 = $bsiz_7;
    $nextarg_10 = $nextarg_6;
    $posarg_13 = $posarg_8;
    label = 336;
    break;
   case 173:
    $cmp725 = ($nextvalue_sroa_2_3 | 0) == 5;
    if ($cmp725) {
      label = 175;
      break;
    } else {
      label = 174;
      break;
    }
   case 174:
    HEAP32[$nextvalue_sroa_0_0__cast222 >> 2] = $nextvalue_sroa_0_3;
    HEAP32[$nextvalue_sroa_1_4__cast249 >> 2] = $nextvalue_sroa_1_3;
    HEAP32[$nextvalue_sroa_2_8__idx287 >> 2] = $nextvalue_sroa_2_3;
    $nextarg_7 = $nextarg_1;
    $posarg_10 = $posarg_9;
    label = 181;
    break;
   case 175:
    if (($posarg_9 | 0) == (-1 | 0)) {
      label = 176;
      break;
    } else if (($posarg_9 | 0) == (-2 | 0)) {
      label = 177;
      break;
    } else {
      label = 178;
      break;
    }
   case 176:
    $call732 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp733, $nextarg_1);
    _mrb_raisef($mrb, $call732, 106620, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp733 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp733 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp733 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($arg);
    $nextarg_7 = $nextarg_1;
    $posarg_10 = -1;
    label = 181;
    break;
   case 177:
    $call738 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp739, $nextarg_1);
    _mrb_raisef($mrb, $call738, 106272, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp739 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp739 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp739 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($arg);
    $nextarg_7 = $nextarg_1;
    $posarg_10 = -2;
    label = 181;
    break;
   case 178:
    $inc741 = $nextarg_1 + 1 | 0;
    $cmp742 = ($nextarg_1 | 0) < ($inc | 0);
    if ($cmp742) {
      label = 180;
      break;
    } else {
      label = 179;
      break;
    }
   case 179:
    $call745 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call745, 106008);
    _mrb_undef_value1718($arg);
    $nextarg_7 = $inc741;
    $posarg_10 = $nextarg_1;
    label = 181;
    break;
   case 180:
    $incdec_ptr_sum973 = $nextarg_1 - 1 | 0;
    $arrayidx747 = $argv + ($incdec_ptr_sum973 * 12 & -1) | 0;
    $87 = $arrayidx747;
    HEAP32[$20 >> 2] = HEAP32[$87 >> 2] | 0;
    HEAP32[$20 + 4 >> 2] = HEAP32[$87 + 4 >> 2] | 0;
    HEAP32[$20 + 8 >> 2] = HEAP32[$87 + 8 >> 2] | 0;
    $nextarg_7 = $inc741;
    $posarg_10 = $nextarg_1;
    label = 181;
    break;
   case 181:
    $88 = HEAP8[$p_10] | 0;
    $cmp756 = $88 << 24 >> 24 == 112;
    if ($cmp756) {
      label = 182;
      break;
    } else {
      label = 183;
      break;
    }
   case 182:
    _mrb_inspect($tmp759, $mrb, $arg);
    HEAP32[$21 >> 2] = HEAP32[$22 >> 2] | 0;
    HEAP32[$21 + 4 >> 2] = HEAP32[$22 + 4 >> 2] | 0;
    HEAP32[$21 + 8 >> 2] = HEAP32[$22 + 8 >> 2] | 0;
    label = 183;
    break;
   case 183:
    _mrb_obj_as_string($tmp761, $mrb, $arg);
    $str_sroa_0_0_copyload = HEAP32[$str_sroa_0_0__cast >> 2] | 0;
    $len764 = $str_sroa_0_0_copyload + 12 | 0;
    $89 = $len764;
    $90 = HEAP32[$89 >> 2] | 0;
    $91 = HEAP32[$p9 >> 2] | 0;
    $len767 = $91 + 12 | 0;
    $92 = $len767;
    HEAP32[$92 >> 2] = $add;
    $and768 = $flags_1 & 96;
    $tobool769 = ($and768 | 0) == 0;
    if ($tobool769) {
      $len753_1_ph = $90;
      label = 187;
      break;
    } else {
      label = 184;
      break;
    }
   case 184:
    $93 = HEAP32[$89 >> 2] | 0;
    $cmp774 = ($93 | 0) < 0;
    if ($cmp774) {
      label = 185;
      break;
    } else {
      label = 186;
      break;
    }
   case 185:
    $call777 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call777, 103700);
    label = 186;
    break;
   case 186:
    $and779 = $flags_1 & 64;
    $tobool780 = ($and779 | 0) != 0;
    $cmp782 = ($prec_0 | 0) < ($93 | 0);
    $or_cond982 = $tobool780 & $cmp782;
    $len753_0 = $or_cond982 ? $prec_0 : $90;
    $slen_0 = $or_cond982 ? $prec_0 : $93;
    $and798 = $flags_1 & 32;
    $tobool799 = ($and798 | 0) != 0;
    $cmp801 = ($width_0 | 0) > ($slen_0 | 0);
    $or_cond983 = $tobool799 & $cmp801;
    if ($or_cond983) {
      label = 188;
      break;
    } else {
      $len753_1_ph = $len753_0;
      label = 187;
      break;
    }
   case 187:
    $add875 = $len753_1_ph + $add | 0;
    $bsiz_11 = $bsiz_1;
    label = 199;
    break;
   case 188:
    $sub804 = $width_0 - $slen_0 | 0;
    $and805 = $flags_1 & 2;
    $tobool806 = ($and805 | 0) != 0;
    if ($tobool806) {
      $blen_2_ph = $add;
      $bsiz_9_ph = $bsiz_1;
      $width_3_ph = $sub804;
      label = 193;
      break;
    } else {
      label = 189;
      break;
    }
   case 189:
    $add810 = $sub804 + $add | 0;
    $bsiz_8 = $bsiz_1;
    label = 190;
    break;
   case 190:
    $cmp811 = ($add810 | 0) < ($bsiz_8 | 0);
    $mul814 = $bsiz_8 << 1;
    if ($cmp811) {
      label = 191;
      break;
    } else {
      $bsiz_8 = $mul814;
      label = 190;
      break;
    }
   case 191:
    _mrb_str_resize($tmp816, $mrb, $result, $bsiz_8);
    $dec1134 = $sub804 - 1 | 0;
    $tobool8221135 = ($width_0 | 0) == ($slen_0 | 0);
    if ($tobool8221135) {
      $blen_2_ph = $add;
      $bsiz_9_ph = $bsiz_8;
      $width_3_ph = $dec1134;
      label = 193;
      break;
    } else {
      label = 192;
      break;
    }
   case 192:
    $94 = HEAP32[$p9 >> 2] | 0;
    $ptr819 = $94 + 20 | 0;
    $95 = $ptr819;
    $96 = HEAP32[$95 >> 2] | 0;
    $97 = $blen_01149 + $sub_ptr_lhs_cast | 0;
    $98 = $97 - $sub_ptr_rhs_cast | 0;
    $scevgep1225 = $96 + $98 | 0;
    $99 = $width_0 - $slen_0 | 0;
    _memset($scevgep1225 | 0, 32, $99 | 0);
    $100 = $width_0 + $blen_01149 | 0;
    $101 = $100 + $sub_ptr_lhs_cast | 0;
    $102 = $101 - $slen_0 | 0;
    $103 = $102 - $sub_ptr_rhs_cast | 0;
    $blen_2_ph = $103;
    $bsiz_9_ph = $bsiz_8;
    $width_3_ph = -1;
    label = 193;
    break;
   case 193:
    $add830 = $blen_2_ph + $len753_0 | 0;
    $bsiz_9 = $bsiz_9_ph;
    label = 194;
    break;
   case 194:
    $cmp831 = ($add830 | 0) < ($bsiz_9 | 0);
    $mul834 = $bsiz_9 << 1;
    if ($cmp831) {
      label = 195;
      break;
    } else {
      $bsiz_9 = $mul834;
      label = 194;
      break;
    }
   case 195:
    _mrb_str_resize($tmp836, $mrb, $result, $bsiz_9);
    $104 = HEAP32[$p9 >> 2] | 0;
    $ptr839 = $104 + 20 | 0;
    $105 = $ptr839;
    $106 = HEAP32[$105 >> 2] | 0;
    $arrayidx841 = $106 + $blen_2_ph | 0;
    $ptr844 = $str_sroa_0_0_copyload + 20 | 0;
    $107 = $ptr844;
    $108 = HEAP32[$107 >> 2] | 0;
    _memcpy($arrayidx841 | 0, $108 | 0, $len753_0);
    if ($tobool806) {
      label = 196;
      break;
    } else {
      $p_11 = $p_10;
      $blen_16 = $add830;
      $bsiz_24 = $bsiz_9;
      $nextarg_10 = $nextarg_7;
      $posarg_13 = $posarg_10;
      label = 336;
      break;
    }
   case 196:
    $add851 = $add830 + $width_3_ph | 0;
    $bsiz_10 = $bsiz_9;
    label = 197;
    break;
   case 197:
    $cmp852 = ($add851 | 0) < ($bsiz_10 | 0);
    $mul855 = $bsiz_10 << 1;
    if ($cmp852) {
      label = 198;
      break;
    } else {
      $bsiz_10 = $mul855;
      label = 197;
      break;
    }
   case 198:
    _mrb_str_resize($tmp857, $mrb, $result, $bsiz_10);
    $tobool8641141 = ($width_3_ph | 0) == 0;
    if ($tobool8641141) {
      $p_11 = $p_10;
      $blen_16 = $add830;
      $bsiz_24 = $bsiz_10;
      $nextarg_10 = $nextarg_7;
      $posarg_13 = $posarg_10;
      label = 336;
      break;
    } else {
      label = 335;
      break;
    }
   case 199:
    $cmp876 = ($add875 | 0) < ($bsiz_11 | 0);
    $mul879 = $bsiz_11 << 1;
    if ($cmp876) {
      label = 200;
      break;
    } else {
      $bsiz_11 = $mul879;
      label = 199;
      break;
    }
   case 200:
    _mrb_str_resize($tmp881, $mrb, $result, $bsiz_11);
    $109 = HEAP32[$p9 >> 2] | 0;
    $ptr884 = $109 + 20 | 0;
    $110 = $ptr884;
    $111 = HEAP32[$110 >> 2] | 0;
    $arrayidx886 = $111 + $add | 0;
    $ptr889 = $str_sroa_0_0_copyload + 20 | 0;
    $112 = $ptr889;
    $113 = HEAP32[$112 >> 2] | 0;
    _memcpy($arrayidx886 | 0, $113 | 0, $len753_1_ph);
    $p_11 = $p_10;
    $blen_16 = $add875;
    $bsiz_24 = $bsiz_11;
    $nextarg_10 = $nextarg_7;
    $posarg_13 = $posarg_10;
    label = 336;
    break;
   case 201:
    $cmp896 = ($nextvalue_sroa_2_0 | 0) == 5;
    if ($cmp896) {
      label = 203;
      break;
    } else {
      label = 202;
      break;
    }
   case 202:
    HEAP32[$nextvalue_sroa_0_0__cast220 >> 2] = $nextvalue_sroa_0_0;
    HEAP32[$nextvalue_sroa_1_4__cast246 >> 2] = $nextvalue_sroa_1_0;
    HEAP32[$nextvalue_sroa_2_8__idx284 >> 2] = $nextvalue_sroa_2_0;
    $nextarg_8 = $nextarg_1;
    $posarg_11 = $posarg_1;
    label = 209;
    break;
   case 203:
    if (($posarg_1 | 0) == (-1 | 0)) {
      label = 204;
      break;
    } else if (($posarg_1 | 0) == (-2 | 0)) {
      label = 205;
      break;
    } else {
      label = 206;
      break;
    }
   case 204:
    $call903 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp904, $nextarg_1);
    _mrb_raisef($mrb, $call903, 106620, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp904 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp904 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp904 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($val894);
    $nextarg_8 = $nextarg_1;
    $posarg_11 = -1;
    label = 209;
    break;
   case 205:
    $call909 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp910, $nextarg_1);
    _mrb_raisef($mrb, $call909, 106272, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp910 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp910 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp910 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($val894);
    $nextarg_8 = $nextarg_1;
    $posarg_11 = -2;
    label = 209;
    break;
   case 206:
    $inc912 = $nextarg_1 + 1 | 0;
    $cmp913 = ($nextarg_1 | 0) < ($inc | 0);
    if ($cmp913) {
      label = 208;
      break;
    } else {
      label = 207;
      break;
    }
   case 207:
    $call916 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call916, 106008);
    _mrb_undef_value1718($val894);
    $nextarg_8 = $inc912;
    $posarg_11 = $nextarg_1;
    label = 209;
    break;
   case 208:
    $incdec_ptr_sum972 = $nextarg_1 - 1 | 0;
    $arrayidx918 = $argv + ($incdec_ptr_sum972 * 12 & -1) | 0;
    $114 = $arrayidx918;
    HEAP32[$26 >> 2] = HEAP32[$114 >> 2] | 0;
    HEAP32[$26 + 4 >> 2] = HEAP32[$114 + 4 >> 2] | 0;
    HEAP32[$26 + 8 >> 2] = HEAP32[$114 + 8 >> 2] | 0;
    $nextarg_8 = $inc912;
    $posarg_11 = $nextarg_1;
    label = 209;
    break;
   case 209:
    $115 = HEAP8[$p_1] | 0;
    $conv935 = $115 << 24 >> 24;
    if (($conv935 | 0) == 100 | ($conv935 | 0) == 105 | ($conv935 | 0) == 117) {
      label = 210;
      break;
    } else if (($conv935 | 0) == 111 | ($conv935 | 0) == 120 | ($conv935 | 0) == 88 | ($conv935 | 0) == 98 | ($conv935 | 0) == 66) {
      label = 211;
      break;
    } else {
      $sign_0 = 0;
      label = 212;
      break;
    }
   case 210:
    $sign_0 = 1;
    label = 212;
    break;
   case 211:
    $and938 = $flags_1 & 20;
    $not_tobool939 = ($and938 | 0) != 0;
    $_ = $not_tobool939 & 1;
    $sign_0 = $_;
    label = 212;
    break;
   case 212:
    $and943 = $flags_1 & 1;
    $tobool944 = ($and943 | 0) == 0;
    if ($tobool944) {
      $prefix_0_ph = 0;
      label = 219;
      break;
    } else {
      label = 213;
      break;
    }
   case 213:
    $116 = HEAP8[$p_1] | 0;
    $conv946 = $116 << 24 >> 24;
    if (($conv946 | 0) == 111) {
      label = 214;
      break;
    } else if (($conv946 | 0) == 120) {
      label = 215;
      break;
    } else if (($conv946 | 0) == 88) {
      label = 216;
      break;
    } else if (($conv946 | 0) == 98) {
      label = 217;
      break;
    } else if (($conv946 | 0) == 66) {
      label = 218;
      break;
    } else {
      $prefix_0_ph = 0;
      label = 219;
      break;
    }
   case 214:
    $prefix_0_ph = 103428;
    label = 219;
    break;
   case 215:
    $prefix_0_ph = 103156;
    label = 219;
    break;
   case 216:
    $prefix_0_ph = 102868;
    label = 219;
    break;
   case 217:
    $prefix_0_ph = 102312;
    label = 219;
    break;
   case 218:
    $prefix_0_ph = 102120;
    label = 219;
    break;
   case 219:
    label = 220;
    break;
   case 220:
    $_pr = HEAP32[$tt955 >> 2] | 0;
    $117 = $_pr;
    label = 221;
    break;
   case 221:
    if (($117 | 0) == 6) {
      label = 222;
      break;
    } else if (($117 | 0) == 16) {
      label = 225;
      break;
    } else if (($117 | 0) == 3) {
      label = 226;
      break;
    } else {
      label = 227;
      break;
    }
   case 222:
    $118 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $cmp958 = $118 > 2147483647.0;
    $cmp963 = $118 < -2147483648.0;
    $or_cond984 = $cmp958 | $cmp963;
    if ($or_cond984) {
      label = 224;
      break;
    } else {
      label = 223;
      break;
    }
   case 223:
    $conv968 = ~~$118;
    _mrb_fixnum_value1719($tmp969, $conv968);
    HEAP32[$31 >> 2] = HEAP32[$32 >> 2] | 0;
    HEAP32[$31 + 4 >> 2] = HEAP32[$32 + 4 >> 2] | 0;
    HEAP32[$31 + 8 >> 2] = HEAP32[$32 + 8 >> 2] | 0;
    label = 220;
    break;
   case 224:
    _mrb_flo_to_fixnum($tmp971, $mrb, $val894);
    HEAP32[$29 >> 2] = HEAP32[$30 >> 2] | 0;
    HEAP32[$29 + 4 >> 2] = HEAP32[$30 + 4 >> 2] | 0;
    HEAP32[$29 + 8 >> 2] = HEAP32[$30 + 8 >> 2] | 0;
    $119 = HEAP32[$tt955 >> 2] | 0;
    $cmp973 = ($119 | 0) == 3;
    if ($cmp973) {
      $117 = 3;
      label = 221;
      break;
    } else {
      $v_0 = 0;
      label = 228;
      break;
    }
   case 225:
    _mrb_str_to_inum($tmp978, $mrb, $val894, 0, 1);
    HEAP32[$33 >> 2] = HEAP32[$34 >> 2] | 0;
    HEAP32[$33 + 4 >> 2] = HEAP32[$34 + 4 >> 2] | 0;
    HEAP32[$33 + 8 >> 2] = HEAP32[$34 + 8 >> 2] | 0;
    label = 220;
    break;
   case 226:
    $120 = HEAP32[$i981 >> 2] | 0;
    $v_0 = $120;
    label = 228;
    break;
   case 227:
    _mrb_Integer($tmp983, $mrb, $val894);
    HEAP32[$27 >> 2] = HEAP32[$28 >> 2] | 0;
    HEAP32[$27 + 4 >> 2] = HEAP32[$28 + 4 >> 2] | 0;
    HEAP32[$27 + 8 >> 2] = HEAP32[$28 + 8 >> 2] | 0;
    label = 220;
    break;
   case 228:
    $121 = HEAP8[$p_1] | 0;
    $conv985 = $121 << 24 >> 24;
    if (($conv985 | 0) == 120 | ($conv985 | 0) == 88) {
      label = 229;
      break;
    } else if (($conv985 | 0) == 98 | ($conv985 | 0) == 66) {
      label = 231;
      break;
    } else if (($conv985 | 0) == 111) {
      $org_v_0 = 0;
      $v_1 = $v_0;
      $dots_1 = 0;
      $base_01009 = 8;
      $cmp9921010 = 0;
      label = 235;
      break;
    } else {
      label = 230;
      break;
    }
   case 229:
    $org_v_0 = 0;
    $v_1 = $v_0;
    $dots_1 = 0;
    $base_01009 = 16;
    $cmp9921010 = 0;
    label = 235;
    break;
   case 230:
    $org_v_0 = 0;
    $v_1 = $v_0;
    $dots_1 = 0;
    $base_01009 = 10;
    $cmp9921010 = 0;
    label = 235;
    break;
   case 231:
    $cmp995 = ($v_0 | 0) < 0;
    $tobool998 = ($sign_0 | 0) == 0;
    $or_cond985 = $cmp995 & $tobool998;
    if ($or_cond985) {
      label = 232;
      break;
    } else {
      label = 233;
      break;
    }
   case 232:
    _mrb_fixnum_value1719($agg_tmp1000, $v_0);
    _mrb_fix2binstr($tmp1001, $mrb, $agg_tmp1000, 2);
    HEAP32[$35 >> 2] = HEAP32[$36 >> 2] | 0;
    HEAP32[$35 + 4 >> 2] = HEAP32[$36 + 4 >> 2] | 0;
    HEAP32[$35 + 8 >> 2] = HEAP32[$36 + 8 >> 2] | 0;
    $dots_0 = 1;
    label = 234;
    break;
   case 233:
    _mrb_fixnum_value1719($agg_tmp1003, $v_0);
    _mrb_fixnum_to_str($tmp1004, $mrb, $agg_tmp1003, 2);
    HEAP32[$37 >> 2] = HEAP32[$38 >> 2] | 0;
    HEAP32[$37 + 4 >> 2] = HEAP32[$38 + 4 >> 2] | 0;
    HEAP32[$37 + 8 >> 2] = HEAP32[$38 + 8 >> 2] | 0;
    $dots_0 = 0;
    label = 234;
    break;
   case 234:
    _mrb_str_to_inum($tmp1006, $mrb, $val894, 10, 0);
    $122 = HEAP32[$i1008 >> 2] | 0;
    $org_v_0 = $v_0;
    $v_1 = $122;
    $dots_1 = $dots_0;
    $base_01009 = 2;
    $cmp9921010 = 1;
    label = 235;
    break;
   case 235:
    $tobool1010 = ($sign_0 | 0) == 0;
    $123 = HEAP8[$p_1] | 0;
    if ($tobool1010) {
      label = 242;
      break;
    } else {
      label = 236;
      break;
    }
   case 236:
    $cmp1015 = $123 << 24 >> 24 == 105;
    $cmp1023 = ($v_1 | 0) < 0;
    if ($cmp1023) {
      label = 237;
      break;
    } else {
      label = 238;
      break;
    }
   case 237:
    $sub1026 = -$v_1 | 0;
    $dec1027 = $width_0 - 1 | 0;
    $width_5 = $dec1027;
    $v_2 = $sub1026;
    $sc_0 = 45;
    label = 241;
    break;
   case 238:
    $and1029 = $flags_1 & 4;
    $tobool1030 = ($and1029 | 0) == 0;
    if ($tobool1030) {
      label = 240;
      break;
    } else {
      label = 239;
      break;
    }
   case 239:
    $dec1032 = $width_0 - 1 | 0;
    $width_5 = $dec1032;
    $v_2 = $v_1;
    $sc_0 = 43;
    label = 241;
    break;
   case 240:
    $and1034 = $flags_1 & 16;
    $tobool1035 = ($and1034 | 0) == 0;
    $_987 = $tobool1035 ? 0 : 32;
    $not_tobool1035 = $tobool1035 ^ 1;
    $dec1037 = $not_tobool1035 << 31 >> 31;
    $width_0_dec1037 = $dec1037 + $width_0 | 0;
    $width_5 = $width_0_dec1037;
    $v_2 = $v_1;
    $sc_0 = $_987;
    label = 241;
    break;
   case 241:
    $124 = $123 << 24 >> 24;
    $125 = $cmp1015 ? 100 : $124;
    $conv1041 = $cmp9921010 ? 100 : $125;
    $call1042 = _snprintf($arraydecay | 0, 32, 101904, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $conv1041, tempInt) | 0) | 0;
    $call1045 = _snprintf($arraydecay1043 | 0, 64, $arraydecay | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $v_2, tempInt) | 0) | 0;
    $width_6 = $width_5;
    $v_3 = $v_2;
    $sc_1 = $sc_0;
    $dots_3 = $dots_1;
    $s_0 = $arraydecay1043;
    label = 248;
    break;
   case 242:
    $cmp1051 = $123 << 24 >> 24 == 88;
    $cmp1060 = ($v_1 | 0) < 0;
    $_dots_1 = $cmp1060 ? 1 : $dots_1;
    $126 = $123 << 24 >> 24;
    $127 = $cmp1051 ? 120 : $126;
    $conv1065 = $cmp9921010 ? 100 : $127;
    $call1066 = _snprintf($arraydecay1064 | 0, 32, 101904, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $conv1065, tempInt) | 0) | 0;
    $call1069 = _snprintf($incdec_ptr1067 | 0, 63, $arraydecay1064 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $v_1, tempInt) | 0) | 0;
    if ($cmp1060) {
      label = 243;
      break;
    } else {
      $width_6 = $width_0;
      $v_3 = $v_1;
      $sc_1 = 0;
      $dots_3 = $_dots_1;
      $s_0 = $incdec_ptr1067;
      label = 248;
      break;
    }
   case 243:
    $call1074 = _remove_sign_bits($incdec_ptr1067, $base_01009) | 0;
    if (($base_01009 | 0) == 8) {
      label = 244;
      break;
    } else if (($base_01009 | 0) == 2) {
      label = 245;
      break;
    } else if (($base_01009 | 0) == 16) {
      $d_0_ph = 102;
      label = 246;
      break;
    } else {
      $width_6 = $width_0;
      $v_3 = $v_1;
      $sc_1 = 0;
      $dots_3 = $_dots_1;
      $s_0 = $call1074;
      label = 248;
      break;
    }
   case 244:
    $d_0_ph = 55;
    label = 246;
    break;
   case 245:
    $d_0_ph = 49;
    label = 246;
    break;
   case 246:
    $conv1080971 = $d_0_ph & 255;
    $128 = HEAP8[$call1074] | 0;
    $conv1083 = $128 << 24 >> 24;
    $cmp1085 = ($conv1083 | 0) == ($conv1080971 | 0);
    if ($cmp1085) {
      $width_6 = $width_0;
      $v_3 = $v_1;
      $sc_1 = 0;
      $dots_3 = $_dots_1;
      $s_0 = $call1074;
      label = 248;
      break;
    } else {
      label = 247;
      break;
    }
   case 247:
    $incdec_ptr1088 = $call1074 - 1 | 0;
    HEAP8[$incdec_ptr1088] = $d_0_ph;
    $width_6 = $width_0;
    $v_3 = $v_1;
    $sc_1 = 0;
    $dots_3 = $_dots_1;
    $s_0 = $incdec_ptr1088;
    label = 248;
    break;
   case 248:
    $call1093 = _strlen($s_0 | 0) | 0;
    $tobool1094 = ($dots_3 | 0) != 0;
    if ($tobool1094) {
      label = 249;
      break;
    } else {
      $width_7 = $width_6;
      $prec_2 = $prec_0;
      label = 250;
      break;
    }
   case 249:
    $sub1096 = $prec_0 - 2 | 0;
    $sub1097 = $width_6 - 2 | 0;
    $width_7 = $sub1097;
    $prec_2 = $sub1096;
    label = 250;
    break;
   case 250:
    $129 = HEAP8[$p_1] | 0;
    $cmp1100 = $129 << 24 >> 24 == 88;
    if ($cmp1100) {
      label = 251;
      break;
    } else {
      label = 253;
      break;
    }
   case 251:
    $130 = HEAP8[$s_0] | 0;
    $cmp11081113 = $130 << 24 >> 24 == 0;
    if ($cmp11081113) {
      label = 253;
      break;
    } else {
      $pp_01114 = $s_0;
      $131 = $130;
      label = 252;
      break;
    }
   case 252:
    $conv1107 = $131 & 255;
    $call1111 = _toupper($conv1107 | 0) | 0;
    $conv1112 = $call1111 & 255;
    HEAP8[$pp_01114] = $conv1112;
    $incdec_ptr1113 = $pp_01114 + 1 | 0;
    $132 = HEAP8[$incdec_ptr1113] | 0;
    $cmp1108 = $132 << 24 >> 24 == 0;
    if ($cmp1108) {
      label = 253;
      break;
    } else {
      $pp_01114 = $incdec_ptr1113;
      $131 = $132;
      label = 252;
      break;
    }
   case 253:
    $tobool1116 = ($prefix_0_ph | 0) == 0;
    if ($tobool1116) {
      label = 260;
      break;
    } else {
      label = 254;
      break;
    }
   case 254:
    $arrayidx1118 = $prefix_0_ph + 1 | 0;
    $133 = HEAP8[$arrayidx1118] | 0;
    $tobool1119 = $133 << 24 >> 24 == 0;
    if ($tobool1119) {
      label = 255;
      break;
    } else {
      label = 260;
      break;
    }
   case 255:
    if ($tobool1094) {
      $width_8 = $width_7;
      $prec_31014 = $prec_2;
      $prefix_11015 = 0;
      $len934_01016 = $call1093;
      $tobool11561017 = 0;
      label = 264;
      break;
    } else {
      label = 256;
      break;
    }
   case 256:
    $cmp1124 = ($call1093 | 0) == 1;
    if ($cmp1124) {
      label = 257;
      break;
    } else {
      label = 259;
      break;
    }
   case 257:
    $134 = HEAP8[$s_0] | 0;
    $cmp1128 = $134 << 24 >> 24 == 48;
    if ($cmp1128) {
      label = 258;
      break;
    } else {
      label = 259;
      break;
    }
   case 258:
    $135 = $flags_1 << 25;
    $sext = $135 >> 31;
    $prec_2_dec1134 = $prec_2 + $sext | 0;
    $len934_0 = 0;
    $prefix_1 = $prefix_0_ph;
    $prec_3 = $prec_2_dec1134;
    label = 262;
    break;
   case 259:
    $and1137 = $flags_1 & 64;
    $tobool1138 = ($and1137 | 0) != 0;
    $cmp1140 = ($prec_2 | 0) > ($call1093 | 0);
    $or_cond989 = $tobool1138 & $cmp1140;
    $_prefix_0997 = $or_cond989 ? 0 : $prefix_0_ph;
    $len934_0 = $call1093;
    $prefix_1 = $_prefix_0997;
    $prec_3 = $prec_2;
    label = 262;
    break;
   case 260:
    $cmp1147 = ($call1093 | 0) == 1;
    if ($cmp1147) {
      label = 261;
      break;
    } else {
      $len934_0 = $call1093;
      $prefix_1 = $prefix_0_ph;
      $prec_3 = $prec_2;
      label = 262;
      break;
    }
   case 261:
    $136 = HEAP8[$s_0] | 0;
    $cmp1151 = $136 << 24 >> 24 == 48;
    $_prefix_0 = $cmp1151 ? 0 : $prefix_0_ph;
    $len934_0 = 1;
    $prefix_1 = $_prefix_0;
    $prec_3 = $prec_2;
    label = 262;
    break;
   case 262:
    $tobool1156 = ($prefix_1 | 0) == 0;
    if ($tobool1156) {
      $width_8 = $width_7;
      $prec_31014 = $prec_3;
      $prefix_11015 = 0;
      $len934_01016 = $len934_0;
      $tobool11561017 = 0;
      label = 264;
      break;
    } else {
      label = 263;
      break;
    }
   case 263:
    $call1160 = _strlen($prefix_1 | 0) | 0;
    $sub1161 = $width_7 - $call1160 | 0;
    $width_8 = $sub1161;
    $prec_31014 = $prec_3;
    $prefix_11015 = $prefix_1;
    $len934_01016 = $len934_0;
    $tobool11561017 = 1;
    label = 264;
    break;
   case 264:
    $and1163 = $flags_1 & 74;
    $cmp1164 = ($and1163 | 0) == 8;
    if ($cmp1164) {
      $width_9 = 0;
      $len934_3 = $len934_01016;
      $prec_5 = $width_8;
      label = 269;
      break;
    } else {
      label = 265;
      break;
    }
   case 265:
    $cmp1168 = ($prec_31014 | 0) < ($len934_01016 | 0);
    if ($cmp1168) {
      label = 266;
      break;
    } else {
      $len934_2 = $len934_01016;
      $prec_4 = $prec_31014;
      label = 268;
      break;
    }
   case 266:
    $tobool1156_not = $tobool11561017 ^ 1;
    $cmp1173 = ($prec_31014 | 0) == 0;
    $or_cond990 = $cmp1173 & $tobool1156_not;
    $cmp1176 = ($len934_01016 | 0) == 1;
    $or_cond991 = $or_cond990 & $cmp1176;
    if ($or_cond991) {
      label = 267;
      break;
    } else {
      $len934_2 = $len934_01016;
      $prec_4 = $len934_01016;
      label = 268;
      break;
    }
   case 267:
    $137 = HEAP8[$s_0] | 0;
    $cmp1180 = $137 << 24 >> 24 == 48;
    $_len934_0 = $cmp1180 ? 0 : $len934_01016;
    $len934_2 = $_len934_0;
    $prec_4 = $_len934_0;
    label = 268;
    break;
   case 268:
    $sub1185 = $width_8 - $prec_4 | 0;
    $width_9 = $sub1185;
    $len934_3 = $len934_2;
    $prec_5 = $prec_4;
    label = 269;
    break;
   case 269:
    $and1187 = $flags_1 & 2;
    $tobool1188 = ($and1187 | 0) == 0;
    if ($tobool1188) {
      label = 270;
      break;
    } else {
      $blen_5 = $add;
      $bsiz_13 = $bsiz_1;
      $width_11 = $width_9;
      label = 274;
      break;
    }
   case 270:
    $add1192 = $width_9 + $add | 0;
    $bsiz_12 = $bsiz_1;
    label = 271;
    break;
   case 271:
    $cmp1193 = ($add1192 | 0) < ($bsiz_12 | 0);
    $mul1196 = $bsiz_12 << 1;
    if ($cmp1193) {
      label = 272;
      break;
    } else {
      $bsiz_12 = $mul1196;
      label = 271;
      break;
    }
   case 272:
    _mrb_str_resize($tmp1198, $mrb, $result, $bsiz_12);
    $dec12041115 = $width_9 - 1 | 0;
    $cmp12051116 = ($width_9 | 0) > 0;
    if ($cmp12051116) {
      label = 273;
      break;
    } else {
      $blen_5 = $add;
      $bsiz_13 = $bsiz_12;
      $width_11 = $dec12041115;
      label = 274;
      break;
    }
   case 273:
    $138 = HEAP32[$p9 >> 2] | 0;
    $ptr1201 = $138 + 20 | 0;
    $139 = $ptr1201;
    $140 = HEAP32[$139 >> 2] | 0;
    $141 = $blen_01149 + $sub_ptr_lhs_cast | 0;
    $142 = $141 - $sub_ptr_rhs_cast | 0;
    $scevgep = $140 + $142 | 0;
    _memset($scevgep | 0, 32, $width_9 | 0);
    $143 = $width_9 + $blen_01149 | 0;
    $144 = $143 + $sub_ptr_lhs_cast | 0;
    $145 = $144 - $sub_ptr_rhs_cast | 0;
    $blen_5 = $145;
    $bsiz_13 = $bsiz_12;
    $width_11 = -1;
    label = 274;
    break;
   case 274:
    $tobool1212 = $sc_1 << 24 >> 24 == 0;
    if ($tobool1212) {
      $blen_6 = $blen_5;
      $bsiz_15 = $bsiz_13;
      label = 278;
      break;
    } else {
      label = 275;
      break;
    }
   case 275:
    $add1217 = $blen_5 + 1 | 0;
    $bsiz_14 = $bsiz_13;
    label = 276;
    break;
   case 276:
    $cmp1218 = ($add1217 | 0) < ($bsiz_14 | 0);
    $mul1221 = $bsiz_14 << 1;
    if ($cmp1218) {
      label = 277;
      break;
    } else {
      $bsiz_14 = $mul1221;
      label = 276;
      break;
    }
   case 277:
    _mrb_str_resize($tmp1223, $mrb, $result, $bsiz_14);
    $146 = HEAP32[$p9 >> 2] | 0;
    $ptr1226 = $146 + 20 | 0;
    $147 = $ptr1226;
    $148 = HEAP32[$147 >> 2] | 0;
    $arrayidx1228 = $148 + $blen_5 | 0;
    HEAP8[$arrayidx1228] = $sc_1;
    $blen_6 = $add1217;
    $bsiz_15 = $bsiz_14;
    label = 278;
    break;
   case 278:
    if ($tobool11561017) {
      label = 279;
      break;
    } else {
      $blen_7_ph = $blen_6;
      $bsiz_17_ph = $bsiz_15;
      label = 282;
      break;
    }
   case 279:
    $call1235 = _strlen($prefix_11015 | 0) | 0;
    $add1239 = $call1235 + $blen_6 | 0;
    $bsiz_16 = $bsiz_15;
    label = 280;
    break;
   case 280:
    $cmp1240 = ($add1239 | 0) < ($bsiz_16 | 0);
    $mul1243 = $bsiz_16 << 1;
    if ($cmp1240) {
      label = 281;
      break;
    } else {
      $bsiz_16 = $mul1243;
      label = 280;
      break;
    }
   case 281:
    _mrb_str_resize($tmp1245, $mrb, $result, $bsiz_16);
    $149 = HEAP32[$p9 >> 2] | 0;
    $ptr1248 = $149 + 20 | 0;
    $150 = $ptr1248;
    $151 = HEAP32[$150 >> 2] | 0;
    $arrayidx1250 = $151 + $blen_6 | 0;
    _memcpy($arrayidx1250 | 0, $prefix_11015 | 0, $call1235);
    $blen_7_ph = $add1239;
    $bsiz_17_ph = $bsiz_16;
    label = 282;
    break;
   case 282:
    $sub1256 = $prec_5 - $len934_3 | 0;
    $add1257 = $sub1256 + $blen_7_ph | 0;
    $bsiz_17 = $bsiz_17_ph;
    label = 283;
    break;
   case 283:
    $cmp1258 = ($add1257 | 0) < ($bsiz_17 | 0);
    $mul1261 = $bsiz_17 << 1;
    if ($cmp1258) {
      label = 284;
      break;
    } else {
      $bsiz_17 = $mul1261;
      label = 283;
      break;
    }
   case 284:
    _mrb_str_resize($tmp1263, $mrb, $result, $bsiz_17);
    $152 = HEAP32[$p9 >> 2] | 0;
    $ptr1266 = $152 + 20 | 0;
    $153 = $ptr1266;
    $154 = HEAP32[$153 >> 2] | 0;
    if ($tobool1094) {
      label = 285;
      break;
    } else {
      $buf_0 = $154;
      $blen_8 = $blen_7_ph;
      $bsiz_19 = $bsiz_17;
      label = 288;
      break;
    }
   case 285:
    $add1273 = $blen_7_ph + 2 | 0;
    $bsiz_18 = $bsiz_17;
    label = 286;
    break;
   case 286:
    $cmp1274 = ($add1273 | 0) < ($bsiz_18 | 0);
    $mul1277 = $bsiz_18 << 1;
    if ($cmp1274) {
      label = 287;
      break;
    } else {
      $bsiz_18 = $mul1277;
      label = 286;
      break;
    }
   case 287:
    _mrb_str_resize($tmp1279, $mrb, $result, $bsiz_18);
    $155 = HEAP32[$p9 >> 2] | 0;
    $ptr1282 = $155 + 20 | 0;
    $156 = $ptr1282;
    $157 = HEAP32[$156 >> 2] | 0;
    $arrayidx1284 = $157 + $blen_7_ph | 0;
    $158 = $arrayidx1284;
    tempBigInt = 11822;
    HEAP8[$158] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$158 + 1 | 0] = tempBigInt & 255;
    $buf_0 = $157;
    $blen_8 = $add1273;
    $bsiz_19 = $bsiz_18;
    label = 288;
    break;
   case 288:
    $cmp1288 = ($v_3 | 0) < 0;
    if ($cmp1288) {
      label = 290;
      break;
    } else {
      label = 289;
      break;
    }
   case 289:
    $cmp1293 = ($org_v_0 | 0) < 0;
    $or_cond992 = $cmp9921010 & $cmp1293;
    if ($or_cond992) {
      label = 290;
      break;
    } else {
      label = 291;
      break;
    }
   case 290:
    $cmp13011126 = ($len934_3 | 0) < ($prec_5 | 0);
    if ($cmp13011126) {
      label = 293;
      break;
    } else {
      $blen_11_ph = $blen_8;
      label = 294;
      break;
    }
   case 291:
    $and1308 = $flags_1 & 66;
    $cmp1309 = ($and1308 | 0) != 2;
    $cmp13161121 = ($len934_3 | 0) < ($prec_5 | 0);
    $or_cond1228 = $cmp1309 & $cmp13161121;
    if ($or_cond1228) {
      label = 292;
      break;
    } else {
      $blen_11_ph = $blen_8;
      label = 294;
      break;
    }
   case 292:
    $scevgep1221 = $buf_0 + $blen_8 | 0;
    $159 = $prec_5 - $len934_3 | 0;
    _memset($scevgep1221 | 0, 48, $159 | 0);
    $160 = $prec_5 + $blen_8 | 0;
    $161 = $160 - $len934_3 | 0;
    $blen_11_ph = $161;
    label = 294;
    break;
   case 293:
    $call1298 = _sign_bits($base_01009, $p_1) | 0;
    $scevgep1222 = $buf_0 + $blen_8 | 0;
    $162 = $prec_5 - $len934_3 | 0;
    _memset($scevgep1222 | 0, $call1298 | 0, $162 | 0);
    $163 = $prec_5 + $blen_8 | 0;
    $164 = $163 - $len934_3 | 0;
    $blen_11_ph = $164;
    label = 294;
    break;
   case 294:
    $add1327 = $blen_11_ph + $len934_3 | 0;
    $bsiz_20 = $bsiz_19;
    label = 295;
    break;
   case 295:
    $cmp1328 = ($add1327 | 0) < ($bsiz_20 | 0);
    $mul1331 = $bsiz_20 << 1;
    if ($cmp1328) {
      label = 296;
      break;
    } else {
      $bsiz_20 = $mul1331;
      label = 295;
      break;
    }
   case 296:
    _mrb_str_resize($tmp1333, $mrb, $result, $bsiz_20);
    $165 = HEAP32[$p9 >> 2] | 0;
    $ptr1336 = $165 + 20 | 0;
    $166 = $ptr1336;
    $167 = HEAP32[$166 >> 2] | 0;
    $arrayidx1338 = $167 + $blen_11_ph | 0;
    _memcpy($arrayidx1338 | 0, $s_0 | 0, $len934_3);
    $add1343 = $add1327 + $width_11 | 0;
    $bsiz_21 = $bsiz_20;
    label = 297;
    break;
   case 297:
    $cmp1344 = ($add1343 | 0) < ($bsiz_21 | 0);
    $mul1347 = $bsiz_21 << 1;
    if ($cmp1344) {
      label = 298;
      break;
    } else {
      $bsiz_21 = $mul1347;
      label = 297;
      break;
    }
   case 298:
    _mrb_str_resize($tmp1349, $mrb, $result, $bsiz_21);
    $cmp13561130 = ($width_11 | 0) > 0;
    if ($cmp13561130) {
      label = 334;
      break;
    } else {
      $p_11 = $p_1;
      $blen_16 = $add1327;
      $bsiz_24 = $bsiz_21;
      $nextarg_10 = $nextarg_8;
      $posarg_13 = $posarg_11;
      label = 336;
      break;
    }
   case 299:
    $cmp1366 = ($nextvalue_sroa_2_0 | 0) == 5;
    if ($cmp1366) {
      label = 301;
      break;
    } else {
      label = 300;
      break;
    }
   case 300:
    HEAP32[$nextvalue_sroa_0_0__cast >> 2] = $nextvalue_sroa_0_0;
    HEAP32[$nextvalue_sroa_1_4__cast >> 2] = $nextvalue_sroa_1_0;
    HEAP32[$nextvalue_sroa_2_8__idx283 >> 2] = $nextvalue_sroa_2_0;
    $nextarg_9 = $nextarg_1;
    $posarg_12 = $posarg_1;
    label = 307;
    break;
   case 301:
    if (($posarg_1 | 0) == (-1 | 0)) {
      label = 302;
      break;
    } else if (($posarg_1 | 0) == (-2 | 0)) {
      label = 303;
      break;
    } else {
      label = 304;
      break;
    }
   case 302:
    $call1373 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp1374, $nextarg_1);
    _mrb_raisef($mrb, $call1373, 106620, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp1374 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp1374 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp1374 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($val1364);
    $nextarg_9 = $nextarg_1;
    $posarg_12 = -1;
    label = 307;
    break;
   case 303:
    $call1379 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp1380, $nextarg_1);
    _mrb_raisef($mrb, $call1379, 106272, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp1380 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp1380 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp1380 + 8 >> 2] | 0, tempInt) | 0);
    _mrb_undef_value1718($val1364);
    $nextarg_9 = $nextarg_1;
    $posarg_12 = -2;
    label = 307;
    break;
   case 304:
    $inc1382 = $nextarg_1 + 1 | 0;
    $cmp1383 = ($nextarg_1 | 0) < ($inc | 0);
    if ($cmp1383) {
      label = 306;
      break;
    } else {
      label = 305;
      break;
    }
   case 305:
    $call1386 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call1386, 106008);
    _mrb_undef_value1718($val1364);
    $nextarg_9 = $inc1382;
    $posarg_12 = $nextarg_1;
    label = 307;
    break;
   case 306:
    $incdec_ptr_sum = $nextarg_1 - 1 | 0;
    $arrayidx1388 = $argv + ($incdec_ptr_sum * 12 & -1) | 0;
    $168 = $arrayidx1388;
    HEAP32[$40 >> 2] = HEAP32[$168 >> 2] | 0;
    HEAP32[$40 + 4 >> 2] = HEAP32[$168 + 4 >> 2] | 0;
    HEAP32[$40 + 8 >> 2] = HEAP32[$168 + 8 >> 2] | 0;
    $nextarg_9 = $inc1382;
    $posarg_12 = $nextarg_1;
    label = 307;
    break;
   case 307:
    _mrb_Float($tmp1399, $mrb, $val1364);
    $169 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f1401 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f1401 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $call1402 = ___fpclassifyf(+$169) | 0;
    $cmp1403 = ($call1402 | 0) == 0;
    if ($cmp1403) {
      label = 309;
      break;
    } else {
      label = 308;
      break;
    }
   case 308:
    $call1406 = ___fpclassifyf(+$169) | 0;
    $cmp1407 = ($call1406 | 0) == 1;
    if ($cmp1407) {
      label = 309;
      break;
    } else {
      label = 328;
      break;
    }
   case 309:
    $call1412 = ___fpclassifyf(+$169) | 0;
    $cmp1413 = ($call1412 | 0) == 0;
    $_993 = $cmp1413 ? 101468 : 101200;
    $call1418 = ___fpclassifyf(+$169) | 0;
    $cmp1419 = ($call1418 | 0) != 0;
    $cmp1422 = $169 < 0.0;
    $or_cond = $cmp1419 & $cmp1422;
    if ($or_cond) {
      label = 311;
      break;
    } else {
      label = 310;
      break;
    }
   case 310:
    $and1425 = $flags_1 & 4;
    $tobool1426 = ($and1425 | 0) == 0;
    if ($tobool1426) {
      $need_0 = 3;
      label = 312;
      break;
    } else {
      label = 311;
      break;
    }
   case 311:
    $need_0 = 4;
    label = 312;
    break;
   case 312:
    $and1430 = $flags_1 & 32;
    $tobool1431 = ($and1430 | 0) != 0;
    $cmp1433 = ($need_0 | 0) < ($width_0 | 0);
    $or_cond994 = $tobool1431 & $cmp1433;
    $width_0_need_0 = $or_cond994 ? $width_0 : $need_0;
    $add1439 = $width_0_need_0 + 1 | 0;
    $add1440 = $add1439 + $add | 0;
    $bsiz_22 = $bsiz_1;
    label = 313;
    break;
   case 313:
    $cmp1441 = ($add1440 | 0) < ($bsiz_22 | 0);
    $mul1444 = $bsiz_22 << 1;
    if ($cmp1441) {
      label = 314;
      break;
    } else {
      $bsiz_22 = $mul1444;
      label = 313;
      break;
    }
   case 314:
    _mrb_str_resize($tmp1446, $mrb, $result, $bsiz_22);
    $170 = HEAP32[$p9 >> 2] | 0;
    $ptr1449 = $170 + 20 | 0;
    $171 = $ptr1449;
    $172 = HEAP32[$171 >> 2] | 0;
    $arrayidx1451 = $172 + $add | 0;
    $call1453 = _snprintf($arrayidx1451 | 0, $add1439 | 0, 101020, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $width_0_need_0, HEAP32[tempInt + 4 >> 2] = 100708, tempInt) | 0) | 0;
    $and1454 = $flags_1 & 2;
    $tobool1455 = ($and1454 | 0) == 0;
    $call1457 = ___fpclassifyf(+$169) | 0;
    $cmp1458 = ($call1457 | 0) != 0;
    $or_cond1 = $cmp1458 & $cmp1422;
    if ($tobool1455) {
      label = 321;
      break;
    } else {
      label = 315;
      break;
    }
   case 315:
    if ($or_cond1) {
      label = 316;
      break;
    } else {
      label = 317;
      break;
    }
   case 316:
    $inc1464 = $add + 1 | 0;
    HEAP8[$arrayidx1451] = 45;
    $blen_13 = $inc1464;
    label = 320;
    break;
   case 317:
    $and1467 = $flags_1 & 4;
    $tobool1468 = ($and1467 | 0) == 0;
    if ($tobool1468) {
      label = 319;
      break;
    } else {
      label = 318;
      break;
    }
   case 318:
    $inc1470 = $add + 1 | 0;
    HEAP8[$arrayidx1451] = 43;
    $blen_13 = $inc1470;
    label = 320;
    break;
   case 319:
    $and1473 = $flags_1 >>> 4;
    $and1473_lobit = $and1473 & 1;
    $add_inc1476 = $and1473_lobit + $add | 0;
    $blen_13 = $add_inc1476;
    label = 320;
    break;
   case 320:
    $arrayidx1480 = $172 + $blen_13 | 0;
    HEAP8[$arrayidx1480] = HEAP8[$_993] | 0;
    HEAP8[$arrayidx1480 + 1 | 0] = HEAP8[$_993 + 1 | 0] | 0;
    HEAP8[$arrayidx1480 + 2 | 0] = HEAP8[$_993 + 2 | 0] | 0;
    $blen_15 = $blen_13;
    label = 327;
    break;
   case 321:
    if ($or_cond1) {
      label = 322;
      break;
    } else {
      label = 323;
      break;
    }
   case 322:
    $add1489 = $add - 4 | 0;
    $sub1491 = $add1489 + $width_0_need_0 | 0;
    $arrayidx1492 = $172 + $sub1491 | 0;
    HEAP8[$arrayidx1492] = 45;
    $blen_14 = $add;
    label = 326;
    break;
   case 323:
    $and1494 = $flags_1 & 4;
    $tobool1495 = ($and1494 | 0) == 0;
    if ($tobool1495) {
      label = 325;
      break;
    } else {
      label = 324;
      break;
    }
   case 324:
    $add1497 = $add - 4 | 0;
    $sub1499 = $add1497 + $width_0_need_0 | 0;
    $arrayidx1500 = $172 + $sub1499 | 0;
    HEAP8[$arrayidx1500] = 43;
    $blen_14 = $add;
    label = 326;
    break;
   case 325:
    $and1502 = $flags_1 & 16;
    $tobool1503 = ($and1502 | 0) != 0;
    $cmp1505 = ($width_0_need_0 | 0) > ($width_0 | 0);
    $or_cond995 = $tobool1503 & $cmp1505;
    $inc1508 = $or_cond995 & 1;
    $inc1508_add = $inc1508 + $add | 0;
    $blen_14 = $inc1508_add;
    label = 326;
    break;
   case 326:
    $add1512 = $width_0_need_0 - 3 | 0;
    $sub1513 = $add1512 + $blen_14 | 0;
    $arrayidx1514 = $172 + $sub1513 | 0;
    HEAP8[$arrayidx1514] = HEAP8[$_993] | 0;
    HEAP8[$arrayidx1514 + 1 | 0] = HEAP8[$_993 + 1 | 0] | 0;
    HEAP8[$arrayidx1514 + 2 | 0] = HEAP8[$_993 + 2 | 0] | 0;
    $blen_15 = $blen_14;
    label = 327;
    break;
   case 327:
    $arrayidx1516 = $172 + $blen_15 | 0;
    $call1517 = _strlen($arrayidx1516 | 0) | 0;
    $add1518 = $call1517 + $blen_15 | 0;
    $p_11 = $p_1;
    $blen_16 = $add1518;
    $bsiz_24 = $bsiz_22;
    $nextarg_10 = $nextarg_9;
    $posarg_13 = $posarg_12;
    label = 336;
    break;
   case 328:
    $173 = HEAP8[$p_1] | 0;
    $conv1521 = $173 << 24 >> 24;
    _fmt_setup($arraydecay1520, $conv1521, $flags_1, $width_0, $prec_0);
    $174 = HEAP8[$p_1] | 0;
    if (($174 << 24 >> 24 | 0) == 101 | ($174 << 24 >> 24 | 0) == 69) {
      $need_2 = 0;
      label = 331;
      break;
    } else {
      label = 329;
      break;
    }
   case 329:
    HEAP32[$i1395 >> 2] = -2147483648;
    $call1530 = +_frexp(+$169, $i1395 | 0);
    $175 = HEAP32[$i1395 >> 2] | 0;
    $cmp1531 = ($175 | 0) > 0;
    if ($cmp1531) {
      label = 330;
      break;
    } else {
      $need_2 = 0;
      label = 331;
      break;
    }
   case 330:
    $mul1534 = $175 * 146 & -1;
    $div1535 = ($mul1534 | 0) / 485 & -1;
    $add1536 = $div1535 + 1 | 0;
    $need_2 = $add1536;
    label = 331;
    break;
   case 331:
    $and1539 = $flags_1 & 64;
    $tobool1540 = ($and1539 | 0) != 0;
    $cond1544 = $tobool1540 ? $prec_0 : 6;
    $add1545 = $need_2 + $cond1544 | 0;
    $and1546 = $flags_1 & 32;
    $tobool1547 = ($and1546 | 0) != 0;
    $cmp1549 = ($add1545 | 0) < ($width_0 | 0);
    $or_cond996 = $tobool1547 & $cmp1549;
    $need_3 = $or_cond996 ? $width_0 : $add1545;
    $add1553 = $need_3 + 20 | 0;
    $add1556 = $add1553 + $add | 0;
    $bsiz_23 = $bsiz_1;
    label = 332;
    break;
   case 332:
    $cmp1557 = ($add1556 | 0) < ($bsiz_23 | 0);
    $mul1560 = $bsiz_23 << 1;
    if ($cmp1557) {
      label = 333;
      break;
    } else {
      $bsiz_23 = $mul1560;
      label = 332;
      break;
    }
   case 333:
    _mrb_str_resize($tmp1562, $mrb, $result, $bsiz_23);
    $176 = HEAP32[$p9 >> 2] | 0;
    $ptr1565 = $176 + 20 | 0;
    $177 = $ptr1565;
    $178 = HEAP32[$177 >> 2] | 0;
    $arrayidx1567 = $178 + $add | 0;
    $call1569 = _snprintf($arrayidx1567 | 0, $add1553 | 0, $arraydecay1520 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $169, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0, tempInt) | 0) | 0;
    $add1570 = $call1569 + $add | 0;
    $p_11 = $p_1;
    $blen_16 = $add1570;
    $bsiz_24 = $bsiz_23;
    $nextarg_10 = $nextarg_9;
    $posarg_13 = $posarg_12;
    label = 336;
    break;
   case 334:
    $179 = HEAP32[$p9 >> 2] | 0;
    $ptr1352 = $179 + 20 | 0;
    $180 = $ptr1352;
    $181 = HEAP32[$180 >> 2] | 0;
    $182 = $blen_11_ph + $len934_3 | 0;
    $scevgep1223 = $181 + $182 | 0;
    _memset($scevgep1223 | 0, 32, $width_11 | 0);
    $183 = $blen_11_ph + $width_11 | 0;
    $184 = $183 + $len934_3 | 0;
    $p_11 = $p_1;
    $blen_16 = $184;
    $bsiz_24 = $bsiz_21;
    $nextarg_10 = $nextarg_8;
    $posarg_13 = $posarg_11;
    label = 336;
    break;
   case 335:
    $185 = HEAP32[$p9 >> 2] | 0;
    $ptr860 = $185 + 20 | 0;
    $186 = $ptr860;
    $187 = HEAP32[$186 >> 2] | 0;
    $188 = $len753_0 + $blen_2_ph | 0;
    $scevgep1226 = $187 + $188 | 0;
    _memset($scevgep1226 | 0, 32, $width_3_ph | 0);
    $189 = $len753_0 + $width_3_ph | 0;
    $190 = $189 + $blen_2_ph | 0;
    $p_11 = $p_10;
    $blen_16 = $190;
    $bsiz_24 = $bsiz_10;
    $nextarg_10 = $nextarg_7;
    $posarg_13 = $posarg_10;
    label = 336;
    break;
   case 336:
    $incdec_ptr1573 = $p_11 + 1 | 0;
    $cmp = $incdec_ptr1573 >>> 0 < $add_ptr >>> 0;
    if ($cmp) {
      $posarg_01146 = $posarg_13;
      $nextarg_01147 = $nextarg_10;
      $bsiz_01148 = $bsiz_24;
      $blen_01149 = $blen_16;
      $p_01150 = $incdec_ptr1573;
      label = 4;
      break;
    } else {
      $blen_17 = $blen_16;
      label = 337;
      break;
    }
   case 337:
    _mrb_str_resize($tmp1575, $mrb, $result, $blen_17);
    $191 = $agg_result;
    HEAP32[$191 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$191 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$191 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _sign_bits($base, $p) {
  $base = $base | 0;
  $p = $p | 0;
  var $0 = 0, $cmp = 0, $_ = 0, $c_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    if (($base | 0) == 16) {
      label = 3;
      break;
    } else if (($base | 0) == 2) {
      label = 4;
      break;
    } else if (($base | 0) == 8) {
      $c_0 = 55;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $0 = HEAP8[$p] | 0;
    $cmp = $0 << 24 >> 24 == 88;
    $_ = $cmp ? 70 : 102;
    $c_0 = $_;
    label = 6;
    break;
   case 4:
    $c_0 = 49;
    label = 6;
    break;
   case 5:
    $c_0 = 46;
    label = 6;
    break;
   case 6:
    return $c_0 | 0;
  }
  return 0;
}
function _mrb_is_local_id($id) {
  $id = $id | 0;
  return $id << 16 >> 16 | 0;
}
function _mrb_is_const_id($id) {
  $id = $id | 0;
  return $id << 16 >> 16 | 0;
}
function _mrb_undef_value1718($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 5;
  return;
}
function _mrb_fixnum_value1719($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_obj_value1723($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_true_value1741($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = 2;
  return;
}
function _mrb_false_value1742($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_nil_value1743($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_fixnum_value1744($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_obj_value1747($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_obj_value1792($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_fixnum_value1793($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_nil_value1795($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _get_hash($agg_result, $mrb, $hash, $argc, $argv) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $hash = $hash | 0;
  $argc = $argc | 0;
  $argv = $argv | 0;
  var $tmp4 = 0, $tt = 0, $0 = 0, $cmp = 0, $1 = 0, $2 = 0, $cmp1 = 0, $call = 0, $arrayidx = 0, $3 = 0, $tmp_sroa_0_0__cast1 = 0, $tmp_sroa_0_0_copyload2 = 0, $tmp_sroa_1_4__idx3 = 0, $tmp_sroa_1_4__cast4 = 0, $tmp_sroa_1_4_copyload5 = 0, $tmp_sroa_2_8__idx7 = 0, $tmp_sroa_2_8_copyload8 = 0, $4 = 0, $5 = 0, $call8 = 0, $6 = 0, $tmp_sroa_0_0__cast = 0, $tmp_sroa_1_4__idx = 0, $tmp_sroa_1_4__cast = 0, $7 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp4 = __stackBase__ | 0;
    $tt = $hash + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 5;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $1 = $agg_result;
    $2 = $hash;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    label = 9;
    break;
   case 4:
    $cmp1 = ($argc | 0) == 2;
    if ($cmp1) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $call = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call, 99372);
    label = 6;
    break;
   case 6:
    $arrayidx = $argv + 12 | 0;
    _mrb_check_convert_type($tmp4, $mrb, $arrayidx, 15, 99120, 98860);
    $3 = $tmp4;
    $tmp_sroa_0_0__cast1 = $tmp4;
    $tmp_sroa_0_0_copyload2 = HEAP32[$tmp_sroa_0_0__cast1 >> 2] | 0;
    $tmp_sroa_1_4__idx3 = $3 + 4 | 0;
    $tmp_sroa_1_4__cast4 = $tmp_sroa_1_4__idx3;
    $tmp_sroa_1_4_copyload5 = HEAP32[$tmp_sroa_1_4__cast4 >> 2] | 0;
    $tmp_sroa_2_8__idx7 = $tmp4 + 8 | 0;
    $tmp_sroa_2_8_copyload8 = HEAP32[$tmp_sroa_2_8__idx7 >> 2] | 0;
    $4 = $tmp_sroa_2_8_copyload8 | $tmp_sroa_0_0_copyload2;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $call8 = _mrb_class_get($mrb, 110460) | 0;
    _mrb_raise($mrb, $call8, 99372);
    label = 8;
    break;
   case 8:
    $6 = $hash;
    $tmp_sroa_0_0__cast = $hash;
    HEAP32[$tmp_sroa_0_0__cast >> 2] = $tmp_sroa_0_0_copyload2;
    $tmp_sroa_1_4__idx = $6 + 4 | 0;
    $tmp_sroa_1_4__cast = $tmp_sroa_1_4__idx;
    HEAP32[$tmp_sroa_1_4__cast >> 2] = $tmp_sroa_1_4_copyload5;
    HEAP32[$tt >> 2] = $tmp_sroa_2_8_copyload8;
    $7 = $agg_result;
    HEAP32[$7 >> 2] = HEAP32[$6 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_symbol_value1720($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  var $v_sroa_1_2__raw_idx = 0, $v_sroa_1_2_idx = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP16[$agg_result >> 1] = $i;
  $v_sroa_1_2__raw_idx = $agg_result + 2 | 0;
  $v_sroa_1_2_idx = __stackBase__ | 0;
  HEAP16[$v_sroa_1_2__raw_idx >> 1] = HEAP16[$v_sroa_1_2_idx >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 2 >> 1] = HEAP16[$v_sroa_1_2_idx + 2 >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 4 >> 1] = HEAP16[$v_sroa_1_2_idx + 4 >> 1] | 0;
  HEAP32[$agg_result + 8 >> 2] = 4;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_fix2binstr($agg_result, $mrb, $x, $base) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $x = $x | 0;
  $base = $base | 0;
  var $buf = 0, $agg_tmp = 0, $i = 0, $0 = 0, $cmp = 0, $call = 0, $cmp1 = 0, $and = 0, $and_ = 0, $cmp4 = 0, $incdec_ptr = 0, $b_0 = 0, $val_1 = 0, $rem = 0, $arrayidx = 0, $1 = 0, $incdec_ptr7 = 0, $div = 0, $tobool = 0, $cmp8 = 0, $call10 = 0, $d_0_ph = 0, $conv21 = 0, $2 = 0, $conv14 = 0, $cmp16 = 0, $incdec_ptr19 = 0, $b_1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 76 | 0;
  tempParam = $x;
  $x = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$x >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$x + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$x + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $buf = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 64 | 0;
    $i = $x;
    $0 = HEAP32[$i >> 2] | 0;
    $cmp = ($base | 0) == 2;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 110460) | 0;
    _mrb_fixnum_value1719($agg_tmp, $base);
    _mrb_raisef($mrb, $call, 99660, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    label = 4;
    break;
   case 4:
    $cmp1 = $0 >>> 0 > 1023;
    $and = $0 & 1023;
    $and_ = $cmp1 ? $and : $0;
    $cmp4 = ($and_ | 0) == 0;
    if ($cmp4) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _mrb_str_new($agg_result, $mrb, 103428, 1);
    label = 15;
    break;
   case 6:
    $incdec_ptr = $buf + 63 | 0;
    HEAP8[$incdec_ptr] = 0;
    $val_1 = $and_;
    $b_0 = $incdec_ptr;
    label = 7;
    break;
   case 7:
    $rem = ($val_1 >>> 0) % ($base >>> 0);
    $arrayidx = $rem + 78888 | 0;
    $1 = HEAP8[$arrayidx] | 0;
    $incdec_ptr7 = $b_0 - 1 | 0;
    HEAP8[$incdec_ptr7] = $1;
    $div = ($val_1 >>> 0) / ($base >>> 0) >>> 0;
    $tobool = ($div | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      $val_1 = $div;
      $b_0 = $incdec_ptr7;
      label = 7;
      break;
    }
   case 8:
    $cmp8 = ($0 | 0) < 0;
    if ($cmp8) {
      label = 9;
      break;
    } else {
      $b_1 = $incdec_ptr7;
      label = 14;
      break;
    }
   case 9:
    $call10 = _remove_sign_bits($incdec_ptr7, $base) | 0;
    if (($base | 0) == 8) {
      label = 10;
      break;
    } else if (($base | 0) == 2) {
      label = 11;
      break;
    } else if (($base | 0) == 16) {
      $d_0_ph = 102;
      label = 12;
      break;
    } else {
      $b_1 = $call10;
      label = 14;
      break;
    }
   case 10:
    $d_0_ph = 55;
    label = 12;
    break;
   case 11:
    $d_0_ph = 49;
    label = 12;
    break;
   case 12:
    $conv21 = $d_0_ph & 255;
    $2 = HEAP8[$call10] | 0;
    $conv14 = $2 << 24 >> 24;
    $cmp16 = ($conv14 | 0) == ($conv21 | 0);
    if ($cmp16) {
      $b_1 = $call10;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $incdec_ptr19 = $call10 - 1 | 0;
    HEAP8[$incdec_ptr19] = $d_0_ph;
    $b_1 = $incdec_ptr19;
    label = 14;
    break;
   case 14:
    _mrb_str_new_cstr($agg_result, $mrb, $b_1);
    label = 15;
    break;
   case 15:
    STACKTOP = __stackBase__;
    return;
  }
}
function _remove_sign_bits($str, $base) {
  $str = $str | 0;
  $base = $base | 0;
  var $t_0 = 0, $0 = 0, $cmp1 = 0, $incdec_ptr = 0, $call = 0, $mul = 0, $rem = 0, $shr = 0, $and = 0, $1 = 0, $conv611 = 0, $or = 0, $conv7 = 0, $t_1 = 0, $2 = 0, $cmp10 = 0, $incdec_ptr13 = 0, $t_2 = 0, $3 = 0, $cmp21 = 0, $incdec_ptr24 = 0, $t_3 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    if (($base | 0) == 16) {
      $t_0 = $str;
      label = 3;
      break;
    } else if (($base | 0) == 8) {
      label = 4;
      break;
    } else if (($base | 0) == 2) {
      $t_2 = $str;
      label = 6;
      break;
    } else {
      $t_3 = $str;
      label = 7;
      break;
    }
   case 3:
    $0 = HEAP8[$t_0] | 0;
    $cmp1 = $0 << 24 >> 24 == 102;
    $incdec_ptr = $t_0 + 1 | 0;
    if ($cmp1) {
      $t_0 = $incdec_ptr;
      label = 3;
      break;
    } else {
      $t_3 = $t_0;
      label = 7;
      break;
    }
   case 4:
    $call = _strlen($str | 0) | 0;
    $mul = $call * 3 & -1;
    $rem = $mul & 31;
    $shr = -8 >> $rem;
    $and = $shr & 7;
    $1 = HEAP8[$str] | 0;
    $conv611 = $1 & 255;
    $or = $and | $conv611;
    $conv7 = $or & 255;
    HEAP8[$str] = $conv7;
    $t_1 = $str;
    label = 5;
    break;
   case 5:
    $2 = HEAP8[$t_1] | 0;
    $cmp10 = $2 << 24 >> 24 == 55;
    $incdec_ptr13 = $t_1 + 1 | 0;
    if ($cmp10) {
      $t_1 = $incdec_ptr13;
      label = 5;
      break;
    } else {
      $t_3 = $t_1;
      label = 7;
      break;
    }
   case 6:
    $3 = HEAP8[$t_2] | 0;
    $cmp21 = $3 << 24 >> 24 == 49;
    $incdec_ptr24 = $t_2 + 1 | 0;
    if ($cmp21) {
      $t_2 = $incdec_ptr24;
      label = 6;
      break;
    } else {
      $t_3 = $t_2;
      label = 7;
      break;
    }
   case 7:
    return $t_3 | 0;
  }
  return 0;
}
function _fmt_setup($buf, $c, $flags, $width, $prec) {
  $buf = $buf | 0;
  $c = $c | 0;
  $flags = $flags | 0;
  $width = $width | 0;
  $prec = $prec | 0;
  var $add_ptr = 0, $incdec_ptr = 0, $and = 0, $tobool = 0, $incdec_ptr1 = 0, $buf_addr_0 = 0, $and2 = 0, $tobool3 = 0, $incdec_ptr5 = 0, $buf_addr_1 = 0, $and7 = 0, $tobool8 = 0, $incdec_ptr10 = 0, $buf_addr_2 = 0, $and12 = 0, $tobool13 = 0, $incdec_ptr15 = 0, $buf_addr_3 = 0, $and17 = 0, $tobool18 = 0, $incdec_ptr20 = 0, $buf_addr_4 = 0, $and22 = 0, $tobool23 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $call = 0, $add_ptr25 = 0, $buf_addr_5 = 0, $and27 = 0, $tobool28 = 0, $sub_ptr_lhs_cast30 = 0, $sub_ptr_rhs_cast31 = 0, $sub_ptr_sub32 = 0, $call33 = 0, $add_ptr34 = 0, $buf_addr_6 = 0, $conv = 0, $incdec_ptr36 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $add_ptr = $buf + 32 | 0;
    $incdec_ptr = $buf + 1 | 0;
    HEAP8[$buf] = 37;
    $and = $flags & 1;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      $buf_addr_0 = $incdec_ptr;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $incdec_ptr1 = $buf + 2 | 0;
    HEAP8[$incdec_ptr] = 35;
    $buf_addr_0 = $incdec_ptr1;
    label = 4;
    break;
   case 4:
    $and2 = $flags & 4;
    $tobool3 = ($and2 | 0) == 0;
    if ($tobool3) {
      $buf_addr_1 = $buf_addr_0;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $incdec_ptr5 = $buf_addr_0 + 1 | 0;
    HEAP8[$buf_addr_0] = 43;
    $buf_addr_1 = $incdec_ptr5;
    label = 6;
    break;
   case 6:
    $and7 = $flags & 2;
    $tobool8 = ($and7 | 0) == 0;
    if ($tobool8) {
      $buf_addr_2 = $buf_addr_1;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $incdec_ptr10 = $buf_addr_1 + 1 | 0;
    HEAP8[$buf_addr_1] = 45;
    $buf_addr_2 = $incdec_ptr10;
    label = 8;
    break;
   case 8:
    $and12 = $flags & 8;
    $tobool13 = ($and12 | 0) == 0;
    if ($tobool13) {
      $buf_addr_3 = $buf_addr_2;
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $incdec_ptr15 = $buf_addr_2 + 1 | 0;
    HEAP8[$buf_addr_2] = 48;
    $buf_addr_3 = $incdec_ptr15;
    label = 10;
    break;
   case 10:
    $and17 = $flags & 16;
    $tobool18 = ($and17 | 0) == 0;
    if ($tobool18) {
      $buf_addr_4 = $buf_addr_3;
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $incdec_ptr20 = $buf_addr_3 + 1 | 0;
    HEAP8[$buf_addr_3] = 32;
    $buf_addr_4 = $incdec_ptr20;
    label = 12;
    break;
   case 12:
    $and22 = $flags & 32;
    $tobool23 = ($and22 | 0) == 0;
    if ($tobool23) {
      $buf_addr_5 = $buf_addr_4;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $sub_ptr_lhs_cast = $add_ptr;
    $sub_ptr_rhs_cast = $buf_addr_4;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $call = _snprintf($buf_addr_4 | 0, $sub_ptr_sub | 0, 100384, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $width, tempInt) | 0) | 0;
    $add_ptr25 = $buf_addr_4 + $call | 0;
    $buf_addr_5 = $add_ptr25;
    label = 14;
    break;
   case 14:
    $and27 = $flags & 64;
    $tobool28 = ($and27 | 0) == 0;
    if ($tobool28) {
      $buf_addr_6 = $buf_addr_5;
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $sub_ptr_lhs_cast30 = $add_ptr;
    $sub_ptr_rhs_cast31 = $buf_addr_5;
    $sub_ptr_sub32 = $sub_ptr_lhs_cast30 - $sub_ptr_rhs_cast31 | 0;
    $call33 = _snprintf($buf_addr_5 | 0, $sub_ptr_sub32 | 0, 100140, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $prec, tempInt) | 0) | 0;
    $add_ptr34 = $buf_addr_5 + $call33 | 0;
    $buf_addr_6 = $add_ptr34;
    label = 16;
    break;
   case 16:
    $conv = $c & 255;
    $incdec_ptr36 = $buf_addr_6 + 1 | 0;
    HEAP8[$buf_addr_6] = $conv;
    HEAP8[$incdec_ptr36] = 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_mruby_string_ext_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $0 = 0;
  $0 = HEAP32[$mrb + 60 >> 2] | 0;
  _mrb_define_method($mrb, $0, 108028, 702, 0);
  _mrb_define_method($mrb, $0, 110452, 638, 0);
  _mrb_define_method($mrb, $0, 105988, 714, 0);
  _mrb_define_method($mrb, $0, 102532, 318, 0);
  _mrb_define_method($mrb, $0, 99840, 156, 0);
  _mrb_define_method($mrb, $0, 97256, 156, 0);
  _mrb_define_method($mrb, $0, 95268, 304, 0);
  _mrb_define_method($mrb, $0, 94192, 842, 0);
  return;
}
function _mrb_str_getbyte($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $pos = 0, $call = 0, $0 = 0, $cmp = 0, $p = 0, $1 = 0, $len = 0, $2 = 0, $3 = 0, $add = 0, $cmp1 = 0, $4 = 0, $p3 = 0, $5 = 0, $len4 = 0, $6 = 0, $7 = 0, $cmp5 = 0, $ptr = 0, $8 = 0, $9 = 0, $arrayidx = 0, $10 = 0, $conv = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $pos = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 111296, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $pos, tempInt) | 0) | 0;
    $0 = HEAP32[$pos >> 2] | 0;
    $cmp = ($0 | 0) < 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $4 = $0;
      label = 4;
      break;
    }
   case 3:
    $p = $str;
    $1 = HEAP32[$p >> 2] | 0;
    $len = $1 + 12 | 0;
    $2 = $len;
    $3 = HEAP32[$2 >> 2] | 0;
    $add = $3 + $0 | 0;
    HEAP32[$pos >> 2] = $add;
    $cmp1 = ($add | 0) < 0;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      $4 = $add;
      label = 4;
      break;
    }
   case 4:
    $p3 = $str;
    $5 = HEAP32[$p3 >> 2] | 0;
    $len4 = $5 + 12 | 0;
    $6 = $len4;
    $7 = HEAP32[$6 >> 2] | 0;
    $cmp5 = ($7 | 0) > ($4 | 0);
    if ($cmp5) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _mrb_nil_value1743($agg_result);
    label = 7;
    break;
   case 6:
    $ptr = $5 + 20 | 0;
    $8 = $ptr;
    $9 = HEAP32[$8 >> 2] | 0;
    $arrayidx = $9 + $4 | 0;
    $10 = HEAP8[$arrayidx] | 0;
    $conv = $10 & 255;
    _mrb_fixnum_value1744($agg_result, $conv);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_swapcase_bang($agg_result, $mrb, $str) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  var $p1 = 0, $0 = 0, $1 = 0, $ptr = 0, $2 = 0, $3 = 0, $len = 0, $4 = 0, $5 = 0, $add_ptr = 0, $cmp10 = 0, $p_012 = 0, $modify_011 = 0, $6 = 0, $conv = 0, $call = 0, $tobool = 0, $7 = 0, $conv3 = 0, $call4 = 0, $conv5 = 0, $call7 = 0, $tobool8 = 0, $8 = 0, $conv10 = 0, $call11 = 0, $conv12 = 0, $modify_1 = 0, $incdec_ptr = 0, $cmp = 0, $tobool14 = 0, $9 = 0, $10 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p1 = $str;
    $0 = HEAP32[$p1 >> 2] | 0;
    $1 = $0;
    _mrb_str_modify($mrb, $1);
    $ptr = $0 + 20 | 0;
    $2 = $ptr;
    $3 = HEAP32[$2 >> 2] | 0;
    $len = $0 + 12 | 0;
    $4 = $len;
    $5 = HEAP32[$4 >> 2] | 0;
    $add_ptr = $3 + $5 | 0;
    $cmp10 = ($5 | 0) > 0;
    if ($cmp10) {
      $modify_011 = 0;
      $p_012 = $3;
      label = 3;
      break;
    } else {
      label = 10;
      break;
    }
   case 3:
    $6 = HEAP8[$p_012] | 0;
    $conv = $6 & 255;
    $call = _isupper($conv | 0) | 0;
    $tobool = ($call | 0) == 0;
    $7 = HEAP8[$p_012] | 0;
    $conv3 = $7 & 255;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call4 = _tolower($conv3 | 0) | 0;
    $conv5 = $call4 & 255;
    HEAP8[$p_012] = $conv5;
    $modify_1 = 1;
    label = 7;
    break;
   case 5:
    $call7 = _islower($conv3 | 0) | 0;
    $tobool8 = ($call7 | 0) == 0;
    if ($tobool8) {
      $modify_1 = $modify_011;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $8 = HEAP8[$p_012] | 0;
    $conv10 = $8 & 255;
    $call11 = _toupper($conv10 | 0) | 0;
    $conv12 = $call11 & 255;
    HEAP8[$p_012] = $conv12;
    $modify_1 = 1;
    label = 7;
    break;
   case 7:
    $incdec_ptr = $p_012 + 1 | 0;
    $cmp = $incdec_ptr >>> 0 < $add_ptr >>> 0;
    if ($cmp) {
      $modify_011 = $modify_1;
      $p_012 = $incdec_ptr;
      label = 3;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $tobool14 = ($modify_1 | 0) == 0;
    if ($tobool14) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $9 = $agg_result;
    $10 = $str;
    HEAP32[$9 >> 2] = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 + 4 >> 2] = HEAP32[$10 + 4 >> 2] | 0;
    HEAP32[$9 + 8 >> 2] = HEAP32[$10 + 8 >> 2] | 0;
    label = 11;
    break;
   case 10:
    _mrb_nil_value1743($agg_result);
    label = 11;
    break;
   case 11:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_swapcase($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $str = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $str = __stackBase__ | 0;
  _mrb_str_dup($str, $mrb, $self);
  $0 = $str;
  _mrb_str_swapcase_bang(__stackBase__ + 12 | 0, $mrb, $str);
  $1 = $agg_result;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2] | 0;
  HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_concat2($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $str = 0, $0 = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $str = __stackBase__ | 0;
  _mrb_get_args($mrb, 92616, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $str, tempInt) | 0);
  _mrb_str_concat($mrb, $self, $str);
  $0 = $agg_result;
  $1 = $self;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_start_with($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $argv = 0, $argc = 0, $call = 0, $0 = 0, $p = 0, $1 = 0, $i_0 = 0, $cmp = 0, $2 = 0, $len = 0, $3 = 0, $4 = 0, $value1 = 0, $p2 = 0, $5 = 0, $len3 = 0, $6 = 0, $7 = 0, $cmp4 = 0, $cond = 0, $ptr = 0, $8 = 0, $9 = 0, $ptr10 = 0, $10 = 0, $11 = 0, $call11 = 0, $cmp12 = 0, $inc = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $argv = __stackBase__ | 0;
    $argc = __stackBase__ + 4 | 0;
    $call = _mrb_get_args($mrb, 93352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $argv, HEAP32[tempInt + 4 >> 2] = $argc, tempInt) | 0) | 0;
    $0 = HEAP32[$argc >> 2] | 0;
    $p = $self;
    $1 = HEAP32[$argv >> 2] | 0;
    $i_0 = 0;
    label = 3;
    break;
   case 3:
    $cmp = ($i_0 | 0) < ($0 | 0);
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $2 = HEAP32[$p >> 2] | 0;
    $len = $2 + 12 | 0;
    $3 = $len;
    $4 = HEAP32[$3 >> 2] | 0;
    $value1 = $1 + ($i_0 * 12 & -1) | 0;
    $p2 = $value1;
    $5 = HEAP32[$p2 >> 2] | 0;
    $len3 = $5 + 12 | 0;
    $6 = $len3;
    $7 = HEAP32[$6 >> 2] | 0;
    $cmp4 = $4 >>> 0 > $7 >>> 0;
    $cond = $cmp4 ? $7 : $4;
    $ptr = $2 + 20 | 0;
    $8 = $ptr;
    $9 = HEAP32[$8 >> 2] | 0;
    $ptr10 = $5 + 20 | 0;
    $10 = $ptr10;
    $11 = HEAP32[$10 >> 2] | 0;
    $call11 = _memcmp($9 | 0, $11 | 0, $cond | 0) | 0;
    $cmp12 = ($call11 | 0) == 0;
    $inc = $i_0 + 1 | 0;
    if ($cmp12) {
      label = 5;
      break;
    } else {
      $i_0 = $inc;
      label = 3;
      break;
    }
   case 5:
    _mrb_true_value1741($agg_result);
    label = 7;
    break;
   case 6:
    _mrb_false_value1742($agg_result);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_end_with($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $argv = 0, $argc = 0, $call = 0, $0 = 0, $p = 0, $1 = 0, $i_0 = 0, $cmp = 0, $2 = 0, $len = 0, $3 = 0, $4 = 0, $value1 = 0, $p2 = 0, $5 = 0, $len3 = 0, $6 = 0, $7 = 0, $cmp4 = 0, $cond = 0, $ptr = 0, $8 = 0, $9 = 0, $sub = 0, $add_ptr = 0, $ptr10 = 0, $10 = 0, $11 = 0, $sub11 = 0, $add_ptr12 = 0, $call13 = 0, $cmp14 = 0, $inc = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $argv = __stackBase__ | 0;
    $argc = __stackBase__ + 4 | 0;
    $call = _mrb_get_args($mrb, 93352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $argv, HEAP32[tempInt + 4 >> 2] = $argc, tempInt) | 0) | 0;
    $0 = HEAP32[$argc >> 2] | 0;
    $p = $self;
    $1 = HEAP32[$argv >> 2] | 0;
    $i_0 = 0;
    label = 3;
    break;
   case 3:
    $cmp = ($i_0 | 0) < ($0 | 0);
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $2 = HEAP32[$p >> 2] | 0;
    $len = $2 + 12 | 0;
    $3 = $len;
    $4 = HEAP32[$3 >> 2] | 0;
    $value1 = $1 + ($i_0 * 12 & -1) | 0;
    $p2 = $value1;
    $5 = HEAP32[$p2 >> 2] | 0;
    $len3 = $5 + 12 | 0;
    $6 = $len3;
    $7 = HEAP32[$6 >> 2] | 0;
    $cmp4 = $4 >>> 0 > $7 >>> 0;
    $cond = $cmp4 ? $7 : $4;
    $ptr = $2 + 20 | 0;
    $8 = $ptr;
    $9 = HEAP32[$8 >> 2] | 0;
    $sub = $4 - $cond | 0;
    $add_ptr = $9 + $sub | 0;
    $ptr10 = $5 + 20 | 0;
    $10 = $ptr10;
    $11 = HEAP32[$10 >> 2] | 0;
    $sub11 = $7 - $cond | 0;
    $add_ptr12 = $11 + $sub11 | 0;
    $call13 = _memcmp($add_ptr | 0, $add_ptr12 | 0, $cond | 0) | 0;
    $cmp14 = ($call13 | 0) == 0;
    $inc = $i_0 + 1 | 0;
    if ($cmp14) {
      label = 5;
      break;
    } else {
      $i_0 = $inc;
      label = 3;
      break;
    }
   case 5:
    _mrb_true_value1741($agg_result);
    label = 7;
    break;
   case 6:
    _mrb_false_value1742($agg_result);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _struct_ivar_get($agg_result, $mrb, $c, $id) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $c = $c | 0;
  $id = $id | 0;
  var $tmp = 0, $tmp6 = 0, $call = 0, $ans_sroa_0_0__cast1 = 0, $ans_sroa_0_0_copyload215 = 0, $ans_sroa_2_8__idx7 = 0, $ans_sroa_2_8_copyload816 = 0, $0 = 0, $1 = 0, $p = 0, $2 = 0, $3 = 0, $ans_sroa_2_8_copyload8_lcssa = 0, $ans_sroa_0_0_copyload2_lcssa = 0, $4 = 0, $ans_sroa_1_4__idx3 = 0, $ans_sroa_1_4__cast4 = 0, $ans_sroa_1_4_copyload5 = 0, $5 = 0, $ans_sroa_0_0__cast = 0, $ans_sroa_1_4__idx = 0, $ans_sroa_1_4__cast = 0, $ans_sroa_2_8__idx6 = 0, $6 = 0, $super = 0, $7 = 0, $8 = 0, $cmp2 = 0, $cmp3 = 0, $or_cond12 = 0, $9 = 0, $ans_sroa_0_0_copyload2 = 0, $ans_sroa_2_8_copyload8 = 0, $10 = 0, $11 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $c;
  $c = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$c >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$c + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$c + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $tmp6 = __stackBase__ + 12 | 0;
    $call = _struct_class($mrb) | 0;
    _mrb_iv_get($tmp, 0, $c, $id);
    $ans_sroa_0_0__cast1 = $tmp;
    $ans_sroa_0_0_copyload215 = HEAP32[$ans_sroa_0_0__cast1 >> 2] | 0;
    $ans_sroa_2_8__idx7 = $tmp + 8 | 0;
    $ans_sroa_2_8_copyload816 = HEAP32[$ans_sroa_2_8__idx7 >> 2] | 0;
    $0 = $ans_sroa_2_8_copyload816 | $ans_sroa_0_0_copyload215;
    $1 = ($0 | 0) == 0;
    if ($1) {
      label = 3;
      break;
    } else {
      $ans_sroa_0_0_copyload2_lcssa = $ans_sroa_0_0_copyload215;
      $ans_sroa_2_8_copyload8_lcssa = $ans_sroa_2_8_copyload816;
      label = 4;
      break;
    }
   case 3:
    $p = $c;
    $2 = $c;
    $3 = $tmp6;
    label = 5;
    break;
   case 4:
    $4 = $tmp;
    $ans_sroa_1_4__idx3 = $4 + 4 | 0;
    $ans_sroa_1_4__cast4 = $ans_sroa_1_4__idx3;
    $ans_sroa_1_4_copyload5 = HEAP32[$ans_sroa_1_4__cast4 >> 2] | 0;
    $5 = $agg_result;
    $ans_sroa_0_0__cast = $agg_result;
    HEAP32[$ans_sroa_0_0__cast >> 2] = $ans_sroa_0_0_copyload2_lcssa;
    $ans_sroa_1_4__idx = $5 + 4 | 0;
    $ans_sroa_1_4__cast = $ans_sroa_1_4__idx;
    HEAP32[$ans_sroa_1_4__cast >> 2] = $ans_sroa_1_4_copyload5;
    $ans_sroa_2_8__idx6 = $agg_result + 8 | 0;
    HEAP32[$ans_sroa_2_8__idx6 >> 2] = $ans_sroa_2_8_copyload8_lcssa;
    label = 8;
    break;
   case 5:
    $6 = HEAP32[$p >> 2] | 0;
    $super = $6 + 20 | 0;
    $7 = $super;
    $8 = HEAP32[$7 >> 2] | 0;
    $cmp2 = ($8 | 0) == 0;
    $cmp3 = ($8 | 0) == ($call | 0);
    $or_cond12 = $cmp2 | $cmp3;
    if ($or_cond12) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _mrb_nil_value1795($agg_result);
    label = 8;
    break;
   case 7:
    $9 = $8 | 0;
    _mrb_obj_value1792($tmp6, $9);
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    _mrb_iv_get($tmp, 0, $tmp6, $id);
    $ans_sroa_0_0_copyload2 = HEAP32[$ans_sroa_0_0__cast1 >> 2] | 0;
    $ans_sroa_2_8_copyload8 = HEAP32[$ans_sroa_2_8__idx7 >> 2] | 0;
    $10 = $ans_sroa_2_8_copyload8 | $ans_sroa_0_0_copyload2;
    $11 = ($10 | 0) == 0;
    if ($11) {
      label = 5;
      break;
    } else {
      $ans_sroa_0_0_copyload2_lcssa = $ans_sroa_0_0_copyload2;
      $ans_sroa_2_8_copyload8_lcssa = $ans_sroa_2_8_copyload8;
      label = 4;
      break;
    }
   case 8:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_struct_s_members($agg_result, $mrb, $klass) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $klass = $klass | 0;
  var $members = 0, $call = 0, $tt = 0, $0 = 0, $cmp = 0, $i = 0, $1 = 0, $tobool = 0, $call1 = 0, $_pr = 0, $2 = 0, $cmp3 = 0, $call5 = 0, $3 = 0, $4 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $klass;
  $klass = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$klass >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$klass + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$klass + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $members = __stackBase__ | 0;
    $call = _mrb_intern2($mrb, 108e3, 11) | 0;
    _struct_ivar_get($members, $mrb, $klass, $call);
    $tt = $members + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $2 = $0;
      label = 6;
      break;
    }
   case 3:
    $i = $members;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $call1 = _mrb_class_get($mrb, 110440) | 0;
    _mrb_raise($mrb, $call1, 105964);
    label = 5;
    break;
   case 5:
    $_pr = HEAP32[$tt >> 2] | 0;
    $2 = $_pr;
    label = 6;
    break;
   case 6:
    $cmp3 = ($2 | 0) == 14;
    if ($cmp3) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $call5 = _mrb_class_get($mrb, 110440) | 0;
    _mrb_raise($mrb, $call5, 102512);
    label = 8;
    break;
   case 8:
    $3 = $agg_result;
    $4 = $members;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_struct_members($agg_result, $mrb, $s) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $s = $s | 0;
  var $members = 0, $agg_tmp = 0, $agg_tmp9 = 0, $agg_tmp13 = 0, $call = 0, $0 = 0, $call1 = 0, $call2 = 0, $call3 = 0, $tobool = 0, $p = 0, $1 = 0, $len = 0, $2 = 0, $3 = 0, $p5 = 0, $4 = 0, $len6 = 0, $5 = 0, $6 = 0, $cmp = 0, $call8 = 0, $7 = 0, $len12 = 0, $8 = 0, $9 = 0, $10 = 0, $len16 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  tempParam = $s;
  $s = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$s >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$s + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$s + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $members = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $agg_tmp9 = __stackBase__ + 24 | 0;
    $agg_tmp13 = __stackBase__ + 36 | 0;
    $call = _mrb_obj_class($mrb, $s) | 0;
    $0 = $call | 0;
    _mrb_obj_value1792($agg_tmp, $0);
    _mrb_struct_s_members($members, $mrb, $agg_tmp);
    $call1 = _mrb_obj_class($mrb, $s) | 0;
    $call2 = _mrb_class_name($mrb, $call1) | 0;
    $call3 = _strcmp($call2 | 0, 99832) | 0;
    $tobool = ($call3 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $p = $s;
    $1 = HEAP32[$p >> 2] | 0;
    $len = $1 + 12 | 0;
    $2 = $len;
    $3 = HEAP32[$2 >> 2] | 0;
    $p5 = $members;
    $4 = HEAP32[$p5 >> 2] | 0;
    $len6 = $4 + 12 | 0;
    $5 = $len6;
    $6 = HEAP32[$5 >> 2] | 0;
    $cmp = ($3 | 0) == ($6 | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call8 = _mrb_class_get($mrb, 110440) | 0;
    $7 = HEAP32[$p5 >> 2] | 0;
    $len12 = $7 + 12 | 0;
    $8 = $len12;
    $9 = HEAP32[$8 >> 2] | 0;
    _mrb_fixnum_value1793($agg_tmp9, $9);
    $10 = HEAP32[$p >> 2] | 0;
    $len16 = $10 + 12 | 0;
    $11 = $len16;
    $12 = HEAP32[$11 >> 2] | 0;
    _mrb_fixnum_value1793($agg_tmp13, $12);
    _mrb_raisef($mrb, $call8, 97212, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp9 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp9 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp9 + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp13 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp13 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp13 + 8 >> 2] | 0, tempInt) | 0);
    label = 5;
    break;
   case 5:
    $13 = $agg_result;
    $14 = $members;
    HEAP32[$13 >> 2] = HEAP32[$14 >> 2] | 0;
    HEAP32[$13 + 4 >> 2] = HEAP32[$14 + 4 >> 2] | 0;
    HEAP32[$13 + 8 >> 2] = HEAP32[$14 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_struct_getmember($agg_result, $mrb, $obj, $id) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $id = $id | 0;
  var $slot = 0, $tmp = 0, $agg_tmp = 0, $p = 0, $0 = 0, $ptr1 = 0, $1 = 0, $2 = 0, $members_sroa_0_0__cast = 0, $members_sroa_0_0_copyload = 0, $ptr4 = 0, $3 = 0, $4 = 0, $len8 = 0, $5 = 0, $6 = 0, $i_0 = 0, $cmp = 0, $arrayidx = 0, $call = 0, $tobool = 0, $inc = 0, $arrayidx9 = 0, $7 = 0, $8 = 0, $call10 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $slot = __stackBase__ | 0;
    $tmp = __stackBase__ + 12 | 0;
    $agg_tmp = __stackBase__ + 24 | 0;
    $p = $obj;
    $0 = HEAP32[$p >> 2] | 0;
    $ptr1 = $0 + 20 | 0;
    $1 = $ptr1;
    $2 = HEAP32[$1 >> 2] | 0;
    _mrb_struct_members($tmp, $mrb, $obj);
    $members_sroa_0_0__cast = $tmp;
    $members_sroa_0_0_copyload = HEAP32[$members_sroa_0_0__cast >> 2] | 0;
    $ptr4 = $members_sroa_0_0_copyload + 20 | 0;
    $3 = $ptr4;
    $4 = HEAP32[$3 >> 2] | 0;
    _mrb_symbol_value1794($slot, $id);
    $len8 = $members_sroa_0_0_copyload + 12 | 0;
    $5 = $len8;
    $6 = HEAP32[$5 >> 2] | 0;
    $i_0 = 0;
    label = 3;
    break;
   case 3:
    $cmp = ($i_0 | 0) < ($6 | 0);
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $arrayidx = $4 + ($i_0 * 12 & -1) | 0;
    $call = _mrb_obj_equal(0, $arrayidx, $slot) | 0;
    $tobool = ($call | 0) == 0;
    $inc = $i_0 + 1 | 0;
    if ($tobool) {
      $i_0 = $inc;
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $arrayidx9 = $2 + ($i_0 * 12 & -1) | 0;
    $7 = $agg_result;
    $8 = $arrayidx9;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    label = 7;
    break;
   case 6:
    $call10 = _mrb_class_get($mrb, 95256) | 0;
    _mrb_sym2str($agg_tmp, $mrb, $id);
    _mrb_raisef($mrb, $call10, 94168, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    _mrb_nil_value1795($agg_result);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_symbol_value1794($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  var $v_sroa_1_2__raw_idx = 0, $v_sroa_1_2_idx = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP16[$agg_result >> 1] = $i;
  $v_sroa_1_2__raw_idx = $agg_result + 2 | 0;
  $v_sroa_1_2_idx = __stackBase__ | 0;
  HEAP16[$v_sroa_1_2__raw_idx >> 1] = HEAP16[$v_sroa_1_2_idx >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 2 >> 1] = HEAP16[$v_sroa_1_2_idx + 2 >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 4 >> 1] = HEAP16[$v_sroa_1_2_idx + 4 >> 1] | 0;
  HEAP32[$agg_result + 8 >> 2] = 4;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_id_attrset($mrb, $id) {
  $mrb = $mrb | 0;
  $id = $id | 0;
  var $len = 0, $call = 0, $call1 = 0, $call5 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  $len = __stackBase__ | 0;
  $call = _mrb_sym2name_len($mrb, $id, $len) | 0;
  $call1 = _mrb_malloc($mrb, (HEAP32[$len >> 2] | 0) + 2 | 0) | 0;
  _memcpy($call1 | 0, $call | 0, HEAP32[$len >> 2] | 0);
  HEAP8[$call1 + (HEAP32[$len >> 2] | 0) | 0] = 61;
  HEAP8[$call1 + ((HEAP32[$len >> 2] | 0) + 1 | 0) | 0] = 0;
  $call5 = _mrb_intern2($mrb, $call1, (HEAP32[$len >> 2] | 0) + 1 | 0) | 0;
  _mrb_free($mrb, $call1);
  STACKTOP = __stackBase__;
  return $call5 | 0;
}
function _GENERATED_TMP_mrb_mruby_string_ext_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $tmp = 0, $agg_tmp = 0, $call = 0, $exc = 0, $0 = 0, $tobool = 0, $1 = 0, $2 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $call = _mrb_gc_arena_save($mrb) | 0;
    _mrb_mruby_string_ext_gem_init($mrb);
    _mrb_load_irep($tmp, $mrb, 80588);
    $exc = $mrb + 16 | 0;
    $0 = HEAP32[$exc >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_print_backtrace($mrb);
    $1 = HEAP32[$exc >> 2] | 0;
    $2 = $1 | 0;
    _mrb_obj_value1723($agg_tmp, $2);
    _mrb_p($mrb, $agg_tmp);
    _exit(1);
   case 4:
    _mrb_gc_arena_restore($mrb, $call);
    STACKTOP = __stackBase__;
    return;
  }
}
function _GENERATED_TMP_mrb_mruby_struct_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $tmp = 0, $agg_tmp = 0, $call = 0, $exc = 0, $0 = 0, $tobool = 0, $1 = 0, $2 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $call = _mrb_gc_arena_save($mrb) | 0;
    _mrb_mruby_struct_gem_init($mrb);
    _mrb_load_irep($tmp, $mrb, 79884);
    $exc = $mrb + 16 | 0;
    $0 = HEAP32[$exc >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_print_backtrace($mrb);
    $1 = HEAP32[$exc >> 2] | 0;
    $2 = $1 | 0;
    _mrb_obj_value1747($agg_tmp, $2);
    _mrb_p($mrb, $agg_tmp);
    _exit(1);
   case 4:
    _mrb_gc_arena_restore($mrb, $call);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_bool_value1800($agg_result, $boolean) {
  $agg_result = $agg_result | 0;
  $boolean = $boolean | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = $boolean << 24 >> 24 != 0 ? 2 : 0;
  return;
}
function _make_struct($agg_result, $mrb, $name, $members, $klass) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $name = $name | 0;
  $members = $members | 0;
  $klass = $klass | 0;
  var $nstr = 0, $tmp = 0, $tt = 0, $0 = 0, $cmp = 0, $i1 = 0, $1 = 0, $tobool = 0, $call = 0, $2 = 0, $3 = 0, $call2 = 0, $call3 = 0, $tobool4 = 0, $call6 = 0, $tobool7 = 0, $p = 0, $4 = 0, $ptr = 0, $5 = 0, $6 = 0, $call11 = 0, $c_0 = 0, $7 = 0, $8 = 0, $or = 0, $9 = 0, $10 = 0, $11 = 0, $call14 = 0, $p16 = 0, $12 = 0, $ptr17 = 0, $13 = 0, $14 = 0, $len20 = 0, $15 = 0, $16 = 0, $cmp2134 = 0, $i_035 = 0, $value24 = 0, $sym = 0, $17 = 0, $call25 = 0, $tobool26 = 0, $call27 = 0, $tobool28 = 0, $cmp30 = 0, $arrayidx32 = 0, $18 = 0, $call35 = 0, $inc = 0, $exitcond = 0, $19 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $name;
  $name = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$name >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$name + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$name + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $members;
  $members = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$members >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$members + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$members + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $nstr = __stackBase__ | 0;
    $tmp = __stackBase__ + 12 | 0;
    $tt = $name + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $i1 = $name;
    $1 = HEAP32[$i1 >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $call = _mrb_class_new($mrb, $klass) | 0;
    $c_0 = $call;
    label = 10;
    break;
   case 5:
    _mrb_str_to_str($tmp, $mrb, $name);
    $2 = $name;
    $3 = $tmp;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    $call2 = _mrb_obj_to_sym($mrb, $tmp) | 0;
    $call3 = _mrb_is_const_id($call2) | 0;
    $tobool4 = ($call3 | 0) == 0;
    if ($tobool4) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _mrb_name_error($mrb, $call2, 100984, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$name >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$name + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$name + 8 >> 2] | 0, tempInt) | 0);
    label = 7;
    break;
   case 7:
    $call6 = _mrb_const_defined_at($mrb, $klass, $call2) | 0;
    $tobool7 = ($call6 | 0) == 0;
    if ($tobool7) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _mrb_warn($mrb, 100676, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$name >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$name + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$name + 8 >> 2] | 0, tempInt) | 0);
    label = 9;
    break;
   case 9:
    $p = $name;
    $4 = HEAP32[$p >> 2] | 0;
    $ptr = $4 + 20 | 0;
    $5 = $ptr;
    $6 = HEAP32[$5 >> 2] | 0;
    $call11 = _mrb_define_class_under($mrb, $klass, $6, $klass) | 0;
    $c_0 = $call11;
    label = 10;
    break;
   case 10:
    $7 = $c_0;
    $8 = HEAP32[$7 >> 2] | 0;
    $or = $8 & -522241;
    $9 = $or | 28672;
    HEAP32[$7 >> 2] = $9;
    $10 = $c_0 | 0;
    _mrb_obj_value1792($nstr, $10);
    $11 = $nstr;
    $call14 = _mrb_intern2($mrb, 108e3, 11) | 0;
    _mrb_iv_set($mrb, $nstr, $call14, $members);
    _mrb_define_class_method($mrb, $c_0, 108644, 734, 0);
    _mrb_define_class_method($mrb, $c_0, 108056, 734, 0);
    _mrb_define_class_method($mrb, $c_0, 107152, 632, 0);
    $p16 = $members;
    $12 = HEAP32[$p16 >> 2] | 0;
    $ptr17 = $12 + 20 | 0;
    $13 = $ptr17;
    $14 = HEAP32[$13 >> 2] | 0;
    $len20 = $12 + 12 | 0;
    $15 = $len20;
    $16 = HEAP32[$15 >> 2] | 0;
    $cmp2134 = ($16 | 0) > 0;
    if ($cmp2134) {
      $i_035 = 0;
      label = 11;
      break;
    } else {
      label = 18;
      break;
    }
   case 11:
    $value24 = $14 + ($i_035 * 12 & -1) | 0;
    $sym = $value24;
    $17 = HEAP16[$sym >> 1] | 0;
    $call25 = _mrb_is_local_id($17) | 0;
    $tobool26 = ($call25 | 0) == 0;
    if ($tobool26) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $call27 = _mrb_is_const_id($17) | 0;
    $tobool28 = ($call27 | 0) == 0;
    if ($tobool28) {
      label = 17;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $cmp30 = ($i_035 | 0) < 10;
    if ($cmp30) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $arrayidx32 = 60992 + ($i_035 << 2) | 0;
    $18 = HEAP32[$arrayidx32 >> 2] | 0;
    _mrb_define_method_id($mrb, $c_0, $17, $18, 0);
    label = 16;
    break;
   case 15:
    _mrb_define_method_id($mrb, $c_0, $17, 264, 0);
    label = 16;
    break;
   case 16:
    $call35 = _mrb_id_attrset($mrb, $17) | 0;
    _mrb_define_method_id($mrb, $c_0, $call35, 386, 0);
    label = 17;
    break;
   case 17:
    $inc = $i_035 + 1 | 0;
    $exitcond = ($inc | 0) == ($16 | 0);
    if ($exitcond) {
      label = 18;
      break;
    } else {
      $i_035 = $inc;
      label = 11;
      break;
    }
   case 18:
    $19 = $agg_result;
    HEAP32[$19 >> 2] = HEAP32[$11 >> 2] | 0;
    HEAP32[$19 + 4 >> 2] = HEAP32[$11 + 4 >> 2] | 0;
    HEAP32[$19 + 8 >> 2] = HEAP32[$11 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _struct_class($mrb) {
  $mrb = $mrb | 0;
  return _mrb_class_get($mrb, 99832) | 0;
}
function _mrb_struct_initialize_withArg($agg_result, $mrb, $argc, $argv, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $argc = $argc | 0;
  $argv = $argv | 0;
  $self = $self | 0;
  var $agg_tmp = 0, $call = 0, $call1 = 0, $cmp = 0, $call2 = 0, $cmp317 = 0, $cmp515 = 0, $i_018 = 0, $arrayidx = 0, $inc = 0, $exitcond19 = 0, $i_116 = 0, $inc8 = 0, $exitcond = 0, $0 = 0, $1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $call = _mrb_obj_class($mrb, $self) | 0;
    $call1 = _num_members($mrb, $call) | 0;
    $cmp = ($call1 | 0) < ($argc | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call2 = _mrb_class_get($mrb, 101684) | 0;
    _mrb_raise($mrb, $call2, 101448);
    label = 4;
    break;
   case 4:
    $cmp317 = ($argc | 0) > 0;
    if ($cmp317) {
      $i_018 = 0;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $cmp515 = ($call1 | 0) > ($argc | 0);
    if ($cmp515) {
      $i_116 = $argc;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    $arrayidx = $argv + ($i_018 * 12 & -1) | 0;
    _mrb_ary_set($mrb, $self, $i_018, $arrayidx);
    $inc = $i_018 + 1 | 0;
    $exitcond19 = ($inc | 0) == ($argc | 0);
    if ($exitcond19) {
      label = 5;
      break;
    } else {
      $i_018 = $inc;
      label = 6;
      break;
    }
   case 7:
    _mrb_nil_value1795($agg_tmp);
    _mrb_ary_set($mrb, $self, $i_116, $agg_tmp);
    $inc8 = $i_116 + 1 | 0;
    $exitcond = ($inc8 | 0) == ($call1 | 0);
    if ($exitcond) {
      label = 8;
      break;
    } else {
      $i_116 = $inc8;
      label = 7;
      break;
    }
   case 8:
    $0 = $agg_result;
    $1 = $self;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_struct_init_copy($agg_result, $mrb, $copy) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $copy = $copy | 0;
  var $s = 0, $call = 0, $call1 = 0, $tobool = 0, $0 = 0, $1 = 0, $call2 = 0, $call3 = 0, $tobool4 = 0, $call6 = 0, $tt = 0, $2 = 0, $cmp = 0, $call9 = 0, $p = 0, $3 = 0, $len11 = 0, $4 = 0, $5 = 0, $p13 = 0, $6 = 0, $len14 = 0, $7 = 0, $8 = 0, $cmp15 = 0, $call17 = 0, $9 = 0, $len21 = 0, $10 = 0, $11 = 0, $cmp2214 = 0, $i_015 = 0, $12 = 0, $ptr = 0, $13 = 0, $14 = 0, $arrayidx = 0, $inc = 0, $exitcond = 0, $15 = 0, $16 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $copy;
  $copy = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$copy >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$copy + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$copy + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $s = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 93348, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $s, tempInt) | 0) | 0;
    $call1 = _mrb_obj_equal(0, $copy, $s) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $0 = $agg_result;
    $1 = $copy;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 13;
    break;
   case 4:
    $call2 = _mrb_obj_class($mrb, $copy) | 0;
    $call3 = _mrb_obj_is_instance_of($mrb, $s, $call2) | 0;
    $tobool4 = ($call3 | 0) == 0;
    if ($tobool4) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $call6 = _mrb_class_get($mrb, 110440) | 0;
    _mrb_raise($mrb, $call6, 92560);
    label = 6;
    break;
   case 6:
    $tt = $s + 8 | 0;
    $2 = HEAP32[$tt >> 2] | 0;
    $cmp = ($2 | 0) == 14;
    if ($cmp) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $call9 = _mrb_class_get($mrb, 110440) | 0;
    _mrb_raise($mrb, $call9, 102512);
    label = 8;
    break;
   case 8:
    $p = $copy;
    $3 = HEAP32[$p >> 2] | 0;
    $len11 = $3 + 12 | 0;
    $4 = $len11;
    $5 = HEAP32[$4 >> 2] | 0;
    $p13 = $s;
    $6 = HEAP32[$p13 >> 2] | 0;
    $len14 = $6 + 12 | 0;
    $7 = $len14;
    $8 = HEAP32[$7 >> 2] | 0;
    $cmp15 = ($5 | 0) == ($8 | 0);
    if ($cmp15) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $call17 = _mrb_class_get($mrb, 110440) | 0;
    _mrb_raise($mrb, $call17, 111244);
    label = 10;
    break;
   case 10:
    $9 = HEAP32[$p >> 2] | 0;
    $len21 = $9 + 12 | 0;
    $10 = $len21;
    $11 = HEAP32[$10 >> 2] | 0;
    $cmp2214 = ($11 | 0) > 0;
    if ($cmp2214) {
      $i_015 = 0;
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $12 = HEAP32[$p13 >> 2] | 0;
    $ptr = $12 + 20 | 0;
    $13 = $ptr;
    $14 = HEAP32[$13 >> 2] | 0;
    $arrayidx = $14 + ($i_015 * 12 & -1) | 0;
    _mrb_ary_set($mrb, $copy, $i_015, $arrayidx);
    $inc = $i_015 + 1 | 0;
    $exitcond = ($inc | 0) == ($11 | 0);
    if ($exitcond) {
      label = 12;
      break;
    } else {
      $i_015 = $inc;
      label = 11;
      break;
    }
   case 12:
    $15 = $agg_result;
    $16 = $copy;
    HEAP32[$15 >> 2] = HEAP32[$16 >> 2] | 0;
    HEAP32[$15 + 4 >> 2] = HEAP32[$16 + 4 >> 2] | 0;
    HEAP32[$15 + 8 >> 2] = HEAP32[$16 + 8 >> 2] | 0;
    label = 13;
    break;
   case 13:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_struct_aref_n($agg_result, $mrb, $s, $idx) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $s = $s | 0;
  $idx = $idx | 0;
  var $sym = 0, $agg_tmp = 0, $agg_tmp21 = 0, $agg_tmp32 = 0, $agg_tmp33 = 0, $tt = 0, $0 = 0, $cmp = 0, $tt1 = 0, $1 = 0, $cmp2 = 0, $i3 = 0, $2 = 0, $tobool = 0, $call = 0, $3 = 0, $4 = 0, $_pr = 0, $5 = 0, $cmp7 = 0, $sym10 = 0, $6 = 0, $i13 = 0, $7 = 0, $cmp14 = 0, $p = 0, $8 = 0, $len = 0, $9 = 0, $10 = 0, $add = 0, $cmp18 = 0, $call20 = 0, $p23 = 0, $11 = 0, $len24 = 0, $12 = 0, $13 = 0, $i_015 = 0, $p27 = 0, $14 = 0, $len28 = 0, $15 = 0, $16 = 0, $cmp29 = 0, $call31 = 0, $17 = 0, $len36 = 0, $18 = 0, $19 = 0, $20 = 0, $ptr = 0, $21 = 0, $22 = 0, $arrayidx = 0, $23 = 0, $24 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 60 | 0;
  tempParam = $s;
  $s = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$s >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$s + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$s + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $idx;
  $idx = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$idx >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$idx + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$idx + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $sym = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $agg_tmp21 = __stackBase__ + 24 | 0;
    $agg_tmp32 = __stackBase__ + 36 | 0;
    $agg_tmp33 = __stackBase__ + 48 | 0;
    $tt = $idx + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp = ($0 | 0) == 16;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $5 = $0;
      label = 7;
      break;
    }
   case 3:
    _mrb_check_intern_str($sym, $mrb, $idx);
    $tt1 = $sym + 8 | 0;
    $1 = HEAP32[$tt1 >> 2] | 0;
    $cmp2 = ($1 | 0) == 0;
    if ($cmp2) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $i3 = $sym;
    $2 = HEAP32[$i3 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $call = _mrb_class_get($mrb, 95256) | 0;
    _mrb_raisef($mrb, $call, 110796, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$idx >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$idx + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$idx + 8 >> 2] | 0, tempInt) | 0);
    label = 6;
    break;
   case 6:
    $3 = $idx;
    $4 = $sym;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    $_pr = HEAP32[$tt >> 2] | 0;
    $5 = $_pr;
    label = 7;
    break;
   case 7:
    $cmp7 = ($5 | 0) == 4;
    if ($cmp7) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $sym10 = $idx;
    $6 = HEAP16[$sym10 >> 1] | 0;
    _mrb_struct_aref_id($agg_result, $mrb, $s, $6);
    label = 15;
    break;
   case 9:
    $i13 = $idx;
    $7 = HEAP32[$i13 >> 2] | 0;
    $cmp14 = ($7 | 0) < 0;
    if ($cmp14) {
      label = 10;
      break;
    } else {
      $i_015 = $7;
      label = 12;
      break;
    }
   case 10:
    $p = $s;
    $8 = HEAP32[$p >> 2] | 0;
    $len = $8 + 12 | 0;
    $9 = $len;
    $10 = HEAP32[$9 >> 2] | 0;
    $add = $10 + $7 | 0;
    $cmp18 = ($add | 0) < 0;
    if ($cmp18) {
      label = 11;
      break;
    } else {
      $i_015 = $add;
      label = 12;
      break;
    }
   case 11:
    $call20 = _mrb_class_get($mrb, 95256) | 0;
    _mrb_fixnum_value1793($agg_tmp, $add);
    $p23 = $s;
    $11 = HEAP32[$p23 >> 2] | 0;
    $len24 = $11 + 12 | 0;
    $12 = $len24;
    $13 = HEAP32[$12 >> 2] | 0;
    _mrb_fixnum_value1793($agg_tmp21, $13);
    _mrb_raisef($mrb, $call20, 109972, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp21 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp21 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp21 + 8 >> 2] | 0, tempInt) | 0);
    $i_015 = $add;
    label = 12;
    break;
   case 12:
    $p27 = $s;
    $14 = HEAP32[$p27 >> 2] | 0;
    $len28 = $14 + 12 | 0;
    $15 = $len28;
    $16 = HEAP32[$15 >> 2] | 0;
    $cmp29 = ($16 | 0) > ($i_015 | 0);
    if ($cmp29) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $call31 = _mrb_class_get($mrb, 95256) | 0;
    _mrb_fixnum_value1793($agg_tmp32, $i_015);
    $17 = HEAP32[$p27 >> 2] | 0;
    $len36 = $17 + 12 | 0;
    $18 = $len36;
    $19 = HEAP32[$18 >> 2] | 0;
    _mrb_fixnum_value1793($agg_tmp33, $19);
    _mrb_raisef($mrb, $call31, 109512, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp32 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp32 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp32 + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp33 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp33 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp33 + 8 >> 2] | 0, tempInt) | 0);
    label = 14;
    break;
   case 14:
    $20 = HEAP32[$p27 >> 2] | 0;
    $ptr = $20 + 20 | 0;
    $21 = $ptr;
    $22 = HEAP32[$21 >> 2] | 0;
    $arrayidx = $22 + ($i_015 * 12 & -1) | 0;
    $23 = $agg_result;
    $24 = $arrayidx;
    HEAP32[$23 >> 2] = HEAP32[$24 >> 2] | 0;
    HEAP32[$23 + 4 >> 2] = HEAP32[$24 + 4 >> 2] | 0;
    HEAP32[$23 + 8 >> 2] = HEAP32[$24 + 8 >> 2] | 0;
    label = 15;
    break;
   case 15:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_struct_aref_id($agg_result, $mrb, $s, $id) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $s = $s | 0;
  $id = $id | 0;
  var $tmp = 0, $agg_tmp = 0, $p = 0, $0 = 0, $ptr1 = 0, $1 = 0, $2 = 0, $members_sroa_0_0__cast = 0, $members_sroa_0_0_copyload = 0, $ptr4 = 0, $3 = 0, $4 = 0, $len7 = 0, $5 = 0, $6 = 0, $i_0 = 0, $cmp = 0, $value8 = 0, $sym = 0, $7 = 0, $cmp10 = 0, $inc = 0, $arrayidx12 = 0, $8 = 0, $9 = 0, $call = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $s;
  $s = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$s >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$s + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$s + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $p = $s;
    $0 = HEAP32[$p >> 2] | 0;
    $ptr1 = $0 + 20 | 0;
    $1 = $ptr1;
    $2 = HEAP32[$1 >> 2] | 0;
    _mrb_struct_members($tmp, $mrb, $s);
    $members_sroa_0_0__cast = $tmp;
    $members_sroa_0_0_copyload = HEAP32[$members_sroa_0_0__cast >> 2] | 0;
    $ptr4 = $members_sroa_0_0_copyload + 20 | 0;
    $3 = $ptr4;
    $4 = HEAP32[$3 >> 2] | 0;
    $len7 = $members_sroa_0_0_copyload + 12 | 0;
    $5 = $len7;
    $6 = HEAP32[$5 >> 2] | 0;
    $i_0 = 0;
    label = 3;
    break;
   case 3:
    $cmp = ($i_0 | 0) < ($6 | 0);
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $value8 = $4 + ($i_0 * 12 & -1) | 0;
    $sym = $value8;
    $7 = HEAP16[$sym >> 1] | 0;
    $cmp10 = $7 << 16 >> 16 == $id << 16 >> 16;
    $inc = $i_0 + 1 | 0;
    if ($cmp10) {
      label = 5;
      break;
    } else {
      $i_0 = $inc;
      label = 3;
      break;
    }
   case 5:
    $arrayidx12 = $2 + ($i_0 * 12 & -1) | 0;
    $8 = $agg_result;
    $9 = $arrayidx12;
    HEAP32[$8 >> 2] = HEAP32[$9 >> 2] | 0;
    HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2] | 0;
    HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2] | 0;
    label = 7;
    break;
   case 6:
    $call = _mrb_class_get($mrb, 95256) | 0;
    _mrb_sym2str($agg_tmp, $mrb, $id);
    _mrb_raisef($mrb, $call, 110796, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    _mrb_nil_value1795($agg_result);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_struct_aref($agg_result, $mrb, $s) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $s = $s | 0;
  var $idx = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $s;
  $s = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$s >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$s + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$s + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $idx = __stackBase__ | 0;
  _mrb_get_args($mrb, 93348, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $idx, tempInt) | 0);
  _mrb_struct_aref_n($agg_result, $mrb, $s, $idx);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_aset($agg_result, $mrb, $s) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $s = $s | 0;
  var $idx = 0, $val = 0, $agg_tmp = 0, $agg_tmp12 = 0, $agg_tmp23 = 0, $agg_tmp24 = 0, $call = 0, $tt = 0, $0 = 0, $call3 = 0, $i4 = 0, $1 = 0, $cmp5 = 0, $p = 0, $2 = 0, $len = 0, $3 = 0, $4 = 0, $add = 0, $cmp9 = 0, $call11 = 0, $p14 = 0, $5 = 0, $len15 = 0, $6 = 0, $7 = 0, $i_014 = 0, $p18 = 0, $8 = 0, $len19 = 0, $9 = 0, $10 = 0, $cmp20 = 0, $call22 = 0, $11 = 0, $len27 = 0, $12 = 0, $13 = 0, $14 = 0, $ptr = 0, $15 = 0, $16 = 0, $arrayidx = 0, $17 = 0, $18 = 0, $19 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 72 | 0;
  tempParam = $s;
  $s = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$s >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$s + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$s + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $idx = __stackBase__ | 0;
    $val = __stackBase__ + 12 | 0;
    $agg_tmp = __stackBase__ + 24 | 0;
    $agg_tmp12 = __stackBase__ + 36 | 0;
    $agg_tmp23 = __stackBase__ + 48 | 0;
    $agg_tmp24 = __stackBase__ + 60 | 0;
    $call = _mrb_get_args($mrb, 109108, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $idx, HEAP32[tempInt + 4 >> 2] = $val, tempInt) | 0) | 0;
    $tt = $idx + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    if (($0 | 0) == 16 | ($0 | 0) == 4) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call3 = _mrb_obj_to_sym($mrb, $idx) | 0;
    _mrb_struct_aset_id($agg_result, $mrb, $s, $call3, $val);
    label = 10;
    break;
   case 4:
    $i4 = $idx;
    $1 = HEAP32[$i4 >> 2] | 0;
    $cmp5 = ($1 | 0) < 0;
    if ($cmp5) {
      label = 5;
      break;
    } else {
      $i_014 = $1;
      label = 7;
      break;
    }
   case 5:
    $p = $s;
    $2 = HEAP32[$p >> 2] | 0;
    $len = $2 + 12 | 0;
    $3 = $len;
    $4 = HEAP32[$3 >> 2] | 0;
    $add = $4 + $1 | 0;
    $cmp9 = ($add | 0) < 0;
    if ($cmp9) {
      label = 6;
      break;
    } else {
      $i_014 = $add;
      label = 7;
      break;
    }
   case 6:
    $call11 = _mrb_class_get($mrb, 95256) | 0;
    _mrb_fixnum_value1793($agg_tmp, $add);
    $p14 = $s;
    $5 = HEAP32[$p14 >> 2] | 0;
    $len15 = $5 + 12 | 0;
    $6 = $len15;
    $7 = HEAP32[$6 >> 2] | 0;
    _mrb_fixnum_value1793($agg_tmp12, $7);
    _mrb_raisef($mrb, $call11, 109972, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp12 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp12 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp12 + 8 >> 2] | 0, tempInt) | 0);
    $i_014 = $add;
    label = 7;
    break;
   case 7:
    $p18 = $s;
    $8 = HEAP32[$p18 >> 2] | 0;
    $len19 = $8 + 12 | 0;
    $9 = $len19;
    $10 = HEAP32[$9 >> 2] | 0;
    $cmp20 = ($10 | 0) > ($i_014 | 0);
    if ($cmp20) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $call22 = _mrb_class_get($mrb, 95256) | 0;
    _mrb_fixnum_value1793($agg_tmp23, $i_014);
    $11 = HEAP32[$p18 >> 2] | 0;
    $len27 = $11 + 12 | 0;
    $12 = $len27;
    $13 = HEAP32[$12 >> 2] | 0;
    _mrb_fixnum_value1793($agg_tmp24, $13);
    _mrb_raisef($mrb, $call22, 109512, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp23 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp23 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp23 + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp24 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp24 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp24 + 8 >> 2] | 0, tempInt) | 0);
    label = 9;
    break;
   case 9:
    $14 = HEAP32[$p18 >> 2] | 0;
    $ptr = $14 + 20 | 0;
    $15 = $ptr;
    $16 = HEAP32[$15 >> 2] | 0;
    $arrayidx = $16 + ($i_014 * 12 & -1) | 0;
    $17 = $arrayidx;
    $18 = $val;
    HEAP32[$17 >> 2] = HEAP32[$18 >> 2] | 0;
    HEAP32[$17 + 4 >> 2] = HEAP32[$18 + 4 >> 2] | 0;
    HEAP32[$17 + 8 >> 2] = HEAP32[$18 + 8 >> 2] | 0;
    $19 = $agg_result;
    HEAP32[$19 >> 2] = HEAP32[$18 >> 2] | 0;
    HEAP32[$19 + 4 >> 2] = HEAP32[$18 + 4 >> 2] | 0;
    HEAP32[$19 + 8 >> 2] = HEAP32[$18 + 8 >> 2] | 0;
    label = 10;
    break;
   case 10:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_struct_aset_id($agg_result, $mrb, $s, $id, $val) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $s = $s | 0;
  $id = $id | 0;
  $val = $val | 0;
  var $tmp = 0, $agg_tmp = 0, $agg_tmp5 = 0, $agg_tmp24 = 0, $members_sroa_0_0__cast = 0, $members_sroa_0_0_copyload = 0, $len1 = 0, $0 = 0, $1 = 0, $p3 = 0, $2 = 0, $len4 = 0, $3 = 0, $4 = 0, $cmp = 0, $call = 0, $5 = 0, $len8 = 0, $6 = 0, $7 = 0, $8 = 0, $ptr11 = 0, $9 = 0, $10 = 0, $ptr14 = 0, $11 = 0, $12 = 0, $i_0 = 0, $cmp15 = 0, $value16 = 0, $sym = 0, $13 = 0, $cmp18 = 0, $inc = 0, $arrayidx21 = 0, $14 = 0, $15 = 0, $16 = 0, $call23 = 0, $17 = 0, $18 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  tempParam = $s;
  $s = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$s >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$s + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$s + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $agg_tmp5 = __stackBase__ + 24 | 0;
    $agg_tmp24 = __stackBase__ + 36 | 0;
    _mrb_struct_members($tmp, $mrb, $s);
    $members_sroa_0_0__cast = $tmp;
    $members_sroa_0_0_copyload = HEAP32[$members_sroa_0_0__cast >> 2] | 0;
    $len1 = $members_sroa_0_0_copyload + 12 | 0;
    $0 = $len1;
    $1 = HEAP32[$0 >> 2] | 0;
    $p3 = $s;
    $2 = HEAP32[$p3 >> 2] | 0;
    $len4 = $2 + 12 | 0;
    $3 = $len4;
    $4 = HEAP32[$3 >> 2] | 0;
    $cmp = ($4 | 0) == ($1 | 0);
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call = _mrb_class_get($mrb, 110440) | 0;
    _mrb_fixnum_value1793($agg_tmp, $1);
    $5 = HEAP32[$p3 >> 2] | 0;
    $len8 = $5 + 12 | 0;
    $6 = $len8;
    $7 = HEAP32[$6 >> 2] | 0;
    _mrb_fixnum_value1793($agg_tmp5, $7);
    _mrb_raisef($mrb, $call, 97212, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp5 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp5 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp5 + 8 >> 2] | 0, tempInt) | 0);
    label = 4;
    break;
   case 4:
    $8 = HEAP32[$p3 >> 2] | 0;
    $ptr11 = $8 + 20 | 0;
    $9 = $ptr11;
    $10 = HEAP32[$9 >> 2] | 0;
    $ptr14 = $members_sroa_0_0_copyload + 20 | 0;
    $11 = $ptr14;
    $12 = HEAP32[$11 >> 2] | 0;
    $i_0 = 0;
    label = 5;
    break;
   case 5:
    $cmp15 = ($i_0 | 0) < ($1 | 0);
    if ($cmp15) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    $value16 = $12 + ($i_0 * 12 & -1) | 0;
    $sym = $value16;
    $13 = HEAP16[$sym >> 1] | 0;
    $cmp18 = $13 << 16 >> 16 == $id << 16 >> 16;
    $inc = $i_0 + 1 | 0;
    if ($cmp18) {
      label = 7;
      break;
    } else {
      $i_0 = $inc;
      label = 5;
      break;
    }
   case 7:
    $arrayidx21 = $10 + ($i_0 * 12 & -1) | 0;
    $14 = $arrayidx21;
    $15 = $val;
    HEAP32[$14 >> 2] = HEAP32[$15 >> 2] | 0;
    HEAP32[$14 + 4 >> 2] = HEAP32[$15 + 4 >> 2] | 0;
    HEAP32[$14 + 8 >> 2] = HEAP32[$15 + 8 >> 2] | 0;
    $16 = $agg_result;
    HEAP32[$16 >> 2] = HEAP32[$15 >> 2] | 0;
    HEAP32[$16 + 4 >> 2] = HEAP32[$15 + 4 >> 2] | 0;
    HEAP32[$16 + 8 >> 2] = HEAP32[$15 + 8 >> 2] | 0;
    label = 9;
    break;
   case 8:
    $call23 = _mrb_class_get($mrb, 95256) | 0;
    _mrb_sym2str($agg_tmp24, $mrb, $id);
    _mrb_raisef($mrb, $call23, 110796, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp24 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp24 + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp24 + 8 >> 2] | 0, tempInt) | 0);
    $17 = $agg_result;
    $18 = $val;
    HEAP32[$17 >> 2] = HEAP32[$18 >> 2] | 0;
    HEAP32[$17 + 4 >> 2] = HEAP32[$18 + 4 >> 2] | 0;
    HEAP32[$17 + 8 >> 2] = HEAP32[$18 + 8 >> 2] | 0;
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_mruby_struct_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $call = 0;
  $call = _mrb_define_class($mrb, 99832, HEAP32[$mrb + 44 >> 2] | 0) | 0;
  _mrb_define_class_method($mrb, $call, 108644, 626, 0);
  _mrb_define_method($mrb, $call, 108288, 826, 0);
  _mrb_define_method($mrb, $call, 108056, 8, 0);
  _mrb_define_method($mrb, $call, 107612, 762, 0);
  _mrb_define_method($mrb, $call, 107152, 856, 0);
  _mrb_define_method($mrb, $call, 106604, 278, 0);
  _mrb_define_method($mrb, $call, 106252, 30, 0);
  _mrb_define_method($mrb, $call, 105752, 444, 0);
  _mrb_define_alias($mrb, $call, 105496, 105752);
  _mrb_define_method($mrb, $call, 105080, 254, 0);
  return;
}
function _mrb_struct_s_def($agg_result, $mrb, $klass) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $klass = $klass | 0;
  var $name = 0, $rest = 0, $b = 0, $st = 0, $argv = 0, $argc = 0, $tmp2 = 0, $tmp18 = 0, $tmp19 = 0, $tmp33 = 0, $tmp36 = 0, $tmp48 = 0, $tmp60 = 0, $0 = 0, $1 = 0, $call = 0, $2 = 0, $cmp = 0, $3 = 0, $cmp3 = 0, $4 = 0, $5 = 0, $6 = 0, $cmp5 = 0, $7 = 0, $arrayidx7 = 0, $8 = 0, $tt = 0, $9 = 0, $cmp9 = 0, $tt11 = 0, $10 = 0, $cmp12 = 0, $i13 = 0, $11 = 0, $tobool = 0, $_pr = 0, $12 = 0, $cmp16 = 0, $13 = 0, $14 = 0, $arrayidx22 = 0, $15 = 0, $sub = 0, $tt23 = 0, $16 = 0, $cmp24 = 0, $i27 = 0, $17 = 0, $tobool28 = 0, $_pr12 = 0, $18 = 0, $cmp31 = 0, $19 = 0, $20 = 0, $argcnt_0 = 0, $pargv_0 = 0, $21 = 0, $p = 0, $22 = 0, $len13 = 0, $23 = 0, $24 = 0, $cmp3914 = 0, $25 = 0, $26 = 0, $i_015 = 0, $ptr = 0, $27 = 0, $28 = 0, $arrayidx42 = 0, $call43 = 0, $29 = 0, $ptr46 = 0, $30 = 0, $31 = 0, $arrayidx47 = 0, $32 = 0, $inc49 = 0, $33 = 0, $len = 0, $34 = 0, $35 = 0, $cmp39 = 0, $call51 = 0, $36 = 0, $tt53 = 0, $37 = 0, $cmp54 = 0, $i57 = 0, $38 = 0, $tobool58 = 0, $39 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 140 | 0;
  tempParam = $klass;
  $klass = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$klass >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$klass + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$klass + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $name = __stackBase__ | 0;
    $rest = __stackBase__ + 12 | 0;
    $b = __stackBase__ + 24 | 0;
    $st = __stackBase__ + 36 | 0;
    $argv = __stackBase__ + 48 | 0;
    $argc = __stackBase__ + 52 | 0;
    $tmp2 = __stackBase__ + 56 | 0;
    $tmp18 = __stackBase__ + 68 | 0;
    $tmp19 = __stackBase__ + 80 | 0;
    $tmp33 = __stackBase__ + 92 | 0;
    $tmp36 = __stackBase__ + 104 | 0;
    $tmp48 = __stackBase__ + 116 | 0;
    $tmp60 = __stackBase__ + 128 | 0;
    _mrb_nil_value1795($name);
    $0 = $name;
    _mrb_nil_value1795($rest);
    $1 = $rest;
    $call = _mrb_get_args($mrb, 102116, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $argv, HEAP32[tempInt + 4 >> 2] = $argc, HEAP32[tempInt + 8 >> 2] = $b, tempInt) | 0) | 0;
    $2 = HEAP32[$argc >> 2] | 0;
    $cmp = ($2 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_ary_new($tmp2, $mrb);
    $3 = $tmp2;
    HEAP32[$1 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    label = 23;
    break;
   case 4:
    $cmp3 = ($2 | 0) > 0;
    if ($cmp3) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $4 = HEAP32[$argv >> 2] | 0;
    $5 = $4;
    HEAP32[$0 >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    label = 6;
    break;
   case 6:
    $6 = HEAP32[$argc >> 2] | 0;
    $cmp5 = ($6 | 0) > 1;
    if ($cmp5) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $7 = HEAP32[$argv >> 2] | 0;
    $arrayidx7 = $7 + 12 | 0;
    $8 = $arrayidx7;
    HEAP32[$1 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    label = 8;
    break;
   case 8:
    $tt = $rest + 8 | 0;
    $9 = HEAP32[$tt >> 2] | 0;
    $cmp9 = ($9 | 0) == 14;
    if ($cmp9) {
      label = 9;
      break;
    } else {
      label = 14;
      break;
    }
   case 9:
    $tt11 = $name + 8 | 0;
    $10 = HEAP32[$tt11 >> 2] | 0;
    $cmp12 = ($10 | 0) == 0;
    if ($cmp12) {
      label = 10;
      break;
    } else {
      $12 = $10;
      label = 12;
      break;
    }
   case 10:
    $i13 = $name;
    $11 = HEAP32[$i13 >> 2] | 0;
    $tobool = ($11 | 0) == 0;
    if ($tobool) {
      label = 20;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $_pr = HEAP32[$tt11 >> 2] | 0;
    $12 = $_pr;
    label = 12;
    break;
   case 12:
    $cmp16 = ($12 | 0) == 4;
    if ($cmp16) {
      label = 13;
      break;
    } else {
      label = 20;
      break;
    }
   case 13:
    _mrb_ary_unshift($tmp18, $mrb, $rest, $name);
    _mrb_nil_value1795($tmp19);
    $13 = $tmp19;
    HEAP32[$0 >> 2] = HEAP32[$13 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$13 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$13 + 8 >> 2] | 0;
    label = 20;
    break;
   case 14:
    $14 = HEAP32[$argv >> 2] | 0;
    $arrayidx22 = $14 + 12 | 0;
    $15 = HEAP32[$argc >> 2] | 0;
    $sub = $15 - 1 | 0;
    $tt23 = $name + 8 | 0;
    $16 = HEAP32[$tt23 >> 2] | 0;
    $cmp24 = ($16 | 0) == 0;
    if ($cmp24) {
      label = 15;
      break;
    } else {
      $18 = $16;
      label = 17;
      break;
    }
   case 15:
    $i27 = $name;
    $17 = HEAP32[$i27 >> 2] | 0;
    $tobool28 = ($17 | 0) == 0;
    if ($tobool28) {
      $pargv_0 = $arrayidx22;
      $argcnt_0 = $sub;
      label = 19;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $_pr12 = HEAP32[$tt23 >> 2] | 0;
    $18 = $_pr12;
    label = 17;
    break;
   case 17:
    $cmp31 = ($18 | 0) == 4;
    if ($cmp31) {
      label = 18;
      break;
    } else {
      $pargv_0 = $arrayidx22;
      $argcnt_0 = $sub;
      label = 19;
      break;
    }
   case 18:
    _mrb_nil_value1795($tmp33);
    $19 = $tmp33;
    HEAP32[$0 >> 2] = HEAP32[$19 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$19 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$19 + 8 >> 2] | 0;
    $20 = HEAP32[$argv >> 2] | 0;
    $pargv_0 = $20;
    $argcnt_0 = $15;
    label = 19;
    break;
   case 19:
    _mrb_ary_new_from_values($tmp36, $mrb, $argcnt_0, $pargv_0);
    $21 = $tmp36;
    HEAP32[$1 >> 2] = HEAP32[$21 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$21 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$21 + 8 >> 2] | 0;
    label = 20;
    break;
   case 20:
    $p = $rest;
    $22 = HEAP32[$p >> 2] | 0;
    $len13 = $22 + 12 | 0;
    $23 = $len13;
    $24 = HEAP32[$23 >> 2] | 0;
    $cmp3914 = ($24 | 0) > 0;
    if ($cmp3914) {
      label = 21;
      break;
    } else {
      label = 23;
      break;
    }
   case 21:
    $25 = $tmp48;
    $i_015 = 0;
    $26 = $22;
    label = 22;
    break;
   case 22:
    $ptr = $26 + 20 | 0;
    $27 = $ptr;
    $28 = HEAP32[$27 >> 2] | 0;
    $arrayidx42 = $28 + ($i_015 * 12 & -1) | 0;
    $call43 = _mrb_obj_to_sym($mrb, $arrayidx42) | 0;
    $29 = HEAP32[$p >> 2] | 0;
    $ptr46 = $29 + 20 | 0;
    $30 = $ptr46;
    $31 = HEAP32[$30 >> 2] | 0;
    $arrayidx47 = $31 + ($i_015 * 12 & -1) | 0;
    _mrb_symbol_value1794($tmp48, $call43);
    $32 = $arrayidx47;
    HEAP32[$32 >> 2] = HEAP32[$25 >> 2] | 0;
    HEAP32[$32 + 4 >> 2] = HEAP32[$25 + 4 >> 2] | 0;
    HEAP32[$32 + 8 >> 2] = HEAP32[$25 + 8 >> 2] | 0;
    $inc49 = $i_015 + 1 | 0;
    $33 = HEAP32[$p >> 2] | 0;
    $len = $33 + 12 | 0;
    $34 = $len;
    $35 = HEAP32[$34 >> 2] | 0;
    $cmp39 = ($inc49 | 0) < ($35 | 0);
    if ($cmp39) {
      $i_015 = $inc49;
      $26 = $33;
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $call51 = _struct_class($mrb) | 0;
    _make_struct($st, $mrb, $name, $rest, $call51);
    $36 = $st;
    $tt53 = $b + 8 | 0;
    $37 = HEAP32[$tt53 >> 2] | 0;
    $cmp54 = ($37 | 0) == 0;
    if ($cmp54) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    $i57 = $b;
    $38 = HEAP32[$i57 >> 2] | 0;
    $tobool58 = ($38 | 0) == 0;
    if ($tobool58) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    _mrb_funcall($tmp60, $mrb, $b, 101896, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $st, tempInt) | 0);
    label = 26;
    break;
   case 26:
    $39 = $agg_result;
    HEAP32[$39 >> 2] = HEAP32[$36 >> 2] | 0;
    HEAP32[$39 + 4 >> 2] = HEAP32[$36 + 4 >> 2] | 0;
    HEAP32[$39 + 8 >> 2] = HEAP32[$36 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_struct_members_m($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $agg_tmp = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $agg_tmp = __stackBase__ | 0;
  _mrb_obj_value1792($agg_tmp, _mrb_obj_class($mrb, $obj) | 0);
  _mrb_struct_s_members_m($agg_result, $mrb, $agg_tmp);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_initialize_m($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $argv = 0, $argc = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $argv = __stackBase__ | 0;
  $argc = __stackBase__ + 4 | 0;
  _mrb_get_args($mrb, 102308, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $argv, HEAP32[tempInt + 4 >> 2] = $argc, tempInt) | 0);
  _mrb_struct_initialize_withArg($agg_result, $mrb, HEAP32[$argc >> 2] | 0, HEAP32[$argv >> 2] | 0, $self);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_inspect($agg_result, $mrb, $s) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $s = $s | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $s;
  $s = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$s >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$s + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$s + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _inspect_struct($agg_result, $mrb, $s);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_equal($agg_result, $mrb, $s) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $s = $s | 0;
  var $s2 = 0, $call = 0, $call1 = 0, $tobool = 0, $call2 = 0, $call3 = 0, $call4 = 0, $tobool5 = 0, $call6 = 0, $call7 = 0, $cmp = 0, $p = 0, $0 = 0, $len10 = 0, $1 = 0, $2 = 0, $p12 = 0, $3 = 0, $len13 = 0, $4 = 0, $5 = 0, $cmp14 = 0, $ptr19 = 0, $6 = 0, $7 = 0, $ptr22 = 0, $8 = 0, $9 = 0, $i_0 = 0, $cmp26 = 0, $arrayidx = 0, $arrayidx27 = 0, $call28 = 0, $tobool29 = 0, $inc = 0, $equal_p_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $s;
  $s = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$s >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$s + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$s + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $s2 = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 93348, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $s2, tempInt) | 0) | 0;
    $call1 = _mrb_obj_equal(0, $s, $s2) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $equal_p_0 = 1;
      label = 10;
      break;
    }
   case 3:
    $call2 = _mrb_obj_class($mrb, $s) | 0;
    $call3 = _mrb_class_name($mrb, $call2) | 0;
    $call4 = _strcmp($call3 | 0, 99832) | 0;
    $tobool5 = ($call4 | 0) == 0;
    if ($tobool5) {
      $equal_p_0 = 0;
      label = 10;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $call6 = _mrb_obj_class($mrb, $s) | 0;
    $call7 = _mrb_obj_class($mrb, $s2) | 0;
    $cmp = ($call6 | 0) == ($call7 | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      $equal_p_0 = 0;
      label = 10;
      break;
    }
   case 5:
    $p = $s;
    $0 = HEAP32[$p >> 2] | 0;
    $len10 = $0 + 12 | 0;
    $1 = $len10;
    $2 = HEAP32[$1 >> 2] | 0;
    $p12 = $s2;
    $3 = HEAP32[$p12 >> 2] | 0;
    $len13 = $3 + 12 | 0;
    $4 = $len13;
    $5 = HEAP32[$4 >> 2] | 0;
    $cmp14 = ($2 | 0) == ($5 | 0);
    if ($cmp14) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _mrb_bug($mrb, 104660, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
   case 7:
    $ptr19 = $0 + 20 | 0;
    $6 = $ptr19;
    $7 = HEAP32[$6 >> 2] | 0;
    $ptr22 = $3 + 20 | 0;
    $8 = $ptr22;
    $9 = HEAP32[$8 >> 2] | 0;
    $i_0 = 0;
    label = 8;
    break;
   case 8:
    $cmp26 = ($i_0 | 0) < ($2 | 0);
    if ($cmp26) {
      label = 9;
      break;
    } else {
      $equal_p_0 = 1;
      label = 10;
      break;
    }
   case 9:
    $arrayidx = $7 + ($i_0 * 12 & -1) | 0;
    $arrayidx27 = $9 + ($i_0 * 12 & -1) | 0;
    $call28 = _mrb_equal($mrb, $arrayidx, $arrayidx27) | 0;
    $tobool29 = ($call28 | 0) == 0;
    $inc = $i_0 + 1 | 0;
    if ($tobool29) {
      $equal_p_0 = 0;
      label = 10;
      break;
    } else {
      $i_0 = $inc;
      label = 8;
      break;
    }
   case 10:
    _mrb_bool_value1800($agg_result, $equal_p_0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_struct_eql($agg_result, $mrb, $s) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $s = $s | 0;
  var $s2 = 0, $call = 0, $call1 = 0, $tobool = 0, $call2 = 0, $call3 = 0, $call4 = 0, $tobool5 = 0, $call6 = 0, $call7 = 0, $cmp = 0, $p = 0, $0 = 0, $len10 = 0, $1 = 0, $2 = 0, $p12 = 0, $3 = 0, $len13 = 0, $4 = 0, $5 = 0, $cmp14 = 0, $ptr19 = 0, $6 = 0, $7 = 0, $ptr22 = 0, $8 = 0, $9 = 0, $i_0 = 0, $cmp26 = 0, $arrayidx = 0, $arrayidx27 = 0, $call28 = 0, $tobool29 = 0, $inc = 0, $eql_p_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $s;
  $s = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$s >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$s + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$s + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $s2 = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 93348, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $s2, tempInt) | 0) | 0;
    $call1 = _mrb_obj_equal(0, $s, $s2) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $eql_p_0 = 1;
      label = 10;
      break;
    }
   case 3:
    $call2 = _mrb_obj_class($mrb, $s2) | 0;
    $call3 = _mrb_class_name($mrb, $call2) | 0;
    $call4 = _strcmp($call3 | 0, 99832) | 0;
    $tobool5 = ($call4 | 0) == 0;
    if ($tobool5) {
      label = 4;
      break;
    } else {
      $eql_p_0 = 0;
      label = 10;
      break;
    }
   case 4:
    $call6 = _mrb_obj_class($mrb, $s) | 0;
    $call7 = _mrb_obj_class($mrb, $s2) | 0;
    $cmp = ($call6 | 0) == ($call7 | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      $eql_p_0 = 0;
      label = 10;
      break;
    }
   case 5:
    $p = $s;
    $0 = HEAP32[$p >> 2] | 0;
    $len10 = $0 + 12 | 0;
    $1 = $len10;
    $2 = HEAP32[$1 >> 2] | 0;
    $p12 = $s2;
    $3 = HEAP32[$p12 >> 2] | 0;
    $len13 = $3 + 12 | 0;
    $4 = $len13;
    $5 = HEAP32[$4 >> 2] | 0;
    $cmp14 = ($2 | 0) == ($5 | 0);
    if ($cmp14) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _mrb_bug($mrb, 104660, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
   case 7:
    $ptr19 = $0 + 20 | 0;
    $6 = $ptr19;
    $7 = HEAP32[$6 >> 2] | 0;
    $ptr22 = $3 + 20 | 0;
    $8 = $ptr22;
    $9 = HEAP32[$8 >> 2] | 0;
    $i_0 = 0;
    label = 8;
    break;
   case 8:
    $cmp26 = ($i_0 | 0) < ($2 | 0);
    if ($cmp26) {
      label = 9;
      break;
    } else {
      $eql_p_0 = 1;
      label = 10;
      break;
    }
   case 9:
    $arrayidx = $7 + ($i_0 * 12 & -1) | 0;
    $arrayidx27 = $9 + ($i_0 * 12 & -1) | 0;
    $call28 = _mrb_eql($mrb, $arrayidx, $arrayidx27) | 0;
    $tobool29 = ($call28 | 0) == 0;
    $inc = $i_0 + 1 | 0;
    if ($tobool29) {
      $eql_p_0 = 0;
      label = 10;
      break;
    } else {
      $i_0 = $inc;
      label = 8;
      break;
    }
   case 10:
    _mrb_bool_value1800($agg_result, $eql_p_0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_obj_value1804($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _inspect_struct($agg_result, $mrb, $s) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $s = $s | 0;
  var $str = 0, $agg_tmp = 0, $tmp = 0, $tmp5 = 0, $slot = 0, $tmp17 = 0, $tmp20 = 0, $len31 = 0, $agg_tmp33 = 0, $tmp34 = 0, $agg_tmp36 = 0, $tmp37 = 0, $tmp39 = 0, $agg_tmp40 = 0, $tmp42 = 0, $tmp43 = 0, $call = 0, $call1 = 0, $tobool = 0, $members_sroa_0_0__cast = 0, $members_sroa_0_0_copyload = 0, $ptr6 = 0, $0 = 0, $1 = 0, $p8 = 0, $2 = 0, $ptr9 = 0, $3 = 0, $4 = 0, $len12 = 0, $5 = 0, $6 = 0, $cmp1 = 0, $7 = 0, $sym = 0, $i_02 = 0, $cmp15 = 0, $arrayidx = 0, $8 = 0, $9 = 0, $call24 = 0, $tobool25 = 0, $call26 = 0, $tobool27 = 0, $call32 = 0, $10 = 0, $arrayidx41 = 0, $inc = 0, $exitcond = 0, $11 = 0, $12 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 184 | 0;
  tempParam = $s;
  $s = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$s >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$s + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$s + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $str = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $tmp = __stackBase__ + 24 | 0;
    $tmp5 = __stackBase__ + 36 | 0;
    $slot = __stackBase__ + 48 | 0;
    $tmp17 = __stackBase__ + 60 | 0;
    $tmp20 = __stackBase__ + 72 | 0;
    $len31 = __stackBase__ + 84 | 0;
    $agg_tmp33 = __stackBase__ + 88 | 0;
    $tmp34 = __stackBase__ + 100 | 0;
    $agg_tmp36 = __stackBase__ + 112 | 0;
    $tmp37 = __stackBase__ + 124 | 0;
    $tmp39 = __stackBase__ + 136 | 0;
    $agg_tmp40 = __stackBase__ + 148 | 0;
    $tmp42 = __stackBase__ + 160 | 0;
    $tmp43 = __stackBase__ + 172 | 0;
    $call = _mrb_obj_class($mrb, $s) | 0;
    $call1 = _mrb_class_name($mrb, $call) | 0;
    _mrb_str_new($str, $mrb, 104276, 9);
    $tobool = ($call1 | 0) != 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_str_new_cstr($agg_tmp, $mrb, $call1);
    _mrb_str_append($tmp, $mrb, $str, $agg_tmp);
    label = 4;
    break;
   case 4:
    _mrb_struct_members($tmp5, $mrb, $s);
    $members_sroa_0_0__cast = $tmp5;
    $members_sroa_0_0_copyload = HEAP32[$members_sroa_0_0__cast >> 2] | 0;
    $ptr6 = $members_sroa_0_0_copyload + 20 | 0;
    $0 = $ptr6;
    $1 = HEAP32[$0 >> 2] | 0;
    $p8 = $s;
    $2 = HEAP32[$p8 >> 2] | 0;
    $ptr9 = $2 + 20 | 0;
    $3 = $ptr9;
    $4 = HEAP32[$3 >> 2] | 0;
    $len12 = $2 + 12 | 0;
    $5 = $len12;
    $6 = HEAP32[$5 >> 2] | 0;
    $cmp1 = ($6 | 0) > 0;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 15;
      break;
    }
   case 5:
    $7 = $slot;
    $sym = $slot;
    $i_02 = 0;
    label = 6;
    break;
   case 6:
    $cmp15 = ($i_02 | 0) > 0;
    if ($cmp15) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _mrb_str_cat21801($tmp17, $mrb, $str, 103692);
    label = 10;
    break;
   case 8:
    if ($tobool) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _mrb_str_cat21801($tmp20, $mrb, $str, 103424);
    label = 10;
    break;
   case 10:
    $arrayidx = $1 + ($i_02 * 12 & -1) | 0;
    $8 = $arrayidx;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2] | 0;
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
    $9 = HEAP16[$sym >> 1] | 0;
    $call24 = _mrb_is_local_id($9) | 0;
    $tobool25 = ($call24 | 0) == 0;
    if ($tobool25) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $call26 = _mrb_is_const_id($9) | 0;
    $tobool27 = ($call26 | 0) == 0;
    if ($tobool27) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $call32 = _mrb_sym2name_len($mrb, $9, $len31) | 0;
    $10 = HEAP32[$len31 >> 2] | 0;
    _mrb_str_new($agg_tmp33, $mrb, $call32, $10);
    _mrb_str_append($tmp34, $mrb, $str, $agg_tmp33);
    label = 14;
    break;
   case 13:
    _mrb_inspect($agg_tmp36, $mrb, $slot);
    _mrb_str_append($tmp37, $mrb, $str, $agg_tmp36);
    label = 14;
    break;
   case 14:
    _mrb_str_cat21801($tmp39, $mrb, $str, 103152);
    $arrayidx41 = $4 + ($i_02 * 12 & -1) | 0;
    _mrb_inspect($agg_tmp40, $mrb, $arrayidx41);
    _mrb_str_append($tmp42, $mrb, $str, $agg_tmp40);
    $inc = $i_02 + 1 | 0;
    $exitcond = ($inc | 0) == ($6 | 0);
    if ($exitcond) {
      label = 15;
      break;
    } else {
      $i_02 = $inc;
      label = 6;
      break;
    }
   case 15:
    _mrb_str_cat21801($tmp43, $mrb, $str, 102864);
    $11 = $agg_result;
    $12 = $str;
    HEAP32[$11 >> 2] = HEAP32[$12 >> 2] | 0;
    HEAP32[$11 + 4 >> 2] = HEAP32[$12 + 4 >> 2] | 0;
    HEAP32[$11 + 8 >> 2] = HEAP32[$12 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_str_cat21801($agg_result, $mrb, $str, $ptr) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $str = $str | 0;
  $ptr = $ptr | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $str;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$str >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$str + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$str + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_str_cat_cstr($agg_result, $mrb, $str, $ptr);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_s_members_m($agg_result, $mrb, $klass) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $klass = $klass | 0;
  var $ary = 0, $tmp = 0, $members_sroa_0_0__cast = 0, $members_sroa_0_0_copyload = 0, $len = 0, $0 = 0, $1 = 0, $2 = 0, $ptr = 0, $3 = 0, $4 = 0, $5 = 0, $add_ptr = 0, $cmp8 = 0, $p_09 = 0, $incdec_ptr = 0, $cmp = 0, $6 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $klass;
  $klass = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$klass >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$klass + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$klass + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ary = __stackBase__ | 0;
    $tmp = __stackBase__ + 12 | 0;
    _mrb_struct_s_members($tmp, $mrb, $klass);
    $members_sroa_0_0__cast = $tmp;
    $members_sroa_0_0_copyload = HEAP32[$members_sroa_0_0__cast >> 2] | 0;
    $len = $members_sroa_0_0_copyload + 12 | 0;
    $0 = $len;
    $1 = HEAP32[$0 >> 2] | 0;
    _mrb_ary_new_capa($ary, $mrb, $1);
    $2 = $ary;
    $ptr = $members_sroa_0_0_copyload + 20 | 0;
    $3 = $ptr;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = HEAP32[$0 >> 2] | 0;
    $add_ptr = $4 + ($5 * 12 & -1) | 0;
    $cmp8 = ($5 | 0) > 0;
    if ($cmp8) {
      $p_09 = $4;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_ary_push($mrb, $ary, $p_09);
    $incdec_ptr = $p_09 + 12 | 0;
    $cmp = $incdec_ptr >>> 0 < $add_ptr >>> 0;
    if ($cmp) {
      $p_09 = $incdec_ptr;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $6 = $agg_result;
    HEAP32[$6 >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[$6 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _num_members($mrb, $klass) {
  $mrb = $mrb | 0;
  $klass = $klass | 0;
  var $agg_tmp = 0, $tmp = 0, $0 = 0, $call = 0, $members_sroa_0_0__cast = 0, $members_sroa_0_0_copyload = 0, $members_sroa_2_8__idx1 = 0, $members_sroa_2_8_copyload = 0, $cmp = 0, $call1 = 0, $len = 0, $1 = 0, $2 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $tmp = __stackBase__ + 12 | 0;
    $0 = $klass | 0;
    _mrb_obj_value1792($agg_tmp, $0);
    $call = _mrb_intern2($mrb, 108e3, 11) | 0;
    _struct_ivar_get($tmp, $mrb, $agg_tmp, $call);
    $members_sroa_0_0__cast = $tmp;
    $members_sroa_0_0_copyload = HEAP32[$members_sroa_0_0__cast >> 2] | 0;
    $members_sroa_2_8__idx1 = $tmp + 8 | 0;
    $members_sroa_2_8_copyload = HEAP32[$members_sroa_2_8__idx1 >> 2] | 0;
    $cmp = ($members_sroa_2_8_copyload | 0) == 14;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $call1 = _mrb_class_get($mrb, 110440) | 0;
    _mrb_raise($mrb, $call1, 101184);
    label = 4;
    break;
   case 4:
    $len = $members_sroa_0_0_copyload + 12 | 0;
    $1 = $len;
    $2 = HEAP32[$1 >> 2] | 0;
    STACKTOP = __stackBase__;
    return $2 | 0;
  }
  return 0;
}
function _mrb_struct_ref($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_struct_getmember($agg_result, $mrb, $obj, HEAP16[HEAP32[(HEAP32[$mrb + 8 >> 2] | 0) + 16 >> 2] >> 1] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_set_m($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $val = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $val = __stackBase__ | 0;
  _mrb_get_args($mrb, 93348, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $val, tempInt) | 0);
  _mrb_struct_set($agg_result, $mrb, $obj, $val);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_set($agg_result, $mrb, $obj, $val) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $val = $val | 0;
  var $len = 0, $tmp = 0, $agg_tmp = 0, $c = 0, $0 = 0, $ci = 0, $1 = 0, $mid1 = 0, $2 = 0, $call = 0, $3 = 0, $sub = 0, $call2 = 0, $members_sroa_0_0__cast = 0, $members_sroa_0_0_copyload = 0, $ptr3 = 0, $4 = 0, $5 = 0, $len6 = 0, $6 = 0, $7 = 0, $p8 = 0, $8 = 0, $ptr9 = 0, $9 = 0, $10 = 0, $i_0 = 0, $cmp = 0, $arrayidx = 0, $slot_sroa_0_0__cast = 0, $slot_sroa_0_0_copyload = 0, $cmp12 = 0, $inc = 0, $arrayidx14 = 0, $11 = 0, $12 = 0, $13 = 0, $call15 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  tempParam = $val;
  $val = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$val >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$val + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$val + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $len = __stackBase__ | 0;
    $tmp = __stackBase__ + 4 | 0;
    $agg_tmp = __stackBase__ + 16 | 0;
    $c = $mrb + 8 | 0;
    $0 = HEAP32[$c >> 2] | 0;
    $ci = $0 + 16 | 0;
    $1 = HEAP32[$ci >> 2] | 0;
    $mid1 = $1 | 0;
    $2 = HEAP16[$mid1 >> 1] | 0;
    $call = _mrb_sym2name_len($mrb, $2, $len) | 0;
    $3 = HEAP32[$len >> 2] | 0;
    $sub = $3 - 1 | 0;
    $call2 = _mrb_intern2($mrb, $call, $sub) | 0;
    _mrb_struct_members($tmp, $mrb, $obj);
    $members_sroa_0_0__cast = $tmp;
    $members_sroa_0_0_copyload = HEAP32[$members_sroa_0_0__cast >> 2] | 0;
    $ptr3 = $members_sroa_0_0_copyload + 20 | 0;
    $4 = $ptr3;
    $5 = HEAP32[$4 >> 2] | 0;
    $len6 = $members_sroa_0_0_copyload + 12 | 0;
    $6 = $len6;
    $7 = HEAP32[$6 >> 2] | 0;
    HEAP32[$len >> 2] = $7;
    $p8 = $obj;
    $8 = HEAP32[$p8 >> 2] | 0;
    $ptr9 = $8 + 20 | 0;
    $9 = $ptr9;
    $10 = HEAP32[$9 >> 2] | 0;
    $i_0 = 0;
    label = 3;
    break;
   case 3:
    $cmp = $i_0 >>> 0 < $7 >>> 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $arrayidx = $5 + ($i_0 * 12 & -1) | 0;
    $slot_sroa_0_0__cast = $arrayidx;
    $slot_sroa_0_0_copyload = HEAP16[$slot_sroa_0_0__cast >> 1] | 0;
    $cmp12 = $slot_sroa_0_0_copyload << 16 >> 16 == $call2 << 16 >> 16;
    $inc = $i_0 + 1 | 0;
    if ($cmp12) {
      label = 5;
      break;
    } else {
      $i_0 = $inc;
      label = 3;
      break;
    }
   case 5:
    $arrayidx14 = $10 + ($i_0 * 12 & -1) | 0;
    $11 = $arrayidx14;
    $12 = $val;
    HEAP32[$11 >> 2] = HEAP32[$12 >> 2] | 0;
    HEAP32[$11 + 4 >> 2] = HEAP32[$12 + 4 >> 2] | 0;
    HEAP32[$11 + 8 >> 2] = HEAP32[$12 + 8 >> 2] | 0;
    $13 = $agg_result;
    HEAP32[$13 >> 2] = HEAP32[$12 >> 2] | 0;
    HEAP32[$13 + 4 >> 2] = HEAP32[$12 + 4 >> 2] | 0;
    HEAP32[$13 + 8 >> 2] = HEAP32[$12 + 8 >> 2] | 0;
    label = 7;
    break;
   case 6:
    $call15 = _mrb_class_get($mrb, 95256) | 0;
    _mrb_sym2str($agg_tmp, $mrb, $call2);
    _mrb_raisef($mrb, $call15, 100356, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, tempInt) | 0);
    _mrb_nil_value1795($agg_result);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_struct_ref0($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $3 = 0, $4 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $3 = $agg_result;
  $4 = HEAP32[(HEAP32[$obj >> 2] | 0) + 20 >> 2] | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
  HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref1($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $3 = 0, $4 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $3 = $agg_result;
  $4 = (HEAP32[(HEAP32[$obj >> 2] | 0) + 20 >> 2] | 0) + 12 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
  HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref2($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $3 = 0, $4 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $3 = $agg_result;
  $4 = (HEAP32[(HEAP32[$obj >> 2] | 0) + 20 >> 2] | 0) + 24 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
  HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref3($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $3 = 0, $4 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $3 = $agg_result;
  $4 = (HEAP32[(HEAP32[$obj >> 2] | 0) + 20 >> 2] | 0) + 36 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
  HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref4($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $3 = 0, $4 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $3 = $agg_result;
  $4 = (HEAP32[(HEAP32[$obj >> 2] | 0) + 20 >> 2] | 0) + 48 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
  HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref5($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $3 = 0, $4 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $3 = $agg_result;
  $4 = (HEAP32[(HEAP32[$obj >> 2] | 0) + 20 >> 2] | 0) + 60 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
  HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref6($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $3 = 0, $4 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $3 = $agg_result;
  $4 = (HEAP32[(HEAP32[$obj >> 2] | 0) + 20 >> 2] | 0) + 72 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
  HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref7($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $3 = 0, $4 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $3 = $agg_result;
  $4 = (HEAP32[(HEAP32[$obj >> 2] | 0) + 20 >> 2] | 0) + 84 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
  HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref8($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $3 = 0, $4 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $3 = $agg_result;
  $4 = (HEAP32[(HEAP32[$obj >> 2] | 0) + 20 >> 2] | 0) + 96 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
  HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref9($agg_result, $mrb, $obj) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  var $3 = 0, $4 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $3 = $agg_result;
  $4 = (HEAP32[(HEAP32[$obj >> 2] | 0) + 20 >> 2] | 0) + 108 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
  HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mruby_symbol_ext_gem_init($mrb) {
  $mrb = $mrb | 0;
  _mrb_define_class_method($mrb, HEAP32[$mrb + 92 >> 2] | 0, 107788, 602, 0);
  return;
}
function _mrb_sym_all_symbols($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $ary = 0, $agg_tmp = 0, $name2sym = 0, $0 = 0, $size = 0, $1 = 0, $n_buckets = 0, $2 = 0, $cmp15 = 0, $e_flags = 0, $d_flags = 0, $vals = 0, $k_016 = 0, $div = 0, $3 = 0, $arrayidx = 0, $4 = 0, $rem = 0, $arrayidx1 = 0, $5 = 0, $and13 = 0, $tobool = 0, $6 = 0, $arrayidx4 = 0, $7 = 0, $and914 = 0, $tobool10 = 0, $8 = 0, $arrayidx11 = 0, $9 = 0, $inc = 0, $10 = 0, $cmp = 0, $11 = 0, $12 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ary = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $name2sym = $mrb + 568 | 0;
    $0 = HEAP32[$name2sym >> 2] | 0;
    $size = $0 + 4 | 0;
    $1 = HEAP32[$size >> 2] | 0;
    _mrb_ary_new_capa($ary, $mrb, $1);
    $n_buckets = $0 | 0;
    $2 = HEAP32[$n_buckets >> 2] | 0;
    $cmp15 = ($2 | 0) == 0;
    if ($cmp15) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $e_flags = $0 + 16 | 0;
    $d_flags = $0 + 20 | 0;
    $vals = $0 + 28 | 0;
    $k_016 = 0;
    label = 4;
    break;
   case 4:
    $div = $k_016 >>> 3;
    $3 = HEAP32[$e_flags >> 2] | 0;
    $arrayidx = $3 + $div | 0;
    $4 = HEAP8[$arrayidx] | 0;
    $rem = $k_016 & 7;
    $arrayidx1 = $rem + 112156 | 0;
    $5 = HEAP8[$arrayidx1] | 0;
    $and13 = $5 & $4;
    $tobool = $and13 << 24 >> 24 == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    $6 = HEAP32[$d_flags >> 2] | 0;
    $arrayidx4 = $6 + $div | 0;
    $7 = HEAP8[$arrayidx4] | 0;
    $and914 = $7 & $5;
    $tobool10 = $and914 << 24 >> 24 == 0;
    if ($tobool10) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $8 = HEAP32[$vals >> 2] | 0;
    $arrayidx11 = $8 + ($k_016 << 1) | 0;
    $9 = HEAP16[$arrayidx11 >> 1] | 0;
    _mrb_symbol_value1813($agg_tmp, $9);
    _mrb_ary_push($mrb, $ary, $agg_tmp);
    label = 7;
    break;
   case 7:
    $inc = $k_016 + 1 | 0;
    $10 = HEAP32[$n_buckets >> 2] | 0;
    $cmp = ($inc | 0) == ($10 | 0);
    if ($cmp) {
      label = 8;
      break;
    } else {
      $k_016 = $inc;
      label = 4;
      break;
    }
   case 8:
    $11 = $agg_result;
    $12 = $ary;
    HEAP32[$11 >> 2] = HEAP32[$12 >> 2] | 0;
    HEAP32[$11 + 4 >> 2] = HEAP32[$12 + 4 >> 2] | 0;
    HEAP32[$11 + 8 >> 2] = HEAP32[$12 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_symbol_value1813($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  var $v_sroa_1_2__raw_idx = 0, $v_sroa_1_2_idx = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP16[$agg_result >> 1] = $i;
  $v_sroa_1_2__raw_idx = $agg_result + 2 | 0;
  $v_sroa_1_2_idx = __stackBase__ | 0;
  HEAP16[$v_sroa_1_2__raw_idx >> 1] = HEAP16[$v_sroa_1_2_idx >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 2 >> 1] = HEAP16[$v_sroa_1_2_idx + 2 >> 1] | 0;
  HEAP16[$v_sroa_1_2__raw_idx + 4 >> 1] = HEAP16[$v_sroa_1_2_idx + 4 >> 1] | 0;
  HEAP32[$agg_result + 8 >> 2] = 4;
  STACKTOP = __stackBase__;
  return;
}
function _GENERATED_TMP_mrb_mruby_time_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $call = 0;
  $call = _mrb_gc_arena_save($mrb) | 0;
  _mrb_mruby_time_gem_init($mrb);
  _mrb_gc_arena_restore($mrb, $call);
  return;
}
function _mrb_mruby_time_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $call = 0, $1 = 0;
  $call = _mrb_define_class($mrb, 107604, HEAP32[$mrb + 44 >> 2] | 0) | 0;
  $1 = $call;
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -522241 | 43008;
  _mrb_include_module($mrb, $call, _mrb_class_get($mrb, 110424) | 0);
  _mrb_define_class_method($mrb, $call, 105932, 540, 0);
  _mrb_define_class_method($mrb, $call, 102500, 58, 0);
  _mrb_define_class_method($mrb, $call, 99820, 542, 0);
  _mrb_define_class_method($mrb, $call, 97196, 542, 0);
  _mrb_define_class_method($mrb, $call, 95252, 608, 0);
  _mrb_define_class_method($mrb, $call, 94164, 58, 0);
  _mrb_define_method($mrb, $call, 93344, 440, 0);
  _mrb_define_method($mrb, $call, 92556, 442, 0);
  _mrb_define_method($mrb, $call, 111240, 18, 0);
  _mrb_define_method($mrb, $call, 110792, 164, 0);
  _mrb_define_method($mrb, $call, 109964, 266, 0);
  _mrb_define_method($mrb, $call, 109504, 266, 0);
  _mrb_define_method($mrb, $call, 109100, 266, 0);
  _mrb_define_method($mrb, $call, 108636, 266, 0);
  _mrb_define_method($mrb, $call, 108284, 430, 0);
  _mrb_define_method($mrb, $call, 108048, 146, 0);
  _mrb_define_method($mrb, $call, 107596, 354, 0);
  _mrb_define_method($mrb, $call, 107128, 242, 0);
  _mrb_define_method($mrb, $call, 106596, 354, 0);
  _mrb_define_method($mrb, $call, 106244, 528, 0);
  _mrb_define_method($mrb, $call, 105744, 696, 0);
  _mrb_define_method($mrb, $call, 105488, 806, 0);
  _mrb_define_method($mrb, $call, 105068, 868, 0);
  _mrb_define_method($mrb, $call, 104652, 200, 0);
  _mrb_define_method($mrb, $call, 104272, 184, 0);
  _mrb_define_method($mrb, $call, 103996, 866, 0);
  _mrb_define_method($mrb, $call, 103684, 866, 0);
  _mrb_define_method($mrb, $call, 103416, 562, 0);
  _mrb_define_method($mrb, $call, 103140, 510, 0);
  _mrb_define_method($mrb, $call, 102852, 296, 0);
  _mrb_define_method($mrb, $call, 102296, 768, 0);
  _mrb_define_method($mrb, $call, 94164, 696, 0);
  _mrb_define_method($mrb, $call, 102104, 528, 0);
  _mrb_define_method($mrb, $call, 101884, 646, 0);
  _mrb_define_method($mrb, $call, 101672, 364, 0);
  _mrb_define_method($mrb, $call, 101436, 452, 0);
  _mrb_define_method($mrb, $call, 101176, 414, 0);
  _mrb_define_method($mrb, $call, 100972, 178, 0);
  _mrb_define_method($mrb, $call, 100660, 160, 0);
  return;
}
function _mrb_time_at($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $f = 0, $f2 = 0, $1 = 0, $2 = 0.0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $f = __stackBase__ | 0;
  $f2 = __stackBase__ + 8 | 0;
  HEAPF64[tempDoublePtr >> 3] = 0.0, HEAP32[$f2 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _mrb_get_args($mrb, 94032, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $f, HEAP32[tempInt + 4 >> 2] = $f2, tempInt) | 0);
  $1 = HEAP32[$self >> 2] | 0;
  $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  _mrb_time_make($agg_result, $mrb, $1, $2, (HEAP32[tempDoublePtr >> 2] = HEAP32[$f2 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f2 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]), 2);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_time_gm($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $ayear = 0, $amonth = 0, $aday = 0, $ahour = 0, $amin = 0, $asec = 0, $ausec = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $ayear = __stackBase__ | 0;
  $amonth = __stackBase__ + 4 | 0;
  $aday = __stackBase__ + 8 | 0;
  $ahour = __stackBase__ + 12 | 0;
  $amin = __stackBase__ + 16 | 0;
  $asec = __stackBase__ + 20 | 0;
  $ausec = __stackBase__ + 24 | 0;
  HEAP32[$ayear >> 2] = 0;
  HEAP32[$amonth >> 2] = 1;
  HEAP32[$aday >> 2] = 1;
  HEAP32[$ahour >> 2] = 0;
  HEAP32[$amin >> 2] = 0;
  HEAP32[$asec >> 2] = 0;
  HEAP32[$ausec >> 2] = 0;
  _mrb_get_args($mrb, 94092, (tempInt = STACKTOP, STACKTOP = STACKTOP + 28 | 0, HEAP32[tempInt >> 2] = $ayear, HEAP32[tempInt + 4 >> 2] = $amonth, HEAP32[tempInt + 8 >> 2] = $aday, HEAP32[tempInt + 12 >> 2] = $ahour, HEAP32[tempInt + 16 >> 2] = $amin, HEAP32[tempInt + 20 >> 2] = $asec, HEAP32[tempInt + 24 >> 2] = $ausec, tempInt) | 0);
  $1 = HEAP32[$self >> 2] | 0;
  _mrb_time_wrap($agg_result, $mrb, $1, _time_mktime($mrb, HEAP32[$ayear >> 2] | 0, HEAP32[$amonth >> 2] | 0, HEAP32[$aday >> 2] | 0, HEAP32[$ahour >> 2] | 0, HEAP32[$amin >> 2] | 0, HEAP32[$asec >> 2] | 0, HEAP32[$ausec >> 2] | 0, 1) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_time_local($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $ayear = 0, $amonth = 0, $aday = 0, $ahour = 0, $amin = 0, $asec = 0, $ausec = 0, $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $ayear = __stackBase__ | 0;
  $amonth = __stackBase__ + 4 | 0;
  $aday = __stackBase__ + 8 | 0;
  $ahour = __stackBase__ + 12 | 0;
  $amin = __stackBase__ + 16 | 0;
  $asec = __stackBase__ + 20 | 0;
  $ausec = __stackBase__ + 24 | 0;
  HEAP32[$ayear >> 2] = 0;
  HEAP32[$amonth >> 2] = 1;
  HEAP32[$aday >> 2] = 1;
  HEAP32[$ahour >> 2] = 0;
  HEAP32[$amin >> 2] = 0;
  HEAP32[$asec >> 2] = 0;
  HEAP32[$ausec >> 2] = 0;
  _mrb_get_args($mrb, 94092, (tempInt = STACKTOP, STACKTOP = STACKTOP + 28 | 0, HEAP32[tempInt >> 2] = $ayear, HEAP32[tempInt + 4 >> 2] = $amonth, HEAP32[tempInt + 8 >> 2] = $aday, HEAP32[tempInt + 12 >> 2] = $ahour, HEAP32[tempInt + 16 >> 2] = $amin, HEAP32[tempInt + 20 >> 2] = $asec, HEAP32[tempInt + 24 >> 2] = $ausec, tempInt) | 0);
  $1 = HEAP32[$self >> 2] | 0;
  _mrb_time_wrap($agg_result, $mrb, $1, _time_mktime($mrb, HEAP32[$ayear >> 2] | 0, HEAP32[$amonth >> 2] | 0, HEAP32[$aday >> 2] | 0, HEAP32[$ahour >> 2] | 0, HEAP32[$amin >> 2] | 0, HEAP32[$asec >> 2] | 0, HEAP32[$ausec >> 2] | 0, 2) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_time_now($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $1 = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  $1 = HEAP32[$self >> 2] | 0;
  _mrb_time_wrap($agg_result, $mrb, $1, _current_mrb_time($mrb) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_time_eq($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $other = 0, $call = 0, $call1 = 0, $call2 = 0, $tobool = 0, $tobool3 = 0, $or_cond = 0, $sec = 0, $0 = 0, $sec5 = 0, $1 = 0, $cmp = 0, $usec = 0, $2 = 0, $3 = 0, $usec6 = 0, $4 = 0, $5 = 0, $cmp7 = 0, $6 = 0, $conv = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $other = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 100352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $other, tempInt) | 0) | 0;
    $call1 = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $call2 = _mrb_data_get_ptr(0, $other, 78484) | 0;
    $tobool = ($call1 | 0) == 0;
    $tobool3 = ($call2 | 0) == 0;
    $or_cond = $tobool | $tobool3;
    if ($or_cond) {
      $6 = 0;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $sec = $call1;
    $0 = HEAP32[$sec >> 2] | 0;
    $sec5 = $call2;
    $1 = HEAP32[$sec5 >> 2] | 0;
    $cmp = ($0 | 0) == ($1 | 0);
    if ($cmp) {
      label = 4;
      break;
    } else {
      $6 = 0;
      label = 5;
      break;
    }
   case 4:
    $usec = $call1 + 4 | 0;
    $2 = $usec;
    $3 = HEAP32[$2 >> 2] | 0;
    $usec6 = $call2 + 4 | 0;
    $4 = $usec6;
    $5 = HEAP32[$4 >> 2] | 0;
    $cmp7 = ($3 | 0) == ($5 | 0);
    $6 = $cmp7;
    label = 5;
    break;
   case 5:
    $conv = $6 & 1;
    _mrb_bool_value1899($agg_result, $conv);
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_cmp($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $other = 0, $call = 0, $call1 = 0, $call2 = 0, $tobool = 0, $tobool3 = 0, $or_cond = 0, $sec = 0, $0 = 0, $sec4 = 0, $1 = 0, $cmp = 0, $cmp8 = 0, $usec = 0, $2 = 0, $3 = 0, $usec12 = 0, $4 = 0, $5 = 0, $cmp13 = 0, $cmp18 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $other = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 100352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $other, tempInt) | 0) | 0;
    $call1 = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $call2 = _mrb_data_get_ptr(0, $other, 78484) | 0;
    $tobool = ($call1 | 0) == 0;
    $tobool3 = ($call2 | 0) == 0;
    $or_cond = $tobool | $tobool3;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 13;
    break;
   case 4:
    $sec = $call1;
    $0 = HEAP32[$sec >> 2] | 0;
    $sec4 = $call2;
    $1 = HEAP32[$sec4 >> 2] | 0;
    $cmp = ($0 | 0) > ($1 | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _mrb_fixnum_value1897($agg_result, 1);
    label = 13;
    break;
   case 6:
    $cmp8 = ($0 | 0) < ($1 | 0);
    if ($cmp8) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _mrb_fixnum_value1897($agg_result, -1);
    label = 13;
    break;
   case 8:
    $usec = $call1 + 4 | 0;
    $2 = $usec;
    $3 = HEAP32[$2 >> 2] | 0;
    $usec12 = $call2 + 4 | 0;
    $4 = $usec12;
    $5 = HEAP32[$4 >> 2] | 0;
    $cmp13 = ($3 | 0) > ($5 | 0);
    if ($cmp13) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _mrb_fixnum_value1897($agg_result, 1);
    label = 13;
    break;
   case 10:
    $cmp18 = ($3 | 0) < ($5 | 0);
    if ($cmp18) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    _mrb_fixnum_value1897($agg_result, -1);
    label = 13;
    break;
   case 12:
    _mrb_fixnum_value1897($agg_result, 0);
    label = 13;
    break;
   case 13:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_plus($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $f = 0, $call = 0, $call1 = 0, $tobool = 0, $call2 = 0, $sec = 0, $0 = 0, $conv = 0.0, $1 = 0.0, $add = 0.0, $usec = 0, $2 = 0, $3 = 0, $conv3 = 0.0, $timezone = 0, $4 = 0, $5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $f = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 94404, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $f, tempInt) | 0) | 0;
    $call1 = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 5;
    break;
   case 4:
    $call2 = _mrb_obj_class($mrb, $self) | 0;
    $sec = $call1;
    $0 = HEAP32[$sec >> 2] | 0;
    $conv = +($0 | 0);
    $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $add = $conv + $1;
    $usec = $call1 + 4 | 0;
    $2 = $usec;
    $3 = HEAP32[$2 >> 2] | 0;
    $conv3 = +($3 | 0);
    $timezone = $call1 + 8 | 0;
    $4 = $timezone;
    $5 = HEAP32[$4 >> 2] | 0;
    _mrb_time_make($agg_result, $mrb, $call2, $add, $conv3, $5);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_minus($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $f = 0, $other = 0, $call = 0, $call1 = 0, $tobool = 0, $call2 = 0, $tobool3 = 0, $sec = 0, $0 = 0, $sec5 = 0, $1 = 0, $sub = 0, $conv = 0.0, $usec = 0, $2 = 0, $3 = 0, $usec6 = 0, $4 = 0, $5 = 0, $sub7 = 0, $conv8 = 0.0, $div = 0.0, $add = 0.0, $call9 = 0, $call10 = 0, $sec11 = 0, $6 = 0, $conv12 = 0.0, $7 = 0.0, $sub13 = 0.0, $usec14 = 0, $8 = 0, $9 = 0, $conv15 = 0.0, $timezone = 0, $10 = 0, $11 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $f = __stackBase__ | 0;
    $other = __stackBase__ + 8 | 0;
    $call = _mrb_get_args($mrb, 100352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $other, tempInt) | 0) | 0;
    $call1 = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 7;
    break;
   case 4:
    $call2 = _mrb_data_get_ptr(0, $other, 78484) | 0;
    $tobool3 = ($call2 | 0) == 0;
    if ($tobool3) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $sec = $call1;
    $0 = HEAP32[$sec >> 2] | 0;
    $sec5 = $call2;
    $1 = HEAP32[$sec5 >> 2] | 0;
    $sub = $0 - $1 | 0;
    $conv = +($sub | 0);
    $usec = $call1 + 4 | 0;
    $2 = $usec;
    $3 = HEAP32[$2 >> 2] | 0;
    $usec6 = $call2 + 4 | 0;
    $4 = $usec6;
    $5 = HEAP32[$4 >> 2] | 0;
    $sub7 = $3 - $5 | 0;
    $conv8 = +($sub7 | 0);
    $div = $conv8 / 1.0e6;
    $add = $conv + $div;
    HEAPF64[tempDoublePtr >> 3] = $add, HEAP32[$f >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    _mrb_float_value1898($agg_result, $add);
    label = 7;
    break;
   case 6:
    $call9 = _mrb_get_args($mrb, 94404, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $f, tempInt) | 0) | 0;
    $call10 = _mrb_obj_class($mrb, $self) | 0;
    $sec11 = $call1;
    $6 = HEAP32[$sec11 >> 2] | 0;
    $conv12 = +($6 | 0);
    $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $sub13 = $conv12 - $7;
    $usec14 = $call1 + 4 | 0;
    $8 = $usec14;
    $9 = HEAP32[$8 >> 2] | 0;
    $conv15 = +($9 | 0);
    $timezone = $call1 + 8 | 0;
    $10 = $timezone;
    $11 = HEAP32[$10 >> 2] | 0;
    _mrb_time_make($agg_result, $mrb, $call10, $sub13, $conv15, $11);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_asctime($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $buf = 0, $call = 0, $tobool = 0, $datetime = 0, $arraydecay = 0, $tm_wday = 0, $0 = 0, $1 = 0, $arrayidx = 0, $2 = 0, $tm_mon = 0, $3 = 0, $4 = 0, $arrayidx1 = 0, $5 = 0, $tm_mday = 0, $6 = 0, $7 = 0, $tm_hour = 0, $8 = 0, $9 = 0, $tm_min = 0, $10 = 0, $11 = 0, $tm_sec = 0, $12 = 0, $timezone = 0, $13 = 0, $14 = 0, $cmp = 0, $cond = 0, $tm_year = 0, $15 = 0, $16 = 0, $add = 0, $call2 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 256 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $buf = __stackBase__ | 0;
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 5;
    break;
   case 4:
    $datetime = $call + 12 | 0;
    $arraydecay = $buf | 0;
    $tm_wday = $call + 36 | 0;
    $0 = $tm_wday;
    $1 = HEAP32[$0 >> 2] | 0;
    $arrayidx = 58832 + ($1 << 2) | 0;
    $2 = HEAP32[$arrayidx >> 2] | 0;
    $tm_mon = $call + 28 | 0;
    $3 = $tm_mon;
    $4 = HEAP32[$3 >> 2] | 0;
    $arrayidx1 = 78952 + ($4 << 2) | 0;
    $5 = HEAP32[$arrayidx1 >> 2] | 0;
    $tm_mday = $call + 24 | 0;
    $6 = $tm_mday;
    $7 = HEAP32[$6 >> 2] | 0;
    $tm_hour = $call + 20 | 0;
    $8 = $tm_hour;
    $9 = HEAP32[$8 >> 2] | 0;
    $tm_min = $call + 16 | 0;
    $10 = $tm_min;
    $11 = HEAP32[$10 >> 2] | 0;
    $tm_sec = $datetime;
    $12 = HEAP32[$tm_sec >> 2] | 0;
    $timezone = $call + 8 | 0;
    $13 = $timezone;
    $14 = HEAP32[$13 >> 2] | 0;
    $cmp = ($14 | 0) == 1;
    $cond = $cmp ? 97864 : 97588;
    $tm_year = $call + 32 | 0;
    $15 = $tm_year;
    $16 = HEAP32[$15 >> 2] | 0;
    $add = $16 + 1900 | 0;
    $call2 = _snprintf($arraydecay | 0, 256, 98096, (tempInt = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempInt >> 2] = $2, HEAP32[tempInt + 4 >> 2] = $5, HEAP32[tempInt + 8 >> 2] = $7, HEAP32[tempInt + 12 >> 2] = $9, HEAP32[tempInt + 16 >> 2] = $11, HEAP32[tempInt + 20 >> 2] = $12, HEAP32[tempInt + 24 >> 2] = $cond, HEAP32[tempInt + 28 >> 2] = $add, tempInt) | 0) | 0;
    _mrb_str_new($agg_result, $mrb, $arraydecay, $call2);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_day($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $tm_mday = 0, $0 = 0, $1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 5;
    break;
   case 4:
    $tm_mday = $call + 24 | 0;
    $0 = $tm_mday;
    $1 = HEAP32[$0 >> 2] | 0;
    _mrb_fixnum_value1897($agg_result, $1);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_dstp($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $tm_isdst = 0, $0 = 0, $1 = 0, $conv = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 5;
    break;
   case 4:
    $tm_isdst = $call + 44 | 0;
    $0 = $tm_isdst;
    $1 = HEAP32[$0 >> 2] | 0;
    $conv = $1 & 255;
    _mrb_bool_value1899($agg_result, $conv);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_getutc($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $0 = 0, $1 = 0, $call1 = 0, $2 = 0, $timezone = 0, $3 = 0, $call3 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $0 = $agg_result;
    $1 = $self;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 5;
    break;
   case 4:
    $call1 = _mrb_malloc($mrb, 56) | 0;
    $2 = $call1;
    _memcpy($call1 | 0, $call | 0, 56);
    $timezone = $call1 + 8 | 0;
    $3 = $timezone;
    HEAP32[$3 >> 2] = 1;
    _mrb_time_update_datetime($2);
    $call3 = _mrb_obj_class($mrb, $self) | 0;
    _mrb_time_wrap($agg_result, $mrb, $call3, $2);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_getlocal($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $0 = 0, $1 = 0, $call1 = 0, $2 = 0, $timezone = 0, $3 = 0, $call3 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $0 = $agg_result;
    $1 = $self;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 5;
    break;
   case 4:
    $call1 = _mrb_malloc($mrb, 56) | 0;
    $2 = $call1;
    _memcpy($call1 | 0, $call | 0, 56);
    $timezone = $call1 + 8 | 0;
    $3 = $timezone;
    HEAP32[$3 >> 2] = 2;
    _mrb_time_update_datetime($2);
    $call3 = _mrb_obj_class($mrb, $self) | 0;
    _mrb_time_wrap($agg_result, $mrb, $call3, $2);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _GENERATED_TMP_mrb_mruby_symbol_ext_gem_init($mrb) {
  $mrb = $mrb | 0;
  var $tmp = 0, $agg_tmp = 0, $call = 0, $exc = 0, $0 = 0, $tobool = 0, $1 = 0, $2 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $agg_tmp = __stackBase__ + 12 | 0;
    $call = _mrb_gc_arena_save($mrb) | 0;
    _mrb_mruby_symbol_ext_gem_init($mrb);
    _mrb_load_irep($tmp, $mrb, 79624);
    $exc = $mrb + 16 | 0;
    $0 = HEAP32[$exc >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_print_backtrace($mrb);
    $1 = HEAP32[$exc >> 2] | 0;
    $2 = $1 | 0;
    _mrb_obj_value1804($agg_tmp, $2);
    _mrb_p($mrb, $agg_tmp);
    _exit(1);
   case 4:
    _mrb_gc_arena_restore($mrb, $call);
    STACKTOP = __stackBase__;
    return;
  }
}
function _is_leapyear($y) {
  $y = $y | 0;
  var $rem = 0, $cmp = 0, $rem1 = 0, $cmp2 = 0, $rem3 = 0, $cmp4 = 0, $0 = 0, $land_ext = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $rem = $y & 3;
    $cmp = ($rem | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      $0 = 0;
      label = 5;
      break;
    }
   case 3:
    $rem1 = ($y >>> 0) % 100;
    $cmp2 = ($rem1 | 0) == 0;
    if ($cmp2) {
      label = 4;
      break;
    } else {
      $0 = 1;
      label = 5;
      break;
    }
   case 4:
    $rem3 = ($y >>> 0) % 400;
    $cmp4 = ($rem3 | 0) == 0;
    $0 = $cmp4;
    label = 5;
    break;
   case 5:
    $land_ext = $0 & 1;
    return $land_ext | 0;
  }
  return 0;
}
function _mrb_nil_value1896($agg_result) {
  $agg_result = $agg_result | 0;
  HEAP32[$agg_result >> 2] = 0;
  HEAP32[$agg_result + 8 >> 2] = 0;
  return;
}
function _mrb_fixnum_value1897($agg_result, $i) {
  $agg_result = $agg_result | 0;
  $i = $i | 0;
  HEAP32[$agg_result >> 2] = $i;
  HEAP32[$agg_result + 8 >> 2] = 3;
  return;
}
function _mrb_float_value1898($agg_result, $f) {
  $agg_result = $agg_result | 0;
  $f = +$f;
  var $v_sroa_0_0__idx = 0;
  $v_sroa_0_0__idx = $agg_result | 0;
  HEAPF64[tempDoublePtr >> 3] = $f, HEAP32[$v_sroa_0_0__idx >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$v_sroa_0_0__idx + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  HEAP32[$agg_result + 8 >> 2] = 6;
  return;
}
function _mrb_bool_value1899($agg_result, $boolean) {
  $agg_result = $agg_result | 0;
  $boolean = $boolean | 0;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 8 >> 2] = $boolean << 24 >> 24 != 0 ? 2 : 0;
  return;
}
function _mrb_obj_value1900($agg_result, $p) {
  $agg_result = $agg_result | 0;
  $p = $p | 0;
  var $bf_clear = 0;
  $bf_clear = HEAP32[$p >> 2] & 255;
  HEAP32[$agg_result >> 2] = $p;
  HEAP32[$agg_result + 8 >> 2] = $bf_clear;
  return;
}
function _mrb_time_utcp($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $timezone = 0, $0 = 0, $1 = 0, $cmp = 0, $conv1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 5;
    break;
   case 4:
    $timezone = $call + 8 | 0;
    $0 = $timezone;
    $1 = HEAP32[$0 >> 2] | 0;
    $cmp = ($1 | 0) == 1;
    $conv1 = $cmp & 1;
    _mrb_bool_value1899($agg_result, $conv1);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_utc($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $0 = 0, $timezone = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $0 = $call;
    $timezone = $call + 8 | 0;
    $1 = $timezone;
    HEAP32[$1 >> 2] = 1;
    _mrb_time_update_datetime($0);
    label = 4;
    break;
   case 4:
    $2 = $agg_result;
    $3 = $self;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_hour($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $tm_hour = 0, $0 = 0, $1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 5;
    break;
   case 4:
    $tm_hour = $call + 20 | 0;
    $0 = $tm_hour;
    $1 = HEAP32[$0 >> 2] | 0;
    _mrb_fixnum_value1897($agg_result, $1);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_localtime($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $0 = 0, $1 = 0, $2 = 0, $timezone = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $0 = $agg_result;
    $1 = $self;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 5;
    break;
   case 4:
    $2 = $call;
    $timezone = $call + 8 | 0;
    $3 = $timezone;
    HEAP32[$3 >> 2] = 2;
    _mrb_time_update_datetime($2);
    $4 = $agg_result;
    $5 = $self;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_mday($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $tm_mday = 0, $0 = 0, $1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 5;
    break;
   case 4:
    $tm_mday = $call + 24 | 0;
    $0 = $tm_mday;
    $1 = HEAP32[$0 >> 2] | 0;
    _mrb_fixnum_value1897($agg_result, $1);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_min($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $tm_min = 0, $0 = 0, $1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 5;
    break;
   case 4:
    $tm_min = $call + 16 | 0;
    $0 = $tm_min;
    $1 = HEAP32[$0 >> 2] | 0;
    _mrb_fixnum_value1897($agg_result, $1);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_mon($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $tm_mon = 0, $0 = 0, $1 = 0, $add = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 5;
    break;
   case 4:
    $tm_mon = $call + 28 | 0;
    $0 = $tm_mon;
    $1 = HEAP32[$0 >> 2] | 0;
    $add = $1 + 1 | 0;
    _mrb_fixnum_value1897($agg_result, $add);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_sec($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $datetime = 0, $tm_sec = 0, $0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 5;
    break;
   case 4:
    $datetime = $call + 12 | 0;
    $tm_sec = $datetime;
    $0 = HEAP32[$tm_sec >> 2] | 0;
    _mrb_fixnum_value1897($agg_result, $0);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_to_i($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $sec = 0, $0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 5;
    break;
   case 4:
    $sec = $call;
    $0 = HEAP32[$sec >> 2] | 0;
    _mrb_fixnum_value1897($agg_result, $0);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_to_f($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $sec = 0, $0 = 0, $conv = 0.0, $usec = 0, $1 = 0, $2 = 0, $conv1 = 0.0, $div = 0.0, $add = 0.0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 5;
    break;
   case 4:
    $sec = $call;
    $0 = HEAP32[$sec >> 2] | 0;
    $conv = +($0 | 0);
    $usec = $call + 4 | 0;
    $1 = $usec;
    $2 = HEAP32[$1 >> 2] | 0;
    $conv1 = +($2 | 0);
    $div = $conv1 / 1.0e6;
    $add = $conv + $div;
    _mrb_float_value1898($agg_result, $add);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_usec($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $usec = 0, $0 = 0, $1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 5;
    break;
   case 4:
    $usec = $call + 4 | 0;
    $0 = $usec;
    $1 = HEAP32[$0 >> 2] | 0;
    _mrb_fixnum_value1897($agg_result, $1);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_wday($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $tm_wday = 0, $0 = 0, $1 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 5;
    break;
   case 4:
    $tm_wday = $call + 36 | 0;
    $0 = $tm_wday;
    $1 = HEAP32[$0 >> 2] | 0;
    _mrb_fixnum_value1897($agg_result, $1);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_yday($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $tm_yday = 0, $0 = 0, $1 = 0, $add = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 5;
    break;
   case 4:
    $tm_yday = $call + 40 | 0;
    $0 = $tm_yday;
    $1 = HEAP32[$0 >> 2] | 0;
    $add = $1 + 1 | 0;
    _mrb_fixnum_value1897($agg_result, $add);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_year($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $tm_year = 0, $0 = 0, $1 = 0, $add = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 5;
    break;
   case 4:
    $tm_year = $call + 32 | 0;
    $0 = $tm_year;
    $1 = HEAP32[$0 >> 2] | 0;
    $add = $1 + 1900 | 0;
    _mrb_fixnum_value1897($agg_result, $add);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_zone($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $call = 0, $tobool = 0, $timezone = 0, $0 = 0, $1 = 0, $cmp = 0, $cmp4 = 0, $arrayidx = 0, $2 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_data_get_ptr(0, $self, 78484) | 0;
    $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _mrb_nil_value1896($agg_result);
    label = 9;
    break;
   case 4:
    $timezone = $call + 8 | 0;
    $0 = $timezone;
    $1 = HEAP32[$0 >> 2] | 0;
    $cmp = ($1 | 0) == 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _mrb_nil_value1896($agg_result);
    label = 9;
    break;
   case 6:
    $cmp4 = $1 >>> 0 > 2;
    if ($cmp4) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _mrb_nil_value1896($agg_result);
    label = 9;
    break;
   case 8:
    $arrayidx = 58860 + ($1 << 2) | 0;
    $2 = HEAP32[$arrayidx >> 2] | 0;
    _mrb_str_new_cstr($agg_result, $mrb, $2);
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_initialize($agg_result, $mrb, $self) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $self = $self | 0;
  var $ayear = 0, $amonth = 0, $aday = 0, $ahour = 0, $amin = 0, $asec = 0, $ausec = 0, $p = 0, $0 = 0, $data = 0, $1 = 0, $2 = 0, $tobool = 0, $3 = 0, $type = 0, $4 = 0, $5 = 0, $data5 = 0, $6 = 0, $call = 0, $cmp = 0, $call7 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $call8 = 0, $tm_0 = 0, $14 = 0, $15 = 0, $data12 = 0, $16 = 0, $17 = 0, $18 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  tempParam = $self;
  $self = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$self >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$self + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$self + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $ayear = __stackBase__ | 0;
    $amonth = __stackBase__ + 4 | 0;
    $aday = __stackBase__ + 8 | 0;
    $ahour = __stackBase__ + 12 | 0;
    $amin = __stackBase__ + 16 | 0;
    $asec = __stackBase__ + 20 | 0;
    $ausec = __stackBase__ + 24 | 0;
    HEAP32[$ayear >> 2] = 0;
    HEAP32[$amonth >> 2] = 1;
    HEAP32[$aday >> 2] = 1;
    HEAP32[$ahour >> 2] = 0;
    HEAP32[$amin >> 2] = 0;
    HEAP32[$asec >> 2] = 0;
    HEAP32[$ausec >> 2] = 0;
    $p = $self;
    $0 = HEAP32[$p >> 2] | 0;
    $data = $0 + 20 | 0;
    $1 = $data;
    $2 = HEAP32[$1 >> 2] | 0;
    $tobool = ($2 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_time_free($mrb, $2);
    label = 4;
    break;
   case 4:
    $3 = HEAP32[$p >> 2] | 0;
    $type = $3 + 16 | 0;
    $4 = $type;
    HEAP32[$4 >> 2] = 78484;
    $5 = HEAP32[$p >> 2] | 0;
    $data5 = $5 + 20 | 0;
    $6 = $data5;
    HEAP32[$6 >> 2] = 0;
    $call = _mrb_get_args($mrb, 99360, (tempInt = STACKTOP, STACKTOP = STACKTOP + 28 | 0, HEAP32[tempInt >> 2] = $ayear, HEAP32[tempInt + 4 >> 2] = $amonth, HEAP32[tempInt + 8 >> 2] = $aday, HEAP32[tempInt + 12 >> 2] = $ahour, HEAP32[tempInt + 16 >> 2] = $amin, HEAP32[tempInt + 20 >> 2] = $asec, HEAP32[tempInt + 24 >> 2] = $ausec, tempInt) | 0) | 0;
    $cmp = ($call | 0) == 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $call7 = _current_mrb_time($mrb) | 0;
    $tm_0 = $call7;
    label = 7;
    break;
   case 6:
    $7 = HEAP32[$ayear >> 2] | 0;
    $8 = HEAP32[$amonth >> 2] | 0;
    $9 = HEAP32[$aday >> 2] | 0;
    $10 = HEAP32[$ahour >> 2] | 0;
    $11 = HEAP32[$amin >> 2] | 0;
    $12 = HEAP32[$asec >> 2] | 0;
    $13 = HEAP32[$ausec >> 2] | 0;
    $call8 = _time_mktime($mrb, $7, $8, $9, $10, $11, $12, $13, 2) | 0;
    $tm_0 = $call8;
    label = 7;
    break;
   case 7:
    $14 = $tm_0;
    $15 = HEAP32[$p >> 2] | 0;
    $data12 = $15 + 20 | 0;
    $16 = $data12;
    HEAP32[$16 >> 2] = $14;
    $17 = $agg_result;
    $18 = $self;
    HEAP32[$17 >> 2] = HEAP32[$18 >> 2] | 0;
    HEAP32[$17 + 4 >> 2] = HEAP32[$18 + 4 >> 2] | 0;
    HEAP32[$17 + 8 >> 2] = HEAP32[$18 + 8 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_initialize_copy($agg_result, $mrb, $copy) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $copy = $copy | 0;
  var $src = 0, $call = 0, $call1 = 0, $tobool = 0, $0 = 0, $1 = 0, $call2 = 0, $call3 = 0, $tobool4 = 0, $call6 = 0, $p = 0, $2 = 0, $data = 0, $3 = 0, $4 = 0, $tobool8 = 0, $call10 = 0, $5 = 0, $data13 = 0, $6 = 0, $7 = 0, $type = 0, $8 = 0, $9 = 0, $data19 = 0, $10 = 0, $11 = 0, $p21 = 0, $12 = 0, $data22 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  tempParam = $copy;
  $copy = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$copy >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$copy + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$copy + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $src = __stackBase__ | 0;
    $call = _mrb_get_args($mrb, 100352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $src, tempInt) | 0) | 0;
    $call1 = _mrb_obj_equal(0, $copy, $src) | 0;
    $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $0 = $agg_result;
    $1 = $copy;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 9;
    break;
   case 4:
    $call2 = _mrb_obj_class($mrb, $copy) | 0;
    $call3 = _mrb_obj_is_instance_of($mrb, $src, $call2) | 0;
    $tobool4 = ($call3 | 0) == 0;
    if ($tobool4) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $call6 = _mrb_class_get($mrb, 100128) | 0;
    _mrb_raise($mrb, $call6, 99636);
    label = 6;
    break;
   case 6:
    $p = $copy;
    $2 = HEAP32[$p >> 2] | 0;
    $data = $2 + 20 | 0;
    $3 = $data;
    $4 = HEAP32[$3 >> 2] | 0;
    $tobool8 = ($4 | 0) == 0;
    if ($tobool8) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $call10 = _mrb_malloc($mrb, 56) | 0;
    $5 = HEAP32[$p >> 2] | 0;
    $data13 = $5 + 20 | 0;
    $6 = $data13;
    HEAP32[$6 >> 2] = $call10;
    $7 = HEAP32[$p >> 2] | 0;
    $type = $7 + 16 | 0;
    $8 = $type;
    HEAP32[$8 >> 2] = 78484;
    label = 8;
    break;
   case 8:
    $9 = HEAP32[$p >> 2] | 0;
    $data19 = $9 + 20 | 0;
    $10 = $data19;
    $11 = HEAP32[$10 >> 2] | 0;
    $p21 = $src;
    $12 = HEAP32[$p21 >> 2] | 0;
    $data22 = $12 + 20 | 0;
    $13 = $data22;
    $14 = HEAP32[$13 >> 2] | 0;
    _memcpy($11 | 0, $14 | 0, 56);
    $15 = $agg_result;
    $16 = $copy;
    HEAP32[$15 >> 2] = HEAP32[$16 >> 2] | 0;
    HEAP32[$15 + 4 >> 2] = HEAP32[$16 + 4 >> 2] | 0;
    HEAP32[$15 + 8 >> 2] = HEAP32[$16 + 8 >> 2] | 0;
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_time_free($mrb, $ptr) {
  $mrb = $mrb | 0;
  $ptr = $ptr | 0;
  _mrb_free($mrb, $ptr);
  return;
}
function _current_mrb_time($mrb) {
  $mrb = $mrb | 0;
  var $tv = 0, $call = 0, $0 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $tv = __stackBase__ | 0;
  $call = _mrb_malloc($mrb, 56) | 0;
  $0 = $call;
  _gettimeofday($tv | 0, 0);
  HEAP32[$call >> 2] = HEAP32[$tv >> 2] | 0;
  HEAP32[$call + 4 >> 2] = HEAP32[$tv + 4 >> 2] | 0;
  HEAP32[$call + 8 >> 2] = 2;
  _mrb_time_update_datetime($0);
  STACKTOP = __stackBase__;
  return $0 | 0;
}
function _time_mktime($mrb, $ayear, $amonth, $aday, $ahour, $amin, $asec, $ausec, $timezone) {
  $mrb = $mrb | 0;
  $ayear = $ayear | 0;
  $amonth = $amonth | 0;
  $aday = $aday | 0;
  $ahour = $ahour | 0;
  $amin = $amin | 0;
  $asec = $asec | 0;
  $ausec = $ausec | 0;
  $timezone = $timezone | 0;
  var $nowtime = 0, $0 = 0, $sub = 0, $tm_year = 0, $sub1 = 0, $tm_mon = 0, $tm_mday = 0, $tm_hour = 0, $tm_min = 0, $tm_sec = 0, $tm_isdst = 0, $cmp = 0, $call = 0, $call2 = 0, $nowsecs_0 = 0, $cmp3 = 0, $call5 = 0, $conv = 0.0, $conv7 = 0.0, $call8 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $nowtime = __stackBase__ | 0;
    $0 = $nowtime;
    _memset($0 | 0, 0, 44);
    $sub = $ayear - 1900 | 0;
    $tm_year = $nowtime + 20 | 0;
    HEAP32[$tm_year >> 2] = $sub;
    $sub1 = $amonth - 1 | 0;
    $tm_mon = $nowtime + 16 | 0;
    HEAP32[$tm_mon >> 2] = $sub1;
    $tm_mday = $nowtime + 12 | 0;
    HEAP32[$tm_mday >> 2] = $aday;
    $tm_hour = $nowtime + 8 | 0;
    HEAP32[$tm_hour >> 2] = $ahour;
    $tm_min = $nowtime + 4 | 0;
    HEAP32[$tm_min >> 2] = $amin;
    $tm_sec = $nowtime | 0;
    HEAP32[$tm_sec >> 2] = $asec;
    $tm_isdst = $nowtime + 32 | 0;
    HEAP32[$tm_isdst >> 2] = -1;
    $cmp = ($timezone | 0) == 1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _my_timgm($nowtime) | 0;
    $nowsecs_0 = $call;
    label = 5;
    break;
   case 4:
    $call2 = _mktime($nowtime | 0) | 0;
    $nowsecs_0 = $call2;
    label = 5;
    break;
   case 5:
    $cmp3 = ($nowsecs_0 | 0) < 0;
    if ($cmp3) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $call5 = _mrb_class_get($mrb, 99104) | 0;
    _mrb_raise($mrb, $call5, 98840);
    label = 7;
    break;
   case 7:
    $conv = +($nowsecs_0 | 0);
    $conv7 = +($ausec | 0);
    $call8 = _mrb_time_alloc($mrb, $conv, $conv7, $timezone) | 0;
    STACKTOP = __stackBase__;
    return $call8 | 0;
  }
  return 0;
}
function _my_timgm($tm) {
  $tm = $tm | 0;
  var $tm_year = 0, $0 = 0, $add = 0, $call = 0, $cmp21 = 0, $1 = 0, $r_0_lcssa = 0, $tm_mon = 0, $2 = 0, $cmp618 = 0, $3 = 0, $r_023 = 0, $i_022 = 0, $add2 = 0, $call3 = 0, $tobool = 0, $cond = 0, $add4 = 0, $inc = 0, $cmp = 0, $r_120 = 0, $i_119 = 0, $arrayidx8 = 0, $4 = 0, $mul10 = 0, $add11 = 0, $inc13 = 0, $cmp6 = 0, $r_1_lcssa = 0, $tm_mday = 0, $5 = 0, $6 = 0, $tm_hour = 0, $7 = 0, $mul20 = 0, $tm_min = 0, $8 = 0, $mul22 = 0, $tm_sec = 0, $9 = 0, $mul17 = 0, $add18 = 0, $add21 = 0, $add23 = 0, $add24 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tm_year = $tm + 20 | 0;
    $0 = HEAP32[$tm_year >> 2] | 0;
    $add = $0 + 1900 | 0;
    $call = _is_leapyear($add) | 0;
    $cmp21 = ($0 | 0) > 70;
    if ($cmp21) {
      label = 3;
      break;
    } else {
      $r_0_lcssa = 0;
      label = 4;
      break;
    }
   case 3:
    $1 = HEAP32[$tm_year >> 2] | 0;
    $i_022 = 70;
    $r_023 = 0;
    label = 6;
    break;
   case 4:
    $tm_mon = $tm + 16 | 0;
    $2 = HEAP32[$tm_mon >> 2] | 0;
    $cmp618 = ($2 | 0) > 0;
    if ($cmp618) {
      label = 5;
      break;
    } else {
      $r_1_lcssa = $r_0_lcssa;
      label = 8;
      break;
    }
   case 5:
    $3 = HEAP32[$tm_mon >> 2] | 0;
    $i_119 = 0;
    $r_120 = $r_0_lcssa;
    label = 7;
    break;
   case 6:
    $add2 = $i_022 + 1900 | 0;
    $call3 = _is_leapyear($add2) | 0;
    $tobool = ($call3 | 0) != 0;
    $cond = $tobool ? 31622400 : 31536e3;
    $add4 = $cond + $r_023 | 0;
    $inc = $i_022 + 1 | 0;
    $cmp = ($inc | 0) < ($1 | 0);
    if ($cmp) {
      $i_022 = $inc;
      $r_023 = $add4;
      label = 6;
      break;
    } else {
      $r_0_lcssa = $add4;
      label = 4;
      break;
    }
   case 7:
    $arrayidx8 = 61104 + ($call * 48 & -1) + ($i_119 << 2) | 0;
    $4 = HEAP32[$arrayidx8 >> 2] | 0;
    $mul10 = $4 * 86400 & -1;
    $add11 = $mul10 + $r_120 | 0;
    $inc13 = $i_119 + 1 | 0;
    $cmp6 = ($inc13 | 0) < ($3 | 0);
    if ($cmp6) {
      $i_119 = $inc13;
      $r_120 = $add11;
      label = 7;
      break;
    } else {
      $r_1_lcssa = $add11;
      label = 8;
      break;
    }
   case 8:
    $tm_mday = $tm + 12 | 0;
    $5 = HEAP32[$tm_mday >> 2] | 0;
    $6 = $5 * 86400 & -1;
    $tm_hour = $tm + 8 | 0;
    $7 = HEAP32[$tm_hour >> 2] | 0;
    $mul20 = $7 * 3600 & -1;
    $tm_min = $tm + 4 | 0;
    $8 = HEAP32[$tm_min >> 2] | 0;
    $mul22 = $8 * 60 & -1;
    $tm_sec = $tm | 0;
    $9 = HEAP32[$tm_sec >> 2] | 0;
    $mul17 = $r_1_lcssa - 86400 | 0;
    $add18 = $mul17 + $6 | 0;
    $add21 = $add18 + $mul20 | 0;
    $add23 = $add21 + $mul22 | 0;
    $add24 = $add23 + $9 | 0;
    return $add24 | 0;
  }
  return 0;
}
function _mrb_time_alloc($mrb, $sec, $usec, $timezone) {
  $mrb = $mrb | 0;
  $sec = +$sec;
  $usec = +$usec;
  $timezone = $timezone | 0;
  var $call = 0, $0 = 0, $conv = 0, $sec1 = 0, $conv3 = 0.0, $sub = 0.0, $mul = 0.0, $add = 0.0, $usec5 = 0, $1 = 0, $storemerge16 = 0, $cmp17 = 0, $sec1_promoted18 = 0, $_promoted20 = 0, $storemerge_lcssa = 0, $cmp1613 = 0, $sec1_promoted = 0, $_promoted = 0, $storemerge21 = 0, $dec19 = 0, $dec = 0, $conv10 = 0.0, $add11 = 0.0, $storemerge = 0, $cmp = 0, $conv2315 = 0, $inc14 = 0, $inc = 0, $conv21 = 0.0, $sub22 = 0.0, $conv23 = 0, $cmp16 = 0, $timezone25 = 0, $2 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $call = _mrb_malloc($mrb, 56) | 0;
    $0 = $call;
    $conv = ~~$sec;
    $sec1 = $call;
    HEAP32[$sec1 >> 2] = $conv;
    $conv3 = +($conv | 0);
    $sub = $sec - $conv3;
    $mul = $sub * 1.0e6;
    $add = $mul + $usec;
    $usec5 = $call + 4 | 0;
    $1 = $usec5;
    $storemerge16 = ~~$add;
    HEAP32[$1 >> 2] = $storemerge16;
    $cmp17 = ($storemerge16 | 0) < 0;
    if ($cmp17) {
      label = 3;
      break;
    } else {
      $storemerge_lcssa = $storemerge16;
      label = 5;
      break;
    }
   case 3:
    $sec1_promoted18 = HEAP32[$sec1 >> 2] | 0;
    $_promoted20 = HEAP32[$1 >> 2] | 0;
    $dec19 = $sec1_promoted18;
    $storemerge21 = $_promoted20;
    label = 7;
    break;
   case 4:
    HEAP32[$sec1 >> 2] = $dec;
    HEAP32[$1 >> 2] = $storemerge;
    $storemerge_lcssa = $storemerge;
    label = 5;
    break;
   case 5:
    $cmp1613 = ($storemerge_lcssa | 0) > 1e6;
    if ($cmp1613) {
      label = 6;
      break;
    } else {
      label = 10;
      break;
    }
   case 6:
    $sec1_promoted = HEAP32[$sec1 >> 2] | 0;
    $_promoted = HEAP32[$1 >> 2] | 0;
    $inc14 = $sec1_promoted;
    $conv2315 = $_promoted;
    label = 8;
    break;
   case 7:
    $dec = $dec19 - 1 | 0;
    $conv10 = +($storemerge21 | 0);
    $add11 = $conv10 + 1.0e6;
    $storemerge = ~~$add11;
    $cmp = ($storemerge | 0) < 0;
    if ($cmp) {
      $dec19 = $dec;
      $storemerge21 = $storemerge;
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 8:
    $inc = $inc14 + 1 | 0;
    $conv21 = +($conv2315 | 0);
    $sub22 = $conv21 + -1.0e6;
    $conv23 = ~~$sub22;
    $cmp16 = ($conv23 | 0) > 1e6;
    if ($cmp16) {
      $inc14 = $inc;
      $conv2315 = $conv23;
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    HEAP32[$sec1 >> 2] = $inc;
    HEAP32[$1 >> 2] = $conv23;
    label = 10;
    break;
   case 10:
    $timezone25 = $call + 8 | 0;
    $2 = $timezone25;
    HEAP32[$2 >> 2] = $timezone;
    _mrb_time_update_datetime($0);
    return $0 | 0;
  }
  return 0;
}
function _mrb_time_update_datetime($self) {
  $self = $self | 0;
  var $timezone = 0, $0 = 0, $cmp = 0, $sec = 0, $datetime = 0, $call = 0, $call3 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $timezone = $self + 8 | 0;
    $0 = HEAP32[$timezone >> 2] | 0;
    $cmp = ($0 | 0) == 1;
    $sec = $self | 0;
    $datetime = $self + 12 | 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _gmtime_r($sec | 0, $datetime | 0) | 0;
    label = 5;
    break;
   case 4:
    $call3 = _localtime_r($sec | 0, $datetime | 0) | 0;
    label = 5;
    break;
   case 5:
    return;
  }
}
function _mrb_time_wrap($agg_result, $mrb, $tc, $tm) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $tc = $tc | 0;
  $tm = $tm | 0;
  _mrb_obj_value1900($agg_result, _mrb_data_object_alloc($mrb, $tc, $tm, 78484) | 0);
  return;
}
function _mrb_time_make($agg_result, $mrb, $c, $sec, $usec, $timezone) {
  $agg_result = $agg_result | 0;
  $mrb = $mrb | 0;
  $c = $c | 0;
  $sec = +$sec;
  $usec = +$usec;
  $timezone = $timezone | 0;
  _mrb_time_wrap($agg_result, $mrb, $c, _mrb_time_alloc($mrb, $sec, $usec, $timezone) | 0);
  return;
}
function _mrb_init_mrblib($mrb) {
  $mrb = $mrb | 0;
  var __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  _mrb_load_irep(__stackBase__ | 0, $mrb, 63716);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_print_backtrace($mrb) {
  $mrb = $mrb | 0;
  var $tmp = 0, $tmp30 = 0, $puts = 0, $exc = 0, $0 = 0, $call1 = 0, $i2 = 0, $1 = 0, $c = 0, $2 = 0, $ciend = 0, $3 = 0, $cibase = 0, $4 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $sub_ptr_div = 0, $cmp = 0, $_ = 0, $cmp443 = 0, $p = 0, $i_044 = 0, $5 = 0, $cibase6 = 0, $6 = 0, $proc = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $cmp7 = 0, $irep11 = 0, $10 = 0, $filename12 = 0, $11 = 0, $cmp13 = 0, $_40 = 0, $lines = 0, $12 = 0, $cmp17 = 0, $add = 0, $cmp20 = 0, $pc26 = 0, $13 = 0, $14 = 0, $call29 = 0, $15 = 0, $16 = 0, $pc_0 = 0, $iseq = 0, $17 = 0, $cmp33 = 0, $ilen = 0, $18 = 0, $add_ptr = 0, $cmp35 = 0, $sub_ptr_lhs_cast38 = 0, $sub_ptr_rhs_cast39 = 0, $sub_ptr_sub40 = 0, $sub_ptr_div41 = 0, $sub = 0, $19 = 0, $arrayidx43 = 0, $20 = 0, $conv = 0, $target_class = 0, $21 = 0, $22 = 0, $target_class52 = 0, $23 = 0, $cmp53 = 0, $_41 = 0, $mid = 0, $24 = 0, $call58 = 0, $tobool = 0, $25 = 0, $target_class62 = 0, $26 = 0, $call63 = 0, $tobool64 = 0, $call66 = 0, $call68 = 0, $call71 = 0, $dec = 0, $cmp4 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $tmp30 = __stackBase__ + 12 | 0;
    $puts = _puts(59944) | 0;
    $exc = $mrb + 16 | 0;
    $0 = HEAP32[$exc >> 2] | 0;
    $call1 = _mrb_intern1914($mrb, 110416) | 0;
    _mrb_obj_iv_get($tmp, 0, $0, $call1);
    $i2 = $tmp;
    $1 = HEAP32[$i2 >> 2] | 0;
    $c = $mrb + 8 | 0;
    $2 = HEAP32[$c >> 2] | 0;
    $ciend = $2 + 24 | 0;
    $3 = HEAP32[$ciend >> 2] | 0;
    $cibase = $2 + 20 | 0;
    $4 = HEAP32[$cibase >> 2] | 0;
    $sub_ptr_lhs_cast = $3;
    $sub_ptr_rhs_cast = $4;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $sub_ptr_div = ($sub_ptr_sub | 0) / 44 & -1;
    $cmp = ($1 | 0) < ($sub_ptr_div | 0);
    $_ = $cmp ? $1 : 10;
    $cmp443 = ($_ | 0) > -1;
    if ($cmp443) {
      label = 3;
      break;
    } else {
      label = 17;
      break;
    }
   case 3:
    $p = $tmp30;
    $i_044 = $_;
    label = 4;
    break;
   case 4:
    $5 = HEAP32[$c >> 2] | 0;
    $cibase6 = $5 + 20 | 0;
    $6 = HEAP32[$cibase6 >> 2] | 0;
    $proc = $6 + ($i_044 * 44 & -1) + 4 | 0;
    $7 = HEAP32[$proc >> 2] | 0;
    $8 = $7;
    $9 = HEAP32[$8 >> 2] | 0;
    $and = $9 & 262144;
    $cmp7 = ($and | 0) == 0;
    if ($cmp7) {
      label = 5;
      break;
    } else {
      label = 16;
      break;
    }
   case 5:
    $irep11 = $7 + 12 | 0;
    $10 = HEAP32[$irep11 >> 2] | 0;
    $filename12 = $10 + 24 | 0;
    $11 = HEAP32[$filename12 >> 2] | 0;
    $cmp13 = ($11 | 0) == 0;
    $_40 = $cmp13 ? 105912 : $11;
    $lines = $10 + 28 | 0;
    $12 = HEAP32[$lines >> 2] | 0;
    $cmp17 = ($12 | 0) == 0;
    if ($cmp17) {
      label = 16;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $add = $i_044 + 1 | 0;
    $cmp20 = ($add | 0) > ($_ | 0);
    if ($cmp20) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $pc26 = $6 + ($add * 44 & -1) + 20 | 0;
    $13 = HEAP32[$pc26 >> 2] | 0;
    $pc_0 = $13;
    label = 9;
    break;
   case 8:
    $14 = HEAP32[$exc >> 2] | 0;
    $call29 = _mrb_intern1914($mrb, 102464) | 0;
    _mrb_obj_iv_get($tmp30, 0, $14, $call29);
    $15 = HEAP32[$p >> 2] | 0;
    $16 = $15;
    $pc_0 = $16;
    label = 9;
    break;
   case 9:
    $iseq = $10 + 12 | 0;
    $17 = HEAP32[$iseq >> 2] | 0;
    $cmp33 = $17 >>> 0 > $pc_0 >>> 0;
    if ($cmp33) {
      label = 16;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $ilen = $10 + 32 | 0;
    $18 = HEAP32[$ilen >> 2] | 0;
    $add_ptr = $17 + ($18 << 2) | 0;
    $cmp35 = $pc_0 >>> 0 < $add_ptr >>> 0;
    if ($cmp35) {
      label = 11;
      break;
    } else {
      label = 16;
      break;
    }
   case 11:
    $sub_ptr_lhs_cast38 = $pc_0;
    $sub_ptr_rhs_cast39 = $17;
    $sub_ptr_sub40 = $sub_ptr_lhs_cast38 - $sub_ptr_rhs_cast39 | 0;
    $sub_ptr_div41 = $sub_ptr_sub40 >> 2;
    $sub = $sub_ptr_div41 - 1 | 0;
    $19 = HEAP32[$lines >> 2] | 0;
    $arrayidx43 = $19 + ($sub << 1) | 0;
    $20 = HEAP16[$arrayidx43 >> 1] | 0;
    $conv = $20 & 65535;
    $target_class = $6 + ($i_044 * 44 & -1) + 28 | 0;
    $21 = HEAP32[$target_class >> 2] | 0;
    $22 = HEAP32[$proc >> 2] | 0;
    $target_class52 = $22 + 16 | 0;
    $23 = HEAP32[$target_class52 >> 2] | 0;
    $cmp53 = ($21 | 0) == ($23 | 0);
    $_41 = $cmp53 ? 99772 : 97160;
    $mid = $6 + ($i_044 * 44 & -1) | 0;
    $24 = HEAP16[$mid >> 1] | 0;
    $call58 = _mrb_sym2name($mrb, $24) | 0;
    $tobool = ($call58 | 0) == 0;
    if ($tobool) {
      label = 15;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $25 = HEAP32[$proc >> 2] | 0;
    $target_class62 = $25 + 16 | 0;
    $26 = HEAP32[$target_class62 >> 2] | 0;
    $call63 = _mrb_class_name($mrb, $26) | 0;
    $tobool64 = ($call63 | 0) == 0;
    if ($tobool64) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $call66 = _printf(95228, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = $i_044, HEAP32[tempInt + 4 >> 2] = $_40, HEAP32[tempInt + 8 >> 2] = $conv, HEAP32[tempInt + 12 >> 2] = $call63, HEAP32[tempInt + 16 >> 2] = $_41, HEAP32[tempInt + 20 >> 2] = $call58, tempInt) | 0) | 0;
    label = 16;
    break;
   case 14:
    $call68 = _printf(94124, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $i_044, HEAP32[tempInt + 4 >> 2] = $_40, HEAP32[tempInt + 8 >> 2] = $conv, HEAP32[tempInt + 12 >> 2] = $call58, tempInt) | 0) | 0;
    label = 16;
    break;
   case 15:
    $call71 = _printf(93308, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $i_044, HEAP32[tempInt + 4 >> 2] = $_40, HEAP32[tempInt + 8 >> 2] = $conv, tempInt) | 0) | 0;
    label = 16;
    break;
   case 16:
    $dec = $i_044 - 1 | 0;
    $cmp4 = ($i_044 | 0) > 0;
    if ($cmp4) {
      $i_044 = $dec;
      label = 4;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_intern1914($mrb, $cstr) {
  $mrb = $mrb | 0;
  $cstr = $cstr | 0;
  return _mrb_intern_cstr($mrb, $cstr) | 0;
}
function _mrb_init_comparable($mrb) {
  $mrb = $mrb | 0;
  _mrb_define_module($mrb, 107200);
  return;
}
function _mrb_init_enumerable($mrb) {
  $mrb = $mrb | 0;
  _mrb_define_module($mrb, 107140);
  return;
}
function _mrb_data_object_alloc($mrb, $klass, $ptr, $type) {
  $mrb = $mrb | 0;
  $klass = $klass | 0;
  $ptr = $ptr | 0;
  $type = $type | 0;
  var $call = 0;
  $call = _mrb_obj_alloc($mrb, 21, $klass) | 0;
  HEAP32[$call + 20 >> 2] = $ptr;
  HEAP32[$call + 16 >> 2] = $type;
  return $call | 0;
}
function _mrb_data_check_type($mrb, $obj, $type) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $type = $type | 0;
  var $agg_tmp = 0, $agg_tmp10 = 0, $tt = 0, $0 = 0, $cmp2 = 0, $p = 0, $1 = 0, $type3 = 0, $2 = 0, $3 = 0, $cmp4 = 0, $tobool = 0, $or_cond7 = 0, $call = 0, $struct_name = 0, $4 = 0, $struct_name11 = 0, $5 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $agg_tmp = __stackBase__ | 0;
    $agg_tmp10 = __stackBase__ + 12 | 0;
    $tt = $obj + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp2 = ($0 | 0) == 21;
    if ($cmp2) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_check_type($mrb, $obj, 21);
    label = 4;
    break;
   case 4:
    $p = $obj;
    $1 = HEAP32[$p >> 2] | 0;
    $type3 = $1 + 16 | 0;
    $2 = $type3;
    $3 = HEAP32[$2 >> 2] | 0;
    $cmp4 = ($3 | 0) == ($type | 0);
    $tobool = ($3 | 0) == 0;
    $or_cond7 = $cmp4 | $tobool;
    if ($or_cond7) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $call = _mrb_class_get($mrb, 107080) | 0;
    $struct_name = $3 | 0;
    $4 = HEAP32[$struct_name >> 2] | 0;
    _mrb_str_new_cstr($agg_tmp, $mrb, $4);
    $struct_name11 = $type | 0;
    $5 = HEAP32[$struct_name11 >> 2] | 0;
    _mrb_str_new_cstr($agg_tmp10, $mrb, $5);
    _mrb_raisef($mrb, $call, 110348, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = HEAP32[$agg_tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$agg_tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$agg_tmp + 8 >> 2] | 0, HEAP32[tempInt + 12 >> 2] = HEAP32[$agg_tmp10 >> 2] | 0, HEAP32[tempInt + 16 >> 2] = HEAP32[$agg_tmp10 + 4 >> 2] | 0, HEAP32[tempInt + 20 >> 2] = HEAP32[$agg_tmp10 + 8 >> 2] | 0, tempInt) | 0);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mrb_data_check_and_get($mrb, $obj, $type) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $type = $type | 0;
  var tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  _mrb_data_check_type($mrb, $obj, $type);
  STACKTOP = __stackBase__;
  return HEAP32[(HEAP32[$obj >> 2] | 0) + 20 >> 2] | 0;
}
function _mrb_data_get_ptr($mrb, $obj, $type) {
  $mrb = $mrb | 0;
  $obj = $obj | 0;
  $type = $type | 0;
  var $tt = 0, $0 = 0, $cmp2 = 0, $p = 0, $1 = 0, $type3 = 0, $2 = 0, $3 = 0, $cmp4 = 0, $data = 0, $4 = 0, $5 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt = $obj + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    $cmp2 = ($0 | 0) == 21;
    if ($cmp2) {
      label = 3;
      break;
    } else {
      $retval_0 = 0;
      label = 5;
      break;
    }
   case 3:
    $p = $obj;
    $1 = HEAP32[$p >> 2] | 0;
    $type3 = $1 + 16 | 0;
    $2 = $type3;
    $3 = HEAP32[$2 >> 2] | 0;
    $cmp4 = ($3 | 0) == ($type | 0);
    if ($cmp4) {
      label = 4;
      break;
    } else {
      $retval_0 = 0;
      label = 5;
      break;
    }
   case 4:
    $data = $1 + 20 | 0;
    $4 = $data;
    $5 = HEAP32[$4 >> 2] | 0;
    $retval_0 = $5;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _float_id($f) {
  $f = +$f;
  var $f_addr = 0, $0 = 0, $add_7 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $f_addr = __stackBase__ | 0;
  HEAPF64[tempDoublePtr >> 3] = $f, HEAP32[$f_addr >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$f_addr + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  $0 = $f_addr;
  $add_7 = (HEAP8[$0 + 7 | 0] | 0) + (((HEAP8[$0 + 6 | 0] | 0) + (((HEAP8[$0 + 5 | 0] | 0) + (((HEAP8[$0 + 4 | 0] | 0) + (((HEAP8[$0 + 3 | 0] | 0) + (((HEAP8[$0 + 2 | 0] | 0) + (((HEAP8[$0 + 1 | 0] | 0) + ((HEAP8[$0] | 0) * 65599 & -1) | 0) * 65599 & -1) | 0) * 65599 & -1) | 0) * 65599 & -1) | 0) * 65599 & -1) | 0) * 65599 & -1) | 0) * 65599 & -1) | 0;
  STACKTOP = __stackBase__;
  return ($add_7 >> 5) + $add_7 | 0;
}
function _mrb_random_init_genrand($t, $s) {
  $t = $t | 0;
  $s = $s | 0;
  var $arrayidx = 0, $mti = 0, $storemerge13 = 0, $sub = 0, $arrayidx4 = 0, $0 = 0, $shr = 0, $xor = 0, $mul = 0, $add = 0, $arrayidx12 = 0, $1 = 0, $inc = 0, $cmp = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $arrayidx = $t | 0;
    HEAP32[$arrayidx >> 2] = $s;
    $mti = $t + 2496 | 0;
    HEAP32[$mti >> 2] = 1;
    $storemerge13 = 1;
    label = 3;
    break;
   case 3:
    $sub = $storemerge13 - 1 | 0;
    $arrayidx4 = $t + ($sub << 2) | 0;
    $0 = HEAP32[$arrayidx4 >> 2] | 0;
    $shr = $0 >>> 30;
    $xor = $shr ^ $0;
    $mul = Math_imul($xor, 1812433253);
    $add = $mul + $storemerge13 | 0;
    $arrayidx12 = $t + ($storemerge13 << 2) | 0;
    HEAP32[$arrayidx12 >> 2] = $add;
    $1 = HEAP32[$mti >> 2] | 0;
    $inc = $1 + 1 | 0;
    HEAP32[$mti >> 2] = $inc;
    $cmp = ($inc | 0) < 624;
    if ($cmp) {
      $storemerge13 = $inc;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    return;
  }
}
function _init_genrand($s) {
  $s = $s | 0;
  var $inc2 = 0, $sub = 0, $arrayidx = 0, $0 = 0, $shr = 0, $xor = 0, $mul = 0, $add = 0, $arrayidx3 = 0, $inc = 0, $exitcond = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    HEAP32[15303] = $s;
    HEAP32[15300] = 1;
    $inc2 = 1;
    label = 3;
    break;
   case 3:
    $sub = $inc2 - 1 | 0;
    $arrayidx = 61212 + ($sub << 2) | 0;
    $0 = HEAP32[$arrayidx >> 2] | 0;
    $shr = $0 >>> 30;
    $xor = $shr ^ $0;
    $mul = Math_imul($xor, 1812433253);
    $add = $mul + $inc2 | 0;
    $arrayidx3 = 61212 + ($inc2 << 2) | 0;
    HEAP32[$arrayidx3 >> 2] = $add;
    $inc = $inc2 + 1 | 0;
    $exitcond = ($inc | 0) == 624;
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $inc2 = $inc;
      label = 3;
      break;
    }
   case 4:
    HEAP32[15300] = 624;
    return;
  }
}
function _mrb_obj_to_sym($mrb, $name) {
  $mrb = $mrb | 0;
  $name = $name | 0;
  var $tmp = 0, $tmp4 = 0, $tmp5 = 0, $tt = 0, $0 = 0, $1 = 0, $tt3 = 0, $2 = 0, $cmp = 0, $i = 0, $3 = 0, $tobool = 0, $4 = 0, $call = 0, $5 = 0, $6 = 0, $7 = 0, $sym = 0, $8 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  tempParam = $name;
  $name = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$name >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$name + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$name + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tmp = __stackBase__ | 0;
    $tmp4 = __stackBase__ + 12 | 0;
    $tmp5 = __stackBase__ + 24 | 0;
    $tt = $name + 8 | 0;
    $0 = HEAP32[$tt >> 2] | 0;
    if (($0 | 0) == 16) {
      label = 7;
      break;
    } else if (($0 | 0) == 4) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _mrb_check_string_type($tmp, $mrb, $name);
    $1 = $tmp;
    $tt3 = $tmp + 8 | 0;
    $2 = HEAP32[$tt3 >> 2] | 0;
    $cmp = ($2 | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $i = $tmp;
    $3 = HEAP32[$i >> 2] | 0;
    $tobool = ($3 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _mrb_inspect($tmp4, $mrb, $name);
    $4 = $tmp4;
    HEAP32[$1 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    $call = _mrb_class_get($mrb, 107080) | 0;
    _mrb_raisef($mrb, $call, 102444, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$tmp >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[$tmp + 4 >> 2] | 0, HEAP32[tempInt + 8 >> 2] = HEAP32[$tmp + 8 >> 2] | 0, tempInt) | 0);
    label = 6;
    break;
   case 6:
    $5 = $name;
    HEAP32[$5 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$5 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    label = 7;
    break;
   case 7:
    _mrb_str_intern($tmp5, $mrb, $name);
    $6 = $name;
    $7 = $tmp5;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
    label = 8;
    break;
   case 8:
    $sym = $name;
    $8 = HEAP16[$sym >> 1] | 0;
    STACKTOP = __stackBase__;
    return $8 | 0;
  }
  return 0;
}
function _mrb_obj_id($obj) {
  $obj = $obj | 0;
  var $tt1 = 0, $0 = 0, $i = 0, $1 = 0, $tobool = 0, $xor4 = 0, $xor4_ = 0, $xor7 = 0, $sym = 0, $2 = 0, $conv = 0, $xor10 = 0, $i13 = 0, $3 = 0, $conv14 = 0.0, $call = 0, $xor15 = 0, $f = 0, $4 = 0.0, $call18 = 0, $xor19 = 0, $p = 0, $5 = 0, $6 = 0, $xor22 = 0, $retval_0 = 0, label = 0, tempParam = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  tempParam = $obj;
  $obj = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  HEAP32[$obj >> 2] = HEAP32[tempParam >> 2] | 0;
  HEAP32[$obj + 4 >> 2] = HEAP32[tempParam + 4 >> 2] | 0;
  HEAP32[$obj + 8 >> 2] = HEAP32[tempParam + 8 >> 2] | 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $tt1 = $obj + 8 | 0;
    $0 = HEAP32[$tt1 >> 2] | 0;
    if (($0 | 0) == 0) {
      label = 3;
      break;
    } else if (($0 | 0) == 2) {
      label = 4;
      break;
    } else if (($0 | 0) == 4) {
      label = 5;
      break;
    } else if (($0 | 0) == 3) {
      label = 6;
      break;
    } else if (($0 | 0) == 6) {
      label = 7;
      break;
    } else if (($0 | 0) == 1 | ($0 | 0) == 5) {
      $retval_0 = $0;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 3:
    $i = $obj;
    $1 = HEAP32[$i >> 2] | 0;
    $tobool = ($1 | 0) == 0;
    $xor4 = $tobool & 1;
    $xor4_ = $xor4 ^ $0;
    STACKTOP = __stackBase__;
    return $xor4_ | 0;
   case 4:
    $xor7 = $0 ^ 1;
    $retval_0 = $xor7;
    label = 9;
    break;
   case 5:
    $sym = $obj;
    $2 = HEAP16[$sym >> 1] | 0;
    $conv = $2 << 16 >> 16;
    $xor10 = $conv ^ $0;
    $retval_0 = $xor10;
    label = 9;
    break;
   case 6:
    $i13 = $obj;
    $3 = HEAP32[$i13 >> 2] | 0;
    $conv14 = +($3 | 0);
    $call = _float_id($conv14) | 0;
    $xor15 = $call ^ 6;
    $retval_0 = $xor15;
    label = 9;
    break;
   case 7:
    $f = $obj | 0;
    $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$f >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$f + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $call18 = _float_id($4) | 0;
    $xor19 = $call18 ^ $0;
    $retval_0 = $xor19;
    label = 9;
    break;
   case 8:
    $p = $obj;
    $5 = HEAP32[$p >> 2] | 0;
    $6 = $5;
    $xor22 = $6 ^ $0;
    $retval_0 = $xor22;
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _mrb_random_genrand_int32($t) {
  $t = $t | 0;
  var $mti = 0, $0 = 0, $cmp = 0, $cmp2 = 0, $kk_047 = 0, $arrayidx = 0, $1 = 0, $and = 0, $add = 0, $arrayidx6 = 0, $2 = 0, $and7 = 0, $or = 0, $add8 = 0, $arrayidx10 = 0, $3 = 0, $shr = 0, $and11 = 0, $arrayidx12 = 0, $4 = 0, $xor = 0, $xor13 = 0, $exitcond48 = 0, $kk_146 = 0, $arrayidx20 = 0, $5 = 0, $and21 = 0, $add22 = 0, $arrayidx24 = 0, $6 = 0, $and25 = 0, $or26 = 0, $add27 = 0, $arrayidx29 = 0, $7 = 0, $shr30 = 0, $and32 = 0, $arrayidx33 = 0, $8 = 0, $xor31 = 0, $xor34 = 0, $exitcond = 0, $arrayidx41 = 0, $9 = 0, $and42 = 0, $arrayidx44 = 0, $10 = 0, $and45 = 0, $or46 = 0, $arrayidx48 = 0, $11 = 0, $shr49 = 0, $and51 = 0, $arrayidx52 = 0, $12 = 0, $xor50 = 0, $xor53 = 0, $13 = 0, $inc59 = 0, $arrayidx61 = 0, $14 = 0, $shr62 = 0, $xor63 = 0, $shl = 0, $and64 = 0, $xor65 = 0, $shl66 = 0, $and67 = 0, $xor68 = 0, $shr69 = 0, $xor70 = 0, $15 = 0, $gen_int = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $mti = $t + 2496 | 0;
    $0 = HEAP32[$mti >> 2] | 0;
    $cmp = ($0 | 0) > 623;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 8;
      break;
    }
   case 3:
    $cmp2 = ($0 | 0) == 625;
    if ($cmp2) {
      label = 4;
      break;
    } else {
      $kk_047 = 0;
      label = 5;
      break;
    }
   case 4:
    _mrb_random_init_genrand($t, 5489);
    $kk_047 = 0;
    label = 5;
    break;
   case 5:
    $arrayidx = $t + ($kk_047 << 2) | 0;
    $1 = HEAP32[$arrayidx >> 2] | 0;
    $and = $1 & -2147483648;
    $add = $kk_047 + 1 | 0;
    $arrayidx6 = $t + ($add << 2) | 0;
    $2 = HEAP32[$arrayidx6 >> 2] | 0;
    $and7 = $2 & 2147483646;
    $or = $and7 | $and;
    $add8 = $kk_047 + 397 | 0;
    $arrayidx10 = $t + ($add8 << 2) | 0;
    $3 = HEAP32[$arrayidx10 >> 2] | 0;
    $shr = $or >>> 1;
    $and11 = $2 & 1;
    $arrayidx12 = 78856 + ($and11 << 2) | 0;
    $4 = HEAP32[$arrayidx12 >> 2] | 0;
    $xor = $4 ^ $3;
    $xor13 = $xor ^ $shr;
    HEAP32[$arrayidx >> 2] = $xor13;
    $exitcond48 = ($add | 0) == 227;
    if ($exitcond48) {
      $kk_146 = 227;
      label = 6;
      break;
    } else {
      $kk_047 = $add;
      label = 5;
      break;
    }
   case 6:
    $arrayidx20 = $t + ($kk_146 << 2) | 0;
    $5 = HEAP32[$arrayidx20 >> 2] | 0;
    $and21 = $5 & -2147483648;
    $add22 = $kk_146 + 1 | 0;
    $arrayidx24 = $t + ($add22 << 2) | 0;
    $6 = HEAP32[$arrayidx24 >> 2] | 0;
    $and25 = $6 & 2147483646;
    $or26 = $and25 | $and21;
    $add27 = $kk_146 - 227 | 0;
    $arrayidx29 = $t + ($add27 << 2) | 0;
    $7 = HEAP32[$arrayidx29 >> 2] | 0;
    $shr30 = $or26 >>> 1;
    $and32 = $6 & 1;
    $arrayidx33 = 78856 + ($and32 << 2) | 0;
    $8 = HEAP32[$arrayidx33 >> 2] | 0;
    $xor31 = $8 ^ $7;
    $xor34 = $xor31 ^ $shr30;
    HEAP32[$arrayidx20 >> 2] = $xor34;
    $exitcond = ($add22 | 0) == 623;
    if ($exitcond) {
      label = 7;
      break;
    } else {
      $kk_146 = $add22;
      label = 6;
      break;
    }
   case 7:
    $arrayidx41 = $t + 2492 | 0;
    $9 = HEAP32[$arrayidx41 >> 2] | 0;
    $and42 = $9 & -2147483648;
    $arrayidx44 = $t | 0;
    $10 = HEAP32[$arrayidx44 >> 2] | 0;
    $and45 = $10 & 2147483646;
    $or46 = $and45 | $and42;
    $arrayidx48 = $t + 1584 | 0;
    $11 = HEAP32[$arrayidx48 >> 2] | 0;
    $shr49 = $or46 >>> 1;
    $and51 = $10 & 1;
    $arrayidx52 = 78856 + ($and51 << 2) | 0;
    $12 = HEAP32[$arrayidx52 >> 2] | 0;
    $xor50 = $12 ^ $11;
    $xor53 = $xor50 ^ $shr49;
    HEAP32[$arrayidx41 >> 2] = $xor53;
    HEAP32[$mti >> 2] = 0;
    label = 8;
    break;
   case 8:
    $13 = HEAP32[$mti >> 2] | 0;
    $inc59 = $13 + 1 | 0;
    HEAP32[$mti >> 2] = $inc59;
    $arrayidx61 = $t + ($13 << 2) | 0;
    $14 = HEAP32[$arrayidx61 >> 2] | 0;
    $shr62 = $14 >>> 11;
    $xor63 = $shr62 ^ $14;
    $shl = $xor63 << 7;
    $and64 = $shl & -1658038656;
    $xor65 = $and64 ^ $xor63;
    $shl66 = $xor65 << 15;
    $and67 = $shl66 & -272236544;
    $xor68 = $and67 ^ $xor65;
    $shr69 = $xor68 >>> 18;
    $xor70 = $shr69 ^ $xor68;
    $15 = $t + 2500 | 0;
    $gen_int = $15;
    HEAP32[$gen_int >> 2] = $xor70;
    return $xor70 | 0;
  }
  return 0;
}
function _mrb_random_genrand_real1($t) {
  $t = $t | 0;
  var $0 = 0, $mul = 0.0, $gen_dbl = 0;
  _mrb_random_genrand_int32($t);
  $0 = $t + 2500 | 0;
  $mul = +((HEAP32[$0 >> 2] | 0) >>> 0 >>> 0) * 2.3283064370807974e-10;
  $gen_dbl = $0 | 0;
  HEAPF64[tempDoublePtr >> 3] = $mul, HEAP32[$gen_dbl >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$gen_dbl + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  return +$mul;
}
function _genrand_int32() {
  var $0 = 0, $cmp = 0, $cmp1 = 0, $kk_028 = 0, $arrayidx = 0, $1 = 0, $and = 0, $add = 0, $arrayidx4 = 0, $2 = 0, $and5 = 0, $or = 0, $add6 = 0, $arrayidx7 = 0, $3 = 0, $shr = 0, $and8 = 0, $arrayidx9 = 0, $4 = 0, $xor = 0, $xor10 = 0, $exitcond29 = 0, $kk_127 = 0, $arrayidx15 = 0, $5 = 0, $and16 = 0, $add17 = 0, $arrayidx18 = 0, $6 = 0, $and19 = 0, $or20 = 0, $add21 = 0, $arrayidx22 = 0, $7 = 0, $shr23 = 0, $and25 = 0, $arrayidx26 = 0, $8 = 0, $xor24 = 0, $xor27 = 0, $exitcond = 0, $9 = 0, $and32 = 0, $10 = 0, $and33 = 0, $or34 = 0, $11 = 0, $shr35 = 0, $and37 = 0, $arrayidx38 = 0, $12 = 0, $xor36 = 0, $xor39 = 0, $13 = 0, $inc41 = 0, $arrayidx42 = 0, $14 = 0, $shr43 = 0, $xor44 = 0, $shl = 0, $and45 = 0, $xor46 = 0, $shl47 = 0, $and48 = 0, $xor49 = 0, $shr50 = 0, $xor51 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = HEAP32[15300] | 0;
    $cmp = ($0 | 0) > 623;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 8;
      break;
    }
   case 3:
    $cmp1 = ($0 | 0) == 625;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      $kk_028 = 0;
      label = 5;
      break;
    }
   case 4:
    _init_genrand(5489);
    $kk_028 = 0;
    label = 5;
    break;
   case 5:
    $arrayidx = 61212 + ($kk_028 << 2) | 0;
    $1 = HEAP32[$arrayidx >> 2] | 0;
    $and = $1 & -2147483648;
    $add = $kk_028 + 1 | 0;
    $arrayidx4 = 61212 + ($add << 2) | 0;
    $2 = HEAP32[$arrayidx4 >> 2] | 0;
    $and5 = $2 & 2147483646;
    $or = $and5 | $and;
    $add6 = $kk_028 + 397 | 0;
    $arrayidx7 = 61212 + ($add6 << 2) | 0;
    $3 = HEAP32[$arrayidx7 >> 2] | 0;
    $shr = $or >>> 1;
    $and8 = $2 & 1;
    $arrayidx9 = 79616 + ($and8 << 2) | 0;
    $4 = HEAP32[$arrayidx9 >> 2] | 0;
    $xor = $4 ^ $3;
    $xor10 = $xor ^ $shr;
    HEAP32[$arrayidx >> 2] = $xor10;
    $exitcond29 = ($add | 0) == 227;
    if ($exitcond29) {
      $kk_127 = 227;
      label = 6;
      break;
    } else {
      $kk_028 = $add;
      label = 5;
      break;
    }
   case 6:
    $arrayidx15 = 61212 + ($kk_127 << 2) | 0;
    $5 = HEAP32[$arrayidx15 >> 2] | 0;
    $and16 = $5 & -2147483648;
    $add17 = $kk_127 + 1 | 0;
    $arrayidx18 = 61212 + ($add17 << 2) | 0;
    $6 = HEAP32[$arrayidx18 >> 2] | 0;
    $and19 = $6 & 2147483646;
    $or20 = $and19 | $and16;
    $add21 = $kk_127 - 227 | 0;
    $arrayidx22 = 61212 + ($add21 << 2) | 0;
    $7 = HEAP32[$arrayidx22 >> 2] | 0;
    $shr23 = $or20 >>> 1;
    $and25 = $6 & 1;
    $arrayidx26 = 79616 + ($and25 << 2) | 0;
    $8 = HEAP32[$arrayidx26 >> 2] | 0;
    $xor24 = $8 ^ $7;
    $xor27 = $xor24 ^ $shr23;
    HEAP32[$arrayidx15 >> 2] = $xor27;
    $exitcond = ($add17 | 0) == 623;
    if ($exitcond) {
      label = 7;
      break;
    } else {
      $kk_127 = $add17;
      label = 6;
      break;
    }
   case 7:
    $9 = HEAP32[15926] | 0;
    $and32 = $9 & -2147483648;
    $10 = HEAP32[15303] | 0;
    $and33 = $10 & 2147483646;
    $or34 = $and33 | $and32;
    $11 = HEAP32[15699] | 0;
    $shr35 = $or34 >>> 1;
    $and37 = $10 & 1;
    $arrayidx38 = 79616 + ($and37 << 2) | 0;
    $12 = HEAP32[$arrayidx38 >> 2] | 0;
    $xor36 = $12 ^ $11;
    $xor39 = $xor36 ^ $shr35;
    HEAP32[15926] = $xor39;
    HEAP32[15300] = 0;
    label = 8;
    break;
   case 8:
    $13 = HEAP32[15300] | 0;
    $inc41 = $13 + 1 | 0;
    HEAP32[15300] = $inc41;
    $arrayidx42 = 61212 + ($13 << 2) | 0;
    $14 = HEAP32[$arrayidx42 >> 2] | 0;
    $shr43 = $14 >>> 11;
    $xor44 = $shr43 ^ $14;
    $shl = $xor44 << 7;
    $and45 = $shl & -1658038656;
    $xor46 = $and45 ^ $xor44;
    $shl47 = $xor46 << 15;
    $and48 = $shl47 & -272236544;
    $xor49 = $and48 ^ $xor46;
    $shr50 = $xor49 >>> 18;
    $xor51 = $shr50 ^ $xor49;
    return $xor51 | 0;
  }
  return 0;
}
function _genrand_real1() {
  return +(+((_genrand_int32() | 0) >>> 0 >>> 0) * 2.3283064370807974e-10);
}
function _malloc($bytes) {
  $bytes = $bytes | 0;
  var $cmp = 0, $cmp1 = 0, $add2 = 0, $and = 0, $cond = 0, $shr = 0, $0 = 0, $shr3 = 0, $and4 = 0, $cmp5 = 0, $neg = 0, $and7 = 0, $add8 = 0, $shl = 0, $arrayidx = 0, $1 = 0, $arrayidx_sum = 0, $2 = 0, $3 = 0, $fd9 = 0, $4 = 0, $cmp10 = 0, $shl12 = 0, $neg13 = 0, $and14 = 0, $5 = 0, $6 = 0, $cmp15 = 0, $bk = 0, $7 = 0, $cmp16 = 0, $shl22 = 0, $or23 = 0, $head = 0, $8 = 0, $add_ptr_sum104 = 0, $head25 = 0, $9 = 0, $10 = 0, $or26 = 0, $11 = 0, $12 = 0, $cmp29 = 0, $cmp31 = 0, $shl35 = 0, $shl37 = 0, $sub = 0, $or40 = 0, $and41 = 0, $sub42 = 0, $and43 = 0, $sub44 = 0, $shr45 = 0, $and46 = 0, $shr47 = 0, $shr48 = 0, $and49 = 0, $add50 = 0, $shr51 = 0, $shr52 = 0, $and53 = 0, $add54 = 0, $shr55 = 0, $shr56 = 0, $and57 = 0, $add58 = 0, $shr59 = 0, $shr60 = 0, $and61 = 0, $add62 = 0, $shr63 = 0, $add64 = 0, $shl65 = 0, $arrayidx66 = 0, $13 = 0, $arrayidx66_sum = 0, $14 = 0, $15 = 0, $fd69 = 0, $16 = 0, $cmp70 = 0, $shl72 = 0, $neg73 = 0, $and74 = 0, $17 = 0, $18 = 0, $cmp76 = 0, $bk78 = 0, $19 = 0, $cmp79 = 0, $shl90 = 0, $sub91 = 0, $or93 = 0, $head94 = 0, $20 = 0, $add_ptr95 = 0, $21 = 0, $or96 = 0, $add_ptr95_sum102 = 0, $head97 = 0, $22 = 0, $add_ptr98 = 0, $prev_foot = 0, $23 = 0, $cmp99 = 0, $24 = 0, $shr101 = 0, $shl102 = 0, $arrayidx103 = 0, $25 = 0, $26 = 0, $shl105 = 0, $and106 = 0, $tobool107 = 0, $or110 = 0, $arrayidx103_sum103 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $cmp113 = 0, $F104_0 = 0, $arrayidx103_sum = 0, $31 = 0, $bk122 = 0, $fd123 = 0, $bk124 = 0, $32 = 0, $33 = 0, $cmp128 = 0, $call = 0, $cmp130 = 0, $cmp138 = 0, $add143 = 0, $and144 = 0, $34 = 0, $cmp145 = 0, $call148 = 0, $cmp149 = 0, $nb_0 = 0, $35 = 0, $cmp155 = 0, $sub159 = 0, $36 = 0, $cmp161 = 0, $37 = 0, $add_ptr165 = 0, $38 = 0, $or166 = 0, $add_ptr165_sum = 0, $head167 = 0, $39 = 0, $add_ptr168 = 0, $prev_foot169 = 0, $or171 = 0, $head172 = 0, $or175 = 0, $head176 = 0, $40 = 0, $add_ptr177_sum = 0, $head178 = 0, $41 = 0, $42 = 0, $or179 = 0, $add_ptr181 = 0, $43 = 0, $44 = 0, $cmp183 = 0, $sub187 = 0, $45 = 0, $46 = 0, $add_ptr190 = 0, $47 = 0, $or191 = 0, $add_ptr190_sum = 0, $head192 = 0, $48 = 0, $or194 = 0, $head195 = 0, $add_ptr196 = 0, $49 = 0, $call199 = 0, $mem_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = $bytes >>> 0 < 245;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 30;
      break;
    }
   case 3:
    $cmp1 = $bytes >>> 0 < 11;
    if ($cmp1) {
      $cond = 16;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $add2 = $bytes + 11 | 0;
    $and = $add2 & -8;
    $cond = $and;
    label = 5;
    break;
   case 5:
    $shr = $cond >>> 3;
    $0 = HEAP32[27917] | 0;
    $shr3 = $0 >>> ($shr >>> 0);
    $and4 = $shr3 & 3;
    $cmp5 = ($and4 | 0) == 0;
    if ($cmp5) {
      label = 13;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $neg = $shr3 & 1;
    $and7 = $neg ^ 1;
    $add8 = $and7 + $shr | 0;
    $shl = $add8 << 1;
    $arrayidx = 111708 + ($shl << 2) | 0;
    $1 = $arrayidx;
    $arrayidx_sum = $shl + 2 | 0;
    $2 = 111708 + ($arrayidx_sum << 2) | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $fd9 = $3 + 8 | 0;
    $4 = HEAP32[$fd9 >> 2] | 0;
    $cmp10 = ($1 | 0) == ($4 | 0);
    if ($cmp10) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $shl12 = 1 << $add8;
    $neg13 = $shl12 ^ -1;
    $and14 = $0 & $neg13;
    HEAP32[27917] = $and14;
    label = 12;
    break;
   case 8:
    $5 = $4;
    $6 = HEAP32[27921] | 0;
    $cmp15 = $5 >>> 0 < $6 >>> 0;
    if ($cmp15) {
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $bk = $4 + 12 | 0;
    $7 = HEAP32[$bk >> 2] | 0;
    $cmp16 = ($7 | 0) == ($3 | 0);
    if ($cmp16) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    HEAP32[$bk >> 2] = $1;
    HEAP32[$2 >> 2] = $4;
    label = 12;
    break;
   case 11:
    _abort();
    return 0;
    return 0;
   case 12:
    $shl22 = $add8 << 3;
    $or23 = $shl22 | 3;
    $head = $3 + 4 | 0;
    HEAP32[$head >> 2] = $or23;
    $8 = $3;
    $add_ptr_sum104 = $shl22 | 4;
    $head25 = $8 + $add_ptr_sum104 | 0;
    $9 = $head25;
    $10 = HEAP32[$9 >> 2] | 0;
    $or26 = $10 | 1;
    HEAP32[$9 >> 2] = $or26;
    $11 = $fd9;
    $mem_0 = $11;
    label = 41;
    break;
   case 13:
    $12 = HEAP32[27919] | 0;
    $cmp29 = $cond >>> 0 > $12 >>> 0;
    if ($cmp29) {
      label = 14;
      break;
    } else {
      $nb_0 = $cond;
      label = 33;
      break;
    }
   case 14:
    $cmp31 = ($shr3 | 0) == 0;
    if ($cmp31) {
      label = 28;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $shl35 = $shr3 << $shr;
    $shl37 = 2 << $shr;
    $sub = -$shl37 | 0;
    $or40 = $shl37 | $sub;
    $and41 = $shl35 & $or40;
    $sub42 = -$and41 | 0;
    $and43 = $and41 & $sub42;
    $sub44 = $and43 - 1 | 0;
    $shr45 = $sub44 >>> 12;
    $and46 = $shr45 & 16;
    $shr47 = $sub44 >>> ($and46 >>> 0);
    $shr48 = $shr47 >>> 5;
    $and49 = $shr48 & 8;
    $add50 = $and49 | $and46;
    $shr51 = $shr47 >>> ($and49 >>> 0);
    $shr52 = $shr51 >>> 2;
    $and53 = $shr52 & 4;
    $add54 = $add50 | $and53;
    $shr55 = $shr51 >>> ($and53 >>> 0);
    $shr56 = $shr55 >>> 1;
    $and57 = $shr56 & 2;
    $add58 = $add54 | $and57;
    $shr59 = $shr55 >>> ($and57 >>> 0);
    $shr60 = $shr59 >>> 1;
    $and61 = $shr60 & 1;
    $add62 = $add58 | $and61;
    $shr63 = $shr59 >>> ($and61 >>> 0);
    $add64 = $add62 + $shr63 | 0;
    $shl65 = $add64 << 1;
    $arrayidx66 = 111708 + ($shl65 << 2) | 0;
    $13 = $arrayidx66;
    $arrayidx66_sum = $shl65 + 2 | 0;
    $14 = 111708 + ($arrayidx66_sum << 2) | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $fd69 = $15 + 8 | 0;
    $16 = HEAP32[$fd69 >> 2] | 0;
    $cmp70 = ($13 | 0) == ($16 | 0);
    if ($cmp70) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    $shl72 = 1 << $add64;
    $neg73 = $shl72 ^ -1;
    $and74 = $0 & $neg73;
    HEAP32[27917] = $and74;
    label = 21;
    break;
   case 17:
    $17 = $16;
    $18 = HEAP32[27921] | 0;
    $cmp76 = $17 >>> 0 < $18 >>> 0;
    if ($cmp76) {
      label = 20;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $bk78 = $16 + 12 | 0;
    $19 = HEAP32[$bk78 >> 2] | 0;
    $cmp79 = ($19 | 0) == ($15 | 0);
    if ($cmp79) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    HEAP32[$bk78 >> 2] = $13;
    HEAP32[$14 >> 2] = $16;
    label = 21;
    break;
   case 20:
    _abort();
    return 0;
    return 0;
   case 21:
    $shl90 = $add64 << 3;
    $sub91 = $shl90 - $cond | 0;
    $or93 = $cond | 3;
    $head94 = $15 + 4 | 0;
    HEAP32[$head94 >> 2] = $or93;
    $20 = $15;
    $add_ptr95 = $20 + $cond | 0;
    $21 = $add_ptr95;
    $or96 = $sub91 | 1;
    $add_ptr95_sum102 = $cond | 4;
    $head97 = $20 + $add_ptr95_sum102 | 0;
    $22 = $head97;
    HEAP32[$22 >> 2] = $or96;
    $add_ptr98 = $20 + $shl90 | 0;
    $prev_foot = $add_ptr98;
    HEAP32[$prev_foot >> 2] = $sub91;
    $23 = HEAP32[27919] | 0;
    $cmp99 = ($23 | 0) == 0;
    if ($cmp99) {
      label = 27;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $24 = HEAP32[27922] | 0;
    $shr101 = $23 >>> 3;
    $shl102 = $shr101 << 1;
    $arrayidx103 = 111708 + ($shl102 << 2) | 0;
    $25 = $arrayidx103;
    $26 = HEAP32[27917] | 0;
    $shl105 = 1 << $shr101;
    $and106 = $26 & $shl105;
    $tobool107 = ($and106 | 0) == 0;
    if ($tobool107) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    $or110 = $26 | $shl105;
    HEAP32[27917] = $or110;
    $F104_0 = $25;
    label = 26;
    break;
   case 24:
    $arrayidx103_sum103 = $shl102 + 2 | 0;
    $27 = 111708 + ($arrayidx103_sum103 << 2) | 0;
    $28 = HEAP32[$27 >> 2] | 0;
    $29 = $28;
    $30 = HEAP32[27921] | 0;
    $cmp113 = $29 >>> 0 < $30 >>> 0;
    if ($cmp113) {
      label = 25;
      break;
    } else {
      $F104_0 = $28;
      label = 26;
      break;
    }
   case 25:
    _abort();
    return 0;
    return 0;
   case 26:
    $arrayidx103_sum = $shl102 + 2 | 0;
    $31 = 111708 + ($arrayidx103_sum << 2) | 0;
    HEAP32[$31 >> 2] = $24;
    $bk122 = $F104_0 + 12 | 0;
    HEAP32[$bk122 >> 2] = $24;
    $fd123 = $24 + 8 | 0;
    HEAP32[$fd123 >> 2] = $F104_0;
    $bk124 = $24 + 12 | 0;
    HEAP32[$bk124 >> 2] = $25;
    label = 27;
    break;
   case 27:
    HEAP32[27919] = $sub91;
    HEAP32[27922] = $21;
    $32 = $fd69;
    $mem_0 = $32;
    label = 41;
    break;
   case 28:
    $33 = HEAP32[27918] | 0;
    $cmp128 = ($33 | 0) == 0;
    if ($cmp128) {
      $nb_0 = $cond;
      label = 33;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $call = _tmalloc_small($cond) | 0;
    $cmp130 = ($call | 0) == 0;
    if ($cmp130) {
      $nb_0 = $cond;
      label = 33;
      break;
    } else {
      $mem_0 = $call;
      label = 41;
      break;
    }
   case 30:
    $cmp138 = $bytes >>> 0 > 4294967231;
    if ($cmp138) {
      $nb_0 = -1;
      label = 33;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    $add143 = $bytes + 11 | 0;
    $and144 = $add143 & -8;
    $34 = HEAP32[27918] | 0;
    $cmp145 = ($34 | 0) == 0;
    if ($cmp145) {
      $nb_0 = $and144;
      label = 33;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $call148 = _tmalloc_large($and144) | 0;
    $cmp149 = ($call148 | 0) == 0;
    if ($cmp149) {
      $nb_0 = $and144;
      label = 33;
      break;
    } else {
      $mem_0 = $call148;
      label = 41;
      break;
    }
   case 33:
    $35 = HEAP32[27919] | 0;
    $cmp155 = $nb_0 >>> 0 > $35 >>> 0;
    if ($cmp155) {
      label = 38;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    $sub159 = $35 - $nb_0 | 0;
    $36 = HEAP32[27922] | 0;
    $cmp161 = $sub159 >>> 0 > 15;
    if ($cmp161) {
      label = 35;
      break;
    } else {
      label = 36;
      break;
    }
   case 35:
    $37 = $36;
    $add_ptr165 = $37 + $nb_0 | 0;
    $38 = $add_ptr165;
    HEAP32[27922] = $38;
    HEAP32[27919] = $sub159;
    $or166 = $sub159 | 1;
    $add_ptr165_sum = $nb_0 + 4 | 0;
    $head167 = $37 + $add_ptr165_sum | 0;
    $39 = $head167;
    HEAP32[$39 >> 2] = $or166;
    $add_ptr168 = $37 + $35 | 0;
    $prev_foot169 = $add_ptr168;
    HEAP32[$prev_foot169 >> 2] = $sub159;
    $or171 = $nb_0 | 3;
    $head172 = $36 + 4 | 0;
    HEAP32[$head172 >> 2] = $or171;
    label = 37;
    break;
   case 36:
    HEAP32[27919] = 0;
    HEAP32[27922] = 0;
    $or175 = $35 | 3;
    $head176 = $36 + 4 | 0;
    HEAP32[$head176 >> 2] = $or175;
    $40 = $36;
    $add_ptr177_sum = $35 + 4 | 0;
    $head178 = $40 + $add_ptr177_sum | 0;
    $41 = $head178;
    $42 = HEAP32[$41 >> 2] | 0;
    $or179 = $42 | 1;
    HEAP32[$41 >> 2] = $or179;
    label = 37;
    break;
   case 37:
    $add_ptr181 = $36 + 8 | 0;
    $43 = $add_ptr181;
    $mem_0 = $43;
    label = 41;
    break;
   case 38:
    $44 = HEAP32[27920] | 0;
    $cmp183 = $nb_0 >>> 0 < $44 >>> 0;
    if ($cmp183) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    $sub187 = $44 - $nb_0 | 0;
    HEAP32[27920] = $sub187;
    $45 = HEAP32[27923] | 0;
    $46 = $45;
    $add_ptr190 = $46 + $nb_0 | 0;
    $47 = $add_ptr190;
    HEAP32[27923] = $47;
    $or191 = $sub187 | 1;
    $add_ptr190_sum = $nb_0 + 4 | 0;
    $head192 = $46 + $add_ptr190_sum | 0;
    $48 = $head192;
    HEAP32[$48 >> 2] = $or191;
    $or194 = $nb_0 | 3;
    $head195 = $45 + 4 | 0;
    HEAP32[$head195 >> 2] = $or194;
    $add_ptr196 = $45 + 8 | 0;
    $49 = $add_ptr196;
    $mem_0 = $49;
    label = 41;
    break;
   case 40:
    $call199 = _sys_alloc($nb_0) | 0;
    $mem_0 = $call199;
    label = 41;
    break;
   case 41:
    return $mem_0 | 0;
  }
  return 0;
}
function _tmalloc_small($nb) {
  $nb = $nb | 0;
  var $0 = 0, $sub = 0, $and = 0, $sub2 = 0, $shr = 0, $and3 = 0, $shr4 = 0, $shr5 = 0, $and6 = 0, $add = 0, $shr7 = 0, $shr8 = 0, $and9 = 0, $add10 = 0, $shr11 = 0, $shr12 = 0, $and13 = 0, $add14 = 0, $shr15 = 0, $shr16 = 0, $and17 = 0, $add18 = 0, $shr19 = 0, $add20 = 0, $arrayidx = 0, $1 = 0, $head = 0, $2 = 0, $and21 = 0, $sub22 = 0, $rsize_0 = 0, $v_0 = 0, $t_0 = 0, $arrayidx23 = 0, $3 = 0, $cmp = 0, $arrayidx27 = 0, $4 = 0, $cmp28 = 0, $cond6 = 0, $head29 = 0, $5 = 0, $and30 = 0, $sub31 = 0, $cmp32 = 0, $sub31_rsize_0 = 0, $cond_v_0 = 0, $6 = 0, $7 = 0, $cmp33 = 0, $add_ptr = 0, $8 = 0, $cmp35 = 0, $parent = 0, $9 = 0, $bk = 0, $10 = 0, $cmp40 = 0, $fd = 0, $11 = 0, $12 = 0, $cmp45 = 0, $bk47 = 0, $13 = 0, $cmp48 = 0, $fd50 = 0, $14 = 0, $cmp51 = 0, $arrayidx61 = 0, $15 = 0, $cmp62 = 0, $arrayidx65 = 0, $16 = 0, $cmp66 = 0, $RP_0 = 0, $R_0 = 0, $arrayidx71 = 0, $17 = 0, $cmp72 = 0, $arrayidx75 = 0, $18 = 0, $cmp76 = 0, $CP_0 = 0, $19 = 0, $20 = 0, $21 = 0, $cmp81 = 0, $R_1 = 0, $cmp90 = 0, $index = 0, $22 = 0, $arrayidx94 = 0, $23 = 0, $cmp95 = 0, $cond4 = 0, $24 = 0, $shl = 0, $neg = 0, $25 = 0, $and103 = 0, $26 = 0, $27 = 0, $cmp107 = 0, $arrayidx113 = 0, $28 = 0, $cmp114 = 0, $arrayidx121 = 0, $cmp126 = 0, $29 = 0, $30 = 0, $cmp130 = 0, $parent135 = 0, $arrayidx137 = 0, $31 = 0, $cmp138 = 0, $32 = 0, $33 = 0, $cmp142 = 0, $arrayidx148 = 0, $parent149 = 0, $arrayidx154 = 0, $34 = 0, $cmp155 = 0, $35 = 0, $36 = 0, $cmp159 = 0, $arrayidx165 = 0, $parent166 = 0, $cmp174 = 0, $add177 = 0, $or178 = 0, $head179 = 0, $add_ptr181_sum = 0, $head182 = 0, $37 = 0, $38 = 0, $or183 = 0, $or186 = 0, $head187 = 0, $or188 = 0, $add_ptr_sum = 0, $head189 = 0, $39 = 0, $add_ptr_sum1 = 0, $add_ptr190 = 0, $prev_foot = 0, $40 = 0, $cmp191 = 0, $41 = 0, $shr194 = 0, $shl195 = 0, $arrayidx196 = 0, $42 = 0, $43 = 0, $shl198 = 0, $and199 = 0, $tobool200 = 0, $or204 = 0, $arrayidx196_sum2 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $cmp208 = 0, $F197_0 = 0, $arrayidx196_sum = 0, $48 = 0, $bk218 = 0, $fd219 = 0, $bk220 = 0, $add_ptr225 = 0, $49 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = HEAP32[27918] | 0;
    $sub = -$0 | 0;
    $and = $0 & $sub;
    $sub2 = $and - 1 | 0;
    $shr = $sub2 >>> 12;
    $and3 = $shr & 16;
    $shr4 = $sub2 >>> ($and3 >>> 0);
    $shr5 = $shr4 >>> 5;
    $and6 = $shr5 & 8;
    $add = $and6 | $and3;
    $shr7 = $shr4 >>> ($and6 >>> 0);
    $shr8 = $shr7 >>> 2;
    $and9 = $shr8 & 4;
    $add10 = $add | $and9;
    $shr11 = $shr7 >>> ($and9 >>> 0);
    $shr12 = $shr11 >>> 1;
    $and13 = $shr12 & 2;
    $add14 = $add10 | $and13;
    $shr15 = $shr11 >>> ($and13 >>> 0);
    $shr16 = $shr15 >>> 1;
    $and17 = $shr16 & 1;
    $add18 = $add14 | $and17;
    $shr19 = $shr15 >>> ($and17 >>> 0);
    $add20 = $add18 + $shr19 | 0;
    $arrayidx = 111972 + ($add20 << 2) | 0;
    $1 = HEAP32[$arrayidx >> 2] | 0;
    $head = $1 + 4 | 0;
    $2 = HEAP32[$head >> 2] | 0;
    $and21 = $2 & -8;
    $sub22 = $and21 - $nb | 0;
    $t_0 = $1;
    $v_0 = $1;
    $rsize_0 = $sub22;
    label = 3;
    break;
   case 3:
    $arrayidx23 = $t_0 + 16 | 0;
    $3 = HEAP32[$arrayidx23 >> 2] | 0;
    $cmp = ($3 | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      $cond6 = $3;
      label = 5;
      break;
    }
   case 4:
    $arrayidx27 = $t_0 + 20 | 0;
    $4 = HEAP32[$arrayidx27 >> 2] | 0;
    $cmp28 = ($4 | 0) == 0;
    if ($cmp28) {
      label = 6;
      break;
    } else {
      $cond6 = $4;
      label = 5;
      break;
    }
   case 5:
    $head29 = $cond6 + 4 | 0;
    $5 = HEAP32[$head29 >> 2] | 0;
    $and30 = $5 & -8;
    $sub31 = $and30 - $nb | 0;
    $cmp32 = $sub31 >>> 0 < $rsize_0 >>> 0;
    $sub31_rsize_0 = $cmp32 ? $sub31 : $rsize_0;
    $cond_v_0 = $cmp32 ? $cond6 : $v_0;
    $t_0 = $cond6;
    $v_0 = $cond_v_0;
    $rsize_0 = $sub31_rsize_0;
    label = 3;
    break;
   case 6:
    $6 = $v_0;
    $7 = HEAP32[27921] | 0;
    $cmp33 = $6 >>> 0 < $7 >>> 0;
    if ($cmp33) {
      label = 52;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $add_ptr = $6 + $nb | 0;
    $8 = $add_ptr;
    $cmp35 = $6 >>> 0 < $add_ptr >>> 0;
    if ($cmp35) {
      label = 8;
      break;
    } else {
      label = 52;
      break;
    }
   case 8:
    $parent = $v_0 + 24 | 0;
    $9 = HEAP32[$parent >> 2] | 0;
    $bk = $v_0 + 12 | 0;
    $10 = HEAP32[$bk >> 2] | 0;
    $cmp40 = ($10 | 0) == ($v_0 | 0);
    if ($cmp40) {
      label = 14;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $fd = $v_0 + 8 | 0;
    $11 = HEAP32[$fd >> 2] | 0;
    $12 = $11;
    $cmp45 = $12 >>> 0 < $7 >>> 0;
    if ($cmp45) {
      label = 13;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $bk47 = $11 + 12 | 0;
    $13 = HEAP32[$bk47 >> 2] | 0;
    $cmp48 = ($13 | 0) == ($v_0 | 0);
    if ($cmp48) {
      label = 11;
      break;
    } else {
      label = 13;
      break;
    }
   case 11:
    $fd50 = $10 + 8 | 0;
    $14 = HEAP32[$fd50 >> 2] | 0;
    $cmp51 = ($14 | 0) == ($v_0 | 0);
    if ($cmp51) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    HEAP32[$bk47 >> 2] = $10;
    HEAP32[$fd50 >> 2] = $11;
    $R_1 = $10;
    label = 22;
    break;
   case 13:
    _abort();
    return 0;
    return 0;
   case 14:
    $arrayidx61 = $v_0 + 20 | 0;
    $15 = HEAP32[$arrayidx61 >> 2] | 0;
    $cmp62 = ($15 | 0) == 0;
    if ($cmp62) {
      label = 15;
      break;
    } else {
      $R_0 = $15;
      $RP_0 = $arrayidx61;
      label = 16;
      break;
    }
   case 15:
    $arrayidx65 = $v_0 + 16 | 0;
    $16 = HEAP32[$arrayidx65 >> 2] | 0;
    $cmp66 = ($16 | 0) == 0;
    if ($cmp66) {
      $R_1 = 0;
      label = 22;
      break;
    } else {
      $R_0 = $16;
      $RP_0 = $arrayidx65;
      label = 16;
      break;
    }
   case 16:
    $arrayidx71 = $R_0 + 20 | 0;
    $17 = HEAP32[$arrayidx71 >> 2] | 0;
    $cmp72 = ($17 | 0) == 0;
    if ($cmp72) {
      label = 17;
      break;
    } else {
      $CP_0 = $arrayidx71;
      label = 18;
      break;
    }
   case 17:
    $arrayidx75 = $R_0 + 16 | 0;
    $18 = HEAP32[$arrayidx75 >> 2] | 0;
    $cmp76 = ($18 | 0) == 0;
    if ($cmp76) {
      label = 19;
      break;
    } else {
      $CP_0 = $arrayidx75;
      label = 18;
      break;
    }
   case 18:
    $19 = HEAP32[$CP_0 >> 2] | 0;
    $R_0 = $19;
    $RP_0 = $CP_0;
    label = 16;
    break;
   case 19:
    $20 = $RP_0;
    $21 = HEAP32[27921] | 0;
    $cmp81 = $20 >>> 0 < $21 >>> 0;
    if ($cmp81) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    HEAP32[$RP_0 >> 2] = 0;
    $R_1 = $R_0;
    label = 22;
    break;
   case 21:
    _abort();
    return 0;
    return 0;
   case 22:
    $cmp90 = ($9 | 0) == 0;
    if ($cmp90) {
      label = 42;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $index = $v_0 + 28 | 0;
    $22 = HEAP32[$index >> 2] | 0;
    $arrayidx94 = 111972 + ($22 << 2) | 0;
    $23 = HEAP32[$arrayidx94 >> 2] | 0;
    $cmp95 = ($v_0 | 0) == ($23 | 0);
    if ($cmp95) {
      label = 24;
      break;
    } else {
      label = 26;
      break;
    }
   case 24:
    HEAP32[$arrayidx94 >> 2] = $R_1;
    $cond4 = ($R_1 | 0) == 0;
    if ($cond4) {
      label = 25;
      break;
    } else {
      label = 32;
      break;
    }
   case 25:
    $24 = HEAP32[$index >> 2] | 0;
    $shl = 1 << $24;
    $neg = $shl ^ -1;
    $25 = HEAP32[27918] | 0;
    $and103 = $25 & $neg;
    HEAP32[27918] = $and103;
    label = 42;
    break;
   case 26:
    $26 = $9;
    $27 = HEAP32[27921] | 0;
    $cmp107 = $26 >>> 0 < $27 >>> 0;
    if ($cmp107) {
      label = 30;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $arrayidx113 = $9 + 16 | 0;
    $28 = HEAP32[$arrayidx113 >> 2] | 0;
    $cmp114 = ($28 | 0) == ($v_0 | 0);
    if ($cmp114) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    HEAP32[$arrayidx113 >> 2] = $R_1;
    label = 31;
    break;
   case 29:
    $arrayidx121 = $9 + 20 | 0;
    HEAP32[$arrayidx121 >> 2] = $R_1;
    label = 31;
    break;
   case 30:
    _abort();
    return 0;
    return 0;
   case 31:
    $cmp126 = ($R_1 | 0) == 0;
    if ($cmp126) {
      label = 42;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $29 = $R_1;
    $30 = HEAP32[27921] | 0;
    $cmp130 = $29 >>> 0 < $30 >>> 0;
    if ($cmp130) {
      label = 41;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    $parent135 = $R_1 + 24 | 0;
    HEAP32[$parent135 >> 2] = $9;
    $arrayidx137 = $v_0 + 16 | 0;
    $31 = HEAP32[$arrayidx137 >> 2] | 0;
    $cmp138 = ($31 | 0) == 0;
    if ($cmp138) {
      label = 37;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    $32 = $31;
    $33 = HEAP32[27921] | 0;
    $cmp142 = $32 >>> 0 < $33 >>> 0;
    if ($cmp142) {
      label = 36;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $arrayidx148 = $R_1 + 16 | 0;
    HEAP32[$arrayidx148 >> 2] = $31;
    $parent149 = $31 + 24 | 0;
    HEAP32[$parent149 >> 2] = $R_1;
    label = 37;
    break;
   case 36:
    _abort();
    return 0;
    return 0;
   case 37:
    $arrayidx154 = $v_0 + 20 | 0;
    $34 = HEAP32[$arrayidx154 >> 2] | 0;
    $cmp155 = ($34 | 0) == 0;
    if ($cmp155) {
      label = 42;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    $35 = $34;
    $36 = HEAP32[27921] | 0;
    $cmp159 = $35 >>> 0 < $36 >>> 0;
    if ($cmp159) {
      label = 40;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    $arrayidx165 = $R_1 + 20 | 0;
    HEAP32[$arrayidx165 >> 2] = $34;
    $parent166 = $34 + 24 | 0;
    HEAP32[$parent166 >> 2] = $R_1;
    label = 42;
    break;
   case 40:
    _abort();
    return 0;
    return 0;
   case 41:
    _abort();
    return 0;
    return 0;
   case 42:
    $cmp174 = $rsize_0 >>> 0 < 16;
    if ($cmp174) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    $add177 = $rsize_0 + $nb | 0;
    $or178 = $add177 | 3;
    $head179 = $v_0 + 4 | 0;
    HEAP32[$head179 >> 2] = $or178;
    $add_ptr181_sum = $add177 + 4 | 0;
    $head182 = $6 + $add_ptr181_sum | 0;
    $37 = $head182;
    $38 = HEAP32[$37 >> 2] | 0;
    $or183 = $38 | 1;
    HEAP32[$37 >> 2] = $or183;
    label = 51;
    break;
   case 44:
    $or186 = $nb | 3;
    $head187 = $v_0 + 4 | 0;
    HEAP32[$head187 >> 2] = $or186;
    $or188 = $rsize_0 | 1;
    $add_ptr_sum = $nb + 4 | 0;
    $head189 = $6 + $add_ptr_sum | 0;
    $39 = $head189;
    HEAP32[$39 >> 2] = $or188;
    $add_ptr_sum1 = $rsize_0 + $nb | 0;
    $add_ptr190 = $6 + $add_ptr_sum1 | 0;
    $prev_foot = $add_ptr190;
    HEAP32[$prev_foot >> 2] = $rsize_0;
    $40 = HEAP32[27919] | 0;
    $cmp191 = ($40 | 0) == 0;
    if ($cmp191) {
      label = 50;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    $41 = HEAP32[27922] | 0;
    $shr194 = $40 >>> 3;
    $shl195 = $shr194 << 1;
    $arrayidx196 = 111708 + ($shl195 << 2) | 0;
    $42 = $arrayidx196;
    $43 = HEAP32[27917] | 0;
    $shl198 = 1 << $shr194;
    $and199 = $43 & $shl198;
    $tobool200 = ($and199 | 0) == 0;
    if ($tobool200) {
      label = 46;
      break;
    } else {
      label = 47;
      break;
    }
   case 46:
    $or204 = $43 | $shl198;
    HEAP32[27917] = $or204;
    $F197_0 = $42;
    label = 49;
    break;
   case 47:
    $arrayidx196_sum2 = $shl195 + 2 | 0;
    $44 = 111708 + ($arrayidx196_sum2 << 2) | 0;
    $45 = HEAP32[$44 >> 2] | 0;
    $46 = $45;
    $47 = HEAP32[27921] | 0;
    $cmp208 = $46 >>> 0 < $47 >>> 0;
    if ($cmp208) {
      label = 48;
      break;
    } else {
      $F197_0 = $45;
      label = 49;
      break;
    }
   case 48:
    _abort();
    return 0;
    return 0;
   case 49:
    $arrayidx196_sum = $shl195 + 2 | 0;
    $48 = 111708 + ($arrayidx196_sum << 2) | 0;
    HEAP32[$48 >> 2] = $41;
    $bk218 = $F197_0 + 12 | 0;
    HEAP32[$bk218 >> 2] = $41;
    $fd219 = $41 + 8 | 0;
    HEAP32[$fd219 >> 2] = $F197_0;
    $bk220 = $41 + 12 | 0;
    HEAP32[$bk220 >> 2] = $42;
    label = 50;
    break;
   case 50:
    HEAP32[27919] = $rsize_0;
    HEAP32[27922] = $8;
    label = 51;
    break;
   case 51:
    $add_ptr225 = $v_0 + 8 | 0;
    $49 = $add_ptr225;
    return $49 | 0;
   case 52:
    _abort();
    return 0;
    return 0;
  }
  return 0;
}
function _tmalloc_large($nb) {
  $nb = $nb | 0;
  var $sub = 0, $shr = 0, $cmp = 0, $cmp1 = 0, $sub4 = 0, $shr5 = 0, $and = 0, $shl = 0, $sub6 = 0, $shr7 = 0, $and8 = 0, $add = 0, $shl9 = 0, $sub10 = 0, $shr11 = 0, $and12 = 0, $add13 = 0, $sub14 = 0, $shl15 = 0, $shr16 = 0, $add17 = 0, $shl18 = 0, $add19 = 0, $shr20 = 0, $and21 = 0, $add22 = 0, $idx_0 = 0, $arrayidx = 0, $0 = 0, $cmp24 = 0, $cmp26 = 0, $shr27 = 0, $sub30 = 0, $cond = 0, $shl31 = 0, $rst_0 = 0, $sizebits_0 = 0, $t_0 = 0, $rsize_0 = 0, $v_0 = 0, $head = 0, $1 = 0, $and32 = 0, $sub33 = 0, $cmp34 = 0, $cmp36 = 0, $rsize_1 = 0, $v_1 = 0, $arrayidx40 = 0, $2 = 0, $shr41 = 0, $arrayidx44 = 0, $3 = 0, $cmp45 = 0, $cmp46 = 0, $or_cond = 0, $rst_1 = 0, $cmp49 = 0, $shl52 = 0, $t_1 = 0, $rsize_2 = 0, $v_2 = 0, $cmp54 = 0, $cmp56 = 0, $or_cond16 = 0, $shl59 = 0, $sub62 = 0, $or = 0, $4 = 0, $and63 = 0, $cmp64 = 0, $sub66 = 0, $and67 = 0, $sub69 = 0, $shr71 = 0, $and72 = 0, $shr74 = 0, $shr75 = 0, $and76 = 0, $add77 = 0, $shr78 = 0, $shr79 = 0, $and80 = 0, $add81 = 0, $shr82 = 0, $shr83 = 0, $and84 = 0, $add85 = 0, $shr86 = 0, $shr87 = 0, $and88 = 0, $add89 = 0, $shr90 = 0, $add91 = 0, $arrayidx93 = 0, $5 = 0, $t_2_ph = 0, $cmp9621 = 0, $v_324 = 0, $rsize_323 = 0, $t_222 = 0, $head98 = 0, $6 = 0, $and99 = 0, $sub100 = 0, $cmp101 = 0, $sub100_rsize_3 = 0, $t_2_v_3 = 0, $arrayidx105 = 0, $7 = 0, $cmp106 = 0, $arrayidx112 = 0, $8 = 0, $cmp96 = 0, $v_3_lcssa = 0, $rsize_3_lcssa = 0, $cmp115 = 0, $9 = 0, $sub117 = 0, $cmp118 = 0, $10 = 0, $11 = 0, $cmp120 = 0, $add_ptr = 0, $12 = 0, $cmp122 = 0, $parent = 0, $13 = 0, $bk = 0, $14 = 0, $cmp127 = 0, $fd = 0, $15 = 0, $16 = 0, $cmp132 = 0, $bk135 = 0, $17 = 0, $cmp136 = 0, $fd138 = 0, $18 = 0, $cmp139 = 0, $arrayidx150 = 0, $19 = 0, $cmp151 = 0, $arrayidx154 = 0, $20 = 0, $cmp155 = 0, $RP_0 = 0, $R_0 = 0, $arrayidx160 = 0, $21 = 0, $cmp161 = 0, $arrayidx164 = 0, $22 = 0, $cmp165 = 0, $CP_0 = 0, $23 = 0, $24 = 0, $25 = 0, $cmp170 = 0, $R_1 = 0, $cmp179 = 0, $index = 0, $26 = 0, $arrayidx183 = 0, $27 = 0, $cmp184 = 0, $cond18 = 0, $28 = 0, $shl191 = 0, $neg = 0, $29 = 0, $and193 = 0, $30 = 0, $31 = 0, $cmp197 = 0, $arrayidx203 = 0, $32 = 0, $cmp204 = 0, $arrayidx211 = 0, $cmp216 = 0, $33 = 0, $34 = 0, $cmp220 = 0, $parent225 = 0, $arrayidx227 = 0, $35 = 0, $cmp228 = 0, $36 = 0, $37 = 0, $cmp232 = 0, $arrayidx238 = 0, $parent239 = 0, $arrayidx244 = 0, $38 = 0, $cmp245 = 0, $39 = 0, $40 = 0, $cmp249 = 0, $arrayidx255 = 0, $parent256 = 0, $cmp264 = 0, $add267 = 0, $or269 = 0, $head270 = 0, $add_ptr272_sum = 0, $head273 = 0, $41 = 0, $42 = 0, $or274 = 0, $or277 = 0, $head278 = 0, $or279 = 0, $add_ptr_sum = 0, $head280 = 0, $43 = 0, $add_ptr_sum1 = 0, $add_ptr281 = 0, $prev_foot = 0, $shr282 = 0, $cmp283 = 0, $shl287 = 0, $arrayidx288 = 0, $44 = 0, $45 = 0, $shl290 = 0, $and291 = 0, $tobool292 = 0, $or296 = 0, $arrayidx288_sum15 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $cmp300 = 0, $F289_0 = 0, $arrayidx288_sum = 0, $50 = 0, $bk310 = 0, $add_ptr_sum13 = 0, $fd311 = 0, $51 = 0, $add_ptr_sum14 = 0, $bk312 = 0, $52 = 0, $53 = 0, $shr317 = 0, $cmp318 = 0, $cmp322 = 0, $sub328 = 0, $shr329 = 0, $and330 = 0, $shl332 = 0, $sub333 = 0, $shr334 = 0, $and335 = 0, $add336 = 0, $shl337 = 0, $sub338 = 0, $shr339 = 0, $and340 = 0, $add341 = 0, $sub342 = 0, $shl343 = 0, $shr344 = 0, $add345 = 0, $shl346 = 0, $add347 = 0, $shr348 = 0, $and349 = 0, $add350 = 0, $I315_0 = 0, $arrayidx354 = 0, $add_ptr_sum2 = 0, $index355 = 0, $54 = 0, $add_ptr_sum3 = 0, $child356 = 0, $child356_sum = 0, $arrayidx357 = 0, $55 = 0, $arrayidx359 = 0, $56 = 0, $shl361 = 0, $and362 = 0, $tobool363 = 0, $or367 = 0, $57 = 0, $add_ptr_sum4 = 0, $parent368 = 0, $58 = 0, $add_ptr_sum5 = 0, $bk369 = 0, $59 = 0, $add_ptr_sum6 = 0, $fd370 = 0, $60 = 0, $61 = 0, $cmp373 = 0, $shr377 = 0, $sub380 = 0, $cond382 = 0, $shl383 = 0, $T_0 = 0, $K372_0 = 0, $head385 = 0, $62 = 0, $and386 = 0, $cmp387 = 0, $shr390 = 0, $arrayidx393 = 0, $63 = 0, $cmp395 = 0, $shl394 = 0, $64 = 0, $65 = 0, $cmp400 = 0, $add_ptr_sum10 = 0, $parent405 = 0, $66 = 0, $add_ptr_sum11 = 0, $bk406 = 0, $67 = 0, $add_ptr_sum12 = 0, $fd407 = 0, $68 = 0, $fd412 = 0, $69 = 0, $70 = 0, $71 = 0, $cmp414 = 0, $72 = 0, $cmp418 = 0, $bk425 = 0, $add_ptr_sum7 = 0, $fd427 = 0, $73 = 0, $add_ptr_sum8 = 0, $bk428 = 0, $74 = 0, $add_ptr_sum9 = 0, $parent429 = 0, $75 = 0, $add_ptr436 = 0, $76 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $sub = -$nb | 0;
    $shr = $nb >>> 8;
    $cmp = ($shr | 0) == 0;
    if ($cmp) {
      $idx_0 = 0;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $cmp1 = $nb >>> 0 > 16777215;
    if ($cmp1) {
      $idx_0 = 31;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $sub4 = $shr + 1048320 | 0;
    $shr5 = $sub4 >>> 16;
    $and = $shr5 & 8;
    $shl = $shr << $and;
    $sub6 = $shl + 520192 | 0;
    $shr7 = $sub6 >>> 16;
    $and8 = $shr7 & 4;
    $add = $and8 | $and;
    $shl9 = $shl << $and8;
    $sub10 = $shl9 + 245760 | 0;
    $shr11 = $sub10 >>> 16;
    $and12 = $shr11 & 2;
    $add13 = $add | $and12;
    $sub14 = 14 - $add13 | 0;
    $shl15 = $shl9 << $and12;
    $shr16 = $shl15 >>> 15;
    $add17 = $sub14 + $shr16 | 0;
    $shl18 = $add17 << 1;
    $add19 = $add17 + 7 | 0;
    $shr20 = $nb >>> ($add19 >>> 0);
    $and21 = $shr20 & 1;
    $add22 = $and21 | $shl18;
    $idx_0 = $add22;
    label = 5;
    break;
   case 5:
    $arrayidx = 111972 + ($idx_0 << 2) | 0;
    $0 = HEAP32[$arrayidx >> 2] | 0;
    $cmp24 = ($0 | 0) == 0;
    if ($cmp24) {
      $v_2 = 0;
      $rsize_2 = $sub;
      $t_1 = 0;
      label = 12;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $cmp26 = ($idx_0 | 0) == 31;
    if ($cmp26) {
      $cond = 0;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $shr27 = $idx_0 >>> 1;
    $sub30 = 25 - $shr27 | 0;
    $cond = $sub30;
    label = 8;
    break;
   case 8:
    $shl31 = $nb << $cond;
    $v_0 = 0;
    $rsize_0 = $sub;
    $t_0 = $0;
    $sizebits_0 = $shl31;
    $rst_0 = 0;
    label = 9;
    break;
   case 9:
    $head = $t_0 + 4 | 0;
    $1 = HEAP32[$head >> 2] | 0;
    $and32 = $1 & -8;
    $sub33 = $and32 - $nb | 0;
    $cmp34 = $sub33 >>> 0 < $rsize_0 >>> 0;
    if ($cmp34) {
      label = 10;
      break;
    } else {
      $v_1 = $v_0;
      $rsize_1 = $rsize_0;
      label = 11;
      break;
    }
   case 10:
    $cmp36 = ($and32 | 0) == ($nb | 0);
    if ($cmp36) {
      $v_2 = $t_0;
      $rsize_2 = $sub33;
      $t_1 = $t_0;
      label = 12;
      break;
    } else {
      $v_1 = $t_0;
      $rsize_1 = $sub33;
      label = 11;
      break;
    }
   case 11:
    $arrayidx40 = $t_0 + 20 | 0;
    $2 = HEAP32[$arrayidx40 >> 2] | 0;
    $shr41 = $sizebits_0 >>> 31;
    $arrayidx44 = $t_0 + 16 + ($shr41 << 2) | 0;
    $3 = HEAP32[$arrayidx44 >> 2] | 0;
    $cmp45 = ($2 | 0) == 0;
    $cmp46 = ($2 | 0) == ($3 | 0);
    $or_cond = $cmp45 | $cmp46;
    $rst_1 = $or_cond ? $rst_0 : $2;
    $cmp49 = ($3 | 0) == 0;
    $shl52 = $sizebits_0 << 1;
    if ($cmp49) {
      $v_2 = $v_1;
      $rsize_2 = $rsize_1;
      $t_1 = $rst_1;
      label = 12;
      break;
    } else {
      $v_0 = $v_1;
      $rsize_0 = $rsize_1;
      $t_0 = $3;
      $sizebits_0 = $shl52;
      $rst_0 = $rst_1;
      label = 9;
      break;
    }
   case 12:
    $cmp54 = ($t_1 | 0) == 0;
    $cmp56 = ($v_2 | 0) == 0;
    $or_cond16 = $cmp54 & $cmp56;
    if ($or_cond16) {
      label = 13;
      break;
    } else {
      $t_2_ph = $t_1;
      label = 15;
      break;
    }
   case 13:
    $shl59 = 2 << $idx_0;
    $sub62 = -$shl59 | 0;
    $or = $shl59 | $sub62;
    $4 = HEAP32[27918] | 0;
    $and63 = $4 & $or;
    $cmp64 = ($and63 | 0) == 0;
    if ($cmp64) {
      $t_2_ph = $t_1;
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $sub66 = -$and63 | 0;
    $and67 = $and63 & $sub66;
    $sub69 = $and67 - 1 | 0;
    $shr71 = $sub69 >>> 12;
    $and72 = $shr71 & 16;
    $shr74 = $sub69 >>> ($and72 >>> 0);
    $shr75 = $shr74 >>> 5;
    $and76 = $shr75 & 8;
    $add77 = $and76 | $and72;
    $shr78 = $shr74 >>> ($and76 >>> 0);
    $shr79 = $shr78 >>> 2;
    $and80 = $shr79 & 4;
    $add81 = $add77 | $and80;
    $shr82 = $shr78 >>> ($and80 >>> 0);
    $shr83 = $shr82 >>> 1;
    $and84 = $shr83 & 2;
    $add85 = $add81 | $and84;
    $shr86 = $shr82 >>> ($and84 >>> 0);
    $shr87 = $shr86 >>> 1;
    $and88 = $shr87 & 1;
    $add89 = $add85 | $and88;
    $shr90 = $shr86 >>> ($and88 >>> 0);
    $add91 = $add89 + $shr90 | 0;
    $arrayidx93 = 111972 + ($add91 << 2) | 0;
    $5 = HEAP32[$arrayidx93 >> 2] | 0;
    $t_2_ph = $5;
    label = 15;
    break;
   case 15:
    $cmp9621 = ($t_2_ph | 0) == 0;
    if ($cmp9621) {
      $rsize_3_lcssa = $rsize_2;
      $v_3_lcssa = $v_2;
      label = 18;
      break;
    } else {
      $t_222 = $t_2_ph;
      $rsize_323 = $rsize_2;
      $v_324 = $v_2;
      label = 16;
      break;
    }
   case 16:
    $head98 = $t_222 + 4 | 0;
    $6 = HEAP32[$head98 >> 2] | 0;
    $and99 = $6 & -8;
    $sub100 = $and99 - $nb | 0;
    $cmp101 = $sub100 >>> 0 < $rsize_323 >>> 0;
    $sub100_rsize_3 = $cmp101 ? $sub100 : $rsize_323;
    $t_2_v_3 = $cmp101 ? $t_222 : $v_324;
    $arrayidx105 = $t_222 + 16 | 0;
    $7 = HEAP32[$arrayidx105 >> 2] | 0;
    $cmp106 = ($7 | 0) == 0;
    if ($cmp106) {
      label = 17;
      break;
    } else {
      $t_222 = $7;
      $rsize_323 = $sub100_rsize_3;
      $v_324 = $t_2_v_3;
      label = 16;
      break;
    }
   case 17:
    $arrayidx112 = $t_222 + 20 | 0;
    $8 = HEAP32[$arrayidx112 >> 2] | 0;
    $cmp96 = ($8 | 0) == 0;
    if ($cmp96) {
      $rsize_3_lcssa = $sub100_rsize_3;
      $v_3_lcssa = $t_2_v_3;
      label = 18;
      break;
    } else {
      $t_222 = $8;
      $rsize_323 = $sub100_rsize_3;
      $v_324 = $t_2_v_3;
      label = 16;
      break;
    }
   case 18:
    $cmp115 = ($v_3_lcssa | 0) == 0;
    if ($cmp115) {
      $retval_0 = 0;
      label = 83;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $9 = HEAP32[27919] | 0;
    $sub117 = $9 - $nb | 0;
    $cmp118 = $rsize_3_lcssa >>> 0 < $sub117 >>> 0;
    if ($cmp118) {
      label = 20;
      break;
    } else {
      $retval_0 = 0;
      label = 83;
      break;
    }
   case 20:
    $10 = $v_3_lcssa;
    $11 = HEAP32[27921] | 0;
    $cmp120 = $10 >>> 0 < $11 >>> 0;
    if ($cmp120) {
      label = 82;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $add_ptr = $10 + $nb | 0;
    $12 = $add_ptr;
    $cmp122 = $10 >>> 0 < $add_ptr >>> 0;
    if ($cmp122) {
      label = 22;
      break;
    } else {
      label = 82;
      break;
    }
   case 22:
    $parent = $v_3_lcssa + 24 | 0;
    $13 = HEAP32[$parent >> 2] | 0;
    $bk = $v_3_lcssa + 12 | 0;
    $14 = HEAP32[$bk >> 2] | 0;
    $cmp127 = ($14 | 0) == ($v_3_lcssa | 0);
    if ($cmp127) {
      label = 28;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $fd = $v_3_lcssa + 8 | 0;
    $15 = HEAP32[$fd >> 2] | 0;
    $16 = $15;
    $cmp132 = $16 >>> 0 < $11 >>> 0;
    if ($cmp132) {
      label = 27;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $bk135 = $15 + 12 | 0;
    $17 = HEAP32[$bk135 >> 2] | 0;
    $cmp136 = ($17 | 0) == ($v_3_lcssa | 0);
    if ($cmp136) {
      label = 25;
      break;
    } else {
      label = 27;
      break;
    }
   case 25:
    $fd138 = $14 + 8 | 0;
    $18 = HEAP32[$fd138 >> 2] | 0;
    $cmp139 = ($18 | 0) == ($v_3_lcssa | 0);
    if ($cmp139) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    HEAP32[$bk135 >> 2] = $14;
    HEAP32[$fd138 >> 2] = $15;
    $R_1 = $14;
    label = 36;
    break;
   case 27:
    _abort();
    return 0;
    return 0;
   case 28:
    $arrayidx150 = $v_3_lcssa + 20 | 0;
    $19 = HEAP32[$arrayidx150 >> 2] | 0;
    $cmp151 = ($19 | 0) == 0;
    if ($cmp151) {
      label = 29;
      break;
    } else {
      $R_0 = $19;
      $RP_0 = $arrayidx150;
      label = 30;
      break;
    }
   case 29:
    $arrayidx154 = $v_3_lcssa + 16 | 0;
    $20 = HEAP32[$arrayidx154 >> 2] | 0;
    $cmp155 = ($20 | 0) == 0;
    if ($cmp155) {
      $R_1 = 0;
      label = 36;
      break;
    } else {
      $R_0 = $20;
      $RP_0 = $arrayidx154;
      label = 30;
      break;
    }
   case 30:
    $arrayidx160 = $R_0 + 20 | 0;
    $21 = HEAP32[$arrayidx160 >> 2] | 0;
    $cmp161 = ($21 | 0) == 0;
    if ($cmp161) {
      label = 31;
      break;
    } else {
      $CP_0 = $arrayidx160;
      label = 32;
      break;
    }
   case 31:
    $arrayidx164 = $R_0 + 16 | 0;
    $22 = HEAP32[$arrayidx164 >> 2] | 0;
    $cmp165 = ($22 | 0) == 0;
    if ($cmp165) {
      label = 33;
      break;
    } else {
      $CP_0 = $arrayidx164;
      label = 32;
      break;
    }
   case 32:
    $23 = HEAP32[$CP_0 >> 2] | 0;
    $R_0 = $23;
    $RP_0 = $CP_0;
    label = 30;
    break;
   case 33:
    $24 = $RP_0;
    $25 = HEAP32[27921] | 0;
    $cmp170 = $24 >>> 0 < $25 >>> 0;
    if ($cmp170) {
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    HEAP32[$RP_0 >> 2] = 0;
    $R_1 = $R_0;
    label = 36;
    break;
   case 35:
    _abort();
    return 0;
    return 0;
   case 36:
    $cmp179 = ($13 | 0) == 0;
    if ($cmp179) {
      label = 56;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    $index = $v_3_lcssa + 28 | 0;
    $26 = HEAP32[$index >> 2] | 0;
    $arrayidx183 = 111972 + ($26 << 2) | 0;
    $27 = HEAP32[$arrayidx183 >> 2] | 0;
    $cmp184 = ($v_3_lcssa | 0) == ($27 | 0);
    if ($cmp184) {
      label = 38;
      break;
    } else {
      label = 40;
      break;
    }
   case 38:
    HEAP32[$arrayidx183 >> 2] = $R_1;
    $cond18 = ($R_1 | 0) == 0;
    if ($cond18) {
      label = 39;
      break;
    } else {
      label = 46;
      break;
    }
   case 39:
    $28 = HEAP32[$index >> 2] | 0;
    $shl191 = 1 << $28;
    $neg = $shl191 ^ -1;
    $29 = HEAP32[27918] | 0;
    $and193 = $29 & $neg;
    HEAP32[27918] = $and193;
    label = 56;
    break;
   case 40:
    $30 = $13;
    $31 = HEAP32[27921] | 0;
    $cmp197 = $30 >>> 0 < $31 >>> 0;
    if ($cmp197) {
      label = 44;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    $arrayidx203 = $13 + 16 | 0;
    $32 = HEAP32[$arrayidx203 >> 2] | 0;
    $cmp204 = ($32 | 0) == ($v_3_lcssa | 0);
    if ($cmp204) {
      label = 42;
      break;
    } else {
      label = 43;
      break;
    }
   case 42:
    HEAP32[$arrayidx203 >> 2] = $R_1;
    label = 45;
    break;
   case 43:
    $arrayidx211 = $13 + 20 | 0;
    HEAP32[$arrayidx211 >> 2] = $R_1;
    label = 45;
    break;
   case 44:
    _abort();
    return 0;
    return 0;
   case 45:
    $cmp216 = ($R_1 | 0) == 0;
    if ($cmp216) {
      label = 56;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    $33 = $R_1;
    $34 = HEAP32[27921] | 0;
    $cmp220 = $33 >>> 0 < $34 >>> 0;
    if ($cmp220) {
      label = 55;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    $parent225 = $R_1 + 24 | 0;
    HEAP32[$parent225 >> 2] = $13;
    $arrayidx227 = $v_3_lcssa + 16 | 0;
    $35 = HEAP32[$arrayidx227 >> 2] | 0;
    $cmp228 = ($35 | 0) == 0;
    if ($cmp228) {
      label = 51;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    $36 = $35;
    $37 = HEAP32[27921] | 0;
    $cmp232 = $36 >>> 0 < $37 >>> 0;
    if ($cmp232) {
      label = 50;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    $arrayidx238 = $R_1 + 16 | 0;
    HEAP32[$arrayidx238 >> 2] = $35;
    $parent239 = $35 + 24 | 0;
    HEAP32[$parent239 >> 2] = $R_1;
    label = 51;
    break;
   case 50:
    _abort();
    return 0;
    return 0;
   case 51:
    $arrayidx244 = $v_3_lcssa + 20 | 0;
    $38 = HEAP32[$arrayidx244 >> 2] | 0;
    $cmp245 = ($38 | 0) == 0;
    if ($cmp245) {
      label = 56;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    $39 = $38;
    $40 = HEAP32[27921] | 0;
    $cmp249 = $39 >>> 0 < $40 >>> 0;
    if ($cmp249) {
      label = 54;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    $arrayidx255 = $R_1 + 20 | 0;
    HEAP32[$arrayidx255 >> 2] = $38;
    $parent256 = $38 + 24 | 0;
    HEAP32[$parent256 >> 2] = $R_1;
    label = 56;
    break;
   case 54:
    _abort();
    return 0;
    return 0;
   case 55:
    _abort();
    return 0;
    return 0;
   case 56:
    $cmp264 = $rsize_3_lcssa >>> 0 < 16;
    if ($cmp264) {
      label = 57;
      break;
    } else {
      label = 58;
      break;
    }
   case 57:
    $add267 = $rsize_3_lcssa + $nb | 0;
    $or269 = $add267 | 3;
    $head270 = $v_3_lcssa + 4 | 0;
    HEAP32[$head270 >> 2] = $or269;
    $add_ptr272_sum = $add267 + 4 | 0;
    $head273 = $10 + $add_ptr272_sum | 0;
    $41 = $head273;
    $42 = HEAP32[$41 >> 2] | 0;
    $or274 = $42 | 1;
    HEAP32[$41 >> 2] = $or274;
    label = 81;
    break;
   case 58:
    $or277 = $nb | 3;
    $head278 = $v_3_lcssa + 4 | 0;
    HEAP32[$head278 >> 2] = $or277;
    $or279 = $rsize_3_lcssa | 1;
    $add_ptr_sum = $nb + 4 | 0;
    $head280 = $10 + $add_ptr_sum | 0;
    $43 = $head280;
    HEAP32[$43 >> 2] = $or279;
    $add_ptr_sum1 = $rsize_3_lcssa + $nb | 0;
    $add_ptr281 = $10 + $add_ptr_sum1 | 0;
    $prev_foot = $add_ptr281;
    HEAP32[$prev_foot >> 2] = $rsize_3_lcssa;
    $shr282 = $rsize_3_lcssa >>> 3;
    $cmp283 = $rsize_3_lcssa >>> 0 < 256;
    if ($cmp283) {
      label = 59;
      break;
    } else {
      label = 64;
      break;
    }
   case 59:
    $shl287 = $shr282 << 1;
    $arrayidx288 = 111708 + ($shl287 << 2) | 0;
    $44 = $arrayidx288;
    $45 = HEAP32[27917] | 0;
    $shl290 = 1 << $shr282;
    $and291 = $45 & $shl290;
    $tobool292 = ($and291 | 0) == 0;
    if ($tobool292) {
      label = 60;
      break;
    } else {
      label = 61;
      break;
    }
   case 60:
    $or296 = $45 | $shl290;
    HEAP32[27917] = $or296;
    $F289_0 = $44;
    label = 63;
    break;
   case 61:
    $arrayidx288_sum15 = $shl287 + 2 | 0;
    $46 = 111708 + ($arrayidx288_sum15 << 2) | 0;
    $47 = HEAP32[$46 >> 2] | 0;
    $48 = $47;
    $49 = HEAP32[27921] | 0;
    $cmp300 = $48 >>> 0 < $49 >>> 0;
    if ($cmp300) {
      label = 62;
      break;
    } else {
      $F289_0 = $47;
      label = 63;
      break;
    }
   case 62:
    _abort();
    return 0;
    return 0;
   case 63:
    $arrayidx288_sum = $shl287 + 2 | 0;
    $50 = 111708 + ($arrayidx288_sum << 2) | 0;
    HEAP32[$50 >> 2] = $12;
    $bk310 = $F289_0 + 12 | 0;
    HEAP32[$bk310 >> 2] = $12;
    $add_ptr_sum13 = $nb + 8 | 0;
    $fd311 = $10 + $add_ptr_sum13 | 0;
    $51 = $fd311;
    HEAP32[$51 >> 2] = $F289_0;
    $add_ptr_sum14 = $nb + 12 | 0;
    $bk312 = $10 + $add_ptr_sum14 | 0;
    $52 = $bk312;
    HEAP32[$52 >> 2] = $44;
    label = 81;
    break;
   case 64:
    $53 = $add_ptr;
    $shr317 = $rsize_3_lcssa >>> 8;
    $cmp318 = ($shr317 | 0) == 0;
    if ($cmp318) {
      $I315_0 = 0;
      label = 67;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    $cmp322 = $rsize_3_lcssa >>> 0 > 16777215;
    if ($cmp322) {
      $I315_0 = 31;
      label = 67;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    $sub328 = $shr317 + 1048320 | 0;
    $shr329 = $sub328 >>> 16;
    $and330 = $shr329 & 8;
    $shl332 = $shr317 << $and330;
    $sub333 = $shl332 + 520192 | 0;
    $shr334 = $sub333 >>> 16;
    $and335 = $shr334 & 4;
    $add336 = $and335 | $and330;
    $shl337 = $shl332 << $and335;
    $sub338 = $shl337 + 245760 | 0;
    $shr339 = $sub338 >>> 16;
    $and340 = $shr339 & 2;
    $add341 = $add336 | $and340;
    $sub342 = 14 - $add341 | 0;
    $shl343 = $shl337 << $and340;
    $shr344 = $shl343 >>> 15;
    $add345 = $sub342 + $shr344 | 0;
    $shl346 = $add345 << 1;
    $add347 = $add345 + 7 | 0;
    $shr348 = $rsize_3_lcssa >>> ($add347 >>> 0);
    $and349 = $shr348 & 1;
    $add350 = $and349 | $shl346;
    $I315_0 = $add350;
    label = 67;
    break;
   case 67:
    $arrayidx354 = 111972 + ($I315_0 << 2) | 0;
    $add_ptr_sum2 = $nb + 28 | 0;
    $index355 = $10 + $add_ptr_sum2 | 0;
    $54 = $index355;
    HEAP32[$54 >> 2] = $I315_0;
    $add_ptr_sum3 = $nb + 16 | 0;
    $child356 = $10 + $add_ptr_sum3 | 0;
    $child356_sum = $nb + 20 | 0;
    $arrayidx357 = $10 + $child356_sum | 0;
    $55 = $arrayidx357;
    HEAP32[$55 >> 2] = 0;
    $arrayidx359 = $child356;
    HEAP32[$arrayidx359 >> 2] = 0;
    $56 = HEAP32[27918] | 0;
    $shl361 = 1 << $I315_0;
    $and362 = $56 & $shl361;
    $tobool363 = ($and362 | 0) == 0;
    if ($tobool363) {
      label = 68;
      break;
    } else {
      label = 69;
      break;
    }
   case 68:
    $or367 = $56 | $shl361;
    HEAP32[27918] = $or367;
    HEAP32[$arrayidx354 >> 2] = $53;
    $57 = $arrayidx354;
    $add_ptr_sum4 = $nb + 24 | 0;
    $parent368 = $10 + $add_ptr_sum4 | 0;
    $58 = $parent368;
    HEAP32[$58 >> 2] = $57;
    $add_ptr_sum5 = $nb + 12 | 0;
    $bk369 = $10 + $add_ptr_sum5 | 0;
    $59 = $bk369;
    HEAP32[$59 >> 2] = $53;
    $add_ptr_sum6 = $nb + 8 | 0;
    $fd370 = $10 + $add_ptr_sum6 | 0;
    $60 = $fd370;
    HEAP32[$60 >> 2] = $53;
    label = 81;
    break;
   case 69:
    $61 = HEAP32[$arrayidx354 >> 2] | 0;
    $cmp373 = ($I315_0 | 0) == 31;
    if ($cmp373) {
      $cond382 = 0;
      label = 71;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    $shr377 = $I315_0 >>> 1;
    $sub380 = 25 - $shr377 | 0;
    $cond382 = $sub380;
    label = 71;
    break;
   case 71:
    $shl383 = $rsize_3_lcssa << $cond382;
    $K372_0 = $shl383;
    $T_0 = $61;
    label = 72;
    break;
   case 72:
    $head385 = $T_0 + 4 | 0;
    $62 = HEAP32[$head385 >> 2] | 0;
    $and386 = $62 & -8;
    $cmp387 = ($and386 | 0) == ($rsize_3_lcssa | 0);
    if ($cmp387) {
      label = 77;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    $shr390 = $K372_0 >>> 31;
    $arrayidx393 = $T_0 + 16 + ($shr390 << 2) | 0;
    $63 = HEAP32[$arrayidx393 >> 2] | 0;
    $cmp395 = ($63 | 0) == 0;
    $shl394 = $K372_0 << 1;
    if ($cmp395) {
      label = 74;
      break;
    } else {
      $K372_0 = $shl394;
      $T_0 = $63;
      label = 72;
      break;
    }
   case 74:
    $64 = $arrayidx393;
    $65 = HEAP32[27921] | 0;
    $cmp400 = $64 >>> 0 < $65 >>> 0;
    if ($cmp400) {
      label = 76;
      break;
    } else {
      label = 75;
      break;
    }
   case 75:
    HEAP32[$arrayidx393 >> 2] = $53;
    $add_ptr_sum10 = $nb + 24 | 0;
    $parent405 = $10 + $add_ptr_sum10 | 0;
    $66 = $parent405;
    HEAP32[$66 >> 2] = $T_0;
    $add_ptr_sum11 = $nb + 12 | 0;
    $bk406 = $10 + $add_ptr_sum11 | 0;
    $67 = $bk406;
    HEAP32[$67 >> 2] = $53;
    $add_ptr_sum12 = $nb + 8 | 0;
    $fd407 = $10 + $add_ptr_sum12 | 0;
    $68 = $fd407;
    HEAP32[$68 >> 2] = $53;
    label = 81;
    break;
   case 76:
    _abort();
    return 0;
    return 0;
   case 77:
    $fd412 = $T_0 + 8 | 0;
    $69 = HEAP32[$fd412 >> 2] | 0;
    $70 = $T_0;
    $71 = HEAP32[27921] | 0;
    $cmp414 = $70 >>> 0 < $71 >>> 0;
    if ($cmp414) {
      label = 80;
      break;
    } else {
      label = 78;
      break;
    }
   case 78:
    $72 = $69;
    $cmp418 = $72 >>> 0 < $71 >>> 0;
    if ($cmp418) {
      label = 80;
      break;
    } else {
      label = 79;
      break;
    }
   case 79:
    $bk425 = $69 + 12 | 0;
    HEAP32[$bk425 >> 2] = $53;
    HEAP32[$fd412 >> 2] = $53;
    $add_ptr_sum7 = $nb + 8 | 0;
    $fd427 = $10 + $add_ptr_sum7 | 0;
    $73 = $fd427;
    HEAP32[$73 >> 2] = $69;
    $add_ptr_sum8 = $nb + 12 | 0;
    $bk428 = $10 + $add_ptr_sum8 | 0;
    $74 = $bk428;
    HEAP32[$74 >> 2] = $T_0;
    $add_ptr_sum9 = $nb + 24 | 0;
    $parent429 = $10 + $add_ptr_sum9 | 0;
    $75 = $parent429;
    HEAP32[$75 >> 2] = 0;
    label = 81;
    break;
   case 80:
    _abort();
    return 0;
    return 0;
   case 81:
    $add_ptr436 = $v_3_lcssa + 8 | 0;
    $76 = $add_ptr436;
    $retval_0 = $76;
    label = 83;
    break;
   case 82:
    _abort();
    return 0;
    return 0;
   case 83:
    return $retval_0 | 0;
  }
  return 0;
}
function _sys_alloc($nb) {
  $nb = $nb | 0;
  var $0 = 0, $cmp = 0, $add = 0, $1 = 0, $sub = 0, $add9 = 0, $neg = 0, $and11 = 0, $cmp12 = 0, $2 = 0, $cmp15 = 0, $3 = 0, $add17 = 0, $cmp19 = 0, $cmp21 = 0, $or_cond1 = 0, $4 = 0, $and26 = 0, $tobool27 = 0, $5 = 0, $cmp29 = 0, $6 = 0, $call31 = 0, $cmp32 = 0, $call34 = 0, $cmp35 = 0, $7 = 0, $8 = 0, $sub38 = 0, $and39 = 0, $cmp40 = 0, $add43 = 0, $neg45 = 0, $and46 = 0, $sub47 = 0, $add48 = 0, $ssize_0 = 0, $9 = 0, $add51 = 0, $cmp52 = 0, $cmp54 = 0, $or_cond = 0, $10 = 0, $cmp57 = 0, $cmp60 = 0, $cmp63 = 0, $or_cond2 = 0, $call65 = 0, $cmp66 = 0, $ssize_0_ = 0, $call34_ = 0, $11 = 0, $12 = 0, $sub71 = 0, $sub73 = 0, $add74 = 0, $neg76 = 0, $and77 = 0, $cmp78 = 0, $call80 = 0, $base81 = 0, $13 = 0, $size = 0, $14 = 0, $add_ptr = 0, $cmp82 = 0, $and77_ = 0, $call80_ = 0, $ssize_1 = 0, $br_0 = 0, $tsize_0 = 0, $tbase_0 = 0, $sub109 = 0, $cmp86 = 0, $cmp88 = 0, $cmp90 = 0, $or_cond3 = 0, $cmp93 = 0, $or_cond4 = 0, $15 = 0, $sub97 = 0, $sub96 = 0, $add98 = 0, $neg100 = 0, $and101 = 0, $cmp102 = 0, $call104 = 0, $cmp105 = 0, $add107 = 0, $call110 = 0, $ssize_2 = 0, $cmp115 = 0, $tsize_0132123 = 0, $16 = 0, $or = 0, $tsize_1 = 0, $cmp124 = 0, $call128 = 0, $call129 = 0, $notlhs = 0, $notrhs = 0, $or_cond6_not = 0, $cmp134 = 0, $or_cond7 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $add137 = 0, $cmp138 = 0, $sub_ptr_sub_tsize_1 = 0, $call128_tbase_1 = 0, $cmp144 = 0, $tbase_230 = 0, $tsize_229 = 0, $17 = 0, $add147 = 0, $18 = 0, $cmp148 = 0, $19 = 0, $cmp154 = 0, $20 = 0, $cmp156 = 0, $cmp159 = 0, $or_cond8 = 0, $21 = 0, $22 = 0, $sub169 = 0, $sp_038 = 0, $base184 = 0, $23 = 0, $size185 = 0, $24 = 0, $add_ptr186 = 0, $cmp187 = 0, $next = 0, $25 = 0, $cmp183 = 0, $sflags190 = 0, $26 = 0, $and191 = 0, $tobool192 = 0, $27 = 0, $28 = 0, $cmp200 = 0, $cmp206 = 0, $or_cond31 = 0, $add209 = 0, $29 = 0, $30 = 0, $add212 = 0, $31 = 0, $cmp215 = 0, $add_ptr224 = 0, $sp_134 = 0, $base223 = 0, $32 = 0, $cmp225 = 0, $next228 = 0, $33 = 0, $cmp221 = 0, $sflags232 = 0, $34 = 0, $and233 = 0, $tobool234 = 0, $size242 = 0, $35 = 0, $add243 = 0, $call244 = 0, $36 = 0, $cmp250 = 0, $sub253 = 0, $37 = 0, $38 = 0, $add_ptr255 = 0, $39 = 0, $or257 = 0, $add_ptr255_sum = 0, $head258 = 0, $40 = 0, $or260 = 0, $head261 = 0, $add_ptr262 = 0, $41 = 0, $call265 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = HEAP32[19732] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _init_mparams();
    label = 4;
    break;
   case 4:
    $add = $nb + 48 | 0;
    $1 = HEAP32[19734] | 0;
    $sub = $nb + 47 | 0;
    $add9 = $sub + $1 | 0;
    $neg = -$1 | 0;
    $and11 = $add9 & $neg;
    $cmp12 = $and11 >>> 0 > $nb >>> 0;
    if ($cmp12) {
      label = 5;
      break;
    } else {
      $retval_0 = 0;
      label = 52;
      break;
    }
   case 5:
    $2 = HEAP32[28027] | 0;
    $cmp15 = ($2 | 0) == 0;
    if ($cmp15) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $3 = HEAP32[28025] | 0;
    $add17 = $3 + $and11 | 0;
    $cmp19 = $add17 >>> 0 <= $3 >>> 0;
    $cmp21 = $add17 >>> 0 > $2 >>> 0;
    $or_cond1 = $cmp19 | $cmp21;
    if ($or_cond1) {
      $retval_0 = 0;
      label = 52;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $4 = HEAP32[28028] | 0;
    $and26 = $4 & 4;
    $tobool27 = ($and26 | 0) == 0;
    if ($tobool27) {
      label = 8;
      break;
    } else {
      $tsize_1 = 0;
      label = 27;
      break;
    }
   case 8:
    $5 = HEAP32[27923] | 0;
    $cmp29 = ($5 | 0) == 0;
    if ($cmp29) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $6 = $5;
    $call31 = _segment_holding($6) | 0;
    $cmp32 = ($call31 | 0) == 0;
    if ($cmp32) {
      label = 10;
      break;
    } else {
      label = 17;
      break;
    }
   case 10:
    $call34 = _sbrk(0) | 0;
    $cmp35 = ($call34 | 0) == -1;
    if ($cmp35) {
      $tsize_0132123 = 0;
      label = 26;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $7 = $call34;
    $8 = HEAP32[19733] | 0;
    $sub38 = $8 - 1 | 0;
    $and39 = $sub38 & $7;
    $cmp40 = ($and39 | 0) == 0;
    if ($cmp40) {
      $ssize_0 = $and11;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $add43 = $sub38 + $7 | 0;
    $neg45 = -$8 | 0;
    $and46 = $add43 & $neg45;
    $sub47 = $and11 - $7 | 0;
    $add48 = $sub47 + $and46 | 0;
    $ssize_0 = $add48;
    label = 13;
    break;
   case 13:
    $9 = HEAP32[28025] | 0;
    $add51 = $9 + $ssize_0 | 0;
    $cmp52 = $ssize_0 >>> 0 > $nb >>> 0;
    $cmp54 = $ssize_0 >>> 0 < 2147483647;
    $or_cond = $cmp52 & $cmp54;
    if ($or_cond) {
      label = 14;
      break;
    } else {
      $tsize_0132123 = 0;
      label = 26;
      break;
    }
   case 14:
    $10 = HEAP32[28027] | 0;
    $cmp57 = ($10 | 0) == 0;
    if ($cmp57) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $cmp60 = $add51 >>> 0 <= $9 >>> 0;
    $cmp63 = $add51 >>> 0 > $10 >>> 0;
    $or_cond2 = $cmp60 | $cmp63;
    if ($or_cond2) {
      $tsize_0132123 = 0;
      label = 26;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $call65 = _sbrk($ssize_0 | 0) | 0;
    $cmp66 = ($call65 | 0) == ($call34 | 0);
    $ssize_0_ = $cmp66 ? $ssize_0 : 0;
    $call34_ = $cmp66 ? $call34 : -1;
    $tbase_0 = $call34_;
    $tsize_0 = $ssize_0_;
    $br_0 = $call65;
    $ssize_1 = $ssize_0;
    label = 19;
    break;
   case 17:
    $11 = HEAP32[27920] | 0;
    $12 = HEAP32[19734] | 0;
    $sub71 = $nb + 47 | 0;
    $sub73 = $sub71 - $11 | 0;
    $add74 = $sub73 + $12 | 0;
    $neg76 = -$12 | 0;
    $and77 = $add74 & $neg76;
    $cmp78 = $and77 >>> 0 < 2147483647;
    if ($cmp78) {
      label = 18;
      break;
    } else {
      $tsize_0132123 = 0;
      label = 26;
      break;
    }
   case 18:
    $call80 = _sbrk($and77 | 0) | 0;
    $base81 = $call31 | 0;
    $13 = HEAP32[$base81 >> 2] | 0;
    $size = $call31 + 4 | 0;
    $14 = HEAP32[$size >> 2] | 0;
    $add_ptr = $13 + $14 | 0;
    $cmp82 = ($call80 | 0) == ($add_ptr | 0);
    $and77_ = $cmp82 ? $and77 : 0;
    $call80_ = $cmp82 ? $call80 : -1;
    $tbase_0 = $call80_;
    $tsize_0 = $and77_;
    $br_0 = $call80;
    $ssize_1 = $and77;
    label = 19;
    break;
   case 19:
    $sub109 = -$ssize_1 | 0;
    $cmp86 = ($tbase_0 | 0) == -1;
    if ($cmp86) {
      label = 20;
      break;
    } else {
      $tsize_229 = $tsize_0;
      $tbase_230 = $tbase_0;
      label = 30;
      break;
    }
   case 20:
    $cmp88 = ($br_0 | 0) != -1;
    $cmp90 = $ssize_1 >>> 0 < 2147483647;
    $or_cond3 = $cmp88 & $cmp90;
    $cmp93 = $ssize_1 >>> 0 < $add >>> 0;
    $or_cond4 = $or_cond3 & $cmp93;
    if ($or_cond4) {
      label = 21;
      break;
    } else {
      $ssize_2 = $ssize_1;
      label = 25;
      break;
    }
   case 21:
    $15 = HEAP32[19734] | 0;
    $sub97 = $nb + 47 | 0;
    $sub96 = $sub97 - $ssize_1 | 0;
    $add98 = $sub96 + $15 | 0;
    $neg100 = -$15 | 0;
    $and101 = $add98 & $neg100;
    $cmp102 = $and101 >>> 0 < 2147483647;
    if ($cmp102) {
      label = 22;
      break;
    } else {
      $ssize_2 = $ssize_1;
      label = 25;
      break;
    }
   case 22:
    $call104 = _sbrk($and101 | 0) | 0;
    $cmp105 = ($call104 | 0) == -1;
    if ($cmp105) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $add107 = $and101 + $ssize_1 | 0;
    $ssize_2 = $add107;
    label = 25;
    break;
   case 24:
    $call110 = _sbrk($sub109 | 0) | 0;
    $tsize_0132123 = $tsize_0;
    label = 26;
    break;
   case 25:
    $cmp115 = ($br_0 | 0) == -1;
    if ($cmp115) {
      $tsize_0132123 = $tsize_0;
      label = 26;
      break;
    } else {
      $tsize_229 = $ssize_2;
      $tbase_230 = $br_0;
      label = 30;
      break;
    }
   case 26:
    $16 = HEAP32[28028] | 0;
    $or = $16 | 4;
    HEAP32[28028] = $or;
    $tsize_1 = $tsize_0132123;
    label = 27;
    break;
   case 27:
    $cmp124 = $and11 >>> 0 < 2147483647;
    if ($cmp124) {
      label = 28;
      break;
    } else {
      label = 51;
      break;
    }
   case 28:
    $call128 = _sbrk($and11 | 0) | 0;
    $call129 = _sbrk(0) | 0;
    $notlhs = ($call128 | 0) != -1;
    $notrhs = ($call129 | 0) != -1;
    $or_cond6_not = $notrhs & $notlhs;
    $cmp134 = $call128 >>> 0 < $call129 >>> 0;
    $or_cond7 = $or_cond6_not & $cmp134;
    if ($or_cond7) {
      label = 29;
      break;
    } else {
      label = 51;
      break;
    }
   case 29:
    $sub_ptr_lhs_cast = $call129;
    $sub_ptr_rhs_cast = $call128;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $add137 = $nb + 40 | 0;
    $cmp138 = $sub_ptr_sub >>> 0 > $add137 >>> 0;
    $sub_ptr_sub_tsize_1 = $cmp138 ? $sub_ptr_sub : $tsize_1;
    $call128_tbase_1 = $cmp138 ? $call128 : -1;
    $cmp144 = ($call128_tbase_1 | 0) == -1;
    if ($cmp144) {
      label = 51;
      break;
    } else {
      $tsize_229 = $sub_ptr_sub_tsize_1;
      $tbase_230 = $call128_tbase_1;
      label = 30;
      break;
    }
   case 30:
    $17 = HEAP32[28025] | 0;
    $add147 = $17 + $tsize_229 | 0;
    HEAP32[28025] = $add147;
    $18 = HEAP32[28026] | 0;
    $cmp148 = $add147 >>> 0 > $18 >>> 0;
    if ($cmp148) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    HEAP32[28026] = $add147;
    label = 32;
    break;
   case 32:
    $19 = HEAP32[27923] | 0;
    $cmp154 = ($19 | 0) == 0;
    if ($cmp154) {
      label = 33;
      break;
    } else {
      $sp_038 = 112116;
      label = 36;
      break;
    }
   case 33:
    $20 = HEAP32[27921] | 0;
    $cmp156 = ($20 | 0) == 0;
    $cmp159 = $tbase_230 >>> 0 < $20 >>> 0;
    $or_cond8 = $cmp156 | $cmp159;
    if ($or_cond8) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    HEAP32[27921] = $tbase_230;
    label = 35;
    break;
   case 35:
    HEAP32[28029] = $tbase_230;
    HEAP32[28030] = $tsize_229;
    HEAP32[28032] = 0;
    $21 = HEAP32[19732] | 0;
    HEAP32[27926] = $21;
    HEAP32[27925] = -1;
    _init_bins();
    $22 = $tbase_230;
    $sub169 = $tsize_229 - 40 | 0;
    _init_top($22, $sub169);
    label = 49;
    break;
   case 36:
    $base184 = $sp_038 | 0;
    $23 = HEAP32[$base184 >> 2] | 0;
    $size185 = $sp_038 + 4 | 0;
    $24 = HEAP32[$size185 >> 2] | 0;
    $add_ptr186 = $23 + $24 | 0;
    $cmp187 = ($tbase_230 | 0) == ($add_ptr186 | 0);
    if ($cmp187) {
      label = 38;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    $next = $sp_038 + 8 | 0;
    $25 = HEAP32[$next >> 2] | 0;
    $cmp183 = ($25 | 0) == 0;
    if ($cmp183) {
      label = 41;
      break;
    } else {
      $sp_038 = $25;
      label = 36;
      break;
    }
   case 38:
    $sflags190 = $sp_038 + 12 | 0;
    $26 = HEAP32[$sflags190 >> 2] | 0;
    $and191 = $26 & 8;
    $tobool192 = ($and191 | 0) == 0;
    if ($tobool192) {
      label = 39;
      break;
    } else {
      label = 41;
      break;
    }
   case 39:
    $27 = HEAP32[27923] | 0;
    $28 = $27;
    $cmp200 = $28 >>> 0 >= $23 >>> 0;
    $cmp206 = $28 >>> 0 < $add_ptr186 >>> 0;
    $or_cond31 = $cmp200 & $cmp206;
    if ($or_cond31) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    $add209 = $24 + $tsize_229 | 0;
    HEAP32[$size185 >> 2] = $add209;
    $29 = HEAP32[27923] | 0;
    $30 = HEAP32[27920] | 0;
    $add212 = $30 + $tsize_229 | 0;
    _init_top($29, $add212);
    label = 49;
    break;
   case 41:
    $31 = HEAP32[27921] | 0;
    $cmp215 = $tbase_230 >>> 0 < $31 >>> 0;
    if ($cmp215) {
      label = 42;
      break;
    } else {
      label = 43;
      break;
    }
   case 42:
    HEAP32[27921] = $tbase_230;
    label = 43;
    break;
   case 43:
    $add_ptr224 = $tbase_230 + $tsize_229 | 0;
    $sp_134 = 112116;
    label = 44;
    break;
   case 44:
    $base223 = $sp_134 | 0;
    $32 = HEAP32[$base223 >> 2] | 0;
    $cmp225 = ($32 | 0) == ($add_ptr224 | 0);
    if ($cmp225) {
      label = 46;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    $next228 = $sp_134 + 8 | 0;
    $33 = HEAP32[$next228 >> 2] | 0;
    $cmp221 = ($33 | 0) == 0;
    if ($cmp221) {
      label = 48;
      break;
    } else {
      $sp_134 = $33;
      label = 44;
      break;
    }
   case 46:
    $sflags232 = $sp_134 + 12 | 0;
    $34 = HEAP32[$sflags232 >> 2] | 0;
    $and233 = $34 & 8;
    $tobool234 = ($and233 | 0) == 0;
    if ($tobool234) {
      label = 47;
      break;
    } else {
      label = 48;
      break;
    }
   case 47:
    HEAP32[$base223 >> 2] = $tbase_230;
    $size242 = $sp_134 + 4 | 0;
    $35 = HEAP32[$size242 >> 2] | 0;
    $add243 = $35 + $tsize_229 | 0;
    HEAP32[$size242 >> 2] = $add243;
    $call244 = _prepend_alloc($tbase_230, $32, $nb) | 0;
    $retval_0 = $call244;
    label = 52;
    break;
   case 48:
    _add_segment($tbase_230, $tsize_229);
    label = 49;
    break;
   case 49:
    $36 = HEAP32[27920] | 0;
    $cmp250 = $36 >>> 0 > $nb >>> 0;
    if ($cmp250) {
      label = 50;
      break;
    } else {
      label = 51;
      break;
    }
   case 50:
    $sub253 = $36 - $nb | 0;
    HEAP32[27920] = $sub253;
    $37 = HEAP32[27923] | 0;
    $38 = $37;
    $add_ptr255 = $38 + $nb | 0;
    $39 = $add_ptr255;
    HEAP32[27923] = $39;
    $or257 = $sub253 | 1;
    $add_ptr255_sum = $nb + 4 | 0;
    $head258 = $38 + $add_ptr255_sum | 0;
    $40 = $head258;
    HEAP32[$40 >> 2] = $or257;
    $or260 = $nb | 3;
    $head261 = $37 + 4 | 0;
    HEAP32[$head261 >> 2] = $or260;
    $add_ptr262 = $37 + 8 | 0;
    $41 = $add_ptr262;
    $retval_0 = $41;
    label = 52;
    break;
   case 51:
    $call265 = ___errno_location() | 0;
    HEAP32[$call265 >> 2] = 12;
    $retval_0 = 0;
    label = 52;
    break;
   case 52:
    return $retval_0 | 0;
  }
  return 0;
}
function _free($mem) {
  $mem = $mem | 0;
  var $cmp = 0, $add_ptr = 0, $0 = 0, $1 = 0, $cmp1 = 0, $head = 0, $2 = 0, $3 = 0, $and = 0, $cmp2 = 0, $and5 = 0, $add_ptr_sum = 0, $add_ptr6 = 0, $4 = 0, $and8 = 0, $tobool9 = 0, $prev_foot = 0, $5 = 0, $cmp13 = 0, $add_ptr_sum231 = 0, $add_ptr16 = 0, $6 = 0, $add17 = 0, $cmp18 = 0, $7 = 0, $cmp22 = 0, $shr = 0, $cmp25 = 0, $add_ptr16_sum258 = 0, $fd = 0, $8 = 0, $9 = 0, $add_ptr16_sum259 = 0, $bk = 0, $10 = 0, $11 = 0, $shl = 0, $arrayidx = 0, $12 = 0, $cmp29 = 0, $13 = 0, $cmp31 = 0, $bk34 = 0, $14 = 0, $cmp35 = 0, $cmp42 = 0, $shl45 = 0, $neg = 0, $15 = 0, $and46 = 0, $cmp50 = 0, $16 = 0, $17 = 0, $cmp53 = 0, $fd56 = 0, $18 = 0, $cmp57 = 0, $bk66 = 0, $fd67 = 0, $19 = 0, $add_ptr16_sum252 = 0, $parent = 0, $20 = 0, $21 = 0, $add_ptr16_sum253 = 0, $bk73 = 0, $22 = 0, $23 = 0, $cmp74 = 0, $add_ptr16_sum257 = 0, $fd78 = 0, $24 = 0, $25 = 0, $26 = 0, $cmp80 = 0, $bk82 = 0, $27 = 0, $cmp83 = 0, $fd86 = 0, $28 = 0, $cmp87 = 0, $child_sum = 0, $arrayidx99 = 0, $29 = 0, $30 = 0, $cmp100 = 0, $add_ptr16_sum254 = 0, $child = 0, $arrayidx103 = 0, $31 = 0, $cmp104 = 0, $RP_0 = 0, $R_0 = 0, $arrayidx108 = 0, $32 = 0, $cmp109 = 0, $arrayidx113 = 0, $33 = 0, $cmp114 = 0, $CP_0 = 0, $34 = 0, $35 = 0, $36 = 0, $cmp118 = 0, $R_1 = 0, $cmp127 = 0, $add_ptr16_sum255 = 0, $index = 0, $37 = 0, $38 = 0, $arrayidx130 = 0, $39 = 0, $cmp131 = 0, $cond264 = 0, $40 = 0, $shl138 = 0, $neg139 = 0, $41 = 0, $and140 = 0, $42 = 0, $43 = 0, $cmp143 = 0, $arrayidx149 = 0, $44 = 0, $cmp150 = 0, $arrayidx157 = 0, $cmp162 = 0, $45 = 0, $46 = 0, $cmp165 = 0, $parent170 = 0, $add_ptr16_sum256 = 0, $child171 = 0, $arrayidx172 = 0, $47 = 0, $cmp173 = 0, $48 = 0, $49 = 0, $cmp176 = 0, $arrayidx182 = 0, $parent183 = 0, $child171_sum = 0, $arrayidx188 = 0, $50 = 0, $51 = 0, $cmp189 = 0, $52 = 0, $53 = 0, $cmp192 = 0, $arrayidx198 = 0, $parent199 = 0, $add_ptr6_sum = 0, $head209 = 0, $54 = 0, $55 = 0, $and210 = 0, $cmp211 = 0, $56 = 0, $and215 = 0, $or = 0, $add_ptr16_sum = 0, $head216 = 0, $57 = 0, $prev_foot218 = 0, $psize_0 = 0, $p_0 = 0, $58 = 0, $cmp225 = 0, $add_ptr6_sum250 = 0, $head228 = 0, $59 = 0, $60 = 0, $and229 = 0, $tobool230 = 0, $and237 = 0, $tobool238 = 0, $61 = 0, $cmp240 = 0, $62 = 0, $add243 = 0, $or244 = 0, $head245 = 0, $63 = 0, $cmp246 = 0, $64 = 0, $cmp250 = 0, $65 = 0, $66 = 0, $cmp255 = 0, $67 = 0, $add258 = 0, $or259 = 0, $head260 = 0, $add_ptr261 = 0, $prev_foot262 = 0, $and265 = 0, $add266 = 0, $shr267 = 0, $cmp268 = 0, $fd272 = 0, $68 = 0, $69 = 0, $add_ptr6_sum248249 = 0, $bk274 = 0, $70 = 0, $71 = 0, $shl277 = 0, $arrayidx278 = 0, $72 = 0, $cmp279 = 0, $73 = 0, $74 = 0, $cmp282 = 0, $bk285 = 0, $75 = 0, $cmp286 = 0, $cmp295 = 0, $shl298 = 0, $neg299 = 0, $76 = 0, $and300 = 0, $cmp304 = 0, $77 = 0, $78 = 0, $cmp307 = 0, $fd310 = 0, $79 = 0, $cmp311 = 0, $bk320 = 0, $fd321 = 0, $80 = 0, $add_ptr6_sum233 = 0, $parent330 = 0, $81 = 0, $82 = 0, $add_ptr6_sum234235 = 0, $bk332 = 0, $83 = 0, $84 = 0, $cmp333 = 0, $fd337 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $cmp339 = 0, $bk342 = 0, $89 = 0, $cmp343 = 0, $fd346 = 0, $90 = 0, $cmp347 = 0, $child360_sum = 0, $arrayidx361 = 0, $91 = 0, $92 = 0, $cmp362 = 0, $add_ptr6_sum236 = 0, $child360 = 0, $arrayidx366 = 0, $93 = 0, $cmp367 = 0, $RP359_0 = 0, $R331_0 = 0, $arrayidx373 = 0, $94 = 0, $cmp374 = 0, $arrayidx378 = 0, $95 = 0, $cmp379 = 0, $CP370_0 = 0, $96 = 0, $97 = 0, $98 = 0, $cmp385 = 0, $R331_1 = 0, $cmp394 = 0, $add_ptr6_sum244 = 0, $index398 = 0, $99 = 0, $100 = 0, $arrayidx399 = 0, $101 = 0, $cmp400 = 0, $cond265 = 0, $102 = 0, $shl407 = 0, $neg408 = 0, $103 = 0, $and409 = 0, $104 = 0, $105 = 0, $cmp412 = 0, $arrayidx418 = 0, $106 = 0, $cmp419 = 0, $arrayidx426 = 0, $cmp431 = 0, $107 = 0, $108 = 0, $cmp434 = 0, $parent441 = 0, $add_ptr6_sum245 = 0, $child442 = 0, $arrayidx443 = 0, $109 = 0, $cmp444 = 0, $110 = 0, $111 = 0, $cmp447 = 0, $arrayidx453 = 0, $parent454 = 0, $child442_sum = 0, $arrayidx459 = 0, $112 = 0, $113 = 0, $cmp460 = 0, $114 = 0, $115 = 0, $cmp463 = 0, $arrayidx469 = 0, $parent470 = 0, $or479 = 0, $head480 = 0, $add_ptr481 = 0, $prev_foot482 = 0, $116 = 0, $cmp483 = 0, $and491 = 0, $or492 = 0, $head493 = 0, $add_ptr494 = 0, $prev_foot495 = 0, $psize_1 = 0, $shr497 = 0, $cmp498 = 0, $shl504 = 0, $arrayidx505 = 0, $117 = 0, $118 = 0, $shl507 = 0, $and508 = 0, $tobool509 = 0, $or512 = 0, $arrayidx505_sum243 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $cmp515 = 0, $F506_0 = 0, $arrayidx505_sum = 0, $123 = 0, $bk525 = 0, $fd526 = 0, $bk527 = 0, $124 = 0, $shr531 = 0, $cmp532 = 0, $cmp536 = 0, $sub = 0, $shr540 = 0, $and541 = 0, $shl542 = 0, $sub543 = 0, $shr544 = 0, $and545 = 0, $add546 = 0, $shl547 = 0, $sub548 = 0, $shr549 = 0, $and550 = 0, $add551 = 0, $sub552 = 0, $shl553 = 0, $shr554 = 0, $add555 = 0, $shl556 = 0, $add557 = 0, $shr558 = 0, $and559 = 0, $add560 = 0, $I530_0 = 0, $arrayidx563 = 0, $index564 = 0, $I530_0_c = 0, $arrayidx566 = 0, $125 = 0, $126 = 0, $shl569 = 0, $and570 = 0, $tobool571 = 0, $or574 = 0, $parent575 = 0, $_c = 0, $bk576 = 0, $fd577 = 0, $127 = 0, $cmp580 = 0, $shr582 = 0, $sub585 = 0, $cond = 0, $shl586 = 0, $T_0 = 0, $K579_0 = 0, $head587 = 0, $128 = 0, $and588 = 0, $cmp589 = 0, $shr592 = 0, $arrayidx595 = 0, $129 = 0, $cmp597 = 0, $shl596 = 0, $130 = 0, $131 = 0, $cmp601 = 0, $parent606 = 0, $T_0_c240 = 0, $bk607 = 0, $fd608 = 0, $fd613 = 0, $132 = 0, $133 = 0, $134 = 0, $cmp614 = 0, $135 = 0, $cmp617 = 0, $bk624 = 0, $fd626 = 0, $_c239 = 0, $bk627 = 0, $T_0_c = 0, $parent628 = 0, $136 = 0, $dec = 0, $cmp632 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = ($mem | 0) == 0;
    if ($cmp) {
      label = 142;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $add_ptr = $mem - 8 | 0;
    $0 = $add_ptr;
    $1 = HEAP32[27921] | 0;
    $cmp1 = $add_ptr >>> 0 < $1 >>> 0;
    if ($cmp1) {
      label = 141;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $head = $mem - 4 | 0;
    $2 = $head;
    $3 = HEAP32[$2 >> 2] | 0;
    $and = $3 & 3;
    $cmp2 = ($and | 0) == 1;
    if ($cmp2) {
      label = 141;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $and5 = $3 & -8;
    $add_ptr_sum = $and5 - 8 | 0;
    $add_ptr6 = $mem + $add_ptr_sum | 0;
    $4 = $add_ptr6;
    $and8 = $3 & 1;
    $tobool9 = ($and8 | 0) == 0;
    if ($tobool9) {
      label = 6;
      break;
    } else {
      $p_0 = $0;
      $psize_0 = $and5;
      label = 57;
      break;
    }
   case 6:
    $prev_foot = $add_ptr;
    $5 = HEAP32[$prev_foot >> 2] | 0;
    $cmp13 = ($and | 0) == 0;
    if ($cmp13) {
      label = 142;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $add_ptr_sum231 = -8 - $5 | 0;
    $add_ptr16 = $mem + $add_ptr_sum231 | 0;
    $6 = $add_ptr16;
    $add17 = $5 + $and5 | 0;
    $cmp18 = $add_ptr16 >>> 0 < $1 >>> 0;
    if ($cmp18) {
      label = 141;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $7 = HEAP32[27922] | 0;
    $cmp22 = ($6 | 0) == ($7 | 0);
    if ($cmp22) {
      label = 55;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $shr = $5 >>> 3;
    $cmp25 = $5 >>> 0 < 256;
    if ($cmp25) {
      label = 10;
      break;
    } else {
      label = 21;
      break;
    }
   case 10:
    $add_ptr16_sum258 = $add_ptr_sum231 + 8 | 0;
    $fd = $mem + $add_ptr16_sum258 | 0;
    $8 = $fd;
    $9 = HEAP32[$8 >> 2] | 0;
    $add_ptr16_sum259 = $add_ptr_sum231 + 12 | 0;
    $bk = $mem + $add_ptr16_sum259 | 0;
    $10 = $bk;
    $11 = HEAP32[$10 >> 2] | 0;
    $shl = $shr << 1;
    $arrayidx = 111708 + ($shl << 2) | 0;
    $12 = $arrayidx;
    $cmp29 = ($9 | 0) == ($12 | 0);
    if ($cmp29) {
      label = 13;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $13 = $9;
    $cmp31 = $13 >>> 0 < $1 >>> 0;
    if ($cmp31) {
      label = 20;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $bk34 = $9 + 12 | 0;
    $14 = HEAP32[$bk34 >> 2] | 0;
    $cmp35 = ($14 | 0) == ($6 | 0);
    if ($cmp35) {
      label = 13;
      break;
    } else {
      label = 20;
      break;
    }
   case 13:
    $cmp42 = ($11 | 0) == ($9 | 0);
    if ($cmp42) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $shl45 = 1 << $shr;
    $neg = $shl45 ^ -1;
    $15 = HEAP32[27917] | 0;
    $and46 = $15 & $neg;
    HEAP32[27917] = $and46;
    $p_0 = $6;
    $psize_0 = $add17;
    label = 57;
    break;
   case 15:
    $cmp50 = ($11 | 0) == ($12 | 0);
    if ($cmp50) {
      label = 18;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $16 = $11;
    $17 = HEAP32[27921] | 0;
    $cmp53 = $16 >>> 0 < $17 >>> 0;
    if ($cmp53) {
      label = 19;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $fd56 = $11 + 8 | 0;
    $18 = HEAP32[$fd56 >> 2] | 0;
    $cmp57 = ($18 | 0) == ($6 | 0);
    if ($cmp57) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    $bk66 = $9 + 12 | 0;
    HEAP32[$bk66 >> 2] = $11;
    $fd67 = $11 + 8 | 0;
    HEAP32[$fd67 >> 2] = $9;
    $p_0 = $6;
    $psize_0 = $add17;
    label = 57;
    break;
   case 19:
    _abort();
   case 20:
    _abort();
   case 21:
    $19 = $add_ptr16;
    $add_ptr16_sum252 = $add_ptr_sum231 + 24 | 0;
    $parent = $mem + $add_ptr16_sum252 | 0;
    $20 = $parent;
    $21 = HEAP32[$20 >> 2] | 0;
    $add_ptr16_sum253 = $add_ptr_sum231 + 12 | 0;
    $bk73 = $mem + $add_ptr16_sum253 | 0;
    $22 = $bk73;
    $23 = HEAP32[$22 >> 2] | 0;
    $cmp74 = ($23 | 0) == ($19 | 0);
    if ($cmp74) {
      label = 27;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $add_ptr16_sum257 = $add_ptr_sum231 + 8 | 0;
    $fd78 = $mem + $add_ptr16_sum257 | 0;
    $24 = $fd78;
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = $25;
    $cmp80 = $26 >>> 0 < $1 >>> 0;
    if ($cmp80) {
      label = 26;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $bk82 = $25 + 12 | 0;
    $27 = HEAP32[$bk82 >> 2] | 0;
    $cmp83 = ($27 | 0) == ($19 | 0);
    if ($cmp83) {
      label = 24;
      break;
    } else {
      label = 26;
      break;
    }
   case 24:
    $fd86 = $23 + 8 | 0;
    $28 = HEAP32[$fd86 >> 2] | 0;
    $cmp87 = ($28 | 0) == ($19 | 0);
    if ($cmp87) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    HEAP32[$bk82 >> 2] = $23;
    HEAP32[$fd86 >> 2] = $25;
    $R_1 = $23;
    label = 35;
    break;
   case 26:
    _abort();
   case 27:
    $child_sum = $add_ptr_sum231 + 20 | 0;
    $arrayidx99 = $mem + $child_sum | 0;
    $29 = $arrayidx99;
    $30 = HEAP32[$29 >> 2] | 0;
    $cmp100 = ($30 | 0) == 0;
    if ($cmp100) {
      label = 28;
      break;
    } else {
      $R_0 = $30;
      $RP_0 = $29;
      label = 29;
      break;
    }
   case 28:
    $add_ptr16_sum254 = $add_ptr_sum231 + 16 | 0;
    $child = $mem + $add_ptr16_sum254 | 0;
    $arrayidx103 = $child;
    $31 = HEAP32[$arrayidx103 >> 2] | 0;
    $cmp104 = ($31 | 0) == 0;
    if ($cmp104) {
      $R_1 = 0;
      label = 35;
      break;
    } else {
      $R_0 = $31;
      $RP_0 = $arrayidx103;
      label = 29;
      break;
    }
   case 29:
    $arrayidx108 = $R_0 + 20 | 0;
    $32 = HEAP32[$arrayidx108 >> 2] | 0;
    $cmp109 = ($32 | 0) == 0;
    if ($cmp109) {
      label = 30;
      break;
    } else {
      $CP_0 = $arrayidx108;
      label = 31;
      break;
    }
   case 30:
    $arrayidx113 = $R_0 + 16 | 0;
    $33 = HEAP32[$arrayidx113 >> 2] | 0;
    $cmp114 = ($33 | 0) == 0;
    if ($cmp114) {
      label = 32;
      break;
    } else {
      $CP_0 = $arrayidx113;
      label = 31;
      break;
    }
   case 31:
    $34 = HEAP32[$CP_0 >> 2] | 0;
    $R_0 = $34;
    $RP_0 = $CP_0;
    label = 29;
    break;
   case 32:
    $35 = $RP_0;
    $36 = HEAP32[27921] | 0;
    $cmp118 = $35 >>> 0 < $36 >>> 0;
    if ($cmp118) {
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    HEAP32[$RP_0 >> 2] = 0;
    $R_1 = $R_0;
    label = 35;
    break;
   case 34:
    _abort();
   case 35:
    $cmp127 = ($21 | 0) == 0;
    if ($cmp127) {
      $p_0 = $6;
      $psize_0 = $add17;
      label = 57;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    $add_ptr16_sum255 = $add_ptr_sum231 + 28 | 0;
    $index = $mem + $add_ptr16_sum255 | 0;
    $37 = $index;
    $38 = HEAP32[$37 >> 2] | 0;
    $arrayidx130 = 111972 + ($38 << 2) | 0;
    $39 = HEAP32[$arrayidx130 >> 2] | 0;
    $cmp131 = ($19 | 0) == ($39 | 0);
    if ($cmp131) {
      label = 37;
      break;
    } else {
      label = 39;
      break;
    }
   case 37:
    HEAP32[$arrayidx130 >> 2] = $R_1;
    $cond264 = ($R_1 | 0) == 0;
    if ($cond264) {
      label = 38;
      break;
    } else {
      label = 45;
      break;
    }
   case 38:
    $40 = HEAP32[$37 >> 2] | 0;
    $shl138 = 1 << $40;
    $neg139 = $shl138 ^ -1;
    $41 = HEAP32[27918] | 0;
    $and140 = $41 & $neg139;
    HEAP32[27918] = $and140;
    $p_0 = $6;
    $psize_0 = $add17;
    label = 57;
    break;
   case 39:
    $42 = $21;
    $43 = HEAP32[27921] | 0;
    $cmp143 = $42 >>> 0 < $43 >>> 0;
    if ($cmp143) {
      label = 43;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    $arrayidx149 = $21 + 16 | 0;
    $44 = HEAP32[$arrayidx149 >> 2] | 0;
    $cmp150 = ($44 | 0) == ($19 | 0);
    if ($cmp150) {
      label = 41;
      break;
    } else {
      label = 42;
      break;
    }
   case 41:
    HEAP32[$arrayidx149 >> 2] = $R_1;
    label = 44;
    break;
   case 42:
    $arrayidx157 = $21 + 20 | 0;
    HEAP32[$arrayidx157 >> 2] = $R_1;
    label = 44;
    break;
   case 43:
    _abort();
   case 44:
    $cmp162 = ($R_1 | 0) == 0;
    if ($cmp162) {
      $p_0 = $6;
      $psize_0 = $add17;
      label = 57;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    $45 = $R_1;
    $46 = HEAP32[27921] | 0;
    $cmp165 = $45 >>> 0 < $46 >>> 0;
    if ($cmp165) {
      label = 54;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    $parent170 = $R_1 + 24 | 0;
    HEAP32[$parent170 >> 2] = $21;
    $add_ptr16_sum256 = $add_ptr_sum231 + 16 | 0;
    $child171 = $mem + $add_ptr16_sum256 | 0;
    $arrayidx172 = $child171;
    $47 = HEAP32[$arrayidx172 >> 2] | 0;
    $cmp173 = ($47 | 0) == 0;
    if ($cmp173) {
      label = 50;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    $48 = $47;
    $49 = HEAP32[27921] | 0;
    $cmp176 = $48 >>> 0 < $49 >>> 0;
    if ($cmp176) {
      label = 49;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    $arrayidx182 = $R_1 + 16 | 0;
    HEAP32[$arrayidx182 >> 2] = $47;
    $parent183 = $47 + 24 | 0;
    HEAP32[$parent183 >> 2] = $R_1;
    label = 50;
    break;
   case 49:
    _abort();
   case 50:
    $child171_sum = $add_ptr_sum231 + 20 | 0;
    $arrayidx188 = $mem + $child171_sum | 0;
    $50 = $arrayidx188;
    $51 = HEAP32[$50 >> 2] | 0;
    $cmp189 = ($51 | 0) == 0;
    if ($cmp189) {
      $p_0 = $6;
      $psize_0 = $add17;
      label = 57;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    $52 = $51;
    $53 = HEAP32[27921] | 0;
    $cmp192 = $52 >>> 0 < $53 >>> 0;
    if ($cmp192) {
      label = 53;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    $arrayidx198 = $R_1 + 20 | 0;
    HEAP32[$arrayidx198 >> 2] = $51;
    $parent199 = $51 + 24 | 0;
    HEAP32[$parent199 >> 2] = $R_1;
    $p_0 = $6;
    $psize_0 = $add17;
    label = 57;
    break;
   case 53:
    _abort();
   case 54:
    _abort();
   case 55:
    $add_ptr6_sum = $and5 - 4 | 0;
    $head209 = $mem + $add_ptr6_sum | 0;
    $54 = $head209;
    $55 = HEAP32[$54 >> 2] | 0;
    $and210 = $55 & 3;
    $cmp211 = ($and210 | 0) == 3;
    if ($cmp211) {
      label = 56;
      break;
    } else {
      $p_0 = $6;
      $psize_0 = $add17;
      label = 57;
      break;
    }
   case 56:
    HEAP32[27919] = $add17;
    $56 = HEAP32[$54 >> 2] | 0;
    $and215 = $56 & -2;
    HEAP32[$54 >> 2] = $and215;
    $or = $add17 | 1;
    $add_ptr16_sum = $add_ptr_sum231 + 4 | 0;
    $head216 = $mem + $add_ptr16_sum | 0;
    $57 = $head216;
    HEAP32[$57 >> 2] = $or;
    $prev_foot218 = $add_ptr6;
    HEAP32[$prev_foot218 >> 2] = $add17;
    label = 142;
    break;
   case 57:
    $58 = $p_0;
    $cmp225 = $58 >>> 0 < $add_ptr6 >>> 0;
    if ($cmp225) {
      label = 58;
      break;
    } else {
      label = 141;
      break;
    }
   case 58:
    $add_ptr6_sum250 = $and5 - 4 | 0;
    $head228 = $mem + $add_ptr6_sum250 | 0;
    $59 = $head228;
    $60 = HEAP32[$59 >> 2] | 0;
    $and229 = $60 & 1;
    $tobool230 = ($and229 | 0) == 0;
    if ($tobool230) {
      label = 141;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    $and237 = $60 & 2;
    $tobool238 = ($and237 | 0) == 0;
    if ($tobool238) {
      label = 60;
      break;
    } else {
      label = 115;
      break;
    }
   case 60:
    $61 = HEAP32[27923] | 0;
    $cmp240 = ($4 | 0) == ($61 | 0);
    if ($cmp240) {
      label = 61;
      break;
    } else {
      label = 65;
      break;
    }
   case 61:
    $62 = HEAP32[27920] | 0;
    $add243 = $62 + $psize_0 | 0;
    HEAP32[27920] = $add243;
    HEAP32[27923] = $p_0;
    $or244 = $add243 | 1;
    $head245 = $p_0 + 4 | 0;
    HEAP32[$head245 >> 2] = $or244;
    $63 = HEAP32[27922] | 0;
    $cmp246 = ($p_0 | 0) == ($63 | 0);
    if ($cmp246) {
      label = 62;
      break;
    } else {
      label = 63;
      break;
    }
   case 62:
    HEAP32[27922] = 0;
    HEAP32[27919] = 0;
    label = 63;
    break;
   case 63:
    $64 = HEAP32[27924] | 0;
    $cmp250 = $add243 >>> 0 > $64 >>> 0;
    if ($cmp250) {
      label = 64;
      break;
    } else {
      label = 142;
      break;
    }
   case 64:
    $65 = _sys_trim(0) | 0;
    label = 142;
    break;
   case 65:
    $66 = HEAP32[27922] | 0;
    $cmp255 = ($4 | 0) == ($66 | 0);
    if ($cmp255) {
      label = 66;
      break;
    } else {
      label = 67;
      break;
    }
   case 66:
    $67 = HEAP32[27919] | 0;
    $add258 = $67 + $psize_0 | 0;
    HEAP32[27919] = $add258;
    HEAP32[27922] = $p_0;
    $or259 = $add258 | 1;
    $head260 = $p_0 + 4 | 0;
    HEAP32[$head260 >> 2] = $or259;
    $add_ptr261 = $58 + $add258 | 0;
    $prev_foot262 = $add_ptr261;
    HEAP32[$prev_foot262 >> 2] = $add258;
    label = 142;
    break;
   case 67:
    $and265 = $60 & -8;
    $add266 = $and265 + $psize_0 | 0;
    $shr267 = $60 >>> 3;
    $cmp268 = $60 >>> 0 < 256;
    if ($cmp268) {
      label = 68;
      break;
    } else {
      label = 79;
      break;
    }
   case 68:
    $fd272 = $mem + $and5 | 0;
    $68 = $fd272;
    $69 = HEAP32[$68 >> 2] | 0;
    $add_ptr6_sum248249 = $and5 | 4;
    $bk274 = $mem + $add_ptr6_sum248249 | 0;
    $70 = $bk274;
    $71 = HEAP32[$70 >> 2] | 0;
    $shl277 = $shr267 << 1;
    $arrayidx278 = 111708 + ($shl277 << 2) | 0;
    $72 = $arrayidx278;
    $cmp279 = ($69 | 0) == ($72 | 0);
    if ($cmp279) {
      label = 71;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    $73 = $69;
    $74 = HEAP32[27921] | 0;
    $cmp282 = $73 >>> 0 < $74 >>> 0;
    if ($cmp282) {
      label = 78;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    $bk285 = $69 + 12 | 0;
    $75 = HEAP32[$bk285 >> 2] | 0;
    $cmp286 = ($75 | 0) == ($4 | 0);
    if ($cmp286) {
      label = 71;
      break;
    } else {
      label = 78;
      break;
    }
   case 71:
    $cmp295 = ($71 | 0) == ($69 | 0);
    if ($cmp295) {
      label = 72;
      break;
    } else {
      label = 73;
      break;
    }
   case 72:
    $shl298 = 1 << $shr267;
    $neg299 = $shl298 ^ -1;
    $76 = HEAP32[27917] | 0;
    $and300 = $76 & $neg299;
    HEAP32[27917] = $and300;
    label = 113;
    break;
   case 73:
    $cmp304 = ($71 | 0) == ($72 | 0);
    if ($cmp304) {
      label = 76;
      break;
    } else {
      label = 74;
      break;
    }
   case 74:
    $77 = $71;
    $78 = HEAP32[27921] | 0;
    $cmp307 = $77 >>> 0 < $78 >>> 0;
    if ($cmp307) {
      label = 77;
      break;
    } else {
      label = 75;
      break;
    }
   case 75:
    $fd310 = $71 + 8 | 0;
    $79 = HEAP32[$fd310 >> 2] | 0;
    $cmp311 = ($79 | 0) == ($4 | 0);
    if ($cmp311) {
      label = 76;
      break;
    } else {
      label = 77;
      break;
    }
   case 76:
    $bk320 = $69 + 12 | 0;
    HEAP32[$bk320 >> 2] = $71;
    $fd321 = $71 + 8 | 0;
    HEAP32[$fd321 >> 2] = $69;
    label = 113;
    break;
   case 77:
    _abort();
   case 78:
    _abort();
   case 79:
    $80 = $add_ptr6;
    $add_ptr6_sum233 = $and5 + 16 | 0;
    $parent330 = $mem + $add_ptr6_sum233 | 0;
    $81 = $parent330;
    $82 = HEAP32[$81 >> 2] | 0;
    $add_ptr6_sum234235 = $and5 | 4;
    $bk332 = $mem + $add_ptr6_sum234235 | 0;
    $83 = $bk332;
    $84 = HEAP32[$83 >> 2] | 0;
    $cmp333 = ($84 | 0) == ($80 | 0);
    if ($cmp333) {
      label = 85;
      break;
    } else {
      label = 80;
      break;
    }
   case 80:
    $fd337 = $mem + $and5 | 0;
    $85 = $fd337;
    $86 = HEAP32[$85 >> 2] | 0;
    $87 = $86;
    $88 = HEAP32[27921] | 0;
    $cmp339 = $87 >>> 0 < $88 >>> 0;
    if ($cmp339) {
      label = 84;
      break;
    } else {
      label = 81;
      break;
    }
   case 81:
    $bk342 = $86 + 12 | 0;
    $89 = HEAP32[$bk342 >> 2] | 0;
    $cmp343 = ($89 | 0) == ($80 | 0);
    if ($cmp343) {
      label = 82;
      break;
    } else {
      label = 84;
      break;
    }
   case 82:
    $fd346 = $84 + 8 | 0;
    $90 = HEAP32[$fd346 >> 2] | 0;
    $cmp347 = ($90 | 0) == ($80 | 0);
    if ($cmp347) {
      label = 83;
      break;
    } else {
      label = 84;
      break;
    }
   case 83:
    HEAP32[$bk342 >> 2] = $84;
    HEAP32[$fd346 >> 2] = $86;
    $R331_1 = $84;
    label = 93;
    break;
   case 84:
    _abort();
   case 85:
    $child360_sum = $and5 + 12 | 0;
    $arrayidx361 = $mem + $child360_sum | 0;
    $91 = $arrayidx361;
    $92 = HEAP32[$91 >> 2] | 0;
    $cmp362 = ($92 | 0) == 0;
    if ($cmp362) {
      label = 86;
      break;
    } else {
      $R331_0 = $92;
      $RP359_0 = $91;
      label = 87;
      break;
    }
   case 86:
    $add_ptr6_sum236 = $and5 + 8 | 0;
    $child360 = $mem + $add_ptr6_sum236 | 0;
    $arrayidx366 = $child360;
    $93 = HEAP32[$arrayidx366 >> 2] | 0;
    $cmp367 = ($93 | 0) == 0;
    if ($cmp367) {
      $R331_1 = 0;
      label = 93;
      break;
    } else {
      $R331_0 = $93;
      $RP359_0 = $arrayidx366;
      label = 87;
      break;
    }
   case 87:
    $arrayidx373 = $R331_0 + 20 | 0;
    $94 = HEAP32[$arrayidx373 >> 2] | 0;
    $cmp374 = ($94 | 0) == 0;
    if ($cmp374) {
      label = 88;
      break;
    } else {
      $CP370_0 = $arrayidx373;
      label = 89;
      break;
    }
   case 88:
    $arrayidx378 = $R331_0 + 16 | 0;
    $95 = HEAP32[$arrayidx378 >> 2] | 0;
    $cmp379 = ($95 | 0) == 0;
    if ($cmp379) {
      label = 90;
      break;
    } else {
      $CP370_0 = $arrayidx378;
      label = 89;
      break;
    }
   case 89:
    $96 = HEAP32[$CP370_0 >> 2] | 0;
    $R331_0 = $96;
    $RP359_0 = $CP370_0;
    label = 87;
    break;
   case 90:
    $97 = $RP359_0;
    $98 = HEAP32[27921] | 0;
    $cmp385 = $97 >>> 0 < $98 >>> 0;
    if ($cmp385) {
      label = 92;
      break;
    } else {
      label = 91;
      break;
    }
   case 91:
    HEAP32[$RP359_0 >> 2] = 0;
    $R331_1 = $R331_0;
    label = 93;
    break;
   case 92:
    _abort();
   case 93:
    $cmp394 = ($82 | 0) == 0;
    if ($cmp394) {
      label = 113;
      break;
    } else {
      label = 94;
      break;
    }
   case 94:
    $add_ptr6_sum244 = $and5 + 20 | 0;
    $index398 = $mem + $add_ptr6_sum244 | 0;
    $99 = $index398;
    $100 = HEAP32[$99 >> 2] | 0;
    $arrayidx399 = 111972 + ($100 << 2) | 0;
    $101 = HEAP32[$arrayidx399 >> 2] | 0;
    $cmp400 = ($80 | 0) == ($101 | 0);
    if ($cmp400) {
      label = 95;
      break;
    } else {
      label = 97;
      break;
    }
   case 95:
    HEAP32[$arrayidx399 >> 2] = $R331_1;
    $cond265 = ($R331_1 | 0) == 0;
    if ($cond265) {
      label = 96;
      break;
    } else {
      label = 103;
      break;
    }
   case 96:
    $102 = HEAP32[$99 >> 2] | 0;
    $shl407 = 1 << $102;
    $neg408 = $shl407 ^ -1;
    $103 = HEAP32[27918] | 0;
    $and409 = $103 & $neg408;
    HEAP32[27918] = $and409;
    label = 113;
    break;
   case 97:
    $104 = $82;
    $105 = HEAP32[27921] | 0;
    $cmp412 = $104 >>> 0 < $105 >>> 0;
    if ($cmp412) {
      label = 101;
      break;
    } else {
      label = 98;
      break;
    }
   case 98:
    $arrayidx418 = $82 + 16 | 0;
    $106 = HEAP32[$arrayidx418 >> 2] | 0;
    $cmp419 = ($106 | 0) == ($80 | 0);
    if ($cmp419) {
      label = 99;
      break;
    } else {
      label = 100;
      break;
    }
   case 99:
    HEAP32[$arrayidx418 >> 2] = $R331_1;
    label = 102;
    break;
   case 100:
    $arrayidx426 = $82 + 20 | 0;
    HEAP32[$arrayidx426 >> 2] = $R331_1;
    label = 102;
    break;
   case 101:
    _abort();
   case 102:
    $cmp431 = ($R331_1 | 0) == 0;
    if ($cmp431) {
      label = 113;
      break;
    } else {
      label = 103;
      break;
    }
   case 103:
    $107 = $R331_1;
    $108 = HEAP32[27921] | 0;
    $cmp434 = $107 >>> 0 < $108 >>> 0;
    if ($cmp434) {
      label = 112;
      break;
    } else {
      label = 104;
      break;
    }
   case 104:
    $parent441 = $R331_1 + 24 | 0;
    HEAP32[$parent441 >> 2] = $82;
    $add_ptr6_sum245 = $and5 + 8 | 0;
    $child442 = $mem + $add_ptr6_sum245 | 0;
    $arrayidx443 = $child442;
    $109 = HEAP32[$arrayidx443 >> 2] | 0;
    $cmp444 = ($109 | 0) == 0;
    if ($cmp444) {
      label = 108;
      break;
    } else {
      label = 105;
      break;
    }
   case 105:
    $110 = $109;
    $111 = HEAP32[27921] | 0;
    $cmp447 = $110 >>> 0 < $111 >>> 0;
    if ($cmp447) {
      label = 107;
      break;
    } else {
      label = 106;
      break;
    }
   case 106:
    $arrayidx453 = $R331_1 + 16 | 0;
    HEAP32[$arrayidx453 >> 2] = $109;
    $parent454 = $109 + 24 | 0;
    HEAP32[$parent454 >> 2] = $R331_1;
    label = 108;
    break;
   case 107:
    _abort();
   case 108:
    $child442_sum = $and5 + 12 | 0;
    $arrayidx459 = $mem + $child442_sum | 0;
    $112 = $arrayidx459;
    $113 = HEAP32[$112 >> 2] | 0;
    $cmp460 = ($113 | 0) == 0;
    if ($cmp460) {
      label = 113;
      break;
    } else {
      label = 109;
      break;
    }
   case 109:
    $114 = $113;
    $115 = HEAP32[27921] | 0;
    $cmp463 = $114 >>> 0 < $115 >>> 0;
    if ($cmp463) {
      label = 111;
      break;
    } else {
      label = 110;
      break;
    }
   case 110:
    $arrayidx469 = $R331_1 + 20 | 0;
    HEAP32[$arrayidx469 >> 2] = $113;
    $parent470 = $113 + 24 | 0;
    HEAP32[$parent470 >> 2] = $R331_1;
    label = 113;
    break;
   case 111:
    _abort();
   case 112:
    _abort();
   case 113:
    $or479 = $add266 | 1;
    $head480 = $p_0 + 4 | 0;
    HEAP32[$head480 >> 2] = $or479;
    $add_ptr481 = $58 + $add266 | 0;
    $prev_foot482 = $add_ptr481;
    HEAP32[$prev_foot482 >> 2] = $add266;
    $116 = HEAP32[27922] | 0;
    $cmp483 = ($p_0 | 0) == ($116 | 0);
    if ($cmp483) {
      label = 114;
      break;
    } else {
      $psize_1 = $add266;
      label = 116;
      break;
    }
   case 114:
    HEAP32[27919] = $add266;
    label = 142;
    break;
   case 115:
    $and491 = $60 & -2;
    HEAP32[$59 >> 2] = $and491;
    $or492 = $psize_0 | 1;
    $head493 = $p_0 + 4 | 0;
    HEAP32[$head493 >> 2] = $or492;
    $add_ptr494 = $58 + $psize_0 | 0;
    $prev_foot495 = $add_ptr494;
    HEAP32[$prev_foot495 >> 2] = $psize_0;
    $psize_1 = $psize_0;
    label = 116;
    break;
   case 116:
    $shr497 = $psize_1 >>> 3;
    $cmp498 = $psize_1 >>> 0 < 256;
    if ($cmp498) {
      label = 117;
      break;
    } else {
      label = 122;
      break;
    }
   case 117:
    $shl504 = $shr497 << 1;
    $arrayidx505 = 111708 + ($shl504 << 2) | 0;
    $117 = $arrayidx505;
    $118 = HEAP32[27917] | 0;
    $shl507 = 1 << $shr497;
    $and508 = $118 & $shl507;
    $tobool509 = ($and508 | 0) == 0;
    if ($tobool509) {
      label = 118;
      break;
    } else {
      label = 119;
      break;
    }
   case 118:
    $or512 = $118 | $shl507;
    HEAP32[27917] = $or512;
    $F506_0 = $117;
    label = 121;
    break;
   case 119:
    $arrayidx505_sum243 = $shl504 + 2 | 0;
    $119 = 111708 + ($arrayidx505_sum243 << 2) | 0;
    $120 = HEAP32[$119 >> 2] | 0;
    $121 = $120;
    $122 = HEAP32[27921] | 0;
    $cmp515 = $121 >>> 0 < $122 >>> 0;
    if ($cmp515) {
      label = 120;
      break;
    } else {
      $F506_0 = $120;
      label = 121;
      break;
    }
   case 120:
    _abort();
   case 121:
    $arrayidx505_sum = $shl504 + 2 | 0;
    $123 = 111708 + ($arrayidx505_sum << 2) | 0;
    HEAP32[$123 >> 2] = $p_0;
    $bk525 = $F506_0 + 12 | 0;
    HEAP32[$bk525 >> 2] = $p_0;
    $fd526 = $p_0 + 8 | 0;
    HEAP32[$fd526 >> 2] = $F506_0;
    $bk527 = $p_0 + 12 | 0;
    HEAP32[$bk527 >> 2] = $117;
    label = 142;
    break;
   case 122:
    $124 = $p_0;
    $shr531 = $psize_1 >>> 8;
    $cmp532 = ($shr531 | 0) == 0;
    if ($cmp532) {
      $I530_0 = 0;
      label = 125;
      break;
    } else {
      label = 123;
      break;
    }
   case 123:
    $cmp536 = $psize_1 >>> 0 > 16777215;
    if ($cmp536) {
      $I530_0 = 31;
      label = 125;
      break;
    } else {
      label = 124;
      break;
    }
   case 124:
    $sub = $shr531 + 1048320 | 0;
    $shr540 = $sub >>> 16;
    $and541 = $shr540 & 8;
    $shl542 = $shr531 << $and541;
    $sub543 = $shl542 + 520192 | 0;
    $shr544 = $sub543 >>> 16;
    $and545 = $shr544 & 4;
    $add546 = $and545 | $and541;
    $shl547 = $shl542 << $and545;
    $sub548 = $shl547 + 245760 | 0;
    $shr549 = $sub548 >>> 16;
    $and550 = $shr549 & 2;
    $add551 = $add546 | $and550;
    $sub552 = 14 - $add551 | 0;
    $shl553 = $shl547 << $and550;
    $shr554 = $shl553 >>> 15;
    $add555 = $sub552 + $shr554 | 0;
    $shl556 = $add555 << 1;
    $add557 = $add555 + 7 | 0;
    $shr558 = $psize_1 >>> ($add557 >>> 0);
    $and559 = $shr558 & 1;
    $add560 = $and559 | $shl556;
    $I530_0 = $add560;
    label = 125;
    break;
   case 125:
    $arrayidx563 = 111972 + ($I530_0 << 2) | 0;
    $index564 = $p_0 + 28 | 0;
    $I530_0_c = $I530_0;
    HEAP32[$index564 >> 2] = $I530_0_c;
    $arrayidx566 = $p_0 + 20 | 0;
    HEAP32[$arrayidx566 >> 2] = 0;
    $125 = $p_0 + 16 | 0;
    HEAP32[$125 >> 2] = 0;
    $126 = HEAP32[27918] | 0;
    $shl569 = 1 << $I530_0;
    $and570 = $126 & $shl569;
    $tobool571 = ($and570 | 0) == 0;
    if ($tobool571) {
      label = 126;
      break;
    } else {
      label = 127;
      break;
    }
   case 126:
    $or574 = $126 | $shl569;
    HEAP32[27918] = $or574;
    HEAP32[$arrayidx563 >> 2] = $124;
    $parent575 = $p_0 + 24 | 0;
    $_c = $arrayidx563;
    HEAP32[$parent575 >> 2] = $_c;
    $bk576 = $p_0 + 12 | 0;
    HEAP32[$bk576 >> 2] = $p_0;
    $fd577 = $p_0 + 8 | 0;
    HEAP32[$fd577 >> 2] = $p_0;
    label = 139;
    break;
   case 127:
    $127 = HEAP32[$arrayidx563 >> 2] | 0;
    $cmp580 = ($I530_0 | 0) == 31;
    if ($cmp580) {
      $cond = 0;
      label = 129;
      break;
    } else {
      label = 128;
      break;
    }
   case 128:
    $shr582 = $I530_0 >>> 1;
    $sub585 = 25 - $shr582 | 0;
    $cond = $sub585;
    label = 129;
    break;
   case 129:
    $shl586 = $psize_1 << $cond;
    $K579_0 = $shl586;
    $T_0 = $127;
    label = 130;
    break;
   case 130:
    $head587 = $T_0 + 4 | 0;
    $128 = HEAP32[$head587 >> 2] | 0;
    $and588 = $128 & -8;
    $cmp589 = ($and588 | 0) == ($psize_1 | 0);
    if ($cmp589) {
      label = 135;
      break;
    } else {
      label = 131;
      break;
    }
   case 131:
    $shr592 = $K579_0 >>> 31;
    $arrayidx595 = $T_0 + 16 + ($shr592 << 2) | 0;
    $129 = HEAP32[$arrayidx595 >> 2] | 0;
    $cmp597 = ($129 | 0) == 0;
    $shl596 = $K579_0 << 1;
    if ($cmp597) {
      label = 132;
      break;
    } else {
      $K579_0 = $shl596;
      $T_0 = $129;
      label = 130;
      break;
    }
   case 132:
    $130 = $arrayidx595;
    $131 = HEAP32[27921] | 0;
    $cmp601 = $130 >>> 0 < $131 >>> 0;
    if ($cmp601) {
      label = 134;
      break;
    } else {
      label = 133;
      break;
    }
   case 133:
    HEAP32[$arrayidx595 >> 2] = $124;
    $parent606 = $p_0 + 24 | 0;
    $T_0_c240 = $T_0;
    HEAP32[$parent606 >> 2] = $T_0_c240;
    $bk607 = $p_0 + 12 | 0;
    HEAP32[$bk607 >> 2] = $p_0;
    $fd608 = $p_0 + 8 | 0;
    HEAP32[$fd608 >> 2] = $p_0;
    label = 139;
    break;
   case 134:
    _abort();
   case 135:
    $fd613 = $T_0 + 8 | 0;
    $132 = HEAP32[$fd613 >> 2] | 0;
    $133 = $T_0;
    $134 = HEAP32[27921] | 0;
    $cmp614 = $133 >>> 0 < $134 >>> 0;
    if ($cmp614) {
      label = 138;
      break;
    } else {
      label = 136;
      break;
    }
   case 136:
    $135 = $132;
    $cmp617 = $135 >>> 0 < $134 >>> 0;
    if ($cmp617) {
      label = 138;
      break;
    } else {
      label = 137;
      break;
    }
   case 137:
    $bk624 = $132 + 12 | 0;
    HEAP32[$bk624 >> 2] = $124;
    HEAP32[$fd613 >> 2] = $124;
    $fd626 = $p_0 + 8 | 0;
    $_c239 = $132;
    HEAP32[$fd626 >> 2] = $_c239;
    $bk627 = $p_0 + 12 | 0;
    $T_0_c = $T_0;
    HEAP32[$bk627 >> 2] = $T_0_c;
    $parent628 = $p_0 + 24 | 0;
    HEAP32[$parent628 >> 2] = 0;
    label = 139;
    break;
   case 138:
    _abort();
   case 139:
    $136 = HEAP32[27925] | 0;
    $dec = $136 - 1 | 0;
    HEAP32[27925] = $dec;
    $cmp632 = ($dec | 0) == 0;
    if ($cmp632) {
      label = 140;
      break;
    } else {
      label = 142;
      break;
    }
   case 140:
    _release_unused_segments();
    label = 142;
    break;
   case 141:
    _abort();
   case 142:
    return;
  }
}
function _release_unused_segments() {
  var $sp_0_in = 0, $sp_0 = 0, $cmp = 0, $next4 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $sp_0_in = 112124;
    label = 3;
    break;
   case 3:
    $sp_0 = HEAP32[$sp_0_in >> 2] | 0;
    $cmp = ($sp_0 | 0) == 0;
    $next4 = $sp_0 + 8 | 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      $sp_0_in = $next4;
      label = 3;
      break;
    }
   case 4:
    HEAP32[27925] = -1;
    return;
  }
}
function _sys_trim($pad) {
  $pad = $pad | 0;
  var $0 = 0, $cmp = 0, $cmp1 = 0, $1 = 0, $cmp2 = 0, $add = 0, $2 = 0, $cmp3 = 0, $3 = 0, $add_neg = 0, $sub6 = 0, $sub = 0, $add7 = 0, $div = 0, $sub8 = 0, $mul = 0, $4 = 0, $call10 = 0, $sflags = 0, $5 = 0, $and = 0, $tobool11 = 0, $call20 = 0, $base = 0, $6 = 0, $size = 0, $7 = 0, $add_ptr = 0, $cmp21 = 0, $sub19 = 0, $cmp17 = 0, $sub19_mul = 0, $sub23 = 0, $call24 = 0, $call25 = 0, $cmp26 = 0, $cmp28 = 0, $or_cond = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $cmp34 = 0, $size36 = 0, $8 = 0, $sub37 = 0, $9 = 0, $sub38 = 0, $10 = 0, $11 = 0, $sub41 = 0, $phitmp = 0, $12 = 0, $13 = 0, $cmp47 = 0, $released_2 = 0, $cond = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = HEAP32[19732] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _init_mparams();
    label = 4;
    break;
   case 4:
    $cmp1 = $pad >>> 0 < 4294967232;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      $released_2 = 0;
      label = 14;
      break;
    }
   case 5:
    $1 = HEAP32[27923] | 0;
    $cmp2 = ($1 | 0) == 0;
    if ($cmp2) {
      $released_2 = 0;
      label = 14;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $add = $pad + 40 | 0;
    $2 = HEAP32[27920] | 0;
    $cmp3 = $2 >>> 0 > $add >>> 0;
    if ($cmp3) {
      label = 7;
      break;
    } else {
      label = 12;
      break;
    }
   case 7:
    $3 = HEAP32[19734] | 0;
    $add_neg = -40 - $pad | 0;
    $sub6 = $add_neg - 1 | 0;
    $sub = $sub6 + $2 | 0;
    $add7 = $sub + $3 | 0;
    $div = ($add7 >>> 0) / ($3 >>> 0) >>> 0;
    $sub8 = $div - 1 | 0;
    $mul = Math_imul($sub8, $3);
    $4 = $1;
    $call10 = _segment_holding($4) | 0;
    $sflags = $call10 + 12 | 0;
    $5 = HEAP32[$sflags >> 2] | 0;
    $and = $5 & 8;
    $tobool11 = ($and | 0) == 0;
    if ($tobool11) {
      label = 8;
      break;
    } else {
      label = 12;
      break;
    }
   case 8:
    $call20 = _sbrk(0) | 0;
    $base = $call10 | 0;
    $6 = HEAP32[$base >> 2] | 0;
    $size = $call10 + 4 | 0;
    $7 = HEAP32[$size >> 2] | 0;
    $add_ptr = $6 + $7 | 0;
    $cmp21 = ($call20 | 0) == ($add_ptr | 0);
    if ($cmp21) {
      label = 9;
      break;
    } else {
      label = 12;
      break;
    }
   case 9:
    $sub19 = -2147483648 - $3 | 0;
    $cmp17 = $mul >>> 0 > 2147483646;
    $sub19_mul = $cmp17 ? $sub19 : $mul;
    $sub23 = -$sub19_mul | 0;
    $call24 = _sbrk($sub23 | 0) | 0;
    $call25 = _sbrk(0) | 0;
    $cmp26 = ($call24 | 0) != -1;
    $cmp28 = $call25 >>> 0 < $call20 >>> 0;
    $or_cond = $cmp26 & $cmp28;
    if ($or_cond) {
      label = 10;
      break;
    } else {
      label = 12;
      break;
    }
   case 10:
    $sub_ptr_lhs_cast = $call20;
    $sub_ptr_rhs_cast = $call25;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $cmp34 = ($call20 | 0) == ($call25 | 0);
    if ($cmp34) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $size36 = $call10 + 4 | 0;
    $8 = HEAP32[$size36 >> 2] | 0;
    $sub37 = $8 - $sub_ptr_sub | 0;
    HEAP32[$size36 >> 2] = $sub37;
    $9 = HEAP32[28025] | 0;
    $sub38 = $9 - $sub_ptr_sub | 0;
    HEAP32[28025] = $sub38;
    $10 = HEAP32[27923] | 0;
    $11 = HEAP32[27920] | 0;
    $sub41 = $11 - $sub_ptr_sub | 0;
    _init_top($10, $sub41);
    $phitmp = ($call20 | 0) != ($call25 | 0);
    $released_2 = $phitmp;
    label = 14;
    break;
   case 12:
    $12 = HEAP32[27920] | 0;
    $13 = HEAP32[27924] | 0;
    $cmp47 = $12 >>> 0 > $13 >>> 0;
    if ($cmp47) {
      label = 13;
      break;
    } else {
      $released_2 = 0;
      label = 14;
      break;
    }
   case 13:
    HEAP32[27924] = -1;
    $released_2 = 0;
    label = 14;
    break;
   case 14:
    $cond = $released_2 & 1;
    return $cond | 0;
  }
  return 0;
}
function _realloc($oldmem, $bytes) {
  $oldmem = $oldmem | 0;
  $bytes = $bytes | 0;
  var $cmp = 0, $call = 0, $cmp1 = 0, $call3 = 0, $cmp5 = 0, $add6 = 0, $and = 0, $cond = 0, $add_ptr = 0, $0 = 0, $call7 = 0, $cmp8 = 0, $add_ptr10 = 0, $1 = 0, $call12 = 0, $cmp13 = 0, $head = 0, $2 = 0, $3 = 0, $and15 = 0, $and17 = 0, $cmp18 = 0, $cond19 = 0, $sub = 0, $cmp20 = 0, $cond24 = 0, $mem_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $cmp = ($oldmem | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $call = _malloc($bytes) | 0;
    $mem_0 = $call;
    label = 12;
    break;
   case 4:
    $cmp1 = $bytes >>> 0 > 4294967231;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $call3 = ___errno_location() | 0;
    HEAP32[$call3 >> 2] = 12;
    $mem_0 = 0;
    label = 12;
    break;
   case 6:
    $cmp5 = $bytes >>> 0 < 11;
    if ($cmp5) {
      $cond = 16;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $add6 = $bytes + 11 | 0;
    $and = $add6 & -8;
    $cond = $and;
    label = 8;
    break;
   case 8:
    $add_ptr = $oldmem - 8 | 0;
    $0 = $add_ptr;
    $call7 = _try_realloc_chunk($0, $cond) | 0;
    $cmp8 = ($call7 | 0) == 0;
    if ($cmp8) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $add_ptr10 = $call7 + 8 | 0;
    $1 = $add_ptr10;
    $mem_0 = $1;
    label = 12;
    break;
   case 10:
    $call12 = _malloc($bytes) | 0;
    $cmp13 = ($call12 | 0) == 0;
    if ($cmp13) {
      $mem_0 = 0;
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $head = $oldmem - 4 | 0;
    $2 = $head;
    $3 = HEAP32[$2 >> 2] | 0;
    $and15 = $3 & -8;
    $and17 = $3 & 3;
    $cmp18 = ($and17 | 0) == 0;
    $cond19 = $cmp18 ? 8 : 4;
    $sub = $and15 - $cond19 | 0;
    $cmp20 = $sub >>> 0 < $bytes >>> 0;
    $cond24 = $cmp20 ? $sub : $bytes;
    _memcpy($call12 | 0, $oldmem | 0, $cond24);
    _free($oldmem);
    $mem_0 = $call12;
    label = 12;
    break;
   case 12:
    return $mem_0 | 0;
  }
  return 0;
}
function _try_realloc_chunk($p, $nb) {
  $p = $p | 0;
  $nb = $nb | 0;
  var $head = 0, $0 = 0, $and = 0, $1 = 0, $add_ptr = 0, $2 = 0, $3 = 0, $cmp = 0, $and2 = 0, $cmp3 = 0, $cmp5 = 0, $or_cond = 0, $add_ptr_sum1516 = 0, $head6 = 0, $4 = 0, $5 = 0, $and7 = 0, $tobool = 0, $cmp11 = 0, $call = 0, $cmp13 = 0, $sub = 0, $cmp15 = 0, $add_ptr17 = 0, $6 = 0, $and19 = 0, $or = 0, $or20 = 0, $add_ptr17_sum = 0, $head23 = 0, $7 = 0, $or28 = 0, $8 = 0, $or32 = 0, $9 = 0, $cmp34 = 0, $10 = 0, $add = 0, $cmp36 = 0, $sub40 = 0, $add_ptr41 = 0, $11 = 0, $and43 = 0, $or44 = 0, $or45 = 0, $add_ptr41_sum = 0, $head48 = 0, $12 = 0, $or50 = 0, $13 = 0, $cmp56 = 0, $14 = 0, $add58 = 0, $cmp59 = 0, $sub62 = 0, $cmp63 = 0, $add_ptr66 = 0, $15 = 0, $add_ptr67 = 0, $and69 = 0, $or70 = 0, $or71 = 0, $add_ptr66_sum = 0, $head74 = 0, $16 = 0, $or76 = 0, $prev_foot = 0, $add_ptr67_sum = 0, $head79 = 0, $17 = 0, $18 = 0, $and80 = 0, $and87 = 0, $or88 = 0, $or89 = 0, $add_ptr91_sum = 0, $head92 = 0, $19 = 0, $20 = 0, $or93 = 0, $storemerge12 = 0, $storemerge = 0, $and100 = 0, $tobool101 = 0, $and104 = 0, $add105 = 0, $cmp106 = 0, $sub110 = 0, $shr = 0, $cmp111 = 0, $add_ptr_sum10 = 0, $fd = 0, $21 = 0, $22 = 0, $add_ptr_sum11 = 0, $bk = 0, $23 = 0, $24 = 0, $shl = 0, $arrayidx = 0, $25 = 0, $cmp114 = 0, $26 = 0, $cmp116 = 0, $bk118 = 0, $27 = 0, $cmp119 = 0, $cmp125 = 0, $shl127 = 0, $neg = 0, $28 = 0, $and128 = 0, $cmp133 = 0, $29 = 0, $30 = 0, $cmp136 = 0, $fd138 = 0, $31 = 0, $cmp139 = 0, $bk147 = 0, $fd148 = 0, $32 = 0, $add_ptr_sum = 0, $parent = 0, $33 = 0, $34 = 0, $add_ptr_sum2 = 0, $bk155 = 0, $35 = 0, $36 = 0, $cmp156 = 0, $add_ptr_sum9 = 0, $fd159 = 0, $37 = 0, $38 = 0, $39 = 0, $cmp162 = 0, $bk164 = 0, $40 = 0, $cmp165 = 0, $fd167 = 0, $41 = 0, $cmp168 = 0, $child_sum = 0, $arrayidx179 = 0, $42 = 0, $43 = 0, $cmp180 = 0, $add_ptr_sum3 = 0, $child = 0, $arrayidx182 = 0, $44 = 0, $cmp183 = 0, $RP_0 = 0, $R_0 = 0, $arrayidx186 = 0, $45 = 0, $cmp187 = 0, $arrayidx190 = 0, $46 = 0, $cmp191 = 0, $CP_0 = 0, $47 = 0, $48 = 0, $49 = 0, $cmp195 = 0, $R_1 = 0, $cmp203 = 0, $add_ptr_sum7 = 0, $index = 0, $50 = 0, $51 = 0, $arrayidx206 = 0, $52 = 0, $cmp207 = 0, $cond = 0, $53 = 0, $shl214 = 0, $neg215 = 0, $54 = 0, $and216 = 0, $55 = 0, $56 = 0, $cmp220 = 0, $arrayidx226 = 0, $57 = 0, $cmp227 = 0, $arrayidx234 = 0, $cmp239 = 0, $58 = 0, $59 = 0, $cmp243 = 0, $parent248 = 0, $add_ptr_sum8 = 0, $child249 = 0, $arrayidx250 = 0, $60 = 0, $cmp251 = 0, $61 = 0, $62 = 0, $cmp255 = 0, $arrayidx261 = 0, $parent262 = 0, $child249_sum = 0, $arrayidx267 = 0, $63 = 0, $64 = 0, $cmp268 = 0, $65 = 0, $66 = 0, $cmp272 = 0, $arrayidx278 = 0, $parent279 = 0, $cmp288 = 0, $67 = 0, $and294 = 0, $or295 = 0, $or296 = 0, $add_ptr298_sum6 = 0, $head299 = 0, $68 = 0, $69 = 0, $or300 = 0, $add_ptr303 = 0, $70 = 0, $71 = 0, $and305 = 0, $or306 = 0, $or307 = 0, $add_ptr303_sum = 0, $head310 = 0, $72 = 0, $or315 = 0, $add_ptr317_sum5 = 0, $head318 = 0, $73 = 0, $74 = 0, $or319 = 0, $newp_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $head = $p + 4 | 0;
    $0 = HEAP32[$head >> 2] | 0;
    $and = $0 & -8;
    $1 = $p;
    $add_ptr = $1 + $and | 0;
    $2 = $add_ptr;
    $3 = HEAP32[27921] | 0;
    $cmp = $1 >>> 0 < $3 >>> 0;
    if ($cmp) {
      label = 70;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $and2 = $0 & 3;
    $cmp3 = ($and2 | 0) != 1;
    $cmp5 = $1 >>> 0 < $add_ptr >>> 0;
    $or_cond = $cmp3 & $cmp5;
    if ($or_cond) {
      label = 4;
      break;
    } else {
      label = 70;
      break;
    }
   case 4:
    $add_ptr_sum1516 = $and | 4;
    $head6 = $1 + $add_ptr_sum1516 | 0;
    $4 = $head6;
    $5 = HEAP32[$4 >> 2] | 0;
    $and7 = $5 & 1;
    $tobool = ($and7 | 0) == 0;
    if ($tobool) {
      label = 70;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $cmp11 = ($and2 | 0) == 0;
    if ($cmp11) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $call = _mmap_resize($p, $nb) | 0;
    $newp_0 = $call;
    label = 71;
    break;
   case 7:
    $cmp13 = $and >>> 0 < $nb >>> 0;
    if ($cmp13) {
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $sub = $and - $nb | 0;
    $cmp15 = $sub >>> 0 > 15;
    if ($cmp15) {
      label = 9;
      break;
    } else {
      $newp_0 = $p;
      label = 71;
      break;
    }
   case 9:
    $add_ptr17 = $1 + $nb | 0;
    $6 = $add_ptr17;
    $and19 = $0 & 1;
    $or = $and19 | $nb;
    $or20 = $or | 2;
    HEAP32[$head >> 2] = $or20;
    $add_ptr17_sum = $nb + 4 | 0;
    $head23 = $1 + $add_ptr17_sum | 0;
    $7 = $head23;
    $or28 = $sub | 3;
    HEAP32[$7 >> 2] = $or28;
    $8 = HEAP32[$4 >> 2] | 0;
    $or32 = $8 | 1;
    HEAP32[$4 >> 2] = $or32;
    _dispose_chunk($6, $sub);
    $newp_0 = $p;
    label = 71;
    break;
   case 10:
    $9 = HEAP32[27923] | 0;
    $cmp34 = ($2 | 0) == ($9 | 0);
    if ($cmp34) {
      label = 11;
      break;
    } else {
      label = 13;
      break;
    }
   case 11:
    $10 = HEAP32[27920] | 0;
    $add = $10 + $and | 0;
    $cmp36 = $add >>> 0 > $nb >>> 0;
    if ($cmp36) {
      label = 12;
      break;
    } else {
      $newp_0 = 0;
      label = 71;
      break;
    }
   case 12:
    $sub40 = $add - $nb | 0;
    $add_ptr41 = $1 + $nb | 0;
    $11 = $add_ptr41;
    $and43 = $0 & 1;
    $or44 = $and43 | $nb;
    $or45 = $or44 | 2;
    HEAP32[$head >> 2] = $or45;
    $add_ptr41_sum = $nb + 4 | 0;
    $head48 = $1 + $add_ptr41_sum | 0;
    $12 = $head48;
    $or50 = $sub40 | 1;
    HEAP32[$12 >> 2] = $or50;
    HEAP32[27923] = $11;
    HEAP32[27920] = $sub40;
    $newp_0 = $p;
    label = 71;
    break;
   case 13:
    $13 = HEAP32[27922] | 0;
    $cmp56 = ($2 | 0) == ($13 | 0);
    if ($cmp56) {
      label = 14;
      break;
    } else {
      label = 19;
      break;
    }
   case 14:
    $14 = HEAP32[27919] | 0;
    $add58 = $14 + $and | 0;
    $cmp59 = $add58 >>> 0 < $nb >>> 0;
    if ($cmp59) {
      $newp_0 = 0;
      label = 71;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $sub62 = $add58 - $nb | 0;
    $cmp63 = $sub62 >>> 0 > 15;
    if ($cmp63) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    $add_ptr66 = $1 + $nb | 0;
    $15 = $add_ptr66;
    $add_ptr67 = $1 + $add58 | 0;
    $and69 = $0 & 1;
    $or70 = $and69 | $nb;
    $or71 = $or70 | 2;
    HEAP32[$head >> 2] = $or71;
    $add_ptr66_sum = $nb + 4 | 0;
    $head74 = $1 + $add_ptr66_sum | 0;
    $16 = $head74;
    $or76 = $sub62 | 1;
    HEAP32[$16 >> 2] = $or76;
    $prev_foot = $add_ptr67;
    HEAP32[$prev_foot >> 2] = $sub62;
    $add_ptr67_sum = $add58 + 4 | 0;
    $head79 = $1 + $add_ptr67_sum | 0;
    $17 = $head79;
    $18 = HEAP32[$17 >> 2] | 0;
    $and80 = $18 & -2;
    HEAP32[$17 >> 2] = $and80;
    $storemerge = $15;
    $storemerge12 = $sub62;
    label = 18;
    break;
   case 17:
    $and87 = $0 & 1;
    $or88 = $and87 | $add58;
    $or89 = $or88 | 2;
    HEAP32[$head >> 2] = $or89;
    $add_ptr91_sum = $add58 + 4 | 0;
    $head92 = $1 + $add_ptr91_sum | 0;
    $19 = $head92;
    $20 = HEAP32[$19 >> 2] | 0;
    $or93 = $20 | 1;
    HEAP32[$19 >> 2] = $or93;
    $storemerge = 0;
    $storemerge12 = 0;
    label = 18;
    break;
   case 18:
    HEAP32[27919] = $storemerge12;
    HEAP32[27922] = $storemerge;
    $newp_0 = $p;
    label = 71;
    break;
   case 19:
    $and100 = $5 & 2;
    $tobool101 = ($and100 | 0) == 0;
    if ($tobool101) {
      label = 20;
      break;
    } else {
      $newp_0 = 0;
      label = 71;
      break;
    }
   case 20:
    $and104 = $5 & -8;
    $add105 = $and104 + $and | 0;
    $cmp106 = $add105 >>> 0 < $nb >>> 0;
    if ($cmp106) {
      $newp_0 = 0;
      label = 71;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $sub110 = $add105 - $nb | 0;
    $shr = $5 >>> 3;
    $cmp111 = $5 >>> 0 < 256;
    if ($cmp111) {
      label = 22;
      break;
    } else {
      label = 33;
      break;
    }
   case 22:
    $add_ptr_sum10 = $and + 8 | 0;
    $fd = $1 + $add_ptr_sum10 | 0;
    $21 = $fd;
    $22 = HEAP32[$21 >> 2] | 0;
    $add_ptr_sum11 = $and + 12 | 0;
    $bk = $1 + $add_ptr_sum11 | 0;
    $23 = $bk;
    $24 = HEAP32[$23 >> 2] | 0;
    $shl = $shr << 1;
    $arrayidx = 111708 + ($shl << 2) | 0;
    $25 = $arrayidx;
    $cmp114 = ($22 | 0) == ($25 | 0);
    if ($cmp114) {
      label = 25;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $26 = $22;
    $cmp116 = $26 >>> 0 < $3 >>> 0;
    if ($cmp116) {
      label = 32;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $bk118 = $22 + 12 | 0;
    $27 = HEAP32[$bk118 >> 2] | 0;
    $cmp119 = ($27 | 0) == ($2 | 0);
    if ($cmp119) {
      label = 25;
      break;
    } else {
      label = 32;
      break;
    }
   case 25:
    $cmp125 = ($24 | 0) == ($22 | 0);
    if ($cmp125) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    $shl127 = 1 << $shr;
    $neg = $shl127 ^ -1;
    $28 = HEAP32[27917] | 0;
    $and128 = $28 & $neg;
    HEAP32[27917] = $and128;
    label = 67;
    break;
   case 27:
    $cmp133 = ($24 | 0) == ($25 | 0);
    if ($cmp133) {
      label = 30;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $29 = $24;
    $30 = HEAP32[27921] | 0;
    $cmp136 = $29 >>> 0 < $30 >>> 0;
    if ($cmp136) {
      label = 31;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $fd138 = $24 + 8 | 0;
    $31 = HEAP32[$fd138 >> 2] | 0;
    $cmp139 = ($31 | 0) == ($2 | 0);
    if ($cmp139) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    $bk147 = $22 + 12 | 0;
    HEAP32[$bk147 >> 2] = $24;
    $fd148 = $24 + 8 | 0;
    HEAP32[$fd148 >> 2] = $22;
    label = 67;
    break;
   case 31:
    _abort();
    return 0;
    return 0;
   case 32:
    _abort();
    return 0;
    return 0;
   case 33:
    $32 = $add_ptr;
    $add_ptr_sum = $and + 24 | 0;
    $parent = $1 + $add_ptr_sum | 0;
    $33 = $parent;
    $34 = HEAP32[$33 >> 2] | 0;
    $add_ptr_sum2 = $and + 12 | 0;
    $bk155 = $1 + $add_ptr_sum2 | 0;
    $35 = $bk155;
    $36 = HEAP32[$35 >> 2] | 0;
    $cmp156 = ($36 | 0) == ($32 | 0);
    if ($cmp156) {
      label = 39;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    $add_ptr_sum9 = $and + 8 | 0;
    $fd159 = $1 + $add_ptr_sum9 | 0;
    $37 = $fd159;
    $38 = HEAP32[$37 >> 2] | 0;
    $39 = $38;
    $cmp162 = $39 >>> 0 < $3 >>> 0;
    if ($cmp162) {
      label = 38;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $bk164 = $38 + 12 | 0;
    $40 = HEAP32[$bk164 >> 2] | 0;
    $cmp165 = ($40 | 0) == ($32 | 0);
    if ($cmp165) {
      label = 36;
      break;
    } else {
      label = 38;
      break;
    }
   case 36:
    $fd167 = $36 + 8 | 0;
    $41 = HEAP32[$fd167 >> 2] | 0;
    $cmp168 = ($41 | 0) == ($32 | 0);
    if ($cmp168) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    HEAP32[$bk164 >> 2] = $36;
    HEAP32[$fd167 >> 2] = $38;
    $R_1 = $36;
    label = 47;
    break;
   case 38:
    _abort();
    return 0;
    return 0;
   case 39:
    $child_sum = $and + 20 | 0;
    $arrayidx179 = $1 + $child_sum | 0;
    $42 = $arrayidx179;
    $43 = HEAP32[$42 >> 2] | 0;
    $cmp180 = ($43 | 0) == 0;
    if ($cmp180) {
      label = 40;
      break;
    } else {
      $R_0 = $43;
      $RP_0 = $42;
      label = 41;
      break;
    }
   case 40:
    $add_ptr_sum3 = $and + 16 | 0;
    $child = $1 + $add_ptr_sum3 | 0;
    $arrayidx182 = $child;
    $44 = HEAP32[$arrayidx182 >> 2] | 0;
    $cmp183 = ($44 | 0) == 0;
    if ($cmp183) {
      $R_1 = 0;
      label = 47;
      break;
    } else {
      $R_0 = $44;
      $RP_0 = $arrayidx182;
      label = 41;
      break;
    }
   case 41:
    $arrayidx186 = $R_0 + 20 | 0;
    $45 = HEAP32[$arrayidx186 >> 2] | 0;
    $cmp187 = ($45 | 0) == 0;
    if ($cmp187) {
      label = 42;
      break;
    } else {
      $CP_0 = $arrayidx186;
      label = 43;
      break;
    }
   case 42:
    $arrayidx190 = $R_0 + 16 | 0;
    $46 = HEAP32[$arrayidx190 >> 2] | 0;
    $cmp191 = ($46 | 0) == 0;
    if ($cmp191) {
      label = 44;
      break;
    } else {
      $CP_0 = $arrayidx190;
      label = 43;
      break;
    }
   case 43:
    $47 = HEAP32[$CP_0 >> 2] | 0;
    $R_0 = $47;
    $RP_0 = $CP_0;
    label = 41;
    break;
   case 44:
    $48 = $RP_0;
    $49 = HEAP32[27921] | 0;
    $cmp195 = $48 >>> 0 < $49 >>> 0;
    if ($cmp195) {
      label = 46;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    HEAP32[$RP_0 >> 2] = 0;
    $R_1 = $R_0;
    label = 47;
    break;
   case 46:
    _abort();
    return 0;
    return 0;
   case 47:
    $cmp203 = ($34 | 0) == 0;
    if ($cmp203) {
      label = 67;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    $add_ptr_sum7 = $and + 28 | 0;
    $index = $1 + $add_ptr_sum7 | 0;
    $50 = $index;
    $51 = HEAP32[$50 >> 2] | 0;
    $arrayidx206 = 111972 + ($51 << 2) | 0;
    $52 = HEAP32[$arrayidx206 >> 2] | 0;
    $cmp207 = ($32 | 0) == ($52 | 0);
    if ($cmp207) {
      label = 49;
      break;
    } else {
      label = 51;
      break;
    }
   case 49:
    HEAP32[$arrayidx206 >> 2] = $R_1;
    $cond = ($R_1 | 0) == 0;
    if ($cond) {
      label = 50;
      break;
    } else {
      label = 57;
      break;
    }
   case 50:
    $53 = HEAP32[$50 >> 2] | 0;
    $shl214 = 1 << $53;
    $neg215 = $shl214 ^ -1;
    $54 = HEAP32[27918] | 0;
    $and216 = $54 & $neg215;
    HEAP32[27918] = $and216;
    label = 67;
    break;
   case 51:
    $55 = $34;
    $56 = HEAP32[27921] | 0;
    $cmp220 = $55 >>> 0 < $56 >>> 0;
    if ($cmp220) {
      label = 55;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    $arrayidx226 = $34 + 16 | 0;
    $57 = HEAP32[$arrayidx226 >> 2] | 0;
    $cmp227 = ($57 | 0) == ($32 | 0);
    if ($cmp227) {
      label = 53;
      break;
    } else {
      label = 54;
      break;
    }
   case 53:
    HEAP32[$arrayidx226 >> 2] = $R_1;
    label = 56;
    break;
   case 54:
    $arrayidx234 = $34 + 20 | 0;
    HEAP32[$arrayidx234 >> 2] = $R_1;
    label = 56;
    break;
   case 55:
    _abort();
    return 0;
    return 0;
   case 56:
    $cmp239 = ($R_1 | 0) == 0;
    if ($cmp239) {
      label = 67;
      break;
    } else {
      label = 57;
      break;
    }
   case 57:
    $58 = $R_1;
    $59 = HEAP32[27921] | 0;
    $cmp243 = $58 >>> 0 < $59 >>> 0;
    if ($cmp243) {
      label = 66;
      break;
    } else {
      label = 58;
      break;
    }
   case 58:
    $parent248 = $R_1 + 24 | 0;
    HEAP32[$parent248 >> 2] = $34;
    $add_ptr_sum8 = $and + 16 | 0;
    $child249 = $1 + $add_ptr_sum8 | 0;
    $arrayidx250 = $child249;
    $60 = HEAP32[$arrayidx250 >> 2] | 0;
    $cmp251 = ($60 | 0) == 0;
    if ($cmp251) {
      label = 62;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    $61 = $60;
    $62 = HEAP32[27921] | 0;
    $cmp255 = $61 >>> 0 < $62 >>> 0;
    if ($cmp255) {
      label = 61;
      break;
    } else {
      label = 60;
      break;
    }
   case 60:
    $arrayidx261 = $R_1 + 16 | 0;
    HEAP32[$arrayidx261 >> 2] = $60;
    $parent262 = $60 + 24 | 0;
    HEAP32[$parent262 >> 2] = $R_1;
    label = 62;
    break;
   case 61:
    _abort();
    return 0;
    return 0;
   case 62:
    $child249_sum = $and + 20 | 0;
    $arrayidx267 = $1 + $child249_sum | 0;
    $63 = $arrayidx267;
    $64 = HEAP32[$63 >> 2] | 0;
    $cmp268 = ($64 | 0) == 0;
    if ($cmp268) {
      label = 67;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    $65 = $64;
    $66 = HEAP32[27921] | 0;
    $cmp272 = $65 >>> 0 < $66 >>> 0;
    if ($cmp272) {
      label = 65;
      break;
    } else {
      label = 64;
      break;
    }
   case 64:
    $arrayidx278 = $R_1 + 20 | 0;
    HEAP32[$arrayidx278 >> 2] = $64;
    $parent279 = $64 + 24 | 0;
    HEAP32[$parent279 >> 2] = $R_1;
    label = 67;
    break;
   case 65:
    _abort();
    return 0;
    return 0;
   case 66:
    _abort();
    return 0;
    return 0;
   case 67:
    $cmp288 = $sub110 >>> 0 < 16;
    if ($cmp288) {
      label = 68;
      break;
    } else {
      label = 69;
      break;
    }
   case 68:
    $67 = HEAP32[$head >> 2] | 0;
    $and294 = $67 & 1;
    $or295 = $add105 | $and294;
    $or296 = $or295 | 2;
    HEAP32[$head >> 2] = $or296;
    $add_ptr298_sum6 = $add105 | 4;
    $head299 = $1 + $add_ptr298_sum6 | 0;
    $68 = $head299;
    $69 = HEAP32[$68 >> 2] | 0;
    $or300 = $69 | 1;
    HEAP32[$68 >> 2] = $or300;
    $newp_0 = $p;
    label = 71;
    break;
   case 69:
    $add_ptr303 = $1 + $nb | 0;
    $70 = $add_ptr303;
    $71 = HEAP32[$head >> 2] | 0;
    $and305 = $71 & 1;
    $or306 = $and305 | $nb;
    $or307 = $or306 | 2;
    HEAP32[$head >> 2] = $or307;
    $add_ptr303_sum = $nb + 4 | 0;
    $head310 = $1 + $add_ptr303_sum | 0;
    $72 = $head310;
    $or315 = $sub110 | 3;
    HEAP32[$72 >> 2] = $or315;
    $add_ptr317_sum5 = $add105 | 4;
    $head318 = $1 + $add_ptr317_sum5 | 0;
    $73 = $head318;
    $74 = HEAP32[$73 >> 2] | 0;
    $or319 = $74 | 1;
    HEAP32[$73 >> 2] = $or319;
    _dispose_chunk($70, $sub110);
    $newp_0 = $p;
    label = 71;
    break;
   case 70:
    _abort();
    return 0;
    return 0;
   case 71:
    return $newp_0 | 0;
  }
  return 0;
}
function _init_mparams() {
  var $0 = 0, $cmp = 0, $call = 0, $sub = 0, $and = 0, $cmp1 = 0, $call6 = 0, $xor = 0, $and7 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = HEAP32[19732] | 0;
    $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $call = _sysconf(8) | 0;
    $sub = $call - 1 | 0;
    $and = $sub & $call;
    $cmp1 = ($and | 0) == 0;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _abort();
   case 5:
    HEAP32[19734] = $call;
    HEAP32[19733] = $call;
    HEAP32[19735] = -1;
    HEAP32[19736] = 2097152;
    HEAP32[19737] = 0;
    HEAP32[28028] = 0;
    $call6 = _time(0) | 0;
    $xor = $call6 & -16;
    $and7 = $xor ^ 1431655768;
    HEAP32[19732] = $and7;
    label = 6;
    break;
   case 6:
    return;
  }
}
function _mmap_resize($oldp, $nb) {
  $oldp = $oldp | 0;
  $nb = $nb | 0;
  var $head = 0, $0 = 0, $and = 0, $cmp = 0, $add = 0, $cmp1 = 0, $sub = 0, $1 = 0, $shl = 0, $cmp2 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $head = $oldp + 4 | 0;
    $0 = HEAP32[$head >> 2] | 0;
    $and = $0 & -8;
    $cmp = $nb >>> 0 < 256;
    if ($cmp) {
      $retval_0 = 0;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $add = $nb + 4 | 0;
    $cmp1 = $and >>> 0 < $add >>> 0;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $sub = $and - $nb | 0;
    $1 = HEAP32[19734] | 0;
    $shl = $1 << 1;
    $cmp2 = $sub >>> 0 > $shl >>> 0;
    if ($cmp2) {
      label = 5;
      break;
    } else {
      $retval_0 = $oldp;
      label = 6;
      break;
    }
   case 5:
    $retval_0 = 0;
    label = 6;
    break;
   case 6:
    return $retval_0 | 0;
  }
  return 0;
}
function _segment_holding($addr) {
  $addr = $addr | 0;
  var $sp_0 = 0, $base = 0, $0 = 0, $cmp = 0, $size = 0, $1 = 0, $add_ptr = 0, $cmp2 = 0, $next = 0, $2 = 0, $cmp3 = 0, $retval_0 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $sp_0 = 112116;
    label = 3;
    break;
   case 3:
    $base = $sp_0 | 0;
    $0 = HEAP32[$base >> 2] | 0;
    $cmp = $0 >>> 0 > $addr >>> 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $size = $sp_0 + 4 | 0;
    $1 = HEAP32[$size >> 2] | 0;
    $add_ptr = $0 + $1 | 0;
    $cmp2 = $add_ptr >>> 0 > $addr >>> 0;
    if ($cmp2) {
      $retval_0 = $sp_0;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $next = $sp_0 + 8 | 0;
    $2 = HEAP32[$next >> 2] | 0;
    $cmp3 = ($2 | 0) == 0;
    if ($cmp3) {
      $retval_0 = 0;
      label = 6;
      break;
    } else {
      $sp_0 = $2;
      label = 3;
      break;
    }
   case 6:
    return $retval_0 | 0;
  }
  return 0;
}
function _dispose_chunk($p, $psize) {
  $p = $p | 0;
  $psize = $psize | 0;
  var $0 = 0, $add_ptr = 0, $1 = 0, $head = 0, $2 = 0, $and = 0, $tobool = 0, $prev_foot = 0, $3 = 0, $and2 = 0, $cmp = 0, $idx_neg = 0, $add_ptr5 = 0, $4 = 0, $add6 = 0, $5 = 0, $cmp7 = 0, $6 = 0, $cmp10 = 0, $shr = 0, $cmp13 = 0, $add_ptr5_sum24 = 0, $fd = 0, $7 = 0, $8 = 0, $add_ptr5_sum25 = 0, $bk = 0, $9 = 0, $10 = 0, $shl = 0, $arrayidx = 0, $11 = 0, $cmp17 = 0, $12 = 0, $cmp20 = 0, $bk22 = 0, $13 = 0, $cmp23 = 0, $cmp28 = 0, $shl31 = 0, $neg = 0, $14 = 0, $and32 = 0, $cmp36 = 0, $15 = 0, $16 = 0, $cmp40 = 0, $fd43 = 0, $17 = 0, $cmp44 = 0, $bk52 = 0, $fd53 = 0, $18 = 0, $add_ptr5_sum18 = 0, $parent = 0, $19 = 0, $20 = 0, $add_ptr5_sum19 = 0, $bk60 = 0, $21 = 0, $22 = 0, $cmp61 = 0, $add_ptr5_sum23 = 0, $fd65 = 0, $23 = 0, $24 = 0, $25 = 0, $cmp68 = 0, $bk70 = 0, $26 = 0, $cmp71 = 0, $fd74 = 0, $27 = 0, $cmp75 = 0, $add_ptr5_sum20 = 0, $child_sum = 0, $arrayidx86 = 0, $28 = 0, $29 = 0, $cmp87 = 0, $child = 0, $arrayidx90 = 0, $30 = 0, $cmp91 = 0, $RP_0 = 0, $R_0 = 0, $arrayidx95 = 0, $31 = 0, $cmp96 = 0, $arrayidx100 = 0, $32 = 0, $cmp101 = 0, $CP_0 = 0, $33 = 0, $34 = 0, $35 = 0, $cmp106 = 0, $R_1 = 0, $cmp115 = 0, $add_ptr5_sum21 = 0, $index = 0, $36 = 0, $37 = 0, $arrayidx118 = 0, $38 = 0, $cmp119 = 0, $cond29 = 0, $39 = 0, $shl126 = 0, $neg127 = 0, $40 = 0, $and128 = 0, $41 = 0, $42 = 0, $cmp132 = 0, $arrayidx138 = 0, $43 = 0, $cmp139 = 0, $arrayidx146 = 0, $cmp151 = 0, $44 = 0, $45 = 0, $cmp155 = 0, $parent160 = 0, $add_ptr5_sum22 = 0, $child161 = 0, $arrayidx162 = 0, $46 = 0, $cmp163 = 0, $47 = 0, $48 = 0, $cmp167 = 0, $arrayidx173 = 0, $parent174 = 0, $child161_sum = 0, $arrayidx179 = 0, $49 = 0, $50 = 0, $cmp180 = 0, $51 = 0, $52 = 0, $cmp184 = 0, $arrayidx190 = 0, $parent191 = 0, $add_ptr_sum = 0, $head201 = 0, $53 = 0, $54 = 0, $and202 = 0, $cmp203 = 0, $55 = 0, $and207 = 0, $or = 0, $add_ptr5_sum = 0, $head208 = 0, $56 = 0, $prev_foot210 = 0, $psize_addr_0 = 0, $p_addr_0 = 0, $57 = 0, $cmp217 = 0, $add_ptr_sum1 = 0, $head222 = 0, $58 = 0, $59 = 0, $and223 = 0, $tobool224 = 0, $60 = 0, $cmp226 = 0, $61 = 0, $add229 = 0, $or231 = 0, $head232 = 0, $62 = 0, $cmp234 = 0, $63 = 0, $cmp242 = 0, $64 = 0, $add246 = 0, $or248 = 0, $head249 = 0, $65 = 0, $add_ptr250 = 0, $prev_foot251 = 0, $and254 = 0, $add255 = 0, $shr256 = 0, $cmp257 = 0, $add_ptr_sum15 = 0, $fd261 = 0, $66 = 0, $67 = 0, $add_ptr_sum16 = 0, $bk263 = 0, $68 = 0, $69 = 0, $shl266 = 0, $arrayidx268 = 0, $70 = 0, $cmp269 = 0, $71 = 0, $cmp273 = 0, $bk276 = 0, $72 = 0, $cmp277 = 0, $cmp286 = 0, $shl289 = 0, $neg290 = 0, $73 = 0, $and292 = 0, $cmp297 = 0, $74 = 0, $75 = 0, $cmp301 = 0, $fd304 = 0, $76 = 0, $cmp305 = 0, $bk314 = 0, $fd315 = 0, $77 = 0, $add_ptr_sum2 = 0, $parent324 = 0, $78 = 0, $79 = 0, $add_ptr_sum3 = 0, $bk326 = 0, $80 = 0, $81 = 0, $cmp327 = 0, $add_ptr_sum14 = 0, $fd331 = 0, $82 = 0, $83 = 0, $84 = 0, $cmp334 = 0, $bk337 = 0, $85 = 0, $cmp338 = 0, $fd341 = 0, $86 = 0, $cmp342 = 0, $child355_sum = 0, $arrayidx356 = 0, $87 = 0, $88 = 0, $cmp357 = 0, $add_ptr_sum4 = 0, $child355 = 0, $arrayidx361 = 0, $89 = 0, $cmp362 = 0, $RP354_0 = 0, $R325_0 = 0, $arrayidx368 = 0, $90 = 0, $cmp369 = 0, $arrayidx373 = 0, $91 = 0, $cmp374 = 0, $CP365_0 = 0, $92 = 0, $93 = 0, $94 = 0, $cmp381 = 0, $R325_1 = 0, $cmp390 = 0, $add_ptr_sum12 = 0, $index394 = 0, $95 = 0, $96 = 0, $arrayidx396 = 0, $97 = 0, $cmp397 = 0, $cond30 = 0, $98 = 0, $shl404 = 0, $neg405 = 0, $99 = 0, $and407 = 0, $100 = 0, $101 = 0, $cmp411 = 0, $arrayidx417 = 0, $102 = 0, $cmp418 = 0, $arrayidx425 = 0, $cmp430 = 0, $103 = 0, $104 = 0, $cmp434 = 0, $parent441 = 0, $add_ptr_sum13 = 0, $child442 = 0, $arrayidx443 = 0, $105 = 0, $cmp444 = 0, $106 = 0, $107 = 0, $cmp448 = 0, $arrayidx454 = 0, $parent455 = 0, $child442_sum = 0, $arrayidx460 = 0, $108 = 0, $109 = 0, $cmp461 = 0, $110 = 0, $111 = 0, $cmp465 = 0, $arrayidx471 = 0, $parent472 = 0, $or481 = 0, $head482 = 0, $112 = 0, $add_ptr483 = 0, $prev_foot484 = 0, $113 = 0, $cmp486 = 0, $and495 = 0, $or496 = 0, $head497 = 0, $114 = 0, $add_ptr498 = 0, $prev_foot499 = 0, $psize_addr_1 = 0, $shr501 = 0, $cmp502 = 0, $shl508 = 0, $arrayidx510 = 0, $115 = 0, $116 = 0, $shl513 = 0, $and514 = 0, $tobool515 = 0, $or519 = 0, $arrayidx510_sum11 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $cmp523 = 0, $F511_0 = 0, $arrayidx510_sum = 0, $121 = 0, $bk533 = 0, $fd534 = 0, $bk535 = 0, $122 = 0, $shr540 = 0, $cmp541 = 0, $cmp545 = 0, $sub = 0, $shr549 = 0, $and550 = 0, $shl551 = 0, $sub552 = 0, $shr553 = 0, $and554 = 0, $add555 = 0, $shl556 = 0, $sub557 = 0, $shr558 = 0, $and559 = 0, $add560 = 0, $sub561 = 0, $shl562 = 0, $shr563 = 0, $add564 = 0, $shl565 = 0, $add566 = 0, $shr567 = 0, $and568 = 0, $add569 = 0, $I539_0 = 0, $arrayidx573 = 0, $index574 = 0, $I539_0_c = 0, $arrayidx576 = 0, $123 = 0, $124 = 0, $shl580 = 0, $and581 = 0, $tobool582 = 0, $or586 = 0, $parent587 = 0, $_c = 0, $bk588 = 0, $fd589 = 0, $125 = 0, $cmp592 = 0, $shr594 = 0, $sub597 = 0, $cond = 0, $shl598 = 0, $T_0 = 0, $K591_0 = 0, $head599 = 0, $126 = 0, $and600 = 0, $cmp601 = 0, $shr604 = 0, $arrayidx607 = 0, $127 = 0, $cmp609 = 0, $shl608 = 0, $128 = 0, $129 = 0, $cmp614 = 0, $parent619 = 0, $T_0_c8 = 0, $bk620 = 0, $fd621 = 0, $fd626 = 0, $130 = 0, $131 = 0, $132 = 0, $cmp628 = 0, $133 = 0, $cmp632 = 0, $bk639 = 0, $fd641 = 0, $_c7 = 0, $bk642 = 0, $T_0_c = 0, $parent643 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $p;
    $add_ptr = $0 + $psize | 0;
    $1 = $add_ptr;
    $head = $p + 4 | 0;
    $2 = HEAP32[$head >> 2] | 0;
    $and = $2 & 1;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      $p_addr_0 = $p;
      $psize_addr_0 = $psize;
      label = 55;
      break;
    }
   case 3:
    $prev_foot = $p | 0;
    $3 = HEAP32[$prev_foot >> 2] | 0;
    $and2 = $2 & 3;
    $cmp = ($and2 | 0) == 0;
    if ($cmp) {
      label = 135;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $idx_neg = -$3 | 0;
    $add_ptr5 = $0 + $idx_neg | 0;
    $4 = $add_ptr5;
    $add6 = $3 + $psize | 0;
    $5 = HEAP32[27921] | 0;
    $cmp7 = $add_ptr5 >>> 0 < $5 >>> 0;
    if ($cmp7) {
      label = 54;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $6 = HEAP32[27922] | 0;
    $cmp10 = ($4 | 0) == ($6 | 0);
    if ($cmp10) {
      label = 52;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $shr = $3 >>> 3;
    $cmp13 = $3 >>> 0 < 256;
    if ($cmp13) {
      label = 7;
      break;
    } else {
      label = 18;
      break;
    }
   case 7:
    $add_ptr5_sum24 = 8 - $3 | 0;
    $fd = $0 + $add_ptr5_sum24 | 0;
    $7 = $fd;
    $8 = HEAP32[$7 >> 2] | 0;
    $add_ptr5_sum25 = 12 - $3 | 0;
    $bk = $0 + $add_ptr5_sum25 | 0;
    $9 = $bk;
    $10 = HEAP32[$9 >> 2] | 0;
    $shl = $shr << 1;
    $arrayidx = 111708 + ($shl << 2) | 0;
    $11 = $arrayidx;
    $cmp17 = ($8 | 0) == ($11 | 0);
    if ($cmp17) {
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $12 = $8;
    $cmp20 = $12 >>> 0 < $5 >>> 0;
    if ($cmp20) {
      label = 17;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $bk22 = $8 + 12 | 0;
    $13 = HEAP32[$bk22 >> 2] | 0;
    $cmp23 = ($13 | 0) == ($4 | 0);
    if ($cmp23) {
      label = 10;
      break;
    } else {
      label = 17;
      break;
    }
   case 10:
    $cmp28 = ($10 | 0) == ($8 | 0);
    if ($cmp28) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $shl31 = 1 << $shr;
    $neg = $shl31 ^ -1;
    $14 = HEAP32[27917] | 0;
    $and32 = $14 & $neg;
    HEAP32[27917] = $and32;
    $p_addr_0 = $4;
    $psize_addr_0 = $add6;
    label = 55;
    break;
   case 12:
    $cmp36 = ($10 | 0) == ($11 | 0);
    if ($cmp36) {
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $15 = $10;
    $16 = HEAP32[27921] | 0;
    $cmp40 = $15 >>> 0 < $16 >>> 0;
    if ($cmp40) {
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $fd43 = $10 + 8 | 0;
    $17 = HEAP32[$fd43 >> 2] | 0;
    $cmp44 = ($17 | 0) == ($4 | 0);
    if ($cmp44) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    $bk52 = $8 + 12 | 0;
    HEAP32[$bk52 >> 2] = $10;
    $fd53 = $10 + 8 | 0;
    HEAP32[$fd53 >> 2] = $8;
    $p_addr_0 = $4;
    $psize_addr_0 = $add6;
    label = 55;
    break;
   case 16:
    _abort();
   case 17:
    _abort();
   case 18:
    $18 = $add_ptr5;
    $add_ptr5_sum18 = 24 - $3 | 0;
    $parent = $0 + $add_ptr5_sum18 | 0;
    $19 = $parent;
    $20 = HEAP32[$19 >> 2] | 0;
    $add_ptr5_sum19 = 12 - $3 | 0;
    $bk60 = $0 + $add_ptr5_sum19 | 0;
    $21 = $bk60;
    $22 = HEAP32[$21 >> 2] | 0;
    $cmp61 = ($22 | 0) == ($18 | 0);
    if ($cmp61) {
      label = 24;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $add_ptr5_sum23 = 8 - $3 | 0;
    $fd65 = $0 + $add_ptr5_sum23 | 0;
    $23 = $fd65;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $24;
    $cmp68 = $25 >>> 0 < $5 >>> 0;
    if ($cmp68) {
      label = 23;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $bk70 = $24 + 12 | 0;
    $26 = HEAP32[$bk70 >> 2] | 0;
    $cmp71 = ($26 | 0) == ($18 | 0);
    if ($cmp71) {
      label = 21;
      break;
    } else {
      label = 23;
      break;
    }
   case 21:
    $fd74 = $22 + 8 | 0;
    $27 = HEAP32[$fd74 >> 2] | 0;
    $cmp75 = ($27 | 0) == ($18 | 0);
    if ($cmp75) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    HEAP32[$bk70 >> 2] = $22;
    HEAP32[$fd74 >> 2] = $24;
    $R_1 = $22;
    label = 32;
    break;
   case 23:
    _abort();
   case 24:
    $add_ptr5_sum20 = 16 - $3 | 0;
    $child_sum = $add_ptr5_sum20 + 4 | 0;
    $arrayidx86 = $0 + $child_sum | 0;
    $28 = $arrayidx86;
    $29 = HEAP32[$28 >> 2] | 0;
    $cmp87 = ($29 | 0) == 0;
    if ($cmp87) {
      label = 25;
      break;
    } else {
      $R_0 = $29;
      $RP_0 = $28;
      label = 26;
      break;
    }
   case 25:
    $child = $0 + $add_ptr5_sum20 | 0;
    $arrayidx90 = $child;
    $30 = HEAP32[$arrayidx90 >> 2] | 0;
    $cmp91 = ($30 | 0) == 0;
    if ($cmp91) {
      $R_1 = 0;
      label = 32;
      break;
    } else {
      $R_0 = $30;
      $RP_0 = $arrayidx90;
      label = 26;
      break;
    }
   case 26:
    $arrayidx95 = $R_0 + 20 | 0;
    $31 = HEAP32[$arrayidx95 >> 2] | 0;
    $cmp96 = ($31 | 0) == 0;
    if ($cmp96) {
      label = 27;
      break;
    } else {
      $CP_0 = $arrayidx95;
      label = 28;
      break;
    }
   case 27:
    $arrayidx100 = $R_0 + 16 | 0;
    $32 = HEAP32[$arrayidx100 >> 2] | 0;
    $cmp101 = ($32 | 0) == 0;
    if ($cmp101) {
      label = 29;
      break;
    } else {
      $CP_0 = $arrayidx100;
      label = 28;
      break;
    }
   case 28:
    $33 = HEAP32[$CP_0 >> 2] | 0;
    $R_0 = $33;
    $RP_0 = $CP_0;
    label = 26;
    break;
   case 29:
    $34 = $RP_0;
    $35 = HEAP32[27921] | 0;
    $cmp106 = $34 >>> 0 < $35 >>> 0;
    if ($cmp106) {
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    HEAP32[$RP_0 >> 2] = 0;
    $R_1 = $R_0;
    label = 32;
    break;
   case 31:
    _abort();
   case 32:
    $cmp115 = ($20 | 0) == 0;
    if ($cmp115) {
      $p_addr_0 = $4;
      $psize_addr_0 = $add6;
      label = 55;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    $add_ptr5_sum21 = 28 - $3 | 0;
    $index = $0 + $add_ptr5_sum21 | 0;
    $36 = $index;
    $37 = HEAP32[$36 >> 2] | 0;
    $arrayidx118 = 111972 + ($37 << 2) | 0;
    $38 = HEAP32[$arrayidx118 >> 2] | 0;
    $cmp119 = ($18 | 0) == ($38 | 0);
    if ($cmp119) {
      label = 34;
      break;
    } else {
      label = 36;
      break;
    }
   case 34:
    HEAP32[$arrayidx118 >> 2] = $R_1;
    $cond29 = ($R_1 | 0) == 0;
    if ($cond29) {
      label = 35;
      break;
    } else {
      label = 42;
      break;
    }
   case 35:
    $39 = HEAP32[$36 >> 2] | 0;
    $shl126 = 1 << $39;
    $neg127 = $shl126 ^ -1;
    $40 = HEAP32[27918] | 0;
    $and128 = $40 & $neg127;
    HEAP32[27918] = $and128;
    $p_addr_0 = $4;
    $psize_addr_0 = $add6;
    label = 55;
    break;
   case 36:
    $41 = $20;
    $42 = HEAP32[27921] | 0;
    $cmp132 = $41 >>> 0 < $42 >>> 0;
    if ($cmp132) {
      label = 40;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    $arrayidx138 = $20 + 16 | 0;
    $43 = HEAP32[$arrayidx138 >> 2] | 0;
    $cmp139 = ($43 | 0) == ($18 | 0);
    if ($cmp139) {
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    HEAP32[$arrayidx138 >> 2] = $R_1;
    label = 41;
    break;
   case 39:
    $arrayidx146 = $20 + 20 | 0;
    HEAP32[$arrayidx146 >> 2] = $R_1;
    label = 41;
    break;
   case 40:
    _abort();
   case 41:
    $cmp151 = ($R_1 | 0) == 0;
    if ($cmp151) {
      $p_addr_0 = $4;
      $psize_addr_0 = $add6;
      label = 55;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    $44 = $R_1;
    $45 = HEAP32[27921] | 0;
    $cmp155 = $44 >>> 0 < $45 >>> 0;
    if ($cmp155) {
      label = 51;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    $parent160 = $R_1 + 24 | 0;
    HEAP32[$parent160 >> 2] = $20;
    $add_ptr5_sum22 = 16 - $3 | 0;
    $child161 = $0 + $add_ptr5_sum22 | 0;
    $arrayidx162 = $child161;
    $46 = HEAP32[$arrayidx162 >> 2] | 0;
    $cmp163 = ($46 | 0) == 0;
    if ($cmp163) {
      label = 47;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    $47 = $46;
    $48 = HEAP32[27921] | 0;
    $cmp167 = $47 >>> 0 < $48 >>> 0;
    if ($cmp167) {
      label = 46;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    $arrayidx173 = $R_1 + 16 | 0;
    HEAP32[$arrayidx173 >> 2] = $46;
    $parent174 = $46 + 24 | 0;
    HEAP32[$parent174 >> 2] = $R_1;
    label = 47;
    break;
   case 46:
    _abort();
   case 47:
    $child161_sum = $add_ptr5_sum22 + 4 | 0;
    $arrayidx179 = $0 + $child161_sum | 0;
    $49 = $arrayidx179;
    $50 = HEAP32[$49 >> 2] | 0;
    $cmp180 = ($50 | 0) == 0;
    if ($cmp180) {
      $p_addr_0 = $4;
      $psize_addr_0 = $add6;
      label = 55;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    $51 = $50;
    $52 = HEAP32[27921] | 0;
    $cmp184 = $51 >>> 0 < $52 >>> 0;
    if ($cmp184) {
      label = 50;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    $arrayidx190 = $R_1 + 20 | 0;
    HEAP32[$arrayidx190 >> 2] = $50;
    $parent191 = $50 + 24 | 0;
    HEAP32[$parent191 >> 2] = $R_1;
    $p_addr_0 = $4;
    $psize_addr_0 = $add6;
    label = 55;
    break;
   case 50:
    _abort();
   case 51:
    _abort();
   case 52:
    $add_ptr_sum = $psize + 4 | 0;
    $head201 = $0 + $add_ptr_sum | 0;
    $53 = $head201;
    $54 = HEAP32[$53 >> 2] | 0;
    $and202 = $54 & 3;
    $cmp203 = ($and202 | 0) == 3;
    if ($cmp203) {
      label = 53;
      break;
    } else {
      $p_addr_0 = $4;
      $psize_addr_0 = $add6;
      label = 55;
      break;
    }
   case 53:
    HEAP32[27919] = $add6;
    $55 = HEAP32[$53 >> 2] | 0;
    $and207 = $55 & -2;
    HEAP32[$53 >> 2] = $and207;
    $or = $add6 | 1;
    $add_ptr5_sum = 4 - $3 | 0;
    $head208 = $0 + $add_ptr5_sum | 0;
    $56 = $head208;
    HEAP32[$56 >> 2] = $or;
    $prev_foot210 = $add_ptr;
    HEAP32[$prev_foot210 >> 2] = $add6;
    label = 135;
    break;
   case 54:
    _abort();
   case 55:
    $57 = HEAP32[27921] | 0;
    $cmp217 = $add_ptr >>> 0 < $57 >>> 0;
    if ($cmp217) {
      label = 134;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    $add_ptr_sum1 = $psize + 4 | 0;
    $head222 = $0 + $add_ptr_sum1 | 0;
    $58 = $head222;
    $59 = HEAP32[$58 >> 2] | 0;
    $and223 = $59 & 2;
    $tobool224 = ($and223 | 0) == 0;
    if ($tobool224) {
      label = 57;
      break;
    } else {
      label = 110;
      break;
    }
   case 57:
    $60 = HEAP32[27923] | 0;
    $cmp226 = ($1 | 0) == ($60 | 0);
    if ($cmp226) {
      label = 58;
      break;
    } else {
      label = 60;
      break;
    }
   case 58:
    $61 = HEAP32[27920] | 0;
    $add229 = $61 + $psize_addr_0 | 0;
    HEAP32[27920] = $add229;
    HEAP32[27923] = $p_addr_0;
    $or231 = $add229 | 1;
    $head232 = $p_addr_0 + 4 | 0;
    HEAP32[$head232 >> 2] = $or231;
    $62 = HEAP32[27922] | 0;
    $cmp234 = ($p_addr_0 | 0) == ($62 | 0);
    if ($cmp234) {
      label = 59;
      break;
    } else {
      label = 135;
      break;
    }
   case 59:
    HEAP32[27922] = 0;
    HEAP32[27919] = 0;
    label = 135;
    break;
   case 60:
    $63 = HEAP32[27922] | 0;
    $cmp242 = ($1 | 0) == ($63 | 0);
    if ($cmp242) {
      label = 61;
      break;
    } else {
      label = 62;
      break;
    }
   case 61:
    $64 = HEAP32[27919] | 0;
    $add246 = $64 + $psize_addr_0 | 0;
    HEAP32[27919] = $add246;
    HEAP32[27922] = $p_addr_0;
    $or248 = $add246 | 1;
    $head249 = $p_addr_0 + 4 | 0;
    HEAP32[$head249 >> 2] = $or248;
    $65 = $p_addr_0;
    $add_ptr250 = $65 + $add246 | 0;
    $prev_foot251 = $add_ptr250;
    HEAP32[$prev_foot251 >> 2] = $add246;
    label = 135;
    break;
   case 62:
    $and254 = $59 & -8;
    $add255 = $and254 + $psize_addr_0 | 0;
    $shr256 = $59 >>> 3;
    $cmp257 = $59 >>> 0 < 256;
    if ($cmp257) {
      label = 63;
      break;
    } else {
      label = 74;
      break;
    }
   case 63:
    $add_ptr_sum15 = $psize + 8 | 0;
    $fd261 = $0 + $add_ptr_sum15 | 0;
    $66 = $fd261;
    $67 = HEAP32[$66 >> 2] | 0;
    $add_ptr_sum16 = $psize + 12 | 0;
    $bk263 = $0 + $add_ptr_sum16 | 0;
    $68 = $bk263;
    $69 = HEAP32[$68 >> 2] | 0;
    $shl266 = $shr256 << 1;
    $arrayidx268 = 111708 + ($shl266 << 2) | 0;
    $70 = $arrayidx268;
    $cmp269 = ($67 | 0) == ($70 | 0);
    if ($cmp269) {
      label = 66;
      break;
    } else {
      label = 64;
      break;
    }
   case 64:
    $71 = $67;
    $cmp273 = $71 >>> 0 < $57 >>> 0;
    if ($cmp273) {
      label = 73;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    $bk276 = $67 + 12 | 0;
    $72 = HEAP32[$bk276 >> 2] | 0;
    $cmp277 = ($72 | 0) == ($1 | 0);
    if ($cmp277) {
      label = 66;
      break;
    } else {
      label = 73;
      break;
    }
   case 66:
    $cmp286 = ($69 | 0) == ($67 | 0);
    if ($cmp286) {
      label = 67;
      break;
    } else {
      label = 68;
      break;
    }
   case 67:
    $shl289 = 1 << $shr256;
    $neg290 = $shl289 ^ -1;
    $73 = HEAP32[27917] | 0;
    $and292 = $73 & $neg290;
    HEAP32[27917] = $and292;
    label = 108;
    break;
   case 68:
    $cmp297 = ($69 | 0) == ($70 | 0);
    if ($cmp297) {
      label = 71;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    $74 = $69;
    $75 = HEAP32[27921] | 0;
    $cmp301 = $74 >>> 0 < $75 >>> 0;
    if ($cmp301) {
      label = 72;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    $fd304 = $69 + 8 | 0;
    $76 = HEAP32[$fd304 >> 2] | 0;
    $cmp305 = ($76 | 0) == ($1 | 0);
    if ($cmp305) {
      label = 71;
      break;
    } else {
      label = 72;
      break;
    }
   case 71:
    $bk314 = $67 + 12 | 0;
    HEAP32[$bk314 >> 2] = $69;
    $fd315 = $69 + 8 | 0;
    HEAP32[$fd315 >> 2] = $67;
    label = 108;
    break;
   case 72:
    _abort();
   case 73:
    _abort();
   case 74:
    $77 = $add_ptr;
    $add_ptr_sum2 = $psize + 24 | 0;
    $parent324 = $0 + $add_ptr_sum2 | 0;
    $78 = $parent324;
    $79 = HEAP32[$78 >> 2] | 0;
    $add_ptr_sum3 = $psize + 12 | 0;
    $bk326 = $0 + $add_ptr_sum3 | 0;
    $80 = $bk326;
    $81 = HEAP32[$80 >> 2] | 0;
    $cmp327 = ($81 | 0) == ($77 | 0);
    if ($cmp327) {
      label = 80;
      break;
    } else {
      label = 75;
      break;
    }
   case 75:
    $add_ptr_sum14 = $psize + 8 | 0;
    $fd331 = $0 + $add_ptr_sum14 | 0;
    $82 = $fd331;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = $83;
    $cmp334 = $84 >>> 0 < $57 >>> 0;
    if ($cmp334) {
      label = 79;
      break;
    } else {
      label = 76;
      break;
    }
   case 76:
    $bk337 = $83 + 12 | 0;
    $85 = HEAP32[$bk337 >> 2] | 0;
    $cmp338 = ($85 | 0) == ($77 | 0);
    if ($cmp338) {
      label = 77;
      break;
    } else {
      label = 79;
      break;
    }
   case 77:
    $fd341 = $81 + 8 | 0;
    $86 = HEAP32[$fd341 >> 2] | 0;
    $cmp342 = ($86 | 0) == ($77 | 0);
    if ($cmp342) {
      label = 78;
      break;
    } else {
      label = 79;
      break;
    }
   case 78:
    HEAP32[$bk337 >> 2] = $81;
    HEAP32[$fd341 >> 2] = $83;
    $R325_1 = $81;
    label = 88;
    break;
   case 79:
    _abort();
   case 80:
    $child355_sum = $psize + 20 | 0;
    $arrayidx356 = $0 + $child355_sum | 0;
    $87 = $arrayidx356;
    $88 = HEAP32[$87 >> 2] | 0;
    $cmp357 = ($88 | 0) == 0;
    if ($cmp357) {
      label = 81;
      break;
    } else {
      $R325_0 = $88;
      $RP354_0 = $87;
      label = 82;
      break;
    }
   case 81:
    $add_ptr_sum4 = $psize + 16 | 0;
    $child355 = $0 + $add_ptr_sum4 | 0;
    $arrayidx361 = $child355;
    $89 = HEAP32[$arrayidx361 >> 2] | 0;
    $cmp362 = ($89 | 0) == 0;
    if ($cmp362) {
      $R325_1 = 0;
      label = 88;
      break;
    } else {
      $R325_0 = $89;
      $RP354_0 = $arrayidx361;
      label = 82;
      break;
    }
   case 82:
    $arrayidx368 = $R325_0 + 20 | 0;
    $90 = HEAP32[$arrayidx368 >> 2] | 0;
    $cmp369 = ($90 | 0) == 0;
    if ($cmp369) {
      label = 83;
      break;
    } else {
      $CP365_0 = $arrayidx368;
      label = 84;
      break;
    }
   case 83:
    $arrayidx373 = $R325_0 + 16 | 0;
    $91 = HEAP32[$arrayidx373 >> 2] | 0;
    $cmp374 = ($91 | 0) == 0;
    if ($cmp374) {
      label = 85;
      break;
    } else {
      $CP365_0 = $arrayidx373;
      label = 84;
      break;
    }
   case 84:
    $92 = HEAP32[$CP365_0 >> 2] | 0;
    $R325_0 = $92;
    $RP354_0 = $CP365_0;
    label = 82;
    break;
   case 85:
    $93 = $RP354_0;
    $94 = HEAP32[27921] | 0;
    $cmp381 = $93 >>> 0 < $94 >>> 0;
    if ($cmp381) {
      label = 87;
      break;
    } else {
      label = 86;
      break;
    }
   case 86:
    HEAP32[$RP354_0 >> 2] = 0;
    $R325_1 = $R325_0;
    label = 88;
    break;
   case 87:
    _abort();
   case 88:
    $cmp390 = ($79 | 0) == 0;
    if ($cmp390) {
      label = 108;
      break;
    } else {
      label = 89;
      break;
    }
   case 89:
    $add_ptr_sum12 = $psize + 28 | 0;
    $index394 = $0 + $add_ptr_sum12 | 0;
    $95 = $index394;
    $96 = HEAP32[$95 >> 2] | 0;
    $arrayidx396 = 111972 + ($96 << 2) | 0;
    $97 = HEAP32[$arrayidx396 >> 2] | 0;
    $cmp397 = ($77 | 0) == ($97 | 0);
    if ($cmp397) {
      label = 90;
      break;
    } else {
      label = 92;
      break;
    }
   case 90:
    HEAP32[$arrayidx396 >> 2] = $R325_1;
    $cond30 = ($R325_1 | 0) == 0;
    if ($cond30) {
      label = 91;
      break;
    } else {
      label = 98;
      break;
    }
   case 91:
    $98 = HEAP32[$95 >> 2] | 0;
    $shl404 = 1 << $98;
    $neg405 = $shl404 ^ -1;
    $99 = HEAP32[27918] | 0;
    $and407 = $99 & $neg405;
    HEAP32[27918] = $and407;
    label = 108;
    break;
   case 92:
    $100 = $79;
    $101 = HEAP32[27921] | 0;
    $cmp411 = $100 >>> 0 < $101 >>> 0;
    if ($cmp411) {
      label = 96;
      break;
    } else {
      label = 93;
      break;
    }
   case 93:
    $arrayidx417 = $79 + 16 | 0;
    $102 = HEAP32[$arrayidx417 >> 2] | 0;
    $cmp418 = ($102 | 0) == ($77 | 0);
    if ($cmp418) {
      label = 94;
      break;
    } else {
      label = 95;
      break;
    }
   case 94:
    HEAP32[$arrayidx417 >> 2] = $R325_1;
    label = 97;
    break;
   case 95:
    $arrayidx425 = $79 + 20 | 0;
    HEAP32[$arrayidx425 >> 2] = $R325_1;
    label = 97;
    break;
   case 96:
    _abort();
   case 97:
    $cmp430 = ($R325_1 | 0) == 0;
    if ($cmp430) {
      label = 108;
      break;
    } else {
      label = 98;
      break;
    }
   case 98:
    $103 = $R325_1;
    $104 = HEAP32[27921] | 0;
    $cmp434 = $103 >>> 0 < $104 >>> 0;
    if ($cmp434) {
      label = 107;
      break;
    } else {
      label = 99;
      break;
    }
   case 99:
    $parent441 = $R325_1 + 24 | 0;
    HEAP32[$parent441 >> 2] = $79;
    $add_ptr_sum13 = $psize + 16 | 0;
    $child442 = $0 + $add_ptr_sum13 | 0;
    $arrayidx443 = $child442;
    $105 = HEAP32[$arrayidx443 >> 2] | 0;
    $cmp444 = ($105 | 0) == 0;
    if ($cmp444) {
      label = 103;
      break;
    } else {
      label = 100;
      break;
    }
   case 100:
    $106 = $105;
    $107 = HEAP32[27921] | 0;
    $cmp448 = $106 >>> 0 < $107 >>> 0;
    if ($cmp448) {
      label = 102;
      break;
    } else {
      label = 101;
      break;
    }
   case 101:
    $arrayidx454 = $R325_1 + 16 | 0;
    HEAP32[$arrayidx454 >> 2] = $105;
    $parent455 = $105 + 24 | 0;
    HEAP32[$parent455 >> 2] = $R325_1;
    label = 103;
    break;
   case 102:
    _abort();
   case 103:
    $child442_sum = $psize + 20 | 0;
    $arrayidx460 = $0 + $child442_sum | 0;
    $108 = $arrayidx460;
    $109 = HEAP32[$108 >> 2] | 0;
    $cmp461 = ($109 | 0) == 0;
    if ($cmp461) {
      label = 108;
      break;
    } else {
      label = 104;
      break;
    }
   case 104:
    $110 = $109;
    $111 = HEAP32[27921] | 0;
    $cmp465 = $110 >>> 0 < $111 >>> 0;
    if ($cmp465) {
      label = 106;
      break;
    } else {
      label = 105;
      break;
    }
   case 105:
    $arrayidx471 = $R325_1 + 20 | 0;
    HEAP32[$arrayidx471 >> 2] = $109;
    $parent472 = $109 + 24 | 0;
    HEAP32[$parent472 >> 2] = $R325_1;
    label = 108;
    break;
   case 106:
    _abort();
   case 107:
    _abort();
   case 108:
    $or481 = $add255 | 1;
    $head482 = $p_addr_0 + 4 | 0;
    HEAP32[$head482 >> 2] = $or481;
    $112 = $p_addr_0;
    $add_ptr483 = $112 + $add255 | 0;
    $prev_foot484 = $add_ptr483;
    HEAP32[$prev_foot484 >> 2] = $add255;
    $113 = HEAP32[27922] | 0;
    $cmp486 = ($p_addr_0 | 0) == ($113 | 0);
    if ($cmp486) {
      label = 109;
      break;
    } else {
      $psize_addr_1 = $add255;
      label = 111;
      break;
    }
   case 109:
    HEAP32[27919] = $add255;
    label = 135;
    break;
   case 110:
    $and495 = $59 & -2;
    HEAP32[$58 >> 2] = $and495;
    $or496 = $psize_addr_0 | 1;
    $head497 = $p_addr_0 + 4 | 0;
    HEAP32[$head497 >> 2] = $or496;
    $114 = $p_addr_0;
    $add_ptr498 = $114 + $psize_addr_0 | 0;
    $prev_foot499 = $add_ptr498;
    HEAP32[$prev_foot499 >> 2] = $psize_addr_0;
    $psize_addr_1 = $psize_addr_0;
    label = 111;
    break;
   case 111:
    $shr501 = $psize_addr_1 >>> 3;
    $cmp502 = $psize_addr_1 >>> 0 < 256;
    if ($cmp502) {
      label = 112;
      break;
    } else {
      label = 117;
      break;
    }
   case 112:
    $shl508 = $shr501 << 1;
    $arrayidx510 = 111708 + ($shl508 << 2) | 0;
    $115 = $arrayidx510;
    $116 = HEAP32[27917] | 0;
    $shl513 = 1 << $shr501;
    $and514 = $116 & $shl513;
    $tobool515 = ($and514 | 0) == 0;
    if ($tobool515) {
      label = 113;
      break;
    } else {
      label = 114;
      break;
    }
   case 113:
    $or519 = $116 | $shl513;
    HEAP32[27917] = $or519;
    $F511_0 = $115;
    label = 116;
    break;
   case 114:
    $arrayidx510_sum11 = $shl508 + 2 | 0;
    $117 = 111708 + ($arrayidx510_sum11 << 2) | 0;
    $118 = HEAP32[$117 >> 2] | 0;
    $119 = $118;
    $120 = HEAP32[27921] | 0;
    $cmp523 = $119 >>> 0 < $120 >>> 0;
    if ($cmp523) {
      label = 115;
      break;
    } else {
      $F511_0 = $118;
      label = 116;
      break;
    }
   case 115:
    _abort();
   case 116:
    $arrayidx510_sum = $shl508 + 2 | 0;
    $121 = 111708 + ($arrayidx510_sum << 2) | 0;
    HEAP32[$121 >> 2] = $p_addr_0;
    $bk533 = $F511_0 + 12 | 0;
    HEAP32[$bk533 >> 2] = $p_addr_0;
    $fd534 = $p_addr_0 + 8 | 0;
    HEAP32[$fd534 >> 2] = $F511_0;
    $bk535 = $p_addr_0 + 12 | 0;
    HEAP32[$bk535 >> 2] = $115;
    label = 135;
    break;
   case 117:
    $122 = $p_addr_0;
    $shr540 = $psize_addr_1 >>> 8;
    $cmp541 = ($shr540 | 0) == 0;
    if ($cmp541) {
      $I539_0 = 0;
      label = 120;
      break;
    } else {
      label = 118;
      break;
    }
   case 118:
    $cmp545 = $psize_addr_1 >>> 0 > 16777215;
    if ($cmp545) {
      $I539_0 = 31;
      label = 120;
      break;
    } else {
      label = 119;
      break;
    }
   case 119:
    $sub = $shr540 + 1048320 | 0;
    $shr549 = $sub >>> 16;
    $and550 = $shr549 & 8;
    $shl551 = $shr540 << $and550;
    $sub552 = $shl551 + 520192 | 0;
    $shr553 = $sub552 >>> 16;
    $and554 = $shr553 & 4;
    $add555 = $and554 | $and550;
    $shl556 = $shl551 << $and554;
    $sub557 = $shl556 + 245760 | 0;
    $shr558 = $sub557 >>> 16;
    $and559 = $shr558 & 2;
    $add560 = $add555 | $and559;
    $sub561 = 14 - $add560 | 0;
    $shl562 = $shl556 << $and559;
    $shr563 = $shl562 >>> 15;
    $add564 = $sub561 + $shr563 | 0;
    $shl565 = $add564 << 1;
    $add566 = $add564 + 7 | 0;
    $shr567 = $psize_addr_1 >>> ($add566 >>> 0);
    $and568 = $shr567 & 1;
    $add569 = $and568 | $shl565;
    $I539_0 = $add569;
    label = 120;
    break;
   case 120:
    $arrayidx573 = 111972 + ($I539_0 << 2) | 0;
    $index574 = $p_addr_0 + 28 | 0;
    $I539_0_c = $I539_0;
    HEAP32[$index574 >> 2] = $I539_0_c;
    $arrayidx576 = $p_addr_0 + 20 | 0;
    HEAP32[$arrayidx576 >> 2] = 0;
    $123 = $p_addr_0 + 16 | 0;
    HEAP32[$123 >> 2] = 0;
    $124 = HEAP32[27918] | 0;
    $shl580 = 1 << $I539_0;
    $and581 = $124 & $shl580;
    $tobool582 = ($and581 | 0) == 0;
    if ($tobool582) {
      label = 121;
      break;
    } else {
      label = 122;
      break;
    }
   case 121:
    $or586 = $124 | $shl580;
    HEAP32[27918] = $or586;
    HEAP32[$arrayidx573 >> 2] = $122;
    $parent587 = $p_addr_0 + 24 | 0;
    $_c = $arrayidx573;
    HEAP32[$parent587 >> 2] = $_c;
    $bk588 = $p_addr_0 + 12 | 0;
    HEAP32[$bk588 >> 2] = $p_addr_0;
    $fd589 = $p_addr_0 + 8 | 0;
    HEAP32[$fd589 >> 2] = $p_addr_0;
    label = 135;
    break;
   case 122:
    $125 = HEAP32[$arrayidx573 >> 2] | 0;
    $cmp592 = ($I539_0 | 0) == 31;
    if ($cmp592) {
      $cond = 0;
      label = 124;
      break;
    } else {
      label = 123;
      break;
    }
   case 123:
    $shr594 = $I539_0 >>> 1;
    $sub597 = 25 - $shr594 | 0;
    $cond = $sub597;
    label = 124;
    break;
   case 124:
    $shl598 = $psize_addr_1 << $cond;
    $K591_0 = $shl598;
    $T_0 = $125;
    label = 125;
    break;
   case 125:
    $head599 = $T_0 + 4 | 0;
    $126 = HEAP32[$head599 >> 2] | 0;
    $and600 = $126 & -8;
    $cmp601 = ($and600 | 0) == ($psize_addr_1 | 0);
    if ($cmp601) {
      label = 130;
      break;
    } else {
      label = 126;
      break;
    }
   case 126:
    $shr604 = $K591_0 >>> 31;
    $arrayidx607 = $T_0 + 16 + ($shr604 << 2) | 0;
    $127 = HEAP32[$arrayidx607 >> 2] | 0;
    $cmp609 = ($127 | 0) == 0;
    $shl608 = $K591_0 << 1;
    if ($cmp609) {
      label = 127;
      break;
    } else {
      $K591_0 = $shl608;
      $T_0 = $127;
      label = 125;
      break;
    }
   case 127:
    $128 = $arrayidx607;
    $129 = HEAP32[27921] | 0;
    $cmp614 = $128 >>> 0 < $129 >>> 0;
    if ($cmp614) {
      label = 129;
      break;
    } else {
      label = 128;
      break;
    }
   case 128:
    HEAP32[$arrayidx607 >> 2] = $122;
    $parent619 = $p_addr_0 + 24 | 0;
    $T_0_c8 = $T_0;
    HEAP32[$parent619 >> 2] = $T_0_c8;
    $bk620 = $p_addr_0 + 12 | 0;
    HEAP32[$bk620 >> 2] = $p_addr_0;
    $fd621 = $p_addr_0 + 8 | 0;
    HEAP32[$fd621 >> 2] = $p_addr_0;
    label = 135;
    break;
   case 129:
    _abort();
   case 130:
    $fd626 = $T_0 + 8 | 0;
    $130 = HEAP32[$fd626 >> 2] | 0;
    $131 = $T_0;
    $132 = HEAP32[27921] | 0;
    $cmp628 = $131 >>> 0 < $132 >>> 0;
    if ($cmp628) {
      label = 133;
      break;
    } else {
      label = 131;
      break;
    }
   case 131:
    $133 = $130;
    $cmp632 = $133 >>> 0 < $132 >>> 0;
    if ($cmp632) {
      label = 133;
      break;
    } else {
      label = 132;
      break;
    }
   case 132:
    $bk639 = $130 + 12 | 0;
    HEAP32[$bk639 >> 2] = $122;
    HEAP32[$fd626 >> 2] = $122;
    $fd641 = $p_addr_0 + 8 | 0;
    $_c7 = $130;
    HEAP32[$fd641 >> 2] = $_c7;
    $bk642 = $p_addr_0 + 12 | 0;
    $T_0_c = $T_0;
    HEAP32[$bk642 >> 2] = $T_0_c;
    $parent643 = $p_addr_0 + 24 | 0;
    HEAP32[$parent643 >> 2] = 0;
    label = 135;
    break;
   case 133:
    _abort();
   case 134:
    _abort();
   case 135:
    return;
  }
}
function _init_top($p, $psize) {
  $p = $p | 0;
  $psize = $psize | 0;
  var $0 = 0, $add_ptr = 0, $1 = 0, $and = 0, $cmp = 0, $2 = 0, $and3 = 0, $cond = 0, $add_ptr4 = 0, $3 = 0, $sub5 = 0, $or = 0, $add_ptr4_sum = 0, $head = 0, $4 = 0, $add_ptr6_sum = 0, $head7 = 0, $5 = 0, $6 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = $p;
    $add_ptr = $p + 8 | 0;
    $1 = $add_ptr;
    $and = $1 & 7;
    $cmp = ($and | 0) == 0;
    if ($cmp) {
      $cond = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $2 = -$1 | 0;
    $and3 = $2 & 7;
    $cond = $and3;
    label = 4;
    break;
   case 4:
    $add_ptr4 = $0 + $cond | 0;
    $3 = $add_ptr4;
    $sub5 = $psize - $cond | 0;
    HEAP32[27923] = $3;
    HEAP32[27920] = $sub5;
    $or = $sub5 | 1;
    $add_ptr4_sum = $cond + 4 | 0;
    $head = $0 + $add_ptr4_sum | 0;
    $4 = $head;
    HEAP32[$4 >> 2] = $or;
    $add_ptr6_sum = $psize + 4 | 0;
    $head7 = $0 + $add_ptr6_sum | 0;
    $5 = $head7;
    HEAP32[$5 >> 2] = 40;
    $6 = HEAP32[19736] | 0;
    HEAP32[27924] = $6;
    return;
  }
}
function _init_bins() {
  var $i_02 = 0, $shl = 0, $arrayidx = 0, $0 = 0, $arrayidx_sum = 0, $1 = 0, $arrayidx_sum1 = 0, $2 = 0, $inc = 0, $exitcond = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $i_02 = 0;
    label = 3;
    break;
   case 3:
    $shl = $i_02 << 1;
    $arrayidx = 111708 + ($shl << 2) | 0;
    $0 = $arrayidx;
    $arrayidx_sum = $shl + 3 | 0;
    $1 = 111708 + ($arrayidx_sum << 2) | 0;
    HEAP32[$1 >> 2] = $0;
    $arrayidx_sum1 = $shl + 2 | 0;
    $2 = 111708 + ($arrayidx_sum1 << 2) | 0;
    HEAP32[$2 >> 2] = $0;
    $inc = $i_02 + 1 | 0;
    $exitcond = ($inc | 0) == 32;
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $i_02 = $inc;
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _prepend_alloc($newbase, $oldbase, $nb) {
  $newbase = $newbase | 0;
  $oldbase = $oldbase | 0;
  $nb = $nb | 0;
  var $add_ptr = 0, $0 = 0, $and = 0, $cmp = 0, $1 = 0, $and3 = 0, $cond = 0, $add_ptr4 = 0, $add_ptr5 = 0, $2 = 0, $and6 = 0, $cmp7 = 0, $3 = 0, $and13 = 0, $cond15 = 0, $add_ptr16 = 0, $4 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $add_ptr4_sum = 0, $add_ptr17 = 0, $5 = 0, $sub18 = 0, $or19 = 0, $add_ptr4_sum1 = 0, $head = 0, $6 = 0, $7 = 0, $cmp20 = 0, $8 = 0, $add = 0, $or22 = 0, $add_ptr17_sum35 = 0, $head23 = 0, $9 = 0, $10 = 0, $cmp24 = 0, $11 = 0, $add26 = 0, $or28 = 0, $add_ptr17_sum33 = 0, $head29 = 0, $12 = 0, $add_ptr17_sum34 = 0, $add_ptr30 = 0, $prev_foot = 0, $add_ptr16_sum = 0, $head32 = 0, $13 = 0, $14 = 0, $and33 = 0, $cmp34 = 0, $and37 = 0, $shr = 0, $cmp38 = 0, $add_ptr16_sum3031 = 0, $fd = 0, $15 = 0, $16 = 0, $add_ptr16_sum32 = 0, $bk = 0, $17 = 0, $18 = 0, $shl = 0, $arrayidx = 0, $19 = 0, $cmp41 = 0, $20 = 0, $21 = 0, $cmp42 = 0, $bk43 = 0, $22 = 0, $cmp44 = 0, $cmp46 = 0, $shl48 = 0, $neg = 0, $23 = 0, $and49 = 0, $cmp54 = 0, $24 = 0, $25 = 0, $cmp57 = 0, $fd59 = 0, $26 = 0, $cmp60 = 0, $bk67 = 0, $fd68 = 0, $27 = 0, $add_ptr16_sum23 = 0, $parent = 0, $28 = 0, $29 = 0, $add_ptr16_sum4 = 0, $bk74 = 0, $30 = 0, $31 = 0, $cmp75 = 0, $add_ptr16_sum2829 = 0, $fd78 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $cmp81 = 0, $bk82 = 0, $36 = 0, $cmp83 = 0, $fd85 = 0, $37 = 0, $cmp86 = 0, $add_ptr16_sum56 = 0, $child_sum = 0, $arrayidx96 = 0, $38 = 0, $39 = 0, $cmp97 = 0, $child = 0, $arrayidx99 = 0, $40 = 0, $cmp100 = 0, $RP_0 = 0, $R_0 = 0, $arrayidx103 = 0, $41 = 0, $cmp104 = 0, $arrayidx107 = 0, $42 = 0, $cmp108 = 0, $CP_0 = 0, $43 = 0, $44 = 0, $45 = 0, $cmp112 = 0, $R_1 = 0, $cmp120 = 0, $add_ptr16_sum25 = 0, $index = 0, $46 = 0, $47 = 0, $arrayidx123 = 0, $48 = 0, $cmp124 = 0, $cond37 = 0, $49 = 0, $shl131 = 0, $neg132 = 0, $50 = 0, $and133 = 0, $51 = 0, $52 = 0, $cmp137 = 0, $arrayidx143 = 0, $53 = 0, $cmp144 = 0, $arrayidx151 = 0, $cmp156 = 0, $54 = 0, $55 = 0, $cmp160 = 0, $parent165 = 0, $add_ptr16_sum2627 = 0, $child166 = 0, $arrayidx167 = 0, $56 = 0, $cmp168 = 0, $57 = 0, $58 = 0, $cmp172 = 0, $arrayidx178 = 0, $parent179 = 0, $child166_sum = 0, $arrayidx184 = 0, $59 = 0, $60 = 0, $cmp185 = 0, $61 = 0, $62 = 0, $cmp189 = 0, $arrayidx195 = 0, $parent196 = 0, $add_ptr16_sum7 = 0, $add_ptr205 = 0, $63 = 0, $add206 = 0, $qsize_0 = 0, $oldfirst_0 = 0, $head208 = 0, $64 = 0, $and209 = 0, $or210 = 0, $add_ptr17_sum = 0, $head211 = 0, $65 = 0, $add_ptr17_sum8 = 0, $add_ptr212 = 0, $prev_foot213 = 0, $shr214 = 0, $cmp215 = 0, $shl221 = 0, $arrayidx223 = 0, $66 = 0, $67 = 0, $shl226 = 0, $and227 = 0, $tobool228 = 0, $or232 = 0, $arrayidx223_sum24 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $cmp236 = 0, $F224_0 = 0, $arrayidx223_sum = 0, $72 = 0, $bk246 = 0, $add_ptr17_sum22 = 0, $fd247 = 0, $73 = 0, $add_ptr17_sum23 = 0, $bk248 = 0, $74 = 0, $75 = 0, $shr253 = 0, $cmp254 = 0, $cmp258 = 0, $sub262 = 0, $shr263 = 0, $and264 = 0, $shl265 = 0, $sub266 = 0, $shr267 = 0, $and268 = 0, $add269 = 0, $shl270 = 0, $sub271 = 0, $shr272 = 0, $and273 = 0, $add274 = 0, $sub275 = 0, $shl276 = 0, $shr277 = 0, $add278 = 0, $shl279 = 0, $add280 = 0, $shr281 = 0, $and282 = 0, $add283 = 0, $I252_0 = 0, $arrayidx287 = 0, $add_ptr17_sum9 = 0, $index288 = 0, $76 = 0, $add_ptr17_sum10 = 0, $child289 = 0, $child289_sum = 0, $arrayidx290 = 0, $77 = 0, $arrayidx292 = 0, $78 = 0, $shl294 = 0, $and295 = 0, $tobool296 = 0, $or300 = 0, $79 = 0, $add_ptr17_sum11 = 0, $parent301 = 0, $80 = 0, $add_ptr17_sum12 = 0, $bk302 = 0, $81 = 0, $add_ptr17_sum13 = 0, $fd303 = 0, $82 = 0, $83 = 0, $cmp306 = 0, $shr310 = 0, $sub313 = 0, $cond315 = 0, $shl316 = 0, $T_0 = 0, $K305_0 = 0, $head317 = 0, $84 = 0, $and318 = 0, $cmp319 = 0, $shr322 = 0, $arrayidx325 = 0, $85 = 0, $cmp327 = 0, $shl326 = 0, $86 = 0, $87 = 0, $cmp332 = 0, $add_ptr17_sum19 = 0, $parent337 = 0, $88 = 0, $add_ptr17_sum20 = 0, $bk338 = 0, $89 = 0, $add_ptr17_sum21 = 0, $fd339 = 0, $90 = 0, $fd344 = 0, $91 = 0, $92 = 0, $93 = 0, $cmp346 = 0, $94 = 0, $cmp350 = 0, $bk357 = 0, $add_ptr17_sum16 = 0, $fd359 = 0, $95 = 0, $add_ptr17_sum17 = 0, $bk360 = 0, $96 = 0, $add_ptr17_sum18 = 0, $parent361 = 0, $97 = 0, $add_ptr4_sum1415 = 0, $add_ptr368 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $add_ptr = $newbase + 8 | 0;
    $0 = $add_ptr;
    $and = $0 & 7;
    $cmp = ($and | 0) == 0;
    if ($cmp) {
      $cond = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $1 = -$0 | 0;
    $and3 = $1 & 7;
    $cond = $and3;
    label = 4;
    break;
   case 4:
    $add_ptr4 = $newbase + $cond | 0;
    $add_ptr5 = $oldbase + 8 | 0;
    $2 = $add_ptr5;
    $and6 = $2 & 7;
    $cmp7 = ($and6 | 0) == 0;
    if ($cmp7) {
      $cond15 = 0;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $3 = -$2 | 0;
    $and13 = $3 & 7;
    $cond15 = $and13;
    label = 6;
    break;
   case 6:
    $add_ptr16 = $oldbase + $cond15 | 0;
    $4 = $add_ptr16;
    $sub_ptr_lhs_cast = $add_ptr16;
    $sub_ptr_rhs_cast = $add_ptr4;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $add_ptr4_sum = $cond + $nb | 0;
    $add_ptr17 = $newbase + $add_ptr4_sum | 0;
    $5 = $add_ptr17;
    $sub18 = $sub_ptr_sub - $nb | 0;
    $or19 = $nb | 3;
    $add_ptr4_sum1 = $cond + 4 | 0;
    $head = $newbase + $add_ptr4_sum1 | 0;
    $6 = $head;
    HEAP32[$6 >> 2] = $or19;
    $7 = HEAP32[27923] | 0;
    $cmp20 = ($4 | 0) == ($7 | 0);
    if ($cmp20) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $8 = HEAP32[27920] | 0;
    $add = $8 + $sub18 | 0;
    HEAP32[27920] = $add;
    HEAP32[27923] = $5;
    $or22 = $add | 1;
    $add_ptr17_sum35 = $add_ptr4_sum + 4 | 0;
    $head23 = $newbase + $add_ptr17_sum35 | 0;
    $9 = $head23;
    HEAP32[$9 >> 2] = $or22;
    label = 81;
    break;
   case 8:
    $10 = HEAP32[27922] | 0;
    $cmp24 = ($4 | 0) == ($10 | 0);
    if ($cmp24) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $11 = HEAP32[27919] | 0;
    $add26 = $11 + $sub18 | 0;
    HEAP32[27919] = $add26;
    HEAP32[27922] = $5;
    $or28 = $add26 | 1;
    $add_ptr17_sum33 = $add_ptr4_sum + 4 | 0;
    $head29 = $newbase + $add_ptr17_sum33 | 0;
    $12 = $head29;
    HEAP32[$12 >> 2] = $or28;
    $add_ptr17_sum34 = $add26 + $add_ptr4_sum | 0;
    $add_ptr30 = $newbase + $add_ptr17_sum34 | 0;
    $prev_foot = $add_ptr30;
    HEAP32[$prev_foot >> 2] = $add26;
    label = 81;
    break;
   case 10:
    $add_ptr16_sum = $cond15 + 4 | 0;
    $head32 = $oldbase + $add_ptr16_sum | 0;
    $13 = $head32;
    $14 = HEAP32[$13 >> 2] | 0;
    $and33 = $14 & 3;
    $cmp34 = ($and33 | 0) == 1;
    if ($cmp34) {
      label = 11;
      break;
    } else {
      $oldfirst_0 = $4;
      $qsize_0 = $sub18;
      label = 58;
      break;
    }
   case 11:
    $and37 = $14 & -8;
    $shr = $14 >>> 3;
    $cmp38 = $14 >>> 0 < 256;
    if ($cmp38) {
      label = 12;
      break;
    } else {
      label = 23;
      break;
    }
   case 12:
    $add_ptr16_sum3031 = $cond15 | 8;
    $fd = $oldbase + $add_ptr16_sum3031 | 0;
    $15 = $fd;
    $16 = HEAP32[$15 >> 2] | 0;
    $add_ptr16_sum32 = $cond15 + 12 | 0;
    $bk = $oldbase + $add_ptr16_sum32 | 0;
    $17 = $bk;
    $18 = HEAP32[$17 >> 2] | 0;
    $shl = $shr << 1;
    $arrayidx = 111708 + ($shl << 2) | 0;
    $19 = $arrayidx;
    $cmp41 = ($16 | 0) == ($19 | 0);
    if ($cmp41) {
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $20 = $16;
    $21 = HEAP32[27921] | 0;
    $cmp42 = $20 >>> 0 < $21 >>> 0;
    if ($cmp42) {
      label = 22;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $bk43 = $16 + 12 | 0;
    $22 = HEAP32[$bk43 >> 2] | 0;
    $cmp44 = ($22 | 0) == ($4 | 0);
    if ($cmp44) {
      label = 15;
      break;
    } else {
      label = 22;
      break;
    }
   case 15:
    $cmp46 = ($18 | 0) == ($16 | 0);
    if ($cmp46) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    $shl48 = 1 << $shr;
    $neg = $shl48 ^ -1;
    $23 = HEAP32[27917] | 0;
    $and49 = $23 & $neg;
    HEAP32[27917] = $and49;
    label = 57;
    break;
   case 17:
    $cmp54 = ($18 | 0) == ($19 | 0);
    if ($cmp54) {
      label = 20;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $24 = $18;
    $25 = HEAP32[27921] | 0;
    $cmp57 = $24 >>> 0 < $25 >>> 0;
    if ($cmp57) {
      label = 21;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $fd59 = $18 + 8 | 0;
    $26 = HEAP32[$fd59 >> 2] | 0;
    $cmp60 = ($26 | 0) == ($4 | 0);
    if ($cmp60) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    $bk67 = $16 + 12 | 0;
    HEAP32[$bk67 >> 2] = $18;
    $fd68 = $18 + 8 | 0;
    HEAP32[$fd68 >> 2] = $16;
    label = 57;
    break;
   case 21:
    _abort();
    return 0;
    return 0;
   case 22:
    _abort();
    return 0;
    return 0;
   case 23:
    $27 = $add_ptr16;
    $add_ptr16_sum23 = $cond15 | 24;
    $parent = $oldbase + $add_ptr16_sum23 | 0;
    $28 = $parent;
    $29 = HEAP32[$28 >> 2] | 0;
    $add_ptr16_sum4 = $cond15 + 12 | 0;
    $bk74 = $oldbase + $add_ptr16_sum4 | 0;
    $30 = $bk74;
    $31 = HEAP32[$30 >> 2] | 0;
    $cmp75 = ($31 | 0) == ($27 | 0);
    if ($cmp75) {
      label = 29;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $add_ptr16_sum2829 = $cond15 | 8;
    $fd78 = $oldbase + $add_ptr16_sum2829 | 0;
    $32 = $fd78;
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = $33;
    $35 = HEAP32[27921] | 0;
    $cmp81 = $34 >>> 0 < $35 >>> 0;
    if ($cmp81) {
      label = 28;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $bk82 = $33 + 12 | 0;
    $36 = HEAP32[$bk82 >> 2] | 0;
    $cmp83 = ($36 | 0) == ($27 | 0);
    if ($cmp83) {
      label = 26;
      break;
    } else {
      label = 28;
      break;
    }
   case 26:
    $fd85 = $31 + 8 | 0;
    $37 = HEAP32[$fd85 >> 2] | 0;
    $cmp86 = ($37 | 0) == ($27 | 0);
    if ($cmp86) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    HEAP32[$bk82 >> 2] = $31;
    HEAP32[$fd85 >> 2] = $33;
    $R_1 = $31;
    label = 37;
    break;
   case 28:
    _abort();
    return 0;
    return 0;
   case 29:
    $add_ptr16_sum56 = $cond15 | 16;
    $child_sum = $add_ptr16_sum56 + 4 | 0;
    $arrayidx96 = $oldbase + $child_sum | 0;
    $38 = $arrayidx96;
    $39 = HEAP32[$38 >> 2] | 0;
    $cmp97 = ($39 | 0) == 0;
    if ($cmp97) {
      label = 30;
      break;
    } else {
      $R_0 = $39;
      $RP_0 = $38;
      label = 31;
      break;
    }
   case 30:
    $child = $oldbase + $add_ptr16_sum56 | 0;
    $arrayidx99 = $child;
    $40 = HEAP32[$arrayidx99 >> 2] | 0;
    $cmp100 = ($40 | 0) == 0;
    if ($cmp100) {
      $R_1 = 0;
      label = 37;
      break;
    } else {
      $R_0 = $40;
      $RP_0 = $arrayidx99;
      label = 31;
      break;
    }
   case 31:
    $arrayidx103 = $R_0 + 20 | 0;
    $41 = HEAP32[$arrayidx103 >> 2] | 0;
    $cmp104 = ($41 | 0) == 0;
    if ($cmp104) {
      label = 32;
      break;
    } else {
      $CP_0 = $arrayidx103;
      label = 33;
      break;
    }
   case 32:
    $arrayidx107 = $R_0 + 16 | 0;
    $42 = HEAP32[$arrayidx107 >> 2] | 0;
    $cmp108 = ($42 | 0) == 0;
    if ($cmp108) {
      label = 34;
      break;
    } else {
      $CP_0 = $arrayidx107;
      label = 33;
      break;
    }
   case 33:
    $43 = HEAP32[$CP_0 >> 2] | 0;
    $R_0 = $43;
    $RP_0 = $CP_0;
    label = 31;
    break;
   case 34:
    $44 = $RP_0;
    $45 = HEAP32[27921] | 0;
    $cmp112 = $44 >>> 0 < $45 >>> 0;
    if ($cmp112) {
      label = 36;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    HEAP32[$RP_0 >> 2] = 0;
    $R_1 = $R_0;
    label = 37;
    break;
   case 36:
    _abort();
    return 0;
    return 0;
   case 37:
    $cmp120 = ($29 | 0) == 0;
    if ($cmp120) {
      label = 57;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    $add_ptr16_sum25 = $cond15 + 28 | 0;
    $index = $oldbase + $add_ptr16_sum25 | 0;
    $46 = $index;
    $47 = HEAP32[$46 >> 2] | 0;
    $arrayidx123 = 111972 + ($47 << 2) | 0;
    $48 = HEAP32[$arrayidx123 >> 2] | 0;
    $cmp124 = ($27 | 0) == ($48 | 0);
    if ($cmp124) {
      label = 39;
      break;
    } else {
      label = 41;
      break;
    }
   case 39:
    HEAP32[$arrayidx123 >> 2] = $R_1;
    $cond37 = ($R_1 | 0) == 0;
    if ($cond37) {
      label = 40;
      break;
    } else {
      label = 47;
      break;
    }
   case 40:
    $49 = HEAP32[$46 >> 2] | 0;
    $shl131 = 1 << $49;
    $neg132 = $shl131 ^ -1;
    $50 = HEAP32[27918] | 0;
    $and133 = $50 & $neg132;
    HEAP32[27918] = $and133;
    label = 57;
    break;
   case 41:
    $51 = $29;
    $52 = HEAP32[27921] | 0;
    $cmp137 = $51 >>> 0 < $52 >>> 0;
    if ($cmp137) {
      label = 45;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    $arrayidx143 = $29 + 16 | 0;
    $53 = HEAP32[$arrayidx143 >> 2] | 0;
    $cmp144 = ($53 | 0) == ($27 | 0);
    if ($cmp144) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    HEAP32[$arrayidx143 >> 2] = $R_1;
    label = 46;
    break;
   case 44:
    $arrayidx151 = $29 + 20 | 0;
    HEAP32[$arrayidx151 >> 2] = $R_1;
    label = 46;
    break;
   case 45:
    _abort();
    return 0;
    return 0;
   case 46:
    $cmp156 = ($R_1 | 0) == 0;
    if ($cmp156) {
      label = 57;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    $54 = $R_1;
    $55 = HEAP32[27921] | 0;
    $cmp160 = $54 >>> 0 < $55 >>> 0;
    if ($cmp160) {
      label = 56;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    $parent165 = $R_1 + 24 | 0;
    HEAP32[$parent165 >> 2] = $29;
    $add_ptr16_sum2627 = $cond15 | 16;
    $child166 = $oldbase + $add_ptr16_sum2627 | 0;
    $arrayidx167 = $child166;
    $56 = HEAP32[$arrayidx167 >> 2] | 0;
    $cmp168 = ($56 | 0) == 0;
    if ($cmp168) {
      label = 52;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    $57 = $56;
    $58 = HEAP32[27921] | 0;
    $cmp172 = $57 >>> 0 < $58 >>> 0;
    if ($cmp172) {
      label = 51;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    $arrayidx178 = $R_1 + 16 | 0;
    HEAP32[$arrayidx178 >> 2] = $56;
    $parent179 = $56 + 24 | 0;
    HEAP32[$parent179 >> 2] = $R_1;
    label = 52;
    break;
   case 51:
    _abort();
    return 0;
    return 0;
   case 52:
    $child166_sum = $add_ptr16_sum2627 + 4 | 0;
    $arrayidx184 = $oldbase + $child166_sum | 0;
    $59 = $arrayidx184;
    $60 = HEAP32[$59 >> 2] | 0;
    $cmp185 = ($60 | 0) == 0;
    if ($cmp185) {
      label = 57;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    $61 = $60;
    $62 = HEAP32[27921] | 0;
    $cmp189 = $61 >>> 0 < $62 >>> 0;
    if ($cmp189) {
      label = 55;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    $arrayidx195 = $R_1 + 20 | 0;
    HEAP32[$arrayidx195 >> 2] = $60;
    $parent196 = $60 + 24 | 0;
    HEAP32[$parent196 >> 2] = $R_1;
    label = 57;
    break;
   case 55:
    _abort();
    return 0;
    return 0;
   case 56:
    _abort();
    return 0;
    return 0;
   case 57:
    $add_ptr16_sum7 = $and37 | $cond15;
    $add_ptr205 = $oldbase + $add_ptr16_sum7 | 0;
    $63 = $add_ptr205;
    $add206 = $and37 + $sub18 | 0;
    $oldfirst_0 = $63;
    $qsize_0 = $add206;
    label = 58;
    break;
   case 58:
    $head208 = $oldfirst_0 + 4 | 0;
    $64 = HEAP32[$head208 >> 2] | 0;
    $and209 = $64 & -2;
    HEAP32[$head208 >> 2] = $and209;
    $or210 = $qsize_0 | 1;
    $add_ptr17_sum = $add_ptr4_sum + 4 | 0;
    $head211 = $newbase + $add_ptr17_sum | 0;
    $65 = $head211;
    HEAP32[$65 >> 2] = $or210;
    $add_ptr17_sum8 = $qsize_0 + $add_ptr4_sum | 0;
    $add_ptr212 = $newbase + $add_ptr17_sum8 | 0;
    $prev_foot213 = $add_ptr212;
    HEAP32[$prev_foot213 >> 2] = $qsize_0;
    $shr214 = $qsize_0 >>> 3;
    $cmp215 = $qsize_0 >>> 0 < 256;
    if ($cmp215) {
      label = 59;
      break;
    } else {
      label = 64;
      break;
    }
   case 59:
    $shl221 = $shr214 << 1;
    $arrayidx223 = 111708 + ($shl221 << 2) | 0;
    $66 = $arrayidx223;
    $67 = HEAP32[27917] | 0;
    $shl226 = 1 << $shr214;
    $and227 = $67 & $shl226;
    $tobool228 = ($and227 | 0) == 0;
    if ($tobool228) {
      label = 60;
      break;
    } else {
      label = 61;
      break;
    }
   case 60:
    $or232 = $67 | $shl226;
    HEAP32[27917] = $or232;
    $F224_0 = $66;
    label = 63;
    break;
   case 61:
    $arrayidx223_sum24 = $shl221 + 2 | 0;
    $68 = 111708 + ($arrayidx223_sum24 << 2) | 0;
    $69 = HEAP32[$68 >> 2] | 0;
    $70 = $69;
    $71 = HEAP32[27921] | 0;
    $cmp236 = $70 >>> 0 < $71 >>> 0;
    if ($cmp236) {
      label = 62;
      break;
    } else {
      $F224_0 = $69;
      label = 63;
      break;
    }
   case 62:
    _abort();
    return 0;
    return 0;
   case 63:
    $arrayidx223_sum = $shl221 + 2 | 0;
    $72 = 111708 + ($arrayidx223_sum << 2) | 0;
    HEAP32[$72 >> 2] = $5;
    $bk246 = $F224_0 + 12 | 0;
    HEAP32[$bk246 >> 2] = $5;
    $add_ptr17_sum22 = $add_ptr4_sum + 8 | 0;
    $fd247 = $newbase + $add_ptr17_sum22 | 0;
    $73 = $fd247;
    HEAP32[$73 >> 2] = $F224_0;
    $add_ptr17_sum23 = $add_ptr4_sum + 12 | 0;
    $bk248 = $newbase + $add_ptr17_sum23 | 0;
    $74 = $bk248;
    HEAP32[$74 >> 2] = $66;
    label = 81;
    break;
   case 64:
    $75 = $add_ptr17;
    $shr253 = $qsize_0 >>> 8;
    $cmp254 = ($shr253 | 0) == 0;
    if ($cmp254) {
      $I252_0 = 0;
      label = 67;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    $cmp258 = $qsize_0 >>> 0 > 16777215;
    if ($cmp258) {
      $I252_0 = 31;
      label = 67;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    $sub262 = $shr253 + 1048320 | 0;
    $shr263 = $sub262 >>> 16;
    $and264 = $shr263 & 8;
    $shl265 = $shr253 << $and264;
    $sub266 = $shl265 + 520192 | 0;
    $shr267 = $sub266 >>> 16;
    $and268 = $shr267 & 4;
    $add269 = $and268 | $and264;
    $shl270 = $shl265 << $and268;
    $sub271 = $shl270 + 245760 | 0;
    $shr272 = $sub271 >>> 16;
    $and273 = $shr272 & 2;
    $add274 = $add269 | $and273;
    $sub275 = 14 - $add274 | 0;
    $shl276 = $shl270 << $and273;
    $shr277 = $shl276 >>> 15;
    $add278 = $sub275 + $shr277 | 0;
    $shl279 = $add278 << 1;
    $add280 = $add278 + 7 | 0;
    $shr281 = $qsize_0 >>> ($add280 >>> 0);
    $and282 = $shr281 & 1;
    $add283 = $and282 | $shl279;
    $I252_0 = $add283;
    label = 67;
    break;
   case 67:
    $arrayidx287 = 111972 + ($I252_0 << 2) | 0;
    $add_ptr17_sum9 = $add_ptr4_sum + 28 | 0;
    $index288 = $newbase + $add_ptr17_sum9 | 0;
    $76 = $index288;
    HEAP32[$76 >> 2] = $I252_0;
    $add_ptr17_sum10 = $add_ptr4_sum + 16 | 0;
    $child289 = $newbase + $add_ptr17_sum10 | 0;
    $child289_sum = $add_ptr4_sum + 20 | 0;
    $arrayidx290 = $newbase + $child289_sum | 0;
    $77 = $arrayidx290;
    HEAP32[$77 >> 2] = 0;
    $arrayidx292 = $child289;
    HEAP32[$arrayidx292 >> 2] = 0;
    $78 = HEAP32[27918] | 0;
    $shl294 = 1 << $I252_0;
    $and295 = $78 & $shl294;
    $tobool296 = ($and295 | 0) == 0;
    if ($tobool296) {
      label = 68;
      break;
    } else {
      label = 69;
      break;
    }
   case 68:
    $or300 = $78 | $shl294;
    HEAP32[27918] = $or300;
    HEAP32[$arrayidx287 >> 2] = $75;
    $79 = $arrayidx287;
    $add_ptr17_sum11 = $add_ptr4_sum + 24 | 0;
    $parent301 = $newbase + $add_ptr17_sum11 | 0;
    $80 = $parent301;
    HEAP32[$80 >> 2] = $79;
    $add_ptr17_sum12 = $add_ptr4_sum + 12 | 0;
    $bk302 = $newbase + $add_ptr17_sum12 | 0;
    $81 = $bk302;
    HEAP32[$81 >> 2] = $75;
    $add_ptr17_sum13 = $add_ptr4_sum + 8 | 0;
    $fd303 = $newbase + $add_ptr17_sum13 | 0;
    $82 = $fd303;
    HEAP32[$82 >> 2] = $75;
    label = 81;
    break;
   case 69:
    $83 = HEAP32[$arrayidx287 >> 2] | 0;
    $cmp306 = ($I252_0 | 0) == 31;
    if ($cmp306) {
      $cond315 = 0;
      label = 71;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    $shr310 = $I252_0 >>> 1;
    $sub313 = 25 - $shr310 | 0;
    $cond315 = $sub313;
    label = 71;
    break;
   case 71:
    $shl316 = $qsize_0 << $cond315;
    $K305_0 = $shl316;
    $T_0 = $83;
    label = 72;
    break;
   case 72:
    $head317 = $T_0 + 4 | 0;
    $84 = HEAP32[$head317 >> 2] | 0;
    $and318 = $84 & -8;
    $cmp319 = ($and318 | 0) == ($qsize_0 | 0);
    if ($cmp319) {
      label = 77;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    $shr322 = $K305_0 >>> 31;
    $arrayidx325 = $T_0 + 16 + ($shr322 << 2) | 0;
    $85 = HEAP32[$arrayidx325 >> 2] | 0;
    $cmp327 = ($85 | 0) == 0;
    $shl326 = $K305_0 << 1;
    if ($cmp327) {
      label = 74;
      break;
    } else {
      $K305_0 = $shl326;
      $T_0 = $85;
      label = 72;
      break;
    }
   case 74:
    $86 = $arrayidx325;
    $87 = HEAP32[27921] | 0;
    $cmp332 = $86 >>> 0 < $87 >>> 0;
    if ($cmp332) {
      label = 76;
      break;
    } else {
      label = 75;
      break;
    }
   case 75:
    HEAP32[$arrayidx325 >> 2] = $75;
    $add_ptr17_sum19 = $add_ptr4_sum + 24 | 0;
    $parent337 = $newbase + $add_ptr17_sum19 | 0;
    $88 = $parent337;
    HEAP32[$88 >> 2] = $T_0;
    $add_ptr17_sum20 = $add_ptr4_sum + 12 | 0;
    $bk338 = $newbase + $add_ptr17_sum20 | 0;
    $89 = $bk338;
    HEAP32[$89 >> 2] = $75;
    $add_ptr17_sum21 = $add_ptr4_sum + 8 | 0;
    $fd339 = $newbase + $add_ptr17_sum21 | 0;
    $90 = $fd339;
    HEAP32[$90 >> 2] = $75;
    label = 81;
    break;
   case 76:
    _abort();
    return 0;
    return 0;
   case 77:
    $fd344 = $T_0 + 8 | 0;
    $91 = HEAP32[$fd344 >> 2] | 0;
    $92 = $T_0;
    $93 = HEAP32[27921] | 0;
    $cmp346 = $92 >>> 0 < $93 >>> 0;
    if ($cmp346) {
      label = 80;
      break;
    } else {
      label = 78;
      break;
    }
   case 78:
    $94 = $91;
    $cmp350 = $94 >>> 0 < $93 >>> 0;
    if ($cmp350) {
      label = 80;
      break;
    } else {
      label = 79;
      break;
    }
   case 79:
    $bk357 = $91 + 12 | 0;
    HEAP32[$bk357 >> 2] = $75;
    HEAP32[$fd344 >> 2] = $75;
    $add_ptr17_sum16 = $add_ptr4_sum + 8 | 0;
    $fd359 = $newbase + $add_ptr17_sum16 | 0;
    $95 = $fd359;
    HEAP32[$95 >> 2] = $91;
    $add_ptr17_sum17 = $add_ptr4_sum + 12 | 0;
    $bk360 = $newbase + $add_ptr17_sum17 | 0;
    $96 = $bk360;
    HEAP32[$96 >> 2] = $T_0;
    $add_ptr17_sum18 = $add_ptr4_sum + 24 | 0;
    $parent361 = $newbase + $add_ptr17_sum18 | 0;
    $97 = $parent361;
    HEAP32[$97 >> 2] = 0;
    label = 81;
    break;
   case 80:
    _abort();
    return 0;
    return 0;
   case 81:
    $add_ptr4_sum1415 = $cond | 8;
    $add_ptr368 = $newbase + $add_ptr4_sum1415 | 0;
    return $add_ptr368 | 0;
  }
  return 0;
}
function _add_segment($tbase, $tsize) {
  $tbase = $tbase | 0;
  $tsize = $tsize | 0;
  var $0 = 0, $1 = 0, $call = 0, $base = 0, $2 = 0, $size = 0, $3 = 0, $add_ptr = 0, $add_ptr_sum = 0, $add_ptr2_sum = 0, $add_ptr3 = 0, $4 = 0, $and = 0, $cmp = 0, $5 = 0, $and6 = 0, $cond = 0, $add_ptr2_sum1 = 0, $add_ptr7 = 0, $add_ptr82 = 0, $add_ptr8 = 0, $cmp9 = 0, $cond13 = 0, $add_ptr14 = 0, $6 = 0, $7 = 0, $sub16 = 0, $head = 0, $8 = 0, $add_ptr2411 = 0, $9 = 0, $10 = 0, $cmp2712 = 0, $add_ptr2413 = 0, $11 = 0, $12 = 0, $13 = 0, $cmp27 = 0, $cmp28 = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $sub_ptr_sub = 0, $add_ptr30 = 0, $add_ptr30_sum = 0, $head31 = 0, $14 = 0, $15 = 0, $and32 = 0, $or33 = 0, $head34 = 0, $prev_foot = 0, $shr = 0, $cmp36 = 0, $shl = 0, $arrayidx = 0, $16 = 0, $17 = 0, $shl39 = 0, $and40 = 0, $tobool = 0, $or44 = 0, $arrayidx_sum9 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $cmp46 = 0, $F_0 = 0, $arrayidx_sum = 0, $22 = 0, $bk = 0, $fd54 = 0, $bk55 = 0, $23 = 0, $shr58 = 0, $cmp59 = 0, $cmp63 = 0, $sub67 = 0, $shr68 = 0, $and69 = 0, $shl70 = 0, $sub71 = 0, $shr72 = 0, $and73 = 0, $add74 = 0, $shl75 = 0, $sub76 = 0, $shr77 = 0, $and78 = 0, $add79 = 0, $sub80 = 0, $shl81 = 0, $shr82 = 0, $add83 = 0, $shl84 = 0, $add85 = 0, $shr86 = 0, $and87 = 0, $add88 = 0, $I57_0 = 0, $arrayidx91 = 0, $index = 0, $I57_0_c = 0, $arrayidx92 = 0, $24 = 0, $25 = 0, $shl95 = 0, $and96 = 0, $tobool97 = 0, $or101 = 0, $parent = 0, $_c = 0, $bk102 = 0, $fd103 = 0, $26 = 0, $cmp106 = 0, $shr110 = 0, $sub113 = 0, $cond115 = 0, $shl116 = 0, $T_0 = 0, $K105_0 = 0, $head118 = 0, $27 = 0, $and119 = 0, $cmp120 = 0, $shr123 = 0, $arrayidx126 = 0, $28 = 0, $cmp128 = 0, $shl127 = 0, $29 = 0, $30 = 0, $cmp133 = 0, $parent138 = 0, $T_0_c6 = 0, $bk139 = 0, $fd140 = 0, $fd145 = 0, $31 = 0, $32 = 0, $33 = 0, $cmp147 = 0, $34 = 0, $cmp150 = 0, $bk155 = 0, $fd157 = 0, $_c5 = 0, $bk158 = 0, $T_0_c = 0, $parent159 = 0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $0 = HEAP32[27923] | 0;
    $1 = $0;
    $call = _segment_holding($1) | 0;
    $base = $call | 0;
    $2 = HEAP32[$base >> 2] | 0;
    $size = $call + 4 | 0;
    $3 = HEAP32[$size >> 2] | 0;
    $add_ptr = $2 + $3 | 0;
    $add_ptr_sum = $3 - 47 | 0;
    $add_ptr2_sum = $3 - 39 | 0;
    $add_ptr3 = $2 + $add_ptr2_sum | 0;
    $4 = $add_ptr3;
    $and = $4 & 7;
    $cmp = ($and | 0) == 0;
    if ($cmp) {
      $cond = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $5 = -$4 | 0;
    $and6 = $5 & 7;
    $cond = $and6;
    label = 4;
    break;
   case 4:
    $add_ptr2_sum1 = $add_ptr_sum + $cond | 0;
    $add_ptr7 = $2 + $add_ptr2_sum1 | 0;
    $add_ptr82 = $0 + 16 | 0;
    $add_ptr8 = $add_ptr82;
    $cmp9 = $add_ptr7 >>> 0 < $add_ptr8 >>> 0;
    $cond13 = $cmp9 ? $1 : $add_ptr7;
    $add_ptr14 = $cond13 + 8 | 0;
    $6 = $add_ptr14;
    $7 = $tbase;
    $sub16 = $tsize - 40 | 0;
    _init_top($7, $sub16);
    $head = $cond13 + 4 | 0;
    $8 = $head;
    HEAP32[$8 >> 2] = 27;
    HEAP32[$add_ptr14 >> 2] = HEAP32[28029] | 0;
    HEAP32[$add_ptr14 + 4 >> 2] = HEAP32[112120 >> 2] | 0;
    HEAP32[$add_ptr14 + 8 >> 2] = HEAP32[112124 >> 2] | 0;
    HEAP32[$add_ptr14 + 12 >> 2] = HEAP32[112128 >> 2] | 0;
    HEAP32[28029] = $tbase;
    HEAP32[28030] = $tsize;
    HEAP32[28032] = 0;
    HEAP32[28031] = $6;
    $add_ptr2411 = $cond13 + 28 | 0;
    $9 = $add_ptr2411;
    HEAP32[$9 >> 2] = 7;
    $10 = $cond13 + 32 | 0;
    $cmp2712 = $10 >>> 0 < $add_ptr >>> 0;
    if ($cmp2712) {
      $add_ptr2413 = $9;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $11 = $add_ptr2413 + 4 | 0;
    HEAP32[$11 >> 2] = 7;
    $12 = $add_ptr2413 + 8 | 0;
    $13 = $12;
    $cmp27 = $13 >>> 0 < $add_ptr >>> 0;
    if ($cmp27) {
      $add_ptr2413 = $11;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $cmp28 = ($cond13 | 0) == ($1 | 0);
    if ($cmp28) {
      label = 30;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $sub_ptr_lhs_cast = $cond13;
    $sub_ptr_rhs_cast = $0;
    $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    $add_ptr30 = $1 + $sub_ptr_sub | 0;
    $add_ptr30_sum = $sub_ptr_sub + 4 | 0;
    $head31 = $1 + $add_ptr30_sum | 0;
    $14 = $head31;
    $15 = HEAP32[$14 >> 2] | 0;
    $and32 = $15 & -2;
    HEAP32[$14 >> 2] = $and32;
    $or33 = $sub_ptr_sub | 1;
    $head34 = $0 + 4 | 0;
    HEAP32[$head34 >> 2] = $or33;
    $prev_foot = $add_ptr30;
    HEAP32[$prev_foot >> 2] = $sub_ptr_sub;
    $shr = $sub_ptr_sub >>> 3;
    $cmp36 = $sub_ptr_sub >>> 0 < 256;
    if ($cmp36) {
      label = 8;
      break;
    } else {
      label = 13;
      break;
    }
   case 8:
    $shl = $shr << 1;
    $arrayidx = 111708 + ($shl << 2) | 0;
    $16 = $arrayidx;
    $17 = HEAP32[27917] | 0;
    $shl39 = 1 << $shr;
    $and40 = $17 & $shl39;
    $tobool = ($and40 | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $or44 = $17 | $shl39;
    HEAP32[27917] = $or44;
    $F_0 = $16;
    label = 12;
    break;
   case 10:
    $arrayidx_sum9 = $shl + 2 | 0;
    $18 = 111708 + ($arrayidx_sum9 << 2) | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $19;
    $21 = HEAP32[27921] | 0;
    $cmp46 = $20 >>> 0 < $21 >>> 0;
    if ($cmp46) {
      label = 11;
      break;
    } else {
      $F_0 = $19;
      label = 12;
      break;
    }
   case 11:
    _abort();
   case 12:
    $arrayidx_sum = $shl + 2 | 0;
    $22 = 111708 + ($arrayidx_sum << 2) | 0;
    HEAP32[$22 >> 2] = $0;
    $bk = $F_0 + 12 | 0;
    HEAP32[$bk >> 2] = $0;
    $fd54 = $0 + 8 | 0;
    HEAP32[$fd54 >> 2] = $F_0;
    $bk55 = $0 + 12 | 0;
    HEAP32[$bk55 >> 2] = $16;
    label = 30;
    break;
   case 13:
    $23 = $0;
    $shr58 = $sub_ptr_sub >>> 8;
    $cmp59 = ($shr58 | 0) == 0;
    if ($cmp59) {
      $I57_0 = 0;
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $cmp63 = $sub_ptr_sub >>> 0 > 16777215;
    if ($cmp63) {
      $I57_0 = 31;
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $sub67 = $shr58 + 1048320 | 0;
    $shr68 = $sub67 >>> 16;
    $and69 = $shr68 & 8;
    $shl70 = $shr58 << $and69;
    $sub71 = $shl70 + 520192 | 0;
    $shr72 = $sub71 >>> 16;
    $and73 = $shr72 & 4;
    $add74 = $and73 | $and69;
    $shl75 = $shl70 << $and73;
    $sub76 = $shl75 + 245760 | 0;
    $shr77 = $sub76 >>> 16;
    $and78 = $shr77 & 2;
    $add79 = $add74 | $and78;
    $sub80 = 14 - $add79 | 0;
    $shl81 = $shl75 << $and78;
    $shr82 = $shl81 >>> 15;
    $add83 = $sub80 + $shr82 | 0;
    $shl84 = $add83 << 1;
    $add85 = $add83 + 7 | 0;
    $shr86 = $sub_ptr_sub >>> ($add85 >>> 0);
    $and87 = $shr86 & 1;
    $add88 = $and87 | $shl84;
    $I57_0 = $add88;
    label = 16;
    break;
   case 16:
    $arrayidx91 = 111972 + ($I57_0 << 2) | 0;
    $index = $0 + 28 | 0;
    $I57_0_c = $I57_0;
    HEAP32[$index >> 2] = $I57_0_c;
    $arrayidx92 = $0 + 20 | 0;
    HEAP32[$arrayidx92 >> 2] = 0;
    $24 = $0 + 16 | 0;
    HEAP32[$24 >> 2] = 0;
    $25 = HEAP32[27918] | 0;
    $shl95 = 1 << $I57_0;
    $and96 = $25 & $shl95;
    $tobool97 = ($and96 | 0) == 0;
    if ($tobool97) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $or101 = $25 | $shl95;
    HEAP32[27918] = $or101;
    HEAP32[$arrayidx91 >> 2] = $23;
    $parent = $0 + 24 | 0;
    $_c = $arrayidx91;
    HEAP32[$parent >> 2] = $_c;
    $bk102 = $0 + 12 | 0;
    HEAP32[$bk102 >> 2] = $0;
    $fd103 = $0 + 8 | 0;
    HEAP32[$fd103 >> 2] = $0;
    label = 30;
    break;
   case 18:
    $26 = HEAP32[$arrayidx91 >> 2] | 0;
    $cmp106 = ($I57_0 | 0) == 31;
    if ($cmp106) {
      $cond115 = 0;
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $shr110 = $I57_0 >>> 1;
    $sub113 = 25 - $shr110 | 0;
    $cond115 = $sub113;
    label = 20;
    break;
   case 20:
    $shl116 = $sub_ptr_sub << $cond115;
    $K105_0 = $shl116;
    $T_0 = $26;
    label = 21;
    break;
   case 21:
    $head118 = $T_0 + 4 | 0;
    $27 = HEAP32[$head118 >> 2] | 0;
    $and119 = $27 & -8;
    $cmp120 = ($and119 | 0) == ($sub_ptr_sub | 0);
    if ($cmp120) {
      label = 26;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $shr123 = $K105_0 >>> 31;
    $arrayidx126 = $T_0 + 16 + ($shr123 << 2) | 0;
    $28 = HEAP32[$arrayidx126 >> 2] | 0;
    $cmp128 = ($28 | 0) == 0;
    $shl127 = $K105_0 << 1;
    if ($cmp128) {
      label = 23;
      break;
    } else {
      $K105_0 = $shl127;
      $T_0 = $28;
      label = 21;
      break;
    }
   case 23:
    $29 = $arrayidx126;
    $30 = HEAP32[27921] | 0;
    $cmp133 = $29 >>> 0 < $30 >>> 0;
    if ($cmp133) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    HEAP32[$arrayidx126 >> 2] = $23;
    $parent138 = $0 + 24 | 0;
    $T_0_c6 = $T_0;
    HEAP32[$parent138 >> 2] = $T_0_c6;
    $bk139 = $0 + 12 | 0;
    HEAP32[$bk139 >> 2] = $0;
    $fd140 = $0 + 8 | 0;
    HEAP32[$fd140 >> 2] = $0;
    label = 30;
    break;
   case 25:
    _abort();
   case 26:
    $fd145 = $T_0 + 8 | 0;
    $31 = HEAP32[$fd145 >> 2] | 0;
    $32 = $T_0;
    $33 = HEAP32[27921] | 0;
    $cmp147 = $32 >>> 0 < $33 >>> 0;
    if ($cmp147) {
      label = 29;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $34 = $31;
    $cmp150 = $34 >>> 0 < $33 >>> 0;
    if ($cmp150) {
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $bk155 = $31 + 12 | 0;
    HEAP32[$bk155 >> 2] = $23;
    HEAP32[$fd145 >> 2] = $23;
    $fd157 = $0 + 8 | 0;
    $_c5 = $31;
    HEAP32[$fd157 >> 2] = $_c5;
    $bk158 = $0 + 12 | 0;
    $T_0_c = $T_0;
    HEAP32[$bk158 >> 2] = $T_0_c;
    $parent159 = $0 + 24 | 0;
    HEAP32[$parent159 >> 2] = 0;
    label = 30;
    break;
   case 29:
    _abort();
   case 30:
    return;
  }
}
function _strtod($string, $endPtr) {
  $string = $string | 0;
  $endPtr = $endPtr | 0;
  var $p_0 = 0, $0 = 0, $conv = 0, $call = 0, $tobool = 0, $add_ptr = 0, $1 = 0, $add_ptr3 = 0, $add_ptr8 = 0, $sign_0 = 0, $p_2 = 0, $p_3 = 0, $mantSize_0 = 0, $decPt_0 = 0, $2 = 0, $conv10 = 0, $isdigittmp = 0, $isdigit = 0, $cmp14 = 0, $cmp16 = 0, $or_cond = 0, $decPt_1 = 0, $add_ptr21 = 0, $add = 0, $idx_neg = 0, $add_ptr22 = 0, $cmp23 = 0, $not_cmp23 = 0, $sub = 0, $mantSize_1 = 0, $decPt_2 = 0, $cmp28 = 0, $3 = 0, $fracExp_0_p = 0, $fracExp_0 = 0, $mantSize_2 = 0, $cmp35 = 0, $cmp4078 = 0, $phitmp = 0.0, $phitmp85 = 0.0, $cmp5673 = 0, $p_4_lcssa91 = 0, $mantSize_3_lcssa90 = 0, $frac1_0_lcssa89 = 0.0, $frac1_081 = 0, $mantSize_380 = 0, $p_479 = 0, $4 = 0, $add_ptr43 = 0, $cmp44 = 0, $5 = 0, $add_ptr48 = 0, $p_5 = 0, $c_0_in = 0, $c_0 = 0, $mul = 0, $sub50 = 0, $add51 = 0, $sub53 = 0, $cmp40 = 0, $frac2_076 = 0, $mantSize_475 = 0, $p_674 = 0, $6 = 0, $add_ptr60 = 0, $cmp61 = 0, $7 = 0, $add_ptr65 = 0, $p_7 = 0, $c_1_in = 0, $c_1 = 0, $mul67 = 0, $sub68 = 0, $add69 = 0, $sub71 = 0, $cmp56 = 0, $phitmp86 = 0.0, $frac1_0_lcssa88 = 0.0, $frac2_0_lcssa = 0.0, $add76 = 0.0, $8 = 0, $add_ptr86 = 0, $9 = 0, $add_ptr91 = 0, $add_ptr97 = 0, $expSign_0_ph = 0, $p_9_ph = 0, $10 = 0, $conv10166 = 0, $isdigittmp6067 = 0, $isdigit6168 = 0, $exp_070 = 0, $p_969 = 0, $mul105 = 0, $11 = 0, $conv106 = 0, $sub107 = 0, $add108 = 0, $add_ptr109 = 0, $12 = 0, $conv101 = 0, $isdigittmp60 = 0, $isdigit61 = 0, $expSign_1 = 0, $p_10 = 0, $exp_1 = 0, $tobool112 = 0, $13 = 0, $exp_2_p = 0, $exp_2 = 0, $cmp118 = 0, $sub121 = 0, $exp_3 = 0, $cmp124 = 0, $call127 = 0, $cmp13062 = 0, $exp_565 = 0, $d_064 = 0, $dblExp_063 = 0.0, $and = 0, $tobool133 = 0, $14 = 0.0, $mul135 = 0.0, $dblExp_1 = 0.0, $shr = 0, $add_ptr138 = 0, $cmp130 = 0, $dblExp_0_lcssa = 0.0, $tobool140 = 0, $div = 0.0, $mul143 = 0.0, $fraction_0 = 0.0, $p_11 = 0, $cmp145 = 0, $tobool149 = 0, $sub151 = 0.0, $retval_0 = 0.0, label = 0;
  label = 2;
  while (1) switch (label | 0) {
   case 2:
    $p_0 = $string;
    label = 3;
    break;
   case 3:
    $0 = HEAP8[$p_0] | 0;
    $conv = $0 << 24 >> 24;
    $call = _isspace($conv | 0) | 0;
    $tobool = ($call | 0) == 0;
    $add_ptr = $p_0 + 1 | 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      $p_0 = $add_ptr;
      label = 3;
      break;
    }
   case 4:
    $1 = HEAP8[$p_0] | 0;
    if (($1 << 24 >> 24 | 0) == 45) {
      label = 5;
      break;
    } else if (($1 << 24 >> 24 | 0) == 43) {
      label = 6;
      break;
    } else {
      $p_2 = $p_0;
      $sign_0 = 0;
      label = 7;
      break;
    }
   case 5:
    $add_ptr3 = $p_0 + 1 | 0;
    $p_2 = $add_ptr3;
    $sign_0 = 1;
    label = 7;
    break;
   case 6:
    $add_ptr8 = $p_0 + 1 | 0;
    $p_2 = $add_ptr8;
    $sign_0 = 0;
    label = 7;
    break;
   case 7:
    $decPt_0 = -1;
    $mantSize_0 = 0;
    $p_3 = $p_2;
    label = 8;
    break;
   case 8:
    $2 = HEAP8[$p_3] | 0;
    $conv10 = $2 << 24 >> 24;
    $isdigittmp = $conv10 - 48 | 0;
    $isdigit = $isdigittmp >>> 0 < 10;
    if ($isdigit) {
      $decPt_1 = $decPt_0;
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $cmp14 = $2 << 24 >> 24 != 46;
    $cmp16 = ($decPt_0 | 0) > -1;
    $or_cond = $cmp14 | $cmp16;
    if ($or_cond) {
      label = 11;
      break;
    } else {
      $decPt_1 = $mantSize_0;
      label = 10;
      break;
    }
   case 10:
    $add_ptr21 = $p_3 + 1 | 0;
    $add = $mantSize_0 + 1 | 0;
    $decPt_0 = $decPt_1;
    $mantSize_0 = $add;
    $p_3 = $add_ptr21;
    label = 8;
    break;
   case 11:
    $idx_neg = -$mantSize_0 | 0;
    $add_ptr22 = $p_3 + $idx_neg | 0;
    $cmp23 = ($decPt_0 | 0) < 0;
    $not_cmp23 = $cmp23 ^ 1;
    $sub = $not_cmp23 << 31 >> 31;
    $mantSize_1 = $sub + $mantSize_0 | 0;
    $decPt_2 = $cmp23 ? $mantSize_0 : $decPt_0;
    $cmp28 = ($mantSize_1 | 0) > 18;
    $3 = -$mantSize_1 | 0;
    $fracExp_0_p = $cmp28 ? -18 : $3;
    $fracExp_0 = $fracExp_0_p + $decPt_2 | 0;
    $mantSize_2 = $cmp28 ? 18 : $mantSize_1;
    $cmp35 = ($mantSize_2 | 0) == 0;
    if ($cmp35) {
      $p_11 = $string;
      $fraction_0 = 0.0;
      label = 38;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $cmp4078 = ($mantSize_2 | 0) > 9;
    if ($cmp4078) {
      $p_479 = $add_ptr22;
      $mantSize_380 = $mantSize_2;
      $frac1_081 = 0;
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $phitmp = +($add51 | 0);
    $phitmp85 = $phitmp * 1.0e9;
    $frac1_0_lcssa89 = $phitmp85;
    $mantSize_3_lcssa90 = 9;
    $p_4_lcssa91 = $p_5;
    label = 15;
    break;
   case 14:
    $cmp5673 = ($mantSize_2 | 0) > 0;
    if ($cmp5673) {
      $frac1_0_lcssa89 = 0.0;
      $mantSize_3_lcssa90 = $mantSize_2;
      $p_4_lcssa91 = $add_ptr22;
      label = 15;
      break;
    } else {
      $frac2_0_lcssa = 0.0;
      $frac1_0_lcssa88 = 0.0;
      label = 23;
      break;
    }
   case 15:
    $p_674 = $p_4_lcssa91;
    $mantSize_475 = $mantSize_3_lcssa90;
    $frac2_076 = 0;
    label = 19;
    break;
   case 16:
    $4 = HEAP8[$p_479] | 0;
    $add_ptr43 = $p_479 + 1 | 0;
    $cmp44 = $4 << 24 >> 24 == 46;
    if ($cmp44) {
      label = 17;
      break;
    } else {
      $c_0_in = $4;
      $p_5 = $add_ptr43;
      label = 18;
      break;
    }
   case 17:
    $5 = HEAP8[$add_ptr43] | 0;
    $add_ptr48 = $p_479 + 2 | 0;
    $c_0_in = $5;
    $p_5 = $add_ptr48;
    label = 18;
    break;
   case 18:
    $c_0 = $c_0_in << 24 >> 24;
    $mul = $frac1_081 * 10 & -1;
    $sub50 = $mul - 48 | 0;
    $add51 = $sub50 + $c_0 | 0;
    $sub53 = $mantSize_380 - 1 | 0;
    $cmp40 = ($sub53 | 0) > 9;
    if ($cmp40) {
      $p_479 = $p_5;
      $mantSize_380 = $sub53;
      $frac1_081 = $add51;
      label = 16;
      break;
    } else {
      label = 13;
      break;
    }
   case 19:
    $6 = HEAP8[$p_674] | 0;
    $add_ptr60 = $p_674 + 1 | 0;
    $cmp61 = $6 << 24 >> 24 == 46;
    if ($cmp61) {
      label = 20;
      break;
    } else {
      $c_1_in = $6;
      $p_7 = $add_ptr60;
      label = 21;
      break;
    }
   case 20:
    $7 = HEAP8[$add_ptr60] | 0;
    $add_ptr65 = $p_674 + 2 | 0;
    $c_1_in = $7;
    $p_7 = $add_ptr65;
    label = 21;
    break;
   case 21:
    $c_1 = $c_1_in << 24 >> 24;
    $mul67 = $frac2_076 * 10 & -1;
    $sub68 = $mul67 - 48 | 0;
    $add69 = $sub68 + $c_1 | 0;
    $sub71 = $mantSize_475 - 1 | 0;
    $cmp56 = ($sub71 | 0) > 0;
    if ($cmp56) {
      $p_674 = $p_7;
      $mantSize_475 = $sub71;
      $frac2_076 = $add69;
      label = 19;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $phitmp86 = +($add69 | 0);
    $frac2_0_lcssa = $phitmp86;
    $frac1_0_lcssa88 = $frac1_0_lcssa89;
    label = 23;
    break;
   case 23:
    $add76 = $frac1_0_lcssa88 + $frac2_0_lcssa;
    $8 = HEAP8[$p_3] | 0;
    if (($8 << 24 >> 24 | 0) == 69 | ($8 << 24 >> 24 | 0) == 101) {
      label = 24;
      break;
    } else {
      $exp_1 = 0;
      $p_10 = $p_3;
      $expSign_1 = 0;
      label = 29;
      break;
    }
   case 24:
    $add_ptr86 = $p_3 + 1 | 0;
    $9 = HEAP8[$add_ptr86] | 0;
    if (($9 << 24 >> 24 | 0) == 45) {
      label = 25;
      break;
    } else if (($9 << 24 >> 24 | 0) == 43) {
      label = 26;
      break;
    } else {
      $p_9_ph = $add_ptr86;
      $expSign_0_ph = 0;
      label = 27;
      break;
    }
   case 25:
    $add_ptr91 = $p_3 + 2 | 0;
    $p_9_ph = $add_ptr91;
    $expSign_0_ph = 1;
    label = 27;
    break;
   case 26:
    $add_ptr97 = $p_3 + 2 | 0;
    $p_9_ph = $add_ptr97;
    $expSign_0_ph = 0;
    label = 27;
    break;
   case 27:
    $10 = HEAP8[$p_9_ph] | 0;
    $conv10166 = $10 << 24 >> 24;
    $isdigittmp6067 = $conv10166 - 48 | 0;
    $isdigit6168 = $isdigittmp6067 >>> 0 < 10;
    if ($isdigit6168) {
      $p_969 = $p_9_ph;
      $exp_070 = 0;
      label = 28;
      break;
    } else {
      $exp_1 = 0;
      $p_10 = $p_9_ph;
      $expSign_1 = $expSign_0_ph;
      label = 29;
      break;
    }
   case 28:
    $mul105 = $exp_070 * 10 & -1;
    $11 = HEAP8[$p_969] | 0;
    $conv106 = $11 << 24 >> 24;
    $sub107 = $mul105 - 48 | 0;
    $add108 = $sub107 + $conv106 | 0;
    $add_ptr109 = $p_969 + 1 | 0;
    $12 = HEAP8[$add_ptr109] | 0;
    $conv101 = $12 << 24 >> 24;
    $isdigittmp60 = $conv101 - 48 | 0;
    $isdigit61 = $isdigittmp60 >>> 0 < 10;
    if ($isdigit61) {
      $p_969 = $add_ptr109;
      $exp_070 = $add108;
      label = 28;
      break;
    } else {
      $exp_1 = $add108;
      $p_10 = $add_ptr109;
      $expSign_1 = $expSign_0_ph;
      label = 29;
      break;
    }
   case 29:
    $tobool112 = ($expSign_1 | 0) == 0;
    $13 = -$exp_1 | 0;
    $exp_2_p = $tobool112 ? $exp_1 : $13;
    $exp_2 = $fracExp_0 + $exp_2_p | 0;
    $cmp118 = ($exp_2 | 0) < 0;
    $sub121 = -$exp_2 | 0;
    $exp_3 = $cmp118 ? $sub121 : $exp_2;
    $cmp124 = ($exp_3 | 0) > 511;
    if ($cmp124) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    $call127 = ___errno_location() | 0;
    HEAP32[$call127 >> 2] = 34;
    $dblExp_063 = 1.0;
    $d_064 = 61032;
    $exp_565 = 511;
    label = 32;
    break;
   case 31:
    $cmp13062 = ($exp_3 | 0) == 0;
    if ($cmp13062) {
      $dblExp_0_lcssa = 1.0;
      label = 35;
      break;
    } else {
      $dblExp_063 = 1.0;
      $d_064 = 61032;
      $exp_565 = $exp_3;
      label = 32;
      break;
    }
   case 32:
    $and = $exp_565 & 1;
    $tobool133 = ($and | 0) == 0;
    if ($tobool133) {
      $dblExp_1 = $dblExp_063;
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$d_064 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$d_064 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $mul135 = $dblExp_063 * $14;
    $dblExp_1 = $mul135;
    label = 34;
    break;
   case 34:
    $shr = $exp_565 >> 1;
    $add_ptr138 = $d_064 + 8 | 0;
    $cmp130 = ($shr | 0) == 0;
    if ($cmp130) {
      $dblExp_0_lcssa = $dblExp_1;
      label = 35;
      break;
    } else {
      $dblExp_063 = $dblExp_1;
      $d_064 = $add_ptr138;
      $exp_565 = $shr;
      label = 32;
      break;
    }
   case 35:
    $tobool140 = ($exp_2 | 0) > -1;
    if ($tobool140) {
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    $div = $add76 / $dblExp_0_lcssa;
    $p_11 = $p_10;
    $fraction_0 = $div;
    label = 38;
    break;
   case 37:
    $mul143 = $add76 * $dblExp_0_lcssa;
    $p_11 = $p_10;
    $fraction_0 = $mul143;
    label = 38;
    break;
   case 38:
    $cmp145 = ($endPtr | 0) == 0;
    if ($cmp145) {
      label = 40;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    HEAP32[$endPtr >> 2] = $p_11;
    label = 40;
    break;
   case 40:
    $tobool149 = ($sign_0 | 0) == 0;
    if ($tobool149) {
      $retval_0 = $fraction_0;
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    $sub151 = -0.0 - $fraction_0;
    $retval_0 = $sub151;
    label = 42;
    break;
   case 42:
    return +$retval_0;
  }
  return 0.0;
}
function _memcpy(dest, src, num) {
  dest = dest | 0;
  src = src | 0;
  num = num | 0;
  var ret = 0;
  ret = dest | 0;
  if ((dest & 3) == (src & 3)) {
    while (dest & 3) {
      if ((num | 0) == 0) return ret | 0;
      HEAP8[dest] = HEAP8[src] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
      num = num - 1 | 0;
    }
    while ((num | 0) >= 4) {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
      num = num - 4 | 0;
    }
  }
  while ((num | 0) > 0) {
    HEAP8[dest] = HEAP8[src] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
    num = num - 1 | 0;
  }
  return ret | 0;
}
function _memcmp(p1, p2, num) {
  p1 = p1 | 0;
  p2 = p2 | 0;
  num = num | 0;
  var i = 0, v1 = 0, v2 = 0;
  while ((i | 0) < (num | 0)) {
    v1 = HEAPU8[p1 + i | 0] | 0;
    v2 = HEAPU8[p2 + i | 0] | 0;
    if ((v1 | 0) != (v2 | 0)) return ((v1 | 0) > (v2 | 0) ? 1 : -1) | 0;
    i = i + 1 | 0;
  }
  return 0;
}
function _strlen(ptr) {
  ptr = ptr | 0;
  var curr = 0;
  curr = ptr;
  while (HEAP8[curr] | 0) {
    curr = curr + 1 | 0;
  }
  return curr - ptr | 0;
}
function _tolower(chr) {
  chr = chr | 0;
  if ((chr | 0) < 65) return chr | 0;
  if ((chr | 0) > 90) return chr | 0;
  return chr - 65 + 97 | 0;
}
function _saveSetjmp(env, label, table) {
  env = env | 0;
  label = label | 0;
  table = table | 0;
  var i = 0;
  setjmpId = setjmpId + 1 | 0;
  HEAP32[env >> 2] = setjmpId;
  while ((i | 0) < 40) {
    if ((HEAP32[table + i * 4 >> 2] | 0) == 0) {
      HEAP32[table + i * 4 >> 2] = setjmpId;
      HEAP32[table + (i * 4 + 4) >> 2] = label;
      HEAP32[table + (i * 4 + 8) >> 2] = 0;
      return 0;
    }
    i = i + 2 | 0;
  }
  _putchar(116);
  _putchar(111);
  _putchar(111);
  _putchar(32);
  _putchar(109);
  _putchar(97);
  _putchar(110);
  _putchar(121);
  _putchar(32);
  _putchar(115);
  _putchar(101);
  _putchar(116);
  _putchar(106);
  _putchar(109);
  _putchar(112);
  _putchar(115);
  _putchar(32);
  _putchar(105);
  _putchar(110);
  _putchar(32);
  _putchar(97);
  _putchar(32);
  _putchar(102);
  _putchar(117);
  _putchar(110);
  _putchar(99);
  _putchar(116);
  _putchar(105);
  _putchar(111);
  _putchar(110);
  _putchar(32);
  _putchar(99);
  _putchar(97);
  _putchar(108);
  _putchar(108);
  _putchar(44);
  _putchar(32);
  _putchar(98);
  _putchar(117);
  _putchar(105);
  _putchar(108);
  _putchar(100);
  _putchar(32);
  _putchar(119);
  _putchar(105);
  _putchar(116);
  _putchar(104);
  _putchar(32);
  _putchar(97);
  _putchar(32);
  _putchar(104);
  _putchar(105);
  _putchar(103);
  _putchar(104);
  _putchar(101);
  _putchar(114);
  _putchar(32);
  _putchar(118);
  _putchar(97);
  _putchar(108);
  _putchar(117);
  _putchar(101);
  _putchar(32);
  _putchar(102);
  _putchar(111);
  _putchar(114);
  _putchar(32);
  _putchar(77);
  _putchar(65);
  _putchar(88);
  _putchar(95);
  _putchar(83);
  _putchar(69);
  _putchar(84);
  _putchar(74);
  _putchar(77);
  _putchar(80);
  _putchar(83);
  _putchar(10);
  abort(0);
  return 0;
}
function _testSetjmp(id, table) {
  id = id | 0;
  table = table | 0;
  var i = 0, curr = 0;
  while ((i | 0) < 20) {
    curr = HEAP32[table + i * 4 >> 2] | 0;
    if ((curr | 0) == 0) break;
    if ((curr | 0) == (id | 0)) {
      return HEAP32[table + (i * 4 + 4) >> 2] | 0;
    }
    i = i + 2 | 0;
  }
  return 0;
}
function _memset(ptr, value, num) {
  ptr = ptr | 0;
  value = value | 0;
  num = num | 0;
  var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
  stop = ptr + num | 0;
  if ((num | 0) >= 20) {
    value = value & 255;
    unaligned = ptr & 3;
    value4 = value | value << 8 | value << 16 | value << 24;
    stop4 = stop & ~3;
    if (unaligned) {
      unaligned = ptr + 4 - unaligned | 0;
      while ((ptr | 0) < (unaligned | 0)) {
        HEAP8[ptr] = value;
        ptr = ptr + 1 | 0;
      }
    }
    while ((ptr | 0) < (stop4 | 0)) {
      HEAP32[ptr >> 2] = value4;
      ptr = ptr + 4 | 0;
    }
  }
  while ((ptr | 0) < (stop | 0)) {
    HEAP8[ptr] = value;
    ptr = ptr + 1 | 0;
  }
}
function _longjmp__wrapper(a1, a2) {
  a1 = a1 | 0;
  a2 = a2 | 0;
  _longjmp(a1 | 0, a2 | 0);
}
function _printf__wrapper(a1, a2) {
  a1 = a1 | 0;
  a2 = a2 | 0;
  return _printf(a1 | 0, a2 | 0) | 0;
}
function dynCall_ii(index, a1) {
  index = index | 0;
  a1 = a1 | 0;
  return FUNCTION_TABLE_ii[index & 1023](a1 | 0) | 0;
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
  index = index | 0;
  a1 = a1 | 0;
  a2 = a2 | 0;
  a3 = a3 | 0;
  a4 = a4 | 0;
  a5 = a5 | 0;
  FUNCTION_TABLE_viiiii[index & 1023](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function dynCall_vi(index, a1) {
  index = index | 0;
  a1 = a1 | 0;
  FUNCTION_TABLE_vi[index & 1023](a1 | 0);
}
function dynCall_vii(index, a1, a2) {
  index = index | 0;
  a1 = a1 | 0;
  a2 = a2 | 0;
  FUNCTION_TABLE_vii[index & 1023](a1 | 0, a2 | 0);
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
  index = index | 0;
  a1 = a1 | 0;
  a2 = a2 | 0;
  a3 = a3 | 0;
  a4 = a4 | 0;
  return FUNCTION_TABLE_iiiii[index & 1023](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}
function dynCall_iiii(index, a1, a2, a3) {
  index = index | 0;
  a1 = a1 | 0;
  a2 = a2 | 0;
  a3 = a3 | 0;
  return FUNCTION_TABLE_iiii[index & 1023](a1 | 0, a2 | 0, a3 | 0) | 0;
}
function dynCall_viii(index, a1, a2, a3) {
  index = index | 0;
  a1 = a1 | 0;
  a2 = a2 | 0;
  a3 = a3 | 0;
  FUNCTION_TABLE_viii[index & 1023](a1 | 0, a2 | 0, a3 | 0);
}
function dynCall_v(index) {
  index = index | 0;
  FUNCTION_TABLE_v[index & 1023]();
}
function dynCall_viiii(index, a1, a2, a3, a4) {
  index = index | 0;
  a1 = a1 | 0;
  a2 = a2 | 0;
  a3 = a3 | 0;
  a4 = a4 | 0;
  FUNCTION_TABLE_viiii[index & 1023](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function dynCall_iii(index, a1, a2) {
  index = index | 0;
  a1 = a1 | 0;
  a2 = a2 | 0;
  return FUNCTION_TABLE_iii[index & 1023](a1 | 0, a2 | 0) | 0;
}
function dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
  index = index | 0;
  a1 = a1 | 0;
  a2 = a2 | 0;
  a3 = a3 | 0;
  a4 = a4 | 0;
  a5 = a5 | 0;
  a6 = a6 | 0;
  a7 = a7 | 0;
  FUNCTION_TABLE_viiiiiii[index & 1023](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0);
}
function b0(p0) {
  p0 = p0 | 0;
  abort(0);
  return 0;
}
function b1(p0, p1, p2, p3, p4) {
  p0 = p0 | 0;
  p1 = p1 | 0;
  p2 = p2 | 0;
  p3 = p3 | 0;
  p4 = p4 | 0;
  abort(1);
}
function b2(p0) {
  p0 = p0 | 0;
  abort(2);
}
function b3(p0, p1) {
  p0 = p0 | 0;
  p1 = p1 | 0;
  abort(3);
}
function b4(p0, p1, p2, p3) {
  p0 = p0 | 0;
  p1 = p1 | 0;
  p2 = p2 | 0;
  p3 = p3 | 0;
  abort(4);
  return 0;
}
function b5(p0, p1, p2) {
  p0 = p0 | 0;
  p1 = p1 | 0;
  p2 = p2 | 0;
  abort(5);
  return 0;
}
function b6(p0, p1, p2) {
  p0 = p0 | 0;
  p1 = p1 | 0;
  p2 = p2 | 0;
  abort(6);
}
function b7() {
  abort(7);
}
function b8(p0, p1, p2, p3) {
  p0 = p0 | 0;
  p1 = p1 | 0;
  p2 = p2 | 0;
  p3 = p3 | 0;
  abort(8);
}
function b9(p0, p1) {
  p0 = p0 | 0;
  p1 = p1 | 0;
  abort(9);
  return 0;
}
function b10(p0, p1, p2, p3, p4, p5, p6) {
  p0 = p0 | 0;
  p1 = p1 | 0;
  p2 = p2 | 0;
  p3 = p3 | 0;
  p4 = p4 | 0;
  p5 = p5 | 0;
  p6 = p6 | 0;
  abort(10);
}
// EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_ii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,_mrb_gc_arena_save,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,_new_nil,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,_yyparse,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_cipush,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,_mrb_exc_new,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_mrb_range_new,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_vi = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,_mrb_nil_value148,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,_mrb_pool_close,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,_cipop
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,_stack_init,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_vii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,_mrb_time_free,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,_mruby_js_object_handle_free,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,_mrb_write_barrier,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,_parser_update_cxt,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,_localjump_error,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,_mrb_symbol_value145,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,_mrb_gc_protect
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,_mrb_fixnum_value144,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,_ecall
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,_argnum_error
  ,b3,b3,b3,_parser_init_cxt,b3,b3,b3,_mrb_obj_value143,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,_longjmp__wrapper,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,_mrb_free
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,_yyerror,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,_mrb_voidp_value,b3,b3,b3,_mrb_gc_arena_restore,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_iiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,_mrb_vm_define_class,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,_iv_i,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,_cv_i,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,_iv_mark_i
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,_gv_i,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,_allocf,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,_inspect_i
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,_csym_i
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_const_i,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_iiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,_mrb_intern2
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,_scope_new,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,_mrb_method_search_vm
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,_mrb_vm_define_module,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,_mrb_realloc
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_mrb_obj_eq,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_viii = [b6,b6,_mrb_mod_undef,b6,_mrb_ary_cmp,b6,b6,b6,_mrb_struct_aref,b6,_mrb_bob_missing
  ,b6,_mrb_str_capitalize_bang,b6,_mrb_mod_remove_cvar,b6,_math_log10,b6,_mrb_time_plus,b6,_mrb_f_global_variables
  ,b6,_mrb_ary_assoc,b6,_mrb_hash_aset,b6,_fix_mul,b6,_mrb_str_bytesize,b6,_mrb_struct_init_copy
  ,b6,_mrb_ary_equal,b6,_mrb_hash_to_hash,b6,_math_hypot,b6,b6,b6,_flo_mul
  ,b6,_mrb_array_tojs,b6,_mrb_ary_inspect,b6,_mrb_hash_set_default,b6,_fix_and,b6,_mrb_range_cover
  ,b6,_mrb_hash_equal,b6,_mrb_mod_include_p,b6,_mrb_ary_reverse_bang,b6,_mrb_time_gm,b6,_sym_cmp
  ,b6,_mrb_str_to_s,b6,_mrb_obj_clone,b6,_num_pow,b6,_mrb_f_raise,b6,_mrb_str_to_f
  ,b6,_mrb_str_to_i,b6,_mrb_ary_times,b6,_mrb_printstr,b6,_num_uplus,b6,_mrb_range_each
  ,b6,b6,b6,_nil_inspect,b6,b6,b6,_num_abs,b6,_fiber_yield
  ,b6,_mrb_obj_ivar_get,b6,_mrb_ary_concat,b6,b6,b6,b6,b6,b6
  ,b6,_math_erfc,b6,_mrb_mod_included_modules,b6,_range_eql,b6,_mrb_proc_init_copy,b6,_mrb_proc_lambda
  ,b6,_mrb_hash_values,b6,b6,b6,_mrb_ary_delete_at,b6,_mrb_ary_eql,b6,_mrb_js_obj_get
  ,b6,_mrb_range_beg,b6,_gc_disable,b6,_mrb_hash_default,b6,b6,b6,_gc_interval_ratio_get
  ,b6,_mrb_mod_constants,b6,b6,b6,_mrb_obj_not_equal_m,b6,_math_frexp,b6,_mrb_hash_keys
  ,b6,_num_eql,b6,_mrb_range_excl,b6,_mrb_time_dstp,b6,_mrb_kernel_proc,b6,_mrb_f_block_given_p_m
  ,b6,_mrb_str_empty_p,b6,_exc_to_s,b6,_mrb_str_concat2,b6,_fix_rev,b6,_mrb_time_initialize_copy
  ,b6,b6,b6,_mrb_time_minus,b6,_mrb_str_reverse,b6,_math_ldexp,b6,_math_log
  ,b6,_mrb_str_chomp_bang,b6,b6,b6,_mrb_proc_initialize,b6,_mrb_time_initialize,b6,b6
  ,b6,b6,b6,_mrb_time_min,b6,b6,b6,_math_sin,b6,_mrb_ary_rindex_m
  ,b6,_math_asinh,b6,_flo_eq,b6,_math_atan2,b6,b6,b6,_mrb_time_mday
  ,b6,_mrb_mod_instance_methods,b6,_mrb_hash_new_capa,b6,_math_cosh,b6,b6,b6,_mrb_obj_hash
  ,b6,_math_acosh,b6,_mrb_range_include,b6,_stack_copy,b6,b6,b6,_mrb_str_capitalize
  ,b6,_mrb_mod_remove_const,b6,b6,b6,_mrb_range_first,b6,_false_to_s,b6,_gc_generational_mode_get
  ,b6,_mrb_obj_equal_m,b6,_mrb_str_times,b6,_mrb_vm_special_get,b6,b6,b6,_range_to_s
  ,b6,_mrb_time_getlocal,b6,_mod_define_method,b6,_math_tan,b6,_fix_or,b6,_flo_plus
  ,b6,_mrb_obj_singleton_methods_m,b6,_mrb_struct_eql,b6,b6,b6,_mrb_hash_inspect,b6,b6
  ,b6,b6,b6,_mrb_struct_ref,b6,_mrb_time_asctime,b6,_mrb_str_chop,b6,_exc_equal
  ,b6,_mrb_mod_module_eval,b6,_mrb_f_sprintf,b6,_fiber_resume,b6,_mrb_struct_initialize_m,b6,_flo_infinite_p
  ,b6,b6,b6,_mrb_obj_ivar_set,b6,_mrb_hash_replace,b6,_math_exp,b6,_mrb_mod_append_features
  ,b6,_math_cbrt,b6,_fix_mod,b6,_mrb_time_to_f,b6,b6,b6,b6
  ,b6,_fiber_init,b6,_mrb_str_start_with,b6,_range_inspect,b6,_math_cos,b6,_mrb_str_reverse_bang
  ,b6,b6,b6,_mrb_mod_remove_method,b6,b6,b6,_mrb_str_swapcase,b6,_gc_interval_ratio_set
  ,b6,_gc_start,b6,_mrb_range_last,b6,b6,b6,_mrb_ary_join_m,b6,_mrb_vm_iv_get
  ,b6,_flo_hash,b6,_mrb_ary_size,b6,_math_sqrt,b6,b6,b6,_mrb_hash_default_proc
  ,b6,_mrb_random_srand,b6,_exc_inspect,b6,_math_tanh,b6,_mrb_str_intern,b6,_false_xor
  ,b6,_mrb_mod_method_defined,b6,_mrb_time_getutc,b6,_mrb_ary_s_try_convert,b6,_obj_is_instance_of,b6,b6
  ,b6,_mrb_ary_s_create,b6,_mrb_time_yday,b6,_mrb_random_g_rand,b6,_mrb_obj_methods_m,b6,b6
  ,b6,_mrb_str_include,b6,_mrb_str_init,b6,_num_cmp,b6,_mrb_ary_push,b6,_mrb_str_downcase
  ,b6,_fix_equal,b6,_fix_xor,b6,_mrb_struct_set_m,b6,b6,b6,b6
  ,b6,_mrb_str_index_m,b6,_mrb_struct_ref8,b6,_mrb_struct_ref9,b6,_mrb_struct_ref6,b6,_mrb_struct_ref7
  ,b6,_codegen,b6,_mrb_struct_ref5,b6,_mrb_struct_ref2,b6,_mrb_struct_ref3,b6,_mrb_struct_ref0
  ,b6,_mrb_str_split_m,b6,_mrb_time_zone,b6,_mrb_random_rand,b6,b6,b6,_true_xor
  ,b6,_mrb_gv_set,b6,_mrb_ary_push_m,b6,_fix_uminus,b6,_exc_message,b6,_mrb_time_day
  ,b6,_mrb_ary_plus,b6,_proc_lambda,b6,_gc_generational_mode_set,b6,b6,b6,_mrb_time_eq
  ,b6,_mrb_time_cmp,b6,_mrb_struct_inspect,b6,_mrb_obj_ivar_defined,b6,_mrb_mod_ancestors,b6,_fix_divmod
  ,b6,_mrb_time_year,b6,b6,b6,_mrb_js_obj_create,b6,_math_atan,b6,_mrb_str_rindex_m
  ,b6,_math_erf,b6,_fix_to_s,b6,_fix_minus,b6,_mrb_class_new_class,b6,_mrb_range_initialize
  ,b6,_mrb_mod_eqq,b6,_mrb_bob_not,b6,_mrb_str_concat,b6,_fix_to_f,b6,_mrb_ary_empty_p
  ,b6,_mrb_any_to_s,b6,_mrb_vm_cv_get,b6,_gc_step_ratio_get,b6,_mrb_mod_const_set,b6,_mrb_proc_source_location
  ,b6,_mrb_str_upcase_bang,b6,b6,b6,_mrb_hash_clear,b6,_num_div,b6,b6
  ,b6,_mrb_hash_has_key,b6,_value_move,b6,b6,b6,_mrb_bob_init,b6,_mrb_time_to_i
  ,b6,_mrb_vm_const_set,b6,_mrb_js_get_root_object,b6,b6,b6,_mrb_vm_cv_set,b6,_mrb_str_bytes
  ,b6,_f_eval,b6,_mrb_random_g_srand,b6,_mrb_proc_inspect,b6,_mrb_time_utcp,b6,b6
  ,b6,_int_to_i,b6,b6,b6,_mrb_ary_shift,b6,b6,b6,_mrb_time_at
  ,b6,_mrb_time_local,b6,_mrb_mod_cvar_get,b6,_mrb_hash_set_default_proc,b6,_mrb_ary_concat_m,b6,_mrb_ary_reverse
  ,b6,_mrb_hash_shift,b6,_mrb_random_init,b6,b6,b6,_mrb_obj_dup,b6,_noregexp
  ,b6,_mrb_time_sec,b6,_mrb_str_cmp_m,b6,_mrb_obj_instance_eval,b6,_mrb_hash_init_core,b6,_mrb_false
  ,b6,_mrb_hash_has_value,b6,_mrb_vm_const_get,b6,_mrb_ary_at,b6,_mrb_str_upcase,b6,_flo_floor
  ,b6,_mrb_obj_extend_m,b6,_mrb_ary_pop,b6,_flo_finite_p,b6,b6,b6,_mrb_ary_new_capa
  ,b6,_mrb_mod_cvar_defined,b6,_nil_to_s,b6,_math_acos,b6,_num_uminus,b6,_mrb_ary_splat
  ,b6,_mrb_sym_all_symbols,b6,_mrb_js_func_invoke_internal,b6,_mrb_obj_public_methods,b6,_mrb_time_now,b6,_mrb_obj_instance_variables
  ,b6,_mrb_struct_ref4,b6,_mrb_mod_cvar_set,b6,_mrb_ary_index_m,b6,_mrb_true,b6,_mrb_str_hash_m
  ,b6,_mrb_struct_ref1,b6,_flo_minus,b6,_mrb_struct_s_def,b6,_mrb_int_chr,b6,_mrb_ary_replace_m
  ,b6,_mrb_struct_s_members_m,b6,_mrb_ary_rassoc,b6,_int_succ,b6,_mrb_str_getbyte,b6,_mrb_str_replace
  ,b6,_stack_extend,b6,_mrb_ary_aget,b6,_mrb_time_wday,b6,_mrb_obj_remove_instance_variable,b6,_mrb_obj_init_copy
  ,b6,_mrb_obj_inspect,b6,b6,b6,_flo_to_f,b6,_inspect_main,b6,_flo_to_s
  ,b6,_mrb_ary_unshift_m,b6,_math_sinh,b6,_mrb_str_inspect,b6,b6,b6,_mrb_mod_to_s
  ,b6,_mrb_f_send,b6,_mrb_str_literal,b6,_exc_exception,b6,_flo_round,b6,_mrb_str_plus_m
  ,b6,_mrb_str_size,b6,b6,b6,_flo_truncate,b6,_mrb_obj_id_m,b6,b6
  ,b6,_true_to_s,b6,b6,b6,_mrb_time_utc,b6,_mrb_singleton_class,b6,_fix_rshift
  ,b6,_mrb_str_dump,b6,_mrb_hash_empty_p,b6,_exc_initialize,b6,_mrb_gv_get,b6,_mrb_js_array_create
  ,b6,_mrb_mod_include,b6,_mrb_str_swapcase_bang,b6,_mrb_js_obj_initialize,b6,_flo_ceil,b6,_mrb_mod_alias
  ,b6,b6,b6,_fix_lshift,b6,_mrb_str_equal_m,b6,_mrb_ary_clear,b6,_mrb_obj_class_m
  ,b6,_mrb_range_end,b6,_mrb_instance_new,b6,_math_atanh,b6,_true_or,b6,_mrb_str_aref_m
  ,b6,_sym_equal,b6,_mrb_obj_protected_methods,b6,_mrb_sym_to_s,b6,_math_asin,b6,_flo_mod
  ,b6,_mrb_mod_const_defined,b6,b6,b6,b6,b6,_mrb_equal_m,b6,b6
  ,b6,_mrb_struct_aset,b6,b6,b6,_mrb_mod_s_constants,b6,_mrb_time_usec,b6,_mrb_proc_arity
  ,b6,_gc_enable,b6,b6,b6,_os_count_objects,b6,_mrb_mod_extend_object,b6,_false_and
  ,b6,_fix_succ,b6,_true_and,b6,_gc_step_ratio_set,b6,_mrb_vm_iv_set,b6,_hash_values_at
  ,b6,_os_count_object_type,b6,_mrb_range_eq,b6,_false_or,b6,b6,b6,_fix_plus
  ,b6,b6,b6,_mrb_str_downcase_bang,b6,_mrb_time_hour,b6,b6,b6,b6
  ,b6,_mrb_ary_last,b6,_mrb_obj_is_kind_of_m,b6,_mrb_class_superclass,b6,_mrb_mod_const_get,b6,_mrb_hash_aget
  ,b6,_mrb_hash_size_m,b6,_mrb_str_chop_bang,b6,_mrb_struct_equal,b6,b6,b6,_mrb_ary_aset
  ,b6,_sym_inspect,b6,_mrb_str_chomp,b6,_mrb_js_obj_set,b6,_obj_respond_to,b6,_mrb_obj_private_methods
  ,b6,_mrb_str_end_with,b6,_mrb_hash_eql,b6,_math_log2,b6,_mrb_hash_delete,b6,_mrb_str_eql
  ,b6,b6,b6,_parser_dump,b6,_mrb_struct_members_m,b6,_range_initialize_copy,b6,_mrb_mod_class_variables
  ,b6,b6,b6,_mrb_ary_first,b6,_mrb_time_mon,b6,_mrb_time_localtime,b6,_sym_to_sym,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_v = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_viiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,_mrb_obj_iv_ifnone,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,_mrb_ary_unshift,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,_mrb_const_set,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,_mrb_raisef,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,_mrb_define_method_vm,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,_mrb_run,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,_mrb_str_new,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,_mrb_exc_new3,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,_mrb_ary_new_from_values,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,_mrb_hash_set,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,_mrb_ary_set,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,_mrb_str_plus,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,_mrb_ary_ref,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_mrb_const_get,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
  var FUNCTION_TABLE_iii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,_mrb_class_get,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,_mrb_proc_new,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,_uvenv,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,_mrb_closure_new,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,_mrb_class,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,_top_env,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_printf__wrapper,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
  var FUNCTION_TABLE_viiiiiii = [b10,b10,b10,b10,b10,b10,_mrb_funcall_with_block,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10];
  return { _strlen: _strlen, _mruby_js_invoke_fetch_argp: _mruby_js_invoke_fetch_argp, _webruby_internal_run_source: _webruby_internal_run_source, _mruby_js_set_float: _mruby_js_set_float, _mruby_js_invoke_alloc_argv: _mruby_js_invoke_alloc_argv, _mruby_js_get_hash_handle: _mruby_js_get_hash_handle, _mrb_close: _mrb_close, _memcmp: _memcmp, _mruby_js_set_string: _mruby_js_set_string, _mruby_js_get_float: _mruby_js_get_float, _mruby_js_get_string_len: _mruby_js_get_string_len, _memset: _memset, _memcpy: _memcpy, _mruby_js_get_array_handle: _mruby_js_get_array_handle, _webruby_internal_run_bytecode: _webruby_internal_run_bytecode, _mruby_js_name_error: _mruby_js_name_error, _mruby_js_invoke_proc: _mruby_js_invoke_proc, _mruby_js_get_object_handle: _mruby_js_get_object_handle, _mruby_js_convert_symbol_to_string: _mruby_js_convert_symbol_to_string, _mruby_js_set_nil: _mruby_js_set_nil, _realloc: _realloc, _mruby_js_get_proc: _mruby_js_get_proc, _mruby_js_invoke_release_argv: _mruby_js_invoke_release_argv, _mruby_js_get_integer: _mruby_js_get_integer, _mruby_js_set_object_handle: _mruby_js_set_object_handle, _mruby_js_argument_type: _mruby_js_argument_type, _mruby_js_set_array_handle: _mruby_js_set_array_handle, _testSetjmp: _testSetjmp, _saveSetjmp: _saveSetjmp, _free: _free, _tolower: _tolower, _mruby_js_set_integer: _mruby_js_set_integer, _malloc: _malloc, _webruby_internal_run: _webruby_internal_run, _mrb_open: _mrb_open, _mruby_js_set_boolean: _mruby_js_set_boolean, _mruby_js_get_string_ptr: _mruby_js_get_string_ptr, _mruby_js_set_function_handle: _mruby_js_set_function_handle, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_ii: dynCall_ii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiii: dynCall_iiiii, dynCall_iiii: dynCall_iiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viiii: dynCall_viiii, dynCall_iii: dynCall_iii, dynCall_viiiiiii: dynCall_viiiiiii };
})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "copyTempDouble": copyTempDouble, "copyTempFloat": copyTempFloat, "min": Math_min, "invoke_ii": invoke_ii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiii": invoke_iiiii, "invoke_iiii": invoke_iiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viiii": invoke_viiii, "invoke_iii": invoke_iii, "invoke_viiiiiii": invoke_viiiiiii, "_strtoul": _strtoul, "_acosh": _acosh, "_isxdigit": _isxdigit, "_strtol": _strtol, "_fputc": _fputc, "_fwrite": _fwrite, "_frexp": _frexp, "_mktime": _mktime, "_cbrt": _cbrt, "_isspace": _isspace, "_read": _read, "__exit": __exit, "_js_release_object": _js_release_object, "_ceil": _ceil, "___js_is_array": ___js_is_array, "_js_get_root_object": _js_get_root_object, "_fmod": _fmod, "_strcmp": _strcmp, "_memchr": _memchr, "_llvm_va_end": _llvm_va_end, "_snprintf": _snprintf, "_fgetc": _fgetc, "_cosh": _cosh, "_hypot": _hypot, "_asin": _asin, "___setErrNo": ___setErrNo, "___js_fetch_argument": ___js_fetch_argument, "_js_invoke": _js_invoke, "_exit": _exit, "_isupper": _isupper, "_llvm_uadd_with_overflow_i32": _llvm_uadd_with_overflow_i32, "_localtime_r": _localtime_r, "_sinh": _sinh, "_js_create_empty_object": _js_create_empty_object, "_cos": _cos, "_putchar": _putchar, "_puts": _puts, "_erfc": _erfc, "_islower": _islower, "_acos": _acos, "___js_fill_return_arg": ___js_fill_return_arg, "___js_fetch_object": ___js_fetch_object, "_strncmp": _strncmp, "_tzset": _tzset, "_js_create_array": _js_create_array, "_ldexp": _ldexp, "_js_set_field": _js_set_field, "_isprint": _isprint, "_toupper": _toupper, "_printf": _printf, "_pread": _pread, "_log": _log, "_isalnum": _isalnum, "_fputs": _fputs, "_isalpha": _isalpha, "_log10": _log10, "___js_global_object": ___js_global_object, "_asinh": _asinh, "__reallyNegative": __reallyNegative, "__formatString": __formatString, "_gettimeofday": _gettimeofday, "_atoi": _atoi, "_llvm_pow_f64": _llvm_pow_f64, "_sbrk": _sbrk, "_tanh": _tanh, "___errno_location": ___errno_location, "_erf": _erf, "__parseInt": __parseInt, "_gmtime_r": _gmtime_r, "_sysconf": _sysconf, "_abort": _abort, "_fprintf": _fprintf, "___fpclassifyf": ___fpclassifyf, "_tan": _tan, "_feof": _feof, "_js_get_field": _js_get_field, "_floor": _floor, "_atanh": _atanh, "_sqrt": _sqrt, "_write": _write, "_sin": _sin, "_longjmp": _longjmp, "_atan": _atan, "___js_add_object": ___js_add_object, "___js_invoke_using_new": ___js_invoke_using_new, "_pwrite": _pwrite, "___js_is_floating_number": ___js_is_floating_number, "_atan2": _atan2, "_exp": _exp, "_time": _time, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "NaN": NaN, "Infinity": Infinity, "_stdout": _stdout, "_stderr": _stderr }, buffer);
var _strlen = Module["_strlen"] = asm["_strlen"];
var _mruby_js_invoke_fetch_argp = Module["_mruby_js_invoke_fetch_argp"] = asm["_mruby_js_invoke_fetch_argp"];
var _webruby_internal_run_source = Module["_webruby_internal_run_source"] = asm["_webruby_internal_run_source"];
var _mruby_js_set_float = Module["_mruby_js_set_float"] = asm["_mruby_js_set_float"];
var _mruby_js_invoke_alloc_argv = Module["_mruby_js_invoke_alloc_argv"] = asm["_mruby_js_invoke_alloc_argv"];
var _mruby_js_get_hash_handle = Module["_mruby_js_get_hash_handle"] = asm["_mruby_js_get_hash_handle"];
var _mrb_close = Module["_mrb_close"] = asm["_mrb_close"];
var _memcmp = Module["_memcmp"] = asm["_memcmp"];
var _mruby_js_set_string = Module["_mruby_js_set_string"] = asm["_mruby_js_set_string"];
var _mruby_js_get_float = Module["_mruby_js_get_float"] = asm["_mruby_js_get_float"];
var _mruby_js_get_string_len = Module["_mruby_js_get_string_len"] = asm["_mruby_js_get_string_len"];
var _memset = Module["_memset"] = asm["_memset"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _mruby_js_get_array_handle = Module["_mruby_js_get_array_handle"] = asm["_mruby_js_get_array_handle"];
var _webruby_internal_run_bytecode = Module["_webruby_internal_run_bytecode"] = asm["_webruby_internal_run_bytecode"];
var _mruby_js_name_error = Module["_mruby_js_name_error"] = asm["_mruby_js_name_error"];
var _mruby_js_invoke_proc = Module["_mruby_js_invoke_proc"] = asm["_mruby_js_invoke_proc"];
var _mruby_js_get_object_handle = Module["_mruby_js_get_object_handle"] = asm["_mruby_js_get_object_handle"];
var _mruby_js_convert_symbol_to_string = Module["_mruby_js_convert_symbol_to_string"] = asm["_mruby_js_convert_symbol_to_string"];
var _mruby_js_set_nil = Module["_mruby_js_set_nil"] = asm["_mruby_js_set_nil"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _mruby_js_get_proc = Module["_mruby_js_get_proc"] = asm["_mruby_js_get_proc"];
var _mruby_js_invoke_release_argv = Module["_mruby_js_invoke_release_argv"] = asm["_mruby_js_invoke_release_argv"];
var _mruby_js_get_integer = Module["_mruby_js_get_integer"] = asm["_mruby_js_get_integer"];
var _mruby_js_set_object_handle = Module["_mruby_js_set_object_handle"] = asm["_mruby_js_set_object_handle"];
var _mruby_js_argument_type = Module["_mruby_js_argument_type"] = asm["_mruby_js_argument_type"];
var _mruby_js_set_array_handle = Module["_mruby_js_set_array_handle"] = asm["_mruby_js_set_array_handle"];
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _free = Module["_free"] = asm["_free"];
var _tolower = Module["_tolower"] = asm["_tolower"];
var _mruby_js_set_integer = Module["_mruby_js_set_integer"] = asm["_mruby_js_set_integer"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _webruby_internal_run = Module["_webruby_internal_run"] = asm["_webruby_internal_run"];
var _mrb_open = Module["_mrb_open"] = asm["_mrb_open"];
var _mruby_js_set_boolean = Module["_mruby_js_set_boolean"] = asm["_mruby_js_set_boolean"];
var _mruby_js_get_string_ptr = Module["_mruby_js_get_string_ptr"] = asm["_mruby_js_get_string_ptr"];
var _mruby_js_set_function_handle = Module["_mruby_js_set_function_handle"] = asm["_mruby_js_set_function_handle"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(!Module['preRun'] || Module['preRun'].length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  var ret;
  var initialStackTop = STACKTOP;
  try {
    ret = Module['_main'](argc, argv, 0);
  }
  catch(e) {
    if (e.name == 'ExitStatus') {
      return e.status;
    } else if (e == 'SimulateInfiniteLoop') {
      Module['noExitRuntime'] = true;
    } else {
      throw e;
    }
  } finally {
    STACKTOP = initialStackTop;
  }
  return ret;
}
function run(args) {
  args = args || Module['arguments'];
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    var ret = 0;
    calledRun = true;
    if (Module['_main'] && shouldRunNow) {
      ret = Module['callMain'](args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
(function() {
  function WEBRUBY(opts) {
    if (!(this instanceof WEBRUBY)) {
      // Well, this is not perfect, but it can at least cover some cases.
      return new WEBRUBY(opts);
    }
    opts = opts || {};
    // Default print level is errors only
    this.print_level = opts.print_level || 1;
    this.mrb = _mrb_open();
  };
  WEBRUBY.prototype.close = function() {
    _mrb_close(this.mrb);
  };
  WEBRUBY.prototype.run = function() {
    _webruby_internal_run(this.mrb, this.print_level);
  };
  WEBRUBY.prototype.run_bytecode = function(bc) {
    var stack = Runtime.stackSave();
    var addr = Runtime.stackAlloc(bc.length);
    var ret;
    writeArrayToMemory(bc, addr);
    ret = _webruby_internal_run_bytecode(this.mrb, addr, this.print_level);
    Runtime.stackRestore(stack);
    return ret;
  };
  WEBRUBY.prototype.run_source = function(src) {
    var stack = Runtime.stackSave();
    var addr = Runtime.stackAlloc(src.length);
    var ret;
    writeStringToMemory(src, addr);
    ret = _webruby_internal_run_source(this.mrb, addr, this.print_level);
    Runtime.stackRestore(stack);
    return ret;
  };
  if (typeof window === 'object') {
    window['WEBRUBY'] = WEBRUBY;
  } else {
    global['WEBRUBY'] = WEBRUBY;
  }
}) ();
